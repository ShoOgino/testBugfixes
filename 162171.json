{"path":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,Predicate[BytesRef],boolean).mjava","commits":[{"id":"862ed062e72c1c01ecd8593b17804ac02b69cf0e","date":1486641184,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,Predicate[BytesRef],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing,\n                                                   String sort, String prefix, Predicate<BytesRef> termFilter, boolean intersectsCheck)\n    throws IOException {\n    \n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = global.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    DocSet fastForRandomSet = docs;\n    if (minDfFilterCache>0 && docs instanceof SortedIntDocSet) {\n      SortedIntDocSet sset = (SortedIntDocSet)docs;\n      fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());\n    }\n\n    IndexSchema schema = searcher.getSchema();\n    FieldType ft = schema.getFieldType(field);\n    assert !ft.isPointField(): \"Point Fields don't support enum method\";\n    \n    LeafReader r = searcher.getSlowAtomicReader();\n    \n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n    final NamedList<Integer> res = new NamedList<>();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef prefixTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      prefixTermBytes = new BytesRef(indexedPrefix);\n    }\n\n    Fields fields = r.fields();\n    Terms terms = fields==null ? null : fields.terms(field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator();\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (prefixTermBytes != null) {\n        if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (prefixTermBytes != null && !StringHelper.startsWith(term, prefixTermBytes))\n          break;\n\n        if (termFilter == null || termFilter.test(term)) {\n          int df = termsEnum.docFreq();\n\n          // If we are sorting, we can use df>min (rather than >=) since we\n          // are going in index order.  For certain term distributions this can\n          // make a large difference (for example, many terms with df=1).\n          if (df > 0 && df > min) {\n            int c;\n\n            if (df >= minDfFilterCache) {\n              // use the filter cache\n\n              if (deState == null) {\n                deState = new SolrIndexSearcher.DocsEnumState();\n                deState.fieldName = field;\n                deState.liveDocs = r.getLiveDocs();\n                deState.termsEnum = termsEnum;\n                deState.postingsEnum = postingsEnum;\n              }\n\n              if (intersectsCheck) {\n                c = searcher.intersects(docs, deState) ? 1 : 0;\n              } else {\n                c = searcher.numDocs(docs, deState);\n              }\n\n              postingsEnum = deState.postingsEnum;\n            } else {\n              // iterate over TermDocs to calculate the intersection\n\n              // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n              // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n              // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n              postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n              c = 0;\n\n              if (postingsEnum instanceof MultiPostingsEnum) {\n                MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n                int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n                \n                SEGMENTS_LOOP:\n                for (int subindex = 0; subindex < numSubs; subindex++) {\n                  MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                  if (sub.postingsEnum == null) continue;\n                  int base = sub.slice.start;\n                  int docid;\n                  while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                    if (fastForRandomSet.exists(docid + base)) {\n                      c++;\n                      if (intersectsCheck) {\n                        assert c==1;\n                        break SEGMENTS_LOOP;\n                      }\n                    }\n                  }\n                }\n              } else {\n                int docid;\n                while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.exists(docid)) {\n                    c++;\n                    if (intersectsCheck) {\n                      assert c==1;\n                      break;\n                    }\n                  }\n                }\n              }\n\n            }\n\n            if (sortByCount) {\n              if (c > min) {\n                BytesRef termCopy = BytesRef.deepCopyOf(term);\n                queue.add(new CountPair<>(termCopy, c));\n                if (queue.size() >= maxsize) min = queue.last().val;\n              }\n            } else {\n              if (c >= mincount && --off < 0) {\n                if (--lim < 0) break;\n                ft.indexedToReadable(term, charsRef);\n                res.add(charsRef.toString(), c);\n              }\n            }\n          }\n        }\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7679cc7d5b465ec8936979698cedf5fdbd71c95c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","date":1497408244,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,Predicate[BytesRef],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,Predicate[BytesRef],boolean).mjava","sourceNew":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing,\n                                                   String sort, String prefix, Predicate<BytesRef> termFilter, boolean intersectsCheck)\n    throws IOException {\n    \n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = global.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    DocSet fastForRandomSet = docs;\n    if (minDfFilterCache>0 && docs instanceof SortedIntDocSet) {\n      SortedIntDocSet sset = (SortedIntDocSet)docs;\n      fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());\n    }\n\n    IndexSchema schema = searcher.getSchema();\n    FieldType ft = schema.getFieldType(field);\n    assert !ft.isPointField(): \"Point Fields don't support enum method\";\n    \n    LeafReader r = searcher.getSlowAtomicReader();\n    \n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n    final NamedList<Integer> res = new NamedList<>();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef prefixTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      prefixTermBytes = new BytesRef(indexedPrefix);\n    }\n\n    Terms terms = r.terms(field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator();\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (prefixTermBytes != null) {\n        if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (prefixTermBytes != null && !StringHelper.startsWith(term, prefixTermBytes))\n          break;\n\n        if (termFilter == null || termFilter.test(term)) {\n          int df = termsEnum.docFreq();\n\n          // If we are sorting, we can use df>min (rather than >=) since we\n          // are going in index order.  For certain term distributions this can\n          // make a large difference (for example, many terms with df=1).\n          if (df > 0 && df > min) {\n            int c;\n\n            if (df >= minDfFilterCache) {\n              // use the filter cache\n\n              if (deState == null) {\n                deState = new SolrIndexSearcher.DocsEnumState();\n                deState.fieldName = field;\n                deState.liveDocs = r.getLiveDocs();\n                deState.termsEnum = termsEnum;\n                deState.postingsEnum = postingsEnum;\n              }\n\n              if (intersectsCheck) {\n                c = searcher.intersects(docs, deState) ? 1 : 0;\n              } else {\n                c = searcher.numDocs(docs, deState);\n              }\n\n              postingsEnum = deState.postingsEnum;\n            } else {\n              // iterate over TermDocs to calculate the intersection\n\n              // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n              // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n              // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n              postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n              c = 0;\n\n              if (postingsEnum instanceof MultiPostingsEnum) {\n                MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n                int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n                \n                SEGMENTS_LOOP:\n                for (int subindex = 0; subindex < numSubs; subindex++) {\n                  MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                  if (sub.postingsEnum == null) continue;\n                  int base = sub.slice.start;\n                  int docid;\n                  while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                    if (fastForRandomSet.exists(docid + base)) {\n                      c++;\n                      if (intersectsCheck) {\n                        assert c==1;\n                        break SEGMENTS_LOOP;\n                      }\n                    }\n                  }\n                }\n              } else {\n                int docid;\n                while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.exists(docid)) {\n                    c++;\n                    if (intersectsCheck) {\n                      assert c==1;\n                      break;\n                    }\n                  }\n                }\n              }\n\n            }\n\n            if (sortByCount) {\n              if (c > min) {\n                BytesRef termCopy = BytesRef.deepCopyOf(term);\n                queue.add(new CountPair<>(termCopy, c));\n                if (queue.size() >= maxsize) min = queue.last().val;\n              }\n            } else {\n              if (c >= mincount && --off < 0) {\n                if (--lim < 0) break;\n                ft.indexedToReadable(term, charsRef);\n                res.add(charsRef.toString(), c);\n              }\n            }\n          }\n        }\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing,\n                                                   String sort, String prefix, Predicate<BytesRef> termFilter, boolean intersectsCheck)\n    throws IOException {\n    \n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = global.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    DocSet fastForRandomSet = docs;\n    if (minDfFilterCache>0 && docs instanceof SortedIntDocSet) {\n      SortedIntDocSet sset = (SortedIntDocSet)docs;\n      fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());\n    }\n\n    IndexSchema schema = searcher.getSchema();\n    FieldType ft = schema.getFieldType(field);\n    assert !ft.isPointField(): \"Point Fields don't support enum method\";\n    \n    LeafReader r = searcher.getSlowAtomicReader();\n    \n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n    final NamedList<Integer> res = new NamedList<>();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef prefixTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      prefixTermBytes = new BytesRef(indexedPrefix);\n    }\n\n    Fields fields = r.fields();\n    Terms terms = fields==null ? null : fields.terms(field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator();\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (prefixTermBytes != null) {\n        if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (prefixTermBytes != null && !StringHelper.startsWith(term, prefixTermBytes))\n          break;\n\n        if (termFilter == null || termFilter.test(term)) {\n          int df = termsEnum.docFreq();\n\n          // If we are sorting, we can use df>min (rather than >=) since we\n          // are going in index order.  For certain term distributions this can\n          // make a large difference (for example, many terms with df=1).\n          if (df > 0 && df > min) {\n            int c;\n\n            if (df >= minDfFilterCache) {\n              // use the filter cache\n\n              if (deState == null) {\n                deState = new SolrIndexSearcher.DocsEnumState();\n                deState.fieldName = field;\n                deState.liveDocs = r.getLiveDocs();\n                deState.termsEnum = termsEnum;\n                deState.postingsEnum = postingsEnum;\n              }\n\n              if (intersectsCheck) {\n                c = searcher.intersects(docs, deState) ? 1 : 0;\n              } else {\n                c = searcher.numDocs(docs, deState);\n              }\n\n              postingsEnum = deState.postingsEnum;\n            } else {\n              // iterate over TermDocs to calculate the intersection\n\n              // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n              // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n              // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n              postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n              c = 0;\n\n              if (postingsEnum instanceof MultiPostingsEnum) {\n                MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n                int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n                \n                SEGMENTS_LOOP:\n                for (int subindex = 0; subindex < numSubs; subindex++) {\n                  MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                  if (sub.postingsEnum == null) continue;\n                  int base = sub.slice.start;\n                  int docid;\n                  while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                    if (fastForRandomSet.exists(docid + base)) {\n                      c++;\n                      if (intersectsCheck) {\n                        assert c==1;\n                        break SEGMENTS_LOOP;\n                      }\n                    }\n                  }\n                }\n              } else {\n                int docid;\n                while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.exists(docid)) {\n                    c++;\n                    if (intersectsCheck) {\n                      assert c==1;\n                      break;\n                    }\n                  }\n                }\n              }\n\n            }\n\n            if (sortByCount) {\n              if (c > min) {\n                BytesRef termCopy = BytesRef.deepCopyOf(term);\n                queue.add(new CountPair<>(termCopy, c));\n                if (queue.size() >= maxsize) min = queue.last().val;\n              }\n            } else {\n              if (c >= mincount && --off < 0) {\n                if (--lim < 0) break;\n                ft.indexedToReadable(term, charsRef);\n                res.add(charsRef.toString(), c);\n              }\n            }\n          }\n        }\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,Predicate[BytesRef],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,Predicate[BytesRef],boolean).mjava","sourceNew":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing,\n                                                   String sort, String prefix, Predicate<BytesRef> termFilter, boolean intersectsCheck)\n    throws IOException {\n    \n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = global.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    DocSet fastForRandomSet = docs;\n    if (minDfFilterCache>0 && docs instanceof SortedIntDocSet) {\n      SortedIntDocSet sset = (SortedIntDocSet)docs;\n      fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());\n    }\n\n    IndexSchema schema = searcher.getSchema();\n    FieldType ft = schema.getFieldType(field);\n    assert !ft.isPointField(): \"Point Fields don't support enum method\";\n    \n    LeafReader r = searcher.getSlowAtomicReader();\n    \n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n    final NamedList<Integer> res = new NamedList<>();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef prefixTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      prefixTermBytes = new BytesRef(indexedPrefix);\n    }\n\n    Terms terms = r.terms(field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator();\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (prefixTermBytes != null) {\n        if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (prefixTermBytes != null && !StringHelper.startsWith(term, prefixTermBytes))\n          break;\n\n        if (termFilter == null || termFilter.test(term)) {\n          int df = termsEnum.docFreq();\n\n          // If we are sorting, we can use df>min (rather than >=) since we\n          // are going in index order.  For certain term distributions this can\n          // make a large difference (for example, many terms with df=1).\n          if (df > 0 && df > min) {\n            int c;\n\n            if (df >= minDfFilterCache) {\n              // use the filter cache\n\n              if (deState == null) {\n                deState = new SolrIndexSearcher.DocsEnumState();\n                deState.fieldName = field;\n                deState.liveDocs = r.getLiveDocs();\n                deState.termsEnum = termsEnum;\n                deState.postingsEnum = postingsEnum;\n              }\n\n              if (intersectsCheck) {\n                c = searcher.intersects(docs, deState) ? 1 : 0;\n              } else {\n                c = searcher.numDocs(docs, deState);\n              }\n\n              postingsEnum = deState.postingsEnum;\n            } else {\n              // iterate over TermDocs to calculate the intersection\n\n              // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n              // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n              // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n              postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n              c = 0;\n\n              if (postingsEnum instanceof MultiPostingsEnum) {\n                MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n                int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n                \n                SEGMENTS_LOOP:\n                for (int subindex = 0; subindex < numSubs; subindex++) {\n                  MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                  if (sub.postingsEnum == null) continue;\n                  int base = sub.slice.start;\n                  int docid;\n                  while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                    if (fastForRandomSet.exists(docid + base)) {\n                      c++;\n                      if (intersectsCheck) {\n                        assert c==1;\n                        break SEGMENTS_LOOP;\n                      }\n                    }\n                  }\n                }\n              } else {\n                int docid;\n                while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.exists(docid)) {\n                    c++;\n                    if (intersectsCheck) {\n                      assert c==1;\n                      break;\n                    }\n                  }\n                }\n              }\n\n            }\n\n            if (sortByCount) {\n              if (c > min) {\n                BytesRef termCopy = BytesRef.deepCopyOf(term);\n                queue.add(new CountPair<>(termCopy, c));\n                if (queue.size() >= maxsize) min = queue.last().val;\n              }\n            } else {\n              if (c >= mincount && --off < 0) {\n                if (--lim < 0) break;\n                ft.indexedToReadable(term, charsRef);\n                res.add(charsRef.toString(), c);\n              }\n            }\n          }\n        }\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing,\n                                                   String sort, String prefix, Predicate<BytesRef> termFilter, boolean intersectsCheck)\n    throws IOException {\n    \n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = global.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    DocSet fastForRandomSet = docs;\n    if (minDfFilterCache>0 && docs instanceof SortedIntDocSet) {\n      SortedIntDocSet sset = (SortedIntDocSet)docs;\n      fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());\n    }\n\n    IndexSchema schema = searcher.getSchema();\n    FieldType ft = schema.getFieldType(field);\n    assert !ft.isPointField(): \"Point Fields don't support enum method\";\n    \n    LeafReader r = searcher.getSlowAtomicReader();\n    \n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n    final NamedList<Integer> res = new NamedList<>();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef prefixTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      prefixTermBytes = new BytesRef(indexedPrefix);\n    }\n\n    Fields fields = r.fields();\n    Terms terms = fields==null ? null : fields.terms(field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator();\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (prefixTermBytes != null) {\n        if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (prefixTermBytes != null && !StringHelper.startsWith(term, prefixTermBytes))\n          break;\n\n        if (termFilter == null || termFilter.test(term)) {\n          int df = termsEnum.docFreq();\n\n          // If we are sorting, we can use df>min (rather than >=) since we\n          // are going in index order.  For certain term distributions this can\n          // make a large difference (for example, many terms with df=1).\n          if (df > 0 && df > min) {\n            int c;\n\n            if (df >= minDfFilterCache) {\n              // use the filter cache\n\n              if (deState == null) {\n                deState = new SolrIndexSearcher.DocsEnumState();\n                deState.fieldName = field;\n                deState.liveDocs = r.getLiveDocs();\n                deState.termsEnum = termsEnum;\n                deState.postingsEnum = postingsEnum;\n              }\n\n              if (intersectsCheck) {\n                c = searcher.intersects(docs, deState) ? 1 : 0;\n              } else {\n                c = searcher.numDocs(docs, deState);\n              }\n\n              postingsEnum = deState.postingsEnum;\n            } else {\n              // iterate over TermDocs to calculate the intersection\n\n              // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n              // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n              // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n              postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n              c = 0;\n\n              if (postingsEnum instanceof MultiPostingsEnum) {\n                MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n                int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n                \n                SEGMENTS_LOOP:\n                for (int subindex = 0; subindex < numSubs; subindex++) {\n                  MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                  if (sub.postingsEnum == null) continue;\n                  int base = sub.slice.start;\n                  int docid;\n                  while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                    if (fastForRandomSet.exists(docid + base)) {\n                      c++;\n                      if (intersectsCheck) {\n                        assert c==1;\n                        break SEGMENTS_LOOP;\n                      }\n                    }\n                  }\n                }\n              } else {\n                int docid;\n                while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.exists(docid)) {\n                    c++;\n                    if (intersectsCheck) {\n                      assert c==1;\n                      break;\n                    }\n                  }\n                }\n              }\n\n            }\n\n            if (sortByCount) {\n              if (c > min) {\n                BytesRef termCopy = BytesRef.deepCopyOf(term);\n                queue.add(new CountPair<>(termCopy, c));\n                if (queue.size() >= maxsize) min = queue.last().val;\n              }\n            } else {\n              if (c >= mincount && --off < 0) {\n                if (--lim < 0) break;\n                ft.indexedToReadable(term, charsRef);\n                res.add(charsRef.toString(), c);\n              }\n            }\n          }\n        }\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,Predicate[BytesRef],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,Predicate[BytesRef],boolean).mjava","sourceNew":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing,\n                                                   String sort, String prefix, Predicate<BytesRef> termFilter, boolean intersectsCheck)\n    throws IOException {\n    \n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = global.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    DocSet fastForRandomSet = docs;\n    if (minDfFilterCache>0 && docs instanceof SortedIntDocSet) {\n      SortedIntDocSet sset = (SortedIntDocSet)docs;\n      fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());\n    }\n\n    IndexSchema schema = searcher.getSchema();\n    FieldType ft = schema.getFieldType(field);\n    assert !ft.isPointField(): \"Point Fields don't support enum method\";\n    \n    LeafReader r = searcher.getSlowAtomicReader();\n    \n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n    final NamedList<Integer> res = new NamedList<>();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef prefixTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      prefixTermBytes = new BytesRef(indexedPrefix);\n    }\n\n    Terms terms = r.terms(field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator();\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (prefixTermBytes != null) {\n        if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (prefixTermBytes != null && !StringHelper.startsWith(term, prefixTermBytes))\n          break;\n\n        if (termFilter == null || termFilter.test(term)) {\n          int df = termsEnum.docFreq();\n\n          // If we are sorting, we can use df>min (rather than >=) since we\n          // are going in index order.  For certain term distributions this can\n          // make a large difference (for example, many terms with df=1).\n          if (df > 0 && df > min) {\n            int c;\n\n            if (df >= minDfFilterCache) {\n              // use the filter cache\n\n              if (deState == null) {\n                deState = new SolrIndexSearcher.DocsEnumState();\n                deState.fieldName = field;\n                deState.liveDocs = r.getLiveDocs();\n                deState.termsEnum = termsEnum;\n                deState.postingsEnum = postingsEnum;\n              }\n\n              if (intersectsCheck) {\n                c = searcher.intersects(docs, deState) ? 1 : 0;\n              } else {\n                c = searcher.numDocs(docs, deState);\n              }\n\n              postingsEnum = deState.postingsEnum;\n            } else {\n              // iterate over TermDocs to calculate the intersection\n\n              // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n              // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n              // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n              postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n              c = 0;\n\n              if (postingsEnum instanceof MultiPostingsEnum) {\n                MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n                int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n                \n                SEGMENTS_LOOP:\n                for (int subindex = 0; subindex < numSubs; subindex++) {\n                  MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                  if (sub.postingsEnum == null) continue;\n                  int base = sub.slice.start;\n                  int docid;\n                  while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                    if (fastForRandomSet.exists(docid + base)) {\n                      c++;\n                      if (intersectsCheck) {\n                        assert c==1;\n                        break SEGMENTS_LOOP;\n                      }\n                    }\n                  }\n                }\n              } else {\n                int docid;\n                while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.exists(docid)) {\n                    c++;\n                    if (intersectsCheck) {\n                      assert c==1;\n                      break;\n                    }\n                  }\n                }\n              }\n\n            }\n\n            if (sortByCount) {\n              if (c > min) {\n                BytesRef termCopy = BytesRef.deepCopyOf(term);\n                queue.add(new CountPair<>(termCopy, c));\n                if (queue.size() >= maxsize) min = queue.last().val;\n              }\n            } else {\n              if (c >= mincount && --off < 0) {\n                if (--lim < 0) break;\n                ft.indexedToReadable(term, charsRef);\n                res.add(charsRef.toString(), c);\n              }\n            }\n          }\n        }\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing,\n                                                   String sort, String prefix, Predicate<BytesRef> termFilter, boolean intersectsCheck)\n    throws IOException {\n    \n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = global.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    DocSet fastForRandomSet = docs;\n    if (minDfFilterCache>0 && docs instanceof SortedIntDocSet) {\n      SortedIntDocSet sset = (SortedIntDocSet)docs;\n      fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());\n    }\n\n    IndexSchema schema = searcher.getSchema();\n    FieldType ft = schema.getFieldType(field);\n    assert !ft.isPointField(): \"Point Fields don't support enum method\";\n    \n    LeafReader r = searcher.getSlowAtomicReader();\n    \n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n    final NamedList<Integer> res = new NamedList<>();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef prefixTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      prefixTermBytes = new BytesRef(indexedPrefix);\n    }\n\n    Fields fields = r.fields();\n    Terms terms = fields==null ? null : fields.terms(field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator();\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (prefixTermBytes != null) {\n        if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (prefixTermBytes != null && !StringHelper.startsWith(term, prefixTermBytes))\n          break;\n\n        if (termFilter == null || termFilter.test(term)) {\n          int df = termsEnum.docFreq();\n\n          // If we are sorting, we can use df>min (rather than >=) since we\n          // are going in index order.  For certain term distributions this can\n          // make a large difference (for example, many terms with df=1).\n          if (df > 0 && df > min) {\n            int c;\n\n            if (df >= minDfFilterCache) {\n              // use the filter cache\n\n              if (deState == null) {\n                deState = new SolrIndexSearcher.DocsEnumState();\n                deState.fieldName = field;\n                deState.liveDocs = r.getLiveDocs();\n                deState.termsEnum = termsEnum;\n                deState.postingsEnum = postingsEnum;\n              }\n\n              if (intersectsCheck) {\n                c = searcher.intersects(docs, deState) ? 1 : 0;\n              } else {\n                c = searcher.numDocs(docs, deState);\n              }\n\n              postingsEnum = deState.postingsEnum;\n            } else {\n              // iterate over TermDocs to calculate the intersection\n\n              // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n              // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n              // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n              postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n              c = 0;\n\n              if (postingsEnum instanceof MultiPostingsEnum) {\n                MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n                int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n                \n                SEGMENTS_LOOP:\n                for (int subindex = 0; subindex < numSubs; subindex++) {\n                  MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                  if (sub.postingsEnum == null) continue;\n                  int base = sub.slice.start;\n                  int docid;\n                  while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                    if (fastForRandomSet.exists(docid + base)) {\n                      c++;\n                      if (intersectsCheck) {\n                        assert c==1;\n                        break SEGMENTS_LOOP;\n                      }\n                    }\n                  }\n                }\n              } else {\n                int docid;\n                while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.exists(docid)) {\n                    c++;\n                    if (intersectsCheck) {\n                      assert c==1;\n                      break;\n                    }\n                  }\n                }\n              }\n\n            }\n\n            if (sortByCount) {\n              if (c > min) {\n                BytesRef termCopy = BytesRef.deepCopyOf(term);\n                queue.add(new CountPair<>(termCopy, c));\n                if (queue.size() >= maxsize) min = queue.last().val;\n              }\n            } else {\n              if (c >= mincount && --off < 0) {\n                if (--lim < 0) break;\n                ft.indexedToReadable(term, charsRef);\n                res.add(charsRef.toString(), c);\n              }\n            }\n          }\n        }\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bf29cc8a76949bbcbc15b386a9e46a533f5b3332","date":1527778512,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,Predicate[BytesRef],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,Predicate[BytesRef],boolean).mjava","sourceNew":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing,\n                                                   String sort, String prefix, Predicate<BytesRef> termFilter, boolean intersectsCheck)\n    throws IOException {\n    \n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = global.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    DocSet fastForRandomSet = docs;\n    if (minDfFilterCache>0 && docs instanceof SortedIntDocSet) {\n      SortedIntDocSet sset = (SortedIntDocSet)docs;\n      fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());\n    }\n\n    IndexSchema schema = searcher.getSchema();\n    FieldType ft = schema.getFieldType(field);\n    assert !ft.isPointField(): \"Point Fields don't support enum method\";\n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n    final NamedList<Integer> res = new NamedList<>();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef prefixTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      prefixTermBytes = new BytesRef(indexedPrefix);\n    }\n\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator();\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (prefixTermBytes != null) {\n        if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (prefixTermBytes != null && !StringHelper.startsWith(term, prefixTermBytes))\n          break;\n\n        if (termFilter == null || termFilter.test(term)) {\n          int df = termsEnum.docFreq();\n\n          // If we are sorting, we can use df>min (rather than >=) since we\n          // are going in index order.  For certain term distributions this can\n          // make a large difference (for example, many terms with df=1).\n          if (df > 0 && df > min) {\n            int c;\n\n            if (df >= minDfFilterCache) {\n              // use the filter cache\n\n              if (deState == null) {\n                deState = new SolrIndexSearcher.DocsEnumState();\n                deState.fieldName = field;\n                deState.liveDocs = searcher.getLiveDocsBits();\n                deState.termsEnum = termsEnum;\n                deState.postingsEnum = postingsEnum;\n              }\n\n              if (intersectsCheck) {\n                c = searcher.intersects(docs, deState) ? 1 : 0;\n              } else {\n                c = searcher.numDocs(docs, deState);\n              }\n\n              postingsEnum = deState.postingsEnum;\n            } else {\n              // iterate over TermDocs to calculate the intersection\n\n              // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n              // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n              // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n              postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n              c = 0;\n\n              if (postingsEnum instanceof MultiPostingsEnum) {\n                MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n                int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n                \n                SEGMENTS_LOOP:\n                for (int subindex = 0; subindex < numSubs; subindex++) {\n                  MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                  if (sub.postingsEnum == null) continue;\n                  int base = sub.slice.start;\n                  int docid;\n                  while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                    if (fastForRandomSet.exists(docid + base)) {\n                      c++;\n                      if (intersectsCheck) {\n                        assert c==1;\n                        break SEGMENTS_LOOP;\n                      }\n                    }\n                  }\n                }\n              } else {\n                int docid;\n                while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.exists(docid)) {\n                    c++;\n                    if (intersectsCheck) {\n                      assert c==1;\n                      break;\n                    }\n                  }\n                }\n              }\n\n            }\n\n            if (sortByCount) {\n              if (c > min) {\n                BytesRef termCopy = BytesRef.deepCopyOf(term);\n                queue.add(new CountPair<>(termCopy, c));\n                if (queue.size() >= maxsize) min = queue.last().val;\n              }\n            } else {\n              if (c >= mincount && --off < 0) {\n                if (--lim < 0) break;\n                ft.indexedToReadable(term, charsRef);\n                res.add(charsRef.toString(), c);\n              }\n            }\n          }\n        }\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing,\n                                                   String sort, String prefix, Predicate<BytesRef> termFilter, boolean intersectsCheck)\n    throws IOException {\n    \n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = global.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    DocSet fastForRandomSet = docs;\n    if (minDfFilterCache>0 && docs instanceof SortedIntDocSet) {\n      SortedIntDocSet sset = (SortedIntDocSet)docs;\n      fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());\n    }\n\n    IndexSchema schema = searcher.getSchema();\n    FieldType ft = schema.getFieldType(field);\n    assert !ft.isPointField(): \"Point Fields don't support enum method\";\n    \n    LeafReader r = searcher.getSlowAtomicReader();\n    \n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n    final NamedList<Integer> res = new NamedList<>();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef prefixTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      prefixTermBytes = new BytesRef(indexedPrefix);\n    }\n\n    Terms terms = r.terms(field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator();\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (prefixTermBytes != null) {\n        if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (prefixTermBytes != null && !StringHelper.startsWith(term, prefixTermBytes))\n          break;\n\n        if (termFilter == null || termFilter.test(term)) {\n          int df = termsEnum.docFreq();\n\n          // If we are sorting, we can use df>min (rather than >=) since we\n          // are going in index order.  For certain term distributions this can\n          // make a large difference (for example, many terms with df=1).\n          if (df > 0 && df > min) {\n            int c;\n\n            if (df >= minDfFilterCache) {\n              // use the filter cache\n\n              if (deState == null) {\n                deState = new SolrIndexSearcher.DocsEnumState();\n                deState.fieldName = field;\n                deState.liveDocs = r.getLiveDocs();\n                deState.termsEnum = termsEnum;\n                deState.postingsEnum = postingsEnum;\n              }\n\n              if (intersectsCheck) {\n                c = searcher.intersects(docs, deState) ? 1 : 0;\n              } else {\n                c = searcher.numDocs(docs, deState);\n              }\n\n              postingsEnum = deState.postingsEnum;\n            } else {\n              // iterate over TermDocs to calculate the intersection\n\n              // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n              // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n              // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n              postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n              c = 0;\n\n              if (postingsEnum instanceof MultiPostingsEnum) {\n                MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n                int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n                \n                SEGMENTS_LOOP:\n                for (int subindex = 0; subindex < numSubs; subindex++) {\n                  MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                  if (sub.postingsEnum == null) continue;\n                  int base = sub.slice.start;\n                  int docid;\n                  while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                    if (fastForRandomSet.exists(docid + base)) {\n                      c++;\n                      if (intersectsCheck) {\n                        assert c==1;\n                        break SEGMENTS_LOOP;\n                      }\n                    }\n                  }\n                }\n              } else {\n                int docid;\n                while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.exists(docid)) {\n                    c++;\n                    if (intersectsCheck) {\n                      assert c==1;\n                      break;\n                    }\n                  }\n                }\n              }\n\n            }\n\n            if (sortByCount) {\n              if (c > min) {\n                BytesRef termCopy = BytesRef.deepCopyOf(term);\n                queue.add(new CountPair<>(termCopy, c));\n                if (queue.size() >= maxsize) min = queue.last().val;\n              }\n            } else {\n              if (c >= mincount && --off < 0) {\n                if (--lim < 0) break;\n                ft.indexedToReadable(term, charsRef);\n                res.add(charsRef.toString(), c);\n              }\n            }\n          }\n        }\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,Predicate[BytesRef],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,Predicate[BytesRef],boolean).mjava","sourceNew":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing,\n                                                   String sort, String prefix, Predicate<BytesRef> termFilter, boolean intersectsCheck)\n    throws IOException {\n    \n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = global.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    DocSet fastForRandomSet = docs;\n    if (minDfFilterCache>0 && docs instanceof SortedIntDocSet) {\n      SortedIntDocSet sset = (SortedIntDocSet)docs;\n      fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());\n    }\n\n    IndexSchema schema = searcher.getSchema();\n    FieldType ft = schema.getFieldType(field);\n    assert !ft.isPointField(): \"Point Fields don't support enum method\";\n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n    final NamedList<Integer> res = new NamedList<>();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef prefixTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      prefixTermBytes = new BytesRef(indexedPrefix);\n    }\n\n    Terms terms = MultiTerms.getTerms(searcher.getIndexReader(), field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator();\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (prefixTermBytes != null) {\n        if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (prefixTermBytes != null && !StringHelper.startsWith(term, prefixTermBytes))\n          break;\n\n        if (termFilter == null || termFilter.test(term)) {\n          int df = termsEnum.docFreq();\n\n          // If we are sorting, we can use df>min (rather than >=) since we\n          // are going in index order.  For certain term distributions this can\n          // make a large difference (for example, many terms with df=1).\n          if (df > 0 && df > min) {\n            int c;\n\n            if (df >= minDfFilterCache) {\n              // use the filter cache\n\n              if (deState == null) {\n                deState = new SolrIndexSearcher.DocsEnumState();\n                deState.fieldName = field;\n                deState.liveDocs = searcher.getLiveDocsBits();\n                deState.termsEnum = termsEnum;\n                deState.postingsEnum = postingsEnum;\n              }\n\n              if (intersectsCheck) {\n                c = searcher.intersects(docs, deState) ? 1 : 0;\n              } else {\n                c = searcher.numDocs(docs, deState);\n              }\n\n              postingsEnum = deState.postingsEnum;\n            } else {\n              // iterate over TermDocs to calculate the intersection\n\n              // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n              // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n              // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n              postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n              c = 0;\n\n              if (postingsEnum instanceof MultiPostingsEnum) {\n                MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n                int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n                \n                SEGMENTS_LOOP:\n                for (int subindex = 0; subindex < numSubs; subindex++) {\n                  MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                  if (sub.postingsEnum == null) continue;\n                  int base = sub.slice.start;\n                  int docid;\n                  while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                    if (fastForRandomSet.exists(docid + base)) {\n                      c++;\n                      if (intersectsCheck) {\n                        assert c==1;\n                        break SEGMENTS_LOOP;\n                      }\n                    }\n                  }\n                }\n              } else {\n                int docid;\n                while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.exists(docid)) {\n                    c++;\n                    if (intersectsCheck) {\n                      assert c==1;\n                      break;\n                    }\n                  }\n                }\n              }\n\n            }\n\n            if (sortByCount) {\n              if (c > min) {\n                BytesRef termCopy = BytesRef.deepCopyOf(term);\n                queue.add(new CountPair<>(termCopy, c));\n                if (queue.size() >= maxsize) min = queue.last().val;\n              }\n            } else {\n              if (c >= mincount && --off < 0) {\n                if (--lim < 0) break;\n                ft.indexedToReadable(term, charsRef);\n                res.add(charsRef.toString(), c);\n              }\n            }\n          }\n        }\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing,\n                                                   String sort, String prefix, Predicate<BytesRef> termFilter, boolean intersectsCheck)\n    throws IOException {\n    \n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = global.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    DocSet fastForRandomSet = docs;\n    if (minDfFilterCache>0 && docs instanceof SortedIntDocSet) {\n      SortedIntDocSet sset = (SortedIntDocSet)docs;\n      fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());\n    }\n\n    IndexSchema schema = searcher.getSchema();\n    FieldType ft = schema.getFieldType(field);\n    assert !ft.isPointField(): \"Point Fields don't support enum method\";\n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n    final NamedList<Integer> res = new NamedList<>();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef prefixTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      prefixTermBytes = new BytesRef(indexedPrefix);\n    }\n\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator();\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (prefixTermBytes != null) {\n        if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (prefixTermBytes != null && !StringHelper.startsWith(term, prefixTermBytes))\n          break;\n\n        if (termFilter == null || termFilter.test(term)) {\n          int df = termsEnum.docFreq();\n\n          // If we are sorting, we can use df>min (rather than >=) since we\n          // are going in index order.  For certain term distributions this can\n          // make a large difference (for example, many terms with df=1).\n          if (df > 0 && df > min) {\n            int c;\n\n            if (df >= minDfFilterCache) {\n              // use the filter cache\n\n              if (deState == null) {\n                deState = new SolrIndexSearcher.DocsEnumState();\n                deState.fieldName = field;\n                deState.liveDocs = searcher.getLiveDocsBits();\n                deState.termsEnum = termsEnum;\n                deState.postingsEnum = postingsEnum;\n              }\n\n              if (intersectsCheck) {\n                c = searcher.intersects(docs, deState) ? 1 : 0;\n              } else {\n                c = searcher.numDocs(docs, deState);\n              }\n\n              postingsEnum = deState.postingsEnum;\n            } else {\n              // iterate over TermDocs to calculate the intersection\n\n              // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n              // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n              // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n              postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n              c = 0;\n\n              if (postingsEnum instanceof MultiPostingsEnum) {\n                MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n                int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n                \n                SEGMENTS_LOOP:\n                for (int subindex = 0; subindex < numSubs; subindex++) {\n                  MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                  if (sub.postingsEnum == null) continue;\n                  int base = sub.slice.start;\n                  int docid;\n                  while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                    if (fastForRandomSet.exists(docid + base)) {\n                      c++;\n                      if (intersectsCheck) {\n                        assert c==1;\n                        break SEGMENTS_LOOP;\n                      }\n                    }\n                  }\n                }\n              } else {\n                int docid;\n                while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.exists(docid)) {\n                    c++;\n                    if (intersectsCheck) {\n                      assert c==1;\n                      break;\n                    }\n                  }\n                }\n              }\n\n            }\n\n            if (sortByCount) {\n              if (c > min) {\n                BytesRef termCopy = BytesRef.deepCopyOf(term);\n                queue.add(new CountPair<>(termCopy, c));\n                if (queue.size() >= maxsize) min = queue.last().val;\n              }\n            } else {\n              if (c >= mincount && --off < 0) {\n                if (--lim < 0) break;\n                ft.indexedToReadable(term, charsRef);\n                res.add(charsRef.toString(), c);\n              }\n            }\n          }\n        }\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7679cc7d5b465ec8936979698cedf5fdbd71c95c","date":1566227764,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,Predicate[BytesRef],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,Predicate[BytesRef],boolean).mjava","sourceNew":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing,\n                                                   String sort, String prefix, Predicate<BytesRef> termFilter, boolean intersectsCheck)\n    throws IOException {\n    \n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    final NamedList<Integer> res = new NamedList<>();\n    if (limit == 0) {\n      return finalize(res, searcher, docs, field, missing);\n    }\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = global.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    DocSet fastForRandomSet = docs;\n    if (minDfFilterCache>0 && docs instanceof SortedIntDocSet) {\n      SortedIntDocSet sset = (SortedIntDocSet)docs;\n      fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());\n    }\n\n    IndexSchema schema = searcher.getSchema();\n    FieldType ft = schema.getFieldType(field);\n    assert !ft.isPointField(): \"Point Fields don't support enum method\";\n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef prefixTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      prefixTermBytes = new BytesRef(indexedPrefix);\n    }\n\n    Terms terms = MultiTerms.getTerms(searcher.getIndexReader(), field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator();\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (prefixTermBytes != null) {\n        if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (prefixTermBytes != null && !StringHelper.startsWith(term, prefixTermBytes))\n          break;\n\n        if (termFilter == null || termFilter.test(term)) {\n          int df = termsEnum.docFreq();\n\n          // If we are sorting, we can use df>min (rather than >=) since we\n          // are going in index order.  For certain term distributions this can\n          // make a large difference (for example, many terms with df=1).\n          if (df > 0 && df > min) {\n            int c;\n\n            if (df >= minDfFilterCache) {\n              // use the filter cache\n\n              if (deState == null) {\n                deState = new SolrIndexSearcher.DocsEnumState();\n                deState.fieldName = field;\n                deState.liveDocs = searcher.getLiveDocsBits();\n                deState.termsEnum = termsEnum;\n                deState.postingsEnum = postingsEnum;\n              }\n\n              if (intersectsCheck) {\n                c = searcher.intersects(docs, deState) ? 1 : 0;\n              } else {\n                c = searcher.numDocs(docs, deState);\n              }\n\n              postingsEnum = deState.postingsEnum;\n            } else {\n              // iterate over TermDocs to calculate the intersection\n\n              // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n              // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n              // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n              postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n              c = 0;\n\n              if (postingsEnum instanceof MultiPostingsEnum) {\n                MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n                int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n                \n                SEGMENTS_LOOP:\n                for (int subindex = 0; subindex < numSubs; subindex++) {\n                  MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                  if (sub.postingsEnum == null) continue;\n                  int base = sub.slice.start;\n                  int docid;\n                  while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                    if (fastForRandomSet.exists(docid + base)) {\n                      c++;\n                      if (intersectsCheck) {\n                        assert c==1;\n                        break SEGMENTS_LOOP;\n                      }\n                    }\n                  }\n                }\n              } else {\n                int docid;\n                while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.exists(docid)) {\n                    c++;\n                    if (intersectsCheck) {\n                      assert c==1;\n                      break;\n                    }\n                  }\n                }\n              }\n\n            }\n\n            if (sortByCount) {\n              if (c > min) {\n                BytesRef termCopy = BytesRef.deepCopyOf(term);\n                queue.add(new CountPair<>(termCopy, c));\n                if (queue.size() >= maxsize) min = queue.last().val;\n              }\n            } else {\n              if (c >= mincount && --off < 0) {\n                if (--lim < 0) break;\n                ft.indexedToReadable(term, charsRef);\n                res.add(charsRef.toString(), c);\n              }\n            }\n          }\n        }\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    return finalize(res, searcher, docs, field, missing);\n  }\n\n","sourceOld":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing,\n                                                   String sort, String prefix, Predicate<BytesRef> termFilter, boolean intersectsCheck)\n    throws IOException {\n    \n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = global.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    DocSet fastForRandomSet = docs;\n    if (minDfFilterCache>0 && docs instanceof SortedIntDocSet) {\n      SortedIntDocSet sset = (SortedIntDocSet)docs;\n      fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());\n    }\n\n    IndexSchema schema = searcher.getSchema();\n    FieldType ft = schema.getFieldType(field);\n    assert !ft.isPointField(): \"Point Fields don't support enum method\";\n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n    final NamedList<Integer> res = new NamedList<>();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef prefixTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      prefixTermBytes = new BytesRef(indexedPrefix);\n    }\n\n    Terms terms = MultiTerms.getTerms(searcher.getIndexReader(), field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator();\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (prefixTermBytes != null) {\n        if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (prefixTermBytes != null && !StringHelper.startsWith(term, prefixTermBytes))\n          break;\n\n        if (termFilter == null || termFilter.test(term)) {\n          int df = termsEnum.docFreq();\n\n          // If we are sorting, we can use df>min (rather than >=) since we\n          // are going in index order.  For certain term distributions this can\n          // make a large difference (for example, many terms with df=1).\n          if (df > 0 && df > min) {\n            int c;\n\n            if (df >= minDfFilterCache) {\n              // use the filter cache\n\n              if (deState == null) {\n                deState = new SolrIndexSearcher.DocsEnumState();\n                deState.fieldName = field;\n                deState.liveDocs = searcher.getLiveDocsBits();\n                deState.termsEnum = termsEnum;\n                deState.postingsEnum = postingsEnum;\n              }\n\n              if (intersectsCheck) {\n                c = searcher.intersects(docs, deState) ? 1 : 0;\n              } else {\n                c = searcher.numDocs(docs, deState);\n              }\n\n              postingsEnum = deState.postingsEnum;\n            } else {\n              // iterate over TermDocs to calculate the intersection\n\n              // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n              // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n              // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n              postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n              c = 0;\n\n              if (postingsEnum instanceof MultiPostingsEnum) {\n                MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n                int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n                \n                SEGMENTS_LOOP:\n                for (int subindex = 0; subindex < numSubs; subindex++) {\n                  MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                  if (sub.postingsEnum == null) continue;\n                  int base = sub.slice.start;\n                  int docid;\n                  while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                    if (fastForRandomSet.exists(docid + base)) {\n                      c++;\n                      if (intersectsCheck) {\n                        assert c==1;\n                        break SEGMENTS_LOOP;\n                      }\n                    }\n                  }\n                }\n              } else {\n                int docid;\n                while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.exists(docid)) {\n                    c++;\n                    if (intersectsCheck) {\n                      assert c==1;\n                      break;\n                    }\n                  }\n                }\n              }\n\n            }\n\n            if (sortByCount) {\n              if (c > min) {\n                BytesRef termCopy = BytesRef.deepCopyOf(term);\n                queue.add(new CountPair<>(termCopy, c));\n                if (queue.size() >= maxsize) min = queue.last().val;\n              }\n            } else {\n              if (c >= mincount && --off < 0) {\n                if (--lim < 0) break;\n                ft.indexedToReadable(term, charsRef);\n                res.add(charsRef.toString(), c);\n              }\n            }\n          }\n        }\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    return res;\n  }\n\n","bugFix":["862ed062e72c1c01ecd8593b17804ac02b69cf0e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7","date":1582642100,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,Predicate[BytesRef],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,Predicate[BytesRef],boolean).mjava","sourceNew":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing,\n                                                   String sort, String prefix, Predicate<BytesRef> termFilter, boolean intersectsCheck)\n    throws IOException {\n    \n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    final NamedList<Integer> res = new NamedList<>();\n    if (limit == 0) {\n      return finalize(res, searcher, docs, field, missing);\n    }\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = global.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    Bits fastForRandomSet;\n    if (minDfFilterCache <= 0) {\n      fastForRandomSet = null;\n    } else {\n      fastForRandomSet = docs.getBits();\n    }\n\n    IndexSchema schema = searcher.getSchema();\n    FieldType ft = schema.getFieldType(field);\n    assert !ft.isPointField(): \"Point Fields don't support enum method\";\n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef prefixTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      prefixTermBytes = new BytesRef(indexedPrefix);\n    }\n\n    Terms terms = MultiTerms.getTerms(searcher.getIndexReader(), field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator();\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (prefixTermBytes != null) {\n        if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (prefixTermBytes != null && !StringHelper.startsWith(term, prefixTermBytes))\n          break;\n\n        if (termFilter == null || termFilter.test(term)) {\n          int df = termsEnum.docFreq();\n\n          // If we are sorting, we can use df>min (rather than >=) since we\n          // are going in index order.  For certain term distributions this can\n          // make a large difference (for example, many terms with df=1).\n          if (df > 0 && df > min) {\n            int c;\n\n            if (df >= minDfFilterCache) {\n              // use the filter cache\n\n              if (deState == null) {\n                deState = new SolrIndexSearcher.DocsEnumState();\n                deState.fieldName = field;\n                deState.liveDocs = searcher.getLiveDocsBits();\n                deState.termsEnum = termsEnum;\n                deState.postingsEnum = postingsEnum;\n              }\n\n              if (intersectsCheck) {\n                c = searcher.intersects(docs, deState) ? 1 : 0;\n              } else {\n                c = searcher.numDocs(docs, deState);\n              }\n\n              postingsEnum = deState.postingsEnum;\n            } else {\n              // iterate over TermDocs to calculate the intersection\n\n              // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n              // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n              // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n              postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n              c = 0;\n\n              if (postingsEnum instanceof MultiPostingsEnum) {\n                MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n                int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n                \n                SEGMENTS_LOOP:\n                for (int subindex = 0; subindex < numSubs; subindex++) {\n                  MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                  if (sub.postingsEnum == null) continue;\n                  int base = sub.slice.start;\n                  int docid;\n                  while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                    if (fastForRandomSet.get(docid + base)) {\n                      c++;\n                      if (intersectsCheck) {\n                        assert c==1;\n                        break SEGMENTS_LOOP;\n                      }\n                    }\n                  }\n                }\n              } else {\n                int docid;\n                while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.get(docid)) {\n                    c++;\n                    if (intersectsCheck) {\n                      assert c==1;\n                      break;\n                    }\n                  }\n                }\n              }\n\n            }\n\n            if (sortByCount) {\n              if (c > min) {\n                BytesRef termCopy = BytesRef.deepCopyOf(term);\n                queue.add(new CountPair<>(termCopy, c));\n                if (queue.size() >= maxsize) min = queue.last().val;\n              }\n            } else {\n              if (c >= mincount && --off < 0) {\n                if (--lim < 0) break;\n                ft.indexedToReadable(term, charsRef);\n                res.add(charsRef.toString(), c);\n              }\n            }\n          }\n        }\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    return finalize(res, searcher, docs, field, missing);\n  }\n\n","sourceOld":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList<Integer> getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing,\n                                                   String sort, String prefix, Predicate<BytesRef> termFilter, boolean intersectsCheck)\n    throws IOException {\n    \n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    final NamedList<Integer> res = new NamedList<>();\n    if (limit == 0) {\n      return finalize(res, searcher, docs, field, missing);\n    }\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = global.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    // make sure we have a set that is fast for random access, if we will use it for that\n    DocSet fastForRandomSet = docs;\n    if (minDfFilterCache>0 && docs instanceof SortedIntDocSet) {\n      SortedIntDocSet sset = (SortedIntDocSet)docs;\n      fastForRandomSet = new HashDocSet(sset.getDocs(), 0, sset.size());\n    }\n\n    IndexSchema schema = searcher.getSchema();\n    FieldType ft = schema.getFieldType(field);\n    assert !ft.isPointField(): \"Point Fields don't support enum method\";\n\n    boolean sortByCount = sort.equals(\"count\") || sort.equals(\"true\");\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;\n    final BoundedTreeSet<CountPair<BytesRef,Integer>> queue = sortByCount ? new BoundedTreeSet<CountPair<BytesRef,Integer>>(maxsize) : null;\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    BytesRef prefixTermBytes = null;\n    if (prefix != null) {\n      String indexedPrefix = ft.toInternal(prefix);\n      prefixTermBytes = new BytesRef(indexedPrefix);\n    }\n\n    Terms terms = MultiTerms.getTerms(searcher.getIndexReader(), field);\n    TermsEnum termsEnum = null;\n    SolrIndexSearcher.DocsEnumState deState = null;\n    BytesRef term = null;\n    if (terms != null) {\n      termsEnum = terms.iterator();\n\n      // TODO: OPT: if seek(ord) is supported for this termsEnum, then we could use it for\n      // facet.offset when sorting by index order.\n\n      if (prefixTermBytes != null) {\n        if (termsEnum.seekCeil(prefixTermBytes) == TermsEnum.SeekStatus.END) {\n          termsEnum = null;\n        } else {\n          term = termsEnum.term();\n        }\n      } else {\n        // position termsEnum on first term\n        term = termsEnum.next();\n      }\n    }\n\n    PostingsEnum postingsEnum = null;\n    CharsRefBuilder charsRef = new CharsRefBuilder();\n\n    if (docs.size() >= mincount) {\n      while (term != null) {\n\n        if (prefixTermBytes != null && !StringHelper.startsWith(term, prefixTermBytes))\n          break;\n\n        if (termFilter == null || termFilter.test(term)) {\n          int df = termsEnum.docFreq();\n\n          // If we are sorting, we can use df>min (rather than >=) since we\n          // are going in index order.  For certain term distributions this can\n          // make a large difference (for example, many terms with df=1).\n          if (df > 0 && df > min) {\n            int c;\n\n            if (df >= minDfFilterCache) {\n              // use the filter cache\n\n              if (deState == null) {\n                deState = new SolrIndexSearcher.DocsEnumState();\n                deState.fieldName = field;\n                deState.liveDocs = searcher.getLiveDocsBits();\n                deState.termsEnum = termsEnum;\n                deState.postingsEnum = postingsEnum;\n              }\n\n              if (intersectsCheck) {\n                c = searcher.intersects(docs, deState) ? 1 : 0;\n              } else {\n                c = searcher.numDocs(docs, deState);\n              }\n\n              postingsEnum = deState.postingsEnum;\n            } else {\n              // iterate over TermDocs to calculate the intersection\n\n              // TODO: specialize when base docset is a bitset or hash set (skipDocs)?  or does it matter for this?\n              // TODO: do this per-segment for better efficiency (MultiDocsEnum just uses base class impl)\n              // TODO: would passing deleted docs lead to better efficiency over checking the fastForRandomSet?\n              postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n              c = 0;\n\n              if (postingsEnum instanceof MultiPostingsEnum) {\n                MultiPostingsEnum.EnumWithSlice[] subs = ((MultiPostingsEnum) postingsEnum).getSubs();\n                int numSubs = ((MultiPostingsEnum) postingsEnum).getNumSubs();\n                \n                SEGMENTS_LOOP:\n                for (int subindex = 0; subindex < numSubs; subindex++) {\n                  MultiPostingsEnum.EnumWithSlice sub = subs[subindex];\n                  if (sub.postingsEnum == null) continue;\n                  int base = sub.slice.start;\n                  int docid;\n                  while ((docid = sub.postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                    if (fastForRandomSet.exists(docid + base)) {\n                      c++;\n                      if (intersectsCheck) {\n                        assert c==1;\n                        break SEGMENTS_LOOP;\n                      }\n                    }\n                  }\n                }\n              } else {\n                int docid;\n                while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                  if (fastForRandomSet.exists(docid)) {\n                    c++;\n                    if (intersectsCheck) {\n                      assert c==1;\n                      break;\n                    }\n                  }\n                }\n              }\n\n            }\n\n            if (sortByCount) {\n              if (c > min) {\n                BytesRef termCopy = BytesRef.deepCopyOf(term);\n                queue.add(new CountPair<>(termCopy, c));\n                if (queue.size() >= maxsize) min = queue.last().val;\n              }\n            } else {\n              if (c >= mincount && --off < 0) {\n                if (--lim < 0) break;\n                ft.indexedToReadable(term, charsRef);\n                res.add(charsRef.toString(), c);\n              }\n            }\n          }\n        }\n        term = termsEnum.next();\n      }\n    }\n\n    if (sortByCount) {\n      for (CountPair<BytesRef,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        ft.indexedToReadable(p.key, charsRef);\n        res.add(charsRef.toString(), p.val);\n      }\n    }\n\n    return finalize(res, searcher, docs, field, missing);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"862ed062e72c1c01ecd8593b17804ac02b69cf0e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["862ed062e72c1c01ecd8593b17804ac02b69cf0e"],"bf29cc8a76949bbcbc15b386a9e46a533f5b3332":["28288370235ed02234a64753cdbf0c6ec096304a"],"7679cc7d5b465ec8936979698cedf5fdbd71c95c":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["bf29cc8a76949bbcbc15b386a9e46a533f5b3332"],"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7":["7679cc7d5b465ec8936979698cedf5fdbd71c95c"],"28288370235ed02234a64753cdbf0c6ec096304a":["862ed062e72c1c01ecd8593b17804ac02b69cf0e","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["862ed062e72c1c01ecd8593b17804ac02b69cf0e","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90440a2155c2b9ce30bf8fc29b1c978c58dae1e7"]},"commit2Childs":{"862ed062e72c1c01ecd8593b17804ac02b69cf0e":["e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"bf29cc8a76949bbcbc15b386a9e46a533f5b3332":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["862ed062e72c1c01ecd8593b17804ac02b69cf0e"],"7679cc7d5b465ec8936979698cedf5fdbd71c95c":["90440a2155c2b9ce30bf8fc29b1c978c58dae1e7"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["7679cc7d5b465ec8936979698cedf5fdbd71c95c"],"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["bf29cc8a76949bbcbc15b386a9e46a533f5b3332"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}