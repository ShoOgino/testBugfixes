{"path":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#getBoostFunctions().mjava","commits":[{"id":"c7e79e31f55cbb444e3023d430a340658755aa31","date":1357666399,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#getBoostFunctions().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses all function queries\n   */\n  protected List<Query> getBoostFunctions() throws SyntaxError {\n    List<Query> boostFunctions = new LinkedList<Query>();\n    if (config.hasBoostFunctions()) {\n      for (String boostFunc : config.boostFuncs) {\n        if(null == boostFunc || \"\".equals(boostFunc)) continue;\n        Map<String,Float> ff = SolrPluginUtils.parseFieldBoosts(boostFunc);\n        for (String f : ff.keySet()) {\n          Query fq = subQuery(f, FunctionQParserPlugin.NAME).getQuery();\n          Float b = ff.get(f);\n          if (null != b) {\n            fq.setBoost(b);\n          }\n          boostFunctions.add(fq);\n        }\n      }\n    }\n    return boostFunctions;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#getBoostFunctions().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses all function queries\n   */\n  protected List<Query> getBoostFunctions() throws SyntaxError {\n    List<Query> boostFunctions = new LinkedList<Query>();\n    if (config.hasBoostFunctions()) {\n      for (String boostFunc : config.boostFuncs) {\n        if(null == boostFunc || \"\".equals(boostFunc)) continue;\n        Map<String,Float> ff = SolrPluginUtils.parseFieldBoosts(boostFunc);\n        for (String f : ff.keySet()) {\n          Query fq = subQuery(f, FunctionQParserPlugin.NAME).getQuery();\n          Float b = ff.get(f);\n          if (null != b) {\n            fq.setBoost(b);\n          }\n          boostFunctions.add(fq);\n        }\n      }\n    }\n    return boostFunctions;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#getBoostFunctions().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#getBoostFunctions().mjava","sourceNew":"  /**\n   * Parses all function queries\n   */\n  protected List<Query> getBoostFunctions() throws SyntaxError {\n    List<Query> boostFunctions = new LinkedList<>();\n    if (config.hasBoostFunctions()) {\n      for (String boostFunc : config.boostFuncs) {\n        if(null == boostFunc || \"\".equals(boostFunc)) continue;\n        Map<String,Float> ff = SolrPluginUtils.parseFieldBoosts(boostFunc);\n        for (String f : ff.keySet()) {\n          Query fq = subQuery(f, FunctionQParserPlugin.NAME).getQuery();\n          Float b = ff.get(f);\n          if (null != b) {\n            fq.setBoost(b);\n          }\n          boostFunctions.add(fq);\n        }\n      }\n    }\n    return boostFunctions;\n  }\n\n","sourceOld":"  /**\n   * Parses all function queries\n   */\n  protected List<Query> getBoostFunctions() throws SyntaxError {\n    List<Query> boostFunctions = new LinkedList<Query>();\n    if (config.hasBoostFunctions()) {\n      for (String boostFunc : config.boostFuncs) {\n        if(null == boostFunc || \"\".equals(boostFunc)) continue;\n        Map<String,Float> ff = SolrPluginUtils.parseFieldBoosts(boostFunc);\n        for (String f : ff.keySet()) {\n          Query fq = subQuery(f, FunctionQParserPlugin.NAME).getQuery();\n          Float b = ff.get(f);\n          if (null != b) {\n            fq.setBoost(b);\n          }\n          boostFunctions.add(fq);\n        }\n      }\n    }\n    return boostFunctions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#getBoostFunctions().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#getBoostFunctions().mjava","sourceNew":"  /**\n   * Parses all function queries\n   */\n  protected List<Query> getBoostFunctions() throws SyntaxError {\n    List<Query> boostFunctions = new LinkedList<>();\n    if (config.hasBoostFunctions()) {\n      for (String boostFunc : config.boostFuncs) {\n        if(null == boostFunc || \"\".equals(boostFunc)) continue;\n        Map<String,Float> ff = SolrPluginUtils.parseFieldBoosts(boostFunc);\n        for (String f : ff.keySet()) {\n          Query fq = subQuery(f, FunctionQParserPlugin.NAME).getQuery();\n          Float b = ff.get(f);\n          if (null != b && b.floatValue() != 1f) {\n            fq = new BoostQuery(fq, b);\n          }\n          boostFunctions.add(fq);\n        }\n      }\n    }\n    return boostFunctions;\n  }\n\n","sourceOld":"  /**\n   * Parses all function queries\n   */\n  protected List<Query> getBoostFunctions() throws SyntaxError {\n    List<Query> boostFunctions = new LinkedList<>();\n    if (config.hasBoostFunctions()) {\n      for (String boostFunc : config.boostFuncs) {\n        if(null == boostFunc || \"\".equals(boostFunc)) continue;\n        Map<String,Float> ff = SolrPluginUtils.parseFieldBoosts(boostFunc);\n        for (String f : ff.keySet()) {\n          Query fq = subQuery(f, FunctionQParserPlugin.NAME).getQuery();\n          Float b = ff.get(f);\n          if (null != b) {\n            fq.setBoost(b);\n          }\n          boostFunctions.add(fq);\n        }\n      }\n    }\n    return boostFunctions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f97fc3d287be2a8d7f513f0de3249b50dda47299","date":1568378558,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#getBoostFunctions().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#getBoostFunctions().mjava","sourceNew":"  /**\n   * Parses all function queries\n   */\n  protected List<Query> getBoostFunctions() throws SyntaxError {\n    List<Query> boostFunctions = new LinkedList<>();\n    if (config.hasBoostFunctions()) {\n      for (String boostFunc : config.boostFuncs) {\n        if(null == boostFunc || \"\".equals(boostFunc)) continue;\n        Map<String,Float> ff = SolrPluginUtils.parseFieldBoosts(boostFunc);\n        for (Map.Entry<String, Float> entry : ff.entrySet()) {\n          Query fq = subQuery(entry.getKey(), FunctionQParserPlugin.NAME).getQuery();\n          Float b = entry.getValue();\n          if (null != b && b.floatValue() != 1f) {\n            fq = new BoostQuery(fq, b);\n          }\n          boostFunctions.add(fq);\n        }\n      }\n    }\n    return boostFunctions;\n  }\n\n","sourceOld":"  /**\n   * Parses all function queries\n   */\n  protected List<Query> getBoostFunctions() throws SyntaxError {\n    List<Query> boostFunctions = new LinkedList<>();\n    if (config.hasBoostFunctions()) {\n      for (String boostFunc : config.boostFuncs) {\n        if(null == boostFunc || \"\".equals(boostFunc)) continue;\n        Map<String,Float> ff = SolrPluginUtils.parseFieldBoosts(boostFunc);\n        for (String f : ff.keySet()) {\n          Query fq = subQuery(f, FunctionQParserPlugin.NAME).getQuery();\n          Float b = ff.get(f);\n          if (null != b && b.floatValue() != 1f) {\n            fq = new BoostQuery(fq, b);\n          }\n          boostFunctions.add(fq);\n        }\n      }\n    }\n    return boostFunctions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c7e79e31f55cbb444e3023d430a340658755aa31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"f97fc3d287be2a8d7f513f0de3249b50dda47299":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"c7e79e31f55cbb444e3023d430a340658755aa31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7e79e31f55cbb444e3023d430a340658755aa31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f97fc3d287be2a8d7f513f0de3249b50dda47299"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7e79e31f55cbb444e3023d430a340658755aa31","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["f97fc3d287be2a8d7f513f0de3249b50dda47299"],"c7e79e31f55cbb444e3023d430a340658755aa31":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"f97fc3d287be2a8d7f513f0de3249b50dda47299":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}