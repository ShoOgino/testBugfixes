{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario#load(String).mjava","commits":[{"id":"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d","date":1571856490,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario#load(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parse a DSL string and create a scenario ready to run.\n   * @param data DSL string with commands and parameters\n   * @return configured scenario\n   * @throws Exception on syntax errors\n   */\n  public static SimScenario load(String data) throws Exception {\n    SimScenario scenario = new SimScenario();\n    String[] lines = data.split(\"\\\\r?\\\\n\");\n    for (int i = 0; i < lines.length; i++) {\n      String line = lines[i];\n      line = line.trim();\n      if (line.isBlank() || line.startsWith(\"#\") || line.startsWith(\"//\")) {\n        continue;\n      }\n      // remove trailing / / comments\n      String[] comments = line.split(\"//\");\n      String expr = comments[0];\n      // split on blank\n      String[] parts = expr.split(\"\\\\s+\");\n      if (parts.length > 2) {\n        log.warn(\"Invalid line - wrong number of parts \" + parts.length + \", skipping: \" + line);\n        continue;\n      }\n      SimAction action = SimAction.get(parts[0]);\n      if (action == null) {\n        log.warn(\"Invalid scenario action \" + parts[0] + \", skipping...\");\n        continue;\n      }\n      if (action == SimAction.LOOP_END) {\n        if (!scenario.context.containsKey(\"loop\")) {\n          throw new IOException(\"LOOP_END without start!\");\n        }\n        scenario.context.remove(\"loop\");\n        continue;\n      }\n      Class<? extends SimOp> opClass = simOps.get(action);\n      SimOp op = opClass.getConstructor().newInstance();\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      if (parts.length > 1) {\n        String paramsString = parts[1];\n        if (parts[1].contains(\"?\")) { // url-like with path?params...\n          String[] urlParts = parts[1].split(\"\\\\?\");\n          params.set(\"path\", urlParts[0]);\n          paramsString = urlParts.length > 1 ? urlParts[1] : \"\";\n        }\n        String[] paramsParts = paramsString.split(\"&\");\n        for (String paramPair : paramsParts) {\n          String[] paramKV = paramPair.split(\"=\");\n          String k = URLDecoder.decode(paramKV[0], \"UTF-8\");\n          String v = paramKV.length > 1 ? URLDecoder.decode(paramKV[1], \"UTF-8\") : null;\n          params.add(k, v);\n        }\n      }\n      op.init(params);\n      // loop handling\n      if (action == SimAction.LOOP_START) {\n        if (scenario.context.containsKey(\"loop\")) {\n          throw new IOException(\"only one loop level is allowed\");\n        }\n        scenario.context.put(\"loop\", op);\n        scenario.ops.add(op);\n        continue;\n      }\n      LoopOp currentLoop = (LoopOp) scenario.context.get(\"loop\");\n      if (currentLoop != null) {\n        currentLoop.ops.add(op);\n      } else {\n        scenario.ops.add(op);\n      }\n    }\n    if (scenario.context.containsKey(\"loop\")) {\n      throw new IOException(\"Unterminated loop statement\");\n    }\n    // sanity check set_listener / wait_listener\n    int numSets = 0, numWaits = 0;\n    for (SimOp op : scenario.ops) {\n      if (op instanceof SetEventListener) {\n        numSets++;\n      } else if (op instanceof WaitEvent) {\n        numWaits++;\n      }\n      if (numWaits > numSets) {\n        throw new Exception(\"Unexpected \" + SimAction.WAIT_EVENT + \" without previous \" + SimAction.EVENT_LISTENER);\n      }\n    }\n    if (numSets > numWaits) {\n      throw new Exception(SimAction.EVENT_LISTENER + \" count should be equal to \" + SimAction.WAIT_EVENT + \" count but was \" +\n          numSets + \" > \" + numWaits);\n    }\n    return scenario;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario#load(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario#load(String).mjava","sourceNew":"  /**\n   * Parse a DSL string and create a scenario ready to run.\n   * @param data DSL string with commands and parameters\n   * @return configured scenario\n   * @throws Exception on syntax errors\n   */\n  public static SimScenario load(String data) throws Exception {\n    SimScenario scenario = new SimScenario();\n    String[] lines = data.split(\"\\\\r?\\\\n\");\n    for (int i = 0; i < lines.length; i++) {\n      String line = lines[i];\n      line = line.trim();\n      if (line.isBlank() || line.startsWith(\"#\") || line.startsWith(\"//\")) {\n        continue;\n      }\n      // remove trailing / / comments\n      String[] comments = line.split(\"//\");\n      String expr = comments[0];\n      // split on blank\n      String[] parts = expr.split(\"\\\\s+\");\n      if (parts.length > 2) {\n        log.warn(\"Invalid line - wrong number of parts {}, skipping: {}\", parts.length, line);\n        continue;\n      }\n      SimAction action = SimAction.get(parts[0]);\n      if (action == null) {\n        log.warn(\"Invalid scenario action {}, skipping...\", parts[0]);\n        continue;\n      }\n      if (action == SimAction.LOOP_END) {\n        if (!scenario.context.containsKey(\"loop\")) {\n          throw new IOException(\"LOOP_END without start!\");\n        }\n        scenario.context.remove(\"loop\");\n        continue;\n      }\n      Class<? extends SimOp> opClass = simOps.get(action);\n      SimOp op = opClass.getConstructor().newInstance();\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      if (parts.length > 1) {\n        String paramsString = parts[1];\n        if (parts[1].contains(\"?\")) { // url-like with path?params...\n          String[] urlParts = parts[1].split(\"\\\\?\");\n          params.set(\"path\", urlParts[0]);\n          paramsString = urlParts.length > 1 ? urlParts[1] : \"\";\n        }\n        String[] paramsParts = paramsString.split(\"&\");\n        for (String paramPair : paramsParts) {\n          String[] paramKV = paramPair.split(\"=\");\n          String k = URLDecoder.decode(paramKV[0], \"UTF-8\");\n          String v = paramKV.length > 1 ? URLDecoder.decode(paramKV[1], \"UTF-8\") : null;\n          params.add(k, v);\n        }\n      }\n      op.init(params);\n      // loop handling\n      if (action == SimAction.LOOP_START) {\n        if (scenario.context.containsKey(\"loop\")) {\n          throw new IOException(\"only one loop level is allowed\");\n        }\n        scenario.context.put(\"loop\", op);\n        scenario.ops.add(op);\n        continue;\n      }\n      LoopOp currentLoop = (LoopOp) scenario.context.get(\"loop\");\n      if (currentLoop != null) {\n        currentLoop.ops.add(op);\n      } else {\n        scenario.ops.add(op);\n      }\n    }\n    if (scenario.context.containsKey(\"loop\")) {\n      throw new IOException(\"Unterminated loop statement\");\n    }\n    // sanity check set_listener / wait_listener\n    int numSets = 0, numWaits = 0;\n    for (SimOp op : scenario.ops) {\n      if (op instanceof SetEventListener) {\n        numSets++;\n      } else if (op instanceof WaitEvent) {\n        numWaits++;\n      }\n      if (numWaits > numSets) {\n        throw new Exception(\"Unexpected \" + SimAction.WAIT_EVENT + \" without previous \" + SimAction.EVENT_LISTENER);\n      }\n    }\n    if (numSets > numWaits) {\n      throw new Exception(SimAction.EVENT_LISTENER + \" count should be equal to \" + SimAction.WAIT_EVENT + \" count but was \" +\n          numSets + \" > \" + numWaits);\n    }\n    return scenario;\n  }\n\n","sourceOld":"  /**\n   * Parse a DSL string and create a scenario ready to run.\n   * @param data DSL string with commands and parameters\n   * @return configured scenario\n   * @throws Exception on syntax errors\n   */\n  public static SimScenario load(String data) throws Exception {\n    SimScenario scenario = new SimScenario();\n    String[] lines = data.split(\"\\\\r?\\\\n\");\n    for (int i = 0; i < lines.length; i++) {\n      String line = lines[i];\n      line = line.trim();\n      if (line.isBlank() || line.startsWith(\"#\") || line.startsWith(\"//\")) {\n        continue;\n      }\n      // remove trailing / / comments\n      String[] comments = line.split(\"//\");\n      String expr = comments[0];\n      // split on blank\n      String[] parts = expr.split(\"\\\\s+\");\n      if (parts.length > 2) {\n        log.warn(\"Invalid line - wrong number of parts \" + parts.length + \", skipping: \" + line);\n        continue;\n      }\n      SimAction action = SimAction.get(parts[0]);\n      if (action == null) {\n        log.warn(\"Invalid scenario action \" + parts[0] + \", skipping...\");\n        continue;\n      }\n      if (action == SimAction.LOOP_END) {\n        if (!scenario.context.containsKey(\"loop\")) {\n          throw new IOException(\"LOOP_END without start!\");\n        }\n        scenario.context.remove(\"loop\");\n        continue;\n      }\n      Class<? extends SimOp> opClass = simOps.get(action);\n      SimOp op = opClass.getConstructor().newInstance();\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      if (parts.length > 1) {\n        String paramsString = parts[1];\n        if (parts[1].contains(\"?\")) { // url-like with path?params...\n          String[] urlParts = parts[1].split(\"\\\\?\");\n          params.set(\"path\", urlParts[0]);\n          paramsString = urlParts.length > 1 ? urlParts[1] : \"\";\n        }\n        String[] paramsParts = paramsString.split(\"&\");\n        for (String paramPair : paramsParts) {\n          String[] paramKV = paramPair.split(\"=\");\n          String k = URLDecoder.decode(paramKV[0], \"UTF-8\");\n          String v = paramKV.length > 1 ? URLDecoder.decode(paramKV[1], \"UTF-8\") : null;\n          params.add(k, v);\n        }\n      }\n      op.init(params);\n      // loop handling\n      if (action == SimAction.LOOP_START) {\n        if (scenario.context.containsKey(\"loop\")) {\n          throw new IOException(\"only one loop level is allowed\");\n        }\n        scenario.context.put(\"loop\", op);\n        scenario.ops.add(op);\n        continue;\n      }\n      LoopOp currentLoop = (LoopOp) scenario.context.get(\"loop\");\n      if (currentLoop != null) {\n        currentLoop.ops.add(op);\n      } else {\n        scenario.ops.add(op);\n      }\n    }\n    if (scenario.context.containsKey(\"loop\")) {\n      throw new IOException(\"Unterminated loop statement\");\n    }\n    // sanity check set_listener / wait_listener\n    int numSets = 0, numWaits = 0;\n    for (SimOp op : scenario.ops) {\n      if (op instanceof SetEventListener) {\n        numSets++;\n      } else if (op instanceof WaitEvent) {\n        numWaits++;\n      }\n      if (numWaits > numSets) {\n        throw new Exception(\"Unexpected \" + SimAction.WAIT_EVENT + \" without previous \" + SimAction.EVENT_LISTENER);\n      }\n    }\n    if (numSets > numWaits) {\n      throw new Exception(SimAction.EVENT_LISTENER + \" count should be equal to \" + SimAction.WAIT_EVENT + \" count but was \" +\n          numSets + \" > \" + numWaits);\n    }\n    return scenario;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6e01fcbda8c04bde654f99836a2f8813f9444f3","date":1589564391,"type":3,"author":"erick","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario#load(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario#load(String).mjava","sourceNew":"  /**\n   * Parse a DSL string and create a scenario ready to run.\n   * @param data DSL string with commands and parameters\n   * @return configured scenario\n   * @throws Exception on syntax errors\n   */\n  public static SimScenario load(String data) throws Exception {\n    @SuppressWarnings(\"resource\")\n    SimScenario scenario = new SimScenario();\n    String[] lines = data.split(\"\\\\r?\\\\n\");\n    for (int i = 0; i < lines.length; i++) {\n      String line = lines[i];\n      line = line.trim();\n      if (line.isBlank() || line.startsWith(\"#\") || line.startsWith(\"//\")) {\n        continue;\n      }\n      // remove trailing / / comments\n      String[] comments = line.split(\"//\");\n      String expr = comments[0];\n      // split on blank\n      String[] parts = expr.split(\"\\\\s+\");\n      if (parts.length > 2) {\n        log.warn(\"Invalid line - wrong number of parts {}, skipping: {}\", parts.length, line);\n        continue;\n      }\n      SimAction action = SimAction.get(parts[0]);\n      if (action == null) {\n        log.warn(\"Invalid scenario action {}, skipping...\", parts[0]);\n        continue;\n      }\n      if (action == SimAction.LOOP_END) {\n        if (!scenario.context.containsKey(\"loop\")) {\n          throw new IOException(\"LOOP_END without start!\");\n        }\n        scenario.context.remove(\"loop\");\n        continue;\n      }\n      Class<? extends SimOp> opClass = simOps.get(action);\n      SimOp op = opClass.getConstructor().newInstance();\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      if (parts.length > 1) {\n        String paramsString = parts[1];\n        if (parts[1].contains(\"?\")) { // url-like with path?params...\n          String[] urlParts = parts[1].split(\"\\\\?\");\n          params.set(\"path\", urlParts[0]);\n          paramsString = urlParts.length > 1 ? urlParts[1] : \"\";\n        }\n        String[] paramsParts = paramsString.split(\"&\");\n        for (String paramPair : paramsParts) {\n          String[] paramKV = paramPair.split(\"=\");\n          String k = URLDecoder.decode(paramKV[0], \"UTF-8\");\n          String v = paramKV.length > 1 ? URLDecoder.decode(paramKV[1], \"UTF-8\") : null;\n          params.add(k, v);\n        }\n      }\n      op.init(params);\n      // loop handling\n      if (action == SimAction.LOOP_START) {\n        if (scenario.context.containsKey(\"loop\")) {\n          throw new IOException(\"only one loop level is allowed\");\n        }\n        scenario.context.put(\"loop\", op);\n        scenario.ops.add(op);\n        continue;\n      }\n      LoopOp currentLoop = (LoopOp) scenario.context.get(\"loop\");\n      if (currentLoop != null) {\n        currentLoop.ops.add(op);\n      } else {\n        scenario.ops.add(op);\n      }\n    }\n    if (scenario.context.containsKey(\"loop\")) {\n      throw new IOException(\"Unterminated loop statement\");\n    }\n    // sanity check set_listener / wait_listener\n    int numSets = 0, numWaits = 0;\n    for (SimOp op : scenario.ops) {\n      if (op instanceof SetEventListener) {\n        numSets++;\n      } else if (op instanceof WaitEvent) {\n        numWaits++;\n      }\n      if (numWaits > numSets) {\n        throw new Exception(\"Unexpected \" + SimAction.WAIT_EVENT + \" without previous \" + SimAction.EVENT_LISTENER);\n      }\n    }\n    if (numSets > numWaits) {\n      throw new Exception(SimAction.EVENT_LISTENER + \" count should be equal to \" + SimAction.WAIT_EVENT + \" count but was \" +\n          numSets + \" > \" + numWaits);\n    }\n    return scenario;\n  }\n\n","sourceOld":"  /**\n   * Parse a DSL string and create a scenario ready to run.\n   * @param data DSL string with commands and parameters\n   * @return configured scenario\n   * @throws Exception on syntax errors\n   */\n  public static SimScenario load(String data) throws Exception {\n    SimScenario scenario = new SimScenario();\n    String[] lines = data.split(\"\\\\r?\\\\n\");\n    for (int i = 0; i < lines.length; i++) {\n      String line = lines[i];\n      line = line.trim();\n      if (line.isBlank() || line.startsWith(\"#\") || line.startsWith(\"//\")) {\n        continue;\n      }\n      // remove trailing / / comments\n      String[] comments = line.split(\"//\");\n      String expr = comments[0];\n      // split on blank\n      String[] parts = expr.split(\"\\\\s+\");\n      if (parts.length > 2) {\n        log.warn(\"Invalid line - wrong number of parts {}, skipping: {}\", parts.length, line);\n        continue;\n      }\n      SimAction action = SimAction.get(parts[0]);\n      if (action == null) {\n        log.warn(\"Invalid scenario action {}, skipping...\", parts[0]);\n        continue;\n      }\n      if (action == SimAction.LOOP_END) {\n        if (!scenario.context.containsKey(\"loop\")) {\n          throw new IOException(\"LOOP_END without start!\");\n        }\n        scenario.context.remove(\"loop\");\n        continue;\n      }\n      Class<? extends SimOp> opClass = simOps.get(action);\n      SimOp op = opClass.getConstructor().newInstance();\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      if (parts.length > 1) {\n        String paramsString = parts[1];\n        if (parts[1].contains(\"?\")) { // url-like with path?params...\n          String[] urlParts = parts[1].split(\"\\\\?\");\n          params.set(\"path\", urlParts[0]);\n          paramsString = urlParts.length > 1 ? urlParts[1] : \"\";\n        }\n        String[] paramsParts = paramsString.split(\"&\");\n        for (String paramPair : paramsParts) {\n          String[] paramKV = paramPair.split(\"=\");\n          String k = URLDecoder.decode(paramKV[0], \"UTF-8\");\n          String v = paramKV.length > 1 ? URLDecoder.decode(paramKV[1], \"UTF-8\") : null;\n          params.add(k, v);\n        }\n      }\n      op.init(params);\n      // loop handling\n      if (action == SimAction.LOOP_START) {\n        if (scenario.context.containsKey(\"loop\")) {\n          throw new IOException(\"only one loop level is allowed\");\n        }\n        scenario.context.put(\"loop\", op);\n        scenario.ops.add(op);\n        continue;\n      }\n      LoopOp currentLoop = (LoopOp) scenario.context.get(\"loop\");\n      if (currentLoop != null) {\n        currentLoop.ops.add(op);\n      } else {\n        scenario.ops.add(op);\n      }\n    }\n    if (scenario.context.containsKey(\"loop\")) {\n      throw new IOException(\"Unterminated loop statement\");\n    }\n    // sanity check set_listener / wait_listener\n    int numSets = 0, numWaits = 0;\n    for (SimOp op : scenario.ops) {\n      if (op instanceof SetEventListener) {\n        numSets++;\n      } else if (op instanceof WaitEvent) {\n        numWaits++;\n      }\n      if (numWaits > numSets) {\n        throw new Exception(\"Unexpected \" + SimAction.WAIT_EVENT + \" without previous \" + SimAction.EVENT_LISTENER);\n      }\n    }\n    if (numSets > numWaits) {\n      throw new Exception(SimAction.EVENT_LISTENER + \" count should be equal to \" + SimAction.WAIT_EVENT + \" count but was \" +\n          numSets + \" > \" + numWaits);\n    }\n    return scenario;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario#load(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Parse a DSL string and create a scenario ready to run.\n   * @param data DSL string with commands and parameters\n   * @return configured scenario\n   * @throws Exception on syntax errors\n   */\n  public static SimScenario load(String data) throws Exception {\n    @SuppressWarnings(\"resource\")\n    SimScenario scenario = new SimScenario();\n    String[] lines = data.split(\"\\\\r?\\\\n\");\n    for (int i = 0; i < lines.length; i++) {\n      String line = lines[i];\n      line = line.trim();\n      if (line.isBlank() || line.startsWith(\"#\") || line.startsWith(\"//\")) {\n        continue;\n      }\n      // remove trailing / / comments\n      String[] comments = line.split(\"//\");\n      String expr = comments[0];\n      // split on blank\n      String[] parts = expr.split(\"\\\\s+\");\n      if (parts.length > 2) {\n        log.warn(\"Invalid line - wrong number of parts {}, skipping: {}\", parts.length, line);\n        continue;\n      }\n      SimAction action = SimAction.get(parts[0]);\n      if (action == null) {\n        log.warn(\"Invalid scenario action {}, skipping...\", parts[0]);\n        continue;\n      }\n      if (action == SimAction.LOOP_END) {\n        if (!scenario.context.containsKey(\"loop\")) {\n          throw new IOException(\"LOOP_END without start!\");\n        }\n        scenario.context.remove(\"loop\");\n        continue;\n      }\n      Class<? extends SimOp> opClass = simOps.get(action);\n      SimOp op = opClass.getConstructor().newInstance();\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      if (parts.length > 1) {\n        String paramsString = parts[1];\n        if (parts[1].contains(\"?\")) { // url-like with path?params...\n          String[] urlParts = parts[1].split(\"\\\\?\");\n          params.set(\"path\", urlParts[0]);\n          paramsString = urlParts.length > 1 ? urlParts[1] : \"\";\n        }\n        String[] paramsParts = paramsString.split(\"&\");\n        for (String paramPair : paramsParts) {\n          String[] paramKV = paramPair.split(\"=\");\n          String k = URLDecoder.decode(paramKV[0], \"UTF-8\");\n          String v = paramKV.length > 1 ? URLDecoder.decode(paramKV[1], \"UTF-8\") : null;\n          params.add(k, v);\n        }\n      }\n      op.init(params);\n      // loop handling\n      if (action == SimAction.LOOP_START) {\n        if (scenario.context.containsKey(\"loop\")) {\n          throw new IOException(\"only one loop level is allowed\");\n        }\n        scenario.context.put(\"loop\", op);\n        scenario.ops.add(op);\n        continue;\n      }\n      LoopOp currentLoop = (LoopOp) scenario.context.get(\"loop\");\n      if (currentLoop != null) {\n        currentLoop.ops.add(op);\n      } else {\n        scenario.ops.add(op);\n      }\n    }\n    if (scenario.context.containsKey(\"loop\")) {\n      throw new IOException(\"Unterminated loop statement\");\n    }\n    // sanity check set_listener / wait_listener\n    int numSets = 0, numWaits = 0;\n    for (SimOp op : scenario.ops) {\n      if (op instanceof SetEventListener) {\n        numSets++;\n      } else if (op instanceof WaitEvent) {\n        numWaits++;\n      }\n      if (numWaits > numSets) {\n        throw new Exception(\"Unexpected \" + SimAction.WAIT_EVENT + \" without previous \" + SimAction.EVENT_LISTENER);\n      }\n    }\n    if (numSets > numWaits) {\n      throw new Exception(SimAction.EVENT_LISTENER + \" count should be equal to \" + SimAction.WAIT_EVENT + \" count but was \" +\n          numSets + \" > \" + numWaits);\n    }\n    return scenario;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["e6e01fcbda8c04bde654f99836a2f8813f9444f3"],"e6e01fcbda8c04bde654f99836a2f8813f9444f3":["e35f2dde06b35aa9904949a3a93fabd090371077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e35f2dde06b35aa9904949a3a93fabd090371077":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6e01fcbda8c04bde654f99836a2f8813f9444f3":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"e35f2dde06b35aa9904949a3a93fabd090371077":["e6e01fcbda8c04bde654f99836a2f8813f9444f3"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["e35f2dde06b35aa9904949a3a93fabd090371077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}