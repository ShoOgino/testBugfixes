{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#refreshAndWatch(boolean).mjava","commits":[{"id":"1072b8e47b50f1c4fb039e1f54a736f381d6f809","date":1438956441,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#refreshAndWatch(boolean).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Refresh collection state from ZK and leave a watch for future changes.\n     * As a side effect, updates {@link #clusterState} and {@link #watchedCollectionStates}\n     * with the results of the refresh.\n     *\n     * @param expectExists if true, error if no state node exists\n     */\n    public void refreshAndWatch(boolean expectExists) {\n      try {\n        DocCollection newState = fetchCollectionState(coll, this);\n        updateWatchedCollection(coll, newState);\n      } catch (KeeperException.NoNodeException e) {\n        if (expectExists) {\n          log.warn(\"State node vanished for collection: \" + coll, e);\n        }\n      } catch (KeeperException e) {\n        if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n          log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n          return;\n        }\n        log.error(\"Unwatched collection: \" + coll, e);\n        throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.error(\"Unwatched collection :\" + coll, e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7477015ee104ad8144fba06b9b0a8ea93aea50f8","date":1450790907,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#refreshAndWatch(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#refreshAndWatch(boolean).mjava","sourceNew":"    /**\n     * Refresh collection state from ZK and leave a watch for future changes.\n     * As a side effect, updates {@link #clusterState} and {@link #watchedCollectionStates}\n     * with the results of the refresh.\n     *\n     * @param expectExists if true, error if no state node exists\n     */\n    public void refreshAndWatch(boolean expectExists) {\n      try {\n        DocCollection newState = fetchCollectionState(coll, this);\n        updateWatchedCollection(coll, newState);\n      } catch (KeeperException.NoNodeException e) {\n        if (expectExists) {\n          LOG.warn(\"State node vanished for collection: [{}]\", coll, e);\n        }\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n        throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Refresh collection state from ZK and leave a watch for future changes.\n     * As a side effect, updates {@link #clusterState} and {@link #watchedCollectionStates}\n     * with the results of the refresh.\n     *\n     * @param expectExists if true, error if no state node exists\n     */\n    public void refreshAndWatch(boolean expectExists) {\n      try {\n        DocCollection newState = fetchCollectionState(coll, this);\n        updateWatchedCollection(coll, newState);\n      } catch (KeeperException.NoNodeException e) {\n        if (expectExists) {\n          log.warn(\"State node vanished for collection: \" + coll, e);\n        }\n      } catch (KeeperException e) {\n        if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n          log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n          return;\n        }\n        log.error(\"Unwatched collection: \" + coll, e);\n        throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.error(\"Unwatched collection :\" + coll, e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b4df85b7268ca40452d6c01343d8eb00ed1f70a","date":1463171656,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#refreshAndWatch().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#refreshAndWatch(boolean).mjava","sourceNew":"    /**\n     * Refresh collection state from ZK and leave a watch for future changes.\n     * As a side effect, updates {@link #clusterState} and {@link #watchedCollectionStates}\n     * with the results of the refresh.\n     */\n    public void refreshAndWatch() {\n      try {\n        DocCollection newState = fetchCollectionState(coll, this);\n        updateWatchedCollection(coll, newState);\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n        throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Refresh collection state from ZK and leave a watch for future changes.\n     * As a side effect, updates {@link #clusterState} and {@link #watchedCollectionStates}\n     * with the results of the refresh.\n     *\n     * @param expectExists if true, error if no state node exists\n     */\n    public void refreshAndWatch(boolean expectExists) {\n      try {\n        DocCollection newState = fetchCollectionState(coll, this);\n        updateWatchedCollection(coll, newState);\n      } catch (KeeperException.NoNodeException e) {\n        if (expectExists) {\n          LOG.warn(\"State node vanished for collection: [{}]\", coll, e);\n        }\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n        throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#refreshAndWatch().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#refreshAndWatch(boolean).mjava","sourceNew":"    /**\n     * Refresh collection state from ZK and leave a watch for future changes.\n     * As a side effect, updates {@link #clusterState} and {@link #watchedCollectionStates}\n     * with the results of the refresh.\n     */\n    public void refreshAndWatch() {\n      try {\n        DocCollection newState = fetchCollectionState(coll, this);\n        updateWatchedCollection(coll, newState);\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n        throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Refresh collection state from ZK and leave a watch for future changes.\n     * As a side effect, updates {@link #clusterState} and {@link #watchedCollectionStates}\n     * with the results of the refresh.\n     *\n     * @param expectExists if true, error if no state node exists\n     */\n    public void refreshAndWatch(boolean expectExists) {\n      try {\n        DocCollection newState = fetchCollectionState(coll, this);\n        updateWatchedCollection(coll, newState);\n      } catch (KeeperException.NoNodeException e) {\n        if (expectExists) {\n          LOG.warn(\"State node vanished for collection: [{}]\", coll, e);\n        }\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n        throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#refreshAndWatch().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#refreshAndWatch(boolean).mjava","sourceNew":"    /**\n     * Refresh collection state from ZK and leave a watch for future changes.\n     * As a side effect, updates {@link #clusterState} and {@link #watchedCollectionStates}\n     * with the results of the refresh.\n     */\n    public void refreshAndWatch() {\n      try {\n        DocCollection newState = fetchCollectionState(coll, this);\n        updateWatchedCollection(coll, newState);\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n        throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Refresh collection state from ZK and leave a watch for future changes.\n     * As a side effect, updates {@link #clusterState} and {@link #watchedCollectionStates}\n     * with the results of the refresh.\n     *\n     * @param expectExists if true, error if no state node exists\n     */\n    public void refreshAndWatch(boolean expectExists) {\n      try {\n        DocCollection newState = fetchCollectionState(coll, this);\n        updateWatchedCollection(coll, newState);\n      } catch (KeeperException.NoNodeException e) {\n        if (expectExists) {\n          LOG.warn(\"State node vanished for collection: [{}]\", coll, e);\n        }\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n        throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.StateWatcher#refreshAndWatch(boolean).mjava","sourceNew":null,"sourceOld":"    /**\n     * Refresh collection state from ZK and leave a watch for future changes.\n     * As a side effect, updates {@link #clusterState} and {@link #watchedCollectionStates}\n     * with the results of the refresh.\n     *\n     * @param expectExists if true, error if no state node exists\n     */\n    public void refreshAndWatch(boolean expectExists) {\n      try {\n        DocCollection newState = fetchCollectionState(coll, this);\n        updateWatchedCollection(coll, newState);\n      } catch (KeeperException.NoNodeException e) {\n        if (expectExists) {\n          LOG.warn(\"State node vanished for collection: [{}]\", coll, e);\n        }\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n        throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["7477015ee104ad8144fba06b9b0a8ea93aea50f8","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7477015ee104ad8144fba06b9b0a8ea93aea50f8","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["7477015ee104ad8144fba06b9b0a8ea93aea50f8","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["0ad30c6a479e764150a3316e57263319775f1df2","5b4df85b7268ca40452d6c01343d8eb00ed1f70a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}