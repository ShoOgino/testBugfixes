{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReplaceNodeCmd#getReplicasOfNode(String,ClusterState).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReplaceNodeCmd#getReplicasOfNode(String,ClusterState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd#getReplicasOfNode(String,ClusterState).mjava","sourceNew":"  static List<ZkNodeProps> getReplicasOfNode(String source, ClusterState state) {\n    List<ZkNodeProps> sourceReplicas = new ArrayList<>();\n    for (Map.Entry<String, DocCollection> e : state.getCollectionsMap().entrySet()) {\n      for (Slice slice : e.getValue().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (source.equals(replica.getNodeName())) {\n            ZkNodeProps props = new ZkNodeProps(\n                COLLECTION_PROP, e.getKey(),\n                SHARD_ID_PROP, slice.getName(),\n                ZkStateReader.CORE_NAME_PROP, replica.getCoreName(),\n                ZkStateReader.REPLICA_PROP, replica.getName(),\n                ZkStateReader.REPLICA_TYPE, replica.getType().name(),\n                ZkStateReader.LEADER_PROP, String.valueOf(replica.equals(slice.getLeader())),\n                CoreAdminParams.NODE, source);\n            sourceReplicas.add(props);\n          }\n        }\n      }\n    }\n    return sourceReplicas;\n  }\n\n","sourceOld":"  static List<ZkNodeProps> getReplicasOfNode(String source, ClusterState state) {\n    List<ZkNodeProps> sourceReplicas = new ArrayList<>();\n    for (Map.Entry<String, DocCollection> e : state.getCollectionsMap().entrySet()) {\n      for (Slice slice : e.getValue().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (source.equals(replica.getNodeName())) {\n            ZkNodeProps props = new ZkNodeProps(\n                COLLECTION_PROP, e.getKey(),\n                SHARD_ID_PROP, slice.getName(),\n                ZkStateReader.CORE_NAME_PROP, replica.getCoreName(),\n                ZkStateReader.REPLICA_PROP, replica.getName(),\n                ZkStateReader.REPLICA_TYPE, replica.getType().name(),\n                ZkStateReader.LEADER_PROP, String.valueOf(replica.equals(slice.getLeader())),\n                CoreAdminParams.NODE, source);\n            sourceReplicas.add(props);\n          }\n        }\n      }\n    }\n    return sourceReplicas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReplaceNodeCmd#getReplicasOfNode(String,ClusterState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd#getReplicasOfNode(String,ClusterState).mjava","sourceNew":"  static List<ZkNodeProps> getReplicasOfNode(String source, ClusterState state) {\n    List<ZkNodeProps> sourceReplicas = new ArrayList<>();\n    for (Map.Entry<String, DocCollection> e : state.getCollectionsMap().entrySet()) {\n      for (Slice slice : e.getValue().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (source.equals(replica.getNodeName())) {\n            ZkNodeProps props = new ZkNodeProps(\n                COLLECTION_PROP, e.getKey(),\n                SHARD_ID_PROP, slice.getName(),\n                ZkStateReader.CORE_NAME_PROP, replica.getCoreName(),\n                ZkStateReader.REPLICA_PROP, replica.getName(),\n                ZkStateReader.REPLICA_TYPE, replica.getType().name(),\n                ZkStateReader.LEADER_PROP, String.valueOf(replica.equals(slice.getLeader())),\n                CoreAdminParams.NODE, source);\n            sourceReplicas.add(props);\n          }\n        }\n      }\n    }\n    return sourceReplicas;\n  }\n\n","sourceOld":"  static List<ZkNodeProps> getReplicasOfNode(String source, ClusterState state) {\n    List<ZkNodeProps> sourceReplicas = new ArrayList<>();\n    for (Map.Entry<String, DocCollection> e : state.getCollectionsMap().entrySet()) {\n      for (Slice slice : e.getValue().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (source.equals(replica.getNodeName())) {\n            ZkNodeProps props = new ZkNodeProps(\n                COLLECTION_PROP, e.getKey(),\n                SHARD_ID_PROP, slice.getName(),\n                ZkStateReader.CORE_NAME_PROP, replica.getCoreName(),\n                ZkStateReader.REPLICA_PROP, replica.getName(),\n                ZkStateReader.REPLICA_TYPE, replica.getType().name(),\n                ZkStateReader.LEADER_PROP, String.valueOf(replica.equals(slice.getLeader())),\n                CoreAdminParams.NODE, source);\n            sourceReplicas.add(props);\n          }\n        }\n      }\n    }\n    return sourceReplicas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}