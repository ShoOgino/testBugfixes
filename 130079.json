{"path":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testIntSpecialValues().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testIntSpecialValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testIntSpecialValues().mjava","sourceNew":"  public void testIntSpecialValues() throws Exception {\n    int[] vals=new int[]{\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    BytesRef[] prefixVals=new BytesRef[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRef(NumericUtils.BUF_SIZE_INT);\n      NumericUtils.intToPrefixCoded(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same int\", vals[i], NumericUtils.prefixCodedToInt(prefixVals[i]) );\n      \n      // test if decoding values as long fails correctly\n      try {\n        NumericUtils.prefixCodedToLong(prefixVals[i]);\n        fail(\"decoding a prefix coded int value as long should fail\");\n      } catch (NumberFormatException e) {\n        // worked\n      }\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].compareTo(prefixVals[i]) < 0 );\n    }\n    \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRef ref = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<32; j++) {\n        NumericUtils.intToPrefixCoded(vals[i], j, ref);\n        int prefixVal=NumericUtils.prefixCodedToInt(ref);\n        int mask=(1 << j) - 1;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","sourceOld":"  public void testIntSpecialValues() throws Exception {\n    int[] vals=new int[]{\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    BytesRef[] prefixVals=new BytesRef[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRef(NumericUtils.BUF_SIZE_INT);\n      NumericUtils.intToPrefixCoded(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same int\", vals[i], NumericUtils.prefixCodedToInt(prefixVals[i]) );\n      \n      // test if decoding values as long fails correctly\n      try {\n        NumericUtils.prefixCodedToLong(prefixVals[i]);\n        fail(\"decoding a prefix coded int value as long should fail\");\n      } catch (NumberFormatException e) {\n        // worked\n      }\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].compareTo(prefixVals[i]) < 0 );\n    }\n    \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRef ref = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<32; j++) {\n        NumericUtils.intToPrefixCoded(vals[i], j, ref);\n        int prefixVal=NumericUtils.prefixCodedToInt(ref);\n        int mask=(1 << j) - 1;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22abfa0c2df167320b9c97d1bdbb19347ff95402","date":1359067319,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testIntSpecialValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testIntSpecialValues().mjava","sourceNew":"  public void testIntSpecialValues() throws Exception {\n    int[] vals=new int[]{\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    BytesRef[] prefixVals=new BytesRef[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRef(NumericUtils.BUF_SIZE_INT);\n      NumericUtils.intToPrefixCodedBytes(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same int\", vals[i], NumericUtils.prefixCodedToInt(prefixVals[i]) );\n      \n      // test if decoding values as long fails correctly\n      try {\n        NumericUtils.prefixCodedToLong(prefixVals[i]);\n        fail(\"decoding a prefix coded int value as long should fail\");\n      } catch (NumberFormatException e) {\n        // worked\n      }\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].compareTo(prefixVals[i]) < 0 );\n    }\n    \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRef ref = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<32; j++) {\n        NumericUtils.intToPrefixCodedBytes(vals[i], j, ref);\n        int prefixVal=NumericUtils.prefixCodedToInt(ref);\n        int mask=(1 << j) - 1;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","sourceOld":"  public void testIntSpecialValues() throws Exception {\n    int[] vals=new int[]{\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    BytesRef[] prefixVals=new BytesRef[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRef(NumericUtils.BUF_SIZE_INT);\n      NumericUtils.intToPrefixCoded(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same int\", vals[i], NumericUtils.prefixCodedToInt(prefixVals[i]) );\n      \n      // test if decoding values as long fails correctly\n      try {\n        NumericUtils.prefixCodedToLong(prefixVals[i]);\n        fail(\"decoding a prefix coded int value as long should fail\");\n      } catch (NumberFormatException e) {\n        // worked\n      }\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].compareTo(prefixVals[i]) < 0 );\n    }\n    \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRef ref = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<32; j++) {\n        NumericUtils.intToPrefixCoded(vals[i], j, ref);\n        int prefixVal=NumericUtils.prefixCodedToInt(ref);\n        int mask=(1 << j) - 1;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testIntSpecialValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testIntSpecialValues().mjava","sourceNew":"  public void testIntSpecialValues() throws Exception {\n    int[] vals=new int[]{\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    BytesRef[] prefixVals=new BytesRef[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRef(NumericUtils.BUF_SIZE_INT);\n      NumericUtils.intToPrefixCodedBytes(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same int\", vals[i], NumericUtils.prefixCodedToInt(prefixVals[i]) );\n      \n      // test if decoding values as long fails correctly\n      try {\n        NumericUtils.prefixCodedToLong(prefixVals[i]);\n        fail(\"decoding a prefix coded int value as long should fail\");\n      } catch (NumberFormatException e) {\n        // worked\n      }\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].compareTo(prefixVals[i]) < 0 );\n    }\n    \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRef ref = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<32; j++) {\n        NumericUtils.intToPrefixCodedBytes(vals[i], j, ref);\n        int prefixVal=NumericUtils.prefixCodedToInt(ref);\n        int mask=(1 << j) - 1;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","sourceOld":"  public void testIntSpecialValues() throws Exception {\n    int[] vals=new int[]{\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    BytesRef[] prefixVals=new BytesRef[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRef(NumericUtils.BUF_SIZE_INT);\n      NumericUtils.intToPrefixCoded(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same int\", vals[i], NumericUtils.prefixCodedToInt(prefixVals[i]) );\n      \n      // test if decoding values as long fails correctly\n      try {\n        NumericUtils.prefixCodedToLong(prefixVals[i]);\n        fail(\"decoding a prefix coded int value as long should fail\");\n      } catch (NumberFormatException e) {\n        // worked\n      }\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].compareTo(prefixVals[i]) < 0 );\n    }\n    \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRef ref = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<32; j++) {\n        NumericUtils.intToPrefixCoded(vals[i], j, ref);\n        int prefixVal=NumericUtils.prefixCodedToInt(ref);\n        int mask=(1 << j) - 1;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testIntSpecialValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testIntSpecialValues().mjava","sourceNew":"  public void testIntSpecialValues() throws Exception {\n    int[] vals=new int[]{\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    BytesRefBuilder[] prefixVals=new BytesRefBuilder[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRefBuilder();\n      NumericUtils.intToPrefixCodedBytes(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same int\", vals[i], NumericUtils.prefixCodedToInt(prefixVals[i].get()) );\n      \n      // test if decoding values as long fails correctly\n      try {\n        NumericUtils.prefixCodedToLong(prefixVals[i].get());\n        fail(\"decoding a prefix coded int value as long should fail\");\n      } catch (NumberFormatException e) {\n        // worked\n      }\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].get().compareTo(prefixVals[i].get()) < 0 );\n    }\n    \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRefBuilder ref = new BytesRefBuilder();\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<32; j++) {\n        NumericUtils.intToPrefixCodedBytes(vals[i], j, ref);\n        int prefixVal=NumericUtils.prefixCodedToInt(ref.get());\n        int mask=(1 << j) - 1;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","sourceOld":"  public void testIntSpecialValues() throws Exception {\n    int[] vals=new int[]{\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    BytesRef[] prefixVals=new BytesRef[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRef(NumericUtils.BUF_SIZE_INT);\n      NumericUtils.intToPrefixCodedBytes(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same int\", vals[i], NumericUtils.prefixCodedToInt(prefixVals[i]) );\n      \n      // test if decoding values as long fails correctly\n      try {\n        NumericUtils.prefixCodedToLong(prefixVals[i]);\n        fail(\"decoding a prefix coded int value as long should fail\");\n      } catch (NumberFormatException e) {\n        // worked\n      }\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].compareTo(prefixVals[i]) < 0 );\n    }\n    \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRef ref = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<32; j++) {\n        NumericUtils.intToPrefixCodedBytes(vals[i], j, ref);\n        int prefixVal=NumericUtils.prefixCodedToInt(ref);\n        int mask=(1 << j) - 1;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","bugFix":["1c4b20b8e3276553cc6fc15be0dc552424a71198","955c32f886db6f6356c9fcdea6b1f1cb4effda24","53b6c192847de8643a5da505cc433cbf8476a175"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testIntSpecialValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testIntSpecialValues().mjava","sourceNew":"  public void testIntSpecialValues() throws Exception {\n    int[] vals=new int[]{\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    BytesRefBuilder[] prefixVals=new BytesRefBuilder[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRefBuilder();\n      LegacyNumericUtils.intToPrefixCodedBytes(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same int\", vals[i], LegacyNumericUtils.prefixCodedToInt(prefixVals[i].get()) );\n      \n      // test if decoding values as long fails correctly\n      try {\n        LegacyNumericUtils.prefixCodedToLong(prefixVals[i].get());\n        fail(\"decoding a prefix coded int value as long should fail\");\n      } catch (NumberFormatException e) {\n        // worked\n      }\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].get().compareTo(prefixVals[i].get()) < 0 );\n    }\n    \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRefBuilder ref = new BytesRefBuilder();\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<32; j++) {\n        LegacyNumericUtils.intToPrefixCodedBytes(vals[i], j, ref);\n        int prefixVal= LegacyNumericUtils.prefixCodedToInt(ref.get());\n        int mask=(1 << j) - 1;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","sourceOld":"  public void testIntSpecialValues() throws Exception {\n    int[] vals=new int[]{\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    BytesRefBuilder[] prefixVals=new BytesRefBuilder[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRefBuilder();\n      NumericUtils.intToPrefixCodedBytes(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same int\", vals[i], NumericUtils.prefixCodedToInt(prefixVals[i].get()) );\n      \n      // test if decoding values as long fails correctly\n      try {\n        NumericUtils.prefixCodedToLong(prefixVals[i].get());\n        fail(\"decoding a prefix coded int value as long should fail\");\n      } catch (NumberFormatException e) {\n        // worked\n      }\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].get().compareTo(prefixVals[i].get()) < 0 );\n    }\n    \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRefBuilder ref = new BytesRefBuilder();\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<32; j++) {\n        NumericUtils.intToPrefixCodedBytes(vals[i], j, ref);\n        int prefixVal=NumericUtils.prefixCodedToInt(ref.get());\n        int mask=(1 << j) - 1;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb","date":1457059932,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testIntSpecialValues().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * check extreme values of ints\n   * check for correct ordering of the encoded bytes and that values round-trip.\n   */\n  public void testIntSpecialValues() throws Exception {\n    int[] values = new int[] {\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    BytesRef[] encoded = new BytesRef[values.length];\n    \n    for (int i = 0; i < values.length; i++) {\n      encoded[i] = new BytesRef(new byte[Integer.BYTES]);\n      NumericUtils.intToSortableBytes(values[i], encoded[i].bytes, encoded[i].offset);\n      \n      // check forward and back conversion\n      assertEquals(\"forward and back conversion should generate same int\", \n                   values[i], \n                   NumericUtils.sortableBytesToInt(encoded[i].bytes, encoded[i].offset));\n    }\n    \n    // check sort order (encoded values should be ascending)\n    for (int i = 1; i < encoded.length; i++) {\n      assertTrue(\"check sort order\", encoded[i-1].compareTo(encoded[i]) < 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testIntSpecialValues().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * check extreme values of ints\n   * check for correct ordering of the encoded bytes and that values round-trip.\n   */\n  public void testIntSpecialValues() throws Exception {\n    int[] values = new int[] {\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    BytesRef[] encoded = new BytesRef[values.length];\n    \n    for (int i = 0; i < values.length; i++) {\n      encoded[i] = new BytesRef(new byte[Integer.BYTES]);\n      NumericUtils.intToSortableBytes(values[i], encoded[i].bytes, encoded[i].offset);\n      \n      // check forward and back conversion\n      assertEquals(\"forward and back conversion should generate same int\", \n                   values[i], \n                   NumericUtils.sortableBytesToInt(encoded[i].bytes, encoded[i].offset));\n    }\n    \n    // check sort order (encoded values should be ascending)\n    for (int i = 1; i < encoded.length; i++) {\n      assertTrue(\"check sort order\", encoded[i-1].compareTo(encoded[i]) < 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22abfa0c2df167320b9c97d1bdbb19347ff95402":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","22abfa0c2df167320b9c97d1bdbb19347ff95402"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["22abfa0c2df167320b9c97d1bdbb19347ff95402"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["770342641f7b505eaa8dccdc666158bff2419109","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"770342641f7b505eaa8dccdc666158bff2419109":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"22abfa0c2df167320b9c97d1bdbb19347ff95402":["dd45d4a2ee01a1932d33eec42f5272c2402da679","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["22abfa0c2df167320b9c97d1bdbb19347ff95402","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["770342641f7b505eaa8dccdc666158bff2419109"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"770342641f7b505eaa8dccdc666158bff2419109":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}