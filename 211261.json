{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testReaderConsistency().mjava","commits":[{"id":"03f665d0b9240c1ee79baeac03a20def3275d816","date":1428405689,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testReaderConsistency().mjava","pathOld":"/dev/null","sourceNew":"  public void testReaderConsistency() throws IOException {\n    Analyzer analyzer = new MockPayloadAnalyzer();\n    \n    // defaults\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    TestUtil.checkReader(mi.createSearcher().getIndexReader());\n    \n    // all combinations of offsets/payloads options\n    mi = new MemoryIndex(true, true);\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    TestUtil.checkReader(mi.createSearcher().getIndexReader());\n    \n    mi = new MemoryIndex(true, false);\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    TestUtil.checkReader(mi.createSearcher().getIndexReader());\n    \n    mi = new MemoryIndex(false, true);\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    TestUtil.checkReader(mi.createSearcher().getIndexReader());\n    \n    mi = new MemoryIndex(false, false);\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    TestUtil.checkReader(mi.createSearcher().getIndexReader());\n    \n    analyzer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testReaderConsistency().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testReaderConsistency().mjava","sourceNew":"  public void testReaderConsistency() throws IOException {\n    Analyzer analyzer = new MockPayloadAnalyzer();\n\n    // defaults\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    TestUtil.checkReader(mi.createSearcher().getIndexReader());\n\n    // all combinations of offsets/payloads options\n    mi = new MemoryIndex(true, true);\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    TestUtil.checkReader(mi.createSearcher().getIndexReader());\n\n    mi = new MemoryIndex(true, false);\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    TestUtil.checkReader(mi.createSearcher().getIndexReader());\n\n    mi = new MemoryIndex(false, true);\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    TestUtil.checkReader(mi.createSearcher().getIndexReader());\n\n    mi = new MemoryIndex(false, false);\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    TestUtil.checkReader(mi.createSearcher().getIndexReader());\n\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testReaderConsistency() throws IOException {\n    Analyzer analyzer = new MockPayloadAnalyzer();\n    \n    // defaults\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    TestUtil.checkReader(mi.createSearcher().getIndexReader());\n    \n    // all combinations of offsets/payloads options\n    mi = new MemoryIndex(true, true);\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    TestUtil.checkReader(mi.createSearcher().getIndexReader());\n    \n    mi = new MemoryIndex(true, false);\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    TestUtil.checkReader(mi.createSearcher().getIndexReader());\n    \n    mi = new MemoryIndex(false, true);\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    TestUtil.checkReader(mi.createSearcher().getIndexReader());\n    \n    mi = new MemoryIndex(false, false);\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    TestUtil.checkReader(mi.createSearcher().getIndexReader());\n    \n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testReaderConsistency().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testReaderConsistency().mjava","sourceNew":"  public void testReaderConsistency() throws IOException {\n    Analyzer analyzer = new MockPayloadAnalyzer();\n\n    // defaults\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    TestUtil.checkReader(mi.createSearcher().getIndexReader());\n\n    // all combinations of offsets/payloads options\n    mi = new MemoryIndex(true, true);\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    TestUtil.checkReader(mi.createSearcher().getIndexReader());\n\n    mi = new MemoryIndex(true, false);\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    TestUtil.checkReader(mi.createSearcher().getIndexReader());\n\n    mi = new MemoryIndex(false, true);\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    TestUtil.checkReader(mi.createSearcher().getIndexReader());\n\n    mi = new MemoryIndex(false, false);\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    TestUtil.checkReader(mi.createSearcher().getIndexReader());\n\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testReaderConsistency() throws IOException {\n    Analyzer analyzer = new MockPayloadAnalyzer();\n    \n    // defaults\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    TestUtil.checkReader(mi.createSearcher().getIndexReader());\n    \n    // all combinations of offsets/payloads options\n    mi = new MemoryIndex(true, true);\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    TestUtil.checkReader(mi.createSearcher().getIndexReader());\n    \n    mi = new MemoryIndex(true, false);\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    TestUtil.checkReader(mi.createSearcher().getIndexReader());\n    \n    mi = new MemoryIndex(false, true);\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    TestUtil.checkReader(mi.createSearcher().getIndexReader());\n    \n    mi = new MemoryIndex(false, false);\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    TestUtil.checkReader(mi.createSearcher().getIndexReader());\n    \n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["03f665d0b9240c1ee79baeac03a20def3275d816","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["03f665d0b9240c1ee79baeac03a20def3275d816"],"03f665d0b9240c1ee79baeac03a20def3275d816":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615370d2b876c3435773b5174df2e2242ad7981a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"03f665d0b9240c1ee79baeac03a20def3275d816":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03f665d0b9240c1ee79baeac03a20def3275d816"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}