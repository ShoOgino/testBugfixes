{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/FieldMetadata.Serializer#write(DataOutput,FieldMetadata).mjava","commits":[{"id":"d28da8a459f5f0c930da7185c56d0c25edd3fbd1","date":1577783695,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/FieldMetadata.Serializer#write(DataOutput,FieldMetadata).mjava","pathOld":"/dev/null","sourceNew":"    public void write(DataOutput output, FieldMetadata fieldMetadata) throws IOException {\n      assert fieldMetadata.dictionaryStartFP >= 0;\n      assert fieldMetadata.firstBlockStartFP >= 0;\n      assert fieldMetadata.lastBlockStartFP >= 0;\n      assert fieldMetadata.numTerms > 0 : \"There should be at least one term for field \" + fieldMetadata.fieldInfo.name + \": \" + fieldMetadata.numTerms;\n      assert fieldMetadata.firstBlockStartFP <= fieldMetadata.lastBlockStartFP : \"start: \" + fieldMetadata.firstBlockStartFP + \" end: \" + fieldMetadata.lastBlockStartFP;\n      assert fieldMetadata.lastTerm != null : \"you must set the last term\";\n\n      output.writeVInt(fieldMetadata.fieldInfo.number);\n\n      output.writeVInt(fieldMetadata.numTerms);\n      output.writeVInt(fieldMetadata.sumDocFreq);\n\n      if (fieldMetadata.fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0) {\n        assert fieldMetadata.sumTotalTermFreq >= fieldMetadata.sumDocFreq : \"sumTotalFQ: \" + fieldMetadata.sumTotalTermFreq + \" sumDocFQ: \" + fieldMetadata.sumDocFreq;\n        output.writeVInt(fieldMetadata.sumTotalTermFreq - fieldMetadata.sumDocFreq);\n      }\n\n      output.writeVInt(fieldMetadata.getDocCount());\n\n      output.writeVLong(fieldMetadata.dictionaryStartFP);\n      output.writeVLong(fieldMetadata.firstBlockStartFP);\n      output.writeVLong(fieldMetadata.lastBlockStartFP);\n\n      if (fieldMetadata.lastTerm.length > 0) {\n        output.writeVInt(fieldMetadata.lastTerm.length);\n        output.writeBytes(fieldMetadata.lastTerm.bytes, fieldMetadata.lastTerm.offset, fieldMetadata.lastTerm.length);\n      } else {\n        output.writeVInt(0);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d76926779561e53915c3a2b25a6e15831db638aa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c606b777c4250f3f3f6f66d659c7c4c403679b71","date":1577958559,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/FieldMetadata.Serializer#write(DataOutput,FieldMetadata).mjava","pathOld":"/dev/null","sourceNew":"    public void write(DataOutput output, FieldMetadata fieldMetadata) throws IOException {\n      assert fieldMetadata.dictionaryStartFP >= 0;\n      assert fieldMetadata.firstBlockStartFP >= 0;\n      assert fieldMetadata.lastBlockStartFP >= 0;\n      assert fieldMetadata.numTerms > 0 : \"There should be at least one term for field \" + fieldMetadata.fieldInfo.name + \": \" + fieldMetadata.numTerms;\n      assert fieldMetadata.firstBlockStartFP <= fieldMetadata.lastBlockStartFP : \"start: \" + fieldMetadata.firstBlockStartFP + \" end: \" + fieldMetadata.lastBlockStartFP;\n      assert fieldMetadata.lastTerm != null : \"you must set the last term\";\n\n      output.writeVInt(fieldMetadata.fieldInfo.number);\n\n      output.writeVInt(fieldMetadata.numTerms);\n      output.writeVInt(fieldMetadata.sumDocFreq);\n\n      if (fieldMetadata.fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0) {\n        assert fieldMetadata.sumTotalTermFreq >= fieldMetadata.sumDocFreq : \"sumTotalFQ: \" + fieldMetadata.sumTotalTermFreq + \" sumDocFQ: \" + fieldMetadata.sumDocFreq;\n        output.writeVInt(fieldMetadata.sumTotalTermFreq - fieldMetadata.sumDocFreq);\n      }\n\n      output.writeVInt(fieldMetadata.getDocCount());\n\n      output.writeVLong(fieldMetadata.dictionaryStartFP);\n      output.writeVLong(fieldMetadata.firstBlockStartFP);\n      output.writeVLong(fieldMetadata.lastBlockStartFP);\n\n      if (fieldMetadata.lastTerm.length > 0) {\n        output.writeVInt(fieldMetadata.lastTerm.length);\n        output.writeBytes(fieldMetadata.lastTerm.bytes, fieldMetadata.lastTerm.offset, fieldMetadata.lastTerm.length);\n      } else {\n        output.writeVInt(0);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d76926779561e53915c3a2b25a6e15831db638aa","date":1579602266,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/FieldMetadata.Serializer#write(DataOutput,FieldMetadata).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/FieldMetadata.Serializer#write(DataOutput,FieldMetadata).mjava","sourceNew":"    public void write(DataOutput output, FieldMetadata fieldMetadata) throws IOException {\n      assert fieldMetadata.dictionaryStartFP >= 0;\n      assert fieldMetadata.firstBlockStartFP >= 0;\n      assert fieldMetadata.lastBlockStartFP >= 0;\n      assert fieldMetadata.numTerms > 0 : \"There should be at least one term for field \" + fieldMetadata.fieldInfo.name + \": \" + fieldMetadata.numTerms;\n      assert fieldMetadata.firstBlockStartFP <= fieldMetadata.lastBlockStartFP : \"start: \" + fieldMetadata.firstBlockStartFP + \" end: \" + fieldMetadata.lastBlockStartFP;\n      assert fieldMetadata.lastTerm != null : \"you must set the last term\";\n\n      output.writeVInt(fieldMetadata.fieldInfo.number);\n\n      output.writeVLong(fieldMetadata.numTerms);\n      output.writeVLong(fieldMetadata.sumDocFreq);\n\n      if (fieldMetadata.fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0) {\n        assert fieldMetadata.sumTotalTermFreq >= fieldMetadata.sumDocFreq : \"sumTotalFQ: \" + fieldMetadata.sumTotalTermFreq + \" sumDocFQ: \" + fieldMetadata.sumDocFreq;\n        output.writeVLong(fieldMetadata.sumTotalTermFreq - fieldMetadata.sumDocFreq);\n      }\n\n      output.writeVInt(fieldMetadata.getDocCount());\n\n      output.writeVLong(fieldMetadata.dictionaryStartFP);\n      output.writeVLong(fieldMetadata.firstBlockStartFP);\n      output.writeVLong(fieldMetadata.lastBlockStartFP);\n\n      if (fieldMetadata.lastTerm.length > 0) {\n        output.writeVInt(fieldMetadata.lastTerm.length);\n        output.writeBytes(fieldMetadata.lastTerm.bytes, fieldMetadata.lastTerm.offset, fieldMetadata.lastTerm.length);\n      } else {\n        output.writeVInt(0);\n      }\n    }\n\n","sourceOld":"    public void write(DataOutput output, FieldMetadata fieldMetadata) throws IOException {\n      assert fieldMetadata.dictionaryStartFP >= 0;\n      assert fieldMetadata.firstBlockStartFP >= 0;\n      assert fieldMetadata.lastBlockStartFP >= 0;\n      assert fieldMetadata.numTerms > 0 : \"There should be at least one term for field \" + fieldMetadata.fieldInfo.name + \": \" + fieldMetadata.numTerms;\n      assert fieldMetadata.firstBlockStartFP <= fieldMetadata.lastBlockStartFP : \"start: \" + fieldMetadata.firstBlockStartFP + \" end: \" + fieldMetadata.lastBlockStartFP;\n      assert fieldMetadata.lastTerm != null : \"you must set the last term\";\n\n      output.writeVInt(fieldMetadata.fieldInfo.number);\n\n      output.writeVInt(fieldMetadata.numTerms);\n      output.writeVInt(fieldMetadata.sumDocFreq);\n\n      if (fieldMetadata.fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0) {\n        assert fieldMetadata.sumTotalTermFreq >= fieldMetadata.sumDocFreq : \"sumTotalFQ: \" + fieldMetadata.sumTotalTermFreq + \" sumDocFQ: \" + fieldMetadata.sumDocFreq;\n        output.writeVInt(fieldMetadata.sumTotalTermFreq - fieldMetadata.sumDocFreq);\n      }\n\n      output.writeVInt(fieldMetadata.getDocCount());\n\n      output.writeVLong(fieldMetadata.dictionaryStartFP);\n      output.writeVLong(fieldMetadata.firstBlockStartFP);\n      output.writeVLong(fieldMetadata.lastBlockStartFP);\n\n      if (fieldMetadata.lastTerm.length > 0) {\n        output.writeVInt(fieldMetadata.lastTerm.length);\n        output.writeBytes(fieldMetadata.lastTerm.bytes, fieldMetadata.lastTerm.offset, fieldMetadata.lastTerm.length);\n      } else {\n        output.writeVInt(0);\n      }\n    }\n\n","bugFix":["d28da8a459f5f0c930da7185c56d0c25edd3fbd1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c606b777c4250f3f3f6f66d659c7c4c403679b71":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d28da8a459f5f0c930da7185c56d0c25edd3fbd1"],"d76926779561e53915c3a2b25a6e15831db638aa":["d28da8a459f5f0c930da7185c56d0c25edd3fbd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d28da8a459f5f0c930da7185c56d0c25edd3fbd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d76926779561e53915c3a2b25a6e15831db638aa"]},"commit2Childs":{"c606b777c4250f3f3f6f66d659c7c4c403679b71":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c606b777c4250f3f3f6f66d659c7c4c403679b71","d28da8a459f5f0c930da7185c56d0c25edd3fbd1"],"d76926779561e53915c3a2b25a6e15831db638aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d28da8a459f5f0c930da7185c56d0c25edd3fbd1":["c606b777c4250f3f3f6f66d659c7c4c403679b71","d76926779561e53915c3a2b25a6e15831db638aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c606b777c4250f3f3f6f66d659c7c4c403679b71","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}