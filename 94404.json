{"path":"lucene/sandbox/src/java/org/apache/lucene/geo/SimpleWKTShapeParser#parseGeometry(StreamTokenizer,ShapeType).mjava","commits":[{"id":"9f1c851539bd589075f77aebfa7a070b73c7d49b","date":1540391267,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/SimpleWKTShapeParser#parseGeometry(StreamTokenizer,ShapeType).mjava","pathOld":"/dev/null","sourceNew":"  /** parse geometry from the stream tokenizer */\n  private static Object parseGeometry(StreamTokenizer stream, ShapeType shapeType) throws IOException, ParseException {\n    final ShapeType type = ShapeType.forName(nextWord(stream));\n    if (shapeType != null && shapeType != ShapeType.GEOMETRYCOLLECTION) {\n      if (type.wktName().equals(shapeType.wktName()) == false) {\n        throw new ParseException(\"Expected geometry type: [\" + shapeType + \"], but found: [\" + type + \"]\", stream.lineno());\n      }\n    }\n    switch (type) {\n      case POINT:\n        return parsePoint(stream);\n      case MULTIPOINT:\n        return parseMultiPoint(stream);\n      case LINESTRING:\n        return parseLine(stream);\n      case MULTILINESTRING:\n        return parseMultiLine(stream);\n      case POLYGON:\n        return parsePolygon(stream);\n      case MULTIPOLYGON:\n        return parseMultiPolygon(stream);\n      case ENVELOPE:\n        return parseBBox(stream);\n      case GEOMETRYCOLLECTION:\n        return parseGeometryCollection(stream);\n      default:\n        throw new IllegalArgumentException(\"Unknown geometry type: \" + type);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/SimpleWKTShapeParser#parseGeometry(StreamTokenizer,ShapeType).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/SimpleWKTShapeParser#parseGeometry(StreamTokenizer,ShapeType).mjava","sourceNew":"  /** parse geometry from the stream tokenizer */\n  private static Object parseGeometry(StreamTokenizer stream, ShapeType shapeType) throws IOException, ParseException {\n    final ShapeType type = ShapeType.forName(nextWord(stream));\n    if (shapeType != null && shapeType != ShapeType.GEOMETRYCOLLECTION) {\n      if (type.wktName().equals(shapeType.wktName()) == false) {\n        throw new ParseException(\"Expected geometry type: [\" + shapeType + \"], but found: [\" + type + \"]\", stream.lineno());\n      }\n    }\n    switch (type) {\n      case POINT:\n        return parsePoint(stream);\n      case MULTIPOINT:\n        return parseMultiPoint(stream);\n      case LINESTRING:\n        return parseLine(stream);\n      case MULTILINESTRING:\n        return parseMultiLine(stream);\n      case POLYGON:\n        return parsePolygon(stream);\n      case MULTIPOLYGON:\n        return parseMultiPolygon(stream);\n      case ENVELOPE:\n        return parseBBox(stream);\n      case GEOMETRYCOLLECTION:\n        return parseGeometryCollection(stream);\n      default:\n        throw new IllegalArgumentException(\"Unknown geometry type: \" + type);\n    }\n  }\n\n","sourceOld":"  /** parse geometry from the stream tokenizer */\n  private static Object parseGeometry(StreamTokenizer stream, ShapeType shapeType) throws IOException, ParseException {\n    final ShapeType type = ShapeType.forName(nextWord(stream));\n    if (shapeType != null && shapeType != ShapeType.GEOMETRYCOLLECTION) {\n      if (type.wktName().equals(shapeType.wktName()) == false) {\n        throw new ParseException(\"Expected geometry type: [\" + shapeType + \"], but found: [\" + type + \"]\", stream.lineno());\n      }\n    }\n    switch (type) {\n      case POINT:\n        return parsePoint(stream);\n      case MULTIPOINT:\n        return parseMultiPoint(stream);\n      case LINESTRING:\n        return parseLine(stream);\n      case MULTILINESTRING:\n        return parseMultiLine(stream);\n      case POLYGON:\n        return parsePolygon(stream);\n      case MULTIPOLYGON:\n        return parseMultiPolygon(stream);\n      case ENVELOPE:\n        return parseBBox(stream);\n      case GEOMETRYCOLLECTION:\n        return parseGeometryCollection(stream);\n      default:\n        throw new IllegalArgumentException(\"Unknown geometry type: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9f1c851539bd589075f77aebfa7a070b73c7d49b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["9f1c851539bd589075f77aebfa7a070b73c7d49b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"9f1c851539bd589075f77aebfa7a070b73c7d49b":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9f1c851539bd589075f77aebfa7a070b73c7d49b"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}