{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarStraight(FieldInfo).mjava","commits":[{"id":"0ef85d40fcb2c5bb7ec40780b12e543600a1ae38","date":1359036780,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarStraight(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  private BinaryDocValues loadBytesVarStraight(FieldInfo field) throws IOException {\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), \"idx\");\n    IndexInput data = null;\n    IndexInput index = null;\n    boolean success = false;\n    try {\n      data = dir.openInput(dataName, state.context);\n      CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT, \n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START, \n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      index = dir.openInput(indexName, state.context);\n      CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX, \n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START, \n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      // nocommit? can the current impl even handle > 2G?\n      long totalBytes = index.readVLong();\n      final byte bytes[] = new byte[(int)totalBytes];\n      data.readBytes(bytes, 0, bytes.length);\n      final PackedInts.Reader reader = PackedInts.getReader(index);\n      success = true;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = reader.get(docID);\n          long endAddress = reader.get(docID+1);\n          result.bytes = bytes;\n          result.offset = (int)startAddress;\n          result.length = (int)(endAddress - startAddress);\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["dac1db31006989ae24922811f00f909d30f1391d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"10e89cbe24422ef92a37fc037a955728de2e12cf","date":1359053475,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarStraight(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarStraight(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBytesVarStraight(FieldInfo field) throws IOException {\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    IndexInput data = null;\n    IndexInput index = null;\n    boolean success = false;\n    try {\n      data = dir.openInput(dataName, state.context);\n      CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT, \n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START, \n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      index = dir.openInput(indexName, state.context);\n      CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX, \n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START, \n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      // nocommit? can the current impl even handle > 2G?\n      long totalBytes = index.readVLong();\n      final byte bytes[] = new byte[(int)totalBytes];\n      data.readBytes(bytes, 0, bytes.length);\n      final PackedInts.Reader reader = PackedInts.getReader(index);\n      success = true;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = reader.get(docID);\n          long endAddress = reader.get(docID+1);\n          result.bytes = bytes;\n          result.offset = (int)startAddress;\n          result.length = (int)(endAddress - startAddress);\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBytesVarStraight(FieldInfo field) throws IOException {\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), \"idx\");\n    IndexInput data = null;\n    IndexInput index = null;\n    boolean success = false;\n    try {\n      data = dir.openInput(dataName, state.context);\n      CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT, \n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START, \n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      index = dir.openInput(indexName, state.context);\n      CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX, \n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START, \n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      // nocommit? can the current impl even handle > 2G?\n      long totalBytes = index.readVLong();\n      final byte bytes[] = new byte[(int)totalBytes];\n      data.readBytes(bytes, 0, bytes.length);\n      final PackedInts.Reader reader = PackedInts.getReader(index);\n      success = true;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = reader.get(docID);\n          long endAddress = reader.get(docID+1);\n          result.bytes = bytes;\n          result.offset = (int)startAddress;\n          result.length = (int)(endAddress - startAddress);\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4772ea9604873dc0b22ea724398008998afc8e41","date":1359133954,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarStraight(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarStraight(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBytesVarStraight(FieldInfo field) throws IOException {\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    IndexInput data = null;\n    IndexInput index = null;\n    boolean success = false;\n    try {\n      data = dir.openInput(dataName, state.context);\n      CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT, \n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START, \n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      index = dir.openInput(indexName, state.context);\n      CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX, \n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START, \n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      // nocommit? can the current impl even handle > 2G?\n      long totalBytes = index.readVLong();\n      final byte bytes[] = new byte[(int)totalBytes];\n      data.readBytes(bytes, 0, bytes.length);\n      final PackedInts.Reader reader = PackedInts.getReader(index);\n      if (data.getFilePointer() != data.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + dataName + \"\\\": read \" + data.getFilePointer() + \" vs size \" + data.length() + \" (resource: \" + data + \")\");\n      }\n      if (index.getFilePointer() != index.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + indexName + \"\\\": read \" + index.getFilePointer() + \" vs size \" + index.length() + \" (resource: \" + index + \")\");\n      }\n      success = true;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = reader.get(docID);\n          long endAddress = reader.get(docID+1);\n          result.bytes = bytes;\n          result.offset = (int)startAddress;\n          result.length = (int)(endAddress - startAddress);\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBytesVarStraight(FieldInfo field) throws IOException {\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    IndexInput data = null;\n    IndexInput index = null;\n    boolean success = false;\n    try {\n      data = dir.openInput(dataName, state.context);\n      CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT, \n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START, \n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      index = dir.openInput(indexName, state.context);\n      CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX, \n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START, \n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      // nocommit? can the current impl even handle > 2G?\n      long totalBytes = index.readVLong();\n      final byte bytes[] = new byte[(int)totalBytes];\n      data.readBytes(bytes, 0, bytes.length);\n      final PackedInts.Reader reader = PackedInts.getReader(index);\n      success = true;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = reader.get(docID);\n          long endAddress = reader.get(docID+1);\n          result.bytes = bytes;\n          result.offset = (int)startAddress;\n          result.length = (int)(endAddress - startAddress);\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"caa40272511a69bd4ad04b8242ae420932f5799b","date":1359341326,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarStraight(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarStraight(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBytesVarStraight(FieldInfo field) throws IOException {\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    IndexInput data = null;\n    IndexInput index = null;\n    boolean success = false;\n    try {\n      data = dir.openInput(dataName, state.context);\n      CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT, \n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START, \n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      index = dir.openInput(indexName, state.context);\n      CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX, \n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START, \n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      long totalBytes = index.readVLong();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(data, totalBytes);\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      final PackedInts.Reader reader = PackedInts.getReader(index);\n      if (data.getFilePointer() != data.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + dataName + \"\\\": read \" + data.getFilePointer() + \" vs size \" + data.length() + \" (resource: \" + data + \")\");\n      }\n      if (index.getFilePointer() != index.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + indexName + \"\\\": read \" + index.getFilePointer() + \" vs size \" + index.length() + \" (resource: \" + index + \")\");\n      }\n      success = true;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = reader.get(docID);\n          long endAddress = reader.get(docID+1);\n          bytesReader.fillSlice(result, startAddress, (int)(endAddress - startAddress));\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBytesVarStraight(FieldInfo field) throws IOException {\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    IndexInput data = null;\n    IndexInput index = null;\n    boolean success = false;\n    try {\n      data = dir.openInput(dataName, state.context);\n      CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT, \n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START, \n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      index = dir.openInput(indexName, state.context);\n      CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX, \n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START, \n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      // nocommit? can the current impl even handle > 2G?\n      long totalBytes = index.readVLong();\n      final byte bytes[] = new byte[(int)totalBytes];\n      data.readBytes(bytes, 0, bytes.length);\n      final PackedInts.Reader reader = PackedInts.getReader(index);\n      if (data.getFilePointer() != data.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + dataName + \"\\\": read \" + data.getFilePointer() + \" vs size \" + data.length() + \" (resource: \" + data + \")\");\n      }\n      if (index.getFilePointer() != index.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + indexName + \"\\\": read \" + index.getFilePointer() + \" vs size \" + index.length() + \" (resource: \" + index + \")\");\n      }\n      success = true;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = reader.get(docID);\n          long endAddress = reader.get(docID+1);\n          result.bytes = bytes;\n          result.offset = (int)startAddress;\n          result.length = (int)(endAddress - startAddress);\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarStraight(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  private BinaryDocValues loadBytesVarStraight(FieldInfo field) throws IOException {\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    IndexInput data = null;\n    IndexInput index = null;\n    boolean success = false;\n    try {\n      data = dir.openInput(dataName, state.context);\n      CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT, \n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START, \n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      index = dir.openInput(indexName, state.context);\n      CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX, \n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START, \n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      long totalBytes = index.readVLong();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(data, totalBytes);\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      final PackedInts.Reader reader = PackedInts.getReader(index);\n      if (data.getFilePointer() != data.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + dataName + \"\\\": read \" + data.getFilePointer() + \" vs size \" + data.length() + \" (resource: \" + data + \")\");\n      }\n      if (index.getFilePointer() != index.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + indexName + \"\\\": read \" + index.getFilePointer() + \" vs size \" + index.length() + \" (resource: \" + index + \")\");\n      }\n      success = true;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = reader.get(docID);\n          long endAddress = reader.get(docID+1);\n          bytesReader.fillSlice(result, startAddress, (int)(endAddress - startAddress));\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dac1db31006989ae24922811f00f909d30f1391d","date":1387560411,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarStraight(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarStraight(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBytesVarStraight(FieldInfo field) throws IOException {\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    IndexInput data = null;\n    IndexInput index = null;\n    boolean success = false;\n    try {\n      data = dir.openInput(dataName, state.context);\n      CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      index = dir.openInput(indexName, state.context);\n      CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      long totalBytes = index.readVLong();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(data, totalBytes);\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      final PackedInts.Reader reader = PackedInts.getReader(index);\n      if (data.getFilePointer() != data.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + dataName + \"\\\": read \" + data.getFilePointer() + \" vs size \" + data.length() + \" (resource: \" + data + \")\");\n      }\n      if (index.getFilePointer() != index.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + indexName + \"\\\": read \" + index.getFilePointer() + \" vs size \" + index.length() + \" (resource: \" + index + \")\");\n      }\n      success = true;\n      ramBytesUsed.addAndGet(bytes.ramBytesUsed() + reader.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = reader.get(docID);\n          long endAddress = reader.get(docID+1);\n          bytesReader.fillSlice(result, startAddress, (int)(endAddress - startAddress));\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBytesVarStraight(FieldInfo field) throws IOException {\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    IndexInput data = null;\n    IndexInput index = null;\n    boolean success = false;\n    try {\n      data = dir.openInput(dataName, state.context);\n      CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT, \n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START, \n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      index = dir.openInput(indexName, state.context);\n      CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX, \n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START, \n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      long totalBytes = index.readVLong();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(data, totalBytes);\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      final PackedInts.Reader reader = PackedInts.getReader(index);\n      if (data.getFilePointer() != data.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + dataName + \"\\\": read \" + data.getFilePointer() + \" vs size \" + data.length() + \" (resource: \" + data + \")\");\n      }\n      if (index.getFilePointer() != index.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + indexName + \"\\\": read \" + index.getFilePointer() + \" vs size \" + index.length() + \" (resource: \" + index + \")\");\n      }\n      success = true;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = reader.get(docID);\n          long endAddress = reader.get(docID+1);\n          bytesReader.fillSlice(result, startAddress, (int)(endAddress - startAddress));\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","bugFix":["0ef85d40fcb2c5bb7ec40780b12e543600a1ae38"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarStraight(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarStraight(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBytesVarStraight(FieldInfo field) throws IOException {\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    IndexInput data = null;\n    IndexInput index = null;\n    boolean success = false;\n    try {\n      data = dir.openInput(dataName, state.context);\n      CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      index = dir.openInput(indexName, state.context);\n      CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      long totalBytes = index.readVLong();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(data, totalBytes);\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      final PackedInts.Reader reader = PackedInts.getReader(index);\n      CodecUtil.checkEOF(data);\n      CodecUtil.checkEOF(index);\n      success = true;\n      ramBytesUsed.addAndGet(bytes.ramBytesUsed() + reader.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = reader.get(docID);\n          long endAddress = reader.get(docID+1);\n          bytesReader.fillSlice(result, startAddress, (int)(endAddress - startAddress));\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBytesVarStraight(FieldInfo field) throws IOException {\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    IndexInput data = null;\n    IndexInput index = null;\n    boolean success = false;\n    try {\n      data = dir.openInput(dataName, state.context);\n      CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      index = dir.openInput(indexName, state.context);\n      CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      long totalBytes = index.readVLong();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(data, totalBytes);\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      final PackedInts.Reader reader = PackedInts.getReader(index);\n      if (data.getFilePointer() != data.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + dataName + \"\\\": read \" + data.getFilePointer() + \" vs size \" + data.length() + \" (resource: \" + data + \")\");\n      }\n      if (index.getFilePointer() != index.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + indexName + \"\\\": read \" + index.getFilePointer() + \" vs size \" + index.length() + \" (resource: \" + index + \")\");\n      }\n      success = true;\n      ramBytesUsed.addAndGet(bytes.ramBytesUsed() + reader.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = reader.get(docID);\n          long endAddress = reader.get(docID+1);\n          bytesReader.fillSlice(result, startAddress, (int)(endAddress - startAddress));\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarStraight(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarStraight(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBytesVarStraight(FieldInfo field) throws IOException {\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    IndexInput data = null;\n    IndexInput index = null;\n    boolean success = false;\n    try {\n      data = dir.openInput(dataName, state.context);\n      CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      index = dir.openInput(indexName, state.context);\n      CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      long totalBytes = index.readVLong();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(data, totalBytes);\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      final PackedInts.Reader reader = PackedInts.getReader(index);\n      CodecUtil.checkEOF(data);\n      CodecUtil.checkEOF(index);\n      success = true;\n      ramBytesUsed.addAndGet(bytes.ramBytesUsed() + reader.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = reader.get(docID);\n          long endAddress = reader.get(docID+1);\n          bytesReader.fillSlice(result, startAddress, (int)(endAddress - startAddress));\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBytesVarStraight(FieldInfo field) throws IOException {\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    IndexInput data = null;\n    IndexInput index = null;\n    boolean success = false;\n    try {\n      data = dir.openInput(dataName, state.context);\n      CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      index = dir.openInput(indexName, state.context);\n      CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      long totalBytes = index.readVLong();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(data, totalBytes);\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      final PackedInts.Reader reader = PackedInts.getReader(index);\n      if (data.getFilePointer() != data.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + dataName + \"\\\": read \" + data.getFilePointer() + \" vs size \" + data.length() + \" (resource: \" + data + \")\");\n      }\n      if (index.getFilePointer() != index.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + indexName + \"\\\": read \" + index.getFilePointer() + \" vs size \" + index.length() + \" (resource: \" + index + \")\");\n      }\n      success = true;\n      ramBytesUsed.addAndGet(bytes.ramBytesUsed() + reader.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = reader.get(docID);\n          long endAddress = reader.get(docID+1);\n          bytesReader.fillSlice(result, startAddress, (int)(endAddress - startAddress));\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarStraight(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarStraight(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBytesVarStraight(FieldInfo field) throws IOException {\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    IndexInput data = null;\n    IndexInput index = null;\n    boolean success = false;\n    try {\n      data = dir.openInput(dataName, state.context);\n      CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      index = dir.openInput(indexName, state.context);\n      CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      long totalBytes = index.readVLong();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(data, totalBytes);\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      final PackedInts.Reader reader = PackedInts.getReader(index);\n      CodecUtil.checkEOF(data);\n      CodecUtil.checkEOF(index);\n      success = true;\n      ramBytesUsed.addAndGet(bytes.ramBytesUsed() + reader.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          long startAddress = reader.get(docID);\n          long endAddress = reader.get(docID+1);\n          bytesReader.fillSlice(term, startAddress, (int)(endAddress - startAddress));\n          return term;\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBytesVarStraight(FieldInfo field) throws IOException {\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    IndexInput data = null;\n    IndexInput index = null;\n    boolean success = false;\n    try {\n      data = dir.openInput(dataName, state.context);\n      CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      index = dir.openInput(indexName, state.context);\n      CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      long totalBytes = index.readVLong();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(data, totalBytes);\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      final PackedInts.Reader reader = PackedInts.getReader(index);\n      CodecUtil.checkEOF(data);\n      CodecUtil.checkEOF(index);\n      success = true;\n      ramBytesUsed.addAndGet(bytes.ramBytesUsed() + reader.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = reader.get(docID);\n          long endAddress = reader.get(docID+1);\n          bytesReader.fillSlice(result, startAddress, (int)(endAddress - startAddress));\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d943163030bbd7a9caf93cb5fea92257390a2a99","date":1403094254,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarStraight(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarStraight(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBytesVarStraight(FieldInfo field) throws IOException {\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    IndexInput data = null;\n    IndexInput index = null;\n    boolean success = false;\n    try {\n      data = dir.openInput(dataName, state.context);\n      CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      index = dir.openInput(indexName, state.context);\n      CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      long totalBytes = index.readVLong();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(data, totalBytes);\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      final PackedInts.Reader reader = PackedInts.getReader(index);\n      CodecUtil.checkEOF(data);\n      CodecUtil.checkEOF(index);\n      success = true;\n      ramBytesUsed.addAndGet(bytesReader.ramBytesUsed() + reader.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          long startAddress = reader.get(docID);\n          long endAddress = reader.get(docID+1);\n          bytesReader.fillSlice(term, startAddress, (int)(endAddress - startAddress));\n          return term;\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBytesVarStraight(FieldInfo field) throws IOException {\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    IndexInput data = null;\n    IndexInput index = null;\n    boolean success = false;\n    try {\n      data = dir.openInput(dataName, state.context);\n      CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      index = dir.openInput(indexName, state.context);\n      CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      long totalBytes = index.readVLong();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(data, totalBytes);\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      final PackedInts.Reader reader = PackedInts.getReader(index);\n      CodecUtil.checkEOF(data);\n      CodecUtil.checkEOF(index);\n      success = true;\n      ramBytesUsed.addAndGet(bytes.ramBytesUsed() + reader.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          long startAddress = reader.get(docID);\n          long endAddress = reader.get(docID+1);\n          bytesReader.fillSlice(term, startAddress, (int)(endAddress - startAddress));\n          return term;\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarStraight(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarStraight(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBytesVarStraight(FieldInfo field) throws IOException {\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    IndexInput data = null;\n    IndexInput index = null;\n    boolean success = false;\n    try {\n      data = dir.openInput(dataName, state.context);\n      CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      index = dir.openInput(indexName, state.context);\n      CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      long totalBytes = index.readVLong();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(data, totalBytes);\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      final PackedInts.Reader reader = PackedInts.getReader(index);\n      CodecUtil.checkEOF(data);\n      CodecUtil.checkEOF(index);\n      success = true;\n      ramBytesUsed.addAndGet(bytesReader.ramBytesUsed() + reader.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          long startAddress = reader.get(docID);\n          long endAddress = reader.get(docID+1);\n          bytesReader.fillSlice(term, startAddress, (int)(endAddress - startAddress));\n          return term;\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBytesVarStraight(FieldInfo field) throws IOException {\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    IndexInput data = null;\n    IndexInput index = null;\n    boolean success = false;\n    try {\n      data = dir.openInput(dataName, state.context);\n      CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      index = dir.openInput(indexName, state.context);\n      CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      long totalBytes = index.readVLong();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(data, totalBytes);\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      final PackedInts.Reader reader = PackedInts.getReader(index);\n      CodecUtil.checkEOF(data);\n      CodecUtil.checkEOF(index);\n      success = true;\n      ramBytesUsed.addAndGet(bytes.ramBytesUsed() + reader.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          long startAddress = reader.get(docID);\n          long endAddress = reader.get(docID+1);\n          bytesReader.fillSlice(term, startAddress, (int)(endAddress - startAddress));\n          return term;\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarStraight(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarStraight(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBytesVarStraight(FieldInfo field) throws IOException {\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    IndexInput data = null;\n    IndexInput index = null;\n    boolean success = false;\n    try {\n      data = dir.openInput(dataName, state.context);\n      CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      index = dir.openInput(indexName, state.context);\n      CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      long totalBytes = index.readVLong();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(data, totalBytes);\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      final PackedInts.Reader reader = PackedInts.getReader(index);\n      CodecUtil.checkEOF(data);\n      CodecUtil.checkEOF(index);\n      success = true;\n      ramBytesUsed.addAndGet(bytesReader.ramBytesUsed() + reader.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          long startAddress = reader.get(docID);\n          long endAddress = reader.get(docID+1);\n          bytesReader.fillSlice(term, startAddress, (int)(endAddress - startAddress));\n          return term;\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBytesVarStraight(FieldInfo field) throws IOException {\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    IndexInput data = null;\n    IndexInput index = null;\n    boolean success = false;\n    try {\n      data = dir.openInput(dataName, state.context);\n      CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      index = dir.openInput(indexName, state.context);\n      CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      long totalBytes = index.readVLong();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(data, totalBytes);\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      final PackedInts.Reader reader = PackedInts.getReader(index);\n      CodecUtil.checkEOF(data);\n      CodecUtil.checkEOF(index);\n      success = true;\n      ramBytesUsed.addAndGet(bytesReader.ramBytesUsed() + reader.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          long startAddress = reader.get(docID);\n          long endAddress = reader.get(docID+1);\n          bytesReader.fillSlice(term, startAddress, (int)(endAddress - startAddress));\n          return term;\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarStraight(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesVarStraight(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBytesVarStraight(FieldInfo field) throws IOException {\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    IndexInput data = null;\n    IndexInput index = null;\n    boolean success = false;\n    try {\n      data = dir.openInput(dataName, state.context);\n      CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      index = dir.openInput(indexName, state.context);\n      CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      long totalBytes = index.readVLong();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(data, totalBytes);\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      final PackedInts.Reader reader = PackedInts.getReader(index);\n      CodecUtil.checkEOF(data);\n      CodecUtil.checkEOF(index);\n      success = true;\n      ramBytesUsed.addAndGet(bytesReader.ramBytesUsed() + reader.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          long startAddress = reader.get(docID);\n          long endAddress = reader.get(docID+1);\n          bytesReader.fillSlice(term, startAddress, (int)(endAddress - startAddress));\n          return term;\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBytesVarStraight(FieldInfo field) throws IOException {\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    IndexInput data = null;\n    IndexInput index = null;\n    boolean success = false;\n    try {\n      data = dir.openInput(dataName, state.context);\n      CodecUtil.checkHeader(data, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                  Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      index = dir.openInput(indexName, state.context);\n      CodecUtil.checkHeader(index, Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_START,\n                                   Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n      long totalBytes = index.readVLong();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(data, totalBytes);\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      final PackedInts.Reader reader = PackedInts.getReader(index);\n      CodecUtil.checkEOF(data);\n      CodecUtil.checkEOF(index);\n      success = true;\n      ramBytesUsed.addAndGet(bytesReader.ramBytesUsed() + reader.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          long startAddress = reader.get(docID);\n          long endAddress = reader.get(docID+1);\n          bytesReader.fillSlice(term, startAddress, (int)(endAddress - startAddress));\n          return term;\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["dac1db31006989ae24922811f00f909d30f1391d","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["dac1db31006989ae24922811f00f909d30f1391d"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","d943163030bbd7a9caf93cb5fea92257390a2a99"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"caa40272511a69bd4ad04b8242ae420932f5799b":["4772ea9604873dc0b22ea724398008998afc8e41"],"d943163030bbd7a9caf93cb5fea92257390a2a99":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"10e89cbe24422ef92a37fc037a955728de2e12cf":["0ef85d40fcb2c5bb7ec40780b12e543600a1ae38"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["d943163030bbd7a9caf93cb5fea92257390a2a99","4cc45c615dbb82bf79d5f9550286098367874fbf"],"0ef85d40fcb2c5bb7ec40780b12e543600a1ae38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","caa40272511a69bd4ad04b8242ae420932f5799b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["d943163030bbd7a9caf93cb5fea92257390a2a99"],"dac1db31006989ae24922811f00f909d30f1391d":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"4772ea9604873dc0b22ea724398008998afc8e41":["10e89cbe24422ef92a37fc037a955728de2e12cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","d943163030bbd7a9caf93cb5fea92257390a2a99"],"caa40272511a69bd4ad04b8242ae420932f5799b":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d943163030bbd7a9caf93cb5fea92257390a2a99":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","402ad3ddc9da7b70da1b167667a60ece6a1381fb","4cc45c615dbb82bf79d5f9550286098367874fbf"],"10e89cbe24422ef92a37fc037a955728de2e12cf":["4772ea9604873dc0b22ea724398008998afc8e41"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ef85d40fcb2c5bb7ec40780b12e543600a1ae38":["10e89cbe24422ef92a37fc037a955728de2e12cf"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["dac1db31006989ae24922811f00f909d30f1391d"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ef85d40fcb2c5bb7ec40780b12e543600a1ae38","d4d69c535930b5cce125cff868d40f6373dc27d4"],"dac1db31006989ae24922811f00f909d30f1391d":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"4772ea9604873dc0b22ea724398008998afc8e41":["caa40272511a69bd4ad04b8242ae420932f5799b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","e57c73924f3b8c19defa62e96bfa34a4922d49c2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}