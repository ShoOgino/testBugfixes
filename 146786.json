{"path":"lucene/core/src/java/org/apache/lucene/analysis/WordlistLoader#getStemDict(Reader,CharArrayMap[String]).mjava","commits":[{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/WordlistLoader#getStemDict(Reader,CharArrayMap[String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getStemDict(Reader,CharArrayMap[String]).mjava","sourceNew":"  /**\n   * Reads a stem dictionary. Each line contains:\n   * <pre>word<b>\\t</b>stem</pre>\n   * (i.e. two tab separated words)\n   *\n   * @return stem dictionary that overrules the stemming algorithm\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public static CharArrayMap<String> getStemDict(Reader reader, CharArrayMap<String> result) throws IOException {\n    BufferedReader br = null;\n    try {\n      br = getBufferedReader(reader);\n      String line;\n      while ((line = br.readLine()) != null) {\n        String[] wordstem = line.split(\"\\t\", 2);\n        result.put(wordstem[0], wordstem[1]);\n      }\n    } finally {\n      IOUtils.close(br);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Reads a stem dictionary. Each line contains:\n   * <pre>word<b>\\t</b>stem</pre>\n   * (i.e. two tab separated words)\n   *\n   * @return stem dictionary that overrules the stemming algorithm\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public static CharArrayMap<String> getStemDict(Reader reader, CharArrayMap<String> result) throws IOException {\n    BufferedReader br = null;\n    try {\n      br = getBufferedReader(reader);\n      String line;\n      while ((line = br.readLine()) != null) {\n        String[] wordstem = line.split(\"\\t\", 2);\n        result.put(wordstem[0], wordstem[1]);\n      }\n    } finally {\n      IOUtils.close(br);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/WordlistLoader#getStemDict(Reader,CharArrayMap[String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getStemDict(Reader,CharArrayMap[String]).mjava","sourceNew":"  /**\n   * Reads a stem dictionary. Each line contains:\n   * <pre>word<b>\\t</b>stem</pre>\n   * (i.e. two tab separated words)\n   *\n   * @return stem dictionary that overrules the stemming algorithm\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public static CharArrayMap<String> getStemDict(Reader reader, CharArrayMap<String> result) throws IOException {\n    BufferedReader br = null;\n    try {\n      br = getBufferedReader(reader);\n      String line;\n      while ((line = br.readLine()) != null) {\n        String[] wordstem = line.split(\"\\t\", 2);\n        result.put(wordstem[0], wordstem[1]);\n      }\n    } finally {\n      IOUtils.close(br);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Reads a stem dictionary. Each line contains:\n   * <pre>word<b>\\t</b>stem</pre>\n   * (i.e. two tab separated words)\n   *\n   * @return stem dictionary that overrules the stemming algorithm\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public static CharArrayMap<String> getStemDict(Reader reader, CharArrayMap<String> result) throws IOException {\n    BufferedReader br = null;\n    try {\n      br = getBufferedReader(reader);\n      String line;\n      while ((line = br.readLine()) != null) {\n        String[] wordstem = line.split(\"\\t\", 2);\n        result.put(wordstem[0], wordstem[1]);\n      }\n    } finally {\n      IOUtils.close(br);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}