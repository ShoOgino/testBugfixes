{"path":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollationWithHypens().mjava","commits":[{"id":"4a1d67dfa126cb83a8dfeea520dbc2fae9ba823c","date":1323268936,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollationWithHypens().mjava","pathOld":"/dev/null","sourceNew":"\t@Test\n\tpublic void testCollationWithHypens() throws Exception\n\t{\n\t  SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    \n    params.add(CommonParams.Q, \"lowerfilt:(hypenated-wotd)\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n      List<String> collations = suggestions.getAll(\"collation\");\n      assertTrue(collations.size()==1); \n      String collation = collations.iterator().next();      \n      assertTrue(\"Incorrect collation: \" + collation,\"lowerfilt:(hyphenated-word)\".equals(collation));\n    }\n\n    params.remove(CommonParams.Q);\n    params.add(\"defType\", \"dismax\");\n    params.add(\"qf\", \"lowerfilt\");\n    params.add(CommonParams.Q, \"hypenated-wotd\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n      List<String> collations = suggestions.getAll(\"collation\");\n      assertTrue(collations.size()==1);\n      String collation = collations.iterator().next();\n      assertTrue(\"Incorrect collation: \" + collation,\"hyphenated-word\".equals(collation));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e6e5a85de57ea8b642c0b8c9e15a2d7d2d0054","date":1323283758,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollationWithHypens().mjava","pathOld":"/dev/null","sourceNew":"\t@Test\n\tpublic void testCollationWithHypens() throws Exception\n\t{\n\t  SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    \n    params.add(CommonParams.Q, \"lowerfilt:(hypenated-wotd)\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n      List<String> collations = suggestions.getAll(\"collation\");\n      assertTrue(collations.size()==1); \n      String collation = collations.iterator().next();      \n      assertTrue(\"Incorrect collation: \" + collation,\"lowerfilt:(hyphenated-word)\".equals(collation));\n    }\n\n    params.remove(CommonParams.Q);\n    params.add(\"defType\", \"dismax\");\n    params.add(\"qf\", \"lowerfilt\");\n    params.add(CommonParams.Q, \"hypenated-wotd\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n      List<String> collations = suggestions.getAll(\"collation\");\n      assertTrue(collations.size()==1);\n      String collation = collations.iterator().next();\n      assertTrue(\"Incorrect collation: \" + collation,\"hyphenated-word\".equals(collation));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollationWithHypens().mjava","pathOld":"/dev/null","sourceNew":"\t@Test\n\tpublic void testCollationWithHypens() throws Exception\n\t{\n\t  SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    \n    params.add(CommonParams.Q, \"lowerfilt:(hypenated-wotd)\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n      List<String> collations = suggestions.getAll(\"collation\");\n      assertTrue(collations.size()==1); \n      String collation = collations.iterator().next();      \n      assertTrue(\"Incorrect collation: \" + collation,\"lowerfilt:(hyphenated-word)\".equals(collation));\n    }\n\n    params.remove(CommonParams.Q);\n    params.add(\"defType\", \"dismax\");\n    params.add(\"qf\", \"lowerfilt\");\n    params.add(CommonParams.Q, \"hypenated-wotd\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n      List<String> collations = suggestions.getAll(\"collation\");\n      assertTrue(collations.size()==1);\n      String collation = collations.iterator().next();\n      assertTrue(\"Incorrect collation: \" + collation,\"hyphenated-word\".equals(collation));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollationWithHypens().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollationWithHypens().mjava","sourceNew":"\t@Test\n\tpublic void testCollationWithHypens() throws Exception\n\t{\n\t  SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    \n    params.add(CommonParams.Q, \"lowerfilt:(hypenated-wotd)\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n      List<String> collations = suggestions.getAll(\"collation\");\n      assertTrue(collations.size()==1); \n      String collation = collations.iterator().next();      \n      assertTrue(\"Incorrect collation: \" + collation,\"lowerfilt:(hyphenated-word)\".equals(collation));\n    }\n\n    params.remove(CommonParams.Q);\n    params.add(\"defType\", \"dismax\");\n    params.add(\"qf\", \"lowerfilt\");\n    params.add(CommonParams.Q, \"hypenated-wotd\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n      List<String> collations = suggestions.getAll(\"collation\");\n      assertTrue(collations.size()==1);\n      String collation = collations.iterator().next();\n      assertTrue(\"Incorrect collation: \" + collation,\"hyphenated-word\".equals(collation));\n    }\n\n  }\n\n","sourceOld":"\t@Test\n\tpublic void testCollationWithHypens() throws Exception\n\t{\n\t  SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    \n    params.add(CommonParams.Q, \"lowerfilt:(hypenated-wotd)\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n      List<String> collations = suggestions.getAll(\"collation\");\n      assertTrue(collations.size()==1); \n      String collation = collations.iterator().next();      \n      assertTrue(\"Incorrect collation: \" + collation,\"lowerfilt:(hyphenated-word)\".equals(collation));\n    }\n\n    params.remove(CommonParams.Q);\n    params.add(\"defType\", \"dismax\");\n    params.add(\"qf\", \"lowerfilt\");\n    params.add(CommonParams.Q, \"hypenated-wotd\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n      List<String> collations = suggestions.getAll(\"collation\");\n      assertTrue(collations.size()==1);\n      String collation = collations.iterator().next();\n      assertTrue(\"Incorrect collation: \" + collation,\"hyphenated-word\".equals(collation));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollationWithHypens().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollationWithHypens().mjava","sourceNew":"\t@Test\n\tpublic void testCollationWithHypens() throws Exception\n\t{\n\t  SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    \n    params.add(CommonParams.Q, \"lowerfilt:(hypenated-wotd)\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n      List<String> collations = suggestions.getAll(\"collation\");\n      assertTrue(collations.size()==1); \n      String collation = collations.iterator().next();      \n      assertTrue(\"Incorrect collation: \" + collation,\"lowerfilt:(hyphenated-word)\".equals(collation));\n    }\n\n    params.remove(CommonParams.Q);\n    params.add(\"defType\", \"dismax\");\n    params.add(\"qf\", \"lowerfilt\");\n    params.add(CommonParams.Q, \"hypenated-wotd\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n      List<String> collations = suggestions.getAll(\"collation\");\n      assertTrue(collations.size()==1);\n      String collation = collations.iterator().next();\n      assertTrue(\"Incorrect collation: \" + collation,\"hyphenated-word\".equals(collation));\n    }\n\n  }\n\n","sourceOld":"\t@Test\n\tpublic void testCollationWithHypens() throws Exception\n\t{\n\t  SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    \n    params.add(CommonParams.Q, \"lowerfilt:(hypenated-wotd)\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n      List<String> collations = suggestions.getAll(\"collation\");\n      assertTrue(collations.size()==1); \n      String collation = collations.iterator().next();      \n      assertTrue(\"Incorrect collation: \" + collation,\"lowerfilt:(hyphenated-word)\".equals(collation));\n    }\n\n    params.remove(CommonParams.Q);\n    params.add(\"defType\", \"dismax\");\n    params.add(\"qf\", \"lowerfilt\");\n    params.add(CommonParams.Q, \"hypenated-wotd\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n      List<String> collations = suggestions.getAll(\"collation\");\n      assertTrue(collations.size()==1);\n      String collation = collations.iterator().next();\n      assertTrue(\"Incorrect collation: \" + collation,\"hyphenated-word\".equals(collation));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollationWithHypens().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollationWithHypens().mjava","sourceNew":"  @Test\n  public void testCollationWithHypens() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    \n    params.add(CommonParams.Q, \"lowerfilt:(hypenated-wotd)\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n      List<String> collations = suggestions.getAll(\"collation\");\n      assertTrue(collations.size()==1); \n      String collation = collations.iterator().next();      \n      assertTrue(\"Incorrect collation: \" + collation,\"lowerfilt:(hyphenated-word)\".equals(collation));\n    }\n\n    params.remove(CommonParams.Q);\n    params.add(\"defType\", \"dismax\");\n    params.add(\"qf\", \"lowerfilt\");\n    params.add(CommonParams.Q, \"hypenated-wotd\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n      List<String> collations = suggestions.getAll(\"collation\");\n      assertTrue(collations.size()==1);\n      String collation = collations.iterator().next();\n      assertTrue(\"Incorrect collation: \" + collation,\"hyphenated-word\".equals(collation));\n    }\n\n  }\n\n","sourceOld":"\t@Test\n\tpublic void testCollationWithHypens() throws Exception\n\t{\n\t  SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    \n    params.add(CommonParams.Q, \"lowerfilt:(hypenated-wotd)\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n      List<String> collations = suggestions.getAll(\"collation\");\n      assertTrue(collations.size()==1); \n      String collation = collations.iterator().next();      \n      assertTrue(\"Incorrect collation: \" + collation,\"lowerfilt:(hyphenated-word)\".equals(collation));\n    }\n\n    params.remove(CommonParams.Q);\n    params.add(\"defType\", \"dismax\");\n    params.add(\"qf\", \"lowerfilt\");\n    params.add(CommonParams.Q, \"hypenated-wotd\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n      List<String> collations = suggestions.getAll(\"collation\");\n      assertTrue(collations.size()==1);\n      String collation = collations.iterator().next();\n      assertTrue(\"Incorrect collation: \" + collation,\"hyphenated-word\".equals(collation));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"343d2d9477b299075fa3a19a46e654b6c3bf552b","date":1407872410,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollationWithHypens().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollationWithHypens().mjava","sourceNew":"  @Test\n  public void testCollationWithHypens() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    \n    params.add(CommonParams.Q, \"lowerfilt:(hypenated-wotd)\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n      List<String> collations = collationHolder.getAll(\"collation\");\n      assertTrue(collations.size()==1); \n      String collation = collations.iterator().next();      \n      assertTrue(\"Incorrect collation: \" + collation,\"lowerfilt:(hyphenated-word)\".equals(collation));\n    }\n\n    params.remove(CommonParams.Q);\n    params.add(\"defType\", \"dismax\");\n    params.add(\"qf\", \"lowerfilt\");\n    params.add(CommonParams.Q, \"hypenated-wotd\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n      List<String> collations = collationHolder.getAll(\"collation\");\n      assertTrue(collations.size()==1);\n      String collation = collations.iterator().next();\n      assertTrue(\"Incorrect collation: \" + collation,\"hyphenated-word\".equals(collation));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCollationWithHypens() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    \n    params.add(CommonParams.Q, \"lowerfilt:(hypenated-wotd)\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n      List<String> collations = suggestions.getAll(\"collation\");\n      assertTrue(collations.size()==1); \n      String collation = collations.iterator().next();      \n      assertTrue(\"Incorrect collation: \" + collation,\"lowerfilt:(hyphenated-word)\".equals(collation));\n    }\n\n    params.remove(CommonParams.Q);\n    params.add(\"defType\", \"dismax\");\n    params.add(\"qf\", \"lowerfilt\");\n    params.add(CommonParams.Q, \"hypenated-wotd\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n      List<String> collations = suggestions.getAll(\"collation\");\n      assertTrue(collations.size()==1);\n      String collation = collations.iterator().next();\n      assertTrue(\"Incorrect collation: \" + collation,\"hyphenated-word\".equals(collation));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecd75942508378ccc92c3a26f71db6cba9f25784","date":1450708761,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollationWithHypens().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollationWithHypens().mjava","sourceNew":"  @Test\n  public void testCollationWithHypens() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    \n    params.add(CommonParams.Q, \"lowerfilt:(hypenated-wotd)\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.addResponseHeader(new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n      List<String> collations = collationHolder.getAll(\"collation\");\n      assertTrue(collations.size()==1); \n      String collation = collations.iterator().next();      \n      assertTrue(\"Incorrect collation: \" + collation,\"lowerfilt:(hyphenated-word)\".equals(collation));\n    }\n\n    params.remove(CommonParams.Q);\n    params.add(\"defType\", \"dismax\");\n    params.add(\"qf\", \"lowerfilt\");\n    params.add(CommonParams.Q, \"hypenated-wotd\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n      List<String> collations = collationHolder.getAll(\"collation\");\n      assertTrue(collations.size()==1);\n      String collation = collations.iterator().next();\n      assertTrue(\"Incorrect collation: \" + collation,\"hyphenated-word\".equals(collation));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCollationWithHypens() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    \n    params.add(CommonParams.Q, \"lowerfilt:(hypenated-wotd)\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n      List<String> collations = collationHolder.getAll(\"collation\");\n      assertTrue(collations.size()==1); \n      String collation = collations.iterator().next();      \n      assertTrue(\"Incorrect collation: \" + collation,\"lowerfilt:(hyphenated-word)\".equals(collation));\n    }\n\n    params.remove(CommonParams.Q);\n    params.add(\"defType\", \"dismax\");\n    params.add(\"qf\", \"lowerfilt\");\n    params.add(CommonParams.Q, \"hypenated-wotd\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n      List<String> collations = collationHolder.getAll(\"collation\");\n      assertTrue(collations.size()==1);\n      String collation = collations.iterator().next();\n      assertTrue(\"Incorrect collation: \" + collation,\"hyphenated-word\".equals(collation));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ff704ef91e9ae30ca59babb23ece85720701b60","date":1498684964,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollationWithHypens().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollationWithHypens().mjava","sourceNew":"  @Test\n  public void testCollationWithHypens() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    \n    params.add(CommonParams.Q, \"lowerfilt:(hypenated-wotd)\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.addResponseHeader(new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n      List<String> collations = collationHolder.getAll(\"collation\");\n      assertTrue(collations.size()==1); \n      String collation = collations.iterator().next();      \n      assertTrue(\"Incorrect collation: \" + collation,\"lowerfilt:(hyphenated-word)\".equals(collation));\n    }\n\n    params.remove(CommonParams.Q);\n    params.add(\"defType\", \"dismax\");\n    params.add(\"qf\", \"/lowerfilt\");\n    params.add(CommonParams.Q, \"hypenated-wotd\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n      List<String> collations = collationHolder.getAll(\"collation\");\n      assertTrue(collations.size()==1);\n      String collation = collations.iterator().next();\n      assertTrue(\"Incorrect collation: \" + collation,\"hyphenated-word\".equals(collation));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCollationWithHypens() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    \n    params.add(CommonParams.Q, \"lowerfilt:(hypenated-wotd)\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.addResponseHeader(new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n      List<String> collations = collationHolder.getAll(\"collation\");\n      assertTrue(collations.size()==1); \n      String collation = collations.iterator().next();      \n      assertTrue(\"Incorrect collation: \" + collation,\"lowerfilt:(hyphenated-word)\".equals(collation));\n    }\n\n    params.remove(CommonParams.Q);\n    params.add(\"defType\", \"dismax\");\n    params.add(\"qf\", \"lowerfilt\");\n    params.add(CommonParams.Q, \"hypenated-wotd\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n      List<String> collations = collationHolder.getAll(\"collation\");\n      assertTrue(collations.size()==1);\n      String collation = collations.iterator().next();\n      assertTrue(\"Incorrect collation: \" + collation,\"hyphenated-word\".equals(collation));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollationWithHypens().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollationWithHypens().mjava","sourceNew":"  @Test\n  public void testCollationWithHypens() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    \n    params.add(CommonParams.Q, \"lowerfilt:(hypenated-wotd)\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.addResponseHeader(new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n      List<String> collations = collationHolder.getAll(\"collation\");\n      assertTrue(collations.size()==1); \n      String collation = collations.iterator().next();      \n      assertTrue(\"Incorrect collation: \" + collation,\"lowerfilt:(hyphenated-word)\".equals(collation));\n    }\n\n    params.remove(CommonParams.Q);\n    params.add(\"defType\", \"dismax\");\n    params.add(\"qf\", \"/lowerfilt\");\n    params.add(CommonParams.Q, \"hypenated-wotd\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n      List<String> collations = collationHolder.getAll(\"collation\");\n      assertTrue(collations.size()==1);\n      String collation = collations.iterator().next();\n      assertTrue(\"Incorrect collation: \" + collation,\"hyphenated-word\".equals(collation));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCollationWithHypens() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    \n    params.add(CommonParams.Q, \"lowerfilt:(hypenated-wotd)\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.addResponseHeader(new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n      List<String> collations = collationHolder.getAll(\"collation\");\n      assertTrue(collations.size()==1); \n      String collation = collations.iterator().next();      \n      assertTrue(\"Incorrect collation: \" + collation,\"lowerfilt:(hyphenated-word)\".equals(collation));\n    }\n\n    params.remove(CommonParams.Q);\n    params.add(\"defType\", \"dismax\");\n    params.add(\"qf\", \"lowerfilt\");\n    params.add(CommonParams.Q, \"hypenated-wotd\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n      List<String> collations = collationHolder.getAll(\"collation\");\n      assertTrue(collations.size()==1);\n      String collation = collations.iterator().next();\n      assertTrue(\"Incorrect collation: \" + collation,\"hyphenated-word\".equals(collation));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollationWithHypens().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollationWithHypens().mjava","sourceNew":"  @Test\n  public void testCollationWithHypens() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    \n    params.add(CommonParams.Q, \"lowerfilt:(hypenated-wotd)\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.addResponseHeader(new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n      List<String> collations = collationHolder.getAll(\"collation\");\n      assertTrue(collations.size()==1); \n      String collation = collations.iterator().next();      \n      assertTrue(\"Incorrect collation: \" + collation,\"lowerfilt:(hyphenated-word)\".equals(collation));\n    }\n\n    params.remove(CommonParams.Q);\n    params.add(\"defType\", \"dismax\");\n    params.add(\"qf\", \"/lowerfilt\");\n    params.add(CommonParams.Q, \"hypenated-wotd\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n      List<String> collations = collationHolder.getAll(\"collation\");\n      assertTrue(collations.size()==1);\n      String collation = collations.iterator().next();\n      assertTrue(\"Incorrect collation: \" + collation,\"hyphenated-word\".equals(collation));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCollationWithHypens() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    \n    params.add(CommonParams.Q, \"lowerfilt:(hypenated-wotd)\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.addResponseHeader(new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n      List<String> collations = collationHolder.getAll(\"collation\");\n      assertTrue(collations.size()==1); \n      String collation = collations.iterator().next();      \n      assertTrue(\"Incorrect collation: \" + collation,\"lowerfilt:(hyphenated-word)\".equals(collation));\n    }\n\n    params.remove(CommonParams.Q);\n    params.add(\"defType\", \"dismax\");\n    params.add(\"qf\", \"lowerfilt\");\n    params.add(CommonParams.Q, \"hypenated-wotd\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n      List<String> collations = collationHolder.getAll(\"collation\");\n      assertTrue(collations.size()==1);\n      String collation = collations.iterator().next();\n      assertTrue(\"Incorrect collation: \" + collation,\"hyphenated-word\".equals(collation));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollationWithHypens().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollationWithHypens().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testCollationWithHypens() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    \n    params.add(CommonParams.Q, \"lowerfilt:(hypenated-wotd)\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.addResponseHeader(new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n      List<String> collations = collationHolder.getAll(\"collation\");\n      assertTrue(collations.size()==1); \n      String collation = collations.iterator().next();      \n      assertTrue(\"Incorrect collation: \" + collation,\"lowerfilt:(hyphenated-word)\".equals(collation));\n    }\n\n    params.remove(CommonParams.Q);\n    params.add(\"defType\", \"dismax\");\n    params.add(\"qf\", \"/lowerfilt\");\n    params.add(CommonParams.Q, \"hypenated-wotd\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n      List<String> collations = collationHolder.getAll(\"collation\");\n      assertTrue(collations.size()==1);\n      String collation = collations.iterator().next();\n      assertTrue(\"Incorrect collation: \" + collation,\"hyphenated-word\".equals(collation));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCollationWithHypens() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    \n    params.add(CommonParams.Q, \"lowerfilt:(hypenated-wotd)\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.addResponseHeader(new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n      List<String> collations = collationHolder.getAll(\"collation\");\n      assertTrue(collations.size()==1); \n      String collation = collations.iterator().next();      \n      assertTrue(\"Incorrect collation: \" + collation,\"lowerfilt:(hyphenated-word)\".equals(collation));\n    }\n\n    params.remove(CommonParams.Q);\n    params.add(\"defType\", \"dismax\");\n    params.add(\"qf\", \"/lowerfilt\");\n    params.add(CommonParams.Q, \"hypenated-wotd\");\n    {\n      SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      rsp.add(\"responseHeader\", new SimpleOrderedMap());\n      SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n      handler.handleRequest(req, rsp);\n      req.close();\n      NamedList values = rsp.getValues();\n      NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n      NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n      List<String> collations = collationHolder.getAll(\"collation\");\n      assertTrue(collations.size()==1);\n      String collation = collations.iterator().next();\n      assertTrue(\"Incorrect collation: \" + collation,\"hyphenated-word\".equals(collation));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["4a1d67dfa126cb83a8dfeea520dbc2fae9ba823c","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4a1d67dfa126cb83a8dfeea520dbc2fae9ba823c"],"343d2d9477b299075fa3a19a46e654b6c3bf552b":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["4a1d67dfa126cb83a8dfeea520dbc2fae9ba823c"],"30c8e5574b55d57947e989443dfde611646530ee":["ecd75942508378ccc92c3a26f71db6cba9f25784","28288370235ed02234a64753cdbf0c6ec096304a"],"4a1d67dfa126cb83a8dfeea520dbc2fae9ba823c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["ecd75942508378ccc92c3a26f71db6cba9f25784","5ff704ef91e9ae30ca59babb23ece85720701b60"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"69e6e5a85de57ea8b642c0b8c9e15a2d7d2d0054":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4a1d67dfa126cb83a8dfeea520dbc2fae9ba823c"],"ecd75942508378ccc92c3a26f71db6cba9f25784":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["ecd75942508378ccc92c3a26f71db6cba9f25784"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"343d2d9477b299075fa3a19a46e654b6c3bf552b":["ecd75942508378ccc92c3a26f71db6cba9f25784"],"30c8e5574b55d57947e989443dfde611646530ee":[],"4a1d67dfa126cb83a8dfeea520dbc2fae9ba823c":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","f08557cdb6c60ac7b88a9342c983a20cd236e74f","69e6e5a85de57ea8b642c0b8c9e15a2d7d2d0054"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","4a1d67dfa126cb83a8dfeea520dbc2fae9ba823c","69e6e5a85de57ea8b642c0b8c9e15a2d7d2d0054"],"69e6e5a85de57ea8b642c0b8c9e15a2d7d2d0054":[],"ecd75942508378ccc92c3a26f71db6cba9f25784":["30c8e5574b55d57947e989443dfde611646530ee","28288370235ed02234a64753cdbf0c6ec096304a","5ff704ef91e9ae30ca59babb23ece85720701b60"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","30c8e5574b55d57947e989443dfde611646530ee","69e6e5a85de57ea8b642c0b8c9e15a2d7d2d0054","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}