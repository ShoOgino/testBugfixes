{"path":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#growBuffer(int).mjava","commits":[{"id":"fbb517d79e844487af01a6ca20870b400594321c","date":1436476855,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#growBuffer(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Grows the buffer to at least minSize, but never larger than threshold. */\n  private void growBuffer(int minSize) {\n    assert minSize < threshold;\n    if (buffer.length < minSize) {\n      int nextSize = Math.min(threshold, ArrayUtil.oversize(minSize, RamUsageEstimator.NUM_BYTES_INT));\n      int[] newBuffer = new int[nextSize];\n      System.arraycopy(buffer, 0, newBuffer, 0, buffer.length);\n      buffer = newBuffer;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f226a8b088dd9c8f6ab287a77237c4aa00a238e5","date":1456187572,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#growBuffer(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#growBuffer(int).mjava","sourceNew":"  /** Grows the buffer to at least minSize, but never larger than threshold. */\n  private void growBuffer(int minSize) {\n    assert minSize < threshold;\n    if (buffer.length < minSize) {\n      int nextSize = Math.min(threshold, ArrayUtil.oversize(minSize, Integer.BYTES));\n      int[] newBuffer = new int[nextSize];\n      System.arraycopy(buffer, 0, newBuffer, 0, buffer.length);\n      buffer = newBuffer;\n    }\n  }\n\n","sourceOld":"  /** Grows the buffer to at least minSize, but never larger than threshold. */\n  private void growBuffer(int minSize) {\n    assert minSize < threshold;\n    if (buffer.length < minSize) {\n      int nextSize = Math.min(threshold, ArrayUtil.oversize(minSize, RamUsageEstimator.NUM_BYTES_INT));\n      int[] newBuffer = new int[nextSize];\n      System.arraycopy(buffer, 0, newBuffer, 0, buffer.length);\n      buffer = newBuffer;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#growBuffer(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#growBuffer(int).mjava","sourceNew":"  /** Grows the buffer to at least minSize, but never larger than threshold. */\n  private void growBuffer(int minSize) {\n    assert minSize < threshold;\n    if (buffer.length < minSize) {\n      int nextSize = Math.min(threshold, ArrayUtil.oversize(minSize, Integer.BYTES));\n      int[] newBuffer = new int[nextSize];\n      System.arraycopy(buffer, 0, newBuffer, 0, buffer.length);\n      buffer = newBuffer;\n    }\n  }\n\n","sourceOld":"  /** Grows the buffer to at least minSize, but never larger than threshold. */\n  private void growBuffer(int minSize) {\n    assert minSize < threshold;\n    if (buffer.length < minSize) {\n      int nextSize = Math.min(threshold, ArrayUtil.oversize(minSize, RamUsageEstimator.NUM_BYTES_INT));\n      int[] newBuffer = new int[nextSize];\n      System.arraycopy(buffer, 0, newBuffer, 0, buffer.length);\n      buffer = newBuffer;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d3eccadf4f2a01d2034c96afe1a5c617b2e85af","date":1461918927,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#growBuffer(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#growBuffer(int).mjava","sourceNew":"  /** Grows the buffer to at least minSize, but never larger than threshold. */\n  private void growBuffer(int minSize) {\n    assert minSize < threshold;\n    if (buffer.length < minSize) {\n      int nextSize = Math.min(threshold, ArrayUtil.oversize(minSize, Integer.BYTES));\n      buffer = Arrays.copyOf(buffer, nextSize);\n    }\n  }\n\n","sourceOld":"  /** Grows the buffer to at least minSize, but never larger than threshold. */\n  private void growBuffer(int minSize) {\n    assert minSize < threshold;\n    if (buffer.length < minSize) {\n      int nextSize = Math.min(threshold, ArrayUtil.oversize(minSize, Integer.BYTES));\n      int[] newBuffer = new int[nextSize];\n      System.arraycopy(buffer, 0, newBuffer, 0, buffer.length);\n      buffer = newBuffer;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e8d5955830d712186a4beb716e797d505af7981","date":1461951189,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#growBuffer(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#growBuffer(int).mjava","sourceNew":"  /** Grows the buffer to at least minSize, but never larger than threshold. */\n  private void growBuffer(int minSize) {\n    assert minSize < threshold;\n    if (buffer.length < minSize) {\n      int nextSize = Math.min(threshold, ArrayUtil.oversize(minSize, Integer.BYTES));\n      buffer = Arrays.copyOf(buffer, nextSize);\n    }\n  }\n\n","sourceOld":"  /** Grows the buffer to at least minSize, but never larger than threshold. */\n  private void growBuffer(int minSize) {\n    assert minSize < threshold;\n    if (buffer.length < minSize) {\n      int nextSize = Math.min(threshold, ArrayUtil.oversize(minSize, Integer.BYTES));\n      int[] newBuffer = new int[nextSize];\n      System.arraycopy(buffer, 0, newBuffer, 0, buffer.length);\n      buffer = newBuffer;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#growBuffer(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#growBuffer(int).mjava","sourceNew":"  /** Grows the buffer to at least minSize, but never larger than threshold. */\n  private void growBuffer(int minSize) {\n    assert minSize < threshold;\n    if (buffer.length < minSize) {\n      int nextSize = Math.min(threshold, ArrayUtil.oversize(minSize, Integer.BYTES));\n      buffer = Arrays.copyOf(buffer, nextSize);\n    }\n  }\n\n","sourceOld":"  /** Grows the buffer to at least minSize, but never larger than threshold. */\n  private void growBuffer(int minSize) {\n    assert minSize < threshold;\n    if (buffer.length < minSize) {\n      int nextSize = Math.min(threshold, ArrayUtil.oversize(minSize, Integer.BYTES));\n      int[] newBuffer = new int[nextSize];\n      System.arraycopy(buffer, 0, newBuffer, 0, buffer.length);\n      buffer = newBuffer;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cb92b52940b86bd2ad151ecc61b2f5e83af1a5e","date":1463988431,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#growBuffer(int).mjava","sourceNew":null,"sourceOld":"  /** Grows the buffer to at least minSize, but never larger than threshold. */\n  private void growBuffer(int minSize) {\n    assert minSize < threshold;\n    if (buffer.length < minSize) {\n      int nextSize = Math.min(threshold, ArrayUtil.oversize(minSize, Integer.BYTES));\n      buffer = Arrays.copyOf(buffer, nextSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5","date":1464066565,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#growBuffer(int).mjava","sourceNew":null,"sourceOld":"  /** Grows the buffer to at least minSize, but never larger than threshold. */\n  private void growBuffer(int minSize) {\n    assert minSize < threshold;\n    if (buffer.length < minSize) {\n      int nextSize = Math.min(threshold, ArrayUtil.oversize(minSize, Integer.BYTES));\n      buffer = Arrays.copyOf(buffer, nextSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#growBuffer(int).mjava","sourceNew":null,"sourceOld":"  /** Grows the buffer to at least minSize, but never larger than threshold. */\n  private void growBuffer(int minSize) {\n    assert minSize < threshold;\n    if (buffer.length < minSize) {\n      int nextSize = Math.min(threshold, ArrayUtil.oversize(minSize, Integer.BYTES));\n      buffer = Arrays.copyOf(buffer, nextSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9cb92b52940b86bd2ad151ecc61b2f5e83af1a5e":["8e8d5955830d712186a4beb716e797d505af7981"],"fbb517d79e844487af01a6ca20870b400594321c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3d3eccadf4f2a01d2034c96afe1a5c617b2e85af":["419a8f52c6635419beb951255cacbbb281044c57"],"8e8d5955830d712186a4beb716e797d505af7981":["419a8f52c6635419beb951255cacbbb281044c57","3d3eccadf4f2a01d2034c96afe1a5c617b2e85af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"419a8f52c6635419beb951255cacbbb281044c57":["fbb517d79e844487af01a6ca20870b400594321c","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["fbb517d79e844487af01a6ca20870b400594321c"],"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5":["8e8d5955830d712186a4beb716e797d505af7981","9cb92b52940b86bd2ad151ecc61b2f5e83af1a5e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["55b50463286869f584cf849d1587a0fcd54d1dfa","e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["419a8f52c6635419beb951255cacbbb281044c57","8e8d5955830d712186a4beb716e797d505af7981"]},"commit2Childs":{"9cb92b52940b86bd2ad151ecc61b2f5e83af1a5e":["e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"fbb517d79e844487af01a6ca20870b400594321c":["419a8f52c6635419beb951255cacbbb281044c57","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"3d3eccadf4f2a01d2034c96afe1a5c617b2e85af":["8e8d5955830d712186a4beb716e797d505af7981"],"8e8d5955830d712186a4beb716e797d505af7981":["9cb92b52940b86bd2ad151ecc61b2f5e83af1a5e","e616cfbf284ecbd0f40b4b9e4196daa27e92abd5","55b50463286869f584cf849d1587a0fcd54d1dfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fbb517d79e844487af01a6ca20870b400594321c"],"419a8f52c6635419beb951255cacbbb281044c57":["3d3eccadf4f2a01d2034c96afe1a5c617b2e85af","8e8d5955830d712186a4beb716e797d505af7981","55b50463286869f584cf849d1587a0fcd54d1dfa"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["419a8f52c6635419beb951255cacbbb281044c57"],"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}