{"path":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#[A-extends-Attribute]_getAttribute(Class[A]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#[A-extends-Attribute]_getAttribute(Class[A]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/AttributeSource#[A-extends-Attribute]_getAttribute(Class[A]).mjava","sourceNew":"  /**\n   * The caller must pass in a Class&lt;? extends Attribute&gt; value. \n   * Returns the instance of the passed in Attribute contained in this AttributeSource\n   * \n   * @throws IllegalArgumentException if this AttributeSource does not contain the\n   *         Attribute. It is recommended to always use {@link #addAttribute} even in consumers\n   *         of TokenStreams, because you cannot know if a specific TokenStream really uses\n   *         a specific Attribute. {@link #addAttribute} will automatically make the attribute\n   *         available. If you want to only use the attribute, if it is available (to optimize\n   *         consuming), use {@link #hasAttribute}.\n   */\n  public final <A extends Attribute> A getAttribute(Class<A> attClass) {\n    AttributeImpl attImpl = attributes.get(attClass);\n    if (attImpl == null) {\n      throw new IllegalArgumentException(\"This AttributeSource does not have the attribute '\" + attClass.getName() + \"'.\");\n    }\n    return attClass.cast(attImpl);\n  }\n\n","sourceOld":"  /**\n   * The caller must pass in a Class&lt;? extends Attribute&gt; value. \n   * Returns the instance of the passed in Attribute contained in this AttributeSource\n   * \n   * @throws IllegalArgumentException if this AttributeSource does not contain the\n   *         Attribute. It is recommended to always use {@link #addAttribute} even in consumers\n   *         of TokenStreams, because you cannot know if a specific TokenStream really uses\n   *         a specific Attribute. {@link #addAttribute} will automatically make the attribute\n   *         available. If you want to only use the attribute, if it is available (to optimize\n   *         consuming), use {@link #hasAttribute}.\n   */\n  public final <A extends Attribute> A getAttribute(Class<A> attClass) {\n    AttributeImpl attImpl = attributes.get(attClass);\n    if (attImpl == null) {\n      throw new IllegalArgumentException(\"This AttributeSource does not have the attribute '\" + attClass.getName() + \"'.\");\n    }\n    return attClass.cast(attImpl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46c4b24ab9cf49c047a071b66a83b4c49c72e3c8","date":1377091418,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#[T-extends-Attribute]_getAttribute(Class[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#[A-extends-Attribute]_getAttribute(Class[A]).mjava","sourceNew":"  /**\n   * The caller must pass in a Class&lt;? extends Attribute&gt; value. \n   * Returns the instance of the passed in Attribute contained in this AttributeSource\n   * \n   * @throws IllegalArgumentException if this AttributeSource does not contain the\n   *         Attribute. It is recommended to always use {@link #addAttribute} even in consumers\n   *         of TokenStreams, because you cannot know if a specific TokenStream really uses\n   *         a specific Attribute. {@link #addAttribute} will automatically make the attribute\n   *         available. If you want to only use the attribute, if it is available (to optimize\n   *         consuming), use {@link #hasAttribute}.\n   */\n  public final <T extends Attribute> T getAttribute(Class<T> attClass) {\n    AttributeImpl attImpl = attributes.get(attClass);\n    if (attImpl == null) {\n      throw new IllegalArgumentException(\"This AttributeSource does not have the attribute '\" + attClass.getName() + \"'.\");\n    }\n    return attClass.cast(attImpl);\n  }\n\n","sourceOld":"  /**\n   * The caller must pass in a Class&lt;? extends Attribute&gt; value. \n   * Returns the instance of the passed in Attribute contained in this AttributeSource\n   * \n   * @throws IllegalArgumentException if this AttributeSource does not contain the\n   *         Attribute. It is recommended to always use {@link #addAttribute} even in consumers\n   *         of TokenStreams, because you cannot know if a specific TokenStream really uses\n   *         a specific Attribute. {@link #addAttribute} will automatically make the attribute\n   *         available. If you want to only use the attribute, if it is available (to optimize\n   *         consuming), use {@link #hasAttribute}.\n   */\n  public final <A extends Attribute> A getAttribute(Class<A> attClass) {\n    AttributeImpl attImpl = attributes.get(attClass);\n    if (attImpl == null) {\n      throw new IllegalArgumentException(\"This AttributeSource does not have the attribute '\" + attClass.getName() + \"'.\");\n    }\n    return attClass.cast(attImpl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#[A-extends-Attribute]_getAttribute(Class[A]).mjava","sourceNew":null,"sourceOld":"  /**\n   * The caller must pass in a Class&lt;? extends Attribute&gt; value. \n   * Returns the instance of the passed in Attribute contained in this AttributeSource\n   * \n   * @throws IllegalArgumentException if this AttributeSource does not contain the\n   *         Attribute. It is recommended to always use {@link #addAttribute} even in consumers\n   *         of TokenStreams, because you cannot know if a specific TokenStream really uses\n   *         a specific Attribute. {@link #addAttribute} will automatically make the attribute\n   *         available. If you want to only use the attribute, if it is available (to optimize\n   *         consuming), use {@link #hasAttribute}.\n   */\n  public final <A extends Attribute> A getAttribute(Class<A> attClass) {\n    AttributeImpl attImpl = attributes.get(attClass);\n    if (attImpl == null) {\n      throw new IllegalArgumentException(\"This AttributeSource does not have the attribute '\" + attClass.getName() + \"'.\");\n    }\n    return attClass.cast(attImpl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","46c4b24ab9cf49c047a071b66a83b4c49c72e3c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["46c4b24ab9cf49c047a071b66a83b4c49c72e3c8"],"46c4b24ab9cf49c047a071b66a83b4c49c72e3c8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","46c4b24ab9cf49c047a071b66a83b4c49c72e3c8"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"46c4b24ab9cf49c047a071b66a83b4c49c72e3c8":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}