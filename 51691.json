{"path":"src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","commits":[{"id":"5c6bd70b660528bcf8dd3216ea1f7565ac220a20","date":1156813990,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"/dev/null","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     2, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock <= 2 (after instantiating IndexWriter)\",\n                   lf.makeLockCount > 2);\n        \n        for(Enumeration e = lf.locksCreated.keys(); e.hasMoreElements();) {\n            String lockName = (String) e.nextElement();\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(Enumeration e = lf.locksCreated.keys(); e.hasMoreElements();) {\n            String lockName = (String) e.nextElement();\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     2, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock <= 2 (after instantiating IndexWriter)\",\n                   lf.makeLockCount > 2);\n        \n        for(Enumeration e = lf.locksCreated.keys(); e.hasMoreElements();) {\n            String lockName = (String) e.nextElement();\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(Enumeration e = lf.locksCreated.keys(); e.hasMoreElements();) {\n            String lockName = (String) e.nextElement();\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(Enumeration e = lf.locksCreated.keys(); e.hasMoreElements();) {\n            String lockName = (String) e.nextElement();\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7b6cdc70e097da94da79a655ed8f94477ff69f5","date":1220815360,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(Iterator e = lf.locksCreated.keySet().iterator(); e.hasNext();) {\n            String lockName = (String) e.next();\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(Enumeration e = lf.locksCreated.keys(); e.hasMoreElements();) {\n            String lockName = (String) e.nextElement();\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(Iterator e = lf.locksCreated.keySet().iterator(); e.hasNext();) {\n            String lockName = (String) e.next();\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testCustomLockFactory().mjava","sourceNew":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","sourceOld":"    public void testCustomLockFactory() throws IOException {\n        Directory dir = new RAMDirectory();\n        MockLockFactory lf = new MockLockFactory();\n        dir.setLockFactory(lf);\n\n        // Lock prefix should have been set:\n        assertTrue(\"lock prefix was not set by the RAMDirectory\", lf.lockPrefixSet);\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n        // add 100 documents (so that commit lock is used)\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // Both write lock and commit lock should have been created:\n        assertEquals(\"# of unique locks created (after instantiating IndexWriter)\",\n                     1, lf.locksCreated.size());\n        assertTrue(\"# calls to makeLock is 0 (after instantiating IndexWriter)\",\n                   lf.makeLockCount >= 1);\n        \n        for(final String lockName : lf.locksCreated.keySet()) {\n            MockLockFactory.MockLock lock = (MockLockFactory.MockLock) lf.locksCreated.get(lockName);\n            assertTrue(\"# calls to Lock.obtain is 0 (after instantiating IndexWriter)\",\n                       lock.lockAttempts > 0);\n        }\n        \n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"235efcba838a273934c5dd0ef66bb07c7fb0d718":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"],"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"235efcba838a273934c5dd0ef66bb07c7fb0d718":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}