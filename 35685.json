{"path":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#checkFields(String[],String[]).mjava","commits":[{"id":"5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e","date":1497547232,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#checkFields(String[],String[]).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkFields(String[] types, String[] suffixes) {\n // sanity check the expected properties of our fields (ie: who broke the schema?)\n    IndexSchema schema = h.getCore().getLatestSchema();\n    for (String type : types) {\n      for (String suffix : suffixes) {\n        String f = \"val_\" + type + \"s\" + suffix;\n        SchemaField sf = schema.getField(f);\n        assertTrue(f + \" is not multivalued\", sf.multiValued());\n        assertEquals(f + \" doesn't have expected docValues status\",\n                     f.contains(\"dv\") || sf.getType().isPointField(), sf.hasDocValues());\n        assertEquals(f + \" doesn't have expected index status\",\n                     ! f.contains(\"ni\"), sf.indexed());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#checkFields(String[],String[]).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkFields(String[] types, String[] suffixes) {\n // sanity check the expected properties of our fields (ie: who broke the schema?)\n    IndexSchema schema = h.getCore().getLatestSchema();\n    for (String type : types) {\n      for (String suffix : suffixes) {\n        String f = \"val_\" + type + \"s\" + suffix;\n        SchemaField sf = schema.getField(f);\n        assertTrue(f + \" is not multivalued\", sf.multiValued());\n        assertEquals(f + \" doesn't have expected docValues status\",\n                     f.contains(\"dv\") || sf.getType().isPointField(), sf.hasDocValues());\n        assertEquals(f + \" doesn't have expected index status\",\n                     ! f.contains(\"ni\"), sf.indexed());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#checkFields(String[],String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#checkFields(String[],String[]).mjava","sourceNew":"  private static void checkFields(String[] types, String[] suffixes) {\n    // sanity check the expected properties of our fields (ie: who broke the schema?)\n    IndexSchema schema = h.getCore().getLatestSchema();\n    for (String type : types) {\n      for (String suffix : suffixes) {\n        String f = \"val_\" + type + \"s\" + suffix;\n        SchemaField sf = schema.getField(f);\n        assertTrue(f + \" is not multivalued\", sf.multiValued());\n        assertEquals(f + \" doesn't have expected docValues status\",\n                     f.contains(\"dv\") || f.endsWith(\"_p\")\n                     || Boolean.getBoolean(NUMERIC_DOCVALUES_SYSPROP), sf.hasDocValues());\n        assertEquals(f + \" doesn't have expected index status\",\n                     ! f.contains(\"ni\"), sf.indexed());\n      }\n    }\n  }\n\n","sourceOld":"  private static void checkFields(String[] types, String[] suffixes) {\n // sanity check the expected properties of our fields (ie: who broke the schema?)\n    IndexSchema schema = h.getCore().getLatestSchema();\n    for (String type : types) {\n      for (String suffix : suffixes) {\n        String f = \"val_\" + type + \"s\" + suffix;\n        SchemaField sf = schema.getField(f);\n        assertTrue(f + \" is not multivalued\", sf.multiValued());\n        assertEquals(f + \" doesn't have expected docValues status\",\n                     f.contains(\"dv\") || sf.getType().isPointField(), sf.hasDocValues());\n        assertEquals(f + \" doesn't have expected index status\",\n                     ! f.contains(\"ni\"), sf.indexed());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#checkFields(String[],String[]).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkFields(String[] types, String[] suffixes) {\n    // sanity check the expected properties of our fields (ie: who broke the schema?)\n    IndexSchema schema = h.getCore().getLatestSchema();\n    for (String type : types) {\n      for (String suffix : suffixes) {\n        String f = \"val_\" + type + \"s\" + suffix;\n        SchemaField sf = schema.getField(f);\n        assertTrue(f + \" is not multivalued\", sf.multiValued());\n        assertEquals(f + \" doesn't have expected docValues status\",\n                     f.contains(\"dv\") || f.endsWith(\"_p\")\n                     || Boolean.getBoolean(NUMERIC_DOCVALUES_SYSPROP), sf.hasDocValues());\n        assertEquals(f + \" doesn't have expected index status\",\n                     ! f.contains(\"ni\"), sf.indexed());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf2282b6a7c3f113e7a233b785b80527c03d590","date":1516129064,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#checkFields(String[],String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#checkFields(String[],String[]).mjava","sourceNew":"  private static void checkFields(String[] types, String[] suffixes) {\n    // sanity check the expected properties of our fields (ie: who broke the schema?)\n    IndexSchema schema = h.getCore().getLatestSchema();\n    for (String type : types) {\n      for (String suffix : suffixes) {\n        String f = \"val_\" + type + \"s\" + suffix;\n        SchemaField sf = schema.getField(f);\n        assertTrue(f + \" is not multivalued\", sf.multiValued());\n        assertEquals(f + \" doesn't have expected docValues status\",\n                     f.contains(\"dv\") || f.endsWith(\"_p\")\n                     || Boolean.getBoolean(NUMERIC_DOCVALUES_SYSPROP), sf.hasDocValues());\n        assertEquals(f + \" doesn't have expected index status\",\n                     ! f.contains(\"ni\"), sf.indexed());\n\n        if (f.contains(\"miss\")) {\n          // if name contains \"miss\" assert that the missing first/last props match\n          // but don't make any asserts about fields w/o that in name\n          // (schema11.xml's strings has some preexisting silliness that don't affect us)\n          assertEquals(f + \" sortMissingFirst is wrong\",\n                       f.contains(\"missf\"), sf.sortMissingFirst());\n          assertEquals(f + \" sortMissingLast is wrong\",\n                       f.contains(\"missl\"), sf.sortMissingLast());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void checkFields(String[] types, String[] suffixes) {\n    // sanity check the expected properties of our fields (ie: who broke the schema?)\n    IndexSchema schema = h.getCore().getLatestSchema();\n    for (String type : types) {\n      for (String suffix : suffixes) {\n        String f = \"val_\" + type + \"s\" + suffix;\n        SchemaField sf = schema.getField(f);\n        assertTrue(f + \" is not multivalued\", sf.multiValued());\n        assertEquals(f + \" doesn't have expected docValues status\",\n                     f.contains(\"dv\") || f.endsWith(\"_p\")\n                     || Boolean.getBoolean(NUMERIC_DOCVALUES_SYSPROP), sf.hasDocValues());\n        assertEquals(f + \" doesn't have expected index status\",\n                     ! f.contains(\"ni\"), sf.indexed());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#checkFields(String[],String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#checkFields(String[],String[]).mjava","sourceNew":"  private static void checkFields(String[] types, String[] suffixes) {\n    // sanity check the expected properties of our fields (ie: who broke the schema?)\n    IndexSchema schema = h.getCore().getLatestSchema();\n    for (String type : types) {\n      for (String suffix : suffixes) {\n        String f = \"val_\" + type + \"s\" + suffix;\n        SchemaField sf = schema.getField(f);\n        assertTrue(f + \" is not multivalued\", sf.multiValued());\n        assertEquals(f + \" doesn't have expected docValues status\",\n                     f.contains(\"dv\") || f.endsWith(\"_p\")\n                     || Boolean.getBoolean(NUMERIC_DOCVALUES_SYSPROP), sf.hasDocValues());\n        assertEquals(f + \" doesn't have expected index status\",\n                     ! f.contains(\"ni\"), sf.indexed());\n\n        if (f.contains(\"miss\")) {\n          // if name contains \"miss\" assert that the missing first/last props match\n          // but don't make any asserts about fields w/o that in name\n          // (schema11.xml's strings has some preexisting silliness that don't affect us)\n          assertEquals(f + \" sortMissingFirst is wrong\",\n                       f.contains(\"missf\"), sf.sortMissingFirst());\n          assertEquals(f + \" sortMissingLast is wrong\",\n                       f.contains(\"missl\"), sf.sortMissingLast());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void checkFields(String[] types, String[] suffixes) {\n    // sanity check the expected properties of our fields (ie: who broke the schema?)\n    IndexSchema schema = h.getCore().getLatestSchema();\n    for (String type : types) {\n      for (String suffix : suffixes) {\n        String f = \"val_\" + type + \"s\" + suffix;\n        SchemaField sf = schema.getField(f);\n        assertTrue(f + \" is not multivalued\", sf.multiValued());\n        assertEquals(f + \" doesn't have expected docValues status\",\n                     f.contains(\"dv\") || f.endsWith(\"_p\")\n                     || Boolean.getBoolean(NUMERIC_DOCVALUES_SYSPROP), sf.hasDocValues());\n        assertEquals(f + \" doesn't have expected index status\",\n                     ! f.contains(\"ni\"), sf.indexed());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09db84b25dda87b73022d145a68f14c86a3a552d","date":1517506829,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#checkFields(String[],String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#checkFields(String[],String[]).mjava","sourceNew":"  private static void checkFields(String[] types, String[] suffixes) {\n    // sanity check the expected properties of our fields (ie: who broke the schema?)\n    IndexSchema schema = h.getCore().getLatestSchema();\n    for (String type : types) {\n      for (String suffix : suffixes) {\n        String f = \"val_\" + type + \"s\" + suffix;\n        SchemaField sf = schema.getField(f);\n        assertTrue(f + \" is not multivalued\", sf.multiValued());\n        assertEquals(f + \" doesn't have expected docValues status\",\n                     ((f.contains(\"dv\") || f.endsWith(\"_p\") || Boolean.getBoolean(NUMERIC_DOCVALUES_SYSPROP))\n                      && !f.contains(\"nodv\")),\n                     sf.hasDocValues());\n        assertEquals(f + \" doesn't have expected index status\",\n                     ! f.contains(\"ni\"), sf.indexed());\n\n        if (f.contains(\"miss\")) {\n          // if name contains \"miss\" assert that the missing first/last props match\n          // but don't make any asserts about fields w/o that in name\n          // (schema11.xml's strings has some preexisting silliness that don't affect us)\n          assertEquals(f + \" sortMissingFirst is wrong\",\n                       f.contains(\"missf\"), sf.sortMissingFirst());\n          assertEquals(f + \" sortMissingLast is wrong\",\n                       f.contains(\"missl\"), sf.sortMissingLast());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void checkFields(String[] types, String[] suffixes) {\n    // sanity check the expected properties of our fields (ie: who broke the schema?)\n    IndexSchema schema = h.getCore().getLatestSchema();\n    for (String type : types) {\n      for (String suffix : suffixes) {\n        String f = \"val_\" + type + \"s\" + suffix;\n        SchemaField sf = schema.getField(f);\n        assertTrue(f + \" is not multivalued\", sf.multiValued());\n        assertEquals(f + \" doesn't have expected docValues status\",\n                     f.contains(\"dv\") || f.endsWith(\"_p\")\n                     || Boolean.getBoolean(NUMERIC_DOCVALUES_SYSPROP), sf.hasDocValues());\n        assertEquals(f + \" doesn't have expected index status\",\n                     ! f.contains(\"ni\"), sf.indexed());\n\n        if (f.contains(\"miss\")) {\n          // if name contains \"miss\" assert that the missing first/last props match\n          // but don't make any asserts about fields w/o that in name\n          // (schema11.xml's strings has some preexisting silliness that don't affect us)\n          assertEquals(f + \" sortMissingFirst is wrong\",\n                       f.contains(\"missf\"), sf.sortMissingFirst());\n          assertEquals(f + \" sortMissingLast is wrong\",\n                       f.contains(\"missl\"), sf.sortMissingLast());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b94236357aaa22b76c10629851fe4e376e0cea82":["28288370235ed02234a64753cdbf0c6ec096304a","4cf2282b6a7c3f113e7a233b785b80527c03d590"],"09db84b25dda87b73022d145a68f14c86a3a552d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cf2282b6a7c3f113e7a233b785b80527c03d590":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09db84b25dda87b73022d145a68f14c86a3a552d"]},"commit2Childs":{"5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"b94236357aaa22b76c10629851fe4e376e0cea82":["09db84b25dda87b73022d145a68f14c86a3a552d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"09db84b25dda87b73022d145a68f14c86a3a552d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cf2282b6a7c3f113e7a233b785b80527c03d590":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["b94236357aaa22b76c10629851fe4e376e0cea82","4cf2282b6a7c3f113e7a233b785b80527c03d590"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}