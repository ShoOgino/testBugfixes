{"path":"src/java/org/apache/lucene/util/Arrays#sort(String[]).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/Arrays#sort(String[]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Sorts the specified array of objects into ascending order, according\n     * to the <i>natural comparison method</i> of its elements.  All\n     * elements in the array must implement the Comparable interface.\n     * Furthermore, all elements in the array must be <i>mutually\n     * comparable</i> (that is, e1.compareTo(e2) must not throw a\n     * typeMismatchException for any elements e1 and e2 in the array).\n     * <p>\n     * This sort is guaranteed to be <em>stable</em>:  equal elements will\n     * not be reordered as a result of the sort.\n     * <p>\n     * The sorting algorithm is a modified mergesort (in which the merge is\n     * omitted if the highest element in the low sublist is less than the\n     * lowest element in the high sublist).  This algorithm offers guaranteed\n     * n*log(n) performance, and can approach linear performance on nearly\n     * sorted lists.\n     * \n     * @param a the array to be sorted.\n     * @exception ClassCastException array contains elements that are not\n     *\t\t  <i>mutually comparable</i> (for example, Strings and\n     *\t\t  Integers).\n     * @see Comparable\n     */\n    public static void sort(String[] a) {\n        String aux[] = (String[])a.clone();\n        mergeSort(aux, a, 0, a.length);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51507f02c43eb5af1a493ce4c8e071bb20350b9a","date":1072630976,"type":4,"author":"Erik Hatcher","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/util/Arrays#sort(String[]).mjava","sourceNew":null,"sourceOld":"    /**\n     * Sorts the specified array of objects into ascending order, according\n     * to the <i>natural comparison method</i> of its elements.  All\n     * elements in the array must implement the Comparable interface.\n     * Furthermore, all elements in the array must be <i>mutually\n     * comparable</i> (that is, e1.compareTo(e2) must not throw a\n     * typeMismatchException for any elements e1 and e2 in the array).\n     * <p>\n     * This sort is guaranteed to be <em>stable</em>:  equal elements will\n     * not be reordered as a result of the sort.\n     * <p>\n     * The sorting algorithm is a modified mergesort (in which the merge is\n     * omitted if the highest element in the low sublist is less than the\n     * lowest element in the high sublist).  This algorithm offers guaranteed\n     * n*log(n) performance, and can approach linear performance on nearly\n     * sorted lists.\n     * \n     * @param a the array to be sorted.\n     * @exception ClassCastException array contains elements that are not\n     *\t\t  <i>mutually comparable</i> (for example, Strings and\n     *\t\t  Integers).\n     * @see Comparable\n     */\n    public static void sort(String[] a) {\n        String aux[] = (String[])a.clone();\n        mergeSort(aux, a, 0, a.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"51507f02c43eb5af1a493ce4c8e071bb20350b9a":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51507f02c43eb5af1a493ce4c8e071bb20350b9a"]},"commit2Childs":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["51507f02c43eb5af1a493ce4c8e071bb20350b9a"],"51507f02c43eb5af1a493ce4c8e071bb20350b9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}