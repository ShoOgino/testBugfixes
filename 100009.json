{"path":"contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#toString().mjava","commits":[{"id":"d68e5c46e6a5ebdf4dafec4a123344092b915cc0","date":1256752193,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#toString().mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymMap#toString().mjava","sourceNew":"  /**\n   * Returns a String representation of the index data for debugging purposes.\n   * \n   * @return a String representation\n   */\n  public String toString() {\n    StringBuilder buf = new StringBuilder();\n    Iterator iter = new TreeMap(table).keySet().iterator();\n    int count = 0;\n    int f0 = 0;\n    int f1 = 0;\n    int f2 = 0;\n    int f3 = 0;\n    \n    while (iter.hasNext()) {\n      String word = (String) iter.next();\n      buf.append(word + \":\");\n      String[] synonyms = getSynonyms(word);\n      buf.append(Arrays.asList(synonyms));\n      buf.append(\"\\n\");\n      count += synonyms.length;\n      if (synonyms.length == 0) f0++;\n      if (synonyms.length == 1) f1++;\n      if (synonyms.length == 2) f2++;\n      if (synonyms.length == 3) f3++;\n    }\n    \n    buf.append(\"\\n\\nkeys=\" + table.size() + \", synonyms=\" + count + \", f0=\" + f0 +\", f1=\" + f1 + \", f2=\" + f2 + \", f3=\" + f3);\n    return buf.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a String representation of the index data for debugging purposes.\n   * \n   * @return a String representation\n   */\n  public String toString() {\n    StringBuilder buf = new StringBuilder();\n    Iterator iter = new TreeMap(table).keySet().iterator();\n    int count = 0;\n    int f0 = 0;\n    int f1 = 0;\n    int f2 = 0;\n    int f3 = 0;\n    \n    while (iter.hasNext()) {\n      String word = (String) iter.next();\n      buf.append(word + \":\");\n      String[] synonyms = getSynonyms(word);\n      buf.append(Arrays.asList(synonyms));\n      buf.append(\"\\n\");\n      count += synonyms.length;\n      if (synonyms.length == 0) f0++;\n      if (synonyms.length == 1) f1++;\n      if (synonyms.length == 2) f2++;\n      if (synonyms.length == 3) f3++;\n    }\n    \n    buf.append(\"\\n\\nkeys=\" + table.size() + \", synonyms=\" + count + \", f0=\" + f0 +\", f1=\" + f1 + \", f2=\" + f2 + \", f3=\" + f3);\n    return buf.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f11899016a0460a7ea2e4b008d002e1e75c7d867","date":1256772085,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#toString().mjava","pathOld":"contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#toString().mjava","sourceNew":"  /**\n   * Returns a String representation of the index data for debugging purposes.\n   * \n   * @return a String representation\n   */\n  public String toString() {\n    StringBuilder buf = new StringBuilder();\n    Iterator<String> iter = new TreeMap<String,String[]>(table).keySet().iterator();\n    int count = 0;\n    int f0 = 0;\n    int f1 = 0;\n    int f2 = 0;\n    int f3 = 0;\n    \n    while (iter.hasNext()) {\n      String word = iter.next();\n      buf.append(word + \":\");\n      String[] synonyms = getSynonyms(word);\n      buf.append(Arrays.asList(synonyms));\n      buf.append(\"\\n\");\n      count += synonyms.length;\n      if (synonyms.length == 0) f0++;\n      if (synonyms.length == 1) f1++;\n      if (synonyms.length == 2) f2++;\n      if (synonyms.length == 3) f3++;\n    }\n    \n    buf.append(\"\\n\\nkeys=\" + table.size() + \", synonyms=\" + count + \", f0=\" + f0 +\", f1=\" + f1 + \", f2=\" + f2 + \", f3=\" + f3);\n    return buf.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a String representation of the index data for debugging purposes.\n   * \n   * @return a String representation\n   */\n  public String toString() {\n    StringBuilder buf = new StringBuilder();\n    Iterator iter = new TreeMap(table).keySet().iterator();\n    int count = 0;\n    int f0 = 0;\n    int f1 = 0;\n    int f2 = 0;\n    int f3 = 0;\n    \n    while (iter.hasNext()) {\n      String word = (String) iter.next();\n      buf.append(word + \":\");\n      String[] synonyms = getSynonyms(word);\n      buf.append(Arrays.asList(synonyms));\n      buf.append(\"\\n\");\n      count += synonyms.length;\n      if (synonyms.length == 0) f0++;\n      if (synonyms.length == 1) f1++;\n      if (synonyms.length == 2) f2++;\n      if (synonyms.length == 3) f3++;\n    }\n    \n    buf.append(\"\\n\\nkeys=\" + table.size() + \", synonyms=\" + count + \", f0=\" + f0 +\", f1=\" + f1 + \", f2=\" + f2 + \", f3=\" + f3);\n    return buf.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#toString().mjava","pathOld":"contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#toString().mjava","sourceNew":"  /**\n   * Returns a String representation of the index data for debugging purposes.\n   * \n   * @return a String representation\n   */\n  @Override\n  public String toString() {\n    StringBuilder buf = new StringBuilder();\n    Iterator<String> iter = new TreeMap<String,String[]>(table).keySet().iterator();\n    int count = 0;\n    int f0 = 0;\n    int f1 = 0;\n    int f2 = 0;\n    int f3 = 0;\n    \n    while (iter.hasNext()) {\n      String word = iter.next();\n      buf.append(word + \":\");\n      String[] synonyms = getSynonyms(word);\n      buf.append(Arrays.asList(synonyms));\n      buf.append(\"\\n\");\n      count += synonyms.length;\n      if (synonyms.length == 0) f0++;\n      if (synonyms.length == 1) f1++;\n      if (synonyms.length == 2) f2++;\n      if (synonyms.length == 3) f3++;\n    }\n    \n    buf.append(\"\\n\\nkeys=\" + table.size() + \", synonyms=\" + count + \", f0=\" + f0 +\", f1=\" + f1 + \", f2=\" + f2 + \", f3=\" + f3);\n    return buf.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a String representation of the index data for debugging purposes.\n   * \n   * @return a String representation\n   */\n  public String toString() {\n    StringBuilder buf = new StringBuilder();\n    Iterator<String> iter = new TreeMap<String,String[]>(table).keySet().iterator();\n    int count = 0;\n    int f0 = 0;\n    int f1 = 0;\n    int f2 = 0;\n    int f3 = 0;\n    \n    while (iter.hasNext()) {\n      String word = iter.next();\n      buf.append(word + \":\");\n      String[] synonyms = getSynonyms(word);\n      buf.append(Arrays.asList(synonyms));\n      buf.append(\"\\n\");\n      count += synonyms.length;\n      if (synonyms.length == 0) f0++;\n      if (synonyms.length == 1) f1++;\n      if (synonyms.length == 2) f2++;\n      if (synonyms.length == 3) f3++;\n    }\n    \n    buf.append(\"\\n\\nkeys=\" + table.size() + \", synonyms=\" + count + \", f0=\" + f0 +\", f1=\" + f1 + \", f2=\" + f2 + \", f3=\" + f3);\n    return buf.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#toString().mjava","pathOld":"contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#toString().mjava","sourceNew":"  /**\n   * Returns a String representation of the index data for debugging purposes.\n   * \n   * @return a String representation\n   */\n  @Override\n  public String toString() {\n    StringBuilder buf = new StringBuilder();\n    Iterator<String> iter = new TreeMap<String,String[]>(table).keySet().iterator();\n    int count = 0;\n    int f0 = 0;\n    int f1 = 0;\n    int f2 = 0;\n    int f3 = 0;\n    \n    while (iter.hasNext()) {\n      String word = iter.next();\n      buf.append(word + \":\");\n      String[] synonyms = getSynonyms(word);\n      buf.append(Arrays.asList(synonyms));\n      buf.append(\"\\n\");\n      count += synonyms.length;\n      if (synonyms.length == 0) f0++;\n      if (synonyms.length == 1) f1++;\n      if (synonyms.length == 2) f2++;\n      if (synonyms.length == 3) f3++;\n    }\n    \n    buf.append(\"\\n\\nkeys=\" + table.size() + \", synonyms=\" + count + \", f0=\" + f0 +\", f1=\" + f1 + \", f2=\" + f2 + \", f3=\" + f3);\n    return buf.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a String representation of the index data for debugging purposes.\n   * \n   * @return a String representation\n   */\n  @Override\n  public String toString() {\n    StringBuilder buf = new StringBuilder();\n    Iterator<String> iter = new TreeMap<String,String[]>(table).keySet().iterator();\n    int count = 0;\n    int f0 = 0;\n    int f1 = 0;\n    int f2 = 0;\n    int f3 = 0;\n    \n    while (iter.hasNext()) {\n      String word = iter.next();\n      buf.append(word + \":\");\n      String[] synonyms = getSynonyms(word);\n      buf.append(Arrays.asList(synonyms));\n      buf.append(\"\\n\");\n      count += synonyms.length;\n      if (synonyms.length == 0) f0++;\n      if (synonyms.length == 1) f1++;\n      if (synonyms.length == 2) f2++;\n      if (synonyms.length == 3) f3++;\n    }\n    \n    buf.append(\"\\n\\nkeys=\" + table.size() + \", synonyms=\" + count + \", f0=\" + f0 +\", f1=\" + f1 + \", f2=\" + f2 + \", f3=\" + f3);\n    return buf.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["d68e5c46e6a5ebdf4dafec4a123344092b915cc0"],"d68e5c46e6a5ebdf4dafec4a123344092b915cc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d68e5c46e6a5ebdf4dafec4a123344092b915cc0"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d68e5c46e6a5ebdf4dafec4a123344092b915cc0":["f11899016a0460a7ea2e4b008d002e1e75c7d867"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}