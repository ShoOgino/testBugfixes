{"path":"lucene/core/src/test/org/apache/lucene/document/TestXYPolygonShapeQueries.PolygonValidator#testComponentQuery(Component2D,Object).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestXYPolygonShapeQueries.PolygonValidator#testComponentQuery(Component2D,Object).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestXYPolygonShapeQueries.PolygonValidator#testComponentQuery(Component2D,Object).mjava","sourceNew":"    @Override\n    public boolean testComponentQuery(Component2D query, Object o) {\n      XYPolygon shape = (XYPolygon) o;\n      if (queryRelation == QueryRelation.CONTAINS) {\n        return testWithinPolygon(query, (XYPolygon) shape);\n      }\n      List<Tessellator.Triangle> tessellation = Tessellator.tessellate(shape);\n      for (Tessellator.Triangle t : tessellation) {\n        double[] qTriangle = encoder.quantizeTriangle(t.getX(0), t.getY(0), t.isEdgefromPolygon(0),\n            t.getX(1), t.getY(1), t.isEdgefromPolygon(1),\n            t.getX(2), t.getY(2), t.isEdgefromPolygon(2));\n        Relation r = query.relateTriangle(qTriangle[1], qTriangle[0], qTriangle[3], qTriangle[2], qTriangle[5], qTriangle[4]);\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","sourceOld":"    @Override\n    public boolean testComponentQuery(Component2D query, Object o) {\n      XYPolygon shape = (XYPolygon) o;\n      if (queryRelation == QueryRelation.CONTAINS) {\n        return testWithinPolygon(query, (XYPolygon) shape);\n      }\n      List<Tessellator.Triangle> tessellation = Tessellator.tessellate(shape);\n      for (Tessellator.Triangle t : tessellation) {\n        double[] qTriangle = encoder.quantizeTriangle(t.getX(0), t.getY(0), t.isEdgefromPolygon(0),\n            t.getX(1), t.getY(1), t.isEdgefromPolygon(1),\n            t.getX(2), t.getY(2), t.isEdgefromPolygon(2));\n        Relation r = query.relateTriangle(qTriangle[1], qTriangle[0], qTriangle[3], qTriangle[2], qTriangle[5], qTriangle[4]);\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c21918ef3ad23e254f39cb0cd6c86851fcb993","date":1580123310,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestXYPolygonShapeQueries.PolygonValidator#testComponentQuery(Component2D,Object).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestXYPolygonShapeQueries.PolygonValidator#testComponentQuery(Component2D,Object).mjava","sourceNew":"    @Override\n    public boolean testComponentQuery(Component2D query, Object o) {\n      XYPolygon shape = (XYPolygon) o;\n      if (queryRelation == QueryRelation.CONTAINS) {\n        return testWithinPolygon(query, shape);\n      }\n      List<Tessellator.Triangle> tessellation = Tessellator.tessellate(shape);\n      for (Tessellator.Triangle t : tessellation) {\n        double[] qTriangle = encoder.quantizeTriangle(t.getX(0), t.getY(0), t.isEdgefromPolygon(0),\n            t.getX(1), t.getY(1), t.isEdgefromPolygon(1),\n            t.getX(2), t.getY(2), t.isEdgefromPolygon(2));\n        Relation r = query.relateTriangle(qTriangle[1], qTriangle[0], qTriangle[3], qTriangle[2], qTriangle[5], qTriangle[4]);\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","sourceOld":"    @Override\n    public boolean testComponentQuery(Component2D query, Object o) {\n      XYPolygon shape = (XYPolygon) o;\n      if (queryRelation == QueryRelation.CONTAINS) {\n        return testWithinPolygon(query, (XYPolygon) shape);\n      }\n      List<Tessellator.Triangle> tessellation = Tessellator.tessellate(shape);\n      for (Tessellator.Triangle t : tessellation) {\n        double[] qTriangle = encoder.quantizeTriangle(t.getX(0), t.getY(0), t.isEdgefromPolygon(0),\n            t.getX(1), t.getY(1), t.isEdgefromPolygon(1),\n            t.getX(2), t.getY(2), t.isEdgefromPolygon(2));\n        Relation r = query.relateTriangle(qTriangle[1], qTriangle[0], qTriangle[3], qTriangle[2], qTriangle[5], qTriangle[4]);\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c568a1e2a5125c2245150eebb030a81baa158b31","date":1587403489,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestXYPolygonShapeQueries.PolygonValidator#testComponentQuery(Component2D,Object).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestXYPolygonShapeQueries.PolygonValidator#testComponentQuery(Component2D,Object).mjava","sourceNew":"    @Override\n    public boolean testComponentQuery(Component2D query, Object o) {\n      XYPolygon polygon = (XYPolygon) o;\n      if (queryRelation == QueryRelation.CONTAINS) {\n        return testWithinQuery(query, XYShape.createIndexableFields(\"dummy\", polygon)) == Component2D.WithinRelation.CANDIDATE;\n      }\n      return testComponentQuery(query, XYShape.createIndexableFields(\"dummy\", polygon));\n    }\n\n","sourceOld":"    @Override\n    public boolean testComponentQuery(Component2D query, Object o) {\n      XYPolygon shape = (XYPolygon) o;\n      if (queryRelation == QueryRelation.CONTAINS) {\n        return testWithinPolygon(query, shape);\n      }\n      List<Tessellator.Triangle> tessellation = Tessellator.tessellate(shape);\n      for (Tessellator.Triangle t : tessellation) {\n        double[] qTriangle = encoder.quantizeTriangle(t.getX(0), t.getY(0), t.isEdgefromPolygon(0),\n            t.getX(1), t.getY(1), t.isEdgefromPolygon(1),\n            t.getX(2), t.getY(2), t.isEdgefromPolygon(2));\n        Relation r = query.relateTriangle(qTriangle[1], qTriangle[0], qTriangle[3], qTriangle[2], qTriangle[5], qTriangle[4]);\n        if (queryRelation == QueryRelation.DISJOINT) {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return false;\n        } else if (queryRelation == QueryRelation.WITHIN) {\n          if (r != Relation.CELL_INSIDE_QUERY) return false;\n        } else {\n          if (r != Relation.CELL_OUTSIDE_QUERY) return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c568a1e2a5125c2245150eebb030a81baa158b31":["30c21918ef3ad23e254f39cb0cd6c86851fcb993"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30c21918ef3ad23e254f39cb0cd6c86851fcb993":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c568a1e2a5125c2245150eebb030a81baa158b31"]},"commit2Childs":{"c568a1e2a5125c2245150eebb030a81baa158b31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["30c21918ef3ad23e254f39cb0cd6c86851fcb993"],"30c21918ef3ad23e254f39cb0cd6c86851fcb993":["c568a1e2a5125c2245150eebb030a81baa158b31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}