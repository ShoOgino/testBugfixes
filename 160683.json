{"path":"modules/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#createExpectedResult(IndexContext,String,Sort,int).mjava","commits":[{"id":"166661dd25a09458b128e5c0b86e3b762a6ded68","date":1332333666,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#createExpectedResult(IndexContext,String,Sort,int).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> createExpectedResult(IndexContext context,  String term, Sort groupSort, int topN) {\n    class GroupCount extends AbstractDistinctValuesCollector.GroupCount<BytesRef> {\n      GroupCount(BytesRef groupValue, Collection<BytesRef> uniqueValues) {\n        super(groupValue);\n        this.uniqueValues.addAll(uniqueValues);\n      }\n    }\n\n    List result = new ArrayList();\n    Map<String, Set<String>> groupCounts = context.searchTermToGroupCounts.get(term);\n    int i = 0;\n    for (String group : groupCounts.keySet()) {\n      if (topN <= i++) {\n        break;\n      }\n      Set<BytesRef> uniqueValues = new HashSet<BytesRef>();\n      for (String val : groupCounts.get(group)) {\n        uniqueValues.add(val != null ? new BytesRef(val) : null);\n      }\n      result.add(new GroupCount(group != null ? new BytesRef(group) : null, uniqueValues));\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#createExpectedResult(IndexContext,String,Sort,int).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#createExpectedResult(IndexContext,String,Sort,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> createExpectedResult(IndexContext context,  String term, Sort groupSort, int topN) {\n    class GroupCount extends AbstractDistinctValuesCollector.GroupCount<BytesRef> {\n      GroupCount(BytesRef groupValue, Collection<BytesRef> uniqueValues) {\n        super(groupValue);\n        this.uniqueValues.addAll(uniqueValues);\n      }\n    }\n\n    List result = new ArrayList();\n    Map<String, Set<String>> groupCounts = context.searchTermToGroupCounts.get(term);\n    int i = 0;\n    for (String group : groupCounts.keySet()) {\n      if (topN <= i++) {\n        break;\n      }\n      Set<BytesRef> uniqueValues = new HashSet<BytesRef>();\n      for (String val : groupCounts.get(group)) {\n        uniqueValues.add(val != null ? new BytesRef(val) : null);\n      }\n      result.add(new GroupCount(group != null ? new BytesRef(group) : null, uniqueValues));\n    }\n    return result;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> createExpectedResult(IndexContext context,  String term, Sort groupSort, int topN) {\n    class GroupCount extends AbstractDistinctValuesCollector.GroupCount<BytesRef> {\n      GroupCount(BytesRef groupValue, Collection<BytesRef> uniqueValues) {\n        super(groupValue);\n        this.uniqueValues.addAll(uniqueValues);\n      }\n    }\n\n    List result = new ArrayList();\n    Map<String, Set<String>> groupCounts = context.searchTermToGroupCounts.get(term);\n    int i = 0;\n    for (String group : groupCounts.keySet()) {\n      if (topN <= i++) {\n        break;\n      }\n      Set<BytesRef> uniqueValues = new HashSet<BytesRef>();\n      for (String val : groupCounts.get(group)) {\n        uniqueValues.add(val != null ? new BytesRef(val) : null);\n      }\n      result.add(new GroupCount(group != null ? new BytesRef(group) : null, uniqueValues));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["166661dd25a09458b128e5c0b86e3b762a6ded68"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"166661dd25a09458b128e5c0b86e3b762a6ded68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["166661dd25a09458b128e5c0b86e3b762a6ded68"],"166661dd25a09458b128e5c0b86e3b762a6ded68":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}