{"path":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#fillSolrCloudSection(NamedList[Object]).mjava","commits":[{"id":"a877077e0a22a42eebce7d1052c58e97d3afb12d","date":1405981118,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#fillSolrCloudSection(NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  private void fillSolrCloudSection(NamedList<Object> nl) {\n    \n    String s = \"<solrcloud>\";\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, \"distribUpdateConnTimeout\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, \"distribUpdateSoTimeout\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_MAXUPDATECONNECTIONS, \"maxUpdateConnections\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_MAXUPDATECONNECTIONSPERHOST, \"maxUpdateConnectionsPerHost\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_LEADERVOTEWAIT, \"leaderVoteWait\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_LEADERCONFLICTRESOLVEWAIT, \"leaderConflictResolveWait\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_ZKCLIENTTIMEOUT, \"zkClientTimeout\");\n\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_HOST, \"host\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_HOSTCONTEXT, \"hostContext\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_HOSTPORT, \"hostPort\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_ZKHOST, \"zkHost\");\n\n    storeConfigPropertyAsBoolean(s, nl, CfgProp.SOLR_GENERICCORENODENAMES, \"genericCoreNodeNames\");\n    \n    errorOnLeftOvers(s, nl);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad7bdba3e91cf3373cda2e52239cb761fc0b452","date":1408019547,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#fillSolrCloudSection(NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#fillSolrCloudSection(NamedList[Object]).mjava","sourceNew":"  private void fillSolrCloudSection(NamedList<Object> nl) {\n    \n    String s = \"<solrcloud>\";\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, \"distribUpdateConnTimeout\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, \"distribUpdateSoTimeout\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_MAXUPDATECONNECTIONS, \"maxUpdateConnections\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_MAXUPDATECONNECTIONSPERHOST, \"maxUpdateConnectionsPerHost\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_LEADERVOTEWAIT, \"leaderVoteWait\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_LEADERCONFLICTRESOLVEWAIT, \"leaderConflictResolveWait\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_ZKCLIENTTIMEOUT, \"zkClientTimeout\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_AUTOREPLICAFAILOVERBADNODEEXPIRATION, \"autoReplicaFailoverBadNodeExpiration\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_AUTOREPLICAFAILOVERWAITAFTEREXPIRATION, \"autoReplicaFailoverWaitAfterExpiration\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_AUTOREPLICAFAILOVERWORKLOOPDELAY, \"autoReplicaFailoverWorkLoopDelay\");\n    \n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_HOST, \"host\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_HOSTCONTEXT, \"hostContext\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_HOSTPORT, \"hostPort\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_ZKHOST, \"zkHost\");\n\n    storeConfigPropertyAsBoolean(s, nl, CfgProp.SOLR_GENERICCORENODENAMES, \"genericCoreNodeNames\");\n    \n    errorOnLeftOvers(s, nl);\n  }\n\n","sourceOld":"  private void fillSolrCloudSection(NamedList<Object> nl) {\n    \n    String s = \"<solrcloud>\";\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, \"distribUpdateConnTimeout\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, \"distribUpdateSoTimeout\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_MAXUPDATECONNECTIONS, \"maxUpdateConnections\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_MAXUPDATECONNECTIONSPERHOST, \"maxUpdateConnectionsPerHost\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_LEADERVOTEWAIT, \"leaderVoteWait\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_LEADERCONFLICTRESOLVEWAIT, \"leaderConflictResolveWait\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_ZKCLIENTTIMEOUT, \"zkClientTimeout\");\n\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_HOST, \"host\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_HOSTCONTEXT, \"hostContext\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_HOSTPORT, \"hostPort\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_ZKHOST, \"zkHost\");\n\n    storeConfigPropertyAsBoolean(s, nl, CfgProp.SOLR_GENERICCORENODENAMES, \"genericCoreNodeNames\");\n    \n    errorOnLeftOvers(s, nl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83f985d9828d30801541f1eed26aa3169646baf","date":1409315453,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#fillSolrCloudSection(NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#fillSolrCloudSection(NamedList[Object]).mjava","sourceNew":"  private void fillSolrCloudSection(NamedList<Object> nl) {\n    \n    String s = \"<solrcloud>\";\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, \"distribUpdateConnTimeout\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, \"distribUpdateSoTimeout\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_MAXUPDATECONNECTIONS, \"maxUpdateConnections\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_MAXUPDATECONNECTIONSPERHOST, \"maxUpdateConnectionsPerHost\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_LEADERVOTEWAIT, \"leaderVoteWait\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_LEADERCONFLICTRESOLVEWAIT, \"leaderConflictResolveWait\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_ZKCLIENTTIMEOUT, \"zkClientTimeout\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_AUTOREPLICAFAILOVERBADNODEEXPIRATION, \"autoReplicaFailoverBadNodeExpiration\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_AUTOREPLICAFAILOVERWAITAFTEREXPIRATION, \"autoReplicaFailoverWaitAfterExpiration\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_AUTOREPLICAFAILOVERWORKLOOPDELAY, \"autoReplicaFailoverWorkLoopDelay\");\n    \n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_HOST, \"host\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_HOSTCONTEXT, \"hostContext\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_HOSTPORT, \"hostPort\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_ZKHOST, \"zkHost\");\n\n    storeConfigPropertyAsBoolean(s, nl, CfgProp.SOLR_GENERICCORENODENAMES, \"genericCoreNodeNames\");\n    \n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_ZKACLPROVIDER, \"zkACLProvider\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_ZKCREDENTIALPROVIDER, \"zkCredentialProvider\");\n    \n    errorOnLeftOvers(s, nl);\n  }\n\n","sourceOld":"  private void fillSolrCloudSection(NamedList<Object> nl) {\n    \n    String s = \"<solrcloud>\";\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, \"distribUpdateConnTimeout\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, \"distribUpdateSoTimeout\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_MAXUPDATECONNECTIONS, \"maxUpdateConnections\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_MAXUPDATECONNECTIONSPERHOST, \"maxUpdateConnectionsPerHost\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_LEADERVOTEWAIT, \"leaderVoteWait\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_LEADERCONFLICTRESOLVEWAIT, \"leaderConflictResolveWait\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_ZKCLIENTTIMEOUT, \"zkClientTimeout\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_AUTOREPLICAFAILOVERBADNODEEXPIRATION, \"autoReplicaFailoverBadNodeExpiration\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_AUTOREPLICAFAILOVERWAITAFTEREXPIRATION, \"autoReplicaFailoverWaitAfterExpiration\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_AUTOREPLICAFAILOVERWORKLOOPDELAY, \"autoReplicaFailoverWorkLoopDelay\");\n    \n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_HOST, \"host\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_HOSTCONTEXT, \"hostContext\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_HOSTPORT, \"hostPort\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_ZKHOST, \"zkHost\");\n\n    storeConfigPropertyAsBoolean(s, nl, CfgProp.SOLR_GENERICCORENODENAMES, \"genericCoreNodeNames\");\n    \n    errorOnLeftOvers(s, nl);\n  }\n\n","bugFix":null,"bugIntro":["368b2f45f347fa0ff807b6474c1b8b78c5cb9e24"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"368b2f45f347fa0ff807b6474c1b8b78c5cb9e24","date":1415233558,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#fillSolrCloudSection(NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#fillSolrCloudSection(NamedList[Object]).mjava","sourceNew":"  private void fillSolrCloudSection(NamedList<Object> nl) {\n    \n    String s = \"<solrcloud>\";\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, \"distribUpdateConnTimeout\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, \"distribUpdateSoTimeout\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_MAXUPDATECONNECTIONS, \"maxUpdateConnections\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_MAXUPDATECONNECTIONSPERHOST, \"maxUpdateConnectionsPerHost\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_LEADERVOTEWAIT, \"leaderVoteWait\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_LEADERCONFLICTRESOLVEWAIT, \"leaderConflictResolveWait\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_ZKCLIENTTIMEOUT, \"zkClientTimeout\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_AUTOREPLICAFAILOVERBADNODEEXPIRATION, \"autoReplicaFailoverBadNodeExpiration\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_AUTOREPLICAFAILOVERWAITAFTEREXPIRATION, \"autoReplicaFailoverWaitAfterExpiration\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_AUTOREPLICAFAILOVERWORKLOOPDELAY, \"autoReplicaFailoverWorkLoopDelay\");\n    \n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_HOST, \"host\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_HOSTCONTEXT, \"hostContext\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_HOSTPORT, \"hostPort\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_ZKHOST, \"zkHost\");\n\n    storeConfigPropertyAsBoolean(s, nl, CfgProp.SOLR_GENERICCORENODENAMES, \"genericCoreNodeNames\");\n    \n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_ZKACLPROVIDER, \"zkACLProvider\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_ZKCREDENTIALSPROVIDER, \"zkCredentialsProvider\");\n    \n    errorOnLeftOvers(s, nl);\n  }\n\n","sourceOld":"  private void fillSolrCloudSection(NamedList<Object> nl) {\n    \n    String s = \"<solrcloud>\";\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, \"distribUpdateConnTimeout\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, \"distribUpdateSoTimeout\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_MAXUPDATECONNECTIONS, \"maxUpdateConnections\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_MAXUPDATECONNECTIONSPERHOST, \"maxUpdateConnectionsPerHost\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_LEADERVOTEWAIT, \"leaderVoteWait\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_LEADERCONFLICTRESOLVEWAIT, \"leaderConflictResolveWait\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_ZKCLIENTTIMEOUT, \"zkClientTimeout\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_AUTOREPLICAFAILOVERBADNODEEXPIRATION, \"autoReplicaFailoverBadNodeExpiration\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_AUTOREPLICAFAILOVERWAITAFTEREXPIRATION, \"autoReplicaFailoverWaitAfterExpiration\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_AUTOREPLICAFAILOVERWORKLOOPDELAY, \"autoReplicaFailoverWorkLoopDelay\");\n    \n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_HOST, \"host\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_HOSTCONTEXT, \"hostContext\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_HOSTPORT, \"hostPort\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_ZKHOST, \"zkHost\");\n\n    storeConfigPropertyAsBoolean(s, nl, CfgProp.SOLR_GENERICCORENODENAMES, \"genericCoreNodeNames\");\n    \n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_ZKACLPROVIDER, \"zkACLProvider\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_ZKCREDENTIALPROVIDER, \"zkCredentialProvider\");\n    \n    errorOnLeftOvers(s, nl);\n  }\n\n","bugFix":["c83f985d9828d30801541f1eed26aa3169646baf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e15199583d3635cb940942caed05132dd6c4c7c6","date":1424875551,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#fillSolrCloudSection(NamedList[Object]).mjava","sourceNew":null,"sourceOld":"  private void fillSolrCloudSection(NamedList<Object> nl) {\n    \n    String s = \"<solrcloud>\";\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, \"distribUpdateConnTimeout\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, \"distribUpdateSoTimeout\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_MAXUPDATECONNECTIONS, \"maxUpdateConnections\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_MAXUPDATECONNECTIONSPERHOST, \"maxUpdateConnectionsPerHost\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_LEADERVOTEWAIT, \"leaderVoteWait\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_LEADERCONFLICTRESOLVEWAIT, \"leaderConflictResolveWait\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_ZKCLIENTTIMEOUT, \"zkClientTimeout\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_AUTOREPLICAFAILOVERBADNODEEXPIRATION, \"autoReplicaFailoverBadNodeExpiration\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_AUTOREPLICAFAILOVERWAITAFTEREXPIRATION, \"autoReplicaFailoverWaitAfterExpiration\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_AUTOREPLICAFAILOVERWORKLOOPDELAY, \"autoReplicaFailoverWorkLoopDelay\");\n    \n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_HOST, \"host\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_HOSTCONTEXT, \"hostContext\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_HOSTPORT, \"hostPort\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_ZKHOST, \"zkHost\");\n\n    storeConfigPropertyAsBoolean(s, nl, CfgProp.SOLR_GENERICCORENODENAMES, \"genericCoreNodeNames\");\n    \n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_ZKACLPROVIDER, \"zkACLProvider\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_ZKCREDENTIALSPROVIDER, \"zkCredentialsProvider\");\n    \n    errorOnLeftOvers(s, nl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#fillSolrCloudSection(NamedList[Object]).mjava","sourceNew":null,"sourceOld":"  private void fillSolrCloudSection(NamedList<Object> nl) {\n    \n    String s = \"<solrcloud>\";\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, \"distribUpdateConnTimeout\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, \"distribUpdateSoTimeout\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_MAXUPDATECONNECTIONS, \"maxUpdateConnections\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_MAXUPDATECONNECTIONSPERHOST, \"maxUpdateConnectionsPerHost\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_LEADERVOTEWAIT, \"leaderVoteWait\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_LEADERCONFLICTRESOLVEWAIT, \"leaderConflictResolveWait\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_ZKCLIENTTIMEOUT, \"zkClientTimeout\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_AUTOREPLICAFAILOVERBADNODEEXPIRATION, \"autoReplicaFailoverBadNodeExpiration\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_AUTOREPLICAFAILOVERWAITAFTEREXPIRATION, \"autoReplicaFailoverWaitAfterExpiration\");\n    storeConfigPropertyAsInt(s, nl, CfgProp.SOLR_AUTOREPLICAFAILOVERWORKLOOPDELAY, \"autoReplicaFailoverWorkLoopDelay\");\n    \n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_HOST, \"host\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_HOSTCONTEXT, \"hostContext\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_HOSTPORT, \"hostPort\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_ZKHOST, \"zkHost\");\n\n    storeConfigPropertyAsBoolean(s, nl, CfgProp.SOLR_GENERICCORENODENAMES, \"genericCoreNodeNames\");\n    \n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_ZKACLPROVIDER, \"zkACLProvider\");\n    storeConfigPropertyAsString(s, nl, CfgProp.SOLR_ZKCREDENTIALSPROVIDER, \"zkCredentialsProvider\");\n    \n    errorOnLeftOvers(s, nl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["368b2f45f347fa0ff807b6474c1b8b78c5cb9e24","e15199583d3635cb940942caed05132dd6c4c7c6"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["a877077e0a22a42eebce7d1052c58e97d3afb12d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a877077e0a22a42eebce7d1052c58e97d3afb12d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"368b2f45f347fa0ff807b6474c1b8b78c5cb9e24":["c83f985d9828d30801541f1eed26aa3169646baf"],"c83f985d9828d30801541f1eed26aa3169646baf":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e15199583d3635cb940942caed05132dd6c4c7c6"],"e15199583d3635cb940942caed05132dd6c4c7c6":["368b2f45f347fa0ff807b6474c1b8b78c5cb9e24"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["c83f985d9828d30801541f1eed26aa3169646baf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a877077e0a22a42eebce7d1052c58e97d3afb12d"],"a877077e0a22a42eebce7d1052c58e97d3afb12d":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"368b2f45f347fa0ff807b6474c1b8b78c5cb9e24":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","e15199583d3635cb940942caed05132dd6c4c7c6"],"c83f985d9828d30801541f1eed26aa3169646baf":["368b2f45f347fa0ff807b6474c1b8b78c5cb9e24"],"e15199583d3635cb940942caed05132dd6c4c7c6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}