{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#decodeValue(int).mjava","commits":[{"id":"4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9","date":1459984736,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#decodeValue(int).mjava","pathOld":"/dev/null","sourceNew":"  public static double decodeValue(int x) {\n    double result;\n    if (x == MIN_ENCODED_VALUE) {\n      // We must special case this, because -MAX_VALUE is not guaranteed to land precisely at a floor value, and we don't ever want to\n      // return a value outside of the planet's range (I think?).  The max value is \"safe\" because we floor during encode:\n      result = -MAX_VALUE;\n    } else {\n      result = x * DECODE;\n    }\n    assert result >= -MAX_VALUE && result <= MAX_VALUE;\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5911e43da0a397d56198dce934a4091dc30a0c97"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5911e43da0a397d56198dce934a4091dc30a0c97","date":1460069327,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#decodeValue(int).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#decodeValue(int).mjava","sourceNew":"  public static double decodeValue(int x) {\n    // We decode to the center value; this keeps the encoding stable\n    return (x+0.5) * DECODE;\n  }\n\n","sourceOld":"  public static double decodeValue(int x) {\n    double result;\n    if (x == MIN_ENCODED_VALUE) {\n      // We must special case this, because -MAX_VALUE is not guaranteed to land precisely at a floor value, and we don't ever want to\n      // return a value outside of the planet's range (I think?).  The max value is \"safe\" because we floor during encode:\n      result = -MAX_VALUE;\n    } else {\n      result = x * DECODE;\n    }\n    assert result >= -MAX_VALUE && result <= MAX_VALUE;\n    return result;\n  }\n\n","bugFix":["4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9"],"bugIntro":["17ccf2dc08bf23a048cb9c7326eb957586a86cd5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#decodeValue(int).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#decodeValue(int).mjava","sourceNew":"  public static double decodeValue(int x) {\n    // We decode to the center value; this keeps the encoding stable\n    return (x+0.5) * DECODE;\n  }\n\n","sourceOld":"  public static double decodeValue(int x) {\n    double result;\n    if (x == MIN_ENCODED_VALUE) {\n      // We must special case this, because -MAX_VALUE is not guaranteed to land precisely at a floor value, and we don't ever want to\n      // return a value outside of the planet's range (I think?).  The max value is \"safe\" because we floor during encode:\n      result = -MAX_VALUE;\n    } else {\n      result = x * DECODE;\n    }\n    assert result >= -MAX_VALUE && result <= MAX_VALUE;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17ccf2dc08bf23a048cb9c7326eb957586a86cd5","date":1465078564,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#decodeValue(int).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#decodeValue(int).mjava","sourceNew":"  public static double decodeValue(int x) {\n    double result;\n    if (x == MIN_ENCODED_VALUE) {\n      // We must special case this, because -MAX_VALUE is not guaranteed to land precisely at a floor value, and we don't ever want to\n      // return a value outside of the planet's range (I think?).  The max value is \"safe\" because we floor during encode:\n      result = -MAX_VALUE;\n    } else if (x == MAX_ENCODED_VALUE) {\n      result = MAX_VALUE;\n    } else {\n      // We decode to the center value; this keeps the encoding stable\n      result = (x+0.5) * DECODE;\n    }\n    assert result >= -MAX_VALUE && result <= MAX_VALUE;\n    return result;\n  }\n\n","sourceOld":"  public static double decodeValue(int x) {\n    // We decode to the center value; this keeps the encoding stable\n    return (x+0.5) * DECODE;\n  }\n\n","bugFix":["5911e43da0a397d56198dce934a4091dc30a0c97"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#decodeValue(int).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#decodeValue(int).mjava","sourceNew":"  public static double decodeValue(int x) {\n    double result;\n    if (x == MIN_ENCODED_VALUE) {\n      // We must special case this, because -MAX_VALUE is not guaranteed to land precisely at a floor value, and we don't ever want to\n      // return a value outside of the planet's range (I think?).  The max value is \"safe\" because we floor during encode:\n      result = -MAX_VALUE;\n    } else if (x == MAX_ENCODED_VALUE) {\n      result = MAX_VALUE;\n    } else {\n      // We decode to the center value; this keeps the encoding stable\n      result = (x+0.5) * DECODE;\n    }\n    assert result >= -MAX_VALUE && result <= MAX_VALUE;\n    return result;\n  }\n\n","sourceOld":"  public static double decodeValue(int x) {\n    // We decode to the center value; this keeps the encoding stable\n    return (x+0.5) * DECODE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/PlanetModel#decodeValue(int).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#decodeValue(int).mjava","sourceNew":"  /**\n   * Decodes a given integer back into the radian value according to the defined planet model\n   */\n  public double decodeValue(int x) {\n    double result;\n    if (x == MIN_ENCODED_VALUE) {\n      // We must special case this, because -MAX_VALUE is not guaranteed to land precisely at a floor value, and we don't ever want to\n      // return a value outside of the planet's range (I think?).  The max value is \"safe\" because we floor during encode:\n      result = -MAX_VALUE;\n    } else if (x == MAX_ENCODED_VALUE) {\n      result = MAX_VALUE;\n    } else {\n      // We decode to the center value; this keeps the encoding stable\n      result = (x+0.5) * DECODE;\n    }\n    assert result >= -MAX_VALUE && result <= MAX_VALUE;\n    return result;\n  }\n\n","sourceOld":"  public static double decodeValue(int x) {\n    double result;\n    if (x == MIN_ENCODED_VALUE) {\n      // We must special case this, because -MAX_VALUE is not guaranteed to land precisely at a floor value, and we don't ever want to\n      // return a value outside of the planet's range (I think?).  The max value is \"safe\" because we floor during encode:\n      result = -MAX_VALUE;\n    } else if (x == MAX_ENCODED_VALUE) {\n      result = MAX_VALUE;\n    } else {\n      // We decode to the center value; this keeps the encoding stable\n      result = (x+0.5) * DECODE;\n    }\n    assert result >= -MAX_VALUE && result <= MAX_VALUE;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"17ccf2dc08bf23a048cb9c7326eb957586a86cd5":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9","5911e43da0a397d56198dce934a4091dc30a0c97"],"5911e43da0a397d56198dce934a4091dc30a0c97":["4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["17ccf2dc08bf23a048cb9c7326eb957586a86cd5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","17ccf2dc08bf23a048cb9c7326eb957586a86cd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"]},"commit2Childs":{"4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","5911e43da0a397d56198dce934a4091dc30a0c97"],"17ccf2dc08bf23a048cb9c7326eb957586a86cd5":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["17ccf2dc08bf23a048cb9c7326eb957586a86cd5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5911e43da0a397d56198dce934a4091dc30a0c97":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}