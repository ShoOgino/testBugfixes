{"path":"src/apps/SolarTest/src/SolrTest#run().mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/apps/SolarTest/src/SolrTest#run().mjava","pathOld":"/dev/null","sourceNew":"  public void run() {\n    if (sequenceTest) {\n      for (int i=0; i<testDict.length; i++) {\n        String s = testDict[i];\n        int lineno = testDictLineno.get(i);\n        String req;\n        String test=null;\n        String params=null;\n        char[] resp;\n        if (s.length()<2 || s.startsWith(\"#\")) continue;  // comment\n        System.out.println(\"LINE=\" + lineno + \" EXECUTING \" + s);\n\n        int endQuery = s.length();\n        int startParams = s.indexOf(\"%%\");\n        int endParams = s.length();\n        int endTests = s.length();\n        if (startParams > 0) {\n          endQuery = startParams;\n          endParams = s.length();\n        }\n        int startTests = s.indexOf('%', startParams+2);\n        if (startTests > 0) {\n          if (endQuery == s.length()) endQuery = startTests;\n          endParams = startTests;\n        }\n\n        req = s.substring(0,endQuery).trim();\n        if (startParams > 0) params = s.substring(startParams+2,endParams).trim();\n        if (startTests > 0) test = s.substring(startTests+1,endTests).trim();\n\n        System.out.println(\"###req=\" + req);\n        System.out.println(\"###params=\" + params);\n        System.out.println(\"###tests=\" + test);\n\n        if (req.startsWith(\"<\")) {\n          resp = doUpdate(req);\n        } else {\n          resp = doReq(req,params);\n        }\n        if (doValidate) {\n          validate(req,test,resp);\n        } else {\n          System.out.println(\"#### no validation performed\");\n        }\n      }\n      System.out.println(\">>>>>>>>>>>>>>>>>>>>>>>> SUCCESS <<<<<<<<<<<<<<<<<<<<<<<<<<\");\n    }\n\n    else {\n      while(runAgain()) {\n        if (isWriter) doUpdate(updateDict[(int)(Math.random()*updateDict.length)]);\n        else doReq(requestDict[(int)(Math.random()*requestDict.length)], null);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c13d66f95c29c45eef256f6d79ceaf5fb41456b","date":1139349879,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/apps/SolarTest/src/SolrTest#run().mjava","pathOld":"src/apps/SolarTest/src/SolrTest#run().mjava","sourceNew":"  public void run() {\n\n    if (sequenceTest) {\n      try {\n      for (int i=0; i<testDict.length; i++) {\n        String s = testDict[i];\n        int lineno = testDictLineno.get(i);\n        String req;\n        String test=null;\n        String params=null;\n        char[] resp;\n        if (s.length()<2 || s.startsWith(\"#\")) continue;  // comment\n        System.out.println(\"LINE=\" + lineno + \" EXECUTING \" + s);\n\n        int endQuery = s.length();\n        int startParams = s.indexOf(\"%%\");\n        int endParams = s.length();\n        int endTests = s.length();\n        if (startParams > 0) {\n          endQuery = startParams;\n          endParams = s.length();\n        }\n        int startTests = s.indexOf('%', startParams+2);\n        if (startTests > 0) {\n          if (endQuery == s.length()) endQuery = startTests;\n          endParams = startTests;\n        }\n\n        req = s.substring(0,endQuery).trim();\n        if (startParams > 0) params = s.substring(startParams+2,endParams).trim();\n        if (startTests > 0) test = s.substring(startTests+1,endTests).trim();\n\n        // System.out.println(\"###req=\" + req);\n        // System.out.println(\"###params=\" + params);\n        // System.out.println(\"###tests=\" + test);\n\n        if (req.startsWith(\"<\")) {\n          resp = doUpdate(req);\n        } else {\n          resp = doReq(req,params);\n        }\n        if (doValidate) {\n          validate(req,test,resp);\n        } else {\n          System.out.println(\"#### no validation performed\");\n        }\n      }\n      } catch (RuntimeException e) {\n        numErr++;\n        throw(e);\n      }\n\n      System.out.println(\">>>>>>>>>>>>>>>>>>>>>>>> SUCCESS <<<<<<<<<<<<<<<<<<<<<<<<<<\");\n    }\n\n    else {\n      while(runAgain()) {\n        if (isWriter) doUpdate(updateDict[(int)(Math.random()*updateDict.length)]);\n        else doReq(requestDict[(int)(Math.random()*requestDict.length)], null);\n      }\n    }\n  }\n\n","sourceOld":"  public void run() {\n    if (sequenceTest) {\n      for (int i=0; i<testDict.length; i++) {\n        String s = testDict[i];\n        int lineno = testDictLineno.get(i);\n        String req;\n        String test=null;\n        String params=null;\n        char[] resp;\n        if (s.length()<2 || s.startsWith(\"#\")) continue;  // comment\n        System.out.println(\"LINE=\" + lineno + \" EXECUTING \" + s);\n\n        int endQuery = s.length();\n        int startParams = s.indexOf(\"%%\");\n        int endParams = s.length();\n        int endTests = s.length();\n        if (startParams > 0) {\n          endQuery = startParams;\n          endParams = s.length();\n        }\n        int startTests = s.indexOf('%', startParams+2);\n        if (startTests > 0) {\n          if (endQuery == s.length()) endQuery = startTests;\n          endParams = startTests;\n        }\n\n        req = s.substring(0,endQuery).trim();\n        if (startParams > 0) params = s.substring(startParams+2,endParams).trim();\n        if (startTests > 0) test = s.substring(startTests+1,endTests).trim();\n\n        System.out.println(\"###req=\" + req);\n        System.out.println(\"###params=\" + params);\n        System.out.println(\"###tests=\" + test);\n\n        if (req.startsWith(\"<\")) {\n          resp = doUpdate(req);\n        } else {\n          resp = doReq(req,params);\n        }\n        if (doValidate) {\n          validate(req,test,resp);\n        } else {\n          System.out.println(\"#### no validation performed\");\n        }\n      }\n      System.out.println(\">>>>>>>>>>>>>>>>>>>>>>>> SUCCESS <<<<<<<<<<<<<<<<<<<<<<<<<<\");\n    }\n\n    else {\n      while(runAgain()) {\n        if (isWriter) doUpdate(updateDict[(int)(Math.random()*updateDict.length)]);\n        else doReq(requestDict[(int)(Math.random()*requestDict.length)], null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd1be603b11b775ddafa5c4992cf204880586294","date":1139350157,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/apps/SolrTest/src/SolrTest#run().mjava","pathOld":"src/apps/SolarTest/src/SolrTest#run().mjava","sourceNew":"  public void run() {\n\n    if (sequenceTest) {\n      try {\n      for (int i=0; i<testDict.length; i++) {\n        String s = testDict[i];\n        int lineno = testDictLineno.get(i);\n        String req;\n        String test=null;\n        String params=null;\n        char[] resp;\n        if (s.length()<2 || s.startsWith(\"#\")) continue;  // comment\n        System.out.println(\"LINE=\" + lineno + \" EXECUTING \" + s);\n\n        int endQuery = s.length();\n        int startParams = s.indexOf(\"%%\");\n        int endParams = s.length();\n        int endTests = s.length();\n        if (startParams > 0) {\n          endQuery = startParams;\n          endParams = s.length();\n        }\n        int startTests = s.indexOf('%', startParams+2);\n        if (startTests > 0) {\n          if (endQuery == s.length()) endQuery = startTests;\n          endParams = startTests;\n        }\n\n        req = s.substring(0,endQuery).trim();\n        if (startParams > 0) params = s.substring(startParams+2,endParams).trim();\n        if (startTests > 0) test = s.substring(startTests+1,endTests).trim();\n\n        // System.out.println(\"###req=\" + req);\n        // System.out.println(\"###params=\" + params);\n        // System.out.println(\"###tests=\" + test);\n\n        if (req.startsWith(\"<\")) {\n          resp = doUpdate(req);\n        } else {\n          resp = doReq(req,params);\n        }\n        if (doValidate) {\n          validate(req,test,resp);\n        } else {\n          System.out.println(\"#### no validation performed\");\n        }\n      }\n      } catch (RuntimeException e) {\n        numErr++;\n        throw(e);\n      }\n\n      System.out.println(\">>>>>>>>>>>>>>>>>>>>>>>> SUCCESS <<<<<<<<<<<<<<<<<<<<<<<<<<\");\n    }\n\n    else {\n      while(runAgain()) {\n        if (isWriter) doUpdate(updateDict[(int)(Math.random()*updateDict.length)]);\n        else doReq(requestDict[(int)(Math.random()*requestDict.length)], null);\n      }\n    }\n  }\n\n","sourceOld":"  public void run() {\n\n    if (sequenceTest) {\n      try {\n      for (int i=0; i<testDict.length; i++) {\n        String s = testDict[i];\n        int lineno = testDictLineno.get(i);\n        String req;\n        String test=null;\n        String params=null;\n        char[] resp;\n        if (s.length()<2 || s.startsWith(\"#\")) continue;  // comment\n        System.out.println(\"LINE=\" + lineno + \" EXECUTING \" + s);\n\n        int endQuery = s.length();\n        int startParams = s.indexOf(\"%%\");\n        int endParams = s.length();\n        int endTests = s.length();\n        if (startParams > 0) {\n          endQuery = startParams;\n          endParams = s.length();\n        }\n        int startTests = s.indexOf('%', startParams+2);\n        if (startTests > 0) {\n          if (endQuery == s.length()) endQuery = startTests;\n          endParams = startTests;\n        }\n\n        req = s.substring(0,endQuery).trim();\n        if (startParams > 0) params = s.substring(startParams+2,endParams).trim();\n        if (startTests > 0) test = s.substring(startTests+1,endTests).trim();\n\n        // System.out.println(\"###req=\" + req);\n        // System.out.println(\"###params=\" + params);\n        // System.out.println(\"###tests=\" + test);\n\n        if (req.startsWith(\"<\")) {\n          resp = doUpdate(req);\n        } else {\n          resp = doReq(req,params);\n        }\n        if (doValidate) {\n          validate(req,test,resp);\n        } else {\n          System.out.println(\"#### no validation performed\");\n        }\n      }\n      } catch (RuntimeException e) {\n        numErr++;\n        throw(e);\n      }\n\n      System.out.println(\">>>>>>>>>>>>>>>>>>>>>>>> SUCCESS <<<<<<<<<<<<<<<<<<<<<<<<<<\");\n    }\n\n    else {\n      while(runAgain()) {\n        if (isWriter) doUpdate(updateDict[(int)(Math.random()*updateDict.length)]);\n        else doReq(requestDict[(int)(Math.random()*requestDict.length)], null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fd1be603b11b775ddafa5c4992cf204880586294":["5c13d66f95c29c45eef256f6d79ceaf5fb41456b"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"5c13d66f95c29c45eef256f6d79ceaf5fb41456b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fd1be603b11b775ddafa5c4992cf204880586294":[],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["5c13d66f95c29c45eef256f6d79ceaf5fb41456b"],"5c13d66f95c29c45eef256f6d79ceaf5fb41456b":["fd1be603b11b775ddafa5c4992cf204880586294"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd1be603b11b775ddafa5c4992cf204880586294","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}