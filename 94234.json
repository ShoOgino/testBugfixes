{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#addPosition(int,BytesRef,int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    //if (DEBUG) System.out.println(\"SPW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 : \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    int payloadLength = 0;\n\n    if (storePayloads) {\n      payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n    \n    if (storeOffsets) {\n      // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n      // and the numbers aren't that much smaller anyways.\n      int offsetDelta = startOffset - lastOffset;\n      int offsetLength = endOffset - startOffset;\n      if (offsetLength != lastOffsetLength) {\n        proxOut.writeVInt(offsetDelta << 1 | 1);\n        proxOut.writeVInt(offsetLength);\n      } else {\n        proxOut.writeVInt(offsetDelta << 1);\n      }\n      lastOffset = startOffset;\n      lastOffsetLength = offsetLength;\n    }\n    \n    if (payloadLength > 0) {\n      proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    //if (DEBUG) System.out.println(\"SPW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 : \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    int payloadLength = 0;\n\n    if (storePayloads) {\n      payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n    \n    if (storeOffsets) {\n      // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n      // and the numbers aren't that much smaller anyways.\n      int offsetDelta = startOffset - lastOffset;\n      int offsetLength = endOffset - startOffset;\n      if (offsetLength != lastOffsetLength) {\n        proxOut.writeVInt(offsetDelta << 1 | 1);\n        proxOut.writeVInt(offsetLength);\n      } else {\n        proxOut.writeVInt(offsetDelta << 1);\n      }\n      lastOffset = startOffset;\n      lastOffsetLength = offsetLength;\n    }\n    \n    if (payloadLength > 0) {\n      proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2d5b1f6ad16c5f1ce7e0a00225e2c9ffd0bc626","date":1339522233,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    //if (DEBUG) System.out.println(\"SPW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 : \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    int payloadLength = 0;\n\n    if (storePayloads) {\n      payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n    \n    if (storeOffsets) {\n      // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n      // and the numbers aren't that much smaller anyways.\n      int offsetDelta = startOffset - lastOffset;\n      int offsetLength = endOffset - startOffset;\n      assert offsetDelta >= 0 && offsetLength >= 0 : \"startOffset=\" + startOffset + \",lastOffset=\" + lastOffset + \",endOffset=\" + endOffset;\n      if (offsetLength != lastOffsetLength) {\n        proxOut.writeVInt(offsetDelta << 1 | 1);\n        proxOut.writeVInt(offsetLength);\n      } else {\n        proxOut.writeVInt(offsetDelta << 1);\n      }\n      lastOffset = startOffset;\n      lastOffsetLength = offsetLength;\n    }\n    \n    if (payloadLength > 0) {\n      proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    //if (DEBUG) System.out.println(\"SPW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 : \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    int payloadLength = 0;\n\n    if (storePayloads) {\n      payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n    \n    if (storeOffsets) {\n      // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n      // and the numbers aren't that much smaller anyways.\n      int offsetDelta = startOffset - lastOffset;\n      int offsetLength = endOffset - startOffset;\n      if (offsetLength != lastOffsetLength) {\n        proxOut.writeVInt(offsetDelta << 1 | 1);\n        proxOut.writeVInt(offsetLength);\n      } else {\n        proxOut.writeVInt(offsetDelta << 1);\n      }\n      lastOffset = startOffset;\n      lastOffsetLength = offsetLength;\n    }\n    \n    if (payloadLength > 0) {\n      proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6616b1fd222bb5a60f7f7856ace312252bc97890","date":1350142044,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    //if (DEBUG) System.out.println(\"SPW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 : \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    int payloadLength = 0;\n\n    if (storePayloads) {\n      payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n    \n    if (storeOffsets) {\n      // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n      // and the numbers aren't that much smaller anyways.\n      int offsetDelta = startOffset - lastOffset;\n      int offsetLength = endOffset - startOffset;\n      assert offsetDelta >= 0 && offsetLength >= 0 : \"startOffset=\" + startOffset + \",lastOffset=\" + lastOffset + \",endOffset=\" + endOffset;\n      if (offsetLength != lastOffsetLength) {\n        proxOut.writeVInt(offsetDelta << 1 | 1);\n        proxOut.writeVInt(offsetLength);\n      } else {\n        proxOut.writeVInt(offsetDelta << 1);\n      }\n      lastOffset = startOffset;\n      lastOffsetLength = offsetLength;\n    }\n    \n    if (payloadLength > 0) {\n      proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    //if (DEBUG) System.out.println(\"SPW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 : \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    int payloadLength = 0;\n\n    if (storePayloads) {\n      payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n    \n    if (storeOffsets) {\n      // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n      // and the numbers aren't that much smaller anyways.\n      int offsetDelta = startOffset - lastOffset;\n      int offsetLength = endOffset - startOffset;\n      assert offsetDelta >= 0 && offsetLength >= 0 : \"startOffset=\" + startOffset + \",lastOffset=\" + lastOffset + \",endOffset=\" + endOffset;\n      if (offsetLength != lastOffsetLength) {\n        proxOut.writeVInt(offsetDelta << 1 | 1);\n        proxOut.writeVInt(offsetLength);\n      } else {\n        proxOut.writeVInt(offsetDelta << 1);\n      }\n      lastOffset = startOffset;\n      lastOffsetLength = offsetLength;\n    }\n    \n    if (payloadLength > 0) {\n      proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    //if (DEBUG) System.out.println(\"SPW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 : \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    int payloadLength = 0;\n\n    if (storePayloads) {\n      payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n    \n    if (storeOffsets) {\n      // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n      // and the numbers aren't that much smaller anyways.\n      int offsetDelta = startOffset - lastOffset;\n      int offsetLength = endOffset - startOffset;\n      assert offsetDelta >= 0 && offsetLength >= 0 : \"startOffset=\" + startOffset + \",lastOffset=\" + lastOffset + \",endOffset=\" + endOffset;\n      if (offsetLength != lastOffsetLength) {\n        proxOut.writeVInt(offsetDelta << 1 | 1);\n        proxOut.writeVInt(offsetLength);\n      } else {\n        proxOut.writeVInt(offsetDelta << 1);\n      }\n      lastOffset = startOffset;\n      lastOffsetLength = offsetLength;\n    }\n    \n    if (payloadLength > 0) {\n      proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    //if (DEBUG) System.out.println(\"SPW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 : \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    int payloadLength = 0;\n\n    if (storePayloads) {\n      payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n    \n    if (storeOffsets) {\n      // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n      // and the numbers aren't that much smaller anyways.\n      int offsetDelta = startOffset - lastOffset;\n      int offsetLength = endOffset - startOffset;\n      assert offsetDelta >= 0 && offsetLength >= 0 : \"startOffset=\" + startOffset + \",lastOffset=\" + lastOffset + \",endOffset=\" + endOffset;\n      if (offsetLength != lastOffsetLength) {\n        proxOut.writeVInt(offsetDelta << 1 | 1);\n        proxOut.writeVInt(offsetLength);\n      } else {\n        proxOut.writeVInt(offsetDelta << 1);\n      }\n      lastOffset = startOffset;\n      lastOffsetLength = offsetLength;\n    }\n    \n    if (payloadLength > 0) {\n      proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    //if (DEBUG) System.out.println(\"SPW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 : \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    int payloadLength = 0;\n\n    if (storePayloads) {\n      payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n    \n    if (storeOffsets) {\n      // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n      // and the numbers aren't that much smaller anyways.\n      int offsetDelta = startOffset - lastOffset;\n      int offsetLength = endOffset - startOffset;\n      assert offsetDelta >= 0 && offsetLength >= 0 : \"startOffset=\" + startOffset + \",lastOffset=\" + lastOffset + \",endOffset=\" + endOffset;\n      if (offsetLength != lastOffsetLength) {\n        proxOut.writeVInt(offsetDelta << 1 | 1);\n        proxOut.writeVInt(offsetLength);\n      } else {\n        proxOut.writeVInt(offsetDelta << 1);\n      }\n      lastOffset = startOffset;\n      lastOffsetLength = offsetLength;\n    }\n    \n    if (payloadLength > 0) {\n      proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    //if (DEBUG) System.out.println(\"SPW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 : \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    int payloadLength = 0;\n\n    if (storePayloads) {\n      payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n    \n    if (storeOffsets) {\n      // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n      // and the numbers aren't that much smaller anyways.\n      int offsetDelta = startOffset - lastOffset;\n      int offsetLength = endOffset - startOffset;\n      assert offsetDelta >= 0 && offsetLength >= 0 : \"startOffset=\" + startOffset + \",lastOffset=\" + lastOffset + \",endOffset=\" + endOffset;\n      if (offsetLength != lastOffsetLength) {\n        proxOut.writeVInt(offsetDelta << 1 | 1);\n        proxOut.writeVInt(offsetLength);\n      } else {\n        proxOut.writeVInt(offsetDelta << 1);\n      }\n      lastOffset = startOffset;\n      lastOffsetLength = offsetLength;\n    }\n    \n    if (payloadLength > 0) {\n      proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6616b1fd222bb5a60f7f7856ace312252bc97890":["d2d5b1f6ad16c5f1ce7e0a00225e2c9ffd0bc626"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["d2d5b1f6ad16c5f1ce7e0a00225e2c9ffd0bc626","6616b1fd222bb5a60f7f7856ace312252bc97890"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["d2d5b1f6ad16c5f1ce7e0a00225e2c9ffd0bc626","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"d2d5b1f6ad16c5f1ce7e0a00225e2c9ffd0bc626":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"]},"commit2Childs":{"6616b1fd222bb5a60f7f7856ace312252bc97890":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d2d5b1f6ad16c5f1ce7e0a00225e2c9ffd0bc626"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"d2d5b1f6ad16c5f1ce7e0a00225e2c9ffd0bc626":["6616b1fd222bb5a60f7f7856ace312252bc97890","c7492bcb52be51e55d596134b95b2e53cc4ffb91","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}