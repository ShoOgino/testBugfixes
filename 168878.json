{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#fixIndex(Status).mjava","commits":[{"id":"8111284b52c6e449b5aa97e0b7c90ce866018db5","date":1375027816,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#fixIndex(Status).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#fixIndex(Status,Codec).mjava","sourceNew":"  /** Repairs the index using previously returned result\n   *  from {@link #checkIndex}.  Note that this does not\n   *  remove any of the unreferenced files after it's done;\n   *  you must separately open an {@link IndexWriter}, which\n   *  deletes unreferenced files when it's created.\n   *\n   * <p><b>WARNING</b>: this writes a\n   *  new segments file into the index, effectively removing\n   *  all documents in broken segments from the index.\n   *  BE CAREFUL.\n   *\n   * <p><b>WARNING</b>: Make sure you only call this when the\n   *  index is not opened  by any writer. */\n  public void fixIndex(Status result) throws IOException {\n    if (result.partial)\n      throw new IllegalArgumentException(\"can only fix an index that was fully checked (this status checked a subset of segments)\");\n    result.newSegments.changed();\n    result.newSegments.commit(result.dir);\n  }\n\n","sourceOld":"  /** Repairs the index using previously returned result\n   *  from {@link #checkIndex}.  Note that this does not\n   *  remove any of the unreferenced files after it's done;\n   *  you must separately open an {@link IndexWriter}, which\n   *  deletes unreferenced files when it's created.\n   *\n   * <p><b>WARNING</b>: this writes a\n   *  new segments file into the index, effectively removing\n   *  all documents in broken segments from the index.\n   *  BE CAREFUL.\n   *\n   * <p><b>WARNING</b>: Make sure you only call this when the\n   *  index is not opened  by any writer. */\n  public void fixIndex(Status result, Codec codec) throws IOException {\n    if (result.partial)\n      throw new IllegalArgumentException(\"can only fix an index that was fully checked (this status checked a subset of segments)\");\n    result.newSegments.changed();\n    result.newSegments.commit(result.dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#fixIndex(Status).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#fixIndex(Status,Codec).mjava","sourceNew":"  /** Repairs the index using previously returned result\n   *  from {@link #checkIndex}.  Note that this does not\n   *  remove any of the unreferenced files after it's done;\n   *  you must separately open an {@link IndexWriter}, which\n   *  deletes unreferenced files when it's created.\n   *\n   * <p><b>WARNING</b>: this writes a\n   *  new segments file into the index, effectively removing\n   *  all documents in broken segments from the index.\n   *  BE CAREFUL.\n   *\n   * <p><b>WARNING</b>: Make sure you only call this when the\n   *  index is not opened  by any writer. */\n  public void fixIndex(Status result) throws IOException {\n    if (result.partial)\n      throw new IllegalArgumentException(\"can only fix an index that was fully checked (this status checked a subset of segments)\");\n    result.newSegments.changed();\n    result.newSegments.commit(result.dir);\n  }\n\n","sourceOld":"  /** Repairs the index using previously returned result\n   *  from {@link #checkIndex}.  Note that this does not\n   *  remove any of the unreferenced files after it's done;\n   *  you must separately open an {@link IndexWriter}, which\n   *  deletes unreferenced files when it's created.\n   *\n   * <p><b>WARNING</b>: this writes a\n   *  new segments file into the index, effectively removing\n   *  all documents in broken segments from the index.\n   *  BE CAREFUL.\n   *\n   * <p><b>WARNING</b>: Make sure you only call this when the\n   *  index is not opened  by any writer. */\n  public void fixIndex(Status result, Codec codec) throws IOException {\n    if (result.partial)\n      throw new IllegalArgumentException(\"can only fix an index that was fully checked (this status checked a subset of segments)\");\n    result.newSegments.changed();\n    result.newSegments.commit(result.dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8eaedf240fab95c428d5f496a274256d2053ad37","date":1412122376,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#exorciseIndex(Status).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#fixIndex(Status).mjava","sourceNew":"  /** Repairs the index using previously returned result\n   *  from {@link #checkIndex}.  Note that this does not\n   *  remove any of the unreferenced files after it's done;\n   *  you must separately open an {@link IndexWriter}, which\n   *  deletes unreferenced files when it's created.\n   *\n   * <p><b>WARNING</b>: this writes a\n   *  new segments file into the index, effectively removing\n   *  all documents in broken segments from the index.\n   *  BE CAREFUL.\n   *\n   * <p><b>WARNING</b>: Make sure you only call this when the\n   *  index is not opened  by any writer. */\n  public void exorciseIndex(Status result) throws IOException {\n    if (result.partial)\n      throw new IllegalArgumentException(\"can only exorcise an index that was fully checked (this status checked a subset of segments)\");\n    result.newSegments.changed();\n    result.newSegments.commit(result.dir);\n  }\n\n","sourceOld":"  /** Repairs the index using previously returned result\n   *  from {@link #checkIndex}.  Note that this does not\n   *  remove any of the unreferenced files after it's done;\n   *  you must separately open an {@link IndexWriter}, which\n   *  deletes unreferenced files when it's created.\n   *\n   * <p><b>WARNING</b>: this writes a\n   *  new segments file into the index, effectively removing\n   *  all documents in broken segments from the index.\n   *  BE CAREFUL.\n   *\n   * <p><b>WARNING</b>: Make sure you only call this when the\n   *  index is not opened  by any writer. */\n  public void fixIndex(Status result) throws IOException {\n    if (result.partial)\n      throw new IllegalArgumentException(\"can only fix an index that was fully checked (this status checked a subset of segments)\");\n    result.newSegments.changed();\n    result.newSegments.commit(result.dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#exorciseIndex(Status).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#fixIndex(Status).mjava","sourceNew":"  /** Repairs the index using previously returned result\n   *  from {@link #checkIndex}.  Note that this does not\n   *  remove any of the unreferenced files after it's done;\n   *  you must separately open an {@link IndexWriter}, which\n   *  deletes unreferenced files when it's created.\n   *\n   * <p><b>WARNING</b>: this writes a\n   *  new segments file into the index, effectively removing\n   *  all documents in broken segments from the index.\n   *  BE CAREFUL.\n   */\n  public void exorciseIndex(Status result) throws IOException {\n    ensureOpen();\n    if (result.partial)\n      throw new IllegalArgumentException(\"can only exorcise an index that was fully checked (this status checked a subset of segments)\");\n    result.newSegments.changed();\n    result.newSegments.commit(result.dir);\n  }\n\n","sourceOld":"  /** Repairs the index using previously returned result\n   *  from {@link #checkIndex}.  Note that this does not\n   *  remove any of the unreferenced files after it's done;\n   *  you must separately open an {@link IndexWriter}, which\n   *  deletes unreferenced files when it's created.\n   *\n   * <p><b>WARNING</b>: this writes a\n   *  new segments file into the index, effectively removing\n   *  all documents in broken segments from the index.\n   *  BE CAREFUL.\n   *\n   * <p><b>WARNING</b>: Make sure you only call this when the\n   *  index is not opened  by any writer. */\n  public void fixIndex(Status result) throws IOException {\n    if (result.partial)\n      throw new IllegalArgumentException(\"can only fix an index that was fully checked (this status checked a subset of segments)\");\n    result.newSegments.changed();\n    result.newSegments.commit(result.dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8eaedf240fab95c428d5f496a274256d2053ad37":["8111284b52c6e449b5aa97e0b7c90ce866018db5"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["8111284b52c6e449b5aa97e0b7c90ce866018db5","8eaedf240fab95c428d5f496a274256d2053ad37"],"8111284b52c6e449b5aa97e0b7c90ce866018db5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8eaedf240fab95c428d5f496a274256d2053ad37"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","8111284b52c6e449b5aa97e0b7c90ce866018db5"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"8eaedf240fab95c428d5f496a274256d2053ad37":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"8111284b52c6e449b5aa97e0b7c90ce866018db5":["8eaedf240fab95c428d5f496a274256d2053ad37","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}