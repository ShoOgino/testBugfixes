{"path":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#collate(SpellingResult,String,ResponseBuilder,int,int,int,boolean).mjava","commits":[{"id":"0ad9ec888e587ca9a3279368245cdf00aabdc108","date":1338832525,"type":1,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#collate(SpellingResult,String,ResponseBuilder,int,int,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#collate(SpellingResult,String,ResponseBuilder,int,int,int).mjava","sourceNew":"  public List<SpellCheckCollation> collate(SpellingResult result, String originalQuery, ResponseBuilder ultimateResponse,\n                                           int maxCollations, int maxTries, int maxEvaluations, boolean suggestionsMayOverlap) {\n    List<SpellCheckCollation> collations = new ArrayList<SpellCheckCollation>();\n\n    QueryComponent queryComponent = null;\n    if (ultimateResponse.components != null) {\n      for (SearchComponent sc : ultimateResponse.components) {\n        if (sc instanceof QueryComponent) {\n          queryComponent = (QueryComponent) sc;\n          break;\n        }\n      }\n    }\n\n    boolean verifyCandidateWithQuery = true;\n    int maxNumberToIterate = maxTries;\n    if (maxTries < 1) {\n      maxTries = 1;\n      maxNumberToIterate = maxCollations;\n      verifyCandidateWithQuery = false;\n    }\n    if (queryComponent == null && verifyCandidateWithQuery) {\n      LOG.info(\"Could not find an instance of QueryComponent.  Disabling collation verification against the index.\");\n      maxTries = 1;\n      verifyCandidateWithQuery = false;\n    }\n\n    int tryNo = 0;\n    int collNo = 0;\n    PossibilityIterator possibilityIter = new PossibilityIterator(result.getSuggestions(), maxNumberToIterate, maxEvaluations, suggestionsMayOverlap);\n    while (tryNo < maxTries && collNo < maxCollations && possibilityIter.hasNext()) {\n\n      PossibilityIterator.RankedSpellPossibility possibility = possibilityIter.next();\n      String collationQueryStr = getCollation(originalQuery, possibility.corrections);\n      int hits = 0;\n\n      if (verifyCandidateWithQuery) {\n        tryNo++;\n\n        ModifiableSolrParams params = new ModifiableSolrParams(ultimateResponse.req.getParams());\n        params.set(CommonParams.Q, collationQueryStr);\n        params.remove(CommonParams.START);\n        params.set(CommonParams.FL, \"id\");\n        params.set(CommonParams.ROWS, \"0\");\n        params.remove(GroupParams.GROUP);\n\n        // creating a request here... make sure to close it!\n        ResponseBuilder checkResponse = new ResponseBuilder(new LocalSolrQueryRequest(ultimateResponse.req.getCore(), params),new SolrQueryResponse(), Arrays.<SearchComponent>asList(queryComponent));\n        checkResponse.setQparser(ultimateResponse.getQparser());\n        checkResponse.setFilters(ultimateResponse.getFilters());\n        checkResponse.setQueryString(collationQueryStr);\n        checkResponse.components = Arrays.<SearchComponent>asList(queryComponent);\n\n        try {\n          queryComponent.prepare(checkResponse);\n          queryComponent.process(checkResponse);\n          hits = (Integer) checkResponse.rsp.getToLog().get(\"hits\");\n        } catch (Exception e) {\n          LOG.warn(\"Exception trying to re-query to check if a spell check possibility would return any hits.\", e);\n        } finally {\n          checkResponse.req.close();  \n        }\n      }\n      if (hits > 0 || !verifyCandidateWithQuery) {\n        collNo++;\n        SpellCheckCollation collation = new SpellCheckCollation();\n        collation.setCollationQuery(collationQueryStr);\n        collation.setHits(hits);\n        collation.setInternalRank(suggestionsMayOverlap ? ((possibility.rank * 1000) + possibility.index) : possibility.rank);\n\n        NamedList<String> misspellingsAndCorrections = new NamedList<String>();\n        for (SpellCheckCorrection corr : possibility.corrections) {\n          misspellingsAndCorrections.add(corr.getOriginal().toString(), corr.getCorrection());\n        }\n        collation.setMisspellingsAndCorrections(misspellingsAndCorrections);\n        collations.add(collation);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Collation: \" + collationQueryStr + (verifyCandidateWithQuery ? (\" will return \" + hits + \" hits.\") : \"\"));\n      }\n    }\n    return collations;\n  }\n\n","sourceOld":"  public List<SpellCheckCollation> collate(SpellingResult result, String originalQuery, ResponseBuilder ultimateResponse,\n                                           int maxCollations, int maxTries, int maxEvaluations) {\n    List<SpellCheckCollation> collations = new ArrayList<SpellCheckCollation>();\n\n    QueryComponent queryComponent = null;\n    if (ultimateResponse.components != null) {\n      for (SearchComponent sc : ultimateResponse.components) {\n        if (sc instanceof QueryComponent) {\n          queryComponent = (QueryComponent) sc;\n          break;\n        }\n      }\n    }\n\n    boolean verifyCandidateWithQuery = true;\n    if (maxTries < 1) {\n      maxTries = 1;\n      verifyCandidateWithQuery = false;\n    }\n    if (queryComponent == null && verifyCandidateWithQuery) {\n      LOG.info(\"Could not find an instance of QueryComponent.  Disabling collation verification against the index.\");\n      maxTries = 1;\n      verifyCandidateWithQuery = false;\n    }\n\n    int tryNo = 0;\n    int collNo = 0;\n    PossibilityIterator possibilityIter = new PossibilityIterator(result.getSuggestions(), maxTries, maxEvaluations);\n    while (tryNo < maxTries && collNo < maxCollations && possibilityIter.hasNext()) {\n\n      RankedSpellPossibility possibility = possibilityIter.next();\n      String collationQueryStr = getCollation(originalQuery, possibility.getCorrections());\n      int hits = 0;\n\n      if (verifyCandidateWithQuery) {\n        tryNo++;\n\n        ModifiableSolrParams params = new ModifiableSolrParams(ultimateResponse.req.getParams());\n        params.set(CommonParams.Q, collationQueryStr);\n        params.remove(CommonParams.START);\n        params.set(CommonParams.FL, \"id\");\n        params.set(CommonParams.ROWS, \"0\");\n        params.remove(GroupParams.GROUP);\n\n        // creating a request here... make sure to close it!\n        ResponseBuilder checkResponse = new ResponseBuilder(new LocalSolrQueryRequest(ultimateResponse.req.getCore(), params),new SolrQueryResponse(), Arrays.<SearchComponent>asList(queryComponent));\n        checkResponse.setQparser(ultimateResponse.getQparser());\n        checkResponse.setFilters(ultimateResponse.getFilters());\n        checkResponse.setQueryString(collationQueryStr);\n        checkResponse.components = Arrays.<SearchComponent>asList(queryComponent);\n\n        try {\n          queryComponent.prepare(checkResponse);\n          queryComponent.process(checkResponse);\n          hits = (Integer) checkResponse.rsp.getToLog().get(\"hits\");\n        } catch (Exception e) {\n          LOG.warn(\"Exception trying to re-query to check if a spell check possibility would return any hits.\", e);\n        } finally {\n          checkResponse.req.close();  \n        }\n      }\n      if (hits > 0 || !verifyCandidateWithQuery) {\n        collNo++;\n        SpellCheckCollation collation = new SpellCheckCollation();\n        collation.setCollationQuery(collationQueryStr);\n        collation.setHits(hits);\n        collation.setInternalRank(possibility.getRank());\n\n        NamedList<String> misspellingsAndCorrections = new NamedList<String>();\n        for (SpellCheckCorrection corr : possibility.getCorrections()) {\n          misspellingsAndCorrections.add(corr.getOriginal().toString(), corr.getCorrection());\n        }\n        collation.setMisspellingsAndCorrections(misspellingsAndCorrections);\n        collations.add(collation);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Collation: \" + collationQueryStr + (verifyCandidateWithQuery ? (\" will return \" + hits + \" hits.\") : \"\"));\n      }\n    }\n    return collations;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c7c80b7be1f9058adb5ed547379fba54f55785","date":1339435024,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#collate(SpellingResult,String,ResponseBuilder,int,int,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#collate(SpellingResult,String,ResponseBuilder,int,int,int,boolean).mjava","sourceNew":"  public List<SpellCheckCollation> collate(SpellingResult result, String originalQuery, ResponseBuilder ultimateResponse,\n                                           int maxCollations, int maxTries, int maxEvaluations, boolean suggestionsMayOverlap) {\n    List<SpellCheckCollation> collations = new ArrayList<SpellCheckCollation>();\n\n    QueryComponent queryComponent = null;\n    if (ultimateResponse.components != null) {\n      for (SearchComponent sc : ultimateResponse.components) {\n        if (sc instanceof QueryComponent) {\n          queryComponent = (QueryComponent) sc;\n          break;\n        }\n      }\n    }\n\n    boolean verifyCandidateWithQuery = true;\n    int maxNumberToIterate = maxTries;\n    if (maxTries < 1) {\n      maxTries = 1;\n      maxNumberToIterate = maxCollations;\n      verifyCandidateWithQuery = false;\n    }\n    if (queryComponent == null && verifyCandidateWithQuery) {\n      LOG.info(\"Could not find an instance of QueryComponent.  Disabling collation verification against the index.\");\n      maxTries = 1;\n      verifyCandidateWithQuery = false;\n    }\n\n    int tryNo = 0;\n    int collNo = 0;\n    PossibilityIterator possibilityIter = new PossibilityIterator(result.getSuggestions(), maxNumberToIterate, maxEvaluations, suggestionsMayOverlap);\n    while (tryNo < maxTries && collNo < maxCollations && possibilityIter.hasNext()) {\n\n      PossibilityIterator.RankedSpellPossibility possibility = possibilityIter.next();\n      String collationQueryStr = getCollation(originalQuery, possibility.corrections);\n      int hits = 0;\n\n      if (verifyCandidateWithQuery) {\n        tryNo++;\n        SolrParams origParams = ultimateResponse.req.getParams();\n        ModifiableSolrParams params = new ModifiableSolrParams(origParams);  \n        Iterator<String> origParamIterator = origParams.getParameterNamesIterator();\n        int pl = SpellingParams.SPELLCHECK_COLLATE_PARAM_OVERRIDE.length();\n        while (origParamIterator.hasNext()) {\n          String origParamName = origParamIterator.next();\n          if (origParamName\n              .startsWith(SpellingParams.SPELLCHECK_COLLATE_PARAM_OVERRIDE)\n              && origParamName.length() > pl) {\n            String[] val = origParams.getParams(origParamName);\n            if (val.length == 1 && val[0].length() == 0) {\n              params.set(origParamName.substring(pl), (String[]) null);\n            } else {\n              params.set(origParamName.substring(pl), val);\n            }\n          }\n        }\n        params.set(CommonParams.Q, collationQueryStr);\n        params.remove(CommonParams.START);\n        params.set(CommonParams.FL, \"id\");\n        params.set(CommonParams.ROWS, \"0\");\n        params.remove(GroupParams.GROUP);\n\n        // creating a request here... make sure to close it!\n        ResponseBuilder checkResponse = new ResponseBuilder(new LocalSolrQueryRequest(ultimateResponse.req.getCore(), params),new SolrQueryResponse(), Arrays.<SearchComponent>asList(queryComponent));\n        checkResponse.setQparser(ultimateResponse.getQparser());\n        checkResponse.setFilters(ultimateResponse.getFilters());\n        checkResponse.setQueryString(collationQueryStr);\n        checkResponse.components = Arrays.<SearchComponent>asList(queryComponent);\n\n        try {\n          queryComponent.prepare(checkResponse);\n          queryComponent.process(checkResponse);\n          hits = (Integer) checkResponse.rsp.getToLog().get(\"hits\");\n        } catch (Exception e) {\n          LOG.warn(\"Exception trying to re-query to check if a spell check possibility would return any hits.\", e);\n        } finally {\n          checkResponse.req.close();  \n        }\n      }\n      if (hits > 0 || !verifyCandidateWithQuery) {\n        collNo++;\n        SpellCheckCollation collation = new SpellCheckCollation();\n        collation.setCollationQuery(collationQueryStr);\n        collation.setHits(hits);\n        collation.setInternalRank(suggestionsMayOverlap ? ((possibility.rank * 1000) + possibility.index) : possibility.rank);\n\n        NamedList<String> misspellingsAndCorrections = new NamedList<String>();\n        for (SpellCheckCorrection corr : possibility.corrections) {\n          misspellingsAndCorrections.add(corr.getOriginal().toString(), corr.getCorrection());\n        }\n        collation.setMisspellingsAndCorrections(misspellingsAndCorrections);\n        collations.add(collation);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Collation: \" + collationQueryStr + (verifyCandidateWithQuery ? (\" will return \" + hits + \" hits.\") : \"\"));\n      }\n    }\n    return collations;\n  }\n\n","sourceOld":"  public List<SpellCheckCollation> collate(SpellingResult result, String originalQuery, ResponseBuilder ultimateResponse,\n                                           int maxCollations, int maxTries, int maxEvaluations, boolean suggestionsMayOverlap) {\n    List<SpellCheckCollation> collations = new ArrayList<SpellCheckCollation>();\n\n    QueryComponent queryComponent = null;\n    if (ultimateResponse.components != null) {\n      for (SearchComponent sc : ultimateResponse.components) {\n        if (sc instanceof QueryComponent) {\n          queryComponent = (QueryComponent) sc;\n          break;\n        }\n      }\n    }\n\n    boolean verifyCandidateWithQuery = true;\n    int maxNumberToIterate = maxTries;\n    if (maxTries < 1) {\n      maxTries = 1;\n      maxNumberToIterate = maxCollations;\n      verifyCandidateWithQuery = false;\n    }\n    if (queryComponent == null && verifyCandidateWithQuery) {\n      LOG.info(\"Could not find an instance of QueryComponent.  Disabling collation verification against the index.\");\n      maxTries = 1;\n      verifyCandidateWithQuery = false;\n    }\n\n    int tryNo = 0;\n    int collNo = 0;\n    PossibilityIterator possibilityIter = new PossibilityIterator(result.getSuggestions(), maxNumberToIterate, maxEvaluations, suggestionsMayOverlap);\n    while (tryNo < maxTries && collNo < maxCollations && possibilityIter.hasNext()) {\n\n      PossibilityIterator.RankedSpellPossibility possibility = possibilityIter.next();\n      String collationQueryStr = getCollation(originalQuery, possibility.corrections);\n      int hits = 0;\n\n      if (verifyCandidateWithQuery) {\n        tryNo++;\n\n        ModifiableSolrParams params = new ModifiableSolrParams(ultimateResponse.req.getParams());\n        params.set(CommonParams.Q, collationQueryStr);\n        params.remove(CommonParams.START);\n        params.set(CommonParams.FL, \"id\");\n        params.set(CommonParams.ROWS, \"0\");\n        params.remove(GroupParams.GROUP);\n\n        // creating a request here... make sure to close it!\n        ResponseBuilder checkResponse = new ResponseBuilder(new LocalSolrQueryRequest(ultimateResponse.req.getCore(), params),new SolrQueryResponse(), Arrays.<SearchComponent>asList(queryComponent));\n        checkResponse.setQparser(ultimateResponse.getQparser());\n        checkResponse.setFilters(ultimateResponse.getFilters());\n        checkResponse.setQueryString(collationQueryStr);\n        checkResponse.components = Arrays.<SearchComponent>asList(queryComponent);\n\n        try {\n          queryComponent.prepare(checkResponse);\n          queryComponent.process(checkResponse);\n          hits = (Integer) checkResponse.rsp.getToLog().get(\"hits\");\n        } catch (Exception e) {\n          LOG.warn(\"Exception trying to re-query to check if a spell check possibility would return any hits.\", e);\n        } finally {\n          checkResponse.req.close();  \n        }\n      }\n      if (hits > 0 || !verifyCandidateWithQuery) {\n        collNo++;\n        SpellCheckCollation collation = new SpellCheckCollation();\n        collation.setCollationQuery(collationQueryStr);\n        collation.setHits(hits);\n        collation.setInternalRank(suggestionsMayOverlap ? ((possibility.rank * 1000) + possibility.index) : possibility.rank);\n\n        NamedList<String> misspellingsAndCorrections = new NamedList<String>();\n        for (SpellCheckCorrection corr : possibility.corrections) {\n          misspellingsAndCorrections.add(corr.getOriginal().toString(), corr.getCorrection());\n        }\n        collation.setMisspellingsAndCorrections(misspellingsAndCorrections);\n        collations.add(collation);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Collation: \" + collationQueryStr + (verifyCandidateWithQuery ? (\" will return \" + hits + \" hits.\") : \"\"));\n      }\n    }\n    return collations;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ebcafb9e6302e7e39ce2199768a1428d22dd3ce0","date":1367858986,"type":5,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#collate(SpellingResult,String,ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#collate(SpellingResult,String,ResponseBuilder,int,int,int,boolean).mjava","sourceNew":"  public List<SpellCheckCollation> collate(SpellingResult result,\n      String originalQuery, ResponseBuilder ultimateResponse) {\n  List<SpellCheckCollation> collations = new ArrayList<SpellCheckCollation>();\n\n    QueryComponent queryComponent = null;\n    if (ultimateResponse.components != null) {\n      for (SearchComponent sc : ultimateResponse.components) {\n        if (sc instanceof QueryComponent) {\n          queryComponent = (QueryComponent) sc;\n          break;\n        }\n      }\n    }\n\n    boolean verifyCandidateWithQuery = true;\n    int maxTries = maxCollationTries;\n    int maxNumberToIterate = maxTries;\n    if (maxTries < 1) {\n      maxTries = 1;\n      maxNumberToIterate = maxCollations;\n      verifyCandidateWithQuery = false;\n    }\n    if (queryComponent == null && verifyCandidateWithQuery) {\n      LOG.info(\"Could not find an instance of QueryComponent.  Disabling collation verification against the index.\");\n      maxTries = 1;\n      verifyCandidateWithQuery = false;\n    }\n    docCollectionLimit = docCollectionLimit > 0 ? docCollectionLimit : 0;\n    int maxDocId = -1;\n    if (verifyCandidateWithQuery && docCollectionLimit > 0) {\n      IndexReader reader = ultimateResponse.req.getSearcher().getIndexReader();\n      maxDocId = reader.maxDoc();\n    }\n\n    int tryNo = 0;\n    int collNo = 0;\n    PossibilityIterator possibilityIter = new PossibilityIterator(result.getSuggestions(), \n        maxNumberToIterate, maxCollationEvaluations, suggestionsMayOverlap);\n    while (tryNo < maxTries && collNo < maxCollations && possibilityIter.hasNext()) {\n\n      PossibilityIterator.RankedSpellPossibility possibility = possibilityIter.next();\n      String collationQueryStr = getCollation(originalQuery, possibility.corrections);\n      int hits = 0;\n\n      if (verifyCandidateWithQuery) {\n        tryNo++;\n        SolrParams origParams = ultimateResponse.req.getParams();\n        ModifiableSolrParams params = new ModifiableSolrParams(origParams);  \n        Iterator<String> origParamIterator = origParams.getParameterNamesIterator();\n        int pl = SpellingParams.SPELLCHECK_COLLATE_PARAM_OVERRIDE.length();\n        while (origParamIterator.hasNext()) {\n          String origParamName = origParamIterator.next();\n          if (origParamName\n              .startsWith(SpellingParams.SPELLCHECK_COLLATE_PARAM_OVERRIDE)\n              && origParamName.length() > pl) {\n            String[] val = origParams.getParams(origParamName);\n            if (val.length == 1 && val[0].length() == 0) {\n              params.set(origParamName.substring(pl), (String[]) null);\n            } else {\n              params.set(origParamName.substring(pl), val);\n            }\n          }\n        }\n        params.set(CommonParams.Q, collationQueryStr);\n        params.remove(CommonParams.START);\n        params.set(CommonParams.ROWS, \"\" + docCollectionLimit);\n        // we don't want any stored fields\n        params.set(CommonParams.FL, \"id\");\n        // we'll sort by doc id to ensure no scoring is done.\n        params.set(CommonParams.SORT, \"_docid_ asc\");\n        // If a dismax query, don't add unnecessary clauses for scoring\n        params.remove(DisMaxParams.TIE);\n        params.remove(DisMaxParams.PF);\n        params.remove(DisMaxParams.PF2);\n        params.remove(DisMaxParams.PF3);\n        params.remove(DisMaxParams.BQ);\n        params.remove(DisMaxParams.BF);\n        // Collate testing does not support Grouping (see SOLR-2577)\n        params.remove(GroupParams.GROUP);\n\n        // creating a request here... make sure to close it!\n        ResponseBuilder checkResponse = new ResponseBuilder(\n            new LocalSolrQueryRequest(ultimateResponse.req.getCore(), params),\n            new SolrQueryResponse(), Arrays.<SearchComponent> asList(queryComponent)); \n        checkResponse.setQparser(ultimateResponse.getQparser());\n        checkResponse.setFilters(ultimateResponse.getFilters());\n        checkResponse.setQueryString(collationQueryStr);\n        checkResponse.components = Arrays.<SearchComponent>asList(queryComponent);\n\n        try {\n          queryComponent.prepare(checkResponse);\n          if (docCollectionLimit > 0) {\n            int f = checkResponse.getFieldFlags();\n            checkResponse.setFieldFlags(f |= SolrIndexSearcher.TERMINATE_EARLY);\n            if (reportHits) {\n              f = checkResponse.getFieldFlags();\n              checkResponse.setFieldFlags(f |= SolrIndexSearcher.FORCE_INORDER_COLLECTION);\n            }\n          }\n          queryComponent.process(checkResponse);\n          hits = (Integer) checkResponse.rsp.getToLog().get(\"hits\");\n        } catch (EarlyTerminatingCollectorException etce) {\n          assert (docCollectionLimit > 0);\n          if (etce.getLastDocId() + 1 == maxDocId) {\n            hits = docCollectionLimit;\n          } else {\n            hits = maxDocId / ((etce.getLastDocId() + 1) / docCollectionLimit);\n          }\n        } catch (Exception e) {\n          LOG.warn(\"Exception trying to re-query to check if a spell check possibility would return any hits.\", e);\n        } finally {\n          checkResponse.req.close();  \n        }\n      }\n      if (hits > 0 || !verifyCandidateWithQuery) {\n        collNo++;\n        SpellCheckCollation collation = new SpellCheckCollation();\n        collation.setCollationQuery(collationQueryStr);\n        collation.setHits(hits);\n        collation.setInternalRank(suggestionsMayOverlap ? ((possibility.rank * 1000) + possibility.index) : possibility.rank);\n\n        NamedList<String> misspellingsAndCorrections = new NamedList<String>();\n        for (SpellCheckCorrection corr : possibility.corrections) {\n          misspellingsAndCorrections.add(corr.getOriginal().toString(), corr.getCorrection());\n        }\n        collation.setMisspellingsAndCorrections(misspellingsAndCorrections);\n        collations.add(collation);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Collation: \" + collationQueryStr + (verifyCandidateWithQuery ? (\" will return \" + hits + \" hits.\") : \"\"));\n      }\n    }\n    return collations;\n  }\n\n","sourceOld":"  public List<SpellCheckCollation> collate(SpellingResult result, String originalQuery, ResponseBuilder ultimateResponse,\n                                           int maxCollations, int maxTries, int maxEvaluations, boolean suggestionsMayOverlap) {\n    List<SpellCheckCollation> collations = new ArrayList<SpellCheckCollation>();\n\n    QueryComponent queryComponent = null;\n    if (ultimateResponse.components != null) {\n      for (SearchComponent sc : ultimateResponse.components) {\n        if (sc instanceof QueryComponent) {\n          queryComponent = (QueryComponent) sc;\n          break;\n        }\n      }\n    }\n\n    boolean verifyCandidateWithQuery = true;\n    int maxNumberToIterate = maxTries;\n    if (maxTries < 1) {\n      maxTries = 1;\n      maxNumberToIterate = maxCollations;\n      verifyCandidateWithQuery = false;\n    }\n    if (queryComponent == null && verifyCandidateWithQuery) {\n      LOG.info(\"Could not find an instance of QueryComponent.  Disabling collation verification against the index.\");\n      maxTries = 1;\n      verifyCandidateWithQuery = false;\n    }\n\n    int tryNo = 0;\n    int collNo = 0;\n    PossibilityIterator possibilityIter = new PossibilityIterator(result.getSuggestions(), maxNumberToIterate, maxEvaluations, suggestionsMayOverlap);\n    while (tryNo < maxTries && collNo < maxCollations && possibilityIter.hasNext()) {\n\n      PossibilityIterator.RankedSpellPossibility possibility = possibilityIter.next();\n      String collationQueryStr = getCollation(originalQuery, possibility.corrections);\n      int hits = 0;\n\n      if (verifyCandidateWithQuery) {\n        tryNo++;\n        SolrParams origParams = ultimateResponse.req.getParams();\n        ModifiableSolrParams params = new ModifiableSolrParams(origParams);  \n        Iterator<String> origParamIterator = origParams.getParameterNamesIterator();\n        int pl = SpellingParams.SPELLCHECK_COLLATE_PARAM_OVERRIDE.length();\n        while (origParamIterator.hasNext()) {\n          String origParamName = origParamIterator.next();\n          if (origParamName\n              .startsWith(SpellingParams.SPELLCHECK_COLLATE_PARAM_OVERRIDE)\n              && origParamName.length() > pl) {\n            String[] val = origParams.getParams(origParamName);\n            if (val.length == 1 && val[0].length() == 0) {\n              params.set(origParamName.substring(pl), (String[]) null);\n            } else {\n              params.set(origParamName.substring(pl), val);\n            }\n          }\n        }\n        params.set(CommonParams.Q, collationQueryStr);\n        params.remove(CommonParams.START);\n        params.set(CommonParams.FL, \"id\");\n        params.set(CommonParams.ROWS, \"0\");\n        params.remove(GroupParams.GROUP);\n\n        // creating a request here... make sure to close it!\n        ResponseBuilder checkResponse = new ResponseBuilder(new LocalSolrQueryRequest(ultimateResponse.req.getCore(), params),new SolrQueryResponse(), Arrays.<SearchComponent>asList(queryComponent));\n        checkResponse.setQparser(ultimateResponse.getQparser());\n        checkResponse.setFilters(ultimateResponse.getFilters());\n        checkResponse.setQueryString(collationQueryStr);\n        checkResponse.components = Arrays.<SearchComponent>asList(queryComponent);\n\n        try {\n          queryComponent.prepare(checkResponse);\n          queryComponent.process(checkResponse);\n          hits = (Integer) checkResponse.rsp.getToLog().get(\"hits\");\n        } catch (Exception e) {\n          LOG.warn(\"Exception trying to re-query to check if a spell check possibility would return any hits.\", e);\n        } finally {\n          checkResponse.req.close();  \n        }\n      }\n      if (hits > 0 || !verifyCandidateWithQuery) {\n        collNo++;\n        SpellCheckCollation collation = new SpellCheckCollation();\n        collation.setCollationQuery(collationQueryStr);\n        collation.setHits(hits);\n        collation.setInternalRank(suggestionsMayOverlap ? ((possibility.rank * 1000) + possibility.index) : possibility.rank);\n\n        NamedList<String> misspellingsAndCorrections = new NamedList<String>();\n        for (SpellCheckCorrection corr : possibility.corrections) {\n          misspellingsAndCorrections.add(corr.getOriginal().toString(), corr.getCorrection());\n        }\n        collation.setMisspellingsAndCorrections(misspellingsAndCorrections);\n        collations.add(collation);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Collation: \" + collationQueryStr + (verifyCandidateWithQuery ? (\" will return \" + hits + \" hits.\") : \"\"));\n      }\n    }\n    return collations;\n  }\n\n","bugFix":null,"bugIntro":["2ef113fb050c2f71e3075c84198045b09385eda3"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ebcafb9e6302e7e39ce2199768a1428d22dd3ce0":["f4c7c80b7be1f9058adb5ed547379fba54f55785"],"0ad9ec888e587ca9a3279368245cdf00aabdc108":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4c7c80b7be1f9058adb5ed547379fba54f55785":["0ad9ec888e587ca9a3279368245cdf00aabdc108"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ebcafb9e6302e7e39ce2199768a1428d22dd3ce0"]},"commit2Childs":{"ebcafb9e6302e7e39ce2199768a1428d22dd3ce0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ad9ec888e587ca9a3279368245cdf00aabdc108":["f4c7c80b7be1f9058adb5ed547379fba54f55785"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad9ec888e587ca9a3279368245cdf00aabdc108"],"f4c7c80b7be1f9058adb5ed547379fba54f55785":["ebcafb9e6302e7e39ce2199768a1428d22dd3ce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}