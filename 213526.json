{"path":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#waitForLeaderChange(Map[String,String],int,Boolean,NamedList[Object]).mjava","commits":[{"id":"9ebd3a557326ef3eab85b73a8cff781f7d801248","date":1431620752,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#waitForLeaderChange(Map[String,String],int,Boolean,NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#waitForLeaderChange(Map[String,String],int,Boolean,NamedList[Object]).mjava","sourceNew":"  // currentAsyncIds - map of request IDs and reporting data (value)\n  // maxWaitSecs - How long are we going to wait? Defaults to 30 seconds.\n  // waitForAll - if true, do not return until all assignments have been made.\n  // results - a place to stash results for reporting back to the user.\n  //\n  private boolean waitForLeaderChange(Map<String, String> currentAsyncIds, final int maxWaitSecs,\n                                      Boolean waitForAll, NamedList<Object> results)\n      throws KeeperException, InterruptedException {\n\n    if (currentAsyncIds.size() == 0) return true;\n\n    for (int idx = 0; idx < maxWaitSecs * 10; ++idx) {\n      Iterator<Map.Entry<String, String>> iter = currentAsyncIds.entrySet().iterator();\n      boolean foundChange = false;\n      while (iter.hasNext()) {\n        Map.Entry<String, String> pair = iter.next();\n        String asyncId = pair.getKey();\n        if (coreContainer.getZkController().getOverseerFailureMap().contains(asyncId)) {\n          coreContainer.getZkController().getOverseerFailureMap().remove(asyncId);\n          NamedList<Object> fails = (NamedList<Object>) results.get(\"failures\");\n          if (fails == null) {\n            fails = new NamedList<>();\n            results.add(\"failures\", fails);\n          }\n          NamedList<Object> res = new NamedList<>();\n          res.add(\"status\", \"failed\");\n          res.add(\"msg\", \"Failed to assign '\" + pair.getValue() + \"' to be leader\");\n          fails.add(asyncId.substring(REBALANCELEADERS.toLower().length()), res);\n          iter.remove();\n          foundChange = true;\n        } else if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId)) {\n          coreContainer.getZkController().getOverseerCompletedMap().remove(asyncId);\n          NamedList<Object> successes = (NamedList<Object>) results.get(\"successes\");\n          if (successes == null) {\n            successes = new NamedList<>();\n            results.add(\"successes\", successes);\n          }\n          NamedList<Object> res = new NamedList<>();\n          res.add(\"status\", \"success\");\n          res.add(\"msg\", \"Assigned '\" + pair.getValue() + \"' to be leader\");\n          successes.add(asyncId.substring(REBALANCELEADERS.toLower().length()), res);\n          iter.remove();\n          foundChange = true;\n        }\n      }\n      // We're done if we're processing a few at a time or all requests are processed.\n      if ((foundChange && waitForAll == false) || currentAsyncIds.size() == 0) {\n        return true;\n      }\n      Thread.sleep(100); //TODO: Is there a better thing to do than sleep here?\n    }\n    return false;\n  }\n\n","sourceOld":"  // currentAsyncIds - map of request IDs and reporting data (value)\n  // maxWaitSecs - How long are we going to wait? Defaults to 30 seconds.\n  // waitForAll - if true, do not return until all assignments have been made.\n  // results - a place to stash results for reporting back to the user.\n  //\n  private boolean waitForLeaderChange(Map<String, String> currentAsyncIds, final int maxWaitSecs,\n                                      Boolean waitForAll, NamedList<Object> results)\n      throws KeeperException, InterruptedException {\n\n    if (currentAsyncIds.size() == 0) return true;\n\n    for (int idx = 0; idx < maxWaitSecs * 10; ++idx) {\n      Iterator<Map.Entry<String, String>> iter = currentAsyncIds.entrySet().iterator();\n      boolean foundChange = false;\n      while (iter.hasNext()) {\n        Map.Entry<String, String> pair = iter.next();\n        String asyncId = pair.getKey();\n        if (coreContainer.getZkController().getOverseerFailureMap().contains(asyncId)) {\n          coreContainer.getZkController().getOverseerFailureMap().remove(asyncId);\n          NamedList<Object> fails = (NamedList<Object>) results.get(\"failures\");\n          if (fails == null) {\n            fails = new NamedList<>();\n            results.add(\"failures\", fails);\n          }\n          NamedList<Object> res = new NamedList<>();\n          res.add(\"status\", \"failed\");\n          res.add(\"msg\", \"Failed to assign '\" + pair.getValue() + \"' to be leader\");\n          fails.add(asyncId.substring(REBALANCELEADERS.toLower().length()), res);\n          iter.remove();\n          foundChange = true;\n        } else if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId)) {\n          coreContainer.getZkController().getOverseerCompletedMap().remove(asyncId);\n          NamedList<Object> successes = (NamedList<Object>) results.get(\"successes\");\n          if (successes == null) {\n            successes = new NamedList<>();\n            results.add(\"successes\", successes);\n          }\n          NamedList<Object> res = new NamedList<>();\n          res.add(\"status\", \"success\");\n          res.add(\"msg\", \"Assigned '\" + pair.getValue() + \"' to be leader\");\n          successes.add(asyncId.substring(REBALANCELEADERS.toLower().length()), res);\n          iter.remove();\n          foundChange = true;\n        }\n      }\n      // We're done if we're processing a few at a time or all requests are processed.\n      if ((foundChange && waitForAll == false) || currentAsyncIds.size() == 0) {\n        return true;\n      }\n      Thread.sleep(100); //TODO: Is there a better thing to do than sleep here?\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd8a9ad1acc754f713e220250044c2bf06a22a0b","date":1518740056,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#waitForLeaderChange(Map[String,String],int,Boolean,NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#waitForLeaderChange(Map[String,String],int,Boolean,NamedList[Object]).mjava","sourceNew":"  // currentAsyncIds - map of request IDs and reporting data (value)\n  // maxWaitSecs - How long are we going to wait? Defaults to 30 seconds.\n  // waitForAll - if true, do not return until all assignments have been made.\n  // results - a place to stash results for reporting back to the user.\n  //\n  private boolean waitForLeaderChange(Map<String, String> currentAsyncIds, final int maxWaitSecs,\n                                      Boolean waitForAll, NamedList<Object> results)\n      throws KeeperException, InterruptedException {\n\n    if (currentAsyncIds.size() == 0) return true;\n\n    for (int idx = 0; idx < maxWaitSecs * 10; ++idx) {\n      Iterator<Map.Entry<String, String>> iter = currentAsyncIds.entrySet().iterator();\n      boolean foundChange = false;\n      while (iter.hasNext()) {\n        Map.Entry<String, String> pair = iter.next();\n        String asyncId = pair.getKey();\n        if (coreContainer.getZkController().getOverseerFailureMap().contains(asyncId)) {\n          coreContainer.getZkController().getOverseerFailureMap().remove(asyncId);\n          coreContainer.getZkController().clearAsyncId(asyncId);\n          NamedList<Object> fails = (NamedList<Object>) results.get(\"failures\");\n          if (fails == null) {\n            fails = new NamedList<>();\n            results.add(\"failures\", fails);\n          }\n          NamedList<Object> res = new NamedList<>();\n          res.add(\"status\", \"failed\");\n          res.add(\"msg\", \"Failed to assign '\" + pair.getValue() + \"' to be leader\");\n          fails.add(asyncId.substring(REBALANCELEADERS.toLower().length()), res);\n          iter.remove();\n          foundChange = true;\n        } else if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId)) {\n          coreContainer.getZkController().getOverseerCompletedMap().remove(asyncId);\n          coreContainer.getZkController().clearAsyncId(asyncId);\n          NamedList<Object> successes = (NamedList<Object>) results.get(\"successes\");\n          if (successes == null) {\n            successes = new NamedList<>();\n            results.add(\"successes\", successes);\n          }\n          NamedList<Object> res = new NamedList<>();\n          res.add(\"status\", \"success\");\n          res.add(\"msg\", \"Assigned '\" + pair.getValue() + \"' to be leader\");\n          successes.add(asyncId.substring(REBALANCELEADERS.toLower().length()), res);\n          iter.remove();\n          foundChange = true;\n        }\n      }\n      // We're done if we're processing a few at a time or all requests are processed.\n      if ((foundChange && waitForAll == false) || currentAsyncIds.size() == 0) {\n        return true;\n      }\n      Thread.sleep(100); //TODO: Is there a better thing to do than sleep here?\n    }\n    return false;\n  }\n\n","sourceOld":"  // currentAsyncIds - map of request IDs and reporting data (value)\n  // maxWaitSecs - How long are we going to wait? Defaults to 30 seconds.\n  // waitForAll - if true, do not return until all assignments have been made.\n  // results - a place to stash results for reporting back to the user.\n  //\n  private boolean waitForLeaderChange(Map<String, String> currentAsyncIds, final int maxWaitSecs,\n                                      Boolean waitForAll, NamedList<Object> results)\n      throws KeeperException, InterruptedException {\n\n    if (currentAsyncIds.size() == 0) return true;\n\n    for (int idx = 0; idx < maxWaitSecs * 10; ++idx) {\n      Iterator<Map.Entry<String, String>> iter = currentAsyncIds.entrySet().iterator();\n      boolean foundChange = false;\n      while (iter.hasNext()) {\n        Map.Entry<String, String> pair = iter.next();\n        String asyncId = pair.getKey();\n        if (coreContainer.getZkController().getOverseerFailureMap().contains(asyncId)) {\n          coreContainer.getZkController().getOverseerFailureMap().remove(asyncId);\n          NamedList<Object> fails = (NamedList<Object>) results.get(\"failures\");\n          if (fails == null) {\n            fails = new NamedList<>();\n            results.add(\"failures\", fails);\n          }\n          NamedList<Object> res = new NamedList<>();\n          res.add(\"status\", \"failed\");\n          res.add(\"msg\", \"Failed to assign '\" + pair.getValue() + \"' to be leader\");\n          fails.add(asyncId.substring(REBALANCELEADERS.toLower().length()), res);\n          iter.remove();\n          foundChange = true;\n        } else if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId)) {\n          coreContainer.getZkController().getOverseerCompletedMap().remove(asyncId);\n          NamedList<Object> successes = (NamedList<Object>) results.get(\"successes\");\n          if (successes == null) {\n            successes = new NamedList<>();\n            results.add(\"successes\", successes);\n          }\n          NamedList<Object> res = new NamedList<>();\n          res.add(\"status\", \"success\");\n          res.add(\"msg\", \"Assigned '\" + pair.getValue() + \"' to be leader\");\n          successes.add(asyncId.substring(REBALANCELEADERS.toLower().length()), res);\n          iter.remove();\n          foundChange = true;\n        }\n      }\n      // We're done if we're processing a few at a time or all requests are processed.\n      if ((foundChange && waitForAll == false) || currentAsyncIds.size() == 0) {\n        return true;\n      }\n      Thread.sleep(100); //TODO: Is there a better thing to do than sleep here?\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73fd358e8ec697393d56617f4d9cedaca74dca14","date":1547954439,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#waitAsyncRequests(int,Boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#waitForLeaderChange(Map[String,String],int,Boolean,NamedList[Object]).mjava","sourceNew":"  private boolean waitAsyncRequests(final int maxWaitSecs, Boolean waitForAll)\n      throws KeeperException, InterruptedException {\n\n    if (asyncRequests.size() == 0) {\n      return true;\n    }\n\n    for (int idx = 0; idx < maxWaitSecs * 10; ++idx) {\n      Iterator<String> iter = asyncRequests.iterator();\n      boolean foundChange = false;\n      while (iter.hasNext()) {\n        String asyncId = iter.next();\n        if (coreContainer.getZkController().getOverseerFailureMap().contains(asyncId)) {\n          coreContainer.getZkController().getOverseerFailureMap().remove(asyncId);\n          coreContainer.getZkController().clearAsyncId(asyncId);\n          iter.remove();\n          foundChange = true;\n        } else if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId)) {\n          coreContainer.getZkController().getOverseerCompletedMap().remove(asyncId);\n          coreContainer.getZkController().clearAsyncId(asyncId);\n          iter.remove();\n          foundChange = true;\n        }\n      }\n      // We're done if we're processing a few at a time or all requests are processed.\n      // We don't want to change, say, 100s of leaders simultaneously. So if the request specifies some limit,\n      // and we're at that limit, we want to return to the caller so it can immediately add another request.\n      // That's the purpose of the first clause here. Otherwise, of course, just return if all requests are\n      // processed.\n      if ((foundChange && waitForAll == false) || asyncRequests.size() == 0) {\n        return true;\n      }\n      TimeUnit.MILLISECONDS.sleep(100);\n    }\n    // If we get here, we've timed out waiting.\n    return false;\n  }\n\n","sourceOld":"  // currentAsyncIds - map of request IDs and reporting data (value)\n  // maxWaitSecs - How long are we going to wait? Defaults to 30 seconds.\n  // waitForAll - if true, do not return until all assignments have been made.\n  // results - a place to stash results for reporting back to the user.\n  //\n  private boolean waitForLeaderChange(Map<String, String> currentAsyncIds, final int maxWaitSecs,\n                                      Boolean waitForAll, NamedList<Object> results)\n      throws KeeperException, InterruptedException {\n\n    if (currentAsyncIds.size() == 0) return true;\n\n    for (int idx = 0; idx < maxWaitSecs * 10; ++idx) {\n      Iterator<Map.Entry<String, String>> iter = currentAsyncIds.entrySet().iterator();\n      boolean foundChange = false;\n      while (iter.hasNext()) {\n        Map.Entry<String, String> pair = iter.next();\n        String asyncId = pair.getKey();\n        if (coreContainer.getZkController().getOverseerFailureMap().contains(asyncId)) {\n          coreContainer.getZkController().getOverseerFailureMap().remove(asyncId);\n          coreContainer.getZkController().clearAsyncId(asyncId);\n          NamedList<Object> fails = (NamedList<Object>) results.get(\"failures\");\n          if (fails == null) {\n            fails = new NamedList<>();\n            results.add(\"failures\", fails);\n          }\n          NamedList<Object> res = new NamedList<>();\n          res.add(\"status\", \"failed\");\n          res.add(\"msg\", \"Failed to assign '\" + pair.getValue() + \"' to be leader\");\n          fails.add(asyncId.substring(REBALANCELEADERS.toLower().length()), res);\n          iter.remove();\n          foundChange = true;\n        } else if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId)) {\n          coreContainer.getZkController().getOverseerCompletedMap().remove(asyncId);\n          coreContainer.getZkController().clearAsyncId(asyncId);\n          NamedList<Object> successes = (NamedList<Object>) results.get(\"successes\");\n          if (successes == null) {\n            successes = new NamedList<>();\n            results.add(\"successes\", successes);\n          }\n          NamedList<Object> res = new NamedList<>();\n          res.add(\"status\", \"success\");\n          res.add(\"msg\", \"Assigned '\" + pair.getValue() + \"' to be leader\");\n          successes.add(asyncId.substring(REBALANCELEADERS.toLower().length()), res);\n          iter.remove();\n          foundChange = true;\n        }\n      }\n      // We're done if we're processing a few at a time or all requests are processed.\n      if ((foundChange && waitForAll == false) || currentAsyncIds.size() == 0) {\n        return true;\n      }\n      Thread.sleep(100); //TODO: Is there a better thing to do than sleep here?\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":5,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#waitAsyncRequests(int,Boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders#waitForLeaderChange(Map[String,String],int,Boolean,NamedList[Object]).mjava","sourceNew":"  private boolean waitAsyncRequests(final int maxWaitSecs, Boolean waitForAll)\n      throws KeeperException, InterruptedException {\n\n    if (asyncRequests.size() == 0) {\n      return true;\n    }\n\n    for (int idx = 0; idx < maxWaitSecs * 10; ++idx) {\n      Iterator<String> iter = asyncRequests.iterator();\n      boolean foundChange = false;\n      while (iter.hasNext()) {\n        String asyncId = iter.next();\n        if (coreContainer.getZkController().getOverseerFailureMap().contains(asyncId)) {\n          coreContainer.getZkController().getOverseerFailureMap().remove(asyncId);\n          coreContainer.getZkController().clearAsyncId(asyncId);\n          iter.remove();\n          foundChange = true;\n        } else if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId)) {\n          coreContainer.getZkController().getOverseerCompletedMap().remove(asyncId);\n          coreContainer.getZkController().clearAsyncId(asyncId);\n          iter.remove();\n          foundChange = true;\n        }\n      }\n      // We're done if we're processing a few at a time or all requests are processed.\n      // We don't want to change, say, 100s of leaders simultaneously. So if the request specifies some limit,\n      // and we're at that limit, we want to return to the caller so it can immediately add another request.\n      // That's the purpose of the first clause here. Otherwise, of course, just return if all requests are\n      // processed.\n      if ((foundChange && waitForAll == false) || asyncRequests.size() == 0) {\n        return true;\n      }\n      TimeUnit.MILLISECONDS.sleep(100);\n    }\n    // If we get here, we've timed out waiting.\n    return false;\n  }\n\n","sourceOld":"  // currentAsyncIds - map of request IDs and reporting data (value)\n  // maxWaitSecs - How long are we going to wait? Defaults to 30 seconds.\n  // waitForAll - if true, do not return until all assignments have been made.\n  // results - a place to stash results for reporting back to the user.\n  //\n  private boolean waitForLeaderChange(Map<String, String> currentAsyncIds, final int maxWaitSecs,\n                                      Boolean waitForAll, NamedList<Object> results)\n      throws KeeperException, InterruptedException {\n\n    if (currentAsyncIds.size() == 0) return true;\n\n    for (int idx = 0; idx < maxWaitSecs * 10; ++idx) {\n      Iterator<Map.Entry<String, String>> iter = currentAsyncIds.entrySet().iterator();\n      boolean foundChange = false;\n      while (iter.hasNext()) {\n        Map.Entry<String, String> pair = iter.next();\n        String asyncId = pair.getKey();\n        if (coreContainer.getZkController().getOverseerFailureMap().contains(asyncId)) {\n          coreContainer.getZkController().getOverseerFailureMap().remove(asyncId);\n          coreContainer.getZkController().clearAsyncId(asyncId);\n          NamedList<Object> fails = (NamedList<Object>) results.get(\"failures\");\n          if (fails == null) {\n            fails = new NamedList<>();\n            results.add(\"failures\", fails);\n          }\n          NamedList<Object> res = new NamedList<>();\n          res.add(\"status\", \"failed\");\n          res.add(\"msg\", \"Failed to assign '\" + pair.getValue() + \"' to be leader\");\n          fails.add(asyncId.substring(REBALANCELEADERS.toLower().length()), res);\n          iter.remove();\n          foundChange = true;\n        } else if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId)) {\n          coreContainer.getZkController().getOverseerCompletedMap().remove(asyncId);\n          coreContainer.getZkController().clearAsyncId(asyncId);\n          NamedList<Object> successes = (NamedList<Object>) results.get(\"successes\");\n          if (successes == null) {\n            successes = new NamedList<>();\n            results.add(\"successes\", successes);\n          }\n          NamedList<Object> res = new NamedList<>();\n          res.add(\"status\", \"success\");\n          res.add(\"msg\", \"Assigned '\" + pair.getValue() + \"' to be leader\");\n          successes.add(asyncId.substring(REBALANCELEADERS.toLower().length()), res);\n          iter.remove();\n          foundChange = true;\n        }\n      }\n      // We're done if we're processing a few at a time or all requests are processed.\n      if ((foundChange && waitForAll == false) || currentAsyncIds.size() == 0) {\n        return true;\n      }\n      Thread.sleep(100); //TODO: Is there a better thing to do than sleep here?\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd8a9ad1acc754f713e220250044c2bf06a22a0b":["9ebd3a557326ef3eab85b73a8cff781f7d801248"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["dd8a9ad1acc754f713e220250044c2bf06a22a0b","73fd358e8ec697393d56617f4d9cedaca74dca14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["dd8a9ad1acc754f713e220250044c2bf06a22a0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73fd358e8ec697393d56617f4d9cedaca74dca14"]},"commit2Childs":{"dd8a9ad1acc754f713e220250044c2bf06a22a0b":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","73fd358e8ec697393d56617f4d9cedaca74dca14"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ebd3a557326ef3eab85b73a8cff781f7d801248"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["dd8a9ad1acc754f713e220250044c2bf06a22a0b"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}