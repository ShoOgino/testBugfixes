{"path":"lucene/facet/src/java/org/apache/lucene/facet/collections/ObjectToIntMap#ObjectToIntMap(int).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/collections/ObjectToIntMap#ObjectToIntMap(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap#ObjectToIntMap(int).mjava","sourceNew":"  /**\n   * Constructs a map with given capacity. Capacity is adjusted to a native\n   * power of 2, with minimum of 16.\n   * \n   * @param capacity\n   *            minimum capacity for the map.\n   */\n  public ObjectToIntMap(int capacity) {\n    this.capacity = 16;\n    // Minimum capacity is 16..\n    while (this.capacity < capacity) {\n      // Multiply by 2 as long as we're still under the requested capacity\n      this.capacity <<= 1;\n    }\n\n    // As mentioned, we use the first index (0) as 'Ground', so we need the\n    // length of the arrays to be one more than the capacity\n    int arrayLength = this.capacity + 1;\n\n    this.values = new int[arrayLength];\n    this.keys = new Object[arrayLength];\n    this.next = new int[arrayLength];\n\n    // Hash entries are twice as big as the capacity.\n    int baseHashSize = this.capacity << 1;\n\n    this.baseHash = new int[baseHashSize];\n\n    // The has factor is 2^M - 1 which is used as an \"AND\" hashing operator.\n    // {@link #calcBaseHash()}\n    this.hashFactor = baseHashSize - 1;\n\n    this.size = 0;\n\n    clear();\n  }\n\n","sourceOld":"  /**\n   * Constructs a map with given capacity. Capacity is adjusted to a native\n   * power of 2, with minimum of 16.\n   * \n   * @param capacity\n   *            minimum capacity for the map.\n   */\n  public ObjectToIntMap(int capacity) {\n    this.capacity = 16;\n    // Minimum capacity is 16..\n    while (this.capacity < capacity) {\n      // Multiply by 2 as long as we're still under the requested capacity\n      this.capacity <<= 1;\n    }\n\n    // As mentioned, we use the first index (0) as 'Ground', so we need the\n    // length of the arrays to be one more than the capacity\n    int arrayLength = this.capacity + 1;\n\n    this.values = new int[arrayLength];\n    this.keys = new Object[arrayLength];\n    this.next = new int[arrayLength];\n\n    // Hash entries are twice as big as the capacity.\n    int baseHashSize = this.capacity << 1;\n\n    this.baseHash = new int[baseHashSize];\n\n    // The has factor is 2^M - 1 which is used as an \"AND\" hashing operator.\n    // {@link #calcBaseHash()}\n    this.hashFactor = baseHashSize - 1;\n\n    this.size = 0;\n\n    clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/collections/ObjectToIntMap#ObjectToIntMap(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructs a map with given capacity. Capacity is adjusted to a native\n   * power of 2, with minimum of 16.\n   * \n   * @param capacity\n   *            minimum capacity for the map.\n   */\n  public ObjectToIntMap(int capacity) {\n    this.capacity = 16;\n    // Minimum capacity is 16..\n    while (this.capacity < capacity) {\n      // Multiply by 2 as long as we're still under the requested capacity\n      this.capacity <<= 1;\n    }\n\n    // As mentioned, we use the first index (0) as 'Ground', so we need the\n    // length of the arrays to be one more than the capacity\n    int arrayLength = this.capacity + 1;\n\n    this.values = new int[arrayLength];\n    this.keys = new Object[arrayLength];\n    this.next = new int[arrayLength];\n\n    // Hash entries are twice as big as the capacity.\n    int baseHashSize = this.capacity << 1;\n\n    this.baseHash = new int[baseHashSize];\n\n    // The has factor is 2^M - 1 which is used as an \"AND\" hashing operator.\n    // {@link #calcBaseHash()}\n    this.hashFactor = baseHashSize - 1;\n\n    this.size = 0;\n\n    clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/collections/ObjectToIntMap#ObjectToIntMap(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructs a map with given capacity. Capacity is adjusted to a native\n   * power of 2, with minimum of 16.\n   * \n   * @param capacity\n   *            minimum capacity for the map.\n   */\n  public ObjectToIntMap(int capacity) {\n    this.capacity = 16;\n    // Minimum capacity is 16..\n    while (this.capacity < capacity) {\n      // Multiply by 2 as long as we're still under the requested capacity\n      this.capacity <<= 1;\n    }\n\n    // As mentioned, we use the first index (0) as 'Ground', so we need the\n    // length of the arrays to be one more than the capacity\n    int arrayLength = this.capacity + 1;\n\n    this.values = new int[arrayLength];\n    this.keys = new Object[arrayLength];\n    this.next = new int[arrayLength];\n\n    // Hash entries are twice as big as the capacity.\n    int baseHashSize = this.capacity << 1;\n\n    this.baseHash = new int[baseHashSize];\n\n    // The has factor is 2^M - 1 which is used as an \"AND\" hashing operator.\n    // {@link #calcBaseHash()}\n    this.hashFactor = baseHashSize - 1;\n\n    this.size = 0;\n\n    clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}