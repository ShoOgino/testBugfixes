{"path":"lucene/test-framework/src/java/org/apache/lucene/util/BaseBitSetTestCase#testClearRange().mjava","commits":[{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseBitSetTestCase#testClearRange().mjava","pathOld":"/dev/null","sourceNew":"  /** Test the {@link BitSet#clear(int,int)} method. */\n  public void testClearRange() throws IOException {\n    final int numBits = 1 + random().nextInt(100000);\n    for (float percentSet : new float[] {0, 0.01f, 0.1f, 0.5f, 0.9f, 0.99f, 1f}) {\n      BitSet set1 = new JavaUtilBitSet(randomSet(numBits, percentSet), numBits);\n      T set2 = copyOf(set1, numBits);\n      final int iters = 1 + random().nextInt(100);\n      for (int i = 0; i < iters; ++i) {\n        final int from = random().nextInt(numBits);\n        final int to = random().nextInt(numBits + 1);\n        set1.clear(from, to);\n        set2.clear(from, to);\n        assertEquals(set1, set2, numBits);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["71da933d30aea361ccc224d6544c451cbf49916d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseBitSetTestCase#testClearRange().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/BaseBitSetTestCase#testClearRange().mjava","sourceNew":"  /** Test the {@link BitSet#clear(int,int)} method. */\n  public void testClearRange() throws IOException {\n    final int numBits = 1 + random().nextInt(100000);\n    for (float percentSet : new float[] {0, 0.01f, 0.1f, 0.5f, 0.9f, 0.99f, 1f}) {\n      BitSet set1 = new JavaUtilBitSet(randomSet(numBits, percentSet), numBits);\n      T set2 = copyOf(set1, numBits);\n      final int iters = atLeast(10);\n      for (int i = 0; i < iters; ++i) {\n        final int from = random().nextInt(numBits);\n        final int to = random().nextInt(numBits + 1);\n        set1.clear(from, to);\n        set2.clear(from, to);\n        assertEquals(set1, set2, numBits);\n      }\n    }\n  }\n\n","sourceOld":"  /** Test the {@link BitSet#clear(int,int)} method. */\n  public void testClearRange() throws IOException {\n    final int numBits = 1 + random().nextInt(100000);\n    for (float percentSet : new float[] {0, 0.01f, 0.1f, 0.5f, 0.9f, 0.99f, 1f}) {\n      BitSet set1 = new JavaUtilBitSet(randomSet(numBits, percentSet), numBits);\n      T set2 = copyOf(set1, numBits);\n      final int iters = 1 + random().nextInt(100);\n      for (int i = 0; i < iters; ++i) {\n        final int from = random().nextInt(numBits);\n        final int to = random().nextInt(numBits + 1);\n        set1.clear(from, to);\n        set2.clear(from, to);\n        assertEquals(set1, set2, numBits);\n      }\n    }\n  }\n\n","bugFix":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"617d6d4150e0fb2acef8980ce51e3b8e628fb200","date":1580326292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseBitSetTestCase#testClearRange().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/BaseBitSetTestCase#testClearRange().mjava","sourceNew":"  /** Test the {@link BitSet#clear(int,int)} method. */\n  public void testClearRange() throws IOException {\n    Random random = random();\n    final int numBits = 1 + random.nextInt(100000);\n    for (float percentSet : new float[] {0, 0.01f, 0.1f, 0.5f, 0.9f, 0.99f, 1f}) {\n      BitSet set1 = new JavaUtilBitSet(randomSet(numBits, percentSet), numBits);\n      T set2 = copyOf(set1, numBits);\n      final int iters = atLeast(random, 10);\n      for (int i = 0; i < iters; ++i) {\n        final int from = random.nextInt(numBits);\n        final int to = random.nextInt(numBits + 1);\n        set1.clear(from, to);\n        set2.clear(from, to);\n        assertEquals(set1, set2, numBits);\n      }\n    }\n  }\n\n","sourceOld":"  /** Test the {@link BitSet#clear(int,int)} method. */\n  public void testClearRange() throws IOException {\n    final int numBits = 1 + random().nextInt(100000);\n    for (float percentSet : new float[] {0, 0.01f, 0.1f, 0.5f, 0.9f, 0.99f, 1f}) {\n      BitSet set1 = new JavaUtilBitSet(randomSet(numBits, percentSet), numBits);\n      T set2 = copyOf(set1, numBits);\n      final int iters = atLeast(10);\n      for (int i = 0; i < iters; ++i) {\n        final int from = random().nextInt(numBits);\n        final int to = random().nextInt(numBits + 1);\n        set1.clear(from, to);\n        set2.clear(from, to);\n        assertEquals(set1, set2, numBits);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["71da933d30aea361ccc224d6544c451cbf49916d"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"],"71da933d30aea361ccc224d6544c451cbf49916d":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["71da933d30aea361ccc224d6544c451cbf49916d"],"71da933d30aea361ccc224d6544c451cbf49916d":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}