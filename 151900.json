{"path":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","commits":[{"id":"587637d2d2a2c50503511d5b626fdc366b4fd3d4","date":1507632212,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFailedMove() throws Exception {\n    String coll = \"movereplicatest_failed_coll\";\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    Set<CollectionStateWatcher> watchers = new HashSet<>(accessor.getStateWatchers(coll));\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    cloudClient.request(create);\n\n    Replica replica = getRandomReplica(coll, cloudClient);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    // start moving\n    moveReplica.processAsync(\"001\", cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    Set<CollectionStateWatcher> newWatchers = new HashSet<>(accessor.getStateWatchers(coll));\n    for (Iterator<CollectionStateWatcher> it = newWatchers.iterator(); it.hasNext(); ) {\n      CollectionStateWatcher watcher = it.next();\n      if (watcher instanceof ReplaceNodeCmd.RecoveryWatcher) {\n        it.remove();\n      }\n    }\n    assertEquals(watchers, newWatchers);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","76f2f6f3c2e485c3114e415c8253c2e208c7f909","65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2bcfee499548996a6e5448bbf93b8f276d010270","date":1508336936,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","sourceNew":"  @Test\n  public void testFailedMove() throws Exception {\n    String coll = \"movereplicatest_failed_coll\";\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    Set<CollectionStateWatcher> watchers = new HashSet<>(accessor.getStateWatchers(coll));\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    cloudClient.request(create);\n\n    Replica replica = getRandomReplica(coll, cloudClient);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    // start moving\n    moveReplica.processAsync(\"001\", cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    Set<CollectionStateWatcher> newWatchers = new HashSet<>(accessor.getStateWatchers(coll));\n    assertEquals(watchers, newWatchers);\n  }\n\n","sourceOld":"  @Test\n  public void testFailedMove() throws Exception {\n    String coll = \"movereplicatest_failed_coll\";\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    Set<CollectionStateWatcher> watchers = new HashSet<>(accessor.getStateWatchers(coll));\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    cloudClient.request(create);\n\n    Replica replica = getRandomReplica(coll, cloudClient);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    // start moving\n    moveReplica.processAsync(\"001\", cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    Set<CollectionStateWatcher> newWatchers = new HashSet<>(accessor.getStateWatchers(coll));\n    for (Iterator<CollectionStateWatcher> it = newWatchers.iterator(); it.hasNext(); ) {\n      CollectionStateWatcher watcher = it.next();\n      if (watcher instanceof ReplaceNodeCmd.RecoveryWatcher) {\n        it.remove();\n      }\n    }\n    assertEquals(watchers, newWatchers);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0509730ae61bc3e3cf168e6ea74600163f67a3eb","date":1510654599,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  public void testFailedMove() throws Exception {\n    String coll = \"movereplicatest_failed_coll\";\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    Set<CollectionStateWatcher> watchers = new HashSet<>(accessor.getStateWatchers(coll));\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    Replica replica = getRandomReplica(coll, cloudClient);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    // start moving\n    moveReplica.processAsync(\"001\", cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    Set<CollectionStateWatcher> newWatchers = new HashSet<>(accessor.getStateWatchers(coll));\n    assertEquals(watchers, newWatchers);\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void testFailedMove() throws Exception {\n    String coll = \"movereplicatest_failed_coll\";\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    Set<CollectionStateWatcher> watchers = new HashSet<>(accessor.getStateWatchers(coll));\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    cloudClient.request(create);\n\n    Replica replica = getRandomReplica(coll, cloudClient);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    // start moving\n    moveReplica.processAsync(\"001\", cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    Set<CollectionStateWatcher> newWatchers = new HashSet<>(accessor.getStateWatchers(coll));\n    assertEquals(watchers, newWatchers);\n  }\n\n","bugFix":null,"bugIntro":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c","date":1512481565,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","sourceNew":" // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    Set<CollectionStateWatcher> watchers = new HashSet<>(accessor.getStateWatchers(coll));\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    Replica replica = getRandomReplica(coll, cloudClient);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    Set<CollectionStateWatcher> newWatchers = new HashSet<>(accessor.getStateWatchers(coll));\n    assertEquals(watchers, newWatchers);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  public void testFailedMove() throws Exception {\n    String coll = \"movereplicatest_failed_coll\";\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    Set<CollectionStateWatcher> watchers = new HashSet<>(accessor.getStateWatchers(coll));\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    Replica replica = getRandomReplica(coll, cloudClient);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    // start moving\n    moveReplica.processAsync(\"001\", cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    Set<CollectionStateWatcher> newWatchers = new HashSet<>(accessor.getStateWatchers(coll));\n    assertEquals(watchers, newWatchers);\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","bugFix":["587637d2d2a2c50503511d5b626fdc366b4fd3d4","0509730ae61bc3e3cf168e6ea74600163f67a3eb"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4624ee88a6e7d17a5e20658636e85fe945ca9968","date":1519418966,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","sourceNew":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    Set<CollectionStateWatcher> watchers = new HashSet<>(accessor.getStateWatchers(coll));\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    Replica replica = getRandomReplica(coll, cloudClient);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    Set<CollectionStateWatcher> newWatchers = new HashSet<>(accessor.getStateWatchers(coll));\n    assertEquals(watchers, newWatchers);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","sourceOld":" // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    Set<CollectionStateWatcher> watchers = new HashSet<>(accessor.getStateWatchers(coll));\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    Replica replica = getRandomReplica(coll, cloudClient);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    Set<CollectionStateWatcher> newWatchers = new HashSet<>(accessor.getStateWatchers(coll));\n    assertEquals(watchers, newWatchers);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bfcbdfe07d46da058707c12412aef939a5f2198","date":1521339918,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","sourceNew":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    Set<CollectionStateWatcher> watchers = new HashSet<>(accessor.getStateWatchers(coll));\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    Replica replica = getRandomReplica(coll, cloudClient);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    Set<CollectionStateWatcher> newWatchers = new HashSet<>(accessor.getStateWatchers(coll));\n    assertEquals(watchers, newWatchers);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","sourceOld":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    Set<CollectionStateWatcher> watchers = new HashSet<>(accessor.getStateWatchers(coll));\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    Replica replica = getRandomReplica(coll, cloudClient);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    Set<CollectionStateWatcher> newWatchers = new HashSet<>(accessor.getStateWatchers(coll));\n    assertEquals(watchers, newWatchers);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"203e3fcf513c02ee2c07015f2ce277e26dc60907","date":1521404157,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","sourceNew":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    Set<CollectionStateWatcher> watchers = new HashSet<>(accessor.getStateWatchers(coll));\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    Replica replica = getRandomReplica(coll, cloudClient);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    Set<CollectionStateWatcher> newWatchers = new HashSet<>(accessor.getStateWatchers(coll));\n    assertEquals(watchers, newWatchers);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","sourceOld":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    Set<CollectionStateWatcher> watchers = new HashSet<>(accessor.getStateWatchers(coll));\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    Replica replica = getRandomReplica(coll, cloudClient);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    Set<CollectionStateWatcher> newWatchers = new HashSet<>(accessor.getStateWatchers(coll));\n    assertEquals(watchers, newWatchers);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28ba172425e443e0f08a49de6d73586c418d7251","date":1523970991,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","sourceNew":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    Replica replica = getRandomReplica(coll, cloudClient);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","sourceOld":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    Set<CollectionStateWatcher> watchers = new HashSet<>(accessor.getStateWatchers(coll));\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    Replica replica = getRandomReplica(coll, cloudClient);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    Set<CollectionStateWatcher> newWatchers = new HashSet<>(accessor.getStateWatchers(coll));\n    assertEquals(watchers, newWatchers);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1c374690db69470f6aa4bffc43dcacf1f4e3e49","date":1529007399,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","sourceNew":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    Replica replica = getRandomReplica(coll, cloudClient);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","sourceOld":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    Replica replica = getRandomReplica(coll, cloudClient);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","sourceNew":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    Replica replica = getRandomReplica(coll, cloudClient);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","sourceOld":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    Replica replica = getRandomReplica(coll, cloudClient);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","sourceNew":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    Replica replica = getRandomReplica(coll, cloudClient);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","sourceOld":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    Replica replica = getRandomReplica(coll, cloudClient);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","date":1533256859,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","sourceNew":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    Replica replica = getRandomReplica(coll, cloudClient);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","sourceOld":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    Replica replica = getRandomReplica(coll, cloudClient);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cdc53359111a5e3782f56300070ab2878ec82cb9","date":1534542016,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","sourceNew":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  //17-Aug-2018 commented  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    Replica replica = getRandomReplica(coll, cloudClient);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","sourceOld":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    Replica replica = getRandomReplica(coll, cloudClient);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"346faa31ad3a1f8db6c1a33c5a703e0fa4826a94","date":1537439812,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","sourceNew":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  //17-Aug-2018 commented  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n\n    // don't kill overseer in this test\n    Replica replica;\n    int count = 10;\n    do {\n      replica = getRandomReplica(coll, cloudClient);\n    } while (!replica.getNodeName().equals(overseerLeader) && count-- > 0);\n    assertNotNull(\"could not find non-overseer replica???\", replica);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node) && !overseerLeader.equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","sourceOld":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  //17-Aug-2018 commented  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    Replica replica = getRandomReplica(coll, cloudClient);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","sourceNew":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  //17-Aug-2018 commented  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n\n    // don't kill overseer in this test\n    Replica replica;\n    int count = 10;\n    do {\n      replica = getRandomReplica(coll, cloudClient);\n    } while (!replica.getNodeName().equals(overseerLeader) && count-- > 0);\n    assertNotNull(\"could not find non-overseer replica???\", replica);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node) && !overseerLeader.equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","sourceOld":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  //17-Aug-2018 commented  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n\n    // don't kill overseer in this test\n    Replica replica;\n    int count = 10;\n    do {\n      replica = getRandomReplica(coll, cloudClient);\n    } while (!replica.getNodeName().equals(overseerLeader) && count-- > 0);\n    assertNotNull(\"could not find non-overseer replica???\", replica);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node) && !overseerLeader.equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","bugFix":["587637d2d2a2c50503511d5b626fdc366b4fd3d4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","sourceNew":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  //17-Aug-2018 commented  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n\n    // don't kill overseer in this test\n    Replica replica;\n    int count = 10;\n    do {\n      replica = getRandomReplica(coll, cloudClient);\n    } while (!replica.getNodeName().equals(overseerLeader) && count-- > 0);\n    assertNotNull(\"could not find non-overseer replica???\", replica);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node) && !overseerLeader.equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","sourceOld":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  //17-Aug-2018 commented  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n\n    // don't kill overseer in this test\n    Replica replica;\n    int count = 10;\n    do {\n      replica = getRandomReplica(coll, cloudClient);\n    } while (!replica.getNodeName().equals(overseerLeader) && count-- > 0);\n    assertNotNull(\"could not find non-overseer replica???\", replica);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node) && !overseerLeader.equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5c929d2716fa79d443b93a82adb1da5b578ebd8","date":1550428858,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","sourceNew":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  //17-Aug-2018 commented  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n\n    // don't kill overseer in this test\n    Replica replica;\n    int count = 10;\n    do {\n      replica = getRandomReplica(coll, cloudClient);\n    } while (!replica.getNodeName().equals(overseerLeader) && count-- > 0);\n    assertNotNull(\"could not find non-overseer replica???\", replica);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node) && !overseerLeader.equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","sourceOld":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  //17-Aug-2018 commented  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n\n    // don't kill overseer in this test\n    Replica replica;\n    int count = 10;\n    do {\n      replica = getRandomReplica(coll, cloudClient);\n    } while (!replica.getNodeName().equals(overseerLeader) && count-- > 0);\n    assertNotNull(\"could not find non-overseer replica???\", replica);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node) && !overseerLeader.equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"76f2f6f3c2e485c3114e415c8253c2e208c7f909","date":1551210527,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","sourceNew":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  //17-Aug-2018 commented  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n\n    // don't kill overseer in this test\n    Replica replica;\n    int count = 10;\n    do {\n      replica = getRandomReplica(coll, cloudClient);\n    } while (!replica.getNodeName().equals(overseerLeader) && count-- > 0);\n    assertNotNull(\"could not find non-overseer replica???\", replica);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node) && !overseerLeader.equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertNotSame(rsp.getRequestStatus().toString(), rsp.getRequestStatus(), RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","sourceOld":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  //17-Aug-2018 commented  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n\n    // don't kill overseer in this test\n    Replica replica;\n    int count = 10;\n    do {\n      replica = getRandomReplica(coll, cloudClient);\n    } while (!replica.getNodeName().equals(overseerLeader) && count-- > 0);\n    assertNotNull(\"could not find non-overseer replica???\", replica);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node) && !overseerLeader.equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","bugFix":["587637d2d2a2c50503511d5b626fdc366b4fd3d4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"accbc347dd28993a84ae51e9e6f01e31a26a7184","date":1551252530,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","sourceNew":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  //17-Aug-2018 commented  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n\n    // don't kill overseer in this test\n    Replica replica;\n    int count = 10;\n    do {\n      replica = getRandomReplica(coll, cloudClient);\n    } while (!replica.getNodeName().equals(overseerLeader) && count-- > 0);\n    assertNotNull(\"could not find non-overseer replica???\", replica);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node) && !overseerLeader.equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertNotSame(rsp.getRequestStatus().toString(), rsp.getRequestStatus(), RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","sourceOld":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  //17-Aug-2018 commented  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n\n    // don't kill overseer in this test\n    Replica replica;\n    int count = 10;\n    do {\n      replica = getRandomReplica(coll, cloudClient);\n    } while (!replica.getNodeName().equals(overseerLeader) && count-- > 0);\n    assertNotNull(\"could not find non-overseer replica???\", replica);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node) && !overseerLeader.equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertTrue(rsp.getRequestStatus().toString(), rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13566d7393ca95d9897baf67f5e9c87dca82a253","date":1571390317,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","sourceNew":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  //17-Aug-2018 commented  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    // random create tlog or pull type replicas with nrt\n    boolean isTlog = random().nextBoolean();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, 1, isTlog ? 1 : 0, !isTlog ? 1 : 0);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n\n    // don't kill overseer in this test\n    Replica replica;\n    int count = 10;\n    do {\n      replica = getRandomReplica(coll, cloudClient);\n    } while (!replica.getNodeName().equals(overseerLeader) && count-- > 0);\n    assertNotNull(\"could not find non-overseer replica???\", replica);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node) && !overseerLeader.equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertNotSame(rsp.getRequestStatus().toString(), rsp.getRequestStatus(), RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","sourceOld":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  //17-Aug-2018 commented  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, REPLICATION);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n\n    // don't kill overseer in this test\n    Replica replica;\n    int count = 10;\n    do {\n      replica = getRandomReplica(coll, cloudClient);\n    } while (!replica.getNodeName().equals(overseerLeader) && count-- > 0);\n    assertNotNull(\"could not find non-overseer replica???\", replica);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node) && !overseerLeader.equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertNotSame(rsp.getRequestStatus().toString(), rsp.getRequestStatus(), RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","sourceNew":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  //17-Aug-2018 commented  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    // random create tlog or pull type replicas with nrt\n    boolean isTlog = random().nextBoolean();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, 1, isTlog ? 1 : 0, !isTlog ? 1 : 0);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n\n    // don't kill overseer in this test\n    Replica replica;\n    int count = 10;\n    do {\n      replica = getRandomReplica(coll, cloudClient);\n    } while (!replica.getNodeName().equals(overseerLeader) && count-- > 0);\n    assertNotNull(\"could not find non-overseer replica???\", replica);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node) && !overseerLeader.equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertNotSame(rsp.getRequestStatus().toString(), rsp.getRequestStatus(), RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"--- current collection state: {}\", cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    }\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","sourceOld":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  //17-Aug-2018 commented  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    // random create tlog or pull type replicas with nrt\n    boolean isTlog = random().nextBoolean();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, 1, isTlog ? 1 : 0, !isTlog ? 1 : 0);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n\n    // don't kill overseer in this test\n    Replica replica;\n    int count = 10;\n    do {\n      replica = getRandomReplica(coll, cloudClient);\n    } while (!replica.getNodeName().equals(overseerLeader) && count-- > 0);\n    assertNotNull(\"could not find non-overseer replica???\", replica);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node) && !overseerLeader.equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertNotSame(rsp.getRequestStatus().toString(), rsp.getRequestStatus(), RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    log.info(\"--- current collection state: \" + cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#testFailedMove().mjava","sourceNew":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  //17-Aug-2018 commented  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    // random create tlog or pull type replicas with nrt\n    boolean isTlog = random().nextBoolean();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, 1, isTlog ? 1 : 0, !isTlog ? 1 : 0);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n\n    // don't kill overseer in this test\n    Replica replica;\n    int count = 10;\n    do {\n      replica = getRandomReplica(coll, cloudClient);\n    } while (!replica.getNodeName().equals(overseerLeader) && count-- > 0);\n    assertNotNull(\"could not find non-overseer replica???\", replica);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node) && !overseerLeader.equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertNotSame(rsp.getRequestStatus().toString(), rsp.getRequestStatus(), RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"--- current collection state: {}\", cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    }\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","sourceOld":"  //Commented out 5-Dec-2017\n  // @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11458\")\n  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018 This JIRA is fixed, but this test still fails\n  //17-Aug-2018 commented  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testFailedMove() throws Exception {\n    String coll = getTestClass().getSimpleName() + \"_failed_coll_\" + inPlaceMove;\n    int REPLICATION = 2;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    // random create tlog or pull type replicas with nrt\n    boolean isTlog = random().nextBoolean();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 2, 1, isTlog ? 1 : 0, !isTlog ? 1 : 0);\n    create.setAutoAddReplicas(false);\n    cloudClient.request(create);\n\n    addDocs(coll, 100);\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n\n    // don't kill overseer in this test\n    Replica replica;\n    int count = 10;\n    do {\n      replica = getRandomReplica(coll, cloudClient);\n    } while (!replica.getNodeName().equals(overseerLeader) && count-- > 0);\n    assertNotNull(\"could not find non-overseer replica???\", replica);\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String targetNode = null;\n    for (String node : liveNodes) {\n      if (!replica.getNodeName().equals(node) && !overseerLeader.equals(node)) {\n        targetNode = node;\n        break;\n      }\n    }\n    assertNotNull(targetNode);\n    CollectionAdminRequest.MoveReplica moveReplica = createMoveReplicaRequest(coll, replica, targetNode);\n    moveReplica.setInPlaceMove(inPlaceMove);\n    // start moving\n    String asyncId = IdUtils.randomId();\n    moveReplica.processAsync(asyncId, cloudClient);\n    // shut down target node\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(targetNode)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(asyncId);\n    // wait for async request success\n    boolean success = true;\n    for (int i = 0; i < 200; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      assertNotSame(rsp.getRequestStatus().toString(), rsp.getRequestStatus(), RequestStatusState.COMPLETED);\n      if (rsp.getRequestStatus() == RequestStatusState.FAILED) {\n        success = false;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    assertFalse(success);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"--- current collection state: {}\", cloudClient.getZkStateReader().getClusterState().getCollection(coll));\n    }\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"0509730ae61bc3e3cf168e6ea74600163f67a3eb":["2bcfee499548996a6e5448bbf93b8f276d010270"],"2bcfee499548996a6e5448bbf93b8f276d010270":["587637d2d2a2c50503511d5b626fdc366b4fd3d4"],"3f504512a03d978990cbff30db0522b354e846db":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["346faa31ad3a1f8db6c1a33c5a703e0fa4826a94"],"cdc53359111a5e3782f56300070ab2878ec82cb9":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["4624ee88a6e7d17a5e20658636e85fe945ca9968","0bfcbdfe07d46da058707c12412aef939a5f2198"],"346faa31ad3a1f8db6c1a33c5a703e0fa4826a94":["cdc53359111a5e3782f56300070ab2878ec82cb9"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["13566d7393ca95d9897baf67f5e9c87dca82a253"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"13566d7393ca95d9897baf67f5e9c87dca82a253":["accbc347dd28993a84ae51e9e6f01e31a26a7184"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["28ba172425e443e0f08a49de6d73586c418d7251","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"76f2f6f3c2e485c3114e415c8253c2e208c7f909":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0bfcbdfe07d46da058707c12412aef939a5f2198":["4624ee88a6e7d17a5e20658636e85fe945ca9968"],"587637d2d2a2c50503511d5b626fdc366b4fd3d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4624ee88a6e7d17a5e20658636e85fe945ca9968":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"28ba172425e443e0f08a49de6d73586c418d7251":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c":["0509730ae61bc3e3cf168e6ea74600163f67a3eb"],"accbc347dd28993a84ae51e9e6f01e31a26a7184":["b5c929d2716fa79d443b93a82adb1da5b578ebd8","76f2f6f3c2e485c3114e415c8253c2e208c7f909"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["28ba172425e443e0f08a49de6d73586c418d7251"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["28ba172425e443e0f08a49de6d73586c418d7251","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"]},"commit2Childs":{"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["cdc53359111a5e3782f56300070ab2878ec82cb9"],"0509730ae61bc3e3cf168e6ea74600163f67a3eb":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"2bcfee499548996a6e5448bbf93b8f276d010270":["0509730ae61bc3e3cf168e6ea74600163f67a3eb"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"cdc53359111a5e3782f56300070ab2878ec82cb9":["346faa31ad3a1f8db6c1a33c5a703e0fa4826a94"],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["76f2f6f3c2e485c3114e415c8253c2e208c7f909","accbc347dd28993a84ae51e9e6f01e31a26a7184"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["28ba172425e443e0f08a49de6d73586c418d7251"],"346faa31ad3a1f8db6c1a33c5a703e0fa4826a94":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["3f504512a03d978990cbff30db0522b354e846db"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"13566d7393ca95d9897baf67f5e9c87dca82a253":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"76f2f6f3c2e485c3114e415c8253c2e208c7f909":["accbc347dd28993a84ae51e9e6f01e31a26a7184"],"0bfcbdfe07d46da058707c12412aef939a5f2198":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["587637d2d2a2c50503511d5b626fdc366b4fd3d4"],"587637d2d2a2c50503511d5b626fdc366b4fd3d4":["2bcfee499548996a6e5448bbf93b8f276d010270"],"4624ee88a6e7d17a5e20658636e85fe945ca9968":["203e3fcf513c02ee2c07015f2ce277e26dc60907","0bfcbdfe07d46da058707c12412aef939a5f2198"],"28ba172425e443e0f08a49de6d73586c418d7251":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a1c374690db69470f6aa4bffc43dcacf1f4e3e49","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"accbc347dd28993a84ae51e9e6f01e31a26a7184":["13566d7393ca95d9897baf67f5e9c87dca82a253"],"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c":["4624ee88a6e7d17a5e20658636e85fe945ca9968"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}