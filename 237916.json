{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/SidedPlane#constructNormalizedPerpendicularSidedPlane(Vector,Vector,Vector,Vector).mjava","commits":[{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/SidedPlane#constructNormalizedPerpendicularSidedPlane(Vector,Vector,Vector,Vector).mjava","pathOld":"/dev/null","sourceNew":"  /** Construct a sided plane from two points and a third normal vector.\n   */\n  public static SidedPlane constructNormalizedPerpendicularSidedPlane(final Vector insidePoint,\n    final Vector normalVector, final Vector point1, final Vector point2) {\n    final Vector pointsVector = new Vector(point1.x - point2.x, point1.y - point2.y, point1.z - point2.z);\n    final Vector newNormalVector = new Vector(normalVector, pointsVector).normalize();\n    // To construct the plane, we now just need D, which is simply the negative of the evaluation of the circle normal vector at one of the points.\n    return new SidedPlane(insidePoint, newNormalVector, -newNormalVector.dotProduct(point1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9908748d960ccb7706a20e81289a656237780b6c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/SidedPlane#constructNormalizedPerpendicularSidedPlane(Vector,Vector,Vector,Vector).mjava","pathOld":"/dev/null","sourceNew":"  /** Construct a sided plane from two points and a third normal vector.\n   */\n  public static SidedPlane constructNormalizedPerpendicularSidedPlane(final Vector insidePoint,\n    final Vector normalVector, final Vector point1, final Vector point2) {\n    final Vector pointsVector = new Vector(point1.x - point2.x, point1.y - point2.y, point1.z - point2.z);\n    final Vector newNormalVector = new Vector(normalVector, pointsVector).normalize();\n    // To construct the plane, we now just need D, which is simply the negative of the evaluation of the circle normal vector at one of the points.\n    return new SidedPlane(insidePoint, newNormalVector, -newNormalVector.dotProduct(point1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"535df84251be5af3be84d750beba0021aff9132d","date":1434649368,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/SidedPlane#constructNormalizedPerpendicularSidedPlane(Vector,Vector,Vector,Vector).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/SidedPlane#constructNormalizedPerpendicularSidedPlane(Vector,Vector,Vector,Vector).mjava","sourceNew":"  /** Construct a sided plane from two points and a third normal vector.\n   */\n  public static SidedPlane constructNormalizedPerpendicularSidedPlane(final Vector insidePoint,\n    final Vector normalVector, final Vector point1, final Vector point2) {\n    final Vector pointsVector = new Vector(point1.x - point2.x, point1.y - point2.y, point1.z - point2.z);\n    final Vector newNormalVector = new Vector(normalVector, pointsVector).normalize();\n    if (newNormalVector == null)\n      return null;\n    // To construct the plane, we now just need D, which is simply the negative of the evaluation of the circle normal vector at one of the points.\n    return new SidedPlane(insidePoint, newNormalVector, -newNormalVector.dotProduct(point1));\n  }\n\n","sourceOld":"  /** Construct a sided plane from two points and a third normal vector.\n   */\n  public static SidedPlane constructNormalizedPerpendicularSidedPlane(final Vector insidePoint,\n    final Vector normalVector, final Vector point1, final Vector point2) {\n    final Vector pointsVector = new Vector(point1.x - point2.x, point1.y - point2.y, point1.z - point2.z);\n    final Vector newNormalVector = new Vector(normalVector, pointsVector).normalize();\n    // To construct the plane, we now just need D, which is simply the negative of the evaluation of the circle normal vector at one of the points.\n    return new SidedPlane(insidePoint, newNormalVector, -newNormalVector.dotProduct(point1));\n  }\n\n","bugFix":null,"bugIntro":["9908748d960ccb7706a20e81289a656237780b6c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9908748d960ccb7706a20e81289a656237780b6c","date":1435716223,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/SidedPlane#constructNormalizedPerpendicularSidedPlane(Vector,Vector,Vector,Vector).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/SidedPlane#constructNormalizedPerpendicularSidedPlane(Vector,Vector,Vector,Vector).mjava","sourceNew":"  /** Construct a sided plane from two points and a third normal vector.\n   */\n  public static SidedPlane constructNormalizedPerpendicularSidedPlane(final Vector insidePoint,\n    final Vector normalVector, final Vector point1, final Vector point2) {\n    final Vector pointsVector = new Vector(point1.x - point2.x, point1.y - point2.y, point1.z - point2.z);\n    final Vector newNormalVector = new Vector(normalVector, pointsVector);\n    try {\n      // To construct the plane, we now just need D, which is simply the negative of the evaluation of the circle normal vector at one of the points.\n      return new SidedPlane(insidePoint, newNormalVector, -newNormalVector.dotProduct(point1));\n    } catch (IllegalArgumentException e) {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Construct a sided plane from two points and a third normal vector.\n   */\n  public static SidedPlane constructNormalizedPerpendicularSidedPlane(final Vector insidePoint,\n    final Vector normalVector, final Vector point1, final Vector point2) {\n    final Vector pointsVector = new Vector(point1.x - point2.x, point1.y - point2.y, point1.z - point2.z);\n    final Vector newNormalVector = new Vector(normalVector, pointsVector).normalize();\n    if (newNormalVector == null)\n      return null;\n    // To construct the plane, we now just need D, which is simply the negative of the evaluation of the circle normal vector at one of the points.\n    return new SidedPlane(insidePoint, newNormalVector, -newNormalVector.dotProduct(point1));\n  }\n\n","bugFix":["f9f97ca977ad649f14b4f60a888adef2edd7a64e","535df84251be5af3be84d750beba0021aff9132d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/SidedPlane#constructNormalizedPerpendicularSidedPlane(Vector,Vector,Vector,Vector).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/SidedPlane#constructNormalizedPerpendicularSidedPlane(Vector,Vector,Vector,Vector).mjava","sourceNew":"  /** Construct a sided plane from two points and a third normal vector.\n   */\n  public static SidedPlane constructNormalizedPerpendicularSidedPlane(final Vector insidePoint,\n    final Vector normalVector, final Vector point1, final Vector point2) {\n    final Vector pointsVector = new Vector(point1.x - point2.x, point1.y - point2.y, point1.z - point2.z);\n    final Vector newNormalVector = new Vector(normalVector, pointsVector);\n    try {\n      // To construct the plane, we now just need D, which is simply the negative of the evaluation of the circle normal vector at one of the points.\n      return new SidedPlane(insidePoint, newNormalVector, -newNormalVector.dotProduct(point1));\n    } catch (IllegalArgumentException e) {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Construct a sided plane from two points and a third normal vector.\n   */\n  public static SidedPlane constructNormalizedPerpendicularSidedPlane(final Vector insidePoint,\n    final Vector normalVector, final Vector point1, final Vector point2) {\n    final Vector pointsVector = new Vector(point1.x - point2.x, point1.y - point2.y, point1.z - point2.z);\n    final Vector newNormalVector = new Vector(normalVector, pointsVector);\n    try {\n      // To construct the plane, we now just need D, which is simply the negative of the evaluation of the circle normal vector at one of the points.\n      return new SidedPlane(insidePoint, newNormalVector, -newNormalVector.dotProduct(point1));\n    } catch (IllegalArgumentException e) {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["9908748d960ccb7706a20e81289a656237780b6c"],"535df84251be5af3be84d750beba0021aff9132d":["fec06d6753751ae302c7d35866763e6cb414112d"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9908748d960ccb7706a20e81289a656237780b6c":["535df84251be5af3be84d750beba0021aff9132d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"fec06d6753751ae302c7d35866763e6cb414112d":["535df84251be5af3be84d750beba0021aff9132d"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"535df84251be5af3be84d750beba0021aff9132d":["9908748d960ccb7706a20e81289a656237780b6c"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"9908748d960ccb7706a20e81289a656237780b6c":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}