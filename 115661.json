{"path":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#startNode(int,int,Path,boolean,long).mjava","commits":[{"id":"1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9","date":1453892412,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#startNode(int,int,Path,boolean,long).mjava","pathOld":"/dev/null","sourceNew":"  /** Launches a child \"server\" (separate JVM), which is either primary or replica node */\n  NodeProcess startNode(int primaryTCPPort, final int id, Path indexPath, boolean isPrimary, long forcePrimaryVersion) throws IOException {\n    List<String> cmd = new ArrayList<>();\n\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n\n    if (primaryTCPPort != -1) {\n      cmd.add(\"-Dtests.nrtreplication.primaryTCPPort=\" + primaryTCPPort);\n    } else if (isPrimary == false) {\n      // We cannot start a replica when there is no primary:\n      return null;\n    }\n    cmd.add(\"-Dtests.nrtreplication.closeorcrash=false\");\n\n    cmd.add(\"-Dtests.nrtreplication.node=true\");\n    cmd.add(\"-Dtests.nrtreplication.nodeid=\" + id);\n    cmd.add(\"-Dtests.nrtreplication.startNS=\" + Node.globalStartNS);\n    cmd.add(\"-Dtests.nrtreplication.indexpath=\" + indexPath);\n    if (isPrimary) {\n      cmd.add(\"-Dtests.nrtreplication.isPrimary=true\");\n      cmd.add(\"-Dtests.nrtreplication.forcePrimaryVersion=\" + forcePrimaryVersion);\n    }\n\n    long myPrimaryGen = 0;\n    cmd.add(\"-Dtests.nrtreplication.primaryGen=\" + myPrimaryGen);\n\n    // Mixin our own counter because this is called from a fresh thread which means the seed otherwise isn't changing each time we spawn a\n    // new node:\n    long seed = random().nextLong() * nodeStartCounter.incrementAndGet();\n\n    cmd.add(\"-Dtests.seed=\" + SeedUtils.formatSeed(seed));\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName().replace(getClass().getSimpleName(), \"SimpleServer\"));\n\n    message(\"child process command: \" + cmd);\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.redirectErrorStream(true);\n\n    // Important, so that the scary looking hs_err_<pid>.log appear under our test temp dir:\n    pb.directory(childTempDir.toFile());\n\n    Process p = pb.start();\n\n    BufferedReader r;\n    try {\n      r = new BufferedReader(new InputStreamReader(p.getInputStream(), IOUtils.UTF_8));\n    } catch (UnsupportedEncodingException uee) {\n      throw new RuntimeException(uee);\n    }\n\n    int tcpPort = -1;\n    long initCommitVersion = -1;\n    long initInfosVersion = -1;\n    Pattern logTimeStart = Pattern.compile(\"^[0-9\\\\.]+s .*\");\n    boolean willCrash = false;\n    boolean sawExistingSegmentsFile = false;\n\n    while (true) {\n      String l = r.readLine();\n      if (l == null) {\n        message(\"top: node=\" + id + \" failed to start\");\n        try {\n          p.waitFor();\n        } catch (InterruptedException ie) {\n          throw new RuntimeException(ie);\n        }\n        message(\"exit value=\" + p.exitValue());\n        message(\"top: now fail test replica R\" + id + \" failed to start\");\n        throw new RuntimeException(\"replica R\" + id + \" failed to start\");\n      }\n\n      if (logTimeStart.matcher(l).matches()) {\n        // Already a well-formed log output:\n        System.out.println(l);\n      } else {\n        message(l);\n      }\n\n      if (l.startsWith(\"PORT: \")) {\n        tcpPort = Integer.parseInt(l.substring(6).trim());\n      } else if (l.startsWith(\"COMMIT VERSION: \")) {\n        initCommitVersion = Integer.parseInt(l.substring(16).trim());\n      } else if (l.startsWith(\"INFOS VERSION: \")) {\n        initInfosVersion = Integer.parseInt(l.substring(15).trim());\n      } else if (l.contains(\"will crash after\")) {\n        willCrash = true;\n      } else if (l.startsWith(\"NODE STARTED\")) {\n        break;\n      } else if (l.contains(\"replica cannot start: existing segments file=\")) {\n        sawExistingSegmentsFile = true;\n      }\n    }\n\n    final boolean finalWillCrash = willCrash;\n\n    // Baby sits the child process, pulling its stdout and printing to our stdout:\n    Thread pumper = ThreadPumper.start(\n                                       new Runnable() {\n                                         @Override\n                                         public void run() {\n                                           message(\"now wait for process \" + p);\n                                           try {\n                                             p.waitFor();\n                                           } catch (Throwable t) {\n                                             throw new RuntimeException(t);\n                                           }\n\n                                           message(\"done wait for process \" + p);\n                                           int exitValue = p.exitValue();\n                                           message(\"exit value=\" + exitValue + \" willCrash=\" + finalWillCrash);\n                                           if (exitValue != 0) {\n                                             // should fail test\n                                             throw new RuntimeException(\"node \" + id + \" process had unexpected non-zero exit status=\" + exitValue);\n                                           }\n                                         }\n                                       }, r, System.out, null);\n    pumper.setName(\"pump\" + id);\n\n    message(\"top: node=\" + id + \" started at tcpPort=\" + tcpPort + \" initCommitVersion=\" + initCommitVersion + \" initInfosVersion=\" + initInfosVersion);\n    return new NodeProcess(p, id, tcpPort, pumper, isPrimary, initCommitVersion, initInfosVersion);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1e1d986de0b8b6b1d3a9e5c6eb3963452cbc8c4","date":1454411794,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#startNode(int,int,Path,boolean,long).mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#startNode(int,int,Path,boolean,long).mjava","sourceNew":"  /** Launches a child \"server\" (separate JVM), which is either primary or replica node */\n  NodeProcess startNode(int primaryTCPPort, final int id, Path indexPath, boolean isPrimary, long forcePrimaryVersion) throws IOException {\n    List<String> cmd = new ArrayList<>();\n\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n\n    if (primaryTCPPort != -1) {\n      cmd.add(\"-Dtests.nrtreplication.primaryTCPPort=\" + primaryTCPPort);\n    } else if (isPrimary == false) {\n      // We cannot start a replica when there is no primary:\n      return null;\n    }\n    cmd.add(\"-Dtests.nrtreplication.closeorcrash=false\");\n\n    cmd.add(\"-Dtests.nrtreplication.node=true\");\n    cmd.add(\"-Dtests.nrtreplication.nodeid=\" + id);\n    cmd.add(\"-Dtests.nrtreplication.startNS=\" + Node.globalStartNS);\n    cmd.add(\"-Dtests.nrtreplication.indexpath=\" + indexPath);\n    if (isPrimary) {\n      cmd.add(\"-Dtests.nrtreplication.isPrimary=true\");\n      cmd.add(\"-Dtests.nrtreplication.forcePrimaryVersion=\" + forcePrimaryVersion);\n    }\n\n    long myPrimaryGen = 0;\n    cmd.add(\"-Dtests.nrtreplication.primaryGen=\" + myPrimaryGen);\n\n    // Mixin our own counter because this is called from a fresh thread which means the seed otherwise isn't changing each time we spawn a\n    // new node:\n    long seed = random().nextLong() * nodeStartCounter.incrementAndGet();\n\n    cmd.add(\"-Dtests.seed=\" + SeedUtils.formatSeed(seed));\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName().replace(getClass().getSimpleName(), \"SimpleServer\"));\n\n    message(\"child process command: \" + cmd);\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.redirectErrorStream(true);\n\n    // Important, so that the scary looking hs_err_<pid>.log appear under our test temp dir:\n    pb.directory(childTempDir.toFile());\n\n    Process p = pb.start();\n\n    BufferedReader r;\n    try {\n      r = new BufferedReader(new InputStreamReader(p.getInputStream(), IOUtils.UTF_8));\n    } catch (UnsupportedEncodingException uee) {\n      throw new RuntimeException(uee);\n    }\n\n    int tcpPort = -1;\n    long initCommitVersion = -1;\n    long initInfosVersion = -1;\n    Pattern logTimeStart = Pattern.compile(\"^[0-9\\\\.]+s .*\");\n    boolean willCrash = false;\n    boolean sawExistingSegmentsFile = false;\n\n    while (true) {\n      String l = r.readLine();\n      if (l == null) {\n        message(\"top: node=\" + id + \" failed to start\");\n        try {\n          p.waitFor();\n        } catch (InterruptedException ie) {\n          throw new RuntimeException(ie);\n        }\n        message(\"exit value=\" + p.exitValue());\n        message(\"top: now fail test replica R\" + id + \" failed to start\");\n        throw new RuntimeException(\"replica R\" + id + \" failed to start\");\n      }\n\n      if (logTimeStart.matcher(l).matches()) {\n        // Already a well-formed log output:\n        System.out.println(l);\n      } else {\n        message(l);\n      }\n\n      if (l.startsWith(\"PORT: \")) {\n        tcpPort = Integer.parseInt(l.substring(6).trim());\n      } else if (l.startsWith(\"COMMIT VERSION: \")) {\n        initCommitVersion = Integer.parseInt(l.substring(16).trim());\n      } else if (l.startsWith(\"INFOS VERSION: \")) {\n        initInfosVersion = Integer.parseInt(l.substring(15).trim());\n      } else if (l.contains(\"will crash after\")) {\n        willCrash = true;\n      } else if (l.startsWith(\"NODE STARTED\")) {\n        break;\n      } else if (l.contains(\"replica cannot start: existing segments file=\")) {\n        sawExistingSegmentsFile = true;\n      }\n    }\n\n    final boolean finalWillCrash = willCrash;\n\n    // Baby sits the child process, pulling its stdout and printing to our stdout:\n    AtomicBoolean nodeClosing = new AtomicBoolean();\n    Thread pumper = ThreadPumper.start(\n                                       new Runnable() {\n                                         @Override\n                                         public void run() {\n                                           message(\"now wait for process \" + p);\n                                           try {\n                                             p.waitFor();\n                                           } catch (Throwable t) {\n                                             throw new RuntimeException(t);\n                                           }\n\n                                           message(\"done wait for process \" + p);\n                                           int exitValue = p.exitValue();\n                                           message(\"exit value=\" + exitValue + \" willCrash=\" + finalWillCrash);\n                                           if (exitValue != 0) {\n                                             // should fail test\n                                             throw new RuntimeException(\"node \" + id + \" process had unexpected non-zero exit status=\" + exitValue);\n                                           }\n                                         }\n                                       }, r, System.out, null, nodeClosing);\n    pumper.setName(\"pump\" + id);\n\n    message(\"top: node=\" + id + \" started at tcpPort=\" + tcpPort + \" initCommitVersion=\" + initCommitVersion + \" initInfosVersion=\" + initInfosVersion);\n    return new NodeProcess(p, id, tcpPort, pumper, isPrimary, initCommitVersion, initInfosVersion, nodeClosing);\n  }\n\n","sourceOld":"  /** Launches a child \"server\" (separate JVM), which is either primary or replica node */\n  NodeProcess startNode(int primaryTCPPort, final int id, Path indexPath, boolean isPrimary, long forcePrimaryVersion) throws IOException {\n    List<String> cmd = new ArrayList<>();\n\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n\n    if (primaryTCPPort != -1) {\n      cmd.add(\"-Dtests.nrtreplication.primaryTCPPort=\" + primaryTCPPort);\n    } else if (isPrimary == false) {\n      // We cannot start a replica when there is no primary:\n      return null;\n    }\n    cmd.add(\"-Dtests.nrtreplication.closeorcrash=false\");\n\n    cmd.add(\"-Dtests.nrtreplication.node=true\");\n    cmd.add(\"-Dtests.nrtreplication.nodeid=\" + id);\n    cmd.add(\"-Dtests.nrtreplication.startNS=\" + Node.globalStartNS);\n    cmd.add(\"-Dtests.nrtreplication.indexpath=\" + indexPath);\n    if (isPrimary) {\n      cmd.add(\"-Dtests.nrtreplication.isPrimary=true\");\n      cmd.add(\"-Dtests.nrtreplication.forcePrimaryVersion=\" + forcePrimaryVersion);\n    }\n\n    long myPrimaryGen = 0;\n    cmd.add(\"-Dtests.nrtreplication.primaryGen=\" + myPrimaryGen);\n\n    // Mixin our own counter because this is called from a fresh thread which means the seed otherwise isn't changing each time we spawn a\n    // new node:\n    long seed = random().nextLong() * nodeStartCounter.incrementAndGet();\n\n    cmd.add(\"-Dtests.seed=\" + SeedUtils.formatSeed(seed));\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName().replace(getClass().getSimpleName(), \"SimpleServer\"));\n\n    message(\"child process command: \" + cmd);\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.redirectErrorStream(true);\n\n    // Important, so that the scary looking hs_err_<pid>.log appear under our test temp dir:\n    pb.directory(childTempDir.toFile());\n\n    Process p = pb.start();\n\n    BufferedReader r;\n    try {\n      r = new BufferedReader(new InputStreamReader(p.getInputStream(), IOUtils.UTF_8));\n    } catch (UnsupportedEncodingException uee) {\n      throw new RuntimeException(uee);\n    }\n\n    int tcpPort = -1;\n    long initCommitVersion = -1;\n    long initInfosVersion = -1;\n    Pattern logTimeStart = Pattern.compile(\"^[0-9\\\\.]+s .*\");\n    boolean willCrash = false;\n    boolean sawExistingSegmentsFile = false;\n\n    while (true) {\n      String l = r.readLine();\n      if (l == null) {\n        message(\"top: node=\" + id + \" failed to start\");\n        try {\n          p.waitFor();\n        } catch (InterruptedException ie) {\n          throw new RuntimeException(ie);\n        }\n        message(\"exit value=\" + p.exitValue());\n        message(\"top: now fail test replica R\" + id + \" failed to start\");\n        throw new RuntimeException(\"replica R\" + id + \" failed to start\");\n      }\n\n      if (logTimeStart.matcher(l).matches()) {\n        // Already a well-formed log output:\n        System.out.println(l);\n      } else {\n        message(l);\n      }\n\n      if (l.startsWith(\"PORT: \")) {\n        tcpPort = Integer.parseInt(l.substring(6).trim());\n      } else if (l.startsWith(\"COMMIT VERSION: \")) {\n        initCommitVersion = Integer.parseInt(l.substring(16).trim());\n      } else if (l.startsWith(\"INFOS VERSION: \")) {\n        initInfosVersion = Integer.parseInt(l.substring(15).trim());\n      } else if (l.contains(\"will crash after\")) {\n        willCrash = true;\n      } else if (l.startsWith(\"NODE STARTED\")) {\n        break;\n      } else if (l.contains(\"replica cannot start: existing segments file=\")) {\n        sawExistingSegmentsFile = true;\n      }\n    }\n\n    final boolean finalWillCrash = willCrash;\n\n    // Baby sits the child process, pulling its stdout and printing to our stdout:\n    Thread pumper = ThreadPumper.start(\n                                       new Runnable() {\n                                         @Override\n                                         public void run() {\n                                           message(\"now wait for process \" + p);\n                                           try {\n                                             p.waitFor();\n                                           } catch (Throwable t) {\n                                             throw new RuntimeException(t);\n                                           }\n\n                                           message(\"done wait for process \" + p);\n                                           int exitValue = p.exitValue();\n                                           message(\"exit value=\" + exitValue + \" willCrash=\" + finalWillCrash);\n                                           if (exitValue != 0) {\n                                             // should fail test\n                                             throw new RuntimeException(\"node \" + id + \" process had unexpected non-zero exit status=\" + exitValue);\n                                           }\n                                         }\n                                       }, r, System.out, null);\n    pumper.setName(\"pump\" + id);\n\n    message(\"top: node=\" + id + \" started at tcpPort=\" + tcpPort + \" initCommitVersion=\" + initCommitVersion + \" initInfosVersion=\" + initInfosVersion);\n    return new NodeProcess(p, id, tcpPort, pumper, isPrimary, initCommitVersion, initInfosVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d686e50b3c24dcfcfbfb32482ee0c710975ec50","date":1454535987,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#startNode(int,int,Path,boolean,long).mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#startNode(int,int,Path,boolean,long).mjava","sourceNew":"  /** Launches a child \"server\" (separate JVM), which is either primary or replica node */\n  NodeProcess startNode(int primaryTCPPort, final int id, Path indexPath, boolean isPrimary, long forcePrimaryVersion) throws IOException {\n    List<String> cmd = new ArrayList<>();\n\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n\n    if (primaryTCPPort != -1) {\n      cmd.add(\"-Dtests.nrtreplication.primaryTCPPort=\" + primaryTCPPort);\n    } else if (isPrimary == false) {\n      // We cannot start a replica when there is no primary:\n      return null;\n    }\n    cmd.add(\"-Dtests.nrtreplication.closeorcrash=false\");\n\n    cmd.add(\"-Dtests.nrtreplication.node=true\");\n    cmd.add(\"-Dtests.nrtreplication.nodeid=\" + id);\n    cmd.add(\"-Dtests.nrtreplication.startNS=\" + Node.globalStartNS);\n    cmd.add(\"-Dtests.nrtreplication.indexpath=\" + indexPath);\n    if (isPrimary) {\n      cmd.add(\"-Dtests.nrtreplication.isPrimary=true\");\n      cmd.add(\"-Dtests.nrtreplication.forcePrimaryVersion=\" + forcePrimaryVersion);\n    }\n\n    long myPrimaryGen = 0;\n    cmd.add(\"-Dtests.nrtreplication.primaryGen=\" + myPrimaryGen);\n\n    // Mixin our own counter because this is called from a fresh thread which means the seed otherwise isn't changing each time we spawn a\n    // new node:\n    long seed = random().nextLong() * nodeStartCounter.incrementAndGet();\n\n    cmd.add(\"-Dtests.seed=\" + SeedUtils.formatSeed(seed));\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName().replace(getClass().getSimpleName(), \"SimpleServer\"));\n\n    message(\"child process command: \" + cmd);\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.redirectErrorStream(true);\n\n    // Important, so that the scary looking hs_err_<pid>.log appear under our test temp dir:\n    pb.directory(childTempDir.toFile());\n\n    Process p = pb.start();\n\n    BufferedReader r;\n    try {\n      r = new BufferedReader(new InputStreamReader(p.getInputStream(), IOUtils.UTF_8));\n    } catch (UnsupportedEncodingException uee) {\n      throw new RuntimeException(uee);\n    }\n\n    int tcpPort = -1;\n    long initCommitVersion = -1;\n    long initInfosVersion = -1;\n    Pattern logTimeStart = Pattern.compile(\"^[0-9\\\\.]+s .*\");\n    boolean willCrash = false;\n    boolean sawExistingSegmentsFile = false;\n\n    while (true) {\n      String l = r.readLine();\n      if (l == null) {\n        message(\"top: node=\" + id + \" failed to start\");\n        try {\n          p.waitFor();\n        } catch (InterruptedException ie) {\n          throw new RuntimeException(ie);\n        }\n        message(\"exit value=\" + p.exitValue());\n        message(\"top: now fail test replica R\" + id + \" failed to start\");\n        throw new RuntimeException(\"replica R\" + id + \" failed to start\");\n      }\n\n      if (logTimeStart.matcher(l).matches()) {\n        // Already a well-formed log output:\n        System.out.println(l);\n      } else {\n        message(l);\n      }\n\n      if (l.startsWith(\"PORT: \")) {\n        tcpPort = Integer.parseInt(l.substring(6).trim());\n      } else if (l.startsWith(\"COMMIT VERSION: \")) {\n        initCommitVersion = Integer.parseInt(l.substring(16).trim());\n      } else if (l.startsWith(\"INFOS VERSION: \")) {\n        initInfosVersion = Integer.parseInt(l.substring(15).trim());\n      } else if (l.contains(\"will crash after\")) {\n        willCrash = true;\n      } else if (l.startsWith(\"NODE STARTED\")) {\n        break;\n      } else if (l.contains(\"replica cannot start: existing segments file=\")) {\n        sawExistingSegmentsFile = true;\n      }\n    }\n\n    final boolean finalWillCrash = willCrash;\n\n    // Baby sits the child process, pulling its stdout and printing to our stdout:\n    AtomicBoolean nodeClosing = new AtomicBoolean();\n    Thread pumper = ThreadPumper.start(\n                                       new Runnable() {\n                                         @Override\n                                         public void run() {\n                                           message(\"now wait for process \" + p);\n                                           try {\n                                             p.waitFor();\n                                           } catch (Throwable t) {\n                                             throw new RuntimeException(t);\n                                           }\n\n                                           message(\"done wait for process \" + p);\n                                           int exitValue = p.exitValue();\n                                           message(\"exit value=\" + exitValue + \" willCrash=\" + finalWillCrash);\n                                           if (exitValue != 0) {\n                                             // should fail test\n                                             throw new RuntimeException(\"node \" + id + \" process had unexpected non-zero exit status=\" + exitValue);\n                                           }\n                                         }\n                                       }, r, System.out, null, nodeClosing);\n    pumper.setName(\"pump\" + id);\n\n    message(\"top: node=\" + id + \" started at tcpPort=\" + tcpPort + \" initCommitVersion=\" + initCommitVersion + \" initInfosVersion=\" + initInfosVersion);\n    return new NodeProcess(p, id, tcpPort, pumper, isPrimary, initCommitVersion, initInfosVersion, nodeClosing);\n  }\n\n","sourceOld":"  /** Launches a child \"server\" (separate JVM), which is either primary or replica node */\n  NodeProcess startNode(int primaryTCPPort, final int id, Path indexPath, boolean isPrimary, long forcePrimaryVersion) throws IOException {\n    List<String> cmd = new ArrayList<>();\n\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n\n    if (primaryTCPPort != -1) {\n      cmd.add(\"-Dtests.nrtreplication.primaryTCPPort=\" + primaryTCPPort);\n    } else if (isPrimary == false) {\n      // We cannot start a replica when there is no primary:\n      return null;\n    }\n    cmd.add(\"-Dtests.nrtreplication.closeorcrash=false\");\n\n    cmd.add(\"-Dtests.nrtreplication.node=true\");\n    cmd.add(\"-Dtests.nrtreplication.nodeid=\" + id);\n    cmd.add(\"-Dtests.nrtreplication.startNS=\" + Node.globalStartNS);\n    cmd.add(\"-Dtests.nrtreplication.indexpath=\" + indexPath);\n    if (isPrimary) {\n      cmd.add(\"-Dtests.nrtreplication.isPrimary=true\");\n      cmd.add(\"-Dtests.nrtreplication.forcePrimaryVersion=\" + forcePrimaryVersion);\n    }\n\n    long myPrimaryGen = 0;\n    cmd.add(\"-Dtests.nrtreplication.primaryGen=\" + myPrimaryGen);\n\n    // Mixin our own counter because this is called from a fresh thread which means the seed otherwise isn't changing each time we spawn a\n    // new node:\n    long seed = random().nextLong() * nodeStartCounter.incrementAndGet();\n\n    cmd.add(\"-Dtests.seed=\" + SeedUtils.formatSeed(seed));\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName().replace(getClass().getSimpleName(), \"SimpleServer\"));\n\n    message(\"child process command: \" + cmd);\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.redirectErrorStream(true);\n\n    // Important, so that the scary looking hs_err_<pid>.log appear under our test temp dir:\n    pb.directory(childTempDir.toFile());\n\n    Process p = pb.start();\n\n    BufferedReader r;\n    try {\n      r = new BufferedReader(new InputStreamReader(p.getInputStream(), IOUtils.UTF_8));\n    } catch (UnsupportedEncodingException uee) {\n      throw new RuntimeException(uee);\n    }\n\n    int tcpPort = -1;\n    long initCommitVersion = -1;\n    long initInfosVersion = -1;\n    Pattern logTimeStart = Pattern.compile(\"^[0-9\\\\.]+s .*\");\n    boolean willCrash = false;\n    boolean sawExistingSegmentsFile = false;\n\n    while (true) {\n      String l = r.readLine();\n      if (l == null) {\n        message(\"top: node=\" + id + \" failed to start\");\n        try {\n          p.waitFor();\n        } catch (InterruptedException ie) {\n          throw new RuntimeException(ie);\n        }\n        message(\"exit value=\" + p.exitValue());\n        message(\"top: now fail test replica R\" + id + \" failed to start\");\n        throw new RuntimeException(\"replica R\" + id + \" failed to start\");\n      }\n\n      if (logTimeStart.matcher(l).matches()) {\n        // Already a well-formed log output:\n        System.out.println(l);\n      } else {\n        message(l);\n      }\n\n      if (l.startsWith(\"PORT: \")) {\n        tcpPort = Integer.parseInt(l.substring(6).trim());\n      } else if (l.startsWith(\"COMMIT VERSION: \")) {\n        initCommitVersion = Integer.parseInt(l.substring(16).trim());\n      } else if (l.startsWith(\"INFOS VERSION: \")) {\n        initInfosVersion = Integer.parseInt(l.substring(15).trim());\n      } else if (l.contains(\"will crash after\")) {\n        willCrash = true;\n      } else if (l.startsWith(\"NODE STARTED\")) {\n        break;\n      } else if (l.contains(\"replica cannot start: existing segments file=\")) {\n        sawExistingSegmentsFile = true;\n      }\n    }\n\n    final boolean finalWillCrash = willCrash;\n\n    // Baby sits the child process, pulling its stdout and printing to our stdout:\n    Thread pumper = ThreadPumper.start(\n                                       new Runnable() {\n                                         @Override\n                                         public void run() {\n                                           message(\"now wait for process \" + p);\n                                           try {\n                                             p.waitFor();\n                                           } catch (Throwable t) {\n                                             throw new RuntimeException(t);\n                                           }\n\n                                           message(\"done wait for process \" + p);\n                                           int exitValue = p.exitValue();\n                                           message(\"exit value=\" + exitValue + \" willCrash=\" + finalWillCrash);\n                                           if (exitValue != 0) {\n                                             // should fail test\n                                             throw new RuntimeException(\"node \" + id + \" process had unexpected non-zero exit status=\" + exitValue);\n                                           }\n                                         }\n                                       }, r, System.out, null);\n    pumper.setName(\"pump\" + id);\n\n    message(\"top: node=\" + id + \" started at tcpPort=\" + tcpPort + \" initCommitVersion=\" + initCommitVersion + \" initInfosVersion=\" + initInfosVersion);\n    return new NodeProcess(p, id, tcpPort, pumper, isPrimary, initCommitVersion, initInfosVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38cf1409ac117286eb0df7d6ef31d9cfdad8cfec","date":1454767455,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#startNode(int,int,Path,long,boolean).mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#startNode(int,int,Path,boolean,long).mjava","sourceNew":"  /** Launches a child \"server\" (separate JVM), which is either primary or replica node */\n  private NodeProcess startNode(int primaryTCPPort, final int id, Path indexPath, long forcePrimaryVersion, boolean willCrash) throws IOException {\n    List<String> cmd = new ArrayList<>();\n\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n\n    long myPrimaryGen;\n    if (primaryTCPPort != -1) {\n      // I am a replica\n      cmd.add(\"-Dtests.nrtreplication.primaryTCPPort=\" + primaryTCPPort);\n      myPrimaryGen = lastPrimaryGen;\n    } else {\n      myPrimaryGen = nextPrimaryGen++;\n      lastPrimaryGen = myPrimaryGen;\n    }\n    cmd.add(\"-Dtests.nrtreplication.primaryGen=\" + myPrimaryGen);\n    cmd.add(\"-Dtests.nrtreplication.closeorcrash=false\");\n\n    cmd.add(\"-Dtests.nrtreplication.node=true\");\n    cmd.add(\"-Dtests.nrtreplication.nodeid=\" + id);\n    cmd.add(\"-Dtests.nrtreplication.startNS=\" + Node.globalStartNS);\n    cmd.add(\"-Dtests.nrtreplication.indexpath=\" + indexPath);\n    cmd.add(\"-Dtests.nrtreplication.checkonclose=true\");\n\n    if (primaryTCPPort == -1) {\n      // We are the primary node\n      cmd.add(\"-Dtests.nrtreplication.isPrimary=true\");\n      cmd.add(\"-Dtests.nrtreplication.forcePrimaryVersion=\" + forcePrimaryVersion);\n    }\n\n    // Mixin our own counter because this is called from a fresh thread which means the seed otherwise isn't changing each time we spawn a\n    // new node:\n    long seed = random().nextLong() * nodeStartCounter.incrementAndGet();\n\n    cmd.add(\"-Dtests.seed=\" + SeedUtils.formatSeed(seed));\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName().replace(getClass().getSimpleName(), \"SimpleServer\"));\n\n    message(\"child process command: \" + cmd);\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.redirectErrorStream(true);\n\n    // Important, so that the scary looking hs_err_<pid>.log appear under our test temp dir:\n    pb.directory(childTempDir.toFile());\n\n    Process p = pb.start();\n\n    BufferedReader r;\n    try {\n      r = new BufferedReader(new InputStreamReader(p.getInputStream(), IOUtils.UTF_8));\n    } catch (UnsupportedEncodingException uee) {\n      throw new RuntimeException(uee);\n    }\n\n    int tcpPort = -1;\n    long initCommitVersion = -1;\n    long initInfosVersion = -1;\n    Pattern logTimeStart = Pattern.compile(\"^[0-9\\\\.]+s .*\");\n    boolean sawExistingSegmentsFile = false;\n\n    while (true) {\n      String l = r.readLine();\n      if (l == null) {\n        message(\"top: node=\" + id + \" failed to start\");\n        try {\n          p.waitFor();\n        } catch (InterruptedException ie) {\n          throw new RuntimeException(ie);\n        }\n        message(\"exit value=\" + p.exitValue());\n        message(\"top: now fail test replica R\" + id + \" failed to start\");\n        throw new RuntimeException(\"replica R\" + id + \" failed to start\");\n      }\n\n      if (logTimeStart.matcher(l).matches()) {\n        // Already a well-formed log output:\n        System.out.println(l);\n      } else {\n        message(l);\n      }\n\n      if (l.startsWith(\"PORT: \")) {\n        tcpPort = Integer.parseInt(l.substring(6).trim());\n      } else if (l.startsWith(\"COMMIT VERSION: \")) {\n        initCommitVersion = Integer.parseInt(l.substring(16).trim());\n      } else if (l.startsWith(\"INFOS VERSION: \")) {\n        initInfosVersion = Integer.parseInt(l.substring(15).trim());\n      } else if (l.contains(\"will crash after\")) {\n        willCrash = true;\n      } else if (l.startsWith(\"NODE STARTED\")) {\n        break;\n      } else if (l.contains(\"replica cannot start: existing segments file=\")) {\n        sawExistingSegmentsFile = true;\n      }\n    }\n\n    final boolean finalWillCrash = willCrash;\n\n    // Baby sits the child process, pulling its stdout and printing to our stdout:\n    AtomicBoolean nodeClosing = new AtomicBoolean();\n    Thread pumper = ThreadPumper.start(\n                                       new Runnable() {\n                                         @Override\n                                         public void run() {\n                                           message(\"now wait for process \" + p);\n                                           try {\n                                             p.waitFor();\n                                           } catch (Throwable t) {\n                                             throw new RuntimeException(t);\n                                           }\n\n                                           message(\"done wait for process \" + p);\n                                           int exitValue = p.exitValue();\n                                           message(\"exit value=\" + exitValue + \" willCrash=\" + finalWillCrash);\n                                           if (exitValue != 0 && finalWillCrash == false) {\n                                             // should fail test\n                                             throw new RuntimeException(\"node \" + id + \" process had unexpected non-zero exit status=\" + exitValue);\n                                           }\n                                         }\n                                       }, r, System.out, null, nodeClosing);\n    pumper.setName(\"pump\" + id);\n\n    message(\"top: node=\" + id + \" started at tcpPort=\" + tcpPort + \" initCommitVersion=\" + initCommitVersion + \" initInfosVersion=\" + initInfosVersion);\n    return new NodeProcess(p, id, tcpPort, pumper, primaryTCPPort == -1, initCommitVersion, initInfosVersion, nodeClosing);\n  }\n\n","sourceOld":"  /** Launches a child \"server\" (separate JVM), which is either primary or replica node */\n  NodeProcess startNode(int primaryTCPPort, final int id, Path indexPath, boolean isPrimary, long forcePrimaryVersion) throws IOException {\n    List<String> cmd = new ArrayList<>();\n\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n\n    if (primaryTCPPort != -1) {\n      cmd.add(\"-Dtests.nrtreplication.primaryTCPPort=\" + primaryTCPPort);\n    } else if (isPrimary == false) {\n      // We cannot start a replica when there is no primary:\n      return null;\n    }\n    cmd.add(\"-Dtests.nrtreplication.closeorcrash=false\");\n\n    cmd.add(\"-Dtests.nrtreplication.node=true\");\n    cmd.add(\"-Dtests.nrtreplication.nodeid=\" + id);\n    cmd.add(\"-Dtests.nrtreplication.startNS=\" + Node.globalStartNS);\n    cmd.add(\"-Dtests.nrtreplication.indexpath=\" + indexPath);\n    if (isPrimary) {\n      cmd.add(\"-Dtests.nrtreplication.isPrimary=true\");\n      cmd.add(\"-Dtests.nrtreplication.forcePrimaryVersion=\" + forcePrimaryVersion);\n    }\n\n    long myPrimaryGen = 0;\n    cmd.add(\"-Dtests.nrtreplication.primaryGen=\" + myPrimaryGen);\n\n    // Mixin our own counter because this is called from a fresh thread which means the seed otherwise isn't changing each time we spawn a\n    // new node:\n    long seed = random().nextLong() * nodeStartCounter.incrementAndGet();\n\n    cmd.add(\"-Dtests.seed=\" + SeedUtils.formatSeed(seed));\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName().replace(getClass().getSimpleName(), \"SimpleServer\"));\n\n    message(\"child process command: \" + cmd);\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.redirectErrorStream(true);\n\n    // Important, so that the scary looking hs_err_<pid>.log appear under our test temp dir:\n    pb.directory(childTempDir.toFile());\n\n    Process p = pb.start();\n\n    BufferedReader r;\n    try {\n      r = new BufferedReader(new InputStreamReader(p.getInputStream(), IOUtils.UTF_8));\n    } catch (UnsupportedEncodingException uee) {\n      throw new RuntimeException(uee);\n    }\n\n    int tcpPort = -1;\n    long initCommitVersion = -1;\n    long initInfosVersion = -1;\n    Pattern logTimeStart = Pattern.compile(\"^[0-9\\\\.]+s .*\");\n    boolean willCrash = false;\n    boolean sawExistingSegmentsFile = false;\n\n    while (true) {\n      String l = r.readLine();\n      if (l == null) {\n        message(\"top: node=\" + id + \" failed to start\");\n        try {\n          p.waitFor();\n        } catch (InterruptedException ie) {\n          throw new RuntimeException(ie);\n        }\n        message(\"exit value=\" + p.exitValue());\n        message(\"top: now fail test replica R\" + id + \" failed to start\");\n        throw new RuntimeException(\"replica R\" + id + \" failed to start\");\n      }\n\n      if (logTimeStart.matcher(l).matches()) {\n        // Already a well-formed log output:\n        System.out.println(l);\n      } else {\n        message(l);\n      }\n\n      if (l.startsWith(\"PORT: \")) {\n        tcpPort = Integer.parseInt(l.substring(6).trim());\n      } else if (l.startsWith(\"COMMIT VERSION: \")) {\n        initCommitVersion = Integer.parseInt(l.substring(16).trim());\n      } else if (l.startsWith(\"INFOS VERSION: \")) {\n        initInfosVersion = Integer.parseInt(l.substring(15).trim());\n      } else if (l.contains(\"will crash after\")) {\n        willCrash = true;\n      } else if (l.startsWith(\"NODE STARTED\")) {\n        break;\n      } else if (l.contains(\"replica cannot start: existing segments file=\")) {\n        sawExistingSegmentsFile = true;\n      }\n    }\n\n    final boolean finalWillCrash = willCrash;\n\n    // Baby sits the child process, pulling its stdout and printing to our stdout:\n    AtomicBoolean nodeClosing = new AtomicBoolean();\n    Thread pumper = ThreadPumper.start(\n                                       new Runnable() {\n                                         @Override\n                                         public void run() {\n                                           message(\"now wait for process \" + p);\n                                           try {\n                                             p.waitFor();\n                                           } catch (Throwable t) {\n                                             throw new RuntimeException(t);\n                                           }\n\n                                           message(\"done wait for process \" + p);\n                                           int exitValue = p.exitValue();\n                                           message(\"exit value=\" + exitValue + \" willCrash=\" + finalWillCrash);\n                                           if (exitValue != 0) {\n                                             // should fail test\n                                             throw new RuntimeException(\"node \" + id + \" process had unexpected non-zero exit status=\" + exitValue);\n                                           }\n                                         }\n                                       }, r, System.out, null, nodeClosing);\n    pumper.setName(\"pump\" + id);\n\n    message(\"top: node=\" + id + \" started at tcpPort=\" + tcpPort + \" initCommitVersion=\" + initCommitVersion + \" initInfosVersion=\" + initInfosVersion);\n    return new NodeProcess(p, id, tcpPort, pumper, isPrimary, initCommitVersion, initInfosVersion, nodeClosing);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9d686e50b3c24dcfcfbfb32482ee0c710975ec50":["1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9","f1e1d986de0b8b6b1d3a9e5c6eb3963452cbc8c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f1e1d986de0b8b6b1d3a9e5c6eb3963452cbc8c4":["1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9"],"38cf1409ac117286eb0df7d6ef31d9cfdad8cfec":["9d686e50b3c24dcfcfbfb32482ee0c710975ec50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9":["9d686e50b3c24dcfcfbfb32482ee0c710975ec50","f1e1d986de0b8b6b1d3a9e5c6eb3963452cbc8c4"],"9d686e50b3c24dcfcfbfb32482ee0c710975ec50":["38cf1409ac117286eb0df7d6ef31d9cfdad8cfec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f1e1d986de0b8b6b1d3a9e5c6eb3963452cbc8c4":["9d686e50b3c24dcfcfbfb32482ee0c710975ec50"],"38cf1409ac117286eb0df7d6ef31d9cfdad8cfec":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38cf1409ac117286eb0df7d6ef31d9cfdad8cfec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}