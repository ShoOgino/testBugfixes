{"path":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testSort() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", schema);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", schema);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f,sum(d_f,t_f,1)),a_f) asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f),sum(float(d_f),float(t_f),const(1.0))),float(a_f))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    try {\n      //bad number of parens, but the function parser can handle an extra close\n      sort = QueryParsing.parseSort(\"pow(weight,2)) desc, bday asc\", schema);\n    } catch (SolrException e) {\n      assertTrue(false);\n    }\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s, \\\"junk\\\", jw) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", schema);\n    assertNull(sort);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":null,"sourceOld":"  public void testSort() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", schema);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", schema);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f,sum(d_f,t_f,1)),a_f) asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f),sum(float(d_f),float(t_f),const(1.0))),float(a_f))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    try {\n      //bad number of parens, but the function parser can handle an extra close\n      sort = QueryParsing.parseSort(\"pow(weight,2)) desc, bday asc\", schema);\n    } catch (SolrException e) {\n      assertTrue(false);\n    }\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s, \\\"junk\\\", jw) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", schema);\n    assertNull(sort);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  public void testSort() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", schema);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", schema);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f,sum(d_f,t_f,1)),a_f) asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f),sum(float(d_f),float(t_f),const(1.0))),float(a_f))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    try {\n      //bad number of parens, but the function parser can handle an extra close\n      sort = QueryParsing.parseSort(\"pow(weight,2)) desc, bday asc\", schema);\n    } catch (SolrException e) {\n      assertTrue(false);\n    }\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s, \\\"junk\\\", jw) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", schema);\n    assertNull(sort);\n\n  }\n\n","sourceOld":"  public void testSort() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", schema);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", schema);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f,sum(d_f,t_f,1)),a_f) asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f),sum(float(d_f),float(t_f),const(1.0))),float(a_f))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    try {\n      //bad number of parens, but the function parser can handle an extra close\n      sort = QueryParsing.parseSort(\"pow(weight,2)) desc, bday asc\", schema);\n    } catch (SolrException e) {\n      assertTrue(false);\n    }\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s, \\\"junk\\\", jw) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", schema);\n    assertNull(sort);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testSort() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", schema);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", schema);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f,sum(d_f,t_f,1)),a_f) asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f),sum(float(d_f),float(t_f),const(1.0))),float(a_f))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    try {\n      //bad number of parens, but the function parser can handle an extra close\n      sort = QueryParsing.parseSort(\"pow(weight,2)) desc, bday asc\", schema);\n    } catch (SolrException e) {\n      assertTrue(false);\n    }\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s, \\\"junk\\\", jw) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", schema);\n    assertNull(sort);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"afeb033b2bd36d8ce9d82142b197da4dde13068b","date":1269115863,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", schema);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", schema);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f,sum(d_f,t_f,1)),a_f) asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f),sum(float(d_f),float(t_f),const(1.0))),float(a_f))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    try {\n      //bad number of parens, but the function parser can handle an extra close\n      sort = QueryParsing.parseSort(\"pow(weight,2)) desc, bday asc\", schema);\n    } catch (SolrException e) {\n      assertTrue(false);\n    }\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s, \\\"junk\\\", jw) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", schema);\n    assertNull(sort);\n\n  }\n\n","sourceOld":"  public void testSort() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", schema);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", schema);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f,sum(d_f,t_f,1)),a_f) asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f),sum(float(d_f),float(t_f),const(1.0))),float(a_f))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    try {\n      //bad number of parens, but the function parser can handle an extra close\n      sort = QueryParsing.parseSort(\"pow(weight,2)) desc, bday asc\", schema);\n    } catch (SolrException e) {\n      assertTrue(false);\n    }\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s, \\\"junk\\\", jw) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", schema);\n    assertNull(sort);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58f6207f98d96eddff4bee41c445792c249e5b74","date":1285448770,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", schema);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", schema);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f,sum(d_f,t_f,1)),a_f) asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f),sum(float(d_f),float(t_f),const(1.0))),float(a_f))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\ngvim\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s, \\\"junk\\\", jw) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", schema);\n    assertNull(sort);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", schema);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", schema);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f,sum(d_f,t_f,1)),a_f) asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f),sum(float(d_f),float(t_f),const(1.0))),float(a_f))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    try {\n      //bad number of parens, but the function parser can handle an extra close\n      sort = QueryParsing.parseSort(\"pow(weight,2)) desc, bday asc\", schema);\n    } catch (SolrException e) {\n      assertTrue(false);\n    }\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s, \\\"junk\\\", jw) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", schema);\n    assertNull(sort);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2c5132e4b2d06ec9ee095fd5eb10b5bcaf0a7f7","date":1285449939,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", schema);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", schema);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f,sum(d_f,t_f,1)),a_f) asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f),sum(float(d_f),float(t_f),const(1.0))),float(a_f))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s, \\\"junk\\\", jw) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", schema);\n    assertNull(sort);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", schema);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", schema);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f,sum(d_f,t_f,1)),a_f) asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f),sum(float(d_f),float(t_f),const(1.0))),float(a_f))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\ngvim\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s, \\\"junk\\\", jw) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", schema);\n    assertNull(sort);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0883328ff2cc09b5c999d05c04e16530d819c627","date":1285860918,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f,sum(d_f,t_f,1)),a_f) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f),sum(float(d_f),float(t_f),const(1.0))),float(a_f))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", schema);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", schema);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f,sum(d_f,t_f,1)),a_f) asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f),sum(float(d_f),float(t_f),const(1.0))),float(a_f))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s, \\\"junk\\\", jw) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", schema);\n    assertNull(sort);\n\n  }\n\n","bugFix":null,"bugIntro":["5eeff6b8391d7b5e70e37193643d76c05a3abf75","f7e2c5596ef3fbb03572368a66afb40a500404ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79440f0b650ac4099bf4e45dc72bb463fd14973c","date":1287357299,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f,sum(d_f,t_f,1)),a_f) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f),sum(float(d_f),float(t_f),const(1.0))),float(a_f))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f,sum(d_f,t_f,1)),a_f) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f),sum(float(d_f),float(t_f),const(1.0))),float(a_f))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f,sum(d_f,t_f,1)),a_f) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f),sum(float(d_f),float(t_f),const(1.0))),float(a_f))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f,sum(d_f,t_f,1)),a_f) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f),sum(float(d_f),float(t_f),const(1.0))),float(a_f))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f,sum(d_f,t_f,1)),a_f) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f),sum(float(d_f),float(t_f),const(1.0))),float(a_f))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", schema);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", schema);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f,sum(d_f,t_f,1)),a_f) asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f),sum(float(d_f),float(t_f),const(1.0))),float(a_f))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    try {\n      //bad number of parens, but the function parser can handle an extra close\n      sort = QueryParsing.parseSort(\"pow(weight,2)) desc, bday asc\", schema);\n    } catch (SolrException e) {\n      assertTrue(false);\n    }\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s, \\\"junk\\\", jw) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", schema);\n    assertNull(sort);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7e2c5596ef3fbb03572368a66afb40a500404ab","date":1297903084,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f,sum(d_f,t_f,1)),a_f) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f),sum(float(d_f),float(t_f),const(1.0))),float(a_f))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","bugFix":["c072979741a04848324e4e51ae44d2975855f781","0883328ff2cc09b5c999d05c04e16530d819c627","7adea379ca28e367e6726634db1cebeb14483ee9"],"bugIntro":["5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f,sum(d_f,t_f,1)),a_f) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f),sum(float(d_f),float(t_f),const(1.0))),float(a_f))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f,sum(d_f,t_f,1)),a_f) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f),sum(float(d_f),float(t_f),const(1.0))),float(a_f))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eeff6b8391d7b5e70e37193643d76c05a3abf75","date":1302902022,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","bugFix":["f7e2c5596ef3fbb03572368a66afb40a500404ab","0883328ff2cc09b5c999d05c04e16530d819c627","7adea379ca28e367e6726634db1cebeb14483ee9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4695700bae5ad81cf229df09a73758433f9e8371","date":1308574155,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e16bf7641024ed2270064ba9a6037c49266bcfb1","date":1308579310,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"718f8730b97959cb87aaeadc9fafb9513f3c1bfe","date":1308670382,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"090a0320e4de4a3674376aef96b9701f47564f86","date":1308707325,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0883328ff2cc09b5c999d05c04e16530d819c627":["d2c5132e4b2d06ec9ee095fd5eb10b5bcaf0a7f7"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","f7e2c5596ef3fbb03572368a66afb40a500404ab"],"c26f00b574427b55127e869b935845554afde1fa":["090a0320e4de4a3674376aef96b9701f47564f86","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["afeb033b2bd36d8ce9d82142b197da4dde13068b","79440f0b650ac4099bf4e45dc72bb463fd14973c"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["bde51b089eb7f86171eb3406e38a274743f9b7ac","5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f7e2c5596ef3fbb03572368a66afb40a500404ab"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d2c5132e4b2d06ec9ee095fd5eb10b5bcaf0a7f7":["58f6207f98d96eddff4bee41c445792c249e5b74"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["f1bdbf92da222965b46c0a942c3857ba56e5c638","5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"2553b00f699380c64959ccb27991289aae87be2e":["718f8730b97959cb87aaeadc9fafb9513f3c1bfe","090a0320e4de4a3674376aef96b9701f47564f86"],"e16bf7641024ed2270064ba9a6037c49266bcfb1":["5eeff6b8391d7b5e70e37193643d76c05a3abf75","4695700bae5ad81cf229df09a73758433f9e8371"],"4695700bae5ad81cf229df09a73758433f9e8371":["5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["e16bf7641024ed2270064ba9a6037c49266bcfb1","090a0320e4de4a3674376aef96b9701f47564f86"],"090a0320e4de4a3674376aef96b9701f47564f86":["4695700bae5ad81cf229df09a73758433f9e8371"],"58f6207f98d96eddff4bee41c445792c249e5b74":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"79440f0b650ac4099bf4e45dc72bb463fd14973c":["0883328ff2cc09b5c999d05c04e16530d819c627"],"5eeff6b8391d7b5e70e37193643d76c05a3abf75":["f7e2c5596ef3fbb03572368a66afb40a500404ab"],"f7e2c5596ef3fbb03572368a66afb40a500404ab":["79440f0b650ac4099bf4e45dc72bb463fd14973c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2553b00f699380c64959ccb27991289aae87be2e"],"a3776dccca01c11e7046323cfad46a3b4a471233":["f7e2c5596ef3fbb03572368a66afb40a500404ab","5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"718f8730b97959cb87aaeadc9fafb9513f3c1bfe":["a3776dccca01c11e7046323cfad46a3b4a471233","4695700bae5ad81cf229df09a73758433f9e8371"],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["090a0320e4de4a3674376aef96b9701f47564f86"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["0883328ff2cc09b5c999d05c04e16530d819c627","79440f0b650ac4099bf4e45dc72bb463fd14973c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"0883328ff2cc09b5c999d05c04e16530d819c627":["79440f0b650ac4099bf4e45dc72bb463fd14973c","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"1da8d55113b689b06716246649de6f62430f15c0":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"d2c5132e4b2d06ec9ee095fd5eb10b5bcaf0a7f7":["0883328ff2cc09b5c999d05c04e16530d819c627"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"2553b00f699380c64959ccb27991289aae87be2e":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"e16bf7641024ed2270064ba9a6037c49266bcfb1":["d083e83f225b11e5fdd900e83d26ddb385b6955c"],"4695700bae5ad81cf229df09a73758433f9e8371":["e16bf7641024ed2270064ba9a6037c49266bcfb1","090a0320e4de4a3674376aef96b9701f47564f86","718f8730b97959cb87aaeadc9fafb9513f3c1bfe"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"090a0320e4de4a3674376aef96b9701f47564f86":["c26f00b574427b55127e869b935845554afde1fa","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee"],"58f6207f98d96eddff4bee41c445792c249e5b74":["d2c5132e4b2d06ec9ee095fd5eb10b5bcaf0a7f7"],"79440f0b650ac4099bf4e45dc72bb463fd14973c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f7e2c5596ef3fbb03572368a66afb40a500404ab","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"5eeff6b8391d7b5e70e37193643d76c05a3abf75":["d493718201f0d0c54c773fb323d87bbd2fbffe41","135621f3a0670a9394eb563224a3b76cc4dddc0f","e16bf7641024ed2270064ba9a6037c49266bcfb1","4695700bae5ad81cf229df09a73758433f9e8371","a3776dccca01c11e7046323cfad46a3b4a471233"],"f7e2c5596ef3fbb03572368a66afb40a500404ab":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","5eeff6b8391d7b5e70e37193643d76c05a3abf75","a3776dccca01c11e7046323cfad46a3b4a471233"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["718f8730b97959cb87aaeadc9fafb9513f3c1bfe"],"718f8730b97959cb87aaeadc9fafb9513f3c1bfe":["2553b00f699380c64959ccb27991289aae87be2e"],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","58f6207f98d96eddff4bee41c445792c249e5b74"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d493718201f0d0c54c773fb323d87bbd2fbffe41","135621f3a0670a9394eb563224a3b76cc4dddc0f","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}