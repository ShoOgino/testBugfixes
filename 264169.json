{"path":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateBinary2(RexNode,RexNode).mjava","commits":[{"id":"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef","date":1462373155,"type":1,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateBinary2(RexNode,RexNode).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateBinary2(String,RexNode,RexNode).mjava","sourceNew":"    /** Translates a call to a binary operator. Returns whether successful. */\n    private Pair<String, RexLiteral> translateBinary2(RexNode left, RexNode right) {\n      switch (right.getKind()) {\n        case LITERAL:\n          break;\n        default:\n          return null;\n      }\n      final RexLiteral rightLiteral = (RexLiteral) right;\n      switch (left.getKind()) {\n        case INPUT_REF:\n          final RexInputRef left1 = (RexInputRef) left;\n          String name = fieldNames.get(left1.getIndex());\n          return new Pair<>(name, rightLiteral);\n        case CAST:\n          return translateBinary2(((RexCall) left).operands.get(0), right);\n//        case OTHER_FUNCTION:\n//          String itemName = SolrRules.isItem((RexCall) left);\n//          if (itemName != null) {\n//            return translateOp2(op, itemName, rightLiteral);\n//          }\n        default:\n          return null;\n      }\n    }\n\n","sourceOld":"    /** Translates a call to a binary operator. Returns whether successful. */\n    private String translateBinary2(String op, RexNode left, RexNode right) {\n      switch (right.getKind()) {\n        case LITERAL:\n          break;\n        default:\n          return null;\n      }\n      final RexLiteral rightLiteral = (RexLiteral) right;\n      switch (left.getKind()) {\n        case INPUT_REF:\n          final RexInputRef left1 = (RexInputRef) left;\n          String name = fieldNames.get(left1.getIndex());\n          return translateOp2(op, name, rightLiteral);\n        case CAST:\n          return translateBinary2(op, ((RexCall) left).operands.get(0), right);\n//        case OTHER_FUNCTION:\n//          String itemName = SolrRules.isItem((RexCall) left);\n//          if (itemName != null) {\n//            return translateOp2(op, itemName, rightLiteral);\n//          }\n        default:\n          return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5cb41f0427fb7a75b0bfefe992561738c11fd80","date":1486576891,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateBinary2(RexNode,RexNode).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateBinary2(RexNode,RexNode).mjava","sourceNew":"    /**\n     * Translates a call to a binary operator. Returns whether successful.\n     */\n    private Pair<String, RexLiteral> translateBinary2(RexNode left, RexNode right) {\n      switch (right.getKind()) {\n        case LITERAL:\n          break;\n        default:\n          return null;\n      }\n      final RexLiteral rightLiteral = (RexLiteral) right;\n      switch (left.getKind()) {\n        case INPUT_REF:\n          final RexInputRef left1 = (RexInputRef) left;\n          String name = fieldNames.get(left1.getIndex());\n          return new Pair<>(name, rightLiteral);\n        case CAST:\n          return translateBinary2(((RexCall) left).operands.get(0), right);\n//        case OTHER_FUNCTION:\n//          String itemName = SolrRules.isItem((RexCall) left);\n//          if (itemName != null) {\n//            return translateOp2(op, itemName, rightLiteral);\n//          }\n        default:\n          return null;\n      }\n    }\n\n","sourceOld":"    /** Translates a call to a binary operator. Returns whether successful. */\n    private Pair<String, RexLiteral> translateBinary2(RexNode left, RexNode right) {\n      switch (right.getKind()) {\n        case LITERAL:\n          break;\n        default:\n          return null;\n      }\n      final RexLiteral rightLiteral = (RexLiteral) right;\n      switch (left.getKind()) {\n        case INPUT_REF:\n          final RexInputRef left1 = (RexInputRef) left;\n          String name = fieldNames.get(left1.getIndex());\n          return new Pair<>(name, rightLiteral);\n        case CAST:\n          return translateBinary2(((RexCall) left).operands.get(0), right);\n//        case OTHER_FUNCTION:\n//          String itemName = SolrRules.isItem((RexCall) left);\n//          if (itemName != null) {\n//            return translateOp2(op, itemName, rightLiteral);\n//          }\n        default:\n          return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":0,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateBinary2(RexNode,RexNode).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Translates a call to a binary operator. Returns whether successful.\n     */\n    private Pair<String, RexLiteral> translateBinary2(RexNode left, RexNode right) {\n      switch (right.getKind()) {\n        case LITERAL:\n          break;\n        default:\n          return null;\n      }\n      final RexLiteral rightLiteral = (RexLiteral) right;\n      switch (left.getKind()) {\n        case INPUT_REF:\n          final RexInputRef left1 = (RexInputRef) left;\n          String name = fieldNames.get(left1.getIndex());\n          return new Pair<>(name, rightLiteral);\n        case CAST:\n          return translateBinary2(((RexCall) left).operands.get(0), right);\n//        case OTHER_FUNCTION:\n//          String itemName = SolrRules.isItem((RexCall) left);\n//          if (itemName != null) {\n//            return translateOp2(op, itemName, rightLiteral);\n//          }\n        default:\n          return null;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d5cb41f0427fb7a75b0bfefe992561738c11fd80"],"d5cb41f0427fb7a75b0bfefe992561738c11fd80":["724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"]},"commit2Childs":{"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d5cb41f0427fb7a75b0bfefe992561738c11fd80":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef"],"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef":["d5cb41f0427fb7a75b0bfefe992561738c11fd80"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}