{"path":"solr/solrj/src/java/org/apache/solr/recipe/AddReplicaSuggester#tryEachNode(boolean).mjava","commits":[{"id":"c09a89337c5a3688436fd158575e28cdbb4fe28e","date":1490706842,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/recipe/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"/dev/null","sourceNew":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (int i = matrix.size() - 1; i >= 0; i--) {\n      Row row = matrix.get(i);\n      row = row.addReplica(coll, shard);\n      row.violations.clear();\n      for (Clause clause : session.getRuleSorter().clauses) {\n        if (strict || clause.strict) clause.test(row);\n      }\n      if (row.violations.isEmpty()) {\n        return Utils.makeMap(\"operation\", ADDREPLICA,\n            COLLECTION_PROP, coll,\n            SHARD_ID_PROP, shard,\n            NODE, row.node);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea13f0ffd30b65fc1e59ce96948fc1db68ddd4cf","date":1491191579,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/recipe/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (int i = matrix.size() - 1; i >= 0; i--) {\n      Row row = matrix.get(i);\n      row = row.addReplica(coll, shard);\n      row.violations.clear();\n      for (Clause clause : session.getPolicy().clauses) {\n        if (strict || clause.strict) clause.test(row);\n      }\n      if (row.violations.isEmpty()) {// there are no rule violations\n        matrix.set(i, matrix.get(i).addReplica(coll, shard));\n        return Utils.makeMap(\"operation\", ADDREPLICA.toLower(),\n            COLLECTION_PROP, coll,\n            SHARD_ID_PROP, shard,\n            NODE, row.node);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (int i = matrix.size() - 1; i >= 0; i--) {\n      Row row = matrix.get(i);\n      row = row.addReplica(coll, shard);\n      row.violations.clear();\n      for (Clause clause : session.getRuleSorter().clauses) {\n        if (strict || clause.strict) clause.test(row);\n      }\n      if (row.violations.isEmpty()) {\n        return Utils.makeMap(\"operation\", ADDREPLICA,\n            COLLECTION_PROP, coll,\n            SHARD_ID_PROP, shard,\n            NODE, row.node);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b59075a857a3d25d834f6f408491b40845b8ced0","date":1492433183,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/recipe/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      row = row.addReplica(coll, shard);\n      row.violations.clear();\n      for (Clause clause : session.getPolicy().clauses) {\n        if (strict || clause.strict) clause.test(row);\n      }\n      if (row.violations.isEmpty()) {// there are no rule violations\n        getMatrix().set(i, getMatrix().get(i).addReplica(coll, shard));\n        return Utils.makeMap(\"operation\", ADDREPLICA.toLower(),\n            COLLECTION_PROP, coll,\n            SHARD_ID_PROP, shard,\n            NODE, row.node);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (int i = matrix.size() - 1; i >= 0; i--) {\n      Row row = matrix.get(i);\n      row = row.addReplica(coll, shard);\n      row.violations.clear();\n      for (Clause clause : session.getPolicy().clauses) {\n        if (strict || clause.strict) clause.test(row);\n      }\n      if (row.violations.isEmpty()) {// there are no rule violations\n        matrix.set(i, matrix.get(i).addReplica(coll, shard));\n        return Utils.makeMap(\"operation\", ADDREPLICA.toLower(),\n            COLLECTION_PROP, coll,\n            SHARD_ID_PROP, shard,\n            NODE, row.node);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b57c992d9db5a9cc83568032fb0d2483426d7da","date":1492497042,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/recipe/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      String coll = hints.get(Hint.COLL);\n      String shard = hints.get(Hint.SHARD);\n      row = row.addReplica(coll, shard);\n      row.violations.clear();\n      for (Clause clause : session.getPolicy().clauses) {\n        if (strict || clause.strict) clause.test(row);\n      }\n      if (row.violations.isEmpty()) {// there are no rule violations\n        getMatrix().set(i, getMatrix().get(i).addReplica(coll, shard));\n        return Utils.makeMap(\"operation\", ADDREPLICA.toLower(),\n            COLLECTION_PROP, coll,\n            SHARD_ID_PROP, shard,\n            NODE, row.node);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      row = row.addReplica(coll, shard);\n      row.violations.clear();\n      for (Clause clause : session.getPolicy().clauses) {\n        if (strict || clause.strict) clause.test(row);\n      }\n      if (row.violations.isEmpty()) {// there are no rule violations\n        getMatrix().set(i, getMatrix().get(i).addReplica(coll, shard));\n        return Utils.makeMap(\"operation\", ADDREPLICA.toLower(),\n            COLLECTION_PROP, coll,\n            SHARD_ID_PROP, shard,\n            NODE, row.node);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      String coll = hints.get(Hint.COLL);\n      String shard = hints.get(Hint.SHARD);\n      row = row.addReplica(coll, shard);\n      row.violations.clear();\n      for (Clause clause : session.getPolicy().clauses) {\n        if (strict || clause.strict) clause.test(row);\n      }\n      if (row.violations.isEmpty()) {// there are no rule violations\n        getMatrix().set(i, getMatrix().get(i).addReplica(coll, shard));\n        return Utils.makeMap(\"operation\", ADDREPLICA.toLower(),\n            COLLECTION_PROP, coll,\n            SHARD_ID_PROP, shard,\n            NODE, row.node);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      String coll = hints.get(Hint.COLL);\n      String shard = hints.get(Hint.SHARD);\n      row = row.addReplica(coll, shard);\n      row.violations.clear();\n      for (Clause clause : session.getPolicy().clauses) {\n        if (strict || clause.strict) clause.test(row);\n      }\n      if (row.violations.isEmpty()) {// there are no rule violations\n        getMatrix().set(i, getMatrix().get(i).addReplica(coll, shard));\n        return Utils.makeMap(\"operation\", ADDREPLICA.toLower(),\n            COLLECTION_PROP, coll,\n            SHARD_ID_PROP, shard,\n            NODE, row.node);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9b57c992d9db5a9cc83568032fb0d2483426d7da":["b59075a857a3d25d834f6f408491b40845b8ced0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b59075a857a3d25d834f6f408491b40845b8ced0":["ea13f0ffd30b65fc1e59ce96948fc1db68ddd4cf"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["9b57c992d9db5a9cc83568032fb0d2483426d7da"],"c09a89337c5a3688436fd158575e28cdbb4fe28e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ea13f0ffd30b65fc1e59ce96948fc1db68ddd4cf":["c09a89337c5a3688436fd158575e28cdbb4fe28e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9b57c992d9db5a9cc83568032fb0d2483426d7da":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c09a89337c5a3688436fd158575e28cdbb4fe28e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b59075a857a3d25d834f6f408491b40845b8ced0":["9b57c992d9db5a9cc83568032fb0d2483426d7da"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":[],"c09a89337c5a3688436fd158575e28cdbb4fe28e":["ea13f0ffd30b65fc1e59ce96948fc1db68ddd4cf"],"ea13f0ffd30b65fc1e59ce96948fc1db68ddd4cf":["b59075a857a3d25d834f6f408491b40845b8ced0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}