{"path":"lucene/join/src/java/org/apache/lucene/search/join/DocValuesTermsCollector#sortedNumericAsSortedSetDocValues(String,LegacyNumericType).mjava","commits":[{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/DocValuesTermsCollector#sortedNumericAsSortedSetDocValues(String,LegacyNumericType).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/DocValuesTermsCollector#sortedNumericAsSortedSetDocValues(String,FieldType.LegacyNumericType).mjava","sourceNew":"  /** this adapter is quite weird. ords are per doc index, don't use ords across different docs*/\n  static Function<SortedSetDocValues> sortedNumericAsSortedSetDocValues(String field, LegacyNumericType numTyp) {\n    return (ctx) -> {\n      final SortedNumericDocValues numerics = DocValues.getSortedNumeric(ctx, field);\n      final BytesRefBuilder bytes = new BytesRefBuilder();\n      \n      final LongConsumer coder = coder(bytes, numTyp, field);\n      \n      return new SortedSetDocValues() {\n\n        private int index = Integer.MIN_VALUE;\n\n        @Override\n        public long nextOrd() {\n          return index < numerics.count()-1 ? ++index : NO_MORE_ORDS;\n        }\n\n        @Override\n        public void setDocument(int docID) {\n          numerics.setDocument(docID);\n          index=-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(long ord) {\n          assert ord>=0 && ord<numerics.count();\n          final long value = numerics.valueAt((int)ord);\n          coder.accept(value);\n          return bytes.get();\n        }\n\n        @Override\n        public long getValueCount() {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n        \n        @Override\n        public long lookupTerm(BytesRef key) {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n      };\n    };\n  }\n\n","sourceOld":"  /** this adapter is quite weird. ords are per doc index, don't use ords across different docs*/\n  static Function<SortedSetDocValues> sortedNumericAsSortedSetDocValues(String field, FieldType.LegacyNumericType numTyp) {\n    return (ctx) -> {\n      final SortedNumericDocValues numerics = DocValues.getSortedNumeric(ctx, field);\n      final BytesRefBuilder bytes = new BytesRefBuilder();\n      \n      final LongConsumer coder = coder(bytes, numTyp, field);\n      \n      return new SortedSetDocValues() {\n\n        private int index = Integer.MIN_VALUE;\n\n        @Override\n        public long nextOrd() {\n          return index < numerics.count()-1 ? ++index : NO_MORE_ORDS;\n        }\n\n        @Override\n        public void setDocument(int docID) {\n          numerics.setDocument(docID);\n          index=-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(long ord) {\n          assert ord>=0 && ord<numerics.count();\n          final long value = numerics.valueAt((int)ord);\n          coder.accept(value);\n          return bytes.get();\n        }\n\n        @Override\n        public long getValueCount() {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n        \n        @Override\n        public long lookupTerm(BytesRef key) {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n      };\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/DocValuesTermsCollector#sortedNumericAsSortedSetDocValues(String,LegacyNumericType).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/DocValuesTermsCollector#sortedNumericAsSortedSetDocValues(String,FieldType.LegacyNumericType).mjava","sourceNew":"  /** this adapter is quite weird. ords are per doc index, don't use ords across different docs*/\n  static Function<SortedSetDocValues> sortedNumericAsSortedSetDocValues(String field, LegacyNumericType numTyp) {\n    return (ctx) -> {\n      final SortedNumericDocValues numerics = DocValues.getSortedNumeric(ctx, field);\n      final BytesRefBuilder bytes = new BytesRefBuilder();\n      \n      final LongConsumer coder = coder(bytes, numTyp, field);\n      \n      return new SortedSetDocValues() {\n\n        private int index = Integer.MIN_VALUE;\n\n        @Override\n        public long nextOrd() {\n          return index < numerics.count()-1 ? ++index : NO_MORE_ORDS;\n        }\n\n        @Override\n        public void setDocument(int docID) {\n          numerics.setDocument(docID);\n          index=-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(long ord) {\n          assert ord>=0 && ord<numerics.count();\n          final long value = numerics.valueAt((int)ord);\n          coder.accept(value);\n          return bytes.get();\n        }\n\n        @Override\n        public long getValueCount() {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n        \n        @Override\n        public long lookupTerm(BytesRef key) {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n      };\n    };\n  }\n\n","sourceOld":"  /** this adapter is quite weird. ords are per doc index, don't use ords across different docs*/\n  static Function<SortedSetDocValues> sortedNumericAsSortedSetDocValues(String field, FieldType.LegacyNumericType numTyp) {\n    return (ctx) -> {\n      final SortedNumericDocValues numerics = DocValues.getSortedNumeric(ctx, field);\n      final BytesRefBuilder bytes = new BytesRefBuilder();\n      \n      final LongConsumer coder = coder(bytes, numTyp, field);\n      \n      return new SortedSetDocValues() {\n\n        private int index = Integer.MIN_VALUE;\n\n        @Override\n        public long nextOrd() {\n          return index < numerics.count()-1 ? ++index : NO_MORE_ORDS;\n        }\n\n        @Override\n        public void setDocument(int docID) {\n          numerics.setDocument(docID);\n          index=-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(long ord) {\n          assert ord>=0 && ord<numerics.count();\n          final long value = numerics.valueAt((int)ord);\n          coder.accept(value);\n          return bytes.get();\n        }\n\n        @Override\n        public long getValueCount() {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n        \n        @Override\n        public long lookupTerm(BytesRef key) {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n      };\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/DocValuesTermsCollector#sortedNumericAsSortedSetDocValues(String,LegacyNumericType).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/DocValuesTermsCollector#sortedNumericAsSortedSetDocValues(String,FieldType.LegacyNumericType).mjava","sourceNew":"  /** this adapter is quite weird. ords are per doc index, don't use ords across different docs*/\n  static Function<SortedSetDocValues> sortedNumericAsSortedSetDocValues(String field, LegacyNumericType numTyp) {\n    return (ctx) -> {\n      final SortedNumericDocValues numerics = DocValues.getSortedNumeric(ctx, field);\n      final BytesRefBuilder bytes = new BytesRefBuilder();\n      \n      final LongConsumer coder = coder(bytes, numTyp, field);\n      \n      return new SortedSetDocValues() {\n\n        private int index = Integer.MIN_VALUE;\n\n        @Override\n        public long nextOrd() {\n          return index < numerics.count()-1 ? ++index : NO_MORE_ORDS;\n        }\n\n        @Override\n        public void setDocument(int docID) {\n          numerics.setDocument(docID);\n          index=-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(long ord) {\n          assert ord>=0 && ord<numerics.count();\n          final long value = numerics.valueAt((int)ord);\n          coder.accept(value);\n          return bytes.get();\n        }\n\n        @Override\n        public long getValueCount() {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n        \n        @Override\n        public long lookupTerm(BytesRef key) {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n      };\n    };\n  }\n\n","sourceOld":"  /** this adapter is quite weird. ords are per doc index, don't use ords across different docs*/\n  static Function<SortedSetDocValues> sortedNumericAsSortedSetDocValues(String field, FieldType.LegacyNumericType numTyp) {\n    return (ctx) -> {\n      final SortedNumericDocValues numerics = DocValues.getSortedNumeric(ctx, field);\n      final BytesRefBuilder bytes = new BytesRefBuilder();\n      \n      final LongConsumer coder = coder(bytes, numTyp, field);\n      \n      return new SortedSetDocValues() {\n\n        private int index = Integer.MIN_VALUE;\n\n        @Override\n        public long nextOrd() {\n          return index < numerics.count()-1 ? ++index : NO_MORE_ORDS;\n        }\n\n        @Override\n        public void setDocument(int docID) {\n          numerics.setDocument(docID);\n          index=-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(long ord) {\n          assert ord>=0 && ord<numerics.count();\n          final long value = numerics.valueAt((int)ord);\n          coder.accept(value);\n          return bytes.get();\n        }\n\n        @Override\n        public long getValueCount() {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n        \n        @Override\n        public long lookupTerm(BytesRef key) {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n      };\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50b8410419cbbe9d8e1a96c918a951976bffe680","date":1471869553,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/DocValuesTermsCollector#sortedNumericAsSortedSetDocValues(String,LegacyNumericType).mjava","sourceNew":null,"sourceOld":"  /** this adapter is quite weird. ords are per doc index, don't use ords across different docs*/\n  static Function<SortedSetDocValues> sortedNumericAsSortedSetDocValues(String field, LegacyNumericType numTyp) {\n    return (ctx) -> {\n      final SortedNumericDocValues numerics = DocValues.getSortedNumeric(ctx, field);\n      final BytesRefBuilder bytes = new BytesRefBuilder();\n      \n      final LongConsumer coder = coder(bytes, numTyp, field);\n      \n      return new SortedSetDocValues() {\n\n        private int index = Integer.MIN_VALUE;\n\n        @Override\n        public long nextOrd() {\n          return index < numerics.count()-1 ? ++index : NO_MORE_ORDS;\n        }\n\n        @Override\n        public void setDocument(int docID) {\n          numerics.setDocument(docID);\n          index=-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(long ord) {\n          assert ord>=0 && ord<numerics.count();\n          final long value = numerics.valueAt((int)ord);\n          coder.accept(value);\n          return bytes.get();\n        }\n\n        @Override\n        public long getValueCount() {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n        \n        @Override\n        public long lookupTerm(BytesRef key) {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n      };\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c82557b0a8c9d4012f208e5de912ae7500ea351","date":1471888093,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/DocValuesTermsCollector#sortedNumericAsSortedSetDocValues(String,LegacyNumericType).mjava","sourceNew":null,"sourceOld":"  /** this adapter is quite weird. ords are per doc index, don't use ords across different docs*/\n  static Function<SortedSetDocValues> sortedNumericAsSortedSetDocValues(String field, LegacyNumericType numTyp) {\n    return (ctx) -> {\n      final SortedNumericDocValues numerics = DocValues.getSortedNumeric(ctx, field);\n      final BytesRefBuilder bytes = new BytesRefBuilder();\n      \n      final LongConsumer coder = coder(bytes, numTyp, field);\n      \n      return new SortedSetDocValues() {\n\n        private int index = Integer.MIN_VALUE;\n\n        @Override\n        public long nextOrd() {\n          return index < numerics.count()-1 ? ++index : NO_MORE_ORDS;\n        }\n\n        @Override\n        public void setDocument(int docID) {\n          numerics.setDocument(docID);\n          index=-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(long ord) {\n          assert ord>=0 && ord<numerics.count();\n          final long value = numerics.valueAt((int)ord);\n          coder.accept(value);\n          return bytes.get();\n        }\n\n        @Override\n        public long getValueCount() {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n        \n        @Override\n        public long lookupTerm(BytesRef key) {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n      };\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/DocValuesTermsCollector#sortedNumericAsSortedSetDocValues(String,LegacyNumericType).mjava","sourceNew":null,"sourceOld":"  /** this adapter is quite weird. ords are per doc index, don't use ords across different docs*/\n  static Function<SortedSetDocValues> sortedNumericAsSortedSetDocValues(String field, LegacyNumericType numTyp) {\n    return (ctx) -> {\n      final SortedNumericDocValues numerics = DocValues.getSortedNumeric(ctx, field);\n      final BytesRefBuilder bytes = new BytesRefBuilder();\n      \n      final LongConsumer coder = coder(bytes, numTyp, field);\n      \n      return new SortedSetDocValues() {\n\n        private int index = Integer.MIN_VALUE;\n\n        @Override\n        public long nextOrd() {\n          return index < numerics.count()-1 ? ++index : NO_MORE_ORDS;\n        }\n\n        @Override\n        public void setDocument(int docID) {\n          numerics.setDocument(docID);\n          index=-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(long ord) {\n          assert ord>=0 && ord<numerics.count();\n          final long value = numerics.valueAt((int)ord);\n          coder.accept(value);\n          return bytes.get();\n        }\n\n        @Override\n        public long getValueCount() {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n        \n        @Override\n        public long lookupTerm(BytesRef key) {\n          throw new UnsupportedOperationException(\"it's just number encoding wrapper\");\n        }\n      };\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"0c82557b0a8c9d4012f208e5de912ae7500ea351":["403d05f7f8d69b65659157eff1bc1d2717f04c66","50b8410419cbbe9d8e1a96c918a951976bffe680"],"50b8410419cbbe9d8e1a96c918a951976bffe680":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["403d05f7f8d69b65659157eff1bc1d2717f04c66","0c82557b0a8c9d4012f208e5de912ae7500ea351"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["0c82557b0a8c9d4012f208e5de912ae7500ea351","50b8410419cbbe9d8e1a96c918a951976bffe680","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"0c82557b0a8c9d4012f208e5de912ae7500ea351":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"50b8410419cbbe9d8e1a96c918a951976bffe680":["0c82557b0a8c9d4012f208e5de912ae7500ea351"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}