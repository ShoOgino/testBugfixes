{"path":"lucene/core/src/java/org/apache/lucene/util/BitDocIdSet.Builder#or(DocIdSetIterator).mjava","commits":[{"id":"b012914a8110b2ff1d075ed1ef72aa57084d4897","date":1414685177,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BitDocIdSet.Builder#or(DocIdSetIterator).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Add the content of the provided {@link DocIdSetIterator} to this builder.\n     */\n    public void or(DocIdSetIterator it) throws IOException {\n      if (denseSet != null) {\n        // already upgraded\n        denseSet.or(it);\n        return;\n      }\n\n      final long itCost = it.cost();\n      costUpperBound += itCost;\n      if (costUpperBound >= threshold) {\n        costUpperBound = (sparseSet == null ? 0 : sparseSet.approximateCardinality()) + itCost;\n\n        if (costUpperBound >= threshold) {\n          // upgrade\n          denseSet = new FixedBitSet(maxDoc);\n          denseSet.or(it);\n          if (sparseSet != null) {\n            denseSet.or(new BitSetIterator(sparseSet, 0L));\n          }\n          return;\n        }\n      }\n\n      // we are still sparse\n      if (sparseSet == null) {\n        sparseSet = new SparseFixedBitSet(maxDoc);\n      }\n      sparseSet.or(it);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e91a2d9ed80172872da0f517870da6756289554","date":1436431140,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/BitDocIdSet.Builder#or(DocIdSetIterator).mjava","sourceNew":null,"sourceOld":"    /**\n     * Add the content of the provided {@link DocIdSetIterator} to this builder.\n     */\n    public void or(DocIdSetIterator it) throws IOException {\n      if (denseSet != null) {\n        // already upgraded\n        denseSet.or(it);\n        return;\n      }\n\n      final long itCost = it.cost();\n      costUpperBound += itCost;\n      if (costUpperBound >= threshold) {\n        costUpperBound = (sparseSet == null ? 0 : sparseSet.approximateCardinality()) + itCost;\n\n        if (costUpperBound >= threshold) {\n          // upgrade\n          denseSet = new FixedBitSet(maxDoc);\n          denseSet.or(it);\n          if (sparseSet != null) {\n            denseSet.or(new BitSetIterator(sparseSet, 0L));\n          }\n          return;\n        }\n      }\n\n      // we are still sparse\n      if (sparseSet == null) {\n        sparseSet = new SparseFixedBitSet(maxDoc);\n      }\n      sparseSet.or(it);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b012914a8110b2ff1d075ed1ef72aa57084d4897":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e91a2d9ed80172872da0f517870da6756289554":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e91a2d9ed80172872da0f517870da6756289554"]},"commit2Childs":{"b012914a8110b2ff1d075ed1ef72aa57084d4897":["0e91a2d9ed80172872da0f517870da6756289554"],"0e91a2d9ed80172872da0f517870da6756289554":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}