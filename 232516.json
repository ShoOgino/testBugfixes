{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testEmptyReader().mjava","commits":[{"id":"24730daba4a74cb3bd673ccacc4ddaee5963af02","date":1385133691,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testEmptyReader().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEmptyReader() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    // Make sure the index is created?\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = (InputIterator) dictionary.getWordsIterator();\n\n    assertNull(inputIterator.next());\n    assertEquals(inputIterator.weight(), 0);\n    assertNull(inputIterator.payload());\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testEmptyReader().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEmptyReader() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    // Make sure the index is created?\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = (InputIterator) dictionary.getWordsIterator();\n\n    assertNull(inputIterator.next());\n    assertEquals(inputIterator.weight(), 0);\n    assertNull(inputIterator.payload());\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a645276cbaf5dc96a42fd473b9019bde352996c8","date":1391806699,"type":3,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testEmptyReader().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testEmptyReader().mjava","sourceNew":"  @Test\n  public void testEmptyReader() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    // Make sure the index is created?\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n\n    assertNull(inputIterator.next());\n    assertEquals(inputIterator.weight(), 0);\n    assertNull(inputIterator.payload());\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testEmptyReader() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    // Make sure the index is created?\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = (InputIterator) dictionary.getWordsIterator();\n\n    assertNull(inputIterator.next());\n    assertEquals(inputIterator.weight(), 0);\n    assertNull(inputIterator.payload());\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testEmptyReader().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testEmptyReader().mjava","sourceNew":"  @Test\n  public void testEmptyReader() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    // Make sure the index is created?\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    writer.commit();\n    writer.shutdown();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n\n    assertNull(inputIterator.next());\n    assertEquals(inputIterator.weight(), 0);\n    assertNull(inputIterator.payload());\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testEmptyReader() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    // Make sure the index is created?\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n\n    assertNull(inputIterator.next());\n    assertEquals(inputIterator.weight(), 0);\n    assertNull(inputIterator.payload());\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testEmptyReader().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testEmptyReader().mjava","sourceNew":"  @Test\n  public void testEmptyReader() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    // Make sure the index is created?\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    writer.commit();\n    writer.shutdown();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n\n    assertNull(inputIterator.next());\n    assertEquals(inputIterator.weight(), 0);\n    assertNull(inputIterator.payload());\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testEmptyReader() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    // Make sure the index is created?\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    writer.commit();\n    writer.shutdown();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n\n    assertNull(inputIterator.next());\n    assertEquals(inputIterator.weight(), 0);\n    assertNull(inputIterator.payload());\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testEmptyReader().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testEmptyReader().mjava","sourceNew":"  @Test\n  public void testEmptyReader() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    // Make sure the index is created?\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n\n    assertNull(inputIterator.next());\n    assertEquals(inputIterator.weight(), 0);\n    assertNull(inputIterator.payload());\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testEmptyReader() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    // Make sure the index is created?\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    writer.commit();\n    writer.shutdown();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n\n    assertNull(inputIterator.next());\n    assertEquals(inputIterator.weight(), 0);\n    assertNull(inputIterator.payload());\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testEmptyReader().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testEmptyReader().mjava","sourceNew":"  @Test\n  public void testEmptyReader() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    // Make sure the index is created?\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n\n    assertNull(inputIterator.next());\n    assertEquals(inputIterator.weight(), 0);\n    assertNull(inputIterator.payload());\n    \n    IOUtils.close(ir, analyzer, dir);\n  }\n\n","sourceOld":"  @Test\n  public void testEmptyReader() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    // Make sure the index is created?\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n\n    assertNull(inputIterator.next());\n    assertEquals(inputIterator.weight(), 0);\n    assertNull(inputIterator.payload());\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testEmptyReader().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testEmptyReader().mjava","sourceNew":"  @Test\n  public void testEmptyReader() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    // Make sure the index is created?\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n\n    assertNull(inputIterator.next());\n    assertEquals(inputIterator.weight(), 0);\n    assertNull(inputIterator.payload());\n    \n    IOUtils.close(ir, analyzer, dir);\n  }\n\n","sourceOld":"  @Test\n  public void testEmptyReader() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    // Make sure the index is created?\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n\n    assertNull(inputIterator.next());\n    assertEquals(inputIterator.weight(), 0);\n    assertNull(inputIterator.payload());\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24730daba4a74cb3bd673ccacc4ddaee5963af02":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d0ef034a4f10871667ae75181537775ddcf8ade4","a56958d7f71a28824f20031ffbb2e13502a0274e"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","24730daba4a74cb3bd673ccacc4ddaee5963af02"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["a645276cbaf5dc96a42fd473b9019bde352996c8"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a645276cbaf5dc96a42fd473b9019bde352996c8":["24730daba4a74cb3bd673ccacc4ddaee5963af02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"24730daba4a74cb3bd673ccacc4ddaee5963af02":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","a645276cbaf5dc96a42fd473b9019bde352996c8"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24730daba4a74cb3bd673ccacc4ddaee5963af02","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a645276cbaf5dc96a42fd473b9019bde352996c8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}