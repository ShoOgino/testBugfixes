{"path":"lucene/analysis/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","pathOld":"modules/analysis/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","sourceNew":"  /**\n   * Entry point to the DiffIt application.\n   * <p>\n   * This application takes one argument, the path to a file containing a\n   * stemmer table. The program reads the file and generates the patch commands\n   * for the stems.\n   * \n   * @param args the path to a file containing a stemmer table\n   */\n  public static void main(java.lang.String[] args) {\n    \n    int ins = get(0, args[0]);\n    int del = get(1, args[0]);\n    int rep = get(2, args[0]);\n    int nop = get(3, args[0]);\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff(ins, del, rep, nop);\n      try {\n        in = new LineNumberReader(new BufferedReader(new FileReader(args[i])));\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase();\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            System.out.println(stem + \" -a\");\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                System.out.println(stem + \" \" + diff.exec(token, stem));\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n        \n      } catch (IOException x) {\n        x.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point to the DiffIt application.\n   * <p>\n   * This application takes one argument, the path to a file containing a\n   * stemmer table. The program reads the file and generates the patch commands\n   * for the stems.\n   * \n   * @param args the path to a file containing a stemmer table\n   */\n  public static void main(java.lang.String[] args) {\n    \n    int ins = get(0, args[0]);\n    int del = get(1, args[0]);\n    int rep = get(2, args[0]);\n    int nop = get(3, args[0]);\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff(ins, del, rep, nop);\n      try {\n        in = new LineNumberReader(new BufferedReader(new FileReader(args[i])));\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase();\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            System.out.println(stem + \" -a\");\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                System.out.println(stem + \" \" + diff.exec(token, stem));\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n        \n      } catch (IOException x) {\n        x.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c70cdb81dc660d90f9d0664dd91b473b7e66563","date":1341679310,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","sourceNew":"  /**\n   * Entry point to the DiffIt application.\n   * <p>\n   * This application takes one argument, the path to a file containing a\n   * stemmer table. The program reads the file and generates the patch commands\n   * for the stems.\n   * \n   * @param args the path to a file containing a stemmer table\n   */\n  public static void main(java.lang.String[] args) {\n    \n    int ins = get(0, args[0]);\n    int del = get(1, args[0]);\n    int rep = get(2, args[0]);\n    int nop = get(3, args[0]);\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff(ins, del, rep, nop);\n      try {\n        String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n        in = new LineNumberReader(new BufferedReader(new InputStreamReader(new FileInputStream(args[i]), charset)));\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase(Locale.ROOT);\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            System.out.println(stem + \" -a\");\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                System.out.println(stem + \" \" + diff.exec(token, stem));\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n        \n      } catch (IOException x) {\n        x.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point to the DiffIt application.\n   * <p>\n   * This application takes one argument, the path to a file containing a\n   * stemmer table. The program reads the file and generates the patch commands\n   * for the stems.\n   * \n   * @param args the path to a file containing a stemmer table\n   */\n  public static void main(java.lang.String[] args) {\n    \n    int ins = get(0, args[0]);\n    int del = get(1, args[0]);\n    int rep = get(2, args[0]);\n    int nop = get(3, args[0]);\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff(ins, del, rep, nop);\n      try {\n        in = new LineNumberReader(new BufferedReader(new FileReader(args[i])));\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase();\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            System.out.println(stem + \" -a\");\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                System.out.println(stem + \" \" + diff.exec(token, stem));\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n        \n      } catch (IOException x) {\n        x.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","sourceNew":"  /**\n   * Entry point to the DiffIt application.\n   * <p>\n   * This application takes one argument, the path to a file containing a\n   * stemmer table. The program reads the file and generates the patch commands\n   * for the stems.\n   * \n   * @param args the path to a file containing a stemmer table\n   */\n  public static void main(java.lang.String[] args) {\n    \n    int ins = get(0, args[0]);\n    int del = get(1, args[0]);\n    int rep = get(2, args[0]);\n    int nop = get(3, args[0]);\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff(ins, del, rep, nop);\n      try {\n        String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n        in = new LineNumberReader(new BufferedReader(new InputStreamReader(new FileInputStream(args[i]), charset)));\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase(Locale.ROOT);\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            System.out.println(stem + \" -a\");\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                System.out.println(stem + \" \" + diff.exec(token, stem));\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n        \n      } catch (IOException x) {\n        x.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point to the DiffIt application.\n   * <p>\n   * This application takes one argument, the path to a file containing a\n   * stemmer table. The program reads the file and generates the patch commands\n   * for the stems.\n   * \n   * @param args the path to a file containing a stemmer table\n   */\n  public static void main(java.lang.String[] args) {\n    \n    int ins = get(0, args[0]);\n    int del = get(1, args[0]);\n    int rep = get(2, args[0]);\n    int nop = get(3, args[0]);\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff(ins, del, rep, nop);\n      try {\n        in = new LineNumberReader(new BufferedReader(new FileReader(args[i])));\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase();\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            System.out.println(stem + \" -a\");\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                System.out.println(stem + \" \" + diff.exec(token, stem));\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n        \n      } catch (IOException x) {\n        x.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","sourceNew":"  /**\n   * Entry point to the DiffIt application.\n   * <p>\n   * This application takes one argument, the path to a file containing a\n   * stemmer table. The program reads the file and generates the patch commands\n   * for the stems.\n   * \n   * @param args the path to a file containing a stemmer table\n   */\n  public static void main(java.lang.String[] args) {\n    \n    int ins = get(0, args[0]);\n    int del = get(1, args[0]);\n    int rep = get(2, args[0]);\n    int nop = get(3, args[0]);\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff(ins, del, rep, nop);\n      try {\n        String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n        in = new LineNumberReader(new BufferedReader(new InputStreamReader(new FileInputStream(args[i]), charset)));\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase(Locale.ROOT);\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            System.out.println(stem + \" -a\");\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                System.out.println(stem + \" \" + diff.exec(token, stem));\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n        \n      } catch (IOException x) {\n        x.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point to the DiffIt application.\n   * <p>\n   * This application takes one argument, the path to a file containing a\n   * stemmer table. The program reads the file and generates the patch commands\n   * for the stems.\n   * \n   * @param args the path to a file containing a stemmer table\n   */\n  public static void main(java.lang.String[] args) {\n    \n    int ins = get(0, args[0]);\n    int del = get(1, args[0]);\n    int rep = get(2, args[0]);\n    int nop = get(3, args[0]);\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff(ins, del, rep, nop);\n      try {\n        in = new LineNumberReader(new BufferedReader(new FileReader(args[i])));\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase();\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            System.out.println(stem + \" -a\");\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                System.out.println(stem + \" \" + diff.exec(token, stem));\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n        \n      } catch (IOException x) {\n        x.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a","date":1342021960,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","sourceNew":"  /**\n   * Entry point to the DiffIt application.\n   * <p>\n   * This application takes one argument, the path to a file containing a\n   * stemmer table. The program reads the file and generates the patch commands\n   * for the stems.\n   * \n   * @param args the path to a file containing a stemmer table\n   */\n  public static void main(java.lang.String[] args) throws Exception {\n    \n    int ins = get(0, args[0]);\n    int del = get(1, args[0]);\n    int rep = get(2, args[0]);\n    int nop = get(3, args[0]);\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff(ins, del, rep, nop);\n      String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n      in = new LineNumberReader(new BufferedReader(new InputStreamReader(new FileInputStream(args[i]), charset)));\n      for (String line = in.readLine(); line != null; line = in.readLine()) {\n        try {\n          line = line.toLowerCase(Locale.ROOT);\n          StringTokenizer st = new StringTokenizer(line);\n          String stem = st.nextToken();\n          System.out.println(stem + \" -a\");\n          while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.equals(stem) == false) {\n              System.out.println(stem + \" \" + diff.exec(token, stem));\n            }\n          }\n        } catch (java.util.NoSuchElementException x) {\n          // no base token (stem) on a line\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point to the DiffIt application.\n   * <p>\n   * This application takes one argument, the path to a file containing a\n   * stemmer table. The program reads the file and generates the patch commands\n   * for the stems.\n   * \n   * @param args the path to a file containing a stemmer table\n   */\n  public static void main(java.lang.String[] args) {\n    \n    int ins = get(0, args[0]);\n    int del = get(1, args[0]);\n    int rep = get(2, args[0]);\n    int nop = get(3, args[0]);\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff(ins, del, rep, nop);\n      try {\n        String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n        in = new LineNumberReader(new BufferedReader(new InputStreamReader(new FileInputStream(args[i]), charset)));\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase(Locale.ROOT);\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            System.out.println(stem + \" -a\");\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                System.out.println(stem + \" \" + diff.exec(token, stem));\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n        \n      } catch (IOException x) {\n        x.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":["67748b41458c73d49a48168362cc7f4c960a2542","9c70cdb81dc660d90f9d0664dd91b473b7e66563"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","sourceNew":"  /**\n   * Entry point to the DiffIt application.\n   * <p>\n   * This application takes one argument, the path to a file containing a\n   * stemmer table. The program reads the file and generates the patch commands\n   * for the stems.\n   * \n   * @param args the path to a file containing a stemmer table\n   */\n  public static void main(java.lang.String[] args) throws Exception {\n    \n    int ins = get(0, args[0]);\n    int del = get(1, args[0]);\n    int rep = get(2, args[0]);\n    int nop = get(3, args[0]);\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff(ins, del, rep, nop);\n      String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n      in = new LineNumberReader(new BufferedReader(new InputStreamReader(new FileInputStream(args[i]), charset)));\n      for (String line = in.readLine(); line != null; line = in.readLine()) {\n        try {\n          line = line.toLowerCase(Locale.ROOT);\n          StringTokenizer st = new StringTokenizer(line);\n          String stem = st.nextToken();\n          System.out.println(stem + \" -a\");\n          while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.equals(stem) == false) {\n              System.out.println(stem + \" \" + diff.exec(token, stem));\n            }\n          }\n        } catch (java.util.NoSuchElementException x) {\n          // no base token (stem) on a line\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point to the DiffIt application.\n   * <p>\n   * This application takes one argument, the path to a file containing a\n   * stemmer table. The program reads the file and generates the patch commands\n   * for the stems.\n   * \n   * @param args the path to a file containing a stemmer table\n   */\n  public static void main(java.lang.String[] args) {\n    \n    int ins = get(0, args[0]);\n    int del = get(1, args[0]);\n    int rep = get(2, args[0]);\n    int nop = get(3, args[0]);\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff(ins, del, rep, nop);\n      try {\n        in = new LineNumberReader(new BufferedReader(new FileReader(args[i])));\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase();\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            System.out.println(stem + \" -a\");\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                System.out.println(stem + \" \" + diff.exec(token, stem));\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n        \n      } catch (IOException x) {\n        x.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","sourceNew":"  /**\n   * Entry point to the DiffIt application.\n   * <p>\n   * This application takes one argument, the path to a file containing a\n   * stemmer table. The program reads the file and generates the patch commands\n   * for the stems.\n   * \n   * @param args the path to a file containing a stemmer table\n   */\n  public static void main(java.lang.String[] args) throws Exception {\n    \n    int ins = get(0, args[0]);\n    int del = get(1, args[0]);\n    int rep = get(2, args[0]);\n    int nop = get(3, args[0]);\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff(ins, del, rep, nop);\n      String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n      in = new LineNumberReader(new BufferedReader(new InputStreamReader(new FileInputStream(args[i]), charset)));\n      for (String line = in.readLine(); line != null; line = in.readLine()) {\n        try {\n          line = line.toLowerCase(Locale.ROOT);\n          StringTokenizer st = new StringTokenizer(line);\n          String stem = st.nextToken();\n          System.out.println(stem + \" -a\");\n          while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.equals(stem) == false) {\n              System.out.println(stem + \" \" + diff.exec(token, stem));\n            }\n          }\n        } catch (java.util.NoSuchElementException x) {\n          // no base token (stem) on a line\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point to the DiffIt application.\n   * <p>\n   * This application takes one argument, the path to a file containing a\n   * stemmer table. The program reads the file and generates the patch commands\n   * for the stems.\n   * \n   * @param args the path to a file containing a stemmer table\n   */\n  public static void main(java.lang.String[] args) {\n    \n    int ins = get(0, args[0]);\n    int del = get(1, args[0]);\n    int rep = get(2, args[0]);\n    int nop = get(3, args[0]);\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff(ins, del, rep, nop);\n      try {\n        String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n        in = new LineNumberReader(new BufferedReader(new InputStreamReader(new FileInputStream(args[i]), charset)));\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase(Locale.ROOT);\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            System.out.println(stem + \" -a\");\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                System.out.println(stem + \" \" + diff.exec(token, stem));\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n        \n      } catch (IOException x) {\n        x.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","sourceNew":"  /**\n   * Entry point to the DiffIt application.\n   * <p>\n   * This application takes one argument, the path to a file containing a\n   * stemmer table. The program reads the file and generates the patch commands\n   * for the stems.\n   * \n   * @param args the path to a file containing a stemmer table\n   */\n  public static void main(java.lang.String[] args) throws Exception {\n    \n    int ins = get(0, args[0]);\n    int del = get(1, args[0]);\n    int rep = get(2, args[0]);\n    int nop = get(3, args[0]);\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff(ins, del, rep, nop);\n      String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n      in = new LineNumberReader(Files.newBufferedReader(Paths.get(args[i]), Charset.forName(charset)));\n      for (String line = in.readLine(); line != null; line = in.readLine()) {\n        try {\n          line = line.toLowerCase(Locale.ROOT);\n          StringTokenizer st = new StringTokenizer(line);\n          String stem = st.nextToken();\n          System.out.println(stem + \" -a\");\n          while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.equals(stem) == false) {\n              System.out.println(stem + \" \" + diff.exec(token, stem));\n            }\n          }\n        } catch (java.util.NoSuchElementException x) {\n          // no base token (stem) on a line\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point to the DiffIt application.\n   * <p>\n   * This application takes one argument, the path to a file containing a\n   * stemmer table. The program reads the file and generates the patch commands\n   * for the stems.\n   * \n   * @param args the path to a file containing a stemmer table\n   */\n  public static void main(java.lang.String[] args) throws Exception {\n    \n    int ins = get(0, args[0]);\n    int del = get(1, args[0]);\n    int rep = get(2, args[0]);\n    int nop = get(3, args[0]);\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff(ins, del, rep, nop);\n      String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n      in = new LineNumberReader(new BufferedReader(new InputStreamReader(new FileInputStream(args[i]), charset)));\n      for (String line = in.readLine(); line != null; line = in.readLine()) {\n        try {\n          line = line.toLowerCase(Locale.ROOT);\n          StringTokenizer st = new StringTokenizer(line);\n          String stem = st.nextToken();\n          System.out.println(stem + \" -a\");\n          while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.equals(stem) == false) {\n              System.out.println(stem + \" \" + diff.exec(token, stem));\n            }\n          }\n        } catch (java.util.NoSuchElementException x) {\n          // no base token (stem) on a line\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e6d6f6217dc04f29ee177d2837147dd47627787","date":1429543326,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","sourceNew":"  /**\n   * Entry point to the DiffIt application.\n   * <p>\n   * This application takes one argument, the path to a file containing a\n   * stemmer table. The program reads the file and generates the patch commands\n   * for the stems.\n   * \n   * @param args the path to a file containing a stemmer table\n   */\n  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  public static void main(java.lang.String[] args) throws Exception {\n    \n    int ins = get(0, args[0]);\n    int del = get(1, args[0]);\n    int rep = get(2, args[0]);\n    int nop = get(3, args[0]);\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff(ins, del, rep, nop);\n      String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n      in = new LineNumberReader(Files.newBufferedReader(Paths.get(args[i]), Charset.forName(charset)));\n      for (String line = in.readLine(); line != null; line = in.readLine()) {\n        try {\n          line = line.toLowerCase(Locale.ROOT);\n          StringTokenizer st = new StringTokenizer(line);\n          String stem = st.nextToken();\n          System.out.println(stem + \" -a\");\n          while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.equals(stem) == false) {\n              System.out.println(stem + \" \" + diff.exec(token, stem));\n            }\n          }\n        } catch (java.util.NoSuchElementException x) {\n          // no base token (stem) on a line\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point to the DiffIt application.\n   * <p>\n   * This application takes one argument, the path to a file containing a\n   * stemmer table. The program reads the file and generates the patch commands\n   * for the stems.\n   * \n   * @param args the path to a file containing a stemmer table\n   */\n  public static void main(java.lang.String[] args) throws Exception {\n    \n    int ins = get(0, args[0]);\n    int del = get(1, args[0]);\n    int rep = get(2, args[0]);\n    int nop = get(3, args[0]);\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff(ins, del, rep, nop);\n      String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n      in = new LineNumberReader(Files.newBufferedReader(Paths.get(args[i]), Charset.forName(charset)));\n      for (String line = in.readLine(); line != null; line = in.readLine()) {\n        try {\n          line = line.toLowerCase(Locale.ROOT);\n          StringTokenizer st = new StringTokenizer(line);\n          String stem = st.nextToken();\n          System.out.println(stem + \" -a\");\n          while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.equals(stem) == false) {\n              System.out.println(stem + \" \" + diff.exec(token, stem));\n            }\n          }\n        } catch (java.util.NoSuchElementException x) {\n          // no base token (stem) on a line\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf30702df55f3384decc4b0e1033e8bc322e4c71","date":1465480090,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","sourceNew":"  /**\n   * Entry point to the DiffIt application.\n   * <p>\n   * This application takes one argument, the path to a file containing a\n   * stemmer table. The program reads the file and generates the patch commands\n   * for the stems.\n   * \n   * @param args the path to a file containing a stemmer table\n   */\n  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  public static void main(java.lang.String[] args) throws Exception {\n    \n    int ins = get(0, args[0]);\n    int del = get(1, args[0]);\n    int rep = get(2, args[0]);\n    int nop = get(3, args[0]);\n    \n    for (int i = 1; i < args.length; i++) {\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff(ins, del, rep, nop);\n      String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n      try (LineNumberReader in = new LineNumberReader(Files.newBufferedReader(Paths.get(args[i]), Charset.forName(charset)))) {\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase(Locale.ROOT);\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            System.out.println(stem + \" -a\");\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                System.out.println(stem + \" \" + diff.exec(token, stem));\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point to the DiffIt application.\n   * <p>\n   * This application takes one argument, the path to a file containing a\n   * stemmer table. The program reads the file and generates the patch commands\n   * for the stems.\n   * \n   * @param args the path to a file containing a stemmer table\n   */\n  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  public static void main(java.lang.String[] args) throws Exception {\n    \n    int ins = get(0, args[0]);\n    int del = get(1, args[0]);\n    int rep = get(2, args[0]);\n    int nop = get(3, args[0]);\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff(ins, del, rep, nop);\n      String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n      in = new LineNumberReader(Files.newBufferedReader(Paths.get(args[i]), Charset.forName(charset)));\n      for (String line = in.readLine(); line != null; line = in.readLine()) {\n        try {\n          line = line.toLowerCase(Locale.ROOT);\n          StringTokenizer st = new StringTokenizer(line);\n          String stem = st.nextToken();\n          System.out.println(stem + \" -a\");\n          while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.equals(stem) == false) {\n              System.out.println(stem + \" \" + diff.exec(token, stem));\n            }\n          }\n        } catch (java.util.NoSuchElementException x) {\n          // no base token (stem) on a line\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/DiffIt#main(java.lang.String[]).mjava","sourceNew":"  /**\n   * Entry point to the DiffIt application.\n   * <p>\n   * This application takes one argument, the path to a file containing a\n   * stemmer table. The program reads the file and generates the patch commands\n   * for the stems.\n   * \n   * @param args the path to a file containing a stemmer table\n   */\n  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  public static void main(java.lang.String[] args) throws Exception {\n    \n    int ins = get(0, args[0]);\n    int del = get(1, args[0]);\n    int rep = get(2, args[0]);\n    int nop = get(3, args[0]);\n    \n    for (int i = 1; i < args.length; i++) {\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff(ins, del, rep, nop);\n      String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n      try (LineNumberReader in = new LineNumberReader(Files.newBufferedReader(Paths.get(args[i]), Charset.forName(charset)))) {\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase(Locale.ROOT);\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            System.out.println(stem + \" -a\");\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                System.out.println(stem + \" \" + diff.exec(token, stem));\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point to the DiffIt application.\n   * <p>\n   * This application takes one argument, the path to a file containing a\n   * stemmer table. The program reads the file and generates the patch commands\n   * for the stems.\n   * \n   * @param args the path to a file containing a stemmer table\n   */\n  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  public static void main(java.lang.String[] args) throws Exception {\n    \n    int ins = get(0, args[0]);\n    int del = get(1, args[0]);\n    int rep = get(2, args[0]);\n    int nop = get(3, args[0]);\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff(ins, del, rep, nop);\n      String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n      in = new LineNumberReader(Files.newBufferedReader(Paths.get(args[i]), Charset.forName(charset)));\n      for (String line = in.readLine(); line != null; line = in.readLine()) {\n        try {\n          line = line.toLowerCase(Locale.ROOT);\n          StringTokenizer st = new StringTokenizer(line);\n          String stem = st.nextToken();\n          System.out.println(stem + \" -a\");\n          while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.equals(stem) == false) {\n              System.out.println(stem + \" \" + diff.exec(token, stem));\n            }\n          }\n        } catch (java.util.NoSuchElementException x) {\n          // no base token (stem) on a line\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a":["2acf500f78aa12b92e371fd89c719291986b6b90"],"bf30702df55f3384decc4b0e1033e8bc322e4c71":["7e6d6f6217dc04f29ee177d2837147dd47627787"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9c70cdb81dc660d90f9d0664dd91b473b7e66563"],"f4abec28b874149a7223e32cc7a01704c27790de":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7e6d6f6217dc04f29ee177d2837147dd47627787","bf30702df55f3384decc4b0e1033e8bc322e4c71"],"9c70cdb81dc660d90f9d0664dd91b473b7e66563":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"7e6d6f6217dc04f29ee177d2837147dd47627787":["f4abec28b874149a7223e32cc7a01704c27790de"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["46d8ada1fff8d18cb197c38c7983225162599948","2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bf30702df55f3384decc4b0e1033e8bc322e4c71"]},"commit2Childs":{"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a":["f4abec28b874149a7223e32cc7a01704c27790de","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"bf30702df55f3384decc4b0e1033e8bc322e4c71":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2acf500f78aa12b92e371fd89c719291986b6b90":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a","46d8ada1fff8d18cb197c38c7983225162599948"],"f4abec28b874149a7223e32cc7a01704c27790de":["7e6d6f6217dc04f29ee177d2837147dd47627787"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"9c70cdb81dc660d90f9d0664dd91b473b7e66563":["2acf500f78aa12b92e371fd89c719291986b6b90"],"46d8ada1fff8d18cb197c38c7983225162599948":["aba371508186796cc6151d8223a5b4e16d02e26e"],"7e6d6f6217dc04f29ee177d2837147dd47627787":["bf30702df55f3384decc4b0e1033e8bc322e4c71","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["2acf500f78aa12b92e371fd89c719291986b6b90","9c70cdb81dc660d90f9d0664dd91b473b7e66563","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}