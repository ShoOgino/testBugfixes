{"path":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDeleteErrors().mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDeleteErrors().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeleteErrors() throws Exception {\n    final SolrClient solrClient =\n        new HttpSolrClient(solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString());\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final File tmpConfigDir = createTempDir().toFile();\n    tmpConfigDir.deleteOnExit();\n    // Ensure ConfigSet is immutable\n    FileUtils.copyDirectory(configDir, tmpConfigDir);\n    FileUtils.write(new File(tmpConfigDir, \"configsetprops.json\"),\n        getConfigSetProps(ImmutableMap.<String, String>of(\"immutable\", \"true\")));\n    solrCluster.uploadConfigDir(tmpConfigDir, \"configSet\");\n\n    // no ConfigSet name\n    DeleteNoErrorChecking delete = new DeleteNoErrorChecking();\n    verifyException(solrClient, delete, NAME);\n\n    // ConfigSet doesn't exist\n    delete.setConfigSetName(\"configSetBogus\");\n    verifyException(solrClient, delete, \"ConfigSet does not exist\");\n\n    // ConfigSet is immutable\n    delete.setConfigSetName(\"configSet\");\n    verifyException(solrClient, delete, \"Requested delete of immutable ConfigSet\");\n\n    solrClient.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDeleteErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDeleteErrors().mjava","sourceNew":"  @Test\n  public void testDeleteErrors() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final File tmpConfigDir = createTempDir().toFile();\n    tmpConfigDir.deleteOnExit();\n    // Ensure ConfigSet is immutable\n    FileUtils.copyDirectory(configDir, tmpConfigDir);\n    FileUtils.write(new File(tmpConfigDir, \"configsetprops.json\"),\n        getConfigSetProps(ImmutableMap.<String, String>of(\"immutable\", \"true\")));\n    solrCluster.uploadConfigDir(tmpConfigDir, \"configSet\");\n\n    // no ConfigSet name\n    DeleteNoErrorChecking delete = new DeleteNoErrorChecking();\n    verifyException(solrClient, delete, NAME);\n\n    // ConfigSet doesn't exist\n    delete.setConfigSetName(\"configSetBogus\");\n    verifyException(solrClient, delete, \"ConfigSet does not exist\");\n\n    // ConfigSet is immutable\n    delete.setConfigSetName(\"configSet\");\n    verifyException(solrClient, delete, \"Requested delete of immutable ConfigSet\");\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteErrors() throws Exception {\n    final SolrClient solrClient =\n        new HttpSolrClient(solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString());\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final File tmpConfigDir = createTempDir().toFile();\n    tmpConfigDir.deleteOnExit();\n    // Ensure ConfigSet is immutable\n    FileUtils.copyDirectory(configDir, tmpConfigDir);\n    FileUtils.write(new File(tmpConfigDir, \"configsetprops.json\"),\n        getConfigSetProps(ImmutableMap.<String, String>of(\"immutable\", \"true\")));\n    solrCluster.uploadConfigDir(tmpConfigDir, \"configSet\");\n\n    // no ConfigSet name\n    DeleteNoErrorChecking delete = new DeleteNoErrorChecking();\n    verifyException(solrClient, delete, NAME);\n\n    // ConfigSet doesn't exist\n    delete.setConfigSetName(\"configSetBogus\");\n    verifyException(solrClient, delete, \"ConfigSet does not exist\");\n\n    // ConfigSet is immutable\n    delete.setConfigSetName(\"configSet\");\n    verifyException(solrClient, delete, \"Requested delete of immutable ConfigSet\");\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDeleteErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDeleteErrors().mjava","sourceNew":"  @Test\n  public void testDeleteErrors() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final File tmpConfigDir = createTempDir().toFile();\n    tmpConfigDir.deleteOnExit();\n    // Ensure ConfigSet is immutable\n    FileUtils.copyDirectory(configDir, tmpConfigDir);\n    FileUtils.write(new File(tmpConfigDir, \"configsetprops.json\"),\n        getConfigSetProps(ImmutableMap.<String, String>of(\"immutable\", \"true\")));\n    solrCluster.uploadConfigDir(tmpConfigDir, \"configSet\");\n\n    // no ConfigSet name\n    DeleteNoErrorChecking delete = new DeleteNoErrorChecking();\n    verifyException(solrClient, delete, NAME);\n\n    // ConfigSet doesn't exist\n    delete.setConfigSetName(\"configSetBogus\");\n    verifyException(solrClient, delete, \"ConfigSet does not exist\");\n\n    // ConfigSet is immutable\n    delete.setConfigSetName(\"configSet\");\n    verifyException(solrClient, delete, \"Requested delete of immutable ConfigSet\");\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteErrors() throws Exception {\n    final SolrClient solrClient =\n        new HttpSolrClient(solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString());\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final File tmpConfigDir = createTempDir().toFile();\n    tmpConfigDir.deleteOnExit();\n    // Ensure ConfigSet is immutable\n    FileUtils.copyDirectory(configDir, tmpConfigDir);\n    FileUtils.write(new File(tmpConfigDir, \"configsetprops.json\"),\n        getConfigSetProps(ImmutableMap.<String, String>of(\"immutable\", \"true\")));\n    solrCluster.uploadConfigDir(tmpConfigDir, \"configSet\");\n\n    // no ConfigSet name\n    DeleteNoErrorChecking delete = new DeleteNoErrorChecking();\n    verifyException(solrClient, delete, NAME);\n\n    // ConfigSet doesn't exist\n    delete.setConfigSetName(\"configSetBogus\");\n    verifyException(solrClient, delete, \"ConfigSet does not exist\");\n\n    // ConfigSet is immutable\n    delete.setConfigSetName(\"configSet\");\n    verifyException(solrClient, delete, \"Requested delete of immutable ConfigSet\");\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3cc56892371c2fde6f65948862e91c81a2f2503","date":1466364454,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDeleteErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDeleteErrors().mjava","sourceNew":"  @Test\n  public void testDeleteErrors() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final File tmpConfigDir = createTempDir().toFile();\n    tmpConfigDir.deleteOnExit();\n    // Ensure ConfigSet is immutable\n    FileUtils.copyDirectory(configDir, tmpConfigDir);\n    FileUtils.write(new File(tmpConfigDir, \"configsetprops.json\"),\n        getConfigSetProps(ImmutableMap.<String, String>of(\"immutable\", \"true\")), StandardCharsets.UTF_8);\n    solrCluster.uploadConfigDir(tmpConfigDir, \"configSet\");\n\n    // no ConfigSet name\n    DeleteNoErrorChecking delete = new DeleteNoErrorChecking();\n    verifyException(solrClient, delete, NAME);\n\n    // ConfigSet doesn't exist\n    delete.setConfigSetName(\"configSetBogus\");\n    verifyException(solrClient, delete, \"ConfigSet does not exist\");\n\n    // ConfigSet is immutable\n    delete.setConfigSetName(\"configSet\");\n    verifyException(solrClient, delete, \"Requested delete of immutable ConfigSet\");\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteErrors() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final File tmpConfigDir = createTempDir().toFile();\n    tmpConfigDir.deleteOnExit();\n    // Ensure ConfigSet is immutable\n    FileUtils.copyDirectory(configDir, tmpConfigDir);\n    FileUtils.write(new File(tmpConfigDir, \"configsetprops.json\"),\n        getConfigSetProps(ImmutableMap.<String, String>of(\"immutable\", \"true\")));\n    solrCluster.uploadConfigDir(tmpConfigDir, \"configSet\");\n\n    // no ConfigSet name\n    DeleteNoErrorChecking delete = new DeleteNoErrorChecking();\n    verifyException(solrClient, delete, NAME);\n\n    // ConfigSet doesn't exist\n    delete.setConfigSetName(\"configSetBogus\");\n    verifyException(solrClient, delete, \"ConfigSet does not exist\");\n\n    // ConfigSet is immutable\n    delete.setConfigSetName(\"configSet\");\n    verifyException(solrClient, delete, \"Requested delete of immutable ConfigSet\");\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e89a32cc825033ebae8bb9e1c6877c2d9d76749e","date":1476790453,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDeleteErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDeleteErrors().mjava","sourceNew":"  @Test\n  public void testDeleteErrors() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final File tmpConfigDir = createTempDir().toFile();\n    tmpConfigDir.deleteOnExit();\n    // Ensure ConfigSet is immutable\n    FileUtils.copyDirectory(configDir, tmpConfigDir);\n    FileUtils.write(new File(tmpConfigDir, \"configsetprops.json\"),\n        getConfigSetProps(ImmutableMap.<String, String>of(\"immutable\", \"true\")), StandardCharsets.UTF_8);\n    solrCluster.uploadConfigSet(tmpConfigDir.toPath(), \"configSet\");\n\n    // no ConfigSet name\n    DeleteNoErrorChecking delete = new DeleteNoErrorChecking();\n    verifyException(solrClient, delete, NAME);\n\n    // ConfigSet doesn't exist\n    delete.setConfigSetName(\"configSetBogus\");\n    verifyException(solrClient, delete, \"ConfigSet does not exist\");\n\n    // ConfigSet is immutable\n    delete.setConfigSetName(\"configSet\");\n    verifyException(solrClient, delete, \"Requested delete of immutable ConfigSet\");\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteErrors() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final File tmpConfigDir = createTempDir().toFile();\n    tmpConfigDir.deleteOnExit();\n    // Ensure ConfigSet is immutable\n    FileUtils.copyDirectory(configDir, tmpConfigDir);\n    FileUtils.write(new File(tmpConfigDir, \"configsetprops.json\"),\n        getConfigSetProps(ImmutableMap.<String, String>of(\"immutable\", \"true\")), StandardCharsets.UTF_8);\n    solrCluster.uploadConfigDir(tmpConfigDir, \"configSet\");\n\n    // no ConfigSet name\n    DeleteNoErrorChecking delete = new DeleteNoErrorChecking();\n    verifyException(solrClient, delete, NAME);\n\n    // ConfigSet doesn't exist\n    delete.setConfigSetName(\"configSetBogus\");\n    verifyException(solrClient, delete, \"ConfigSet does not exist\");\n\n    // ConfigSet is immutable\n    delete.setConfigSetName(\"configSet\");\n    verifyException(solrClient, delete, \"Requested delete of immutable ConfigSet\");\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDeleteErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDeleteErrors().mjava","sourceNew":"  @Test\n  public void testDeleteErrors() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final File tmpConfigDir = createTempDir().toFile();\n    tmpConfigDir.deleteOnExit();\n    // Ensure ConfigSet is immutable\n    FileUtils.copyDirectory(configDir, tmpConfigDir);\n    FileUtils.write(new File(tmpConfigDir, \"configsetprops.json\"),\n        getConfigSetProps(ImmutableMap.<String, String>of(\"immutable\", \"true\")), StandardCharsets.UTF_8);\n    solrCluster.uploadConfigSet(tmpConfigDir.toPath(), \"configSet\");\n\n    // no ConfigSet name\n    DeleteNoErrorChecking delete = new DeleteNoErrorChecking();\n    verifyException(solrClient, delete, NAME);\n\n    // ConfigSet doesn't exist\n    delete.setConfigSetName(\"configSetBogus\");\n    verifyException(solrClient, delete, \"ConfigSet does not exist\");\n\n    // ConfigSet is immutable\n    delete.setConfigSetName(\"configSet\");\n    verifyException(solrClient, delete, \"Requested delete of immutable ConfigSet\");\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteErrors() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final File tmpConfigDir = createTempDir().toFile();\n    tmpConfigDir.deleteOnExit();\n    // Ensure ConfigSet is immutable\n    FileUtils.copyDirectory(configDir, tmpConfigDir);\n    FileUtils.write(new File(tmpConfigDir, \"configsetprops.json\"),\n        getConfigSetProps(ImmutableMap.<String, String>of(\"immutable\", \"true\")));\n    solrCluster.uploadConfigDir(tmpConfigDir, \"configSet\");\n\n    // no ConfigSet name\n    DeleteNoErrorChecking delete = new DeleteNoErrorChecking();\n    verifyException(solrClient, delete, NAME);\n\n    // ConfigSet doesn't exist\n    delete.setConfigSetName(\"configSetBogus\");\n    verifyException(solrClient, delete, \"ConfigSet does not exist\");\n\n    // ConfigSet is immutable\n    delete.setConfigSetName(\"configSet\");\n    verifyException(solrClient, delete, \"Requested delete of immutable ConfigSet\");\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7612891097d4751617c396cdd7a092833799147","date":1600707827,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDeleteErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDeleteErrors().mjava","sourceNew":"  @Test\n  public void testDeleteErrors() throws Exception {\n    final String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final File tmpConfigDir = createTempDir().toFile();\n    tmpConfigDir.deleteOnExit();\n    // Ensure ConfigSet is immutable\n    FileUtils.copyDirectory(configDir, tmpConfigDir);\n    FileUtils.write(new File(tmpConfigDir, \"configsetprops.json\"),\n        getConfigSetProps(ImmutableMap.<String, String>of(\"immutable\", \"true\")), StandardCharsets.UTF_8);\n    zkConfigManager.uploadConfigDir(tmpConfigDir.toPath(), \"configSet\");\n\n    // no ConfigSet name\n    DeleteNoErrorChecking delete = new DeleteNoErrorChecking();\n    verifyException(solrClient, delete, NAME);\n\n    // ConfigSet doesn't exist\n    delete.setConfigSetName(\"configSetBogus\");\n    verifyException(solrClient, delete, \"ConfigSet does not exist\");\n\n    // ConfigSet is immutable\n    delete.setConfigSetName(\"configSet\");\n    verifyException(solrClient, delete, \"Requested delete of immutable ConfigSet\");\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteErrors() throws Exception {\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final File tmpConfigDir = createTempDir().toFile();\n    tmpConfigDir.deleteOnExit();\n    // Ensure ConfigSet is immutable\n    FileUtils.copyDirectory(configDir, tmpConfigDir);\n    FileUtils.write(new File(tmpConfigDir, \"configsetprops.json\"),\n        getConfigSetProps(ImmutableMap.<String, String>of(\"immutable\", \"true\")), StandardCharsets.UTF_8);\n    solrCluster.uploadConfigSet(tmpConfigDir.toPath(), \"configSet\");\n\n    // no ConfigSet name\n    DeleteNoErrorChecking delete = new DeleteNoErrorChecking();\n    verifyException(solrClient, delete, NAME);\n\n    // ConfigSet doesn't exist\n    delete.setConfigSetName(\"configSetBogus\");\n    verifyException(solrClient, delete, \"ConfigSet does not exist\");\n\n    // ConfigSet is immutable\n    delete.setConfigSetName(\"configSet\");\n    verifyException(solrClient, delete, \"Requested delete of immutable ConfigSet\");\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0709b256ed89906e7b5f558ba1a675826f0a858f","date":1600796219,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDeleteErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testDeleteErrors().mjava","sourceNew":"  @Test\n  public void testDeleteErrors() throws Exception {\n    final String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final File tmpConfigDir = createTempDir().toFile();\n    tmpConfigDir.deleteOnExit();\n    // Ensure ConfigSet is immutable\n    FileUtils.copyDirectory(configDir, tmpConfigDir);\n    FileUtils.write(new File(tmpConfigDir, \"configsetprops.json\"),\n        getConfigSetProps(ImmutableMap.<String, String>of(\"immutable\", \"true\")), UTF_8);\n    zkConfigManager.uploadConfigDir(tmpConfigDir.toPath(), \"configSet\");\n\n    // no ConfigSet name\n    DeleteNoErrorChecking delete = new DeleteNoErrorChecking();\n    verifyException(solrClient, delete, NAME);\n\n    // ConfigSet doesn't exist\n    delete.setConfigSetName(\"configSetBogus\");\n    verifyException(solrClient, delete, \"ConfigSet does not exist\");\n\n    // ConfigSet is immutable\n    delete.setConfigSetName(\"configSet\");\n    verifyException(solrClient, delete, \"Requested delete of immutable ConfigSet\");\n\n    solrClient.close();\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteErrors() throws Exception {\n    final String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final SolrClient solrClient = getHttpSolrClient(baseUrl);\n    final File configDir = getFile(\"solr\").toPath().resolve(\"configsets/configset-2/conf\").toFile();\n    final File tmpConfigDir = createTempDir().toFile();\n    tmpConfigDir.deleteOnExit();\n    // Ensure ConfigSet is immutable\n    FileUtils.copyDirectory(configDir, tmpConfigDir);\n    FileUtils.write(new File(tmpConfigDir, \"configsetprops.json\"),\n        getConfigSetProps(ImmutableMap.<String, String>of(\"immutable\", \"true\")), StandardCharsets.UTF_8);\n    zkConfigManager.uploadConfigDir(tmpConfigDir.toPath(), \"configSet\");\n\n    // no ConfigSet name\n    DeleteNoErrorChecking delete = new DeleteNoErrorChecking();\n    verifyException(solrClient, delete, NAME);\n\n    // ConfigSet doesn't exist\n    delete.setConfigSetName(\"configSetBogus\");\n    verifyException(solrClient, delete, \"ConfigSet does not exist\");\n\n    // ConfigSet is immutable\n    delete.setConfigSetName(\"configSet\");\n    verifyException(solrClient, delete, \"Requested delete of immutable ConfigSet\");\n\n    solrClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7612891097d4751617c396cdd7a092833799147":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["f3cc56892371c2fde6f65948862e91c81a2f2503"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["2209af2c265d2258ec4b29c8cc78622d36994a15","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"f3cc56892371c2fde6f65948862e91c81a2f2503":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"0709b256ed89906e7b5f558ba1a675826f0a858f":["c7612891097d4751617c396cdd7a092833799147"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0709b256ed89906e7b5f558ba1a675826f0a858f"]},"commit2Childs":{"c7612891097d4751617c396cdd7a092833799147":["0709b256ed89906e7b5f558ba1a675826f0a858f"],"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["c7612891097d4751617c396cdd7a092833799147","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["f3cc56892371c2fde6f65948862e91c81a2f2503","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f3cc56892371c2fde6f65948862e91c81a2f2503":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"0709b256ed89906e7b5f558ba1a675826f0a858f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}