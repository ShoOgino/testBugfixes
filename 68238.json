{"path":"lucene/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#indexDocs(IndexWriter).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#indexDocs(IndexWriter).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#indexDocs(IndexWriter).mjava","sourceNew":"  /********************Testing Utils**********************************/\n    \n  private static void indexDocs(IndexWriter writer) throws Exception {\n    Random rnd = random();\n    \n    /**\n     * Generate 10 documents where term n  has a docFreq of n and a totalTermFreq of n*2 (squared). \n     */\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      String content = getContent(i);\n    \n      doc.add(newField(rnd, \"FIELD_1\", content, TextField.TYPE_STORED));\n      //add a different field\n      doc.add(newField(rnd, \"different_field\", \"diff\", TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    \n    //add 10 more docs with the term \"diff\" this will make it have the highest docFreq if we don't ask for the\n    //highest freq terms for a specific field.\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(rnd, \"different_field\", \"diff\", TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    // add some docs where tf < df so we can see if sorting works\n    // highTF low df\n    int highTF = 200;\n    Document doc = new Document();\n    String content = \"\";\n    for (int i = 0; i < highTF; i++) {\n      content += \"highTF \";\n    }\n    doc.add(newField(rnd, \"FIELD_1\", content, TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    // highTF medium df =5\n    int medium_df = 5;\n    for (int i = 0; i < medium_df; i++) {\n      int tf = 25;\n      Document newdoc = new Document();\n      String newcontent = \"\";\n      for (int j = 0; j < tf; j++) {\n        newcontent += \"highTFmedDF \";\n      }\n      newdoc.add(newField(rnd, \"FIELD_1\", newcontent, TextField.TYPE_STORED));\n      writer.addDocument(newdoc);\n    }\n    // add a doc with high tf in field different_field\n    int targetTF =150;\n    doc = new Document();\n    content = \"\";\n    for (int i = 0; i < targetTF; i++) {\n      content += \"TF150 \";\n    }\n    doc.add(newField(rnd, \"different_field\", content, TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n    \n  }\n\n","sourceOld":"  /********************Testing Utils**********************************/\n    \n  private static void indexDocs(IndexWriter writer) throws Exception {\n    Random rnd = random();\n    \n    /**\n     * Generate 10 documents where term n  has a docFreq of n and a totalTermFreq of n*2 (squared). \n     */\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      String content = getContent(i);\n    \n      doc.add(newField(rnd, \"FIELD_1\", content, TextField.TYPE_STORED));\n      //add a different field\n      doc.add(newField(rnd, \"different_field\", \"diff\", TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    \n    //add 10 more docs with the term \"diff\" this will make it have the highest docFreq if we don't ask for the\n    //highest freq terms for a specific field.\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(rnd, \"different_field\", \"diff\", TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    // add some docs where tf < df so we can see if sorting works\n    // highTF low df\n    int highTF = 200;\n    Document doc = new Document();\n    String content = \"\";\n    for (int i = 0; i < highTF; i++) {\n      content += \"highTF \";\n    }\n    doc.add(newField(rnd, \"FIELD_1\", content, TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    // highTF medium df =5\n    int medium_df = 5;\n    for (int i = 0; i < medium_df; i++) {\n      int tf = 25;\n      Document newdoc = new Document();\n      String newcontent = \"\";\n      for (int j = 0; j < tf; j++) {\n        newcontent += \"highTFmedDF \";\n      }\n      newdoc.add(newField(rnd, \"FIELD_1\", newcontent, TextField.TYPE_STORED));\n      writer.addDocument(newdoc);\n    }\n    // add a doc with high tf in field different_field\n    int targetTF =150;\n    doc = new Document();\n    content = \"\";\n    for (int i = 0; i < targetTF; i++) {\n      content += \"TF150 \";\n    }\n    doc.add(newField(rnd, \"different_field\", content, TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#indexDocs(IndexWriter).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#indexDocs(IndexWriter).mjava","sourceNew":"  /********************Testing Utils**********************************/\n    \n  private static void indexDocs(IndexWriter writer) throws Exception {\n    Random rnd = random();\n    \n    /**\n     * Generate 10 documents where term n  has a docFreq of n and a totalTermFreq of n*2 (squared). \n     */\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      String content = getContent(i);\n    \n      doc.add(newTextField(rnd, \"FIELD_1\", content, Field.Store.YES));\n      //add a different field\n      doc.add(newTextField(rnd, \"different_field\", \"diff\", Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    \n    //add 10 more docs with the term \"diff\" this will make it have the highest docFreq if we don't ask for the\n    //highest freq terms for a specific field.\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(rnd, \"different_field\", \"diff\", Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    // add some docs where tf < df so we can see if sorting works\n    // highTF low df\n    int highTF = 200;\n    Document doc = new Document();\n    String content = \"\";\n    for (int i = 0; i < highTF; i++) {\n      content += \"highTF \";\n    }\n    doc.add(newTextField(rnd, \"FIELD_1\", content, Field.Store.YES));\n    writer.addDocument(doc);\n    // highTF medium df =5\n    int medium_df = 5;\n    for (int i = 0; i < medium_df; i++) {\n      int tf = 25;\n      Document newdoc = new Document();\n      String newcontent = \"\";\n      for (int j = 0; j < tf; j++) {\n        newcontent += \"highTFmedDF \";\n      }\n      newdoc.add(newTextField(rnd, \"FIELD_1\", newcontent, Field.Store.YES));\n      writer.addDocument(newdoc);\n    }\n    // add a doc with high tf in field different_field\n    int targetTF =150;\n    doc = new Document();\n    content = \"\";\n    for (int i = 0; i < targetTF; i++) {\n      content += \"TF150 \";\n    }\n    doc.add(newTextField(rnd, \"different_field\", content, Field.Store.YES));\n    writer.addDocument(doc);\n    writer.close();\n    \n  }\n\n","sourceOld":"  /********************Testing Utils**********************************/\n    \n  private static void indexDocs(IndexWriter writer) throws Exception {\n    Random rnd = random();\n    \n    /**\n     * Generate 10 documents where term n  has a docFreq of n and a totalTermFreq of n*2 (squared). \n     */\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      String content = getContent(i);\n    \n      doc.add(newField(rnd, \"FIELD_1\", content, TextField.TYPE_STORED));\n      //add a different field\n      doc.add(newField(rnd, \"different_field\", \"diff\", TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    \n    //add 10 more docs with the term \"diff\" this will make it have the highest docFreq if we don't ask for the\n    //highest freq terms for a specific field.\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      doc.add(newField(rnd, \"different_field\", \"diff\", TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    // add some docs where tf < df so we can see if sorting works\n    // highTF low df\n    int highTF = 200;\n    Document doc = new Document();\n    String content = \"\";\n    for (int i = 0; i < highTF; i++) {\n      content += \"highTF \";\n    }\n    doc.add(newField(rnd, \"FIELD_1\", content, TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    // highTF medium df =5\n    int medium_df = 5;\n    for (int i = 0; i < medium_df; i++) {\n      int tf = 25;\n      Document newdoc = new Document();\n      String newcontent = \"\";\n      for (int j = 0; j < tf; j++) {\n        newcontent += \"highTFmedDF \";\n      }\n      newdoc.add(newField(rnd, \"FIELD_1\", newcontent, TextField.TYPE_STORED));\n      writer.addDocument(newdoc);\n    }\n    // add a doc with high tf in field different_field\n    int targetTF =150;\n    doc = new Document();\n    content = \"\";\n    for (int i = 0; i < targetTF; i++) {\n      content += \"TF150 \";\n    }\n    doc.add(newField(rnd, \"different_field\", content, TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n    \n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#indexDocs(IndexWriter).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#indexDocs(IndexWriter).mjava","sourceNew":"  /********************Testing Utils**********************************/\n    \n  private static void indexDocs(IndexWriter writer) throws Exception {\n    Random rnd = random();\n    \n    /**\n     * Generate 10 documents where term n  has a docFreq of n and a totalTermFreq of n*2 (squared). \n     */\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      String content = getContent(i);\n    \n      doc.add(newTextField(rnd, \"FIELD_1\", content, Field.Store.YES));\n      //add a different field\n      doc.add(newTextField(rnd, \"different_field\", \"diff\", Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    \n    //add 10 more docs with the term \"diff\" this will make it have the highest docFreq if we don't ask for the\n    //highest freq terms for a specific field.\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(rnd, \"different_field\", \"diff\", Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    // add some docs where tf < df so we can see if sorting works\n    // highTF low df\n    int highTF = 200;\n    Document doc = new Document();\n    String content = \"\";\n    for (int i = 0; i < highTF; i++) {\n      content += \"highTF \";\n    }\n    doc.add(newTextField(rnd, \"FIELD_1\", content, Field.Store.YES));\n    writer.addDocument(doc);\n    // highTF medium df =5\n    int medium_df = 5;\n    for (int i = 0; i < medium_df; i++) {\n      int tf = 25;\n      Document newdoc = new Document();\n      String newcontent = \"\";\n      for (int j = 0; j < tf; j++) {\n        newcontent += \"highTFmedDF \";\n      }\n      newdoc.add(newTextField(rnd, \"FIELD_1\", newcontent, Field.Store.YES));\n      writer.addDocument(newdoc);\n    }\n    // add a doc with high tf in field different_field\n    int targetTF =150;\n    doc = new Document();\n    content = \"\";\n    for (int i = 0; i < targetTF; i++) {\n      content += \"TF150 \";\n    }\n    doc.add(newTextField(rnd, \"different_field\", content, Field.Store.YES));\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n  }\n\n","sourceOld":"  /********************Testing Utils**********************************/\n    \n  private static void indexDocs(IndexWriter writer) throws Exception {\n    Random rnd = random();\n    \n    /**\n     * Generate 10 documents where term n  has a docFreq of n and a totalTermFreq of n*2 (squared). \n     */\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      String content = getContent(i);\n    \n      doc.add(newTextField(rnd, \"FIELD_1\", content, Field.Store.YES));\n      //add a different field\n      doc.add(newTextField(rnd, \"different_field\", \"diff\", Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    \n    //add 10 more docs with the term \"diff\" this will make it have the highest docFreq if we don't ask for the\n    //highest freq terms for a specific field.\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(rnd, \"different_field\", \"diff\", Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    // add some docs where tf < df so we can see if sorting works\n    // highTF low df\n    int highTF = 200;\n    Document doc = new Document();\n    String content = \"\";\n    for (int i = 0; i < highTF; i++) {\n      content += \"highTF \";\n    }\n    doc.add(newTextField(rnd, \"FIELD_1\", content, Field.Store.YES));\n    writer.addDocument(doc);\n    // highTF medium df =5\n    int medium_df = 5;\n    for (int i = 0; i < medium_df; i++) {\n      int tf = 25;\n      Document newdoc = new Document();\n      String newcontent = \"\";\n      for (int j = 0; j < tf; j++) {\n        newcontent += \"highTFmedDF \";\n      }\n      newdoc.add(newTextField(rnd, \"FIELD_1\", newcontent, Field.Store.YES));\n      writer.addDocument(newdoc);\n    }\n    // add a doc with high tf in field different_field\n    int targetTF =150;\n    doc = new Document();\n    content = \"\";\n    for (int i = 0; i < targetTF; i++) {\n      content += \"TF150 \";\n    }\n    doc.add(newTextField(rnd, \"different_field\", content, Field.Store.YES));\n    writer.addDocument(doc);\n    writer.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#indexDocs(IndexWriter).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#indexDocs(IndexWriter).mjava","sourceNew":"  /********************Testing Utils**********************************/\n    \n  private static void indexDocs(IndexWriter writer) throws Exception {\n    Random rnd = random();\n    \n    /**\n     * Generate 10 documents where term n  has a docFreq of n and a totalTermFreq of n*2 (squared). \n     */\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      String content = getContent(i);\n    \n      doc.add(newTextField(rnd, \"FIELD_1\", content, Field.Store.YES));\n      //add a different field\n      doc.add(newTextField(rnd, \"different_field\", \"diff\", Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    \n    //add 10 more docs with the term \"diff\" this will make it have the highest docFreq if we don't ask for the\n    //highest freq terms for a specific field.\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(rnd, \"different_field\", \"diff\", Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    // add some docs where tf < df so we can see if sorting works\n    // highTF low df\n    int highTF = 200;\n    Document doc = new Document();\n    String content = \"\";\n    for (int i = 0; i < highTF; i++) {\n      content += \"highTF \";\n    }\n    doc.add(newTextField(rnd, \"FIELD_1\", content, Field.Store.YES));\n    writer.addDocument(doc);\n    // highTF medium df =5\n    int medium_df = 5;\n    for (int i = 0; i < medium_df; i++) {\n      int tf = 25;\n      Document newdoc = new Document();\n      String newcontent = \"\";\n      for (int j = 0; j < tf; j++) {\n        newcontent += \"highTFmedDF \";\n      }\n      newdoc.add(newTextField(rnd, \"FIELD_1\", newcontent, Field.Store.YES));\n      writer.addDocument(newdoc);\n    }\n    // add a doc with high tf in field different_field\n    int targetTF =150;\n    doc = new Document();\n    content = \"\";\n    for (int i = 0; i < targetTF; i++) {\n      content += \"TF150 \";\n    }\n    doc.add(newTextField(rnd, \"different_field\", content, Field.Store.YES));\n    writer.addDocument(doc);\n    writer.close();\n    \n  }\n\n","sourceOld":"  /********************Testing Utils**********************************/\n    \n  private static void indexDocs(IndexWriter writer) throws Exception {\n    Random rnd = random();\n    \n    /**\n     * Generate 10 documents where term n  has a docFreq of n and a totalTermFreq of n*2 (squared). \n     */\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      String content = getContent(i);\n    \n      doc.add(newTextField(rnd, \"FIELD_1\", content, Field.Store.YES));\n      //add a different field\n      doc.add(newTextField(rnd, \"different_field\", \"diff\", Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    \n    //add 10 more docs with the term \"diff\" this will make it have the highest docFreq if we don't ask for the\n    //highest freq terms for a specific field.\n    for (int i = 1; i <= 10; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(rnd, \"different_field\", \"diff\", Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    // add some docs where tf < df so we can see if sorting works\n    // highTF low df\n    int highTF = 200;\n    Document doc = new Document();\n    String content = \"\";\n    for (int i = 0; i < highTF; i++) {\n      content += \"highTF \";\n    }\n    doc.add(newTextField(rnd, \"FIELD_1\", content, Field.Store.YES));\n    writer.addDocument(doc);\n    // highTF medium df =5\n    int medium_df = 5;\n    for (int i = 0; i < medium_df; i++) {\n      int tf = 25;\n      Document newdoc = new Document();\n      String newcontent = \"\";\n      for (int j = 0; j < tf; j++) {\n        newcontent += \"highTFmedDF \";\n      }\n      newdoc.add(newTextField(rnd, \"FIELD_1\", newcontent, Field.Store.YES));\n      writer.addDocument(newdoc);\n    }\n    // add a doc with high tf in field different_field\n    int targetTF =150;\n    doc = new Document();\n    content = \"\";\n    for (int i = 0; i < targetTF; i++) {\n      content += \"TF150 \";\n    }\n    doc.add(newTextField(rnd, \"different_field\", content, Field.Store.YES));\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}