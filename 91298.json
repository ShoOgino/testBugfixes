{"path":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestDisjunctionRewrites#testNestedMaxWidth().mjava","commits":[{"id":"4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde","date":1553685823,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestDisjunctionRewrites#testNestedMaxWidth().mjava","pathOld":"/dev/null","sourceNew":"  public void testNestedMaxWidth() {\n    // maxwidth does not automatically pull up disjunctions at construction time, so we need to check\n    // that it does the right thing if wrapped by something that does need exact internal accounting\n    // PHRASE(a, MAXWIDTH(4, OR(ORDERED(b, c), ORDERED(d, e))), f)\n    // => or(PHRASE(a, MAXWIDTH(4, ORDERED(b, c)), f), PHRASE(a, MAXWIDTH(4, ORDERED(d, e)), f))\n    IntervalsSource actual = phrase(term(\"a\"), maxwidth(4, or(ordered(term(\"b\"), term(\"c\")), ordered(term(\"d\"), term(\"e\")))), term(\"f\"));\n    IntervalsSource expected = or(\n        phrase(term(\"a\"), maxwidth(4, ordered(term(\"b\"), term(\"c\"))), term(\"f\")),\n        phrase(term(\"a\"), maxwidth(4, ordered(term(\"d\"), term(\"e\"))), term(\"f\"))\n    );\n    assertEquals(expected, actual);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestDisjunctionRewrites#testNestedMaxWidth().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestDisjunctionRewrites#testNestedMaxWidth().mjava","sourceNew":"  public void testNestedMaxWidth() {\n    // maxwidth does not automatically pull up disjunctions at construction time, so we need to check\n    // that it does the right thing if wrapped by something that does need exact internal accounting\n    // PHRASE(a, MAXWIDTH(4, OR(ORDERED(b, c), ORDERED(d, e))), f)\n    // => or(PHRASE(a, MAXWIDTH(4, ORDERED(b, c)), f), PHRASE(a, MAXWIDTH(4, ORDERED(d, e)), f))\n    IntervalsSource actual = phrase(term(\"a\"), maxwidth(4, or(ordered(term(\"b\"), term(\"c\")), ordered(term(\"d\"), term(\"e\")))), term(\"f\"));\n    IntervalsSource expected = or(\n        phrase(term(\"a\"), maxwidth(4, ordered(term(\"b\"), term(\"c\"))), term(\"f\")),\n        phrase(term(\"a\"), maxwidth(4, ordered(term(\"d\"), term(\"e\"))), term(\"f\"))\n    );\n    assertEquals(expected, actual);\n  }\n\n","sourceOld":"  public void testNestedMaxWidth() {\n    // maxwidth does not automatically pull up disjunctions at construction time, so we need to check\n    // that it does the right thing if wrapped by something that does need exact internal accounting\n    // PHRASE(a, MAXWIDTH(4, OR(ORDERED(b, c), ORDERED(d, e))), f)\n    // => or(PHRASE(a, MAXWIDTH(4, ORDERED(b, c)), f), PHRASE(a, MAXWIDTH(4, ORDERED(d, e)), f))\n    IntervalsSource actual = phrase(term(\"a\"), maxwidth(4, or(ordered(term(\"b\"), term(\"c\")), ordered(term(\"d\"), term(\"e\")))), term(\"f\"));\n    IntervalsSource expected = or(\n        phrase(term(\"a\"), maxwidth(4, ordered(term(\"b\"), term(\"c\"))), term(\"f\")),\n        phrase(term(\"a\"), maxwidth(4, ordered(term(\"d\"), term(\"e\"))), term(\"f\"))\n    );\n    assertEquals(expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde"],"4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}