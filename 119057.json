{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.SpanOrWeight#SpanOrWeight(IndexSearcher,Map[Term,TermContext],List[SpanWeight]).mjava","commits":[{"id":"29aea3139c4326c0501d75d51059855463220279","date":1433952060,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.SpanOrWeight#SpanOrWeight(IndexSearcher,Map[Term,TermContext],List[SpanWeight]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.SpanOrWeight#SpanOrWeight(IndexSearcher,Map[Term,TermContext],SpanCollectorFactory,List[SpanWeight]).mjava","sourceNew":"    public SpanOrWeight(IndexSearcher searcher, Map<Term, TermContext> terms, List<SpanWeight> subWeights) throws IOException {\n      super(SpanOrQuery.this, searcher, terms);\n      this.subWeights = subWeights;\n    }\n\n","sourceOld":"    public SpanOrWeight(IndexSearcher searcher, Map<Term, TermContext> terms, SpanCollectorFactory factory, List<SpanWeight> subWeights) throws IOException {\n      super(SpanOrQuery.this, searcher, terms, factory);\n      this.subWeights = subWeights;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.SpanOrWeight#SpanOrWeight(IndexSearcher,Map[Term,TermContext],List[SpanWeight],float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.SpanOrWeight#SpanOrWeight(IndexSearcher,Map[Term,TermContext],List[SpanWeight]).mjava","sourceNew":"    public SpanOrWeight(IndexSearcher searcher, Map<Term, TermContext> terms, List<SpanWeight> subWeights, float boost) throws IOException {\n      super(SpanOrQuery.this, searcher, terms, boost);\n      this.subWeights = subWeights;\n    }\n\n","sourceOld":"    public SpanOrWeight(IndexSearcher searcher, Map<Term, TermContext> terms, List<SpanWeight> subWeights) throws IOException {\n      super(SpanOrQuery.this, searcher, terms);\n      this.subWeights = subWeights;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.SpanOrWeight#SpanOrWeight(IndexSearcher,Map[Term,TermContext],List[SpanWeight]).mjava","sourceNew":null,"sourceOld":"    public SpanOrWeight(IndexSearcher searcher, Map<Term, TermContext> terms, List<SpanWeight> subWeights) throws IOException {\n      super(SpanOrQuery.this, searcher, terms);\n      this.subWeights = subWeights;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29aea3139c4326c0501d75d51059855463220279":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["29aea3139c4326c0501d75d51059855463220279"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["29aea3139c4326c0501d75d51059855463220279","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"29aea3139c4326c0501d75d51059855463220279":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29aea3139c4326c0501d75d51059855463220279"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}