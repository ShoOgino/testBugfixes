{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterGraphFilter#buffer(char[],int,int,int,int).mjava","commits":[{"id":"098528909bb70948871fd7ed865fafb87ed73964","date":1484667487,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterGraphFilter#buffer(char[],int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * a null termPart means it's a simple slice of the original term\n   */\n  void buffer(char[] termPart, int startPos, int endPos, int startPart, int endPart) {\n    /*\n    System.out.println(\"buffer: pos=\" + startPos + \"-\" + endPos + \" part=\" + startPart + \"-\" + endPart);\n    if (termPart != null) {\n      System.out.println(\"  termIn=\" + new String(termPart));\n    } else {\n      System.out.println(\"  term=\" + new String(savedTermBuffer, startPart, endPart-startPart));\n    }\n    */\n    assert endPos > startPos: \"startPos=\" + startPos + \" endPos=\" + endPos;\n    assert endPart > startPart || (endPart == 0 && startPart == 0 && savedTermLength == 0): \"startPart=\" + startPart + \" endPart=\" + endPart;\n    if ((bufferedLen+1)*4 > bufferedParts.length) {\n      bufferedParts = ArrayUtil.grow(bufferedParts, (bufferedLen+1)*4);\n    }\n    if (bufferedTermParts.length == bufferedLen) {\n      int newSize = ArrayUtil.oversize(bufferedLen+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      char[][] newArray = new char[newSize][];\n      System.arraycopy(bufferedTermParts, 0, newArray, 0, bufferedTermParts.length);\n      bufferedTermParts = newArray;\n    }\n    bufferedTermParts[bufferedLen] = termPart;\n    bufferedParts[bufferedLen*4] = startPos;\n    bufferedParts[bufferedLen*4+1] = endPos;\n    bufferedParts[bufferedLen*4+2] = startPart;\n    bufferedParts[bufferedLen*4+3] = endPart;\n    bufferedLen++;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterGraphFilter#buffer(char[],int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * a null termPart means it's a simple slice of the original term\n   */\n  void buffer(char[] termPart, int startPos, int endPos, int startPart, int endPart) {\n    /*\n    System.out.println(\"buffer: pos=\" + startPos + \"-\" + endPos + \" part=\" + startPart + \"-\" + endPart);\n    if (termPart != null) {\n      System.out.println(\"  termIn=\" + new String(termPart));\n    } else {\n      System.out.println(\"  term=\" + new String(savedTermBuffer, startPart, endPart-startPart));\n    }\n    */\n    assert endPos > startPos: \"startPos=\" + startPos + \" endPos=\" + endPos;\n    assert endPart > startPart || (endPart == 0 && startPart == 0 && savedTermLength == 0): \"startPart=\" + startPart + \" endPart=\" + endPart;\n    if ((bufferedLen+1)*4 > bufferedParts.length) {\n      bufferedParts = ArrayUtil.grow(bufferedParts, (bufferedLen+1)*4);\n    }\n    if (bufferedTermParts.length == bufferedLen) {\n      int newSize = ArrayUtil.oversize(bufferedLen+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      char[][] newArray = new char[newSize][];\n      System.arraycopy(bufferedTermParts, 0, newArray, 0, bufferedTermParts.length);\n      bufferedTermParts = newArray;\n    }\n    bufferedTermParts[bufferedLen] = termPart;\n    bufferedParts[bufferedLen*4] = startPos;\n    bufferedParts[bufferedLen*4+1] = endPos;\n    bufferedParts[bufferedLen*4+2] = startPart;\n    bufferedParts[bufferedLen*4+3] = endPart;\n    bufferedLen++;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"098528909bb70948871fd7ed865fafb87ed73964":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["098528909bb70948871fd7ed865fafb87ed73964"],"302d34f2c66e8d489ee13078305c330cbf67b226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","098528909bb70948871fd7ed865fafb87ed73964"]},"commit2Childs":{"098528909bb70948871fd7ed865fafb87ed73964":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["098528909bb70948871fd7ed865fafb87ed73964","302d34f2c66e8d489ee13078305c330cbf67b226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}