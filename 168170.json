{"path":"solr/core/src/test/org/apache/solr/util/TestRandomMergePolicy#testMethodOverride().mjava","commits":[{"id":"505b4ec77395cb555366a54a97b24b0906a3d056","date":1375203457,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestRandomMergePolicy#testMethodOverride().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Ensure every MP method is overridden by RMP \n   * (future proof ourselves against new methods being added to MP)\n   */\n  public void testMethodOverride() {\n    Class rmp = RandomMergePolicy.class;\n    for (Method meth : rmp.getMethods()) {\n      if (// ignore things like hashCode, equals, etc...\n          meth.getDeclaringClass().equals(Object.class)\n          // can't do anything about it regardless of what class declares it\n          || Modifier.isFinal(meth.getModifiers())) {\n        continue;\n      }\n      assertEquals(\"method not overridden by RandomMergePolicy: \" + \n                   meth.toGenericString(), \n                   rmp, meth.getDeclaringClass());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestRandomMergePolicy#testMethodOverride().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Ensure every MP method is overridden by RMP \n   * (future proof ourselves against new methods being added to MP)\n   */\n  public void testMethodOverride() {\n    Class rmp = RandomMergePolicy.class;\n    for (Method meth : rmp.getMethods()) {\n      if (// ignore things like hashCode, equals, etc...\n          meth.getDeclaringClass().equals(Object.class)\n          // can't do anything about it regardless of what class declares it\n          || Modifier.isFinal(meth.getModifiers())) {\n        continue;\n      }\n      assertEquals(\"method not overridden by RandomMergePolicy: \" + \n                   meth.toGenericString(), \n                   rmp, meth.getDeclaringClass());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e96253deb801879f3fc6373f5069f2debfe797d3","date":1454570664,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/util/TestRandomMergePolicy#testMethodOverride().mjava","sourceNew":null,"sourceOld":"  /**\n   * Ensure every MP method is overridden by RMP \n   * (future proof ourselves against new methods being added to MP)\n   */\n  public void testMethodOverride() {\n    Class rmp = RandomMergePolicy.class;\n    for (Method meth : rmp.getMethods()) {\n      if (// ignore things like hashCode, equals, etc...\n          meth.getDeclaringClass().equals(Object.class)\n          // can't do anything about it regardless of what class declares it\n          || Modifier.isFinal(meth.getModifiers())) {\n        continue;\n      }\n      assertEquals(\"method not overridden by RandomMergePolicy: \" + \n                   meth.toGenericString(), \n                   rmp, meth.getDeclaringClass());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1704c078ec59838c9d95d5bf5738b393b537494","date":1454693901,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/util/TestRandomMergePolicy#testMethodOverride().mjava","sourceNew":null,"sourceOld":"  /**\n   * Ensure every MP method is overridden by RMP \n   * (future proof ourselves against new methods being added to MP)\n   */\n  public void testMethodOverride() {\n    Class rmp = RandomMergePolicy.class;\n    for (Method meth : rmp.getMethods()) {\n      if (// ignore things like hashCode, equals, etc...\n          meth.getDeclaringClass().equals(Object.class)\n          // can't do anything about it regardless of what class declares it\n          || Modifier.isFinal(meth.getModifiers())) {\n        continue;\n      }\n      assertEquals(\"method not overridden by RandomMergePolicy: \" + \n                   meth.toGenericString(), \n                   rmp, meth.getDeclaringClass());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/util/TestRandomMergePolicy#testMethodOverride().mjava","sourceNew":null,"sourceOld":"  /**\n   * Ensure every MP method is overridden by RMP \n   * (future proof ourselves against new methods being added to MP)\n   */\n  public void testMethodOverride() {\n    Class rmp = RandomMergePolicy.class;\n    for (Method meth : rmp.getMethods()) {\n      if (// ignore things like hashCode, equals, etc...\n          meth.getDeclaringClass().equals(Object.class)\n          // can't do anything about it regardless of what class declares it\n          || Modifier.isFinal(meth.getModifiers())) {\n        continue;\n      }\n      assertEquals(\"method not overridden by RandomMergePolicy: \" + \n                   meth.toGenericString(), \n                   rmp, meth.getDeclaringClass());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"505b4ec77395cb555366a54a97b24b0906a3d056":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","505b4ec77395cb555366a54a97b24b0906a3d056"],"e96253deb801879f3fc6373f5069f2debfe797d3":["505b4ec77395cb555366a54a97b24b0906a3d056"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["505b4ec77395cb555366a54a97b24b0906a3d056","e96253deb801879f3fc6373f5069f2debfe797d3"],"b1704c078ec59838c9d95d5bf5738b393b537494":["505b4ec77395cb555366a54a97b24b0906a3d056","e96253deb801879f3fc6373f5069f2debfe797d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e96253deb801879f3fc6373f5069f2debfe797d3"]},"commit2Childs":{"505b4ec77395cb555366a54a97b24b0906a3d056":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","e96253deb801879f3fc6373f5069f2debfe797d3","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b1704c078ec59838c9d95d5bf5738b393b537494"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"e96253deb801879f3fc6373f5069f2debfe797d3":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","b1704c078ec59838c9d95d5bf5738b393b537494","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["505b4ec77395cb555366a54a97b24b0906a3d056","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"b1704c078ec59838c9d95d5bf5738b393b537494":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b1704c078ec59838c9d95d5bf5738b393b537494","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}