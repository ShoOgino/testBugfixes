{"path":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain.WatchLimit#reportLimitViolations().mjava","commits":[{"id":"144b39b0b004b766b7f785a03b6898512514c0c3","date":1411141724,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain.WatchLimit#reportLimitViolations().mjava","pathOld":"/dev/null","sourceNew":"      private String reportLimitViolations() {\n        Object[] maxKeys = maxCounters.keySet().toArray();\n        Arrays.sort(maxKeys, new Comparator<Object>() {\n          private final Comparator<Long> valComp = Ordering.natural().reverse();\n          @Override\n          public int compare(Object o1, Object o2) {\n            return valComp.compare(maxCounters.get(o1), maxCounters.get(o2));\n          }\n        });\n\n        StringBuilder sb = new StringBuilder();\n        boolean first = true;\n        for (Object key : maxKeys) {\n          long value = maxCounters.get(key);\n          if (value <= limit) continue;\n          if (first) {\n            sb.append(\"\\nMaximum concurrent \").append(desc).append(\" watches above limit:\\n\\n\");\n            first = false;\n          }\n          sb.append(\"\\t\").append(maxCounters.get(key)).append('\\t').append(key).append('\\n');\n        }\n        return sb.toString();\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","date":1477689538,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain.WatchLimit#reportLimitViolations().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain.WatchLimit#reportLimitViolations().mjava","sourceNew":"      private String reportLimitViolations() {\n        String[] maxKeys = maxCounters.keySet().toArray(new String[maxCounters.size()]);\n        Arrays.sort(maxKeys, new Comparator<String>() {\n          private final Comparator<Long> valComp = Comparator.<Long>naturalOrder().reversed();\n          @Override\n          public int compare(String o1, String o2) {\n            return valComp.compare(maxCounters.get(o1), maxCounters.get(o2));\n          }\n        });\n\n        StringBuilder sb = new StringBuilder();\n        boolean first = true;\n        for (String key : maxKeys) {\n          long value = maxCounters.get(key);\n          if (value <= limit) continue;\n          if (first) {\n            sb.append(\"\\nMaximum concurrent \").append(desc).append(\" watches above limit:\\n\\n\");\n            first = false;\n          }\n          sb.append(\"\\t\").append(maxCounters.get(key)).append('\\t').append(key).append('\\n');\n        }\n        return sb.toString();\n      }\n\n","sourceOld":"      private String reportLimitViolations() {\n        Object[] maxKeys = maxCounters.keySet().toArray();\n        Arrays.sort(maxKeys, new Comparator<Object>() {\n          private final Comparator<Long> valComp = Ordering.natural().reverse();\n          @Override\n          public int compare(Object o1, Object o2) {\n            return valComp.compare(maxCounters.get(o1), maxCounters.get(o2));\n          }\n        });\n\n        StringBuilder sb = new StringBuilder();\n        boolean first = true;\n        for (Object key : maxKeys) {\n          long value = maxCounters.get(key);\n          if (value <= limit) continue;\n          if (first) {\n            sb.append(\"\\nMaximum concurrent \").append(desc).append(\" watches above limit:\\n\\n\");\n            first = false;\n          }\n          sb.append(\"\\t\").append(maxCounters.get(key)).append('\\t').append(key).append('\\n');\n        }\n        return sb.toString();\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain.WatchLimit#reportLimitViolations().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer.ZKServerMain.WatchLimit#reportLimitViolations().mjava","sourceNew":"      private String reportLimitViolations() {\n        String[] maxKeys = maxCounters.keySet().toArray(new String[maxCounters.size()]);\n        Arrays.sort(maxKeys, new Comparator<String>() {\n          private final Comparator<Long> valComp = Comparator.<Long>naturalOrder().reversed();\n          @Override\n          public int compare(String o1, String o2) {\n            return valComp.compare(maxCounters.get(o1), maxCounters.get(o2));\n          }\n        });\n\n        StringBuilder sb = new StringBuilder();\n        boolean first = true;\n        for (String key : maxKeys) {\n          long value = maxCounters.get(key);\n          if (value <= limit) continue;\n          if (first) {\n            sb.append(\"\\nMaximum concurrent \").append(desc).append(\" watches above limit:\\n\\n\");\n            first = false;\n          }\n          sb.append(\"\\t\").append(maxCounters.get(key)).append('\\t').append(key).append('\\n');\n        }\n        return sb.toString();\n      }\n\n","sourceOld":"      private String reportLimitViolations() {\n        Object[] maxKeys = maxCounters.keySet().toArray();\n        Arrays.sort(maxKeys, new Comparator<Object>() {\n          private final Comparator<Long> valComp = Ordering.natural().reverse();\n          @Override\n          public int compare(Object o1, Object o2) {\n            return valComp.compare(maxCounters.get(o1), maxCounters.get(o2));\n          }\n        });\n\n        StringBuilder sb = new StringBuilder();\n        boolean first = true;\n        for (Object key : maxKeys) {\n          long value = maxCounters.get(key);\n          if (value <= limit) continue;\n          if (first) {\n            sb.append(\"\\nMaximum concurrent \").append(desc).append(\" watches above limit:\\n\\n\");\n            first = false;\n          }\n          sb.append(\"\\t\").append(maxCounters.get(key)).append('\\t').append(key).append('\\n');\n        }\n        return sb.toString();\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"144b39b0b004b766b7f785a03b6898512514c0c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["144b39b0b004b766b7f785a03b6898512514c0c3"],"320888923ec13b91f53082558f01f4c9960dd226":["144b39b0b004b766b7f785a03b6898512514c0c3","c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"]},"commit2Childs":{"144b39b0b004b766b7f785a03b6898512514c0c3":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","320888923ec13b91f53082558f01f4c9960dd226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["144b39b0b004b766b7f785a03b6898512514c0c3"],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["320888923ec13b91f53082558f01f4c9960dd226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"320888923ec13b91f53082558f01f4c9960dd226":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["320888923ec13b91f53082558f01f4c9960dd226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}