{"path":"lucene/src/test/org/apache/lucene/analysis/TestToken#testCtor().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestToken#testCtor().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestToken#testCtor().mjava","sourceNew":"  public void testCtor() throws Exception {\n    Token t = new Token();\n    char[] content = \"hello\".toCharArray();\n    t.setTermBuffer(content, 0, content.length);\n    assertNotSame(t.termBuffer(), content);\n    assertEquals(\"hello\", t.term());\n    assertEquals(\"word\", t.type());\n    assertEquals(0, t.getFlags());\n\n    t = new Token(6, 22);\n    t.setTermBuffer(content, 0, content.length);\n    assertEquals(\"hello\", t.term());\n    assertEquals(\"(hello,6,22)\", t.toString());\n    assertEquals(\"word\", t.type());\n    assertEquals(0, t.getFlags());\n\n    t = new Token(6, 22, 7);\n    t.setTermBuffer(content, 0, content.length);\n    assertEquals(\"hello\", t.term());\n    assertEquals(\"(hello,6,22)\", t.toString());\n    assertEquals(7, t.getFlags());\n\n    t = new Token(6, 22, \"junk\");\n    t.setTermBuffer(content, 0, content.length);\n    assertEquals(\"hello\", t.term());\n    assertEquals(\"(hello,6,22,type=junk)\", t.toString());\n    assertEquals(0, t.getFlags());\n  }\n\n","sourceOld":"  public void testCtor() throws Exception {\n    Token t = new Token();\n    char[] content = \"hello\".toCharArray();\n    t.setTermBuffer(content, 0, content.length);\n    assertNotSame(t.termBuffer(), content);\n    assertEquals(\"hello\", t.term());\n    assertEquals(\"word\", t.type());\n    assertEquals(0, t.getFlags());\n\n    t = new Token(6, 22);\n    t.setTermBuffer(content, 0, content.length);\n    assertEquals(\"hello\", t.term());\n    assertEquals(\"(hello,6,22)\", t.toString());\n    assertEquals(\"word\", t.type());\n    assertEquals(0, t.getFlags());\n\n    t = new Token(6, 22, 7);\n    t.setTermBuffer(content, 0, content.length);\n    assertEquals(\"hello\", t.term());\n    assertEquals(\"(hello,6,22)\", t.toString());\n    assertEquals(7, t.getFlags());\n\n    t = new Token(6, 22, \"junk\");\n    t.setTermBuffer(content, 0, content.length);\n    assertEquals(\"hello\", t.term());\n    assertEquals(\"(hello,6,22,type=junk)\", t.toString());\n    assertEquals(0, t.getFlags());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f9d8058af3334514f3be89bb5aa0c0371ce4dc0","date":1270813816,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestToken#testCtor().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestToken#testCtor().mjava","sourceNew":"  public void testCtor() throws Exception {\n    Token t = new Token();\n    char[] content = \"hello\".toCharArray();\n    t.setTermBuffer(content, 0, content.length);\n    assertNotSame(t.termBuffer(), content);\n    assertEquals(0, t.startOffset());\n    assertEquals(0, t.endOffset());\n    assertEquals(\"hello\", t.term());\n    assertEquals(\"word\", t.type());\n    assertEquals(0, t.getFlags());\n\n    t = new Token(6, 22);\n    t.setTermBuffer(content, 0, content.length);\n    assertEquals(\"hello\", t.term());\n    assertEquals(\"hello\", t.toString());\n    assertEquals(6, t.startOffset());\n    assertEquals(22, t.endOffset());\n    assertEquals(\"word\", t.type());\n    assertEquals(0, t.getFlags());\n\n    t = new Token(6, 22, 7);\n    t.setTermBuffer(content, 0, content.length);\n    assertEquals(\"hello\", t.term());\n    assertEquals(\"hello\", t.toString());\n    assertEquals(6, t.startOffset());\n    assertEquals(22, t.endOffset());\n    assertEquals(\"word\", t.type());\n    assertEquals(7, t.getFlags());\n\n    t = new Token(6, 22, \"junk\");\n    t.setTermBuffer(content, 0, content.length);\n    assertEquals(\"hello\", t.term());\n    assertEquals(\"hello\", t.toString());\n    assertEquals(6, t.startOffset());\n    assertEquals(22, t.endOffset());\n    assertEquals(\"junk\", t.type());\n    assertEquals(0, t.getFlags());\n  }\n\n","sourceOld":"  public void testCtor() throws Exception {\n    Token t = new Token();\n    char[] content = \"hello\".toCharArray();\n    t.setTermBuffer(content, 0, content.length);\n    assertNotSame(t.termBuffer(), content);\n    assertEquals(\"hello\", t.term());\n    assertEquals(\"word\", t.type());\n    assertEquals(0, t.getFlags());\n\n    t = new Token(6, 22);\n    t.setTermBuffer(content, 0, content.length);\n    assertEquals(\"hello\", t.term());\n    assertEquals(\"(hello,6,22)\", t.toString());\n    assertEquals(\"word\", t.type());\n    assertEquals(0, t.getFlags());\n\n    t = new Token(6, 22, 7);\n    t.setTermBuffer(content, 0, content.length);\n    assertEquals(\"hello\", t.term());\n    assertEquals(\"(hello,6,22)\", t.toString());\n    assertEquals(7, t.getFlags());\n\n    t = new Token(6, 22, \"junk\");\n    t.setTermBuffer(content, 0, content.length);\n    assertEquals(\"hello\", t.term());\n    assertEquals(\"(hello,6,22,type=junk)\", t.toString());\n    assertEquals(0, t.getFlags());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3ba5366b7a7f11839e9c824b23007f048d002f6","date":1275996475,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestToken#testCtor().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestToken#testCtor().mjava","sourceNew":"  public void testCtor() throws Exception {\n    Token t = new Token();\n    char[] content = \"hello\".toCharArray();\n    t.copyBuffer(content, 0, content.length);\n    assertNotSame(t.buffer(), content);\n    assertEquals(0, t.startOffset());\n    assertEquals(0, t.endOffset());\n    assertEquals(\"hello\", t.toString());\n    assertEquals(\"word\", t.type());\n    assertEquals(0, t.getFlags());\n\n    t = new Token(6, 22);\n    t.copyBuffer(content, 0, content.length);\n    assertEquals(\"hello\", t.toString());\n    assertEquals(\"hello\", t.toString());\n    assertEquals(6, t.startOffset());\n    assertEquals(22, t.endOffset());\n    assertEquals(\"word\", t.type());\n    assertEquals(0, t.getFlags());\n\n    t = new Token(6, 22, 7);\n    t.copyBuffer(content, 0, content.length);\n    assertEquals(\"hello\", t.toString());\n    assertEquals(\"hello\", t.toString());\n    assertEquals(6, t.startOffset());\n    assertEquals(22, t.endOffset());\n    assertEquals(\"word\", t.type());\n    assertEquals(7, t.getFlags());\n\n    t = new Token(6, 22, \"junk\");\n    t.copyBuffer(content, 0, content.length);\n    assertEquals(\"hello\", t.toString());\n    assertEquals(\"hello\", t.toString());\n    assertEquals(6, t.startOffset());\n    assertEquals(22, t.endOffset());\n    assertEquals(\"junk\", t.type());\n    assertEquals(0, t.getFlags());\n  }\n\n","sourceOld":"  public void testCtor() throws Exception {\n    Token t = new Token();\n    char[] content = \"hello\".toCharArray();\n    t.setTermBuffer(content, 0, content.length);\n    assertNotSame(t.termBuffer(), content);\n    assertEquals(0, t.startOffset());\n    assertEquals(0, t.endOffset());\n    assertEquals(\"hello\", t.term());\n    assertEquals(\"word\", t.type());\n    assertEquals(0, t.getFlags());\n\n    t = new Token(6, 22);\n    t.setTermBuffer(content, 0, content.length);\n    assertEquals(\"hello\", t.term());\n    assertEquals(\"hello\", t.toString());\n    assertEquals(6, t.startOffset());\n    assertEquals(22, t.endOffset());\n    assertEquals(\"word\", t.type());\n    assertEquals(0, t.getFlags());\n\n    t = new Token(6, 22, 7);\n    t.setTermBuffer(content, 0, content.length);\n    assertEquals(\"hello\", t.term());\n    assertEquals(\"hello\", t.toString());\n    assertEquals(6, t.startOffset());\n    assertEquals(22, t.endOffset());\n    assertEquals(\"word\", t.type());\n    assertEquals(7, t.getFlags());\n\n    t = new Token(6, 22, \"junk\");\n    t.setTermBuffer(content, 0, content.length);\n    assertEquals(\"hello\", t.term());\n    assertEquals(\"hello\", t.toString());\n    assertEquals(6, t.startOffset());\n    assertEquals(22, t.endOffset());\n    assertEquals(\"junk\", t.type());\n    assertEquals(0, t.getFlags());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestToken#testCtor().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestToken#testCtor().mjava","sourceNew":"  public void testCtor() throws Exception {\n    Token t = new Token();\n    char[] content = \"hello\".toCharArray();\n    t.copyBuffer(content, 0, content.length);\n    assertNotSame(t.buffer(), content);\n    assertEquals(0, t.startOffset());\n    assertEquals(0, t.endOffset());\n    assertEquals(\"hello\", t.toString());\n    assertEquals(\"word\", t.type());\n    assertEquals(0, t.getFlags());\n\n    t = new Token(6, 22);\n    t.copyBuffer(content, 0, content.length);\n    assertEquals(\"hello\", t.toString());\n    assertEquals(\"hello\", t.toString());\n    assertEquals(6, t.startOffset());\n    assertEquals(22, t.endOffset());\n    assertEquals(\"word\", t.type());\n    assertEquals(0, t.getFlags());\n\n    t = new Token(6, 22, 7);\n    t.copyBuffer(content, 0, content.length);\n    assertEquals(\"hello\", t.toString());\n    assertEquals(\"hello\", t.toString());\n    assertEquals(6, t.startOffset());\n    assertEquals(22, t.endOffset());\n    assertEquals(\"word\", t.type());\n    assertEquals(7, t.getFlags());\n\n    t = new Token(6, 22, \"junk\");\n    t.copyBuffer(content, 0, content.length);\n    assertEquals(\"hello\", t.toString());\n    assertEquals(\"hello\", t.toString());\n    assertEquals(6, t.startOffset());\n    assertEquals(22, t.endOffset());\n    assertEquals(\"junk\", t.type());\n    assertEquals(0, t.getFlags());\n  }\n\n","sourceOld":"  public void testCtor() throws Exception {\n    Token t = new Token();\n    char[] content = \"hello\".toCharArray();\n    t.copyBuffer(content, 0, content.length);\n    assertNotSame(t.buffer(), content);\n    assertEquals(0, t.startOffset());\n    assertEquals(0, t.endOffset());\n    assertEquals(\"hello\", t.toString());\n    assertEquals(\"word\", t.type());\n    assertEquals(0, t.getFlags());\n\n    t = new Token(6, 22);\n    t.copyBuffer(content, 0, content.length);\n    assertEquals(\"hello\", t.toString());\n    assertEquals(\"hello\", t.toString());\n    assertEquals(6, t.startOffset());\n    assertEquals(22, t.endOffset());\n    assertEquals(\"word\", t.type());\n    assertEquals(0, t.getFlags());\n\n    t = new Token(6, 22, 7);\n    t.copyBuffer(content, 0, content.length);\n    assertEquals(\"hello\", t.toString());\n    assertEquals(\"hello\", t.toString());\n    assertEquals(6, t.startOffset());\n    assertEquals(22, t.endOffset());\n    assertEquals(\"word\", t.type());\n    assertEquals(7, t.getFlags());\n\n    t = new Token(6, 22, \"junk\");\n    t.copyBuffer(content, 0, content.length);\n    assertEquals(\"hello\", t.toString());\n    assertEquals(\"hello\", t.toString());\n    assertEquals(6, t.startOffset());\n    assertEquals(22, t.endOffset());\n    assertEquals(\"junk\", t.type());\n    assertEquals(0, t.getFlags());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c3ba5366b7a7f11839e9c824b23007f048d002f6":["3f9d8058af3334514f3be89bb5aa0c0371ce4dc0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c3ba5366b7a7f11839e9c824b23007f048d002f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f9d8058af3334514f3be89bb5aa0c0371ce4dc0":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c3ba5366b7a7f11839e9c824b23007f048d002f6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3f9d8058af3334514f3be89bb5aa0c0371ce4dc0":["c3ba5366b7a7f11839e9c824b23007f048d002f6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3f9d8058af3334514f3be89bb5aa0c0371ce4dc0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}