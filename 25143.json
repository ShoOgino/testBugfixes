{"path":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#runMultiSorts(Searcher,boolean).mjava","commits":[{"id":"1474a58d42cdf3b9e16ffe07bce31e4abffe5e02","date":1244977984,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#runMultiSorts(Searcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(Searcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField[] {new SortField (\"int\", SortField.INT), SortField.FIELD_DOC});\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(\"int\");\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField[] {new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC});\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(\"float\");\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(\"string\");\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(\"int\", true);\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(\"float\", true);\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(\"string\", true);\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField[] { new SortField (\"string\", Locale.US) });\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField[] { new SortField (\"string\", Locale.US, true) });\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new String[] {\"int\",\"float\"});\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new String[] {\"float\",\"string\"});\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(\"int\");\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(\"int\", true);\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(\"float\");\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(\"string\");\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(\"string\", true);\n    assertMatches(multi, queryF, sort, \"IJZ\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e69f59b863731d864bf3047235e718f0f88f8841","date":1250105498,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#runMultiSorts(Searcher,boolean).mjava","pathOld":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#runMultiSorts(Searcher,boolean).mjava","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(Searcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField[] {new SortField (\"int\", SortField.INT), SortField.FIELD_DOC});\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(\"int\");\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField[] {new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC});\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(\"float\");\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(\"string\");\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(\"int\", true);\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(\"float\", true);\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(\"string\", true);\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new String[] {\"int\",\"float\"});\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new String[] {\"float\",\"string\"});\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(\"int\");\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(\"int\", true);\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(\"float\");\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(\"string\");\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(\"string\", true);\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" Basics\");\n    // next we'll check an alternate Locale for string, so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    sort.setSort(new SortField[] { new SortField (\"string\", Locale.US) });\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField[] { new SortField (\"string\", Locale.US, true)});\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    assertSaneFieldCaches(getName() + \" Locale.US\");\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(Searcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField[] {new SortField (\"int\", SortField.INT), SortField.FIELD_DOC});\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(\"int\");\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField[] {new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC});\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(\"float\");\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(\"string\");\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(\"int\", true);\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(\"float\", true);\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(\"string\", true);\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField[] { new SortField (\"string\", Locale.US) });\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField[] { new SortField (\"string\", Locale.US, true) });\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new String[] {\"int\",\"float\"});\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new String[] {\"float\",\"string\"});\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(\"int\");\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(\"int\", true);\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(\"float\");\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(\"string\");\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(\"string\", true);\n    assertMatches(multi, queryF, sort, \"IJZ\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99","date":1255432705,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#runMultiSorts(Searcher,boolean).mjava","pathOld":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#runMultiSorts(Searcher,boolean).mjava","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(Searcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT), new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" Basics\");\n    // next we'll check an alternate Locale for string, so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    sort.setSort(new SortField (\"string\", Locale.US) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"string\", Locale.US, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    assertSaneFieldCaches(getName() + \" Locale.US\");\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(Searcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField[] {new SortField (\"int\", SortField.INT), SortField.FIELD_DOC});\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(\"int\");\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField[] {new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC});\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(\"float\");\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(\"string\");\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(\"int\", true);\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(\"float\", true);\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(\"string\", true);\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new String[] {\"int\",\"float\"});\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new String[] {\"float\",\"string\"});\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(\"int\");\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(\"int\", true);\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(\"float\");\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(\"string\");\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(\"string\", true);\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" Basics\");\n    // next we'll check an alternate Locale for string, so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    sort.setSort(new SortField[] { new SortField (\"string\", Locale.US) });\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField[] { new SortField (\"string\", Locale.US, true)});\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    assertSaneFieldCaches(getName() + \" Locale.US\");\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#runMultiSorts(Searcher,boolean).mjava","pathOld":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#runMultiSorts(Searcher,boolean).mjava","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(Searcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT), new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" Basics\");\n    // next we'll check an alternate Locale for string, so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    sort.setSort(new SortField (\"string\", Locale.US) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"string\", Locale.US, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    assertSaneFieldCaches(getName() + \" Locale.US\");\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(Searcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT), new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" Basics\");\n    // next we'll check an alternate Locale for string, so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    sort.setSort(new SortField (\"string\", Locale.US) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"string\", Locale.US, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    assertSaneFieldCaches(getName() + \" Locale.US\");\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1474a58d42cdf3b9e16ffe07bce31e4abffe5e02":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e69f59b863731d864bf3047235e718f0f88f8841":["1474a58d42cdf3b9e16ffe07bce31e4abffe5e02"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["e69f59b863731d864bf3047235e718f0f88f8841"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"]},"commit2Childs":{"1474a58d42cdf3b9e16ffe07bce31e4abffe5e02":["e69f59b863731d864bf3047235e718f0f88f8841"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1474a58d42cdf3b9e16ffe07bce31e4abffe5e02"],"e69f59b863731d864bf3047235e718f0f88f8841":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}