{"path":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#checkPayloads(Collection[byte[]]).mjava","commits":[{"id":"b649647f7eb503bd662a5cdc7736a2cf2b2fb4a3","date":1434444713,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#checkPayloads(Collection[byte[]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#checkOrderedPayloads(Collection[byte[]]).mjava","sourceNew":"  /**\n   * Check to see if the collected payloads match the required set.\n   *\n   * @param candidate a collection of payloads from the current Spans\n   * @return whether or not the payloads match\n   */\n  protected AcceptStatus checkPayloads(Collection<byte[]> candidate) {\n    if (candidate.size() == payloadToMatch.size()){\n      //TODO: check the byte arrays are the same\n      Iterator<byte[]> toMatchIter = payloadToMatch.iterator();\n      //check each of the byte arrays, in order\n      for (byte[] candBytes : candidate) {\n        //if one is a mismatch, then return false\n        if (Arrays.equals(candBytes, toMatchIter.next()) == false){\n          return AcceptStatus.NO;\n        }\n      }\n      //we've verified all the bytes\n      return AcceptStatus.YES;\n    } else {\n      return AcceptStatus.NO;\n    }\n  }\n\n","sourceOld":"  /**\n   * Check to see if the collected payloads match the required set.\n   *\n   * This is called for Near span queries which collect their sub spans\n   * out-of-order, meaning that we can't rely on the order of payloads\n   * in the collection\n   *\n   * @param candidate a collection of payloads from the current Spans\n   * @return whether or not the payloads match\n   */\n  protected AcceptStatus checkOrderedPayloads(Collection<byte[]> candidate) {\n    if (candidate.size() == payloadToMatch.size()){\n      //TODO: check the byte arrays are the same\n      Iterator<byte[]> toMatchIter = payloadToMatch.iterator();\n      //check each of the byte arrays, in order\n      //hmm, can't rely on order here\n      for (byte[] candBytes : candidate) {\n        //if one is a mismatch, then return false\n        if (Arrays.equals(candBytes, toMatchIter.next()) == false){\n          return AcceptStatus.NO;\n        }\n      }\n      //we've verified all the bytes\n      return AcceptStatus.YES;\n    } else {\n      return AcceptStatus.NO;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8dd51777c3f17c83f8aac170bd0f68a029d174","date":1442220758,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#checkPayloads(Collection[byte[]]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Check to see if the collected payloads match the required set.\n   *\n   * @param candidate a collection of payloads from the current Spans\n   * @return whether or not the payloads match\n   */\n  protected AcceptStatus checkPayloads(Collection<byte[]> candidate) {\n    if (candidate.size() == payloadToMatch.size()){\n      //TODO: check the byte arrays are the same\n      Iterator<byte[]> toMatchIter = payloadToMatch.iterator();\n      //check each of the byte arrays, in order\n      for (byte[] candBytes : candidate) {\n        //if one is a mismatch, then return false\n        if (Arrays.equals(candBytes, toMatchIter.next()) == false){\n          return AcceptStatus.NO;\n        }\n      }\n      //we've verified all the bytes\n      return AcceptStatus.YES;\n    } else {\n      return AcceptStatus.NO;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a8dd51777c3f17c83f8aac170bd0f68a029d174":["b649647f7eb503bd662a5cdc7736a2cf2b2fb4a3"],"b649647f7eb503bd662a5cdc7736a2cf2b2fb4a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a8dd51777c3f17c83f8aac170bd0f68a029d174"]},"commit2Childs":{"8a8dd51777c3f17c83f8aac170bd0f68a029d174":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b649647f7eb503bd662a5cdc7736a2cf2b2fb4a3":["8a8dd51777c3f17c83f8aac170bd0f68a029d174"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b649647f7eb503bd662a5cdc7736a2cf2b2fb4a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}