{"path":"contrib/gdata-server/src/java/org/apache/lucene/gdata/utils/DateFormater#parseDate(String,String).mjava","commits":[{"id":"89f8b19763ea545f1e428dfa5efb8235beaaa05e","date":1151436680,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/utils/DateFormater#parseDate(String,String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Parses the given string into the specified formate\n     * @param dateString - the string to parse\n     * @param pattern - the expected formate\n     * @return a {@link Date} instance representing the given string\n     * @throws ParseException - if the string can not be parsed\n     */\n    public static Date parseDate(final String dateString,String pattern) throws ParseException{\n        if(dateString == null|| pattern == null)\n            throw new IllegalArgumentException(\n            \"given parameters must not be null\");\n        SimpleDateFormat inst = formater.getFormater();\n        inst.applyPattern(pattern);\n        return inst.parse(dateString);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02a7f04a7293ea604e17892ba0bded7341adf3af","date":1151695892,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/utils/DateFormater#parseDate(String,String).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/utils/DateFormater#parseDate(String,String).mjava","sourceNew":"    /**\n     * Parses the given string into the specified formate\n     * @param dateString - the string to parse\n     * @param pattern - the expected formate\n     * @return a {@link Date} instance representing the given string\n     * @throws ParseException - if the string can not be parsed\n     */\n    public static Date parseDate(final String dateString,String pattern) throws ParseException{\n        if(dateString == null|| pattern == null)\n            throw new IllegalArgumentException(\n            \"given parameters must not be null\");\n        \n        SimpleDateFormat inst = formater.getFormater();\n        inst.applyPattern(pattern);\n        return inst.parse(dateString);\n    }\n\n","sourceOld":"    /**\n     * Parses the given string into the specified formate\n     * @param dateString - the string to parse\n     * @param pattern - the expected formate\n     * @return a {@link Date} instance representing the given string\n     * @throws ParseException - if the string can not be parsed\n     */\n    public static Date parseDate(final String dateString,String pattern) throws ParseException{\n        if(dateString == null|| pattern == null)\n            throw new IllegalArgumentException(\n            \"given parameters must not be null\");\n        SimpleDateFormat inst = formater.getFormater();\n        inst.applyPattern(pattern);\n        return inst.parse(dateString);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"303ca293666286b4ae2b0b4dbf10d3bf60ed727c","date":1153866181,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/utils/DateFormater#parseDate(String,String).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/utils/DateFormater#parseDate(String,String).mjava","sourceNew":"    /**\n     * Parses the given string into the specified formate\n     * @param dateString - the string to parse\n     * @param pattern - the expected formate\n     * @return a {@link Date} instance representing the given string\n     * @throws ParseException - if the string can not be parsed\n     */\n    public static Date parseDate(final String dateString,String pattern) throws ParseException{\n        if(dateString == null|| pattern == null)\n            throw new IllegalArgumentException(\n            \"given parameters must not be null\");\n        \n        SimpleDateFormat inst = formater.getFormater();\n        try{\n        inst.applyPattern(pattern);\n        return inst.parse(dateString);\n        }finally{\n            formater.returnFomater(inst);\n        }\n        \n    }\n\n","sourceOld":"    /**\n     * Parses the given string into the specified formate\n     * @param dateString - the string to parse\n     * @param pattern - the expected formate\n     * @return a {@link Date} instance representing the given string\n     * @throws ParseException - if the string can not be parsed\n     */\n    public static Date parseDate(final String dateString,String pattern) throws ParseException{\n        if(dateString == null|| pattern == null)\n            throw new IllegalArgumentException(\n            \"given parameters must not be null\");\n        \n        SimpleDateFormat inst = formater.getFormater();\n        inst.applyPattern(pattern);\n        return inst.parse(dateString);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/utils/DateFormater#parseDate(String,String).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/utils/DateFormater#parseDate(String,String).mjava","sourceNew":"    /**\n     * Parses the given string into the specified formate\n     * @param dateString - the string to parse\n     * @param pattern - the expected formate\n     * @return a {@link Date} instance representing the given string\n     * @throws ParseException - if the string can not be parsed\n     */\n    public static Date parseDate(final String dateString,String pattern) throws ParseException{\n        if(dateString == null|| pattern == null)\n            throw new IllegalArgumentException(\n            \"given parameters must not be null\");\n        \n        SimpleDateFormat inst = formater.getFormater();\n        try{\n        inst.applyPattern(pattern);\n        return inst.parse(dateString);\n        }finally{\n            formater.returnFomater(inst);\n        }\n        \n    }\n\n","sourceOld":"    /**\n     * Parses the given string into the specified formate\n     * @param dateString - the string to parse\n     * @param pattern - the expected formate\n     * @return a {@link Date} instance representing the given string\n     * @throws ParseException - if the string can not be parsed\n     */\n    public static Date parseDate(final String dateString,String pattern) throws ParseException{\n        if(dateString == null|| pattern == null)\n            throw new IllegalArgumentException(\n            \"given parameters must not be null\");\n        \n        SimpleDateFormat inst = formater.getFormater();\n        try{\n        inst.applyPattern(pattern);\n        return inst.parse(dateString);\n        }finally{\n            formater.returnFomater(inst);\n        }\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"02a7f04a7293ea604e17892ba0bded7341adf3af":["89f8b19763ea545f1e428dfa5efb8235beaaa05e"],"89f8b19763ea545f1e428dfa5efb8235beaaa05e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["02a7f04a7293ea604e17892ba0bded7341adf3af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"]},"commit2Childs":{"02a7f04a7293ea604e17892ba0bded7341adf3af":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"89f8b19763ea545f1e428dfa5efb8235beaaa05e":["02a7f04a7293ea604e17892ba0bded7341adf3af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["89f8b19763ea545f1e428dfa5efb8235beaaa05e"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}