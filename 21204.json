{"path":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the directory instance for the named location.\n   * \n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   * \n   * @param file the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @returns the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, boolean create)\n    throws IOException {\n    file = new File(file.getCanonicalPath());\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n\tdir = new FSDirectory(file, create);\n\tDIRECTORIES.put(file, dir);\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7032b137d6c884c55b34a33fdc6634af6deb07e1","date":1002820870,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean).mjava","sourceNew":"  /** Returns the directory instance for the named location.\n   * \n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   * \n   * @param file the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @returns the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, boolean create)\n    throws IOException {\n    file = new File(file.getCanonicalPath());\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n\tdir = new FSDirectory(file, create);\n\tDIRECTORIES.put(file, dir);\n      } else if (create) {\n        dir.create();\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","sourceOld":"  /** Returns the directory instance for the named location.\n   * \n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   * \n   * @param file the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @returns the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, boolean create)\n    throws IOException {\n    file = new File(file.getCanonicalPath());\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n\tdir = new FSDirectory(file, create);\n\tDIRECTORIES.put(file, dir);\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9958bbeb151c7cb0d46b0c3007a6089c89b27e","date":1013651191,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean).mjava","sourceNew":"  /** Returns the directory instance for the named location.\n   * \n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   * \n   * @param file the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, boolean create)\n    throws IOException {\n    file = new File(file.getCanonicalPath());\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n\tdir = new FSDirectory(file, create);\n\tDIRECTORIES.put(file, dir);\n      } else if (create) {\n        dir.create();\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","sourceOld":"  /** Returns the directory instance for the named location.\n   * \n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   * \n   * @param file the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @returns the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, boolean create)\n    throws IOException {\n    file = new File(file.getCanonicalPath());\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n\tdir = new FSDirectory(file, create);\n\tDIRECTORIES.put(file, dir);\n      } else if (create) {\n        dir.create();\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"933bbf7d94f9fe21e6a6f126ac9d8b4b00a62200","date":1025021355,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean).mjava","sourceNew":"  /** Returns the directory instance for the named location.\n   *\n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   *\n   * @param file the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, boolean create)\n    throws IOException {\n    file = new File(file.getCanonicalPath());\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n\tdir = new FSDirectory(file, create);\n\tDIRECTORIES.put(file, dir);\n      } else if (create) {\n        dir.create();\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","sourceOld":"  /** Returns the directory instance for the named location.\n   * \n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   * \n   * @param file the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, boolean create)\n    throws IOException {\n    file = new File(file.getCanonicalPath());\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n\tdir = new FSDirectory(file, create);\n\tDIRECTORIES.put(file, dir);\n      } else if (create) {\n        dir.create();\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5256e856e1442a6e1250d26f1236a33380632dc2","date":1046725105,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean).mjava","sourceNew":"  /** Returns the directory instance for the named location.\n   *\n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   *\n   * @param file the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, boolean create)\n    throws IOException {\n    file = new File(file.getCanonicalPath());\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n        dir = new FSDirectory(file, create);\n        DIRECTORIES.put(file, dir);\n      } else if (create) {\n        dir.create();\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","sourceOld":"  /** Returns the directory instance for the named location.\n   *\n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   *\n   * @param file the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, boolean create)\n    throws IOException {\n    file = new File(file.getCanonicalPath());\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n\tdir = new FSDirectory(file, create);\n\tDIRECTORIES.put(file, dir);\n      } else if (create) {\n        dir.create();\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e971ba25509e21a130fef61f0687be0446ca27a0","date":1095369217,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean).mjava","sourceNew":"  /** Returns the directory instance for the named location.\n   *\n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   *\n   * @param file the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, boolean create)\n    throws IOException {\n    file = new File(file.getCanonicalPath());\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n        try {\n          dir = (FSDirectory)IMPL.newInstance();\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n        dir.init(file, create);\n        DIRECTORIES.put(file, dir);\n      } else if (create) {\n        dir.create();\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","sourceOld":"  /** Returns the directory instance for the named location.\n   *\n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   *\n   * @param file the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, boolean create)\n    throws IOException {\n    file = new File(file.getCanonicalPath());\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n        dir = new FSDirectory(file, create);\n        DIRECTORIES.put(file, dir);\n      } else if (create) {\n        dir.create();\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b79b0c5e926566e95e5621aca2c46ae0dc0457df","date":1100642267,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean).mjava","sourceNew":"  /** Returns the directory instance for the named location.\n   *\n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   *\n   * @param file the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, boolean create)\n    throws IOException {\n    file = new File(file.getCanonicalPath());\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n        try {\n          dir = (FSDirectory)IMPL.newInstance();\n        } catch (Exception e) {\n          throw new RuntimeException(\"cannot load FSDirectory class: \" + e.getMessage());\n        }\n        dir.init(file, create);\n        DIRECTORIES.put(file, dir);\n      } else if (create) {\n        dir.create();\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","sourceOld":"  /** Returns the directory instance for the named location.\n   *\n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   *\n   * @param file the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, boolean create)\n    throws IOException {\n    file = new File(file.getCanonicalPath());\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n        try {\n          dir = (FSDirectory)IMPL.newInstance();\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n        dir.init(file, create);\n        DIRECTORIES.put(file, dir);\n      } else if (create) {\n        dir.create();\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2686878db3f624ddbeed9eb286f872c48b74a97d","date":1100803073,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean).mjava","sourceNew":"  /** Returns the directory instance for the named location.\n   *\n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   *\n   * @param file the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, boolean create)\n    throws IOException {\n    file = new File(file.getCanonicalPath());\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n        try {\n          dir = (FSDirectory)IMPL.newInstance();\n        } catch (Exception e) {\n          throw new RuntimeException(\"cannot load FSDirectory class: \" + e.toString());\n        }\n        dir.init(file, create);\n        DIRECTORIES.put(file, dir);\n      } else if (create) {\n        dir.create();\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","sourceOld":"  /** Returns the directory instance for the named location.\n   *\n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   *\n   * @param file the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, boolean create)\n    throws IOException {\n    file = new File(file.getCanonicalPath());\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n        try {\n          dir = (FSDirectory)IMPL.newInstance();\n        } catch (Exception e) {\n          throw new RuntimeException(\"cannot load FSDirectory class: \" + e.getMessage());\n        }\n        dir.init(file, create);\n        DIRECTORIES.put(file, dir);\n      } else if (create) {\n        dir.create();\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d61f4c23cc2cce8021776edaf50078c935f8d4aa","date":1147464779,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean).mjava","sourceNew":"  /** Returns the directory instance for the named location.\n   *\n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   *\n   * @param file the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, boolean create)\n    throws IOException {\n    file = new File(file.getCanonicalPath());\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n        try {\n          dir = (FSDirectory)IMPL.newInstance();\n        } catch (Exception e) {\n          throw new RuntimeException(\"cannot load FSDirectory class: \" + e.toString(), e);\n        }\n        dir.init(file, create);\n        DIRECTORIES.put(file, dir);\n      } else if (create) {\n        dir.create();\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","sourceOld":"  /** Returns the directory instance for the named location.\n   *\n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   *\n   * @param file the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, boolean create)\n    throws IOException {\n    file = new File(file.getCanonicalPath());\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n        try {\n          dir = (FSDirectory)IMPL.newInstance();\n        } catch (Exception e) {\n          throw new RuntimeException(\"cannot load FSDirectory class: \" + e.toString());\n        }\n        dir.init(file, create);\n        DIRECTORIES.put(file, dir);\n      } else if (create) {\n        dir.create();\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c6bd70b660528bcf8dd3216ea1f7565ac220a20","date":1156813990,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean).mjava","sourceNew":"  /** Returns the directory instance for the named location.\n   *\n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   *\n   * @param file the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, boolean create)\n    throws IOException {\n    return getDirectory(file, create, null);\n  }\n\n","sourceOld":"  /** Returns the directory instance for the named location.\n   *\n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   *\n   * @param file the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, boolean create)\n    throws IOException {\n    file = new File(file.getCanonicalPath());\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n        try {\n          dir = (FSDirectory)IMPL.newInstance();\n        } catch (Exception e) {\n          throw new RuntimeException(\"cannot load FSDirectory class: \" + e.toString(), e);\n        }\n        dir.init(file, create);\n        DIRECTORIES.put(file, dir);\n      } else if (create) {\n        dir.create();\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean).mjava","sourceNew":"  public static FSDirectory getDirectory(File file, boolean create)\n    throws IOException {\n    return getDirectory(file, create, true);\n  }\n\n","sourceOld":"  /** Returns the directory instance for the named location.\n   *\n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   *\n   * @param file the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, boolean create)\n    throws IOException {\n    return getDirectory(file, create, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b12ba4967665216eeb706b58d424c51fb3641a","date":1169160423,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean).mjava","sourceNew":"  /** Returns the directory instance for the named location.\n   *\n   * @deprecated Use IndexWriter's create flag, instead, to\n   * create a new index.\n   *\n   * @param file the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, boolean create)\n    throws IOException\n  {\n    FSDirectory dir = getDirectory(file, null);\n\n    // This is now deprecated (creation should only be done\n    // by IndexWriter):\n    if (create) {\n      dir.create();\n    }\n\n    return dir;\n  }\n\n","sourceOld":"  public static FSDirectory getDirectory(File file, boolean create)\n    throws IOException {\n    return getDirectory(file, create, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaea03be31988a41275d45a429ac71ff0ad740fb","date":1254612554,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean).mjava","sourceNew":null,"sourceOld":"  /** Returns the directory instance for the named location.\n   *\n   * @deprecated Use IndexWriter's create flag, instead, to\n   * create a new index.\n   *\n   * @param file the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, boolean create)\n    throws IOException\n  {\n    FSDirectory dir = getDirectory(file, null);\n\n    // This is now deprecated (creation should only be done\n    // by IndexWriter):\n    if (create) {\n      dir.create();\n    }\n\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["66b12ba4967665216eeb706b58d424c51fb3641a"],"b79b0c5e926566e95e5621aca2c46ae0dc0457df":["e971ba25509e21a130fef61f0687be0446ca27a0"],"e971ba25509e21a130fef61f0687be0446ca27a0":["5256e856e1442a6e1250d26f1236a33380632dc2"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d61f4c23cc2cce8021776edaf50078c935f8d4aa":["2686878db3f624ddbeed9eb286f872c48b74a97d"],"5256e856e1442a6e1250d26f1236a33380632dc2":["933bbf7d94f9fe21e6a6f126ac9d8b4b00a62200"],"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["d61f4c23cc2cce8021776edaf50078c935f8d4aa"],"66b12ba4967665216eeb706b58d424c51fb3641a":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"7032b137d6c884c55b34a33fdc6634af6deb07e1":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9958bbeb151c7cb0d46b0c3007a6089c89b27e":["7032b137d6c884c55b34a33fdc6634af6deb07e1"],"933bbf7d94f9fe21e6a6f126ac9d8b4b00a62200":["bb9958bbeb151c7cb0d46b0c3007a6089c89b27e"],"2686878db3f624ddbeed9eb286f872c48b74a97d":["b79b0c5e926566e95e5621aca2c46ae0dc0457df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eaea03be31988a41275d45a429ac71ff0ad740fb"]},"commit2Childs":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b79b0c5e926566e95e5621aca2c46ae0dc0457df":["2686878db3f624ddbeed9eb286f872c48b74a97d"],"e971ba25509e21a130fef61f0687be0446ca27a0":["b79b0c5e926566e95e5621aca2c46ae0dc0457df"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["7032b137d6c884c55b34a33fdc6634af6deb07e1"],"d61f4c23cc2cce8021776edaf50078c935f8d4aa":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"5256e856e1442a6e1250d26f1236a33380632dc2":["e971ba25509e21a130fef61f0687be0446ca27a0"],"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"66b12ba4967665216eeb706b58d424c51fb3641a":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["66b12ba4967665216eeb706b58d424c51fb3641a"],"7032b137d6c884c55b34a33fdc6634af6deb07e1":["bb9958bbeb151c7cb0d46b0c3007a6089c89b27e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"bb9958bbeb151c7cb0d46b0c3007a6089c89b27e":["933bbf7d94f9fe21e6a6f126ac9d8b4b00a62200"],"933bbf7d94f9fe21e6a6f126ac9d8b4b00a62200":["5256e856e1442a6e1250d26f1236a33380632dc2"],"2686878db3f624ddbeed9eb286f872c48b74a97d":["d61f4c23cc2cce8021776edaf50078c935f8d4aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}