{"path":"src/test/org/apache/lucene/index/TestCrash#testCrashAfterReopen().mjava","commits":[{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCrash#testCrashAfterReopen().mjava","pathOld":"/dev/null","sourceNew":"  public void testCrashAfterReopen() throws IOException {\n    IndexWriter writer = initIndex();\n    MockRAMDirectory dir = (MockRAMDirectory) writer.getDirectory();\n    writer.close();\n    writer = initIndex(dir);\n    assertEquals(314, writer.docCount());\n    crash(writer);\n\n    /*\n    System.out.println(\"\\n\\nTEST: open reader\");\n    String[] l = dir.list();\n    Arrays.sort(l);\n    for(int i=0;i<l.length;i++)\n      System.out.println(\"file \" + i + \" = \" + l[i] + \" \" +\n    dir.fileLength(l[i]) + \" bytes\");\n    */\n\n    IndexReader reader = IndexReader.open(dir);\n    assertTrue(reader.numDocs() >= 157);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCrash#testCrashAfterReopen().mjava","pathOld":"src/test/org/apache/lucene/index/TestCrash#testCrashAfterReopen().mjava","sourceNew":"  public void testCrashAfterReopen() throws IOException {\n    IndexWriter writer = initIndex();\n    MockRAMDirectory dir = (MockRAMDirectory) writer.getDirectory();\n    writer.close();\n    writer = initIndex(dir);\n    assertEquals(314, writer.docCount());\n    crash(writer);\n\n    /*\n    System.out.println(\"\\n\\nTEST: open reader\");\n    String[] l = dir.list();\n    Arrays.sort(l);\n    for(int i=0;i<l.length;i++)\n      System.out.println(\"file \" + i + \" = \" + l[i] + \" \" +\n    dir.fileLength(l[i]) + \" bytes\");\n    */\n\n    IndexReader reader = IndexReader.open(dir, false);\n    assertTrue(reader.numDocs() >= 157);\n  }\n\n","sourceOld":"  public void testCrashAfterReopen() throws IOException {\n    IndexWriter writer = initIndex();\n    MockRAMDirectory dir = (MockRAMDirectory) writer.getDirectory();\n    writer.close();\n    writer = initIndex(dir);\n    assertEquals(314, writer.docCount());\n    crash(writer);\n\n    /*\n    System.out.println(\"\\n\\nTEST: open reader\");\n    String[] l = dir.list();\n    Arrays.sort(l);\n    for(int i=0;i<l.length;i++)\n      System.out.println(\"file \" + i + \" = \" + l[i] + \" \" +\n    dir.fileLength(l[i]) + \" bytes\");\n    */\n\n    IndexReader reader = IndexReader.open(dir);\n    assertTrue(reader.numDocs() >= 157);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestCrash#testCrashAfterReopen().mjava","pathOld":"src/test/org/apache/lucene/index/TestCrash#testCrashAfterReopen().mjava","sourceNew":"  public void testCrashAfterReopen() throws IOException {\n    IndexWriter writer = initIndex();\n    MockRAMDirectory dir = (MockRAMDirectory) writer.getDirectory();\n    writer.close();\n    writer = initIndex(dir);\n    assertEquals(314, writer.docCount());\n    crash(writer);\n\n    /*\n    System.out.println(\"\\n\\nTEST: open reader\");\n    String[] l = dir.list();\n    Arrays.sort(l);\n    for(int i=0;i<l.length;i++)\n      System.out.println(\"file \" + i + \" = \" + l[i] + \" \" +\n    dir.fileLength(l[i]) + \" bytes\");\n    */\n\n    IndexReader reader = IndexReader.open(dir, false);\n    assertTrue(reader.numDocs() >= 157);\n  }\n\n","sourceOld":"  public void testCrashAfterReopen() throws IOException {\n    IndexWriter writer = initIndex();\n    MockRAMDirectory dir = (MockRAMDirectory) writer.getDirectory();\n    writer.close();\n    writer = initIndex(dir);\n    assertEquals(314, writer.docCount());\n    crash(writer);\n\n    /*\n    System.out.println(\"\\n\\nTEST: open reader\");\n    String[] l = dir.list();\n    Arrays.sort(l);\n    for(int i=0;i<l.length;i++)\n      System.out.println(\"file \" + i + \" = \" + l[i] + \" \" +\n    dir.fileLength(l[i]) + \" bytes\");\n    */\n\n    IndexReader reader = IndexReader.open(dir);\n    assertTrue(reader.numDocs() >= 157);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7","date":1255555265,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCrash#testCrashAfterReopen().mjava","pathOld":"src/test/org/apache/lucene/index/TestCrash#testCrashAfterReopen().mjava","sourceNew":"  public void testCrashAfterReopen() throws IOException {\n    IndexWriter writer = initIndex();\n    MockRAMDirectory dir = (MockRAMDirectory) writer.getDirectory();\n    writer.close();\n    writer = initIndex(dir);\n    assertEquals(314, writer.maxDoc());\n    crash(writer);\n\n    /*\n    System.out.println(\"\\n\\nTEST: open reader\");\n    String[] l = dir.list();\n    Arrays.sort(l);\n    for(int i=0;i<l.length;i++)\n      System.out.println(\"file \" + i + \" = \" + l[i] + \" \" +\n    dir.fileLength(l[i]) + \" bytes\");\n    */\n\n    IndexReader reader = IndexReader.open(dir, false);\n    assertTrue(reader.numDocs() >= 157);\n  }\n\n","sourceOld":"  public void testCrashAfterReopen() throws IOException {\n    IndexWriter writer = initIndex();\n    MockRAMDirectory dir = (MockRAMDirectory) writer.getDirectory();\n    writer.close();\n    writer = initIndex(dir);\n    assertEquals(314, writer.docCount());\n    crash(writer);\n\n    /*\n    System.out.println(\"\\n\\nTEST: open reader\");\n    String[] l = dir.list();\n    Arrays.sort(l);\n    for(int i=0;i<l.length;i++)\n      System.out.println(\"file \" + i + \" = \" + l[i] + \" \" +\n    dir.fileLength(l[i]) + \" bytes\");\n    */\n\n    IndexReader reader = IndexReader.open(dir, false);\n    assertTrue(reader.numDocs() >= 157);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCrash#testCrashAfterReopen().mjava","pathOld":"src/test/org/apache/lucene/index/TestCrash#testCrashAfterReopen().mjava","sourceNew":"  public void testCrashAfterReopen() throws IOException {\n    IndexWriter writer = initIndex();\n    MockRAMDirectory dir = (MockRAMDirectory) writer.getDirectory();\n    writer.close();\n    writer = initIndex(dir);\n    assertEquals(314, writer.maxDoc());\n    crash(writer);\n\n    /*\n    System.out.println(\"\\n\\nTEST: open reader\");\n    String[] l = dir.list();\n    Arrays.sort(l);\n    for(int i=0;i<l.length;i++)\n      System.out.println(\"file \" + i + \" = \" + l[i] + \" \" +\n    dir.fileLength(l[i]) + \" bytes\");\n    */\n\n    IndexReader reader = IndexReader.open(dir, false);\n    assertTrue(reader.numDocs() >= 157);\n  }\n\n","sourceOld":"  public void testCrashAfterReopen() throws IOException {\n    IndexWriter writer = initIndex();\n    MockRAMDirectory dir = (MockRAMDirectory) writer.getDirectory();\n    writer.close();\n    writer = initIndex(dir);\n    assertEquals(314, writer.maxDoc());\n    crash(writer);\n\n    /*\n    System.out.println(\"\\n\\nTEST: open reader\");\n    String[] l = dir.list();\n    Arrays.sort(l);\n    for(int i=0;i<l.length;i++)\n      System.out.println(\"file \" + i + \" = \" + l[i] + \" \" +\n    dir.fileLength(l[i]) + \" bytes\");\n    */\n\n    IndexReader reader = IndexReader.open(dir, false);\n    assertTrue(reader.numDocs() >= 157);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["e82780afe6097066eb5befb86e9432f077667e3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["e82780afe6097066eb5befb86e9432f077667e3d","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["0a046c0c310bc77931fc8441bd920053b607dd14"],"e82780afe6097066eb5befb86e9432f077667e3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"]},"commit2Childs":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e82780afe6097066eb5befb86e9432f077667e3d"],"0a046c0c310bc77931fc8441bd920053b607dd14":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"e82780afe6097066eb5befb86e9432f077667e3d":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}