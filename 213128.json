{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#checkBattenbergNotRobustly(char,double,double,int,List[Cell],BytesRef,Shape,int).mjava","commits":[{"id":"e34e9db64b6fb5add5b2968e3a46342cef8363c7","date":1566335373,"type":1,"author":"nppoly","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#checkBattenbergNotRobustly(char,double,double,int,List[Cell],BytesRef,Shape,int).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#checkBattenberg(char,double,double,int,List[Cell],BytesRef,Shape,int).mjava","sourceNew":"  protected void checkBattenbergNotRobustly(\n      char c,\n      double cx,\n      double cy,\n      int level,\n      List<Cell> matches,\n      BytesRef str,\n      Shape shape,\n      int maxLevel) {\n    assert str.length == level;\n    assert str.offset == 0;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    int strlen = str.length;\n    Rectangle rectangle = ctx.makeRectangle(cx - w, cx + w, cy - h, cy + h);\n    SpatialRelation v = shape.relate(rectangle);\n    if (SpatialRelation.CONTAINS == v) {\n      str.bytes[str.length++] = (byte)c;//append\n      //str.append(SpatialPrefixGrid.COVER);\n      matches.add(new QuadCell(BytesRef.deepCopyOf(str), v.transpose()));\n    } else if (SpatialRelation.DISJOINT == v) {\n      // nothing\n    } else { // SpatialRelation.WITHIN, SpatialRelation.INTERSECTS\n      str.bytes[str.length++] = (byte)c;//append\n\n      int nextLevel = level+1;\n      if (nextLevel >= maxLevel) {\n        //str.append(SpatialPrefixGrid.INTERSECTS);\n        matches.add(new QuadCell(BytesRef.deepCopyOf(str), v.transpose()));\n      } else {\n        buildNotRobustly(cx, cy, nextLevel, matches, str, shape, maxLevel);\n      }\n    }\n    str.length = strlen;\n  }\n\n","sourceOld":"  protected void checkBattenberg(\n      char c,\n      double cx,\n      double cy,\n      int level,\n      List<Cell> matches,\n      BytesRef str,\n      Shape shape,\n      int maxLevel) {\n    assert str.length == level;\n    assert str.offset == 0;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    int strlen = str.length;\n    Rectangle rectangle = ctx.makeRectangle(cx - w, cx + w, cy - h, cy + h);\n    SpatialRelation v = shape.relate(rectangle);\n    if (SpatialRelation.CONTAINS == v) {\n      str.bytes[str.length++] = (byte)c;//append\n      //str.append(SpatialPrefixGrid.COVER);\n      matches.add(new QuadCell(BytesRef.deepCopyOf(str), v.transpose()));\n    } else if (SpatialRelation.DISJOINT == v) {\n      // nothing\n    } else { // SpatialRelation.WITHIN, SpatialRelation.INTERSECTS\n      str.bytes[str.length++] = (byte)c;//append\n\n      int nextLevel = level+1;\n      if (nextLevel >= maxLevel) {\n        //str.append(SpatialPrefixGrid.INTERSECTS);\n        matches.add(new QuadCell(BytesRef.deepCopyOf(str), v.transpose()));\n      } else {\n        build(cx, cy, nextLevel, matches, str, shape, maxLevel);\n      }\n    }\n    str.length = strlen;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#checkBattenbergNotRobustly(char,double,double,int,List[Cell],BytesRef,Shape,int).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#checkBattenbergNotRobustly(char,double,double,int,List[Cell],BytesRef,Shape,int).mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  protected void checkBattenbergNotRobustly(\n      char c,\n      double cx,\n      double cy,\n      int level,\n      List<Cell> matches,\n      BytesRef str,\n      Shape shape,\n      int maxLevel) {\n    assert str.length == level;\n    assert str.offset == 0;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    int strlen = str.length;\n    Rectangle rectangle = ctx.makeRectangle(cx - w, cx + w, cy - h, cy + h);\n    SpatialRelation v = shape.relate(rectangle);\n    if (SpatialRelation.CONTAINS == v) {\n      str.bytes[str.length++] = (byte)c;//append\n      //str.append(SpatialPrefixGrid.COVER);\n      matches.add(new QuadCell(BytesRef.deepCopyOf(str), v.transpose()));\n    } else if (SpatialRelation.DISJOINT == v) {\n      // nothing\n    } else { // SpatialRelation.WITHIN, SpatialRelation.INTERSECTS\n      str.bytes[str.length++] = (byte)c;//append\n\n      int nextLevel = level+1;\n      if (nextLevel >= maxLevel) {\n        //str.append(SpatialPrefixGrid.INTERSECTS);\n        matches.add(new QuadCell(BytesRef.deepCopyOf(str), v.transpose()));\n      } else {\n        buildNotRobustly(cx, cy, nextLevel, matches, str, shape, maxLevel);\n      }\n    }\n    str.length = strlen;\n  }\n\n","sourceOld":"  protected void checkBattenbergNotRobustly(\n      char c,\n      double cx,\n      double cy,\n      int level,\n      List<Cell> matches,\n      BytesRef str,\n      Shape shape,\n      int maxLevel) {\n    assert str.length == level;\n    assert str.offset == 0;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    int strlen = str.length;\n    Rectangle rectangle = ctx.makeRectangle(cx - w, cx + w, cy - h, cy + h);\n    SpatialRelation v = shape.relate(rectangle);\n    if (SpatialRelation.CONTAINS == v) {\n      str.bytes[str.length++] = (byte)c;//append\n      //str.append(SpatialPrefixGrid.COVER);\n      matches.add(new QuadCell(BytesRef.deepCopyOf(str), v.transpose()));\n    } else if (SpatialRelation.DISJOINT == v) {\n      // nothing\n    } else { // SpatialRelation.WITHIN, SpatialRelation.INTERSECTS\n      str.bytes[str.length++] = (byte)c;//append\n\n      int nextLevel = level+1;\n      if (nextLevel >= maxLevel) {\n        //str.append(SpatialPrefixGrid.INTERSECTS);\n        matches.add(new QuadCell(BytesRef.deepCopyOf(str), v.transpose()));\n      } else {\n        buildNotRobustly(cx, cy, nextLevel, matches, str, shape, maxLevel);\n      }\n    }\n    str.length = strlen;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#checkBattenbergNotRobustly(char,double,double,int,List[Cell],BytesRef,Shape,int).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#checkBattenbergNotRobustly(char,double,double,int,List[Cell],BytesRef,Shape,int).mjava","sourceNew":"  protected void checkBattenbergNotRobustly(\n      char c,\n      double cx,\n      double cy,\n      int level,\n      List<Cell> matches,\n      BytesRef str,\n      Shape shape,\n      int maxLevel) {\n    assert str.length == level;\n    assert str.offset == 0;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    int strlen = str.length;\n    Rectangle rectangle = ctx.makeRectangle(cx - w, cx + w, cy - h, cy + h);\n    SpatialRelation v = shape.relate(rectangle);\n    if (SpatialRelation.CONTAINS == v) {\n      str.bytes[str.length++] = (byte)c;//append\n      //str.append(SpatialPrefixGrid.COVER);\n      matches.add(new QuadCell(BytesRef.deepCopyOf(str), v.transpose()));\n    } else if (SpatialRelation.DISJOINT == v) {\n      // nothing\n    } else { // SpatialRelation.WITHIN, SpatialRelation.INTERSECTS\n      str.bytes[str.length++] = (byte)c;//append\n\n      int nextLevel = level+1;\n      if (nextLevel >= maxLevel) {\n        //str.append(SpatialPrefixGrid.INTERSECTS);\n        matches.add(new QuadCell(BytesRef.deepCopyOf(str), v.transpose()));\n      } else {\n        buildNotRobustly(cx, cy, nextLevel, matches, str, shape, maxLevel);\n      }\n    }\n    str.length = strlen;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  protected void checkBattenbergNotRobustly(\n      char c,\n      double cx,\n      double cy,\n      int level,\n      List<Cell> matches,\n      BytesRef str,\n      Shape shape,\n      int maxLevel) {\n    assert str.length == level;\n    assert str.offset == 0;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    int strlen = str.length;\n    Rectangle rectangle = ctx.makeRectangle(cx - w, cx + w, cy - h, cy + h);\n    SpatialRelation v = shape.relate(rectangle);\n    if (SpatialRelation.CONTAINS == v) {\n      str.bytes[str.length++] = (byte)c;//append\n      //str.append(SpatialPrefixGrid.COVER);\n      matches.add(new QuadCell(BytesRef.deepCopyOf(str), v.transpose()));\n    } else if (SpatialRelation.DISJOINT == v) {\n      // nothing\n    } else { // SpatialRelation.WITHIN, SpatialRelation.INTERSECTS\n      str.bytes[str.length++] = (byte)c;//append\n\n      int nextLevel = level+1;\n      if (nextLevel >= maxLevel) {\n        //str.append(SpatialPrefixGrid.INTERSECTS);\n        matches.add(new QuadCell(BytesRef.deepCopyOf(str), v.transpose()));\n      } else {\n        buildNotRobustly(cx, cy, nextLevel, matches, str, shape, maxLevel);\n      }\n    }\n    str.length = strlen;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#checkBattenbergNotRobustly(char,double,double,int,List[Cell],BytesRef,Shape,int).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree#checkBattenbergNotRobustly(char,double,double,int,List[Cell],BytesRef,Shape,int).mjava","sourceNew":"  protected void checkBattenbergNotRobustly(\n      char c,\n      double cx,\n      double cy,\n      int level,\n      List<Cell> matches,\n      BytesRef str,\n      Shape shape,\n      int maxLevel) {\n    assert str.length == level;\n    assert str.offset == 0;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    int strlen = str.length;\n    Rectangle rectangle = ctx.getShapeFactory().rect(cx - w, cx + w, cy - h, cy + h);\n    SpatialRelation v = shape.relate(rectangle);\n    if (SpatialRelation.CONTAINS == v) {\n      str.bytes[str.length++] = (byte)c;//append\n      //str.append(SpatialPrefixGrid.COVER);\n      matches.add(new QuadCell(BytesRef.deepCopyOf(str), v.transpose()));\n    } else if (SpatialRelation.DISJOINT == v) {\n      // nothing\n    } else { // SpatialRelation.WITHIN, SpatialRelation.INTERSECTS\n      str.bytes[str.length++] = (byte)c;//append\n\n      int nextLevel = level+1;\n      if (nextLevel >= maxLevel) {\n        //str.append(SpatialPrefixGrid.INTERSECTS);\n        matches.add(new QuadCell(BytesRef.deepCopyOf(str), v.transpose()));\n      } else {\n        buildNotRobustly(cx, cy, nextLevel, matches, str, shape, maxLevel);\n      }\n    }\n    str.length = strlen;\n  }\n\n","sourceOld":"  protected void checkBattenbergNotRobustly(\n      char c,\n      double cx,\n      double cy,\n      int level,\n      List<Cell> matches,\n      BytesRef str,\n      Shape shape,\n      int maxLevel) {\n    assert str.length == level;\n    assert str.offset == 0;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    int strlen = str.length;\n    Rectangle rectangle = ctx.makeRectangle(cx - w, cx + w, cy - h, cy + h);\n    SpatialRelation v = shape.relate(rectangle);\n    if (SpatialRelation.CONTAINS == v) {\n      str.bytes[str.length++] = (byte)c;//append\n      //str.append(SpatialPrefixGrid.COVER);\n      matches.add(new QuadCell(BytesRef.deepCopyOf(str), v.transpose()));\n    } else if (SpatialRelation.DISJOINT == v) {\n      // nothing\n    } else { // SpatialRelation.WITHIN, SpatialRelation.INTERSECTS\n      str.bytes[str.length++] = (byte)c;//append\n\n      int nextLevel = level+1;\n      if (nextLevel >= maxLevel) {\n        //str.append(SpatialPrefixGrid.INTERSECTS);\n        matches.add(new QuadCell(BytesRef.deepCopyOf(str), v.transpose()));\n      } else {\n        buildNotRobustly(cx, cy, nextLevel, matches, str, shape, maxLevel);\n      }\n    }\n    str.length = strlen;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["e34e9db64b6fb5add5b2968e3a46342cef8363c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"e34e9db64b6fb5add5b2968e3a46342cef8363c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e34e9db64b6fb5add5b2968e3a46342cef8363c7"],"e34e9db64b6fb5add5b2968e3a46342cef8363c7":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}