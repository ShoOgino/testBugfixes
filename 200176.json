{"path":"lucene/core/src/java/org/apache/lucene/index/TermContext#build(IndexReaderContext,Term,boolean).mjava","commits":[{"id":"bcce0e518c0546269a896ca6124ba4313059185f","date":1340381078,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermContext#build(IndexReaderContext,Term,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/TermContext#build(IndexReaderContext,Term,boolean).mjava","sourceNew":"  /**\n   * Creates a {@link TermContext} from a top-level {@link IndexReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(IndexReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (final AtomicReaderContext ctx : context.leaves()) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final Fields fields = ctx.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, ctx.ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link TermContext} from a top-level {@link IndexReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(IndexReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (final AtomicReaderContext ctx : context.leaves()) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final Fields fields = ctx.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, ctx.ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermContext#build(IndexReaderContext,Term,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/TermContext#build(IndexReaderContext,Term,boolean).mjava","sourceNew":"  /**\n   * Creates a {@link TermContext} from a top-level {@link IndexReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(IndexReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (final AtomicReaderContext ctx : context.leaves()) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final Fields fields = ctx.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, ctx.ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link TermContext} from a top-level {@link IndexReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(IndexReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (final AtomicReaderContext ctx : context.leaves()) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final Fields fields = ctx.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, ctx.ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermContext#build(IndexReaderContext,Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermContext#build(IndexReaderContext,Term,boolean).mjava","sourceNew":"  /**\n   * Creates a {@link TermContext} from a top-level {@link IndexReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(IndexReaderContext context, Term term)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (final AtomicReaderContext ctx : context.leaves()) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final Fields fields = ctx.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, ctx.ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link TermContext} from a top-level {@link IndexReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(IndexReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (final AtomicReaderContext ctx : context.leaves()) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final Fields fields = ctx.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, ctx.ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","bugFix":null,"bugIntro":["8028ab7a24273833d53d35eb160dba5b57283cf5","8028ab7a24273833d53d35eb160dba5b57283cf5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermContext#build(IndexReaderContext,Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermContext#build(IndexReaderContext,Term,boolean).mjava","sourceNew":"  /**\n   * Creates a {@link TermContext} from a top-level {@link IndexReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(IndexReaderContext context, Term term)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (final AtomicReaderContext ctx : context.leaves()) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final Fields fields = ctx.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, ctx.ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link TermContext} from a top-level {@link IndexReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(IndexReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (final AtomicReaderContext ctx : context.leaves()) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final Fields fields = ctx.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, ctx.ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bcce0e518c0546269a896ca6124ba4313059185f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bcce0e518c0546269a896ca6124ba4313059185f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["bcce0e518c0546269a896ca6124ba4313059185f"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["bcce0e518c0546269a896ca6124ba4313059185f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"]},"commit2Childs":{"bcce0e518c0546269a896ca6124ba4313059185f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bcce0e518c0546269a896ca6124ba4313059185f","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}