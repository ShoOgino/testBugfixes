{"path":"lucene/core/src/test/org/apache/lucene/util/TestPagedBytes#testOverflow().mjava","commits":[{"id":"b6a6f522ee996ac01a5c740f35b880f734d0644e","date":1353506036,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestPagedBytes#testOverflow().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore // memory hole\n  public void testOverflow() throws IOException {\n    final int blockBits = _TestUtil.nextInt(random(), 14, 28);\n    final int blockSize = 1 << blockBits;\n    byte[] arr = new byte[_TestUtil.nextInt(random(), blockSize / 2, blockSize * 2)];\n    for (int i = 0; i < arr.length; ++i) {\n      arr[i] = (byte) i;\n    }\n    final long numBytes = (1L << 31) + _TestUtil.nextInt(random(), 1, blockSize * 3);\n    final PagedBytes p = new PagedBytes(blockBits);\n    final PagedBytesDataOutput out = p.getDataOutput();\n    for (long i = 0; i < numBytes; ) {\n      assertEquals(i, out.getPosition());\n      final int len = (int) Math.min(arr.length, numBytes - i);\n      out.writeBytes(arr, len);\n      i += len;\n    }\n    assertEquals(numBytes, out.getPosition());\n    p.freeze(random().nextBoolean());\n    final PagedBytesDataInput in = p.getDataInput();\n\n    for (long offset : new long[] {0L, Integer.MAX_VALUE, numBytes - 1,\n        _TestUtil.nextLong(random(), 1, numBytes - 2)}) {\n      in.setPosition(offset);\n      assertEquals(offset, in.getPosition());\n      assertEquals(arr[(int) (offset % arr.length)], in.readByte());\n      assertEquals(offset+1, in.getPosition());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestPagedBytes#testOverflow().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore // memory hole\n  public void testOverflow() throws IOException {\n    final int blockBits = _TestUtil.nextInt(random(), 14, 28);\n    final int blockSize = 1 << blockBits;\n    byte[] arr = new byte[_TestUtil.nextInt(random(), blockSize / 2, blockSize * 2)];\n    for (int i = 0; i < arr.length; ++i) {\n      arr[i] = (byte) i;\n    }\n    final long numBytes = (1L << 31) + _TestUtil.nextInt(random(), 1, blockSize * 3);\n    final PagedBytes p = new PagedBytes(blockBits);\n    final PagedBytesDataOutput out = p.getDataOutput();\n    for (long i = 0; i < numBytes; ) {\n      assertEquals(i, out.getPosition());\n      final int len = (int) Math.min(arr.length, numBytes - i);\n      out.writeBytes(arr, len);\n      i += len;\n    }\n    assertEquals(numBytes, out.getPosition());\n    p.freeze(random().nextBoolean());\n    final PagedBytesDataInput in = p.getDataInput();\n\n    for (long offset : new long[] {0L, Integer.MAX_VALUE, numBytes - 1,\n        _TestUtil.nextLong(random(), 1, numBytes - 2)}) {\n      in.setPosition(offset);\n      assertEquals(offset, in.getPosition());\n      assertEquals(arr[(int) (offset % arr.length)], in.readByte());\n      assertEquals(offset+1, in.getPosition());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa968010b9c6598d02666b7b879c12e3cb0db4ee","date":1359063766,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestPagedBytes#testOverflow().mjava","sourceNew":null,"sourceOld":"  @Ignore // memory hole\n  public void testOverflow() throws IOException {\n    final int blockBits = _TestUtil.nextInt(random(), 14, 28);\n    final int blockSize = 1 << blockBits;\n    byte[] arr = new byte[_TestUtil.nextInt(random(), blockSize / 2, blockSize * 2)];\n    for (int i = 0; i < arr.length; ++i) {\n      arr[i] = (byte) i;\n    }\n    final long numBytes = (1L << 31) + _TestUtil.nextInt(random(), 1, blockSize * 3);\n    final PagedBytes p = new PagedBytes(blockBits);\n    final PagedBytesDataOutput out = p.getDataOutput();\n    for (long i = 0; i < numBytes; ) {\n      assertEquals(i, out.getPosition());\n      final int len = (int) Math.min(arr.length, numBytes - i);\n      out.writeBytes(arr, len);\n      i += len;\n    }\n    assertEquals(numBytes, out.getPosition());\n    p.freeze(random().nextBoolean());\n    final PagedBytesDataInput in = p.getDataInput();\n\n    for (long offset : new long[] {0L, Integer.MAX_VALUE, numBytes - 1,\n        _TestUtil.nextLong(random(), 1, numBytes - 2)}) {\n      in.setPosition(offset);\n      assertEquals(offset, in.getPosition());\n      assertEquals(arr[(int) (offset % arr.length)], in.readByte());\n      assertEquals(offset+1, in.getPosition());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7235ca8bb75e738a30076c041000782ed1a501f","date":1359986155,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestPagedBytes#testOverflow().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore // memory hole\n  public void testOverflow() throws IOException {\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"testOverflow\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    final int blockBits = _TestUtil.nextInt(random(), 14, 28);\n    final int blockSize = 1 << blockBits;\n    byte[] arr = new byte[_TestUtil.nextInt(random(), blockSize / 2, blockSize * 2)];\n    for (int i = 0; i < arr.length; ++i) {\n      arr[i] = (byte) i;\n    }\n    final long numBytes = (1L << 31) + _TestUtil.nextInt(random(), 1, blockSize * 3);\n    final PagedBytes p = new PagedBytes(blockBits);\n    final IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    for (long i = 0; i < numBytes; ) {\n      assertEquals(i, out.getFilePointer());\n      final int len = (int) Math.min(arr.length, numBytes - i);\n      out.writeBytes(arr, len);\n      i += len;\n    }\n    assertEquals(numBytes, out.getFilePointer());\n    out.close();\n    final IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT);\n    p.copy(in, numBytes);\n    final PagedBytes.Reader reader = p.freeze(random().nextBoolean());\n\n    for (long offset : new long[] {0L, Integer.MAX_VALUE, numBytes - 1,\n        _TestUtil.nextLong(random(), 1, numBytes - 2)}) {\n      BytesRef b = new BytesRef();\n      reader.fillSlice(b, offset, 1);\n      assertEquals(arr[(int) (offset % arr.length)], b.bytes[b.offset]);\n    }\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestPagedBytes#testOverflow().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestPagedBytes#testOverflow().mjava","sourceNew":"  @Ignore // memory hole\n  public void testOverflow() throws IOException {\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"testOverflow\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    final int blockBits = _TestUtil.nextInt(random(), 14, 28);\n    final int blockSize = 1 << blockBits;\n    byte[] arr = new byte[_TestUtil.nextInt(random(), blockSize / 2, blockSize * 2)];\n    for (int i = 0; i < arr.length; ++i) {\n      arr[i] = (byte) i;\n    }\n    final long numBytes = (1L << 31) + _TestUtil.nextInt(random(), 1, blockSize * 3);\n    final PagedBytes p = new PagedBytes(blockBits);\n    final IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    for (long i = 0; i < numBytes; ) {\n      assertEquals(i, out.getFilePointer());\n      final int len = (int) Math.min(arr.length, numBytes - i);\n      out.writeBytes(arr, len);\n      i += len;\n    }\n    assertEquals(numBytes, out.getFilePointer());\n    out.close();\n    final IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT);\n    p.copy(in, numBytes);\n    final PagedBytes.Reader reader = p.freeze(random().nextBoolean());\n\n    for (long offset : new long[] {0L, Integer.MAX_VALUE, numBytes - 1,\n        _TestUtil.nextLong(random(), 1, numBytes - 2)}) {\n      BytesRef b = new BytesRef();\n      reader.fillSlice(b, offset, 1);\n      assertEquals(arr[(int) (offset % arr.length)], b.bytes[b.offset]);\n    }\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Ignore // memory hole\n  public void testOverflow() throws IOException {\n    final int blockBits = _TestUtil.nextInt(random(), 14, 28);\n    final int blockSize = 1 << blockBits;\n    byte[] arr = new byte[_TestUtil.nextInt(random(), blockSize / 2, blockSize * 2)];\n    for (int i = 0; i < arr.length; ++i) {\n      arr[i] = (byte) i;\n    }\n    final long numBytes = (1L << 31) + _TestUtil.nextInt(random(), 1, blockSize * 3);\n    final PagedBytes p = new PagedBytes(blockBits);\n    final PagedBytesDataOutput out = p.getDataOutput();\n    for (long i = 0; i < numBytes; ) {\n      assertEquals(i, out.getPosition());\n      final int len = (int) Math.min(arr.length, numBytes - i);\n      out.writeBytes(arr, len);\n      i += len;\n    }\n    assertEquals(numBytes, out.getPosition());\n    p.freeze(random().nextBoolean());\n    final PagedBytesDataInput in = p.getDataInput();\n\n    for (long offset : new long[] {0L, Integer.MAX_VALUE, numBytes - 1,\n        _TestUtil.nextLong(random(), 1, numBytes - 2)}) {\n      in.setPosition(offset);\n      assertEquals(offset, in.getPosition());\n      assertEquals(arr[(int) (offset % arr.length)], in.readByte());\n      assertEquals(offset+1, in.getPosition());\n    }\n  }\n\n","bugFix":["b6a6f522ee996ac01a5c740f35b880f734d0644e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestPagedBytes#testOverflow().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestPagedBytes#testOverflow().mjava","sourceNew":"  @Ignore // memory hole\n  public void testOverflow() throws IOException {\n    BaseDirectoryWrapper dir = newFSDirectory(TestUtil.getTempDir(\"testOverflow\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    final int blockBits = TestUtil.nextInt(random(), 14, 28);\n    final int blockSize = 1 << blockBits;\n    byte[] arr = new byte[TestUtil.nextInt(random(), blockSize / 2, blockSize * 2)];\n    for (int i = 0; i < arr.length; ++i) {\n      arr[i] = (byte) i;\n    }\n    final long numBytes = (1L << 31) + TestUtil.nextInt(random(), 1, blockSize * 3);\n    final PagedBytes p = new PagedBytes(blockBits);\n    final IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    for (long i = 0; i < numBytes; ) {\n      assertEquals(i, out.getFilePointer());\n      final int len = (int) Math.min(arr.length, numBytes - i);\n      out.writeBytes(arr, len);\n      i += len;\n    }\n    assertEquals(numBytes, out.getFilePointer());\n    out.close();\n    final IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT);\n    p.copy(in, numBytes);\n    final PagedBytes.Reader reader = p.freeze(random().nextBoolean());\n\n    for (long offset : new long[] {0L, Integer.MAX_VALUE, numBytes - 1,\n        TestUtil.nextLong(random(), 1, numBytes - 2)}) {\n      BytesRef b = new BytesRef();\n      reader.fillSlice(b, offset, 1);\n      assertEquals(arr[(int) (offset % arr.length)], b.bytes[b.offset]);\n    }\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Ignore // memory hole\n  public void testOverflow() throws IOException {\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"testOverflow\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    final int blockBits = _TestUtil.nextInt(random(), 14, 28);\n    final int blockSize = 1 << blockBits;\n    byte[] arr = new byte[_TestUtil.nextInt(random(), blockSize / 2, blockSize * 2)];\n    for (int i = 0; i < arr.length; ++i) {\n      arr[i] = (byte) i;\n    }\n    final long numBytes = (1L << 31) + _TestUtil.nextInt(random(), 1, blockSize * 3);\n    final PagedBytes p = new PagedBytes(blockBits);\n    final IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    for (long i = 0; i < numBytes; ) {\n      assertEquals(i, out.getFilePointer());\n      final int len = (int) Math.min(arr.length, numBytes - i);\n      out.writeBytes(arr, len);\n      i += len;\n    }\n    assertEquals(numBytes, out.getFilePointer());\n    out.close();\n    final IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT);\n    p.copy(in, numBytes);\n    final PagedBytes.Reader reader = p.freeze(random().nextBoolean());\n\n    for (long offset : new long[] {0L, Integer.MAX_VALUE, numBytes - 1,\n        _TestUtil.nextLong(random(), 1, numBytes - 2)}) {\n      BytesRef b = new BytesRef();\n      reader.fillSlice(b, offset, 1);\n      assertEquals(arr[(int) (offset % arr.length)], b.bytes[b.offset]);\n    }\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestPagedBytes#testOverflow().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestPagedBytes#testOverflow().mjava","sourceNew":"  @Ignore // memory hole\n  public void testOverflow() throws IOException {\n    BaseDirectoryWrapper dir = newFSDirectory(TestUtil.createTempDir(\"testOverflow\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    final int blockBits = TestUtil.nextInt(random(), 14, 28);\n    final int blockSize = 1 << blockBits;\n    byte[] arr = new byte[TestUtil.nextInt(random(), blockSize / 2, blockSize * 2)];\n    for (int i = 0; i < arr.length; ++i) {\n      arr[i] = (byte) i;\n    }\n    final long numBytes = (1L << 31) + TestUtil.nextInt(random(), 1, blockSize * 3);\n    final PagedBytes p = new PagedBytes(blockBits);\n    final IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    for (long i = 0; i < numBytes; ) {\n      assertEquals(i, out.getFilePointer());\n      final int len = (int) Math.min(arr.length, numBytes - i);\n      out.writeBytes(arr, len);\n      i += len;\n    }\n    assertEquals(numBytes, out.getFilePointer());\n    out.close();\n    final IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT);\n    p.copy(in, numBytes);\n    final PagedBytes.Reader reader = p.freeze(random().nextBoolean());\n\n    for (long offset : new long[] {0L, Integer.MAX_VALUE, numBytes - 1,\n        TestUtil.nextLong(random(), 1, numBytes - 2)}) {\n      BytesRef b = new BytesRef();\n      reader.fillSlice(b, offset, 1);\n      assertEquals(arr[(int) (offset % arr.length)], b.bytes[b.offset]);\n    }\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Ignore // memory hole\n  public void testOverflow() throws IOException {\n    BaseDirectoryWrapper dir = newFSDirectory(TestUtil.getTempDir(\"testOverflow\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    final int blockBits = TestUtil.nextInt(random(), 14, 28);\n    final int blockSize = 1 << blockBits;\n    byte[] arr = new byte[TestUtil.nextInt(random(), blockSize / 2, blockSize * 2)];\n    for (int i = 0; i < arr.length; ++i) {\n      arr[i] = (byte) i;\n    }\n    final long numBytes = (1L << 31) + TestUtil.nextInt(random(), 1, blockSize * 3);\n    final PagedBytes p = new PagedBytes(blockBits);\n    final IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    for (long i = 0; i < numBytes; ) {\n      assertEquals(i, out.getFilePointer());\n      final int len = (int) Math.min(arr.length, numBytes - i);\n      out.writeBytes(arr, len);\n      i += len;\n    }\n    assertEquals(numBytes, out.getFilePointer());\n    out.close();\n    final IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT);\n    p.copy(in, numBytes);\n    final PagedBytes.Reader reader = p.freeze(random().nextBoolean());\n\n    for (long offset : new long[] {0L, Integer.MAX_VALUE, numBytes - 1,\n        TestUtil.nextLong(random(), 1, numBytes - 2)}) {\n      BytesRef b = new BytesRef();\n      reader.fillSlice(b, offset, 1);\n      assertEquals(arr[(int) (offset % arr.length)], b.bytes[b.offset]);\n    }\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestPagedBytes#testOverflow().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestPagedBytes#testOverflow().mjava","sourceNew":"  @Ignore // memory hole\n  public void testOverflow() throws IOException {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"testOverflow\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    final int blockBits = TestUtil.nextInt(random(), 14, 28);\n    final int blockSize = 1 << blockBits;\n    byte[] arr = new byte[TestUtil.nextInt(random(), blockSize / 2, blockSize * 2)];\n    for (int i = 0; i < arr.length; ++i) {\n      arr[i] = (byte) i;\n    }\n    final long numBytes = (1L << 31) + TestUtil.nextInt(random(), 1, blockSize * 3);\n    final PagedBytes p = new PagedBytes(blockBits);\n    final IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    for (long i = 0; i < numBytes; ) {\n      assertEquals(i, out.getFilePointer());\n      final int len = (int) Math.min(arr.length, numBytes - i);\n      out.writeBytes(arr, len);\n      i += len;\n    }\n    assertEquals(numBytes, out.getFilePointer());\n    out.close();\n    final IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT);\n    p.copy(in, numBytes);\n    final PagedBytes.Reader reader = p.freeze(random().nextBoolean());\n\n    for (long offset : new long[] {0L, Integer.MAX_VALUE, numBytes - 1,\n        TestUtil.nextLong(random(), 1, numBytes - 2)}) {\n      BytesRef b = new BytesRef();\n      reader.fillSlice(b, offset, 1);\n      assertEquals(arr[(int) (offset % arr.length)], b.bytes[b.offset]);\n    }\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Ignore // memory hole\n  public void testOverflow() throws IOException {\n    BaseDirectoryWrapper dir = newFSDirectory(TestUtil.createTempDir(\"testOverflow\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    final int blockBits = TestUtil.nextInt(random(), 14, 28);\n    final int blockSize = 1 << blockBits;\n    byte[] arr = new byte[TestUtil.nextInt(random(), blockSize / 2, blockSize * 2)];\n    for (int i = 0; i < arr.length; ++i) {\n      arr[i] = (byte) i;\n    }\n    final long numBytes = (1L << 31) + TestUtil.nextInt(random(), 1, blockSize * 3);\n    final PagedBytes p = new PagedBytes(blockBits);\n    final IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    for (long i = 0; i < numBytes; ) {\n      assertEquals(i, out.getFilePointer());\n      final int len = (int) Math.min(arr.length, numBytes - i);\n      out.writeBytes(arr, len);\n      i += len;\n    }\n    assertEquals(numBytes, out.getFilePointer());\n    out.close();\n    final IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT);\n    p.copy(in, numBytes);\n    final PagedBytes.Reader reader = p.freeze(random().nextBoolean());\n\n    for (long offset : new long[] {0L, Integer.MAX_VALUE, numBytes - 1,\n        TestUtil.nextLong(random(), 1, numBytes - 2)}) {\n      BytesRef b = new BytesRef();\n      reader.fillSlice(b, offset, 1);\n      assertEquals(arr[(int) (offset % arr.length)], b.bytes[b.offset]);\n    }\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestPagedBytes#testOverflow().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestPagedBytes#testOverflow().mjava","sourceNew":"  @Ignore // memory hole\n  public void testOverflow() throws IOException {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"testOverflow\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    final int blockBits = TestUtil.nextInt(random(), 14, 28);\n    final int blockSize = 1 << blockBits;\n    byte[] arr = new byte[TestUtil.nextInt(random(), blockSize / 2, blockSize * 2)];\n    for (int i = 0; i < arr.length; ++i) {\n      arr[i] = (byte) i;\n    }\n    final long numBytes = (1L << 31) + TestUtil.nextInt(random(), 1, blockSize * 3);\n    final PagedBytes p = new PagedBytes(blockBits);\n    final IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    for (long i = 0; i < numBytes; ) {\n      assertEquals(i, out.getFilePointer());\n      final int len = (int) Math.min(arr.length, numBytes - i);\n      out.writeBytes(arr, len);\n      i += len;\n    }\n    assertEquals(numBytes, out.getFilePointer());\n    out.close();\n    final IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT);\n    p.copy(in, numBytes);\n    final PagedBytes.Reader reader = p.freeze(random().nextBoolean());\n\n    for (long offset : new long[] {0L, Integer.MAX_VALUE, numBytes - 1,\n        TestUtil.nextLong(random(), 1, numBytes - 2)}) {\n      BytesRef b = new BytesRef();\n      reader.fillSlice(b, offset, 1);\n      assertEquals(arr[(int) (offset % arr.length)], b.bytes[b.offset]);\n    }\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Ignore // memory hole\n  public void testOverflow() throws IOException {\n    BaseDirectoryWrapper dir = newFSDirectory(TestUtil.getTempDir(\"testOverflow\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    final int blockBits = TestUtil.nextInt(random(), 14, 28);\n    final int blockSize = 1 << blockBits;\n    byte[] arr = new byte[TestUtil.nextInt(random(), blockSize / 2, blockSize * 2)];\n    for (int i = 0; i < arr.length; ++i) {\n      arr[i] = (byte) i;\n    }\n    final long numBytes = (1L << 31) + TestUtil.nextInt(random(), 1, blockSize * 3);\n    final PagedBytes p = new PagedBytes(blockBits);\n    final IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    for (long i = 0; i < numBytes; ) {\n      assertEquals(i, out.getFilePointer());\n      final int len = (int) Math.min(arr.length, numBytes - i);\n      out.writeBytes(arr, len);\n      i += len;\n    }\n    assertEquals(numBytes, out.getFilePointer());\n    out.close();\n    final IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT);\n    p.copy(in, numBytes);\n    final PagedBytes.Reader reader = p.freeze(random().nextBoolean());\n\n    for (long offset : new long[] {0L, Integer.MAX_VALUE, numBytes - 1,\n        TestUtil.nextLong(random(), 1, numBytes - 2)}) {\n      BytesRef b = new BytesRef();\n      reader.fillSlice(b, offset, 1);\n      assertEquals(arr[(int) (offset % arr.length)], b.bytes[b.offset]);\n    }\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fa968010b9c6598d02666b7b879c12e3cb0db4ee":["407687e67faf6e1f02a211ca078d8e3eed631027"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["b6a6f522ee996ac01a5c740f35b880f734d0644e","e7235ca8bb75e738a30076c041000782ed1a501f"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e7235ca8bb75e738a30076c041000782ed1a501f":["fa968010b9c6598d02666b7b879c12e3cb0db4ee"],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b6a6f522ee996ac01a5c740f35b880f734d0644e"],"b6a6f522ee996ac01a5c740f35b880f734d0644e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"]},"commit2Childs":{"fa968010b9c6598d02666b7b879c12e3cb0db4ee":["e7235ca8bb75e738a30076c041000782ed1a501f"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["6613659748fe4411a7dcf85266e55db1f95f7315"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"407687e67faf6e1f02a211ca078d8e3eed631027":["fa968010b9c6598d02666b7b879c12e3cb0db4ee"],"e7235ca8bb75e738a30076c041000782ed1a501f":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","b6a6f522ee996ac01a5c740f35b880f734d0644e"],"b6a6f522ee996ac01a5c740f35b880f734d0644e":["d4d69c535930b5cce125cff868d40f6373dc27d4","407687e67faf6e1f02a211ca078d8e3eed631027"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}