{"path":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandlerLocal#getSecurityConfig(boolean).mjava","commits":[{"id":"170ef9c82c0d27d4151feff316ba63fbedd91bbf","date":1477436680,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandlerLocal#getSecurityConfig(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Fetches security props from SOLR_HOME\n   * @param getFresh NOP\n   * @return SecurityConfig whose data property either contains security.json, or an empty map if not found\n   */\n  @Override\n  public SecurityConfig getSecurityConfig(boolean getFresh) {\n    if (Files.exists(securityJsonPath)) {\n      try (InputStream securityJsonIs = Files.newInputStream(securityJsonPath)) {\n        return new SecurityConfig().setData(securityJsonIs);\n      } catch (IOException e) { /* Fall through */ }\n    }\n    return new SecurityConfig();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b363b110592b02d7f488aff0dbe40a53d3ce81df","date":1477469211,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandlerLocal#getSecurityConfig(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Fetches security props from SOLR_HOME\n   * @param getFresh NOP\n   * @return SecurityConfig whose data property either contains security.json, or an empty map if not found\n   */\n  @Override\n  public SecurityConfig getSecurityConfig(boolean getFresh) {\n    if (Files.exists(securityJsonPath)) {\n      try (InputStream securityJsonIs = Files.newInputStream(securityJsonPath)) {\n        return new SecurityConfig().setData(securityJsonIs);\n      } catch (IOException e) { /* Fall through */ }\n    }\n    return new SecurityConfig();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandlerLocal#getSecurityConfig(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Fetches security props from SOLR_HOME\n   * @param getFresh NOP\n   * @return SecurityConfig whose data property either contains security.json, or an empty map if not found\n   */\n  @Override\n  public SecurityConfig getSecurityConfig(boolean getFresh) {\n    if (Files.exists(securityJsonPath)) {\n      try (InputStream securityJsonIs = Files.newInputStream(securityJsonPath)) {\n        return new SecurityConfig().setData(securityJsonIs);\n      } catch (IOException e) { /* Fall through */ }\n    }\n    return new SecurityConfig();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffe6147428175244c52b6d10271c1c33ea8dd895","date":1477871854,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandlerLocal#getSecurityConfig(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandlerLocal#getSecurityConfig(boolean).mjava","sourceNew":"  /**\n   * Fetches security props from SOLR_HOME\n   * @param getFresh NOP\n   * @return SecurityConfig whose data property either contains security.json, or an empty map if not found\n   */\n  @Override\n  public SecurityConfig getSecurityConfig(boolean getFresh) {\n    if (Files.exists(securityJsonPath)) {\n      try (InputStream securityJsonIs = Files.newInputStream(securityJsonPath)) {\n        return new SecurityConfig().setData(securityJsonIs);\n      } catch (Exception e) { \n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed opening existing security.json file: \" + securityJsonPath, e);\n      }\n    }\n    return new SecurityConfig();\n  }\n\n","sourceOld":"  /**\n   * Fetches security props from SOLR_HOME\n   * @param getFresh NOP\n   * @return SecurityConfig whose data property either contains security.json, or an empty map if not found\n   */\n  @Override\n  public SecurityConfig getSecurityConfig(boolean getFresh) {\n    if (Files.exists(securityJsonPath)) {\n      try (InputStream securityJsonIs = Files.newInputStream(securityJsonPath)) {\n        return new SecurityConfig().setData(securityJsonIs);\n      } catch (IOException e) { /* Fall through */ }\n    }\n    return new SecurityConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandlerLocal#getSecurityConfig(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandlerLocal#getSecurityConfig(boolean).mjava","sourceNew":"  /**\n   * Fetches security props from SOLR_HOME\n   * @param getFresh NOP\n   * @return SecurityConfig whose data property either contains security.json, or an empty map if not found\n   */\n  @Override\n  public SecurityConfig getSecurityConfig(boolean getFresh) {\n    if (Files.exists(securityJsonPath)) {\n      try (InputStream securityJsonIs = Files.newInputStream(securityJsonPath)) {\n        return new SecurityConfig().setData(securityJsonIs);\n      } catch (Exception e) { \n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed opening existing security.json file: \" + securityJsonPath, e);\n      }\n    }\n    return new SecurityConfig();\n  }\n\n","sourceOld":"  /**\n   * Fetches security props from SOLR_HOME\n   * @param getFresh NOP\n   * @return SecurityConfig whose data property either contains security.json, or an empty map if not found\n   */\n  @Override\n  public SecurityConfig getSecurityConfig(boolean getFresh) {\n    if (Files.exists(securityJsonPath)) {\n      try (InputStream securityJsonIs = Files.newInputStream(securityJsonPath)) {\n        return new SecurityConfig().setData(securityJsonIs);\n      } catch (IOException e) { /* Fall through */ }\n    }\n    return new SecurityConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ffe6147428175244c52b6d10271c1c33ea8dd895":["b363b110592b02d7f488aff0dbe40a53d3ce81df"],"170ef9c82c0d27d4151feff316ba63fbedd91bbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b363b110592b02d7f488aff0dbe40a53d3ce81df"],"b363b110592b02d7f488aff0dbe40a53d3ce81df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","170ef9c82c0d27d4151feff316ba63fbedd91bbf"],"320888923ec13b91f53082558f01f4c9960dd226":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","ffe6147428175244c52b6d10271c1c33ea8dd895"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ffe6147428175244c52b6d10271c1c33ea8dd895"]},"commit2Childs":{"ffe6147428175244c52b6d10271c1c33ea8dd895":["320888923ec13b91f53082558f01f4c9960dd226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"170ef9c82c0d27d4151feff316ba63fbedd91bbf":["b363b110592b02d7f488aff0dbe40a53d3ce81df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["170ef9c82c0d27d4151feff316ba63fbedd91bbf","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","b363b110592b02d7f488aff0dbe40a53d3ce81df"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["320888923ec13b91f53082558f01f4c9960dd226"],"b363b110592b02d7f488aff0dbe40a53d3ce81df":["ffe6147428175244c52b6d10271c1c33ea8dd895","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"320888923ec13b91f53082558f01f4c9960dd226":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["320888923ec13b91f53082558f01f4c9960dd226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}