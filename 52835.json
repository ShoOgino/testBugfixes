{"path":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testNestedDocs().mjava","commits":[{"id":"b4e08e2b6886d78c91752d82ea2b436c4324cd55","date":1464786234,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testNestedDocs().mjava","pathOld":"/dev/null","sourceNew":"  public void testNestedDocs() throws Exception {\n    String json = \"{a:{\" +\n        \"b:{c:d},\" +\n        \"x:y\" +\n        \"}}\";\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/\", \"/a/b\", Arrays.asList(\"/a/x\", \"/a/b/*\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      assertEquals(((Map) record.get(null)).get(\"c\"), \"d\");\n    });\n    json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      List l = (List) record.get(null);\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n    });\n    streamer = JsonRecordReader.getInst(\"/\", \"/a/b\", Arrays.asList(\"$FQN:/**\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"a.x\"), \"y\");\n      List l = (List) record.get(null);\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n      assertEquals(m.get(\"d.p\"), \"q\");\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"611f7ea4eee5babadf4129bfa5fbae964738cd7c","date":1464787051,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testNestedDocs().mjava","pathOld":"/dev/null","sourceNew":"  public void testNestedDocs() throws Exception {\n    String json = \"{a:{\" +\n        \"b:{c:d},\" +\n        \"x:y\" +\n        \"}}\";\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/\", \"/a/b\", Arrays.asList(\"/a/x\", \"/a/b/*\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      assertEquals(((Map) record.get(null)).get(\"c\"), \"d\");\n    });\n    json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      List l = (List) record.get(null);\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n    });\n    streamer = JsonRecordReader.getInst(\"/\", \"/a/b\", Arrays.asList(\"$FQN:/**\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"a.x\"), \"y\");\n      List l = (List) record.get(null);\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n      assertEquals(m.get(\"d.p\"), \"q\");\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testNestedDocs().mjava","pathOld":"/dev/null","sourceNew":"  public void testNestedDocs() throws Exception {\n    String json = \"{a:{\" +\n        \"b:{c:d},\" +\n        \"x:y\" +\n        \"}}\";\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/\", \"/a/b\", Arrays.asList(\"/a/x\", \"/a/b/*\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      assertEquals(((Map) record.get(null)).get(\"c\"), \"d\");\n    });\n    json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      List l = (List) record.get(null);\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n    });\n    streamer = JsonRecordReader.getInst(\"/\", \"/a/b\", Arrays.asList(\"$FQN:/**\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"a.x\"), \"y\");\n      List l = (List) record.get(null);\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n      assertEquals(m.get(\"d.p\"), \"q\");\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testNestedDocs().mjava","pathOld":"/dev/null","sourceNew":"  public void testNestedDocs() throws Exception {\n    String json = \"{a:{\" +\n        \"b:{c:d},\" +\n        \"x:y\" +\n        \"}}\";\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/\", \"/a/b\", Arrays.asList(\"/a/x\", \"/a/b/*\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      assertEquals(((Map) record.get(null)).get(\"c\"), \"d\");\n    });\n    json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      List l = (List) record.get(null);\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n    });\n    streamer = JsonRecordReader.getInst(\"/\", \"/a/b\", Arrays.asList(\"$FQN:/**\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"a.x\"), \"y\");\n      List l = (List) record.get(null);\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n      assertEquals(m.get(\"d.p\"), \"q\");\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d9512babbd72795eb013cdd392dad2e2b2313e","date":1465331500,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testNestedDocs().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testNestedDocs().mjava","sourceNew":"  public void testNestedDocs() throws Exception {\n    String json = \"{a:{\" +\n        \"b:{c:d},\" +\n        \"x:y\" +\n        \"}}\";\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/|/a/b\", Arrays.asList(\"/a/x\", \"/a/b/*\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      assertEquals(((Map) record.get(null)).get(\"c\"), \"d\");\n    });\n    json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      List l = (List) record.get(null);\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n    });\n    streamer = JsonRecordReader.getInst(\"/|/a/b\", Arrays.asList(\"$FQN:/**\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"a.x\"), \"y\");\n      List l = (List) record.get(null);\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n      assertEquals(m.get(\"d.p\"), \"q\");\n    });\n  }\n\n","sourceOld":"  public void testNestedDocs() throws Exception {\n    String json = \"{a:{\" +\n        \"b:{c:d},\" +\n        \"x:y\" +\n        \"}}\";\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/\", \"/a/b\", Arrays.asList(\"/a/x\", \"/a/b/*\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      assertEquals(((Map) record.get(null)).get(\"c\"), \"d\");\n    });\n    json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      List l = (List) record.get(null);\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n    });\n    streamer = JsonRecordReader.getInst(\"/\", \"/a/b\", Arrays.asList(\"$FQN:/**\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"a.x\"), \"y\");\n      List l = (List) record.get(null);\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n      assertEquals(m.get(\"d.p\"), \"q\");\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testNestedDocs().mjava","pathOld":"/dev/null","sourceNew":"  public void testNestedDocs() throws Exception {\n    String json = \"{a:{\" +\n        \"b:{c:d},\" +\n        \"x:y\" +\n        \"}}\";\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/|/a/b\", Arrays.asList(\"/a/x\", \"/a/b/*\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      assertEquals(((Map) record.get(null)).get(\"c\"), \"d\");\n    });\n    json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      List l = (List) record.get(null);\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n    });\n    streamer = JsonRecordReader.getInst(\"/|/a/b\", Arrays.asList(\"$FQN:/**\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"a.x\"), \"y\");\n      List l = (List) record.get(null);\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n      assertEquals(m.get(\"d.p\"), \"q\");\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"649e3bfe4ffa5e921ce7657ceec85e58b82d9c32","date":1529037977,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testNestedDocs().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testNestedDocs().mjava","sourceNew":"  public void testNestedDocs() throws Exception {\n    String json = \"{a:{\" +\n        \"b:{c:d},\" +\n        \"x:y\" +\n        \"}}\";\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/|/a/b\", Arrays.asList(\"/a/x\", \"/a/b/*\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      assertEquals(((Map) record.get(\"b\")).get(\"c\"), \"d\");\n    });\n    json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      List l = (List) record.get(\"b\");\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n    });\n    streamer = JsonRecordReader.getInst(\"/|/a/b\", Arrays.asList(\"$FQN:/**\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"a.x\"), \"y\");\n      List l = (List) record.get(\"b\");\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n      assertEquals(m.get(\"d.p\"), \"q\");\n    });\n  }\n\n","sourceOld":"  public void testNestedDocs() throws Exception {\n    String json = \"{a:{\" +\n        \"b:{c:d},\" +\n        \"x:y\" +\n        \"}}\";\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/|/a/b\", Arrays.asList(\"/a/x\", \"/a/b/*\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      assertEquals(((Map) record.get(null)).get(\"c\"), \"d\");\n    });\n    json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      List l = (List) record.get(null);\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n    });\n    streamer = JsonRecordReader.getInst(\"/|/a/b\", Arrays.asList(\"$FQN:/**\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"a.x\"), \"y\");\n      List l = (List) record.get(null);\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n      assertEquals(m.get(\"d.p\"), \"q\");\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testNestedDocs().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testNestedDocs().mjava","sourceNew":"  public void testNestedDocs() throws Exception {\n    String json = \"{a:{\" +\n        \"b:{c:d},\" +\n        \"x:y\" +\n        \"}}\";\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/|/a/b\", Arrays.asList(\"/a/x\", \"/a/b/*\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      assertEquals(((Map) record.get(\"b\")).get(\"c\"), \"d\");\n    });\n    json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      List l = (List) record.get(\"b\");\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n    });\n    streamer = JsonRecordReader.getInst(\"/|/a/b\", Arrays.asList(\"$FQN:/**\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"a.x\"), \"y\");\n      List l = (List) record.get(\"b\");\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n      assertEquals(m.get(\"d.p\"), \"q\");\n    });\n  }\n\n","sourceOld":"  public void testNestedDocs() throws Exception {\n    String json = \"{a:{\" +\n        \"b:{c:d},\" +\n        \"x:y\" +\n        \"}}\";\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/|/a/b\", Arrays.asList(\"/a/x\", \"/a/b/*\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      assertEquals(((Map) record.get(null)).get(\"c\"), \"d\");\n    });\n    json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      List l = (List) record.get(null);\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n    });\n    streamer = JsonRecordReader.getInst(\"/|/a/b\", Arrays.asList(\"$FQN:/**\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"a.x\"), \"y\");\n      List l = (List) record.get(null);\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n      assertEquals(m.get(\"d.p\"), \"q\");\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testNestedDocs().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testNestedDocs().mjava","sourceNew":"  public void testNestedDocs() throws Exception {\n    String json = \"{a:{\" +\n        \"b:{c:d},\" +\n        \"x:y\" +\n        \"}}\";\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/|/a/b\", Arrays.asList(\"/a/x\", \"/a/b/*\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      assertEquals(((Map) record.get(\"b\")).get(\"c\"), \"d\");\n    });\n    json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      List l = (List) record.get(\"b\");\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n    });\n    streamer = JsonRecordReader.getInst(\"/|/a/b\", Arrays.asList(\"$FQN:/**\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"a.x\"), \"y\");\n      List l = (List) record.get(\"b\");\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n      assertEquals(m.get(\"d.p\"), \"q\");\n    });\n  }\n\n","sourceOld":"  public void testNestedDocs() throws Exception {\n    String json = \"{a:{\" +\n        \"b:{c:d},\" +\n        \"x:y\" +\n        \"}}\";\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/|/a/b\", Arrays.asList(\"/a/x\", \"/a/b/*\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      assertEquals(((Map) record.get(null)).get(\"c\"), \"d\");\n    });\n    json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      List l = (List) record.get(null);\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n    });\n    streamer = JsonRecordReader.getInst(\"/|/a/b\", Arrays.asList(\"$FQN:/**\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"a.x\"), \"y\");\n      List l = (List) record.get(null);\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n      assertEquals(m.get(\"d.p\"), \"q\");\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testNestedDocs().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testNestedDocs().mjava","sourceNew":"  public void testNestedDocs() throws Exception {\n    String json = \"{a:{\" +\n        \"b:{c:d},\" +\n        \"x:y\" +\n        \"}}\";\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/|/a/b\", Arrays.asList(\"/a/x\", \"/a/b/*\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      assertEquals(((Map) record.get(\"b\")).get(\"c\"), \"d\");\n    });\n    json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      @SuppressWarnings({\"rawtypes\"})\n      List l = (List) record.get(\"b\");\n      @SuppressWarnings({\"rawtypes\"})\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n    });\n    streamer = JsonRecordReader.getInst(\"/|/a/b\", Arrays.asList(\"$FQN:/**\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"a.x\"), \"y\");\n      @SuppressWarnings({\"rawtypes\"})\n      List l = (List) record.get(\"b\");\n      @SuppressWarnings({\"rawtypes\"})\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n      assertEquals(m.get(\"d.p\"), \"q\");\n    });\n  }\n\n","sourceOld":"  public void testNestedDocs() throws Exception {\n    String json = \"{a:{\" +\n        \"b:{c:d},\" +\n        \"x:y\" +\n        \"}}\";\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/|/a/b\", Arrays.asList(\"/a/x\", \"/a/b/*\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      assertEquals(((Map) record.get(\"b\")).get(\"c\"), \"d\");\n    });\n    json = \"{a:{\" +\n        \"b:[{c:c1, e:e1},{c:c2, e :e2, d:{p:q}}],\" +\n        \"x:y\" +\n        \"}}\";\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"x\"), \"y\");\n      List l = (List) record.get(\"b\");\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n    });\n    streamer = JsonRecordReader.getInst(\"/|/a/b\", Arrays.asList(\"$FQN:/**\"));\n    streamer.streamRecords(new StringReader(json), (record, path) -> {\n      assertEquals(record.get(\"a.x\"), \"y\");\n      List l = (List) record.get(\"b\");\n      Map m = (Map) l.get(0);\n      assertEquals(m.get(\"c\"), \"c1\");\n      assertEquals(m.get(\"e\"), \"e1\");\n      m = (Map) l.get(1);\n      assertEquals(m.get(\"c\"), \"c2\");\n      assertEquals(m.get(\"e\"), \"e2\");\n      assertEquals(m.get(\"d.p\"), \"q\");\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["649e3bfe4ffa5e921ce7657ceec85e58b82d9c32"],"d8d9512babbd72795eb013cdd392dad2e2b2313e":["b4e08e2b6886d78c91752d82ea2b436c4324cd55"],"b4e08e2b6886d78c91752d82ea2b436c4324cd55":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["d8d9512babbd72795eb013cdd392dad2e2b2313e","649e3bfe4ffa5e921ce7657ceec85e58b82d9c32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"611f7ea4eee5babadf4129bfa5fbae964738cd7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b4e08e2b6886d78c91752d82ea2b436c4324cd55"],"649e3bfe4ffa5e921ce7657ceec85e58b82d9c32":["d8d9512babbd72795eb013cdd392dad2e2b2313e"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","611f7ea4eee5babadf4129bfa5fbae964738cd7c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d8d9512babbd72795eb013cdd392dad2e2b2313e"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["d8d9512babbd72795eb013cdd392dad2e2b2313e","649e3bfe4ffa5e921ce7657ceec85e58b82d9c32"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8d9512babbd72795eb013cdd392dad2e2b2313e":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","649e3bfe4ffa5e921ce7657ceec85e58b82d9c32","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"b4e08e2b6886d78c91752d82ea2b436c4324cd55":["d8d9512babbd72795eb013cdd392dad2e2b2313e","611f7ea4eee5babadf4129bfa5fbae964738cd7c"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e08e2b6886d78c91752d82ea2b436c4324cd55","611f7ea4eee5babadf4129bfa5fbae964738cd7c","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"611f7ea4eee5babadf4129bfa5fbae964738cd7c":["5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"649e3bfe4ffa5e921ce7657ceec85e58b82d9c32":["9ba1b632c041956c93c41aa1143d16a567014891","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}