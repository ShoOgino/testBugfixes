{"path":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","pathOld":"src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","sourceNew":"  public void testFloatToByte() {\n    Random rand = newRandom();\n    // up iterations for more exhaustive test after changing something\n    for (int i=0; i<100000; i++) {\n      float f = Float.intBitsToFloat(rand.nextInt());\n      if (f!=f) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","sourceOld":"  public void testFloatToByte() {\n    Random rand = newRandom();\n    // up iterations for more exhaustive test after changing something\n    for (int i=0; i<100000; i++) {\n      float f = Float.intBitsToFloat(rand.nextInt());\n      if (f!=f) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","sourceNew":"  public void testFloatToByte() {\n    Random rand = newRandom();\n    // up iterations for more exhaustive test after changing something\n    for (int i=0; i<100000*_TestUtil.getRandomMultiplier(); i++) {\n      float f = Float.intBitsToFloat(rand.nextInt());\n      if (f!=f) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","sourceOld":"  public void testFloatToByte() {\n    Random rand = newRandom();\n    // up iterations for more exhaustive test after changing something\n    for (int i=0; i<100000; i++) {\n      float f = Float.intBitsToFloat(rand.nextInt());\n      if (f!=f) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","sourceNew":"  public void testFloatToByte() {\n    Random rand = newRandom();\n    // up iterations for more exhaustive test after changing something\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      float f = Float.intBitsToFloat(rand.nextInt());\n      if (Float.isNaN(f)) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","sourceOld":"  public void testFloatToByte() {\n    Random rand = newRandom();\n    // up iterations for more exhaustive test after changing something\n    for (int i=0; i<100000*_TestUtil.getRandomMultiplier(); i++) {\n      float f = Float.intBitsToFloat(rand.nextInt());\n      if (f!=f) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","sourceNew":"  public void testFloatToByte() {\n    Random rand = newRandom();\n    // up iterations for more exhaustive test after changing something\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      float f = Float.intBitsToFloat(rand.nextInt());\n      if (Float.isNaN(f)) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","sourceOld":"  public void testFloatToByte() {\n    Random rand = newRandom();\n    // up iterations for more exhaustive test after changing something\n    for (int i=0; i<100000*_TestUtil.getRandomMultiplier(); i++) {\n      float f = Float.intBitsToFloat(rand.nextInt());\n      if (f!=f) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","sourceNew":"  public void testFloatToByte() {\n    // up iterations for more exhaustive test after changing something\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      float f = Float.intBitsToFloat(random.nextInt());\n      if (Float.isNaN(f)) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","sourceOld":"  public void testFloatToByte() {\n    Random rand = newRandom();\n    // up iterations for more exhaustive test after changing something\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      float f = Float.intBitsToFloat(rand.nextInt());\n      if (Float.isNaN(f)) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","sourceNew":"  public void testFloatToByte() {\n    // up iterations for more exhaustive test after changing something\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      float f = Float.intBitsToFloat(random.nextInt());\n      if (Float.isNaN(f)) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","sourceOld":"  public void testFloatToByte() {\n    Random rand = newRandom();\n    // up iterations for more exhaustive test after changing something\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      float f = Float.intBitsToFloat(rand.nextInt());\n      if (Float.isNaN(f)) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd5fa2b0e0ce0816868cd00a822d726ba6560bc6","date":1298497362,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","sourceNew":"  public void testFloatToByte() {\n    assertEquals(0, orig_floatToByte_v13(5.8123817E-10f));       // verify the old bug (see LUCENE-2937)\n    assertEquals(1, orig_floatToByte(5.8123817E-10f));           // verify it's fixed in this test code\n    assertEquals(1, SmallFloat.floatToByte315(5.8123817E-10f));  // verify it's fixed\n\n    // test some constants\n    assertEquals(0, SmallFloat.floatToByte315(0));\n    assertEquals(1, SmallFloat.floatToByte315(Float.MIN_VALUE));             // underflow rounds up to smallest positive\n    assertEquals(255, SmallFloat.floatToByte315(Float.MAX_VALUE) & 0xff);    // overflow rounds down to largest positive\n    assertEquals(255, SmallFloat.floatToByte315(Float.POSITIVE_INFINITY) & 0xff);\n\n    // all negatives map to 0\n    assertEquals(0, SmallFloat.floatToByte315(-Float.MIN_VALUE));\n    assertEquals(0, SmallFloat.floatToByte315(-Float.MAX_VALUE));\n    assertEquals(0, SmallFloat.floatToByte315(Float.NEGATIVE_INFINITY));\n\n\n    // up iterations for more exhaustive test after changing something\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      float f = Float.intBitsToFloat(random.nextInt());\n      if (Float.isNaN(f)) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","sourceOld":"  public void testFloatToByte() {\n    // up iterations for more exhaustive test after changing something\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      float f = Float.intBitsToFloat(random.nextInt());\n      if (Float.isNaN(f)) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"692804e172a5810620fac3194db7b7616a21ad3d","date":1298513499,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","sourceNew":"  public void testFloatToByte() {\n    assertEquals(0, orig_floatToByte_v13(5.8123817E-10f));       // verify the old bug (see LUCENE-2937)\n    assertEquals(1, orig_floatToByte(5.8123817E-10f));           // verify it's fixed in this test code\n    assertEquals(1, SmallFloat.floatToByte315(5.8123817E-10f));  // verify it's fixed\n\n    // test some constants\n    assertEquals(0, SmallFloat.floatToByte315(0));\n    assertEquals(1, SmallFloat.floatToByte315(Float.MIN_VALUE));             // underflow rounds up to smallest positive\n    assertEquals(255, SmallFloat.floatToByte315(Float.MAX_VALUE) & 0xff);    // overflow rounds down to largest positive\n    assertEquals(255, SmallFloat.floatToByte315(Float.POSITIVE_INFINITY) & 0xff);\n\n    // all negatives map to 0\n    assertEquals(0, SmallFloat.floatToByte315(-Float.MIN_VALUE));\n    assertEquals(0, SmallFloat.floatToByte315(-Float.MAX_VALUE));\n    assertEquals(0, SmallFloat.floatToByte315(Float.NEGATIVE_INFINITY));\n\n\n    // up iterations for more exhaustive test after changing something\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      float f = Float.intBitsToFloat(random.nextInt());\n      if (Float.isNaN(f)) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","sourceOld":"  public void testFloatToByte() {\n    // up iterations for more exhaustive test after changing something\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      float f = Float.intBitsToFloat(random.nextInt());\n      if (Float.isNaN(f)) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","sourceNew":"  public void testFloatToByte() {\n    assertEquals(0, orig_floatToByte_v13(5.8123817E-10f));       // verify the old bug (see LUCENE-2937)\n    assertEquals(1, orig_floatToByte(5.8123817E-10f));           // verify it's fixed in this test code\n    assertEquals(1, SmallFloat.floatToByte315(5.8123817E-10f));  // verify it's fixed\n\n    // test some constants\n    assertEquals(0, SmallFloat.floatToByte315(0));\n    assertEquals(1, SmallFloat.floatToByte315(Float.MIN_VALUE));             // underflow rounds up to smallest positive\n    assertEquals(255, SmallFloat.floatToByte315(Float.MAX_VALUE) & 0xff);    // overflow rounds down to largest positive\n    assertEquals(255, SmallFloat.floatToByte315(Float.POSITIVE_INFINITY) & 0xff);\n\n    // all negatives map to 0\n    assertEquals(0, SmallFloat.floatToByte315(-Float.MIN_VALUE));\n    assertEquals(0, SmallFloat.floatToByte315(-Float.MAX_VALUE));\n    assertEquals(0, SmallFloat.floatToByte315(Float.NEGATIVE_INFINITY));\n\n\n    // up iterations for more exhaustive test after changing something\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      float f = Float.intBitsToFloat(random.nextInt());\n      if (Float.isNaN(f)) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","sourceOld":"  public void testFloatToByte() {\n    // up iterations for more exhaustive test after changing something\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      float f = Float.intBitsToFloat(random.nextInt());\n      if (Float.isNaN(f)) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","sourceNew":"  public void testFloatToByte() {\n    assertEquals(0, orig_floatToByte_v13(5.8123817E-10f));       // verify the old bug (see LUCENE-2937)\n    assertEquals(1, orig_floatToByte(5.8123817E-10f));           // verify it's fixed in this test code\n    assertEquals(1, SmallFloat.floatToByte315(5.8123817E-10f));  // verify it's fixed\n\n    // test some constants\n    assertEquals(0, SmallFloat.floatToByte315(0));\n    assertEquals(1, SmallFloat.floatToByte315(Float.MIN_VALUE));             // underflow rounds up to smallest positive\n    assertEquals(255, SmallFloat.floatToByte315(Float.MAX_VALUE) & 0xff);    // overflow rounds down to largest positive\n    assertEquals(255, SmallFloat.floatToByte315(Float.POSITIVE_INFINITY) & 0xff);\n\n    // all negatives map to 0\n    assertEquals(0, SmallFloat.floatToByte315(-Float.MIN_VALUE));\n    assertEquals(0, SmallFloat.floatToByte315(-Float.MAX_VALUE));\n    assertEquals(0, SmallFloat.floatToByte315(Float.NEGATIVE_INFINITY));\n\n\n    // up iterations for more exhaustive test after changing something\n    int num = atLeast(100000);\n    for (int i = 0; i < num; i++) {\n      float f = Float.intBitsToFloat(random.nextInt());\n      if (Float.isNaN(f)) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","sourceOld":"  public void testFloatToByte() {\n    assertEquals(0, orig_floatToByte_v13(5.8123817E-10f));       // verify the old bug (see LUCENE-2937)\n    assertEquals(1, orig_floatToByte(5.8123817E-10f));           // verify it's fixed in this test code\n    assertEquals(1, SmallFloat.floatToByte315(5.8123817E-10f));  // verify it's fixed\n\n    // test some constants\n    assertEquals(0, SmallFloat.floatToByte315(0));\n    assertEquals(1, SmallFloat.floatToByte315(Float.MIN_VALUE));             // underflow rounds up to smallest positive\n    assertEquals(255, SmallFloat.floatToByte315(Float.MAX_VALUE) & 0xff);    // overflow rounds down to largest positive\n    assertEquals(255, SmallFloat.floatToByte315(Float.POSITIVE_INFINITY) & 0xff);\n\n    // all negatives map to 0\n    assertEquals(0, SmallFloat.floatToByte315(-Float.MIN_VALUE));\n    assertEquals(0, SmallFloat.floatToByte315(-Float.MAX_VALUE));\n    assertEquals(0, SmallFloat.floatToByte315(Float.NEGATIVE_INFINITY));\n\n\n    // up iterations for more exhaustive test after changing something\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      float f = Float.intBitsToFloat(random.nextInt());\n      if (Float.isNaN(f)) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","sourceNew":"  public void testFloatToByte() {\n    assertEquals(0, orig_floatToByte_v13(5.8123817E-10f));       // verify the old bug (see LUCENE-2937)\n    assertEquals(1, orig_floatToByte(5.8123817E-10f));           // verify it's fixed in this test code\n    assertEquals(1, SmallFloat.floatToByte315(5.8123817E-10f));  // verify it's fixed\n\n    // test some constants\n    assertEquals(0, SmallFloat.floatToByte315(0));\n    assertEquals(1, SmallFloat.floatToByte315(Float.MIN_VALUE));             // underflow rounds up to smallest positive\n    assertEquals(255, SmallFloat.floatToByte315(Float.MAX_VALUE) & 0xff);    // overflow rounds down to largest positive\n    assertEquals(255, SmallFloat.floatToByte315(Float.POSITIVE_INFINITY) & 0xff);\n\n    // all negatives map to 0\n    assertEquals(0, SmallFloat.floatToByte315(-Float.MIN_VALUE));\n    assertEquals(0, SmallFloat.floatToByte315(-Float.MAX_VALUE));\n    assertEquals(0, SmallFloat.floatToByte315(Float.NEGATIVE_INFINITY));\n\n\n    // up iterations for more exhaustive test after changing something\n    int num = atLeast(100000);\n    for (int i = 0; i < num; i++) {\n      float f = Float.intBitsToFloat(random.nextInt());\n      if (Float.isNaN(f)) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","sourceOld":"  public void testFloatToByte() {\n    assertEquals(0, orig_floatToByte_v13(5.8123817E-10f));       // verify the old bug (see LUCENE-2937)\n    assertEquals(1, orig_floatToByte(5.8123817E-10f));           // verify it's fixed in this test code\n    assertEquals(1, SmallFloat.floatToByte315(5.8123817E-10f));  // verify it's fixed\n\n    // test some constants\n    assertEquals(0, SmallFloat.floatToByte315(0));\n    assertEquals(1, SmallFloat.floatToByte315(Float.MIN_VALUE));             // underflow rounds up to smallest positive\n    assertEquals(255, SmallFloat.floatToByte315(Float.MAX_VALUE) & 0xff);    // overflow rounds down to largest positive\n    assertEquals(255, SmallFloat.floatToByte315(Float.POSITIVE_INFINITY) & 0xff);\n\n    // all negatives map to 0\n    assertEquals(0, SmallFloat.floatToByte315(-Float.MIN_VALUE));\n    assertEquals(0, SmallFloat.floatToByte315(-Float.MAX_VALUE));\n    assertEquals(0, SmallFloat.floatToByte315(Float.NEGATIVE_INFINITY));\n\n\n    // up iterations for more exhaustive test after changing something\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      float f = Float.intBitsToFloat(random.nextInt());\n      if (Float.isNaN(f)) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","sourceNew":"  public void testFloatToByte() {\n    assertEquals(0, orig_floatToByte_v13(5.8123817E-10f));       // verify the old bug (see LUCENE-2937)\n    assertEquals(1, orig_floatToByte(5.8123817E-10f));           // verify it's fixed in this test code\n    assertEquals(1, SmallFloat.floatToByte315(5.8123817E-10f));  // verify it's fixed\n\n    // test some constants\n    assertEquals(0, SmallFloat.floatToByte315(0));\n    assertEquals(1, SmallFloat.floatToByte315(Float.MIN_VALUE));             // underflow rounds up to smallest positive\n    assertEquals(255, SmallFloat.floatToByte315(Float.MAX_VALUE) & 0xff);    // overflow rounds down to largest positive\n    assertEquals(255, SmallFloat.floatToByte315(Float.POSITIVE_INFINITY) & 0xff);\n\n    // all negatives map to 0\n    assertEquals(0, SmallFloat.floatToByte315(-Float.MIN_VALUE));\n    assertEquals(0, SmallFloat.floatToByte315(-Float.MAX_VALUE));\n    assertEquals(0, SmallFloat.floatToByte315(Float.NEGATIVE_INFINITY));\n\n\n    // up iterations for more exhaustive test after changing something\n    int num = atLeast(100000);\n    for (int i = 0; i < num; i++) {\n      float f = Float.intBitsToFloat(random.nextInt());\n      if (Float.isNaN(f)) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","sourceOld":"  public void testFloatToByte() {\n    assertEquals(0, orig_floatToByte_v13(5.8123817E-10f));       // verify the old bug (see LUCENE-2937)\n    assertEquals(1, orig_floatToByte(5.8123817E-10f));           // verify it's fixed in this test code\n    assertEquals(1, SmallFloat.floatToByte315(5.8123817E-10f));  // verify it's fixed\n\n    // test some constants\n    assertEquals(0, SmallFloat.floatToByte315(0));\n    assertEquals(1, SmallFloat.floatToByte315(Float.MIN_VALUE));             // underflow rounds up to smallest positive\n    assertEquals(255, SmallFloat.floatToByte315(Float.MAX_VALUE) & 0xff);    // overflow rounds down to largest positive\n    assertEquals(255, SmallFloat.floatToByte315(Float.POSITIVE_INFINITY) & 0xff);\n\n    // all negatives map to 0\n    assertEquals(0, SmallFloat.floatToByte315(-Float.MIN_VALUE));\n    assertEquals(0, SmallFloat.floatToByte315(-Float.MAX_VALUE));\n    assertEquals(0, SmallFloat.floatToByte315(Float.NEGATIVE_INFINITY));\n\n\n    // up iterations for more exhaustive test after changing something\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      float f = Float.intBitsToFloat(random.nextInt());\n      if (Float.isNaN(f)) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","sourceNew":"  public void testFloatToByte() {\n    assertEquals(0, orig_floatToByte_v13(5.8123817E-10f));       // verify the old bug (see LUCENE-2937)\n    assertEquals(1, orig_floatToByte(5.8123817E-10f));           // verify it's fixed in this test code\n    assertEquals(1, SmallFloat.floatToByte315(5.8123817E-10f));  // verify it's fixed\n\n    // test some constants\n    assertEquals(0, SmallFloat.floatToByte315(0));\n    assertEquals(1, SmallFloat.floatToByte315(Float.MIN_VALUE));             // underflow rounds up to smallest positive\n    assertEquals(255, SmallFloat.floatToByte315(Float.MAX_VALUE) & 0xff);    // overflow rounds down to largest positive\n    assertEquals(255, SmallFloat.floatToByte315(Float.POSITIVE_INFINITY) & 0xff);\n\n    // all negatives map to 0\n    assertEquals(0, SmallFloat.floatToByte315(-Float.MIN_VALUE));\n    assertEquals(0, SmallFloat.floatToByte315(-Float.MAX_VALUE));\n    assertEquals(0, SmallFloat.floatToByte315(Float.NEGATIVE_INFINITY));\n\n\n    // up iterations for more exhaustive test after changing something\n    int num = atLeast(100000);\n    for (int i = 0; i < num; i++) {\n      float f = Float.intBitsToFloat(random.nextInt());\n      if (Float.isNaN(f)) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","sourceOld":"  public void testFloatToByte() {\n    assertEquals(0, orig_floatToByte_v13(5.8123817E-10f));       // verify the old bug (see LUCENE-2937)\n    assertEquals(1, orig_floatToByte(5.8123817E-10f));           // verify it's fixed in this test code\n    assertEquals(1, SmallFloat.floatToByte315(5.8123817E-10f));  // verify it's fixed\n\n    // test some constants\n    assertEquals(0, SmallFloat.floatToByte315(0));\n    assertEquals(1, SmallFloat.floatToByte315(Float.MIN_VALUE));             // underflow rounds up to smallest positive\n    assertEquals(255, SmallFloat.floatToByte315(Float.MAX_VALUE) & 0xff);    // overflow rounds down to largest positive\n    assertEquals(255, SmallFloat.floatToByte315(Float.POSITIVE_INFINITY) & 0xff);\n\n    // all negatives map to 0\n    assertEquals(0, SmallFloat.floatToByte315(-Float.MIN_VALUE));\n    assertEquals(0, SmallFloat.floatToByte315(-Float.MAX_VALUE));\n    assertEquals(0, SmallFloat.floatToByte315(Float.NEGATIVE_INFINITY));\n\n\n    // up iterations for more exhaustive test after changing something\n    int num = atLeast(100000);\n    for (int i = 0; i < num; i++) {\n      float f = Float.intBitsToFloat(random.nextInt());\n      if (Float.isNaN(f)) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["2aafd88401639311b0404e67c94e829e123a0e45"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["cd5fa2b0e0ce0816868cd00a822d726ba6560bc6","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["cd5fa2b0e0ce0816868cd00a822d726ba6560bc6"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["2aafd88401639311b0404e67c94e829e123a0e45","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"2aafd88401639311b0404e67c94e829e123a0e45":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","1f653cfcf159baeaafe5d01682a911e95bba4012"],"692804e172a5810620fac3194db7b7616a21ad3d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5fa2b0e0ce0816868cd00a822d726ba6560bc6"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["1f653cfcf159baeaafe5d01682a911e95bba4012","cd5fa2b0e0ce0816868cd00a822d726ba6560bc6"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5fa2b0e0ce0816868cd00a822d726ba6560bc6":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["d619839baa8ce5503e496b94a9e42ad6f079293f","f83af14a2a8131b14d7aee6274c740334e0363d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["3242a09f703274d3b9283f2064a1a33064b53a1b","1f653cfcf159baeaafe5d01682a911e95bba4012"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3a119bbc8703c10faa329ec201c654b3a35a1e3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2aafd88401639311b0404e67c94e829e123a0e45":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","3242a09f703274d3b9283f2064a1a33064b53a1b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["692804e172a5810620fac3194db7b7616a21ad3d"],"692804e172a5810620fac3194db7b7616a21ad3d":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5fa2b0e0ce0816868cd00a822d726ba6560bc6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5fa2b0e0ce0816868cd00a822d726ba6560bc6":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","f83af14a2a8131b14d7aee6274c740334e0363d3","692804e172a5810620fac3194db7b7616a21ad3d","d619839baa8ce5503e496b94a9e42ad6f079293f"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2aafd88401639311b0404e67c94e829e123a0e45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","692804e172a5810620fac3194db7b7616a21ad3d","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}