{"path":"lucene/facet/src/java/org/apache/lucene/facet/sampling/RandomSampler#createSample(ScoredDocIDs,int,int).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sampling/RandomSampler#createSample(ScoredDocIDs,int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/RandomSampler#createSample(ScoredDocIDs,int,int).mjava","sourceNew":"  @Override\n  protected SampleResult createSample(ScoredDocIDs docids, int actualSize, int sampleSetSize) throws IOException {\n    final int[] sample = new int[sampleSetSize];\n    final int maxStep = (actualSize * 2 ) / sampleSetSize; //floor\n    int remaining = actualSize;\n    ScoredDocIDsIterator it = docids.iterator();\n    int i = 0;\n    // select sample docs with random skipStep, make sure to leave sufficient #docs for selection after last skip\n    while (i<sample.length && remaining>(sampleSetSize-maxStep-i)) {\n      int skipStep = 1 + random.nextInt(maxStep);\n      // Skip over 'skipStep' documents\n      for (int j=0; j<skipStep; j++) {\n        it.next();\n        -- remaining;\n      }\n      sample[i++] = it.getDocID();\n    }\n    // Add leftover documents to the sample set\n    while (i<sample.length) {\n      it.next();\n      sample[i++] = it.getDocID();\n    }\n    ScoredDocIDs sampleRes = ScoredDocIdsUtils.createScoredDocIDsSubset(docids, sample);\n    SampleResult res = new SampleResult(sampleRes, sampleSetSize/(double)actualSize);\n    return res;\n  }\n\n","sourceOld":"  @Override\n  protected SampleResult createSample(ScoredDocIDs docids, int actualSize, int sampleSetSize) throws IOException {\n    final int[] sample = new int[sampleSetSize];\n    final int maxStep = (actualSize * 2 ) / sampleSetSize; //floor\n    int remaining = actualSize;\n    ScoredDocIDsIterator it = docids.iterator();\n    int i = 0;\n    // select sample docs with random skipStep, make sure to leave sufficient #docs for selection after last skip\n    while (i<sample.length && remaining>(sampleSetSize-maxStep-i)) {\n      int skipStep = 1 + random.nextInt(maxStep);\n      // Skip over 'skipStep' documents\n      for (int j=0; j<skipStep; j++) {\n        it.next();\n        -- remaining;\n      }\n      sample[i++] = it.getDocID();\n    }\n    // Add leftover documents to the sample set\n    while (i<sample.length) {\n      it.next();\n      sample[i++] = it.getDocID();\n    }\n    ScoredDocIDs sampleRes = ScoredDocIdsUtils.createScoredDocIDsSubset(docids, sample);\n    SampleResult res = new SampleResult(sampleRes, sampleSetSize/(double)actualSize);\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sampling/RandomSampler#createSample(ScoredDocIDs,int,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected SampleResult createSample(ScoredDocIDs docids, int actualSize, int sampleSetSize) throws IOException {\n    final int[] sample = new int[sampleSetSize];\n    final int maxStep = (actualSize * 2 ) / sampleSetSize; //floor\n    int remaining = actualSize;\n    ScoredDocIDsIterator it = docids.iterator();\n    int i = 0;\n    // select sample docs with random skipStep, make sure to leave sufficient #docs for selection after last skip\n    while (i<sample.length && remaining>(sampleSetSize-maxStep-i)) {\n      int skipStep = 1 + random.nextInt(maxStep);\n      // Skip over 'skipStep' documents\n      for (int j=0; j<skipStep; j++) {\n        it.next();\n        -- remaining;\n      }\n      sample[i++] = it.getDocID();\n    }\n    // Add leftover documents to the sample set\n    while (i<sample.length) {\n      it.next();\n      sample[i++] = it.getDocID();\n    }\n    ScoredDocIDs sampleRes = ScoredDocIdsUtils.createScoredDocIDsSubset(docids, sample);\n    SampleResult res = new SampleResult(sampleRes, sampleSetSize/(double)actualSize);\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sampling/RandomSampler#createSample(ScoredDocIDs,int,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected SampleResult createSample(ScoredDocIDs docids, int actualSize, int sampleSetSize) throws IOException {\n    final int[] sample = new int[sampleSetSize];\n    final int maxStep = (actualSize * 2 ) / sampleSetSize; //floor\n    int remaining = actualSize;\n    ScoredDocIDsIterator it = docids.iterator();\n    int i = 0;\n    // select sample docs with random skipStep, make sure to leave sufficient #docs for selection after last skip\n    while (i<sample.length && remaining>(sampleSetSize-maxStep-i)) {\n      int skipStep = 1 + random.nextInt(maxStep);\n      // Skip over 'skipStep' documents\n      for (int j=0; j<skipStep; j++) {\n        it.next();\n        -- remaining;\n      }\n      sample[i++] = it.getDocID();\n    }\n    // Add leftover documents to the sample set\n    while (i<sample.length) {\n      it.next();\n      sample[i++] = it.getDocID();\n    }\n    ScoredDocIDs sampleRes = ScoredDocIdsUtils.createScoredDocIDsSubset(docids, sample);\n    SampleResult res = new SampleResult(sampleRes, sampleSetSize/(double)actualSize);\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}