{"path":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#doTestSortedSetVsUninvertedField(int,int).mjava","commits":[{"id":"2ac70df4ea6e1a73f0f9414138622eb5d6b19b4e","date":1361042054,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#doTestSortedSetVsUninvertedField(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSortedSetVsUninvertedField(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<String>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(_TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<String>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<String>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // compare per-segment\n    // NOTE: we must do this before deleting, because FC.getDocTermsOrds/UninvertedField\n    // \"bakes in\" the deletes at the time it was first called.\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(r, \"indexed\");\n      SortedSetDocValues actual = r.getSortedSetDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(ar, \"indexed\");\n    SortedSetDocValues actual = ar.getSortedSetDocValues(\"dv\");\n    assertEquals(ir.maxDoc(), expected, actual);\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b1c945cfc8af87215a4f5375353ccc7269e6aca"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3","date":1361060670,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsUninvertedField(int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#doTestSortedSetVsUninvertedField(int,int).mjava","sourceNew":"  private void doTestSortedSetVsUninvertedField(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<String>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(_TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<String>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<String>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // compare per-segment\n    // NOTE: we must do this before deleting, because FC.getDocTermsOrds/UninvertedField\n    // \"bakes in\" the deletes at the time it was first called.\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(r, \"indexed\");\n      SortedSetDocValues actual = r.getSortedSetDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(ar, \"indexed\");\n    SortedSetDocValues actual = ar.getSortedSetDocValues(\"dv\");\n    assertEquals(ir.maxDoc(), expected, actual);\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedSetVsUninvertedField(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<String>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(_TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<String>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<String>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // compare per-segment\n    // NOTE: we must do this before deleting, because FC.getDocTermsOrds/UninvertedField\n    // \"bakes in\" the deletes at the time it was first called.\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(r, \"indexed\");\n      SortedSetDocValues actual = r.getSortedSetDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(ar, \"indexed\");\n    SortedSetDocValues actual = ar.getSortedSetDocValues(\"dv\");\n    assertEquals(ir.maxDoc(), expected, actual);\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2ac70df4ea6e1a73f0f9414138622eb5d6b19b4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3":["2ac70df4ea6e1a73f0f9414138622eb5d6b19b4e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2ac70df4ea6e1a73f0f9414138622eb5d6b19b4e":["eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ac70df4ea6e1a73f0f9414138622eb5d6b19b4e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}