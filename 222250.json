{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#getNumeric(FieldInfo).mjava","commits":[{"id":"bfc53d09502e7e9683618107ef3cd087df2d6152","date":1357571745,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#getNumeric(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n      final NumericEntry entry = numerics.get(field.number);\n      final PackedInts.Reader reader = PackedInts.getDirectReaderNoHeader(data, entry.header);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return entry.minValue + reader.get(docID);\n        }\n\n        @Override\n        public long minValue() {\n          return entry.minValue;\n        }\n\n        @Override\n        public long maxValue() {\n          return entry.maxValue;\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32fb848e256860b63adc9c2b068f386032c77b67","date":1357587205,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#getNumeric(FieldInfo).mjava","sourceNew":"    @Override\n    public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n      final NumericEntry entry = numerics.get(field.number);\n      final PackedInts.Reader reader = PackedInts.getDirectReaderNoHeader(data, entry.header);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return entry.minValue + reader.get(docID);\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n      final NumericEntry entry = numerics.get(field.number);\n      final PackedInts.Reader reader = PackedInts.getDirectReaderNoHeader(data, entry.header);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return entry.minValue + reader.get(docID);\n        }\n\n        @Override\n        public long minValue() {\n          return entry.minValue;\n        }\n\n        @Override\n        public long maxValue() {\n          return entry.maxValue;\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf39fad3cd224bbe2a1acfbb2792690c8a62be1b","date":1357611186,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#getNumeric(FieldInfo).mjava","sourceNew":"    @Override\n    public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n      // nocommit: user can currently get back a numericDV of the addresses...\n      final NumericEntry entry = numerics.get(field.number);\n      // nocommit: what are we doing with clone?!\n      final IndexInput data = this.data.clone();\n      data.seek(entry.offset);\n      final PackedInts.Reader reader = PackedInts.getDirectReaderNoHeader(data, entry.header);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return entry.minValue + reader.get(docID);\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n      final NumericEntry entry = numerics.get(field.number);\n      final PackedInts.Reader reader = PackedInts.getDirectReaderNoHeader(data, entry.header);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return entry.minValue + reader.get(docID);\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be442aa722f1c08c70ec5d9938c9f80a8138e627","date":1357613095,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#getNumeric(FieldInfo).mjava","sourceNew":"    @Override\n    public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n      // nocommit: user can currently get back a numericDV of the addresses...\n      NumericEntry entry = numerics.get(field.number);\n      return getNumeric(field, entry);\n    }\n\n","sourceOld":"    @Override\n    public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n      // nocommit: user can currently get back a numericDV of the addresses...\n      final NumericEntry entry = numerics.get(field.number);\n      // nocommit: what are we doing with clone?!\n      final IndexInput data = this.data.clone();\n      data.seek(entry.offset);\n      final PackedInts.Reader reader = PackedInts.getDirectReaderNoHeader(data, entry.header);\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return entry.minValue + reader.get(docID);\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"006747777f375b554229c07aa18614c04e7b02a4","date":1357614491,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#getNumeric(FieldInfo).mjava","sourceNew":"    @Override\n    public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n      // nocommit: user can currently get back a numericDV of the addresses...?\n      NumericEntry entry = numerics.get(field.number);\n      return getNumeric(field, entry);\n    }\n\n","sourceOld":"    @Override\n    public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n      // nocommit: user can currently get back a numericDV of the addresses...\n      NumericEntry entry = numerics.get(field.number);\n      return getNumeric(field, entry);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68acf69be1b41192ae2278afc452bb66f6349cba","date":1357657311,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#getNumeric(FieldInfo).mjava","sourceNew":null,"sourceOld":"    @Override\n    public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n      // nocommit: user can currently get back a numericDV of the addresses...?\n      NumericEntry entry = numerics.get(field.number);\n      return getNumeric(field, entry);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cf39fad3cd224bbe2a1acfbb2792690c8a62be1b":["32fb848e256860b63adc9c2b068f386032c77b67"],"68acf69be1b41192ae2278afc452bb66f6349cba":["006747777f375b554229c07aa18614c04e7b02a4"],"bfc53d09502e7e9683618107ef3cd087df2d6152":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"006747777f375b554229c07aa18614c04e7b02a4":["be442aa722f1c08c70ec5d9938c9f80a8138e627"],"32fb848e256860b63adc9c2b068f386032c77b67":["bfc53d09502e7e9683618107ef3cd087df2d6152"],"be442aa722f1c08c70ec5d9938c9f80a8138e627":["cf39fad3cd224bbe2a1acfbb2792690c8a62be1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"cf39fad3cd224bbe2a1acfbb2792690c8a62be1b":["be442aa722f1c08c70ec5d9938c9f80a8138e627"],"68acf69be1b41192ae2278afc452bb66f6349cba":[],"bfc53d09502e7e9683618107ef3cd087df2d6152":["32fb848e256860b63adc9c2b068f386032c77b67"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bfc53d09502e7e9683618107ef3cd087df2d6152","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"006747777f375b554229c07aa18614c04e7b02a4":["68acf69be1b41192ae2278afc452bb66f6349cba"],"32fb848e256860b63adc9c2b068f386032c77b67":["cf39fad3cd224bbe2a1acfbb2792690c8a62be1b"],"be442aa722f1c08c70ec5d9938c9f80a8138e627":["006747777f375b554229c07aa18614c04e7b02a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["68acf69be1b41192ae2278afc452bb66f6349cba","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}