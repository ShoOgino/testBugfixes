{"path":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testMergeSortStability().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testMergeSortStability().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testMergeSortStability().mjava","sourceNew":"  public void testMergeSortStability() {\n    Item[] items = new Item[100];\n    for (int i = 0; i < items.length; i++) {\n      // half of the items have value but same order. The value of this items is sorted,\n      // so they should always be in order after sorting.\n      // The other half has defined order, but no (-1) value (they should appear after\n      // all above, when sorted).\n      final boolean equal = random.nextBoolean();\n      items[i] = new Item(equal ? (i+1) : -1, equal ? 0 : (random.nextInt(1000)+1));\n    }\n    \n    if (VERBOSE) System.out.println(\"Before: \" + Arrays.toString(items));\n    // if you replace this with ArrayUtil.quickSort(), test should fail:\n    ArrayUtil.mergeSort(items);\n    if (VERBOSE) System.out.println(\"Sorted: \" + Arrays.toString(items));\n    \n    Item last = items[0];\n    for (int i = 1; i < items.length; i++) {\n      final Item act = items[i];\n      if (act.order == 0) {\n        // order of \"equal\" items should be not mixed up\n        assertTrue(act.val > last.val);\n      }\n      assertTrue(act.order >= last.order);\n      last = act;\n    }\n  }\n\n","sourceOld":"  public void testMergeSortStability() {\n    Item[] items = new Item[100];\n    for (int i = 0; i < items.length; i++) {\n      // half of the items have value but same order. The value of this items is sorted,\n      // so they should always be in order after sorting.\n      // The other half has defined order, but no (-1) value (they should appear after\n      // all above, when sorted).\n      final boolean equal = random.nextBoolean();\n      items[i] = new Item(equal ? (i+1) : -1, equal ? 0 : (random.nextInt(1000)+1));\n    }\n    \n    if (VERBOSE) System.out.println(\"Before: \" + Arrays.toString(items));\n    // if you replace this with ArrayUtil.quickSort(), test should fail:\n    ArrayUtil.mergeSort(items);\n    if (VERBOSE) System.out.println(\"Sorted: \" + Arrays.toString(items));\n    \n    Item last = items[0];\n    for (int i = 1; i < items.length; i++) {\n      final Item act = items[i];\n      if (act.order == 0) {\n        // order of \"equal\" items should be not mixed up\n        assertTrue(act.val > last.val);\n      }\n      assertTrue(act.order >= last.order);\n      last = act;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testMergeSortStability().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testMergeSortStability().mjava","sourceNew":"  public void testMergeSortStability() {\n    Item[] items = new Item[100];\n    for (int i = 0; i < items.length; i++) {\n      // half of the items have value but same order. The value of this items is sorted,\n      // so they should always be in order after sorting.\n      // The other half has defined order, but no (-1) value (they should appear after\n      // all above, when sorted).\n      final boolean equal = random().nextBoolean();\n      items[i] = new Item(equal ? (i+1) : -1, equal ? 0 : (random().nextInt(1000)+1));\n    }\n    \n    if (VERBOSE) System.out.println(\"Before: \" + Arrays.toString(items));\n    // if you replace this with ArrayUtil.quickSort(), test should fail:\n    ArrayUtil.mergeSort(items);\n    if (VERBOSE) System.out.println(\"Sorted: \" + Arrays.toString(items));\n    \n    Item last = items[0];\n    for (int i = 1; i < items.length; i++) {\n      final Item act = items[i];\n      if (act.order == 0) {\n        // order of \"equal\" items should be not mixed up\n        assertTrue(act.val > last.val);\n      }\n      assertTrue(act.order >= last.order);\n      last = act;\n    }\n  }\n\n","sourceOld":"  public void testMergeSortStability() {\n    Item[] items = new Item[100];\n    for (int i = 0; i < items.length; i++) {\n      // half of the items have value but same order. The value of this items is sorted,\n      // so they should always be in order after sorting.\n      // The other half has defined order, but no (-1) value (they should appear after\n      // all above, when sorted).\n      final boolean equal = random.nextBoolean();\n      items[i] = new Item(equal ? (i+1) : -1, equal ? 0 : (random.nextInt(1000)+1));\n    }\n    \n    if (VERBOSE) System.out.println(\"Before: \" + Arrays.toString(items));\n    // if you replace this with ArrayUtil.quickSort(), test should fail:\n    ArrayUtil.mergeSort(items);\n    if (VERBOSE) System.out.println(\"Sorted: \" + Arrays.toString(items));\n    \n    Item last = items[0];\n    for (int i = 1; i < items.length; i++) {\n      final Item act = items[i];\n      if (act.order == 0) {\n        // order of \"equal\" items should be not mixed up\n        assertTrue(act.val > last.val);\n      }\n      assertTrue(act.order >= last.order);\n      last = act;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18aa90677ea290faf18b72f717c91101a55b1707","date":1362337180,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testMergeSortStability().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testMergeSortStability().mjava","sourceNew":"  public void testMergeSortStability() {\n    final Random rnd = random();\n    Item[] items = new Item[100];\n    for (int i = 0; i < items.length; i++) {\n      // half of the items have value but same order. The value of this items is sorted,\n      // so they should always be in order after sorting.\n      // The other half has defined order, but no (-1) value (they should appear after\n      // all above, when sorted).\n      final boolean equal = rnd.nextBoolean();\n      items[i] = new Item(equal ? (i+1) : -1, equal ? 0 : (rnd.nextInt(1000)+1));\n    }\n    \n    if (VERBOSE) System.out.println(\"Before: \" + Arrays.toString(items));\n    // if you replace this with ArrayUtil.quickSort(), test should fail:\n    ArrayUtil.mergeSort(items);\n    if (VERBOSE) System.out.println(\"Sorted: \" + Arrays.toString(items));\n    \n    Item last = items[0];\n    for (int i = 1; i < items.length; i++) {\n      final Item act = items[i];\n      if (act.order == 0) {\n        // order of \"equal\" items should be not mixed up\n        assertTrue(act.val > last.val);\n      }\n      assertTrue(act.order >= last.order);\n      last = act;\n    }\n  }\n\n","sourceOld":"  public void testMergeSortStability() {\n    Item[] items = new Item[100];\n    for (int i = 0; i < items.length; i++) {\n      // half of the items have value but same order. The value of this items is sorted,\n      // so they should always be in order after sorting.\n      // The other half has defined order, but no (-1) value (they should appear after\n      // all above, when sorted).\n      final boolean equal = random().nextBoolean();\n      items[i] = new Item(equal ? (i+1) : -1, equal ? 0 : (random().nextInt(1000)+1));\n    }\n    \n    if (VERBOSE) System.out.println(\"Before: \" + Arrays.toString(items));\n    // if you replace this with ArrayUtil.quickSort(), test should fail:\n    ArrayUtil.mergeSort(items);\n    if (VERBOSE) System.out.println(\"Sorted: \" + Arrays.toString(items));\n    \n    Item last = items[0];\n    for (int i = 1; i < items.length; i++) {\n      final Item act = items[i];\n      if (act.order == 0) {\n        // order of \"equal\" items should be not mixed up\n        assertTrue(act.val > last.val);\n      }\n      assertTrue(act.order >= last.order);\n      last = act;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testMergeSortStability().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testMergeSortStability().mjava","sourceNew":"  public void testMergeSortStability() {\n    final Random rnd = random();\n    Item[] items = new Item[100];\n    for (int i = 0; i < items.length; i++) {\n      // half of the items have value but same order. The value of this items is sorted,\n      // so they should always be in order after sorting.\n      // The other half has defined order, but no (-1) value (they should appear after\n      // all above, when sorted).\n      final boolean equal = rnd.nextBoolean();\n      items[i] = new Item(equal ? (i+1) : -1, equal ? 0 : (rnd.nextInt(1000)+1));\n    }\n    \n    if (VERBOSE) System.out.println(\"Before: \" + Arrays.toString(items));\n    // if you replace this with ArrayUtil.quickSort(), test should fail:\n    ArrayUtil.timSort(items);\n    if (VERBOSE) System.out.println(\"Sorted: \" + Arrays.toString(items));\n    \n    Item last = items[0];\n    for (int i = 1; i < items.length; i++) {\n      final Item act = items[i];\n      if (act.order == 0) {\n        // order of \"equal\" items should be not mixed up\n        assertTrue(act.val > last.val);\n      }\n      assertTrue(act.order >= last.order);\n      last = act;\n    }\n  }\n\n","sourceOld":"  public void testMergeSortStability() {\n    final Random rnd = random();\n    Item[] items = new Item[100];\n    for (int i = 0; i < items.length; i++) {\n      // half of the items have value but same order. The value of this items is sorted,\n      // so they should always be in order after sorting.\n      // The other half has defined order, but no (-1) value (they should appear after\n      // all above, when sorted).\n      final boolean equal = rnd.nextBoolean();\n      items[i] = new Item(equal ? (i+1) : -1, equal ? 0 : (rnd.nextInt(1000)+1));\n    }\n    \n    if (VERBOSE) System.out.println(\"Before: \" + Arrays.toString(items));\n    // if you replace this with ArrayUtil.quickSort(), test should fail:\n    ArrayUtil.mergeSort(items);\n    if (VERBOSE) System.out.println(\"Sorted: \" + Arrays.toString(items));\n    \n    Item last = items[0];\n    for (int i = 1; i < items.length; i++) {\n      final Item act = items[i];\n      if (act.order == 0) {\n        // order of \"equal\" items should be not mixed up\n        assertTrue(act.val > last.val);\n      }\n      assertTrue(act.order >= last.order);\n      last = act;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"18aa90677ea290faf18b72f717c91101a55b1707":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["18aa90677ea290faf18b72f717c91101a55b1707"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"]},"commit2Childs":{"18aa90677ea290faf18b72f717c91101a55b1707":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["18aa90677ea290faf18b72f717c91101a55b1707"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}