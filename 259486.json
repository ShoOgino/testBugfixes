{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StringBuilderReader#mark(int).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StringBuilderReader#mark(int).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StringBuilderReader#mark(int).mjava","sourceNew":"  /**\n   * Mark the present position in the stream. Subsequent calls to reset() will\n   * reposition the stream to this point.\n   * \n   * @param readAheadLimit Limit on the number of characters that may be read\n   *        while still preserving the mark. Because the stream's input comes\n   *        from a StringBuilder, there is no actual limit, so this argument \n   *        must not be negative, but is otherwise ignored.\n   * @exception IllegalArgumentException If readAheadLimit is < 0\n   * @exception IOException If an I/O error occurs\n   */\n  @Override\n  public void mark(int readAheadLimit) throws IOException {\n    if (readAheadLimit < 0){\n      throw new IllegalArgumentException(\"Read-ahead limit cannpt be negative: \" + readAheadLimit);\n    }\n    synchronized (lock) {\n      ensureOpen();\n      mark = next;\n    }\n  }\n\n","sourceOld":"  /**\n   * Mark the present position in the stream. Subsequent calls to reset() will\n   * reposition the stream to this point.\n   * \n   * @param readAheadLimit Limit on the number of characters that may be read\n   *        while still preserving the mark. Because the stream's input comes\n   *        from a StringBuilder, there is no actual limit, so this argument \n   *        must not be negative, but is otherwise ignored.\n   * @exception IllegalArgumentException If readAheadLimit is < 0\n   * @exception IOException If an I/O error occurs\n   */\n  @Override\n  public void mark(int readAheadLimit) throws IOException {\n    if (readAheadLimit < 0){\n      throw new IllegalArgumentException(\"Read-ahead limit cannpt be negative: \" + readAheadLimit);\n    }\n    synchronized (lock) {\n      ensureOpen();\n      mark = next;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StringBuilderReader#mark(int).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StringBuilderReader#mark(int).mjava","sourceNew":"  /**\n   * Mark the present position in the stream. Subsequent calls to reset() will\n   * reposition the stream to this point.\n   * \n   * @param readAheadLimit Limit on the number of characters that may be read\n   *        while still preserving the mark. Because the stream's input comes\n   *        from a StringBuilder, there is no actual limit, so this argument \n   *        must not be negative, but is otherwise ignored.\n   * @exception IllegalArgumentException If readAheadLimit is < 0\n   * @exception IOException If an I/O error occurs\n   */\n  @Override\n  public void mark(int readAheadLimit) throws IOException {\n    if (readAheadLimit < 0){\n      throw new IllegalArgumentException(\"Read-ahead limit cannpt be negative: \" + readAheadLimit);\n    }\n    synchronized (lock) {\n      ensureOpen();\n      mark = next;\n    }\n  }\n\n","sourceOld":"  /**\n   * Mark the present position in the stream. Subsequent calls to reset() will\n   * reposition the stream to this point.\n   * \n   * @param readAheadLimit Limit on the number of characters that may be read\n   *        while still preserving the mark. Because the stream's input comes\n   *        from a StringBuilder, there is no actual limit, so this argument \n   *        must not be negative, but is otherwise ignored.\n   * @exception IllegalArgumentException If readAheadLimit is < 0\n   * @exception IOException If an I/O error occurs\n   */\n  @Override\n  public void mark(int readAheadLimit) throws IOException {\n    if (readAheadLimit < 0){\n      throw new IllegalArgumentException(\"Read-ahead limit cannpt be negative: \" + readAheadLimit);\n    }\n    synchronized (lock) {\n      ensureOpen();\n      mark = next;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StringBuilderReader#mark(int).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StringBuilderReader#mark(int).mjava","sourceNew":"  /**\n   * Mark the present position in the stream. Subsequent calls to reset() will\n   * reposition the stream to this point.\n   * \n   * @param readAheadLimit Limit on the number of characters that may be read\n   *        while still preserving the mark. Because the stream's input comes\n   *        from a StringBuilder, there is no actual limit, so this argument \n   *        must not be negative, but is otherwise ignored.\n   * @exception IllegalArgumentException If readAheadLimit is < 0\n   * @exception IOException If an I/O error occurs\n   */\n  @Override\n  public void mark(int readAheadLimit) throws IOException {\n    if (readAheadLimit < 0){\n      throw new IllegalArgumentException(\"Read-ahead limit cannpt be negative: \" + readAheadLimit);\n    }\n    synchronized (lock) {\n      ensureOpen();\n      mark = next;\n    }\n  }\n\n","sourceOld":"  /**\n   * Mark the present position in the stream. Subsequent calls to reset() will\n   * reposition the stream to this point.\n   * \n   * @param readAheadLimit Limit on the number of characters that may be read\n   *        while still preserving the mark. Because the stream's input comes\n   *        from a StringBuilder, there is no actual limit, so this argument \n   *        must not be negative, but is otherwise ignored.\n   * @exception IllegalArgumentException If readAheadLimit is < 0\n   * @exception IOException If an I/O error occurs\n   */\n  @Override\n  public void mark(int readAheadLimit) throws IOException {\n    if (readAheadLimit < 0){\n      throw new IllegalArgumentException(\"Read-ahead limit cannpt be negative: \" + readAheadLimit);\n    }\n    synchronized (lock) {\n      ensureOpen();\n      mark = next;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StringBuilderReader#mark(int).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StringBuilderReader#mark(int).mjava","sourceNew":"  /**\n   * Mark the present position in the stream. Subsequent calls to reset() will\n   * reposition the stream to this point.\n   * \n   * @param readAheadLimit Limit on the number of characters that may be read\n   *        while still preserving the mark. Because the stream's input comes\n   *        from a StringBuilder, there is no actual limit, so this argument \n   *        must not be negative, but is otherwise ignored.\n   * @exception IllegalArgumentException If readAheadLimit is < 0\n   * @exception IOException If an I/O error occurs\n   */\n  @Override\n  public void mark(int readAheadLimit) throws IOException {\n    if (readAheadLimit < 0){\n      throw new IllegalArgumentException(\"Read-ahead limit cannpt be negative: \" + readAheadLimit);\n    }\n    synchronized (lock) {\n      ensureOpen();\n      mark = next;\n    }\n  }\n\n","sourceOld":"  /**\n   * Mark the present position in the stream. Subsequent calls to reset() will\n   * reposition the stream to this point.\n   * \n   * @param readAheadLimit Limit on the number of characters that may be read\n   *        while still preserving the mark. Because the stream's input comes\n   *        from a StringBuilder, there is no actual limit, so this argument \n   *        must not be negative, but is otherwise ignored.\n   * @exception IllegalArgumentException If readAheadLimit is < 0\n   * @exception IOException If an I/O error occurs\n   */\n  @Override\n  public void mark(int readAheadLimit) throws IOException {\n    if (readAheadLimit < 0){\n      throw new IllegalArgumentException(\"Read-ahead limit cannpt be negative: \" + readAheadLimit);\n    }\n    synchronized (lock) {\n      ensureOpen();\n      mark = next;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","b89678825b68eccaf09e6ab71675fc0b0af1e099","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}