{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    Document parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    Document parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77855215e331ce146763531cb9b0c050726f6ae5","date":1338323851,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    Document parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    Document parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      StoredDocument childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    StoredDocument childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    StoredDocument parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    Document parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      StoredDocument childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    StoredDocument childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    StoredDocument parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    Document parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f8965baea012c1e38682d0220c6c4a98b9207b8","date":1363627518,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    StoredDocument childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    StoredDocument childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      StoredDocument childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    StoredDocument childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    StoredDocument parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19f400d1b6b61e87efe596bd64726f080f9a29f0","date":1366027276,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    StoredDocument childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    StoredDocument childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    StoredDocument childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    StoredDocument childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161","date":1378462032,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    StoredDocument childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    StoredDocument childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    StoredDocument childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    StoredDocument childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    StoredDocument childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    StoredDocument childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    StoredDocument childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    StoredDocument childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    StoredDocument childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    StoredDocument childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    StoredDocument childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    StoredDocument childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.shutdown();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    StoredDocument childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    StoredDocument childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    StoredDocument childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    StoredDocument childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    StoredDocument childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    StoredDocument childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.shutdown();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    StoredDocument childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    StoredDocument childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b012914a8110b2ff1d075ed1ef72aa57084d4897","date":1414685177,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    StoredDocument childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    StoredDocument childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    StoredDocument childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    StoredDocument childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childJobQuery = new BooleanQuery.Builder();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery.Builder childQualificationQuery = new BooleanQuery.Builder();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery.build(), parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery.build(), c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    StoredDocument childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    StoredDocument childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery, parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery, parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    StoredDocument childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    StoredDocument childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b3915945926c0bf7def01b0c504977709d3aed3","date":1436197708,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childJobQuery = new BooleanQuery.Builder();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery.Builder childQualificationQuery = new BooleanQuery.Builder();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery.build(), parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery.build(), c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    StoredDocument childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    StoredDocument childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childJobQuery = new BooleanQuery.Builder();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery.Builder childQualificationQuery = new BooleanQuery.Builder();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery.build(), parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery.build(), c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    StoredDocument childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    StoredDocument childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a67f37df79147ed4dd608300c2336c2979db98be","date":1436271524,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(s.getIndexReader(), parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childJobQuery = new BooleanQuery.Builder();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery.Builder childQualificationQuery = new BooleanQuery.Builder();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery.build(), parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery.build(), c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    StoredDocument childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    StoredDocument childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childJobQuery = new BooleanQuery.Builder();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery.Builder childQualificationQuery = new BooleanQuery.Builder();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery.build(), parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery.build(), c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    StoredDocument childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    StoredDocument childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(s.getIndexReader(), parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childJobQuery = new BooleanQuery.Builder();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery.Builder childQualificationQuery = new BooleanQuery.Builder();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery.build(), parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery.build(), c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    StoredDocument childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    StoredDocument childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(s.getIndexReader(), parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childJobQuery = new BooleanQuery.Builder();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery.Builder childQualificationQuery = new BooleanQuery.Builder();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery.build(), parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery.build(), c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    StoredDocument childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    StoredDocument childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(s.getIndexReader(), parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childJobQuery = new BooleanQuery.Builder();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery.Builder childQualificationQuery = new BooleanQuery.Builder();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery.build(), parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery.build(), c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(s.getIndexReader(), parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childJobQuery = new BooleanQuery.Builder();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery.Builder childQualificationQuery = new BooleanQuery.Builder();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery.build(), parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery.build(), c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    StoredDocument childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    StoredDocument childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a8a6e8618a812308bce0a978e52ca5c453a112","date":1457444484,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(s.getIndexReader(), parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childJobQuery = new BooleanQuery.Builder();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    BooleanQuery.Builder childQualificationQuery = new BooleanQuery.Builder();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 1980, 2000), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery.build(), parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery.build(), c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(s.getIndexReader(), parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childJobQuery = new BooleanQuery.Builder();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery.Builder childQualificationQuery = new BooleanQuery.Builder();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery.build(), parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery.build(), c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d3c6656a576996d73c1ac211d08e3f7a8fc02a4","date":1457550664,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(s.getIndexReader(), parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childJobQuery = new BooleanQuery.Builder();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    BooleanQuery.Builder childQualificationQuery = new BooleanQuery.Builder();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 1980, 2000), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery.build(), parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery.build(), c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(s.getIndexReader(), parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childJobQuery = new BooleanQuery.Builder();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    BooleanQuery.Builder childQualificationQuery = new BooleanQuery.Builder();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 1980, 2000), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery.build(), parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery.build(), c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d9452e13e015fa1187b0b1bed1a1d08b9c96241","date":1485723373,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(s.getIndexReader(), parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childJobQuery = new BooleanQuery.Builder();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    BooleanQuery.Builder childQualificationQuery = new BooleanQuery.Builder();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 1980, 2000), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery.build(), parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    final TopDocs topDocs = s.search(fullQuery.build(), 10);\n    assertEquals(1, topDocs.totalHits);\n    Document parentDoc = s.doc(topDocs.scoreDocs[0].doc);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childJobQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    childrenQuery = new ParentChildrenBlockJoinQuery(parentsFilter, childQualificationQuery.build(), topDocs.scoreDocs[0].doc);\n    matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"maths\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"qualification\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(s.getIndexReader(), parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childJobQuery = new BooleanQuery.Builder();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    BooleanQuery.Builder childQualificationQuery = new BooleanQuery.Builder();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 1980, 2000), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery.build(), parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery.build(), c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(s.getIndexReader(), parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childJobQuery = new BooleanQuery.Builder();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    BooleanQuery.Builder childQualificationQuery = new BooleanQuery.Builder();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 1980, 2000), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery.build(), parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    final TopDocs topDocs = s.search(fullQuery.build(), 10);\n    assertEquals(1, topDocs.totalHits);\n    Document parentDoc = s.doc(topDocs.scoreDocs[0].doc);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childJobQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    childrenQuery = new ParentChildrenBlockJoinQuery(parentsFilter, childQualificationQuery.build(), topDocs.scoreDocs[0].doc);\n    matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"maths\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"qualification\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(s.getIndexReader(), parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childJobQuery = new BooleanQuery.Builder();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    BooleanQuery.Builder childQualificationQuery = new BooleanQuery.Builder();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 1980, 2000), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery.build(), parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    // Collects all job and qualification child docs for\n    // each resume hit in the top N (sorted by score):\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery.build(), c);\n\n    // Examine \"Job\" children\n    TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, jobResults.totalGroupedHitCount);\n    assertEquals(1, jobResults.groups.length);\n\n    final GroupDocs<Integer> group = jobResults.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childJobDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    // Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(s.getIndexReader(), parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childJobQuery = new BooleanQuery.Builder();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    BooleanQuery.Builder childQualificationQuery = new BooleanQuery.Builder();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 1980, 2000), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery.build(), parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    final TopDocs topDocs = s.search(fullQuery.build(), 10);\n    assertEquals(1, topDocs.totalHits.value);\n    Document parentDoc = s.doc(topDocs.scoreDocs[0].doc);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childJobQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits.value);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    childrenQuery = new ParentChildrenBlockJoinQuery(parentsFilter, childQualificationQuery.build(), topDocs.scoreDocs[0].doc);\n    matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits.value);\n    assertEquals(\"maths\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"qualification\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(s.getIndexReader(), parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childJobQuery = new BooleanQuery.Builder();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    BooleanQuery.Builder childQualificationQuery = new BooleanQuery.Builder();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 1980, 2000), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJobJoinQuery = new ToParentBlockJoinQuery(childJobQuery.build(), parentsFilter, ScoreMode.Avg);\n    ToParentBlockJoinQuery childQualificationJoinQuery = new ToParentBlockJoinQuery(childQualificationQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    final TopDocs topDocs = s.search(fullQuery.build(), 10);\n    assertEquals(1, topDocs.totalHits);\n    Document parentDoc = s.doc(topDocs.scoreDocs[0].doc);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childJobQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    childrenQuery = new ParentChildrenBlockJoinQuery(parentsFilter, childQualificationQuery.build(), topDocs.scoreDocs[0].doc);\n    matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"maths\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"qualification\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161"],"5f8965baea012c1e38682d0220c6c4a98b9207b8":["1d028314cced5858683a1bb4741423d0f934257b"],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a67f37df79147ed4dd608300c2336c2979db98be":["4b3915945926c0bf7def01b0c504977709d3aed3"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["8d3c6656a576996d73c1ac211d08e3f7a8fc02a4","9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"37a8a6e8618a812308bce0a978e52ca5c453a112":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"770342641f7b505eaa8dccdc666158bff2419109":["a67f37df79147ed4dd608300c2336c2979db98be"],"4b3915945926c0bf7def01b0c504977709d3aed3":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"19f400d1b6b61e87efe596bd64726f080f9a29f0":["5f8965baea012c1e38682d0220c6c4a98b9207b8"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d028314cced5858683a1bb4741423d0f934257b":["77855215e331ce146763531cb9b0c050726f6ae5","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161":["19f400d1b6b61e87efe596bd64726f080f9a29f0"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"77855215e331ce146763531cb9b0c050726f6ae5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"8d3c6656a576996d73c1ac211d08e3f7a8fc02a4":["37a8a6e8618a812308bce0a978e52ca5c453a112"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["8d3c6656a576996d73c1ac211d08e3f7a8fc02a4"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["77855215e331ce146763531cb9b0c050726f6ae5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"5f8965baea012c1e38682d0220c6c4a98b9207b8":["19f400d1b6b61e87efe596bd64726f080f9a29f0"],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a67f37df79147ed4dd608300c2336c2979db98be":["770342641f7b505eaa8dccdc666158bff2419109"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"37a8a6e8618a812308bce0a978e52ca5c453a112":["8d3c6656a576996d73c1ac211d08e3f7a8fc02a4"],"4b3915945926c0bf7def01b0c504977709d3aed3":["a67f37df79147ed4dd608300c2336c2979db98be"],"770342641f7b505eaa8dccdc666158bff2419109":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["4b3915945926c0bf7def01b0c504977709d3aed3"],"19f400d1b6b61e87efe596bd64726f080f9a29f0":["49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161"],"1d028314cced5858683a1bb4741423d0f934257b":["5f8965baea012c1e38682d0220c6c4a98b9207b8"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["77855215e331ce146763531cb9b0c050726f6ae5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"77855215e331ce146763531cb9b0c050726f6ae5":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"8d3c6656a576996d73c1ac211d08e3f7a8fc02a4":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","83788ad129a5154d5c6562c4e8ce3db48793aada"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["37a8a6e8618a812308bce0a978e52ca5c453a112"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}