{"path":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        Set<String> termsToMatch = new HashSet<String>();\n        if (request.getQuery() != null && request.isShowMatch()) {\n          try {\n            List<Token> tokens = analyzeValue(request.getQuery(), fieldType.getQueryAnalyzer());\n            for (Token token : tokens) {\n              termsToMatch.add(token.term());\n            }\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), Collections.EMPTY_SET);\n            NamedList<List<NamedList>> tokens = analyzeValue(request.getQuery(), analysisContext);\n            fieldTokens.add(\"query\", tokens);\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<List<NamedList>>> indexTokens = new SimpleOrderedMap<NamedList<List<NamedList>>>();\n        for (Object fieldValue : fieldValues) {\n          NamedList<List<NamedList>> tokens = analyzeValue(fieldValue.toString(), analysisContext);\n          indexTokens.add(String.valueOf(fieldValue), tokens);\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","sourceNew":null,"sourceOld":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        Set<String> termsToMatch = new HashSet<String>();\n        if (request.getQuery() != null && request.isShowMatch()) {\n          try {\n            List<Token> tokens = analyzeValue(request.getQuery(), fieldType.getQueryAnalyzer());\n            for (Token token : tokens) {\n              termsToMatch.add(token.term());\n            }\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), Collections.EMPTY_SET);\n            NamedList<List<NamedList>> tokens = analyzeValue(request.getQuery(), analysisContext);\n            fieldTokens.add(\"query\", tokens);\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<List<NamedList>>> indexTokens = new SimpleOrderedMap<NamedList<List<NamedList>>>();\n        for (Object fieldValue : fieldValues) {\n          NamedList<List<NamedList>> tokens = analyzeValue(fieldValue.toString(), analysisContext);\n          indexTokens.add(String.valueOf(fieldValue), tokens);\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","sourceNew":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        Set<String> termsToMatch = new HashSet<String>();\n        if (request.getQuery() != null && request.isShowMatch()) {\n          try {\n            List<Token> tokens = analyzeValue(request.getQuery(), fieldType.getQueryAnalyzer());\n            for (Token token : tokens) {\n              termsToMatch.add(token.term());\n            }\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), Collections.EMPTY_SET);\n            NamedList<List<NamedList>> tokens = analyzeValue(request.getQuery(), analysisContext);\n            fieldTokens.add(\"query\", tokens);\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<List<NamedList>>> indexTokens = new SimpleOrderedMap<NamedList<List<NamedList>>>();\n        for (Object fieldValue : fieldValues) {\n          NamedList<List<NamedList>> tokens = analyzeValue(fieldValue.toString(), analysisContext);\n          indexTokens.add(String.valueOf(fieldValue), tokens);\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        Set<String> termsToMatch = new HashSet<String>();\n        if (request.getQuery() != null && request.isShowMatch()) {\n          try {\n            List<Token> tokens = analyzeValue(request.getQuery(), fieldType.getQueryAnalyzer());\n            for (Token token : tokens) {\n              termsToMatch.add(token.term());\n            }\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), Collections.EMPTY_SET);\n            NamedList<List<NamedList>> tokens = analyzeValue(request.getQuery(), analysisContext);\n            fieldTokens.add(\"query\", tokens);\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<List<NamedList>>> indexTokens = new SimpleOrderedMap<NamedList<List<NamedList>>>();\n        for (Object fieldValue : fieldValues) {\n          NamedList<List<NamedList>> tokens = analyzeValue(fieldValue.toString(), analysisContext);\n          indexTokens.add(String.valueOf(fieldValue), tokens);\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        Set<String> termsToMatch = new HashSet<String>();\n        if (request.getQuery() != null && request.isShowMatch()) {\n          try {\n            List<Token> tokens = analyzeValue(request.getQuery(), fieldType.getQueryAnalyzer());\n            for (Token token : tokens) {\n              termsToMatch.add(token.term());\n            }\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), Collections.EMPTY_SET);\n            NamedList<List<NamedList>> tokens = analyzeValue(request.getQuery(), analysisContext);\n            fieldTokens.add(\"query\", tokens);\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<List<NamedList>>> indexTokens = new SimpleOrderedMap<NamedList<List<NamedList>>>();\n        for (Object fieldValue : fieldValues) {\n          NamedList<List<NamedList>> tokens = analyzeValue(fieldValue.toString(), analysisContext);\n          indexTokens.add(String.valueOf(fieldValue), tokens);\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","sourceNew":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        Set<String> termsToMatch = new HashSet<String>();\n        if (request.getQuery() != null && request.isShowMatch()) {\n          try {\n            List<Token> tokens = analyzeValue(request.getQuery(), fieldType.getQueryAnalyzer());\n            for (Token token : tokens) {\n              termsToMatch.add(token.toString());\n            }\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), Collections.EMPTY_SET);\n            NamedList<List<NamedList>> tokens = analyzeValue(request.getQuery(), analysisContext);\n            fieldTokens.add(\"query\", tokens);\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<List<NamedList>>> indexTokens = new SimpleOrderedMap<NamedList<List<NamedList>>>();\n        for (Object fieldValue : fieldValues) {\n          NamedList<List<NamedList>> tokens = analyzeValue(fieldValue.toString(), analysisContext);\n          indexTokens.add(String.valueOf(fieldValue), tokens);\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        Set<String> termsToMatch = new HashSet<String>();\n        if (request.getQuery() != null && request.isShowMatch()) {\n          try {\n            List<Token> tokens = analyzeValue(request.getQuery(), fieldType.getQueryAnalyzer());\n            for (Token token : tokens) {\n              termsToMatch.add(token.term());\n            }\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), Collections.EMPTY_SET);\n            NamedList<List<NamedList>> tokens = analyzeValue(request.getQuery(), analysisContext);\n            fieldTokens.add(\"query\", tokens);\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<List<NamedList>>> indexTokens = new SimpleOrderedMap<NamedList<List<NamedList>>>();\n        for (Object fieldValue : fieldValues) {\n          NamedList<List<NamedList>> tokens = analyzeValue(fieldValue.toString(), analysisContext);\n          indexTokens.add(String.valueOf(fieldValue), tokens);\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5f7137bd9491c6596681b1f56e481e17964e581","date":1294458451,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","sourceNew":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        Set<String> termsToMatch = new HashSet<String>();\n        if (request.getQuery() != null && request.isShowMatch()) {\n          try {\n            List<Token> tokens = analyzeValue(request.getQuery(), fieldType.getQueryAnalyzer());\n            for (Token token : tokens) {\n              termsToMatch.add(token.toString());\n            }\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), EMPTY_STRING_SET);\n            fieldTokens.add(\"query\", analyzeValue(request.getQuery(), analysisContext));\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<? extends Object>> indexTokens \n          = new SimpleOrderedMap<NamedList<? extends Object>>();\n        for (Object fieldValue : fieldValues) {\n          indexTokens.add(String.valueOf(fieldValue), \n                          analyzeValue(fieldValue.toString(), analysisContext));\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        Set<String> termsToMatch = new HashSet<String>();\n        if (request.getQuery() != null && request.isShowMatch()) {\n          try {\n            List<Token> tokens = analyzeValue(request.getQuery(), fieldType.getQueryAnalyzer());\n            for (Token token : tokens) {\n              termsToMatch.add(token.toString());\n            }\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), Collections.EMPTY_SET);\n            NamedList<List<NamedList>> tokens = analyzeValue(request.getQuery(), analysisContext);\n            fieldTokens.add(\"query\", tokens);\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<List<NamedList>>> indexTokens = new SimpleOrderedMap<NamedList<List<NamedList>>>();\n        for (Object fieldValue : fieldValues) {\n          NamedList<List<NamedList>> tokens = analyzeValue(fieldValue.toString(), analysisContext);\n          indexTokens.add(String.valueOf(fieldValue), tokens);\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","sourceNew":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        Set<String> termsToMatch = new HashSet<String>();\n        if (request.getQuery() != null && request.isShowMatch()) {\n          try {\n            List<Token> tokens = analyzeValue(request.getQuery(), fieldType.getQueryAnalyzer());\n            for (Token token : tokens) {\n              termsToMatch.add(token.toString());\n            }\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), EMPTY_STRING_SET);\n            fieldTokens.add(\"query\", analyzeValue(request.getQuery(), analysisContext));\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<? extends Object>> indexTokens \n          = new SimpleOrderedMap<NamedList<? extends Object>>();\n        for (Object fieldValue : fieldValues) {\n          indexTokens.add(String.valueOf(fieldValue), \n                          analyzeValue(fieldValue.toString(), analysisContext));\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        Set<String> termsToMatch = new HashSet<String>();\n        if (request.getQuery() != null && request.isShowMatch()) {\n          try {\n            List<Token> tokens = analyzeValue(request.getQuery(), fieldType.getQueryAnalyzer());\n            for (Token token : tokens) {\n              termsToMatch.add(token.toString());\n            }\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), Collections.EMPTY_SET);\n            NamedList<List<NamedList>> tokens = analyzeValue(request.getQuery(), analysisContext);\n            fieldTokens.add(\"query\", tokens);\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<List<NamedList>>> indexTokens = new SimpleOrderedMap<NamedList<List<NamedList>>>();\n        for (Object fieldValue : fieldValues) {\n          NamedList<List<NamedList>> tokens = analyzeValue(fieldValue.toString(), analysisContext);\n          indexTokens.add(String.valueOf(fieldValue), tokens);\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec58fb7921964848d01bea54f8ec4a2ac813eaeb","date":1295476876,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","sourceNew":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        final String queryValue = request.getQuery();\n        Set<BytesRef> termsToMatch;\n        try {\n          termsToMatch = (queryValue != null && request.isShowMatch())\n            ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n            : EMPTY_BYTES_SET;\n        } catch (Exception e) {\n          // ignore analysis exceptions since we are applying arbitrary text to all fields\n          termsToMatch = EMPTY_BYTES_SET;\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), EMPTY_BYTES_SET);\n            fieldTokens.add(\"query\", analyzeValue(request.getQuery(), analysisContext));\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<? extends Object>> indexTokens \n          = new SimpleOrderedMap<NamedList<? extends Object>>();\n        for (Object fieldValue : fieldValues) {\n          indexTokens.add(String.valueOf(fieldValue), \n                          analyzeValue(fieldValue.toString(), analysisContext));\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        Set<String> termsToMatch = new HashSet<String>();\n        if (request.getQuery() != null && request.isShowMatch()) {\n          try {\n            List<Token> tokens = analyzeValue(request.getQuery(), fieldType.getQueryAnalyzer());\n            for (Token token : tokens) {\n              termsToMatch.add(token.toString());\n            }\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), EMPTY_STRING_SET);\n            fieldTokens.add(\"query\", analyzeValue(request.getQuery(), analysisContext));\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<? extends Object>> indexTokens \n          = new SimpleOrderedMap<NamedList<? extends Object>>();\n        for (Object fieldValue : fieldValues) {\n          indexTokens.add(String.valueOf(fieldValue), \n                          analyzeValue(fieldValue.toString(), analysisContext));\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","sourceNew":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        final String queryValue = request.getQuery();\n        Set<BytesRef> termsToMatch;\n        try {\n          termsToMatch = (queryValue != null && request.isShowMatch())\n            ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n            : EMPTY_BYTES_SET;\n        } catch (Exception e) {\n          // ignore analysis exceptions since we are applying arbitrary text to all fields\n          termsToMatch = EMPTY_BYTES_SET;\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), EMPTY_BYTES_SET);\n            fieldTokens.add(\"query\", analyzeValue(request.getQuery(), analysisContext));\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<? extends Object>> indexTokens \n          = new SimpleOrderedMap<NamedList<? extends Object>>();\n        for (Object fieldValue : fieldValues) {\n          indexTokens.add(String.valueOf(fieldValue), \n                          analyzeValue(fieldValue.toString(), analysisContext));\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        Set<String> termsToMatch = new HashSet<String>();\n        if (request.getQuery() != null && request.isShowMatch()) {\n          try {\n            List<Token> tokens = analyzeValue(request.getQuery(), fieldType.getQueryAnalyzer());\n            for (Token token : tokens) {\n              termsToMatch.add(token.toString());\n            }\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), EMPTY_STRING_SET);\n            fieldTokens.add(\"query\", analyzeValue(request.getQuery(), analysisContext));\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<? extends Object>> indexTokens \n          = new SimpleOrderedMap<NamedList<? extends Object>>();\n        for (Object fieldValue : fieldValues) {\n          indexTokens.add(String.valueOf(fieldValue), \n                          analyzeValue(fieldValue.toString(), analysisContext));\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","sourceNew":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        final String queryValue = request.getQuery();\n        Set<BytesRef> termsToMatch;\n        try {\n          termsToMatch = (queryValue != null && request.isShowMatch())\n            ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n            : EMPTY_BYTES_SET;\n        } catch (Exception e) {\n          // ignore analysis exceptions since we are applying arbitrary text to all fields\n          termsToMatch = EMPTY_BYTES_SET;\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), EMPTY_BYTES_SET);\n            fieldTokens.add(\"query\", analyzeValue(request.getQuery(), analysisContext));\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<? extends Object>> indexTokens \n          = new SimpleOrderedMap<NamedList<? extends Object>>();\n        for (Object fieldValue : fieldValues) {\n          indexTokens.add(String.valueOf(fieldValue), \n                          analyzeValue(fieldValue.toString(), analysisContext));\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        Set<String> termsToMatch = new HashSet<String>();\n        if (request.getQuery() != null && request.isShowMatch()) {\n          try {\n            List<Token> tokens = analyzeValue(request.getQuery(), fieldType.getQueryAnalyzer());\n            for (Token token : tokens) {\n              termsToMatch.add(token.toString());\n            }\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), Collections.EMPTY_SET);\n            NamedList<List<NamedList>> tokens = analyzeValue(request.getQuery(), analysisContext);\n            fieldTokens.add(\"query\", tokens);\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<List<NamedList>>> indexTokens = new SimpleOrderedMap<NamedList<List<NamedList>>>();\n        for (Object fieldValue : fieldValues) {\n          NamedList<List<NamedList>> tokens = analyzeValue(fieldValue.toString(), analysisContext);\n          indexTokens.add(String.valueOf(fieldValue), tokens);\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","sourceNew":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        final String queryValue = request.getQuery();\n        Set<BytesRef> termsToMatch;\n        try {\n          termsToMatch = (queryValue != null && request.isShowMatch())\n            ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n            : EMPTY_BYTES_SET;\n        } catch (Exception e) {\n          // ignore analysis exceptions since we are applying arbitrary text to all fields\n          termsToMatch = EMPTY_BYTES_SET;\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), EMPTY_BYTES_SET);\n            fieldTokens.add(\"query\", analyzeValue(request.getQuery(), analysisContext));\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<? extends Object>> indexTokens \n          = new SimpleOrderedMap<NamedList<? extends Object>>();\n        for (Object fieldValue : fieldValues) {\n          indexTokens.add(String.valueOf(fieldValue), \n                          analyzeValue(fieldValue.toString(), analysisContext));\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        final String queryValue = request.getQuery();\n        Set<BytesRef> termsToMatch;\n        try {\n          termsToMatch = (queryValue != null && request.isShowMatch())\n            ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n            : EMPTY_BYTES_SET;\n        } catch (Exception e) {\n          // ignore analysis exceptions since we are applying arbitrary text to all fields\n          termsToMatch = EMPTY_BYTES_SET;\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), EMPTY_BYTES_SET);\n            fieldTokens.add(\"query\", analyzeValue(request.getQuery(), analysisContext));\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<? extends Object>> indexTokens \n          = new SimpleOrderedMap<NamedList<? extends Object>>();\n        for (Object fieldValue : fieldValues) {\n          indexTokens.add(String.valueOf(fieldValue), \n                          analyzeValue(fieldValue.toString(), analysisContext));\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","sourceNew":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        final String queryValue = request.getQuery();\n        Set<BytesRef> termsToMatch;\n        try {\n          termsToMatch = (queryValue != null && request.isShowMatch())\n            ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n            : EMPTY_BYTES_SET;\n        } catch (Exception e) {\n          // ignore analysis exceptions since we are applying arbitrary text to all fields\n          termsToMatch = EMPTY_BYTES_SET;\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), EMPTY_BYTES_SET);\n            fieldTokens.add(\"query\", analyzeValue(request.getQuery(), analysisContext));\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<? extends Object>> indexTokens \n          = new SimpleOrderedMap<NamedList<? extends Object>>();\n        for (Object fieldValue : fieldValues) {\n          indexTokens.add(String.valueOf(fieldValue), \n                          analyzeValue(fieldValue.toString(), analysisContext));\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        final String queryValue = request.getQuery();\n        Set<BytesRef> termsToMatch;\n        try {\n          termsToMatch = (queryValue != null && request.isShowMatch())\n            ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n            : EMPTY_BYTES_SET;\n        } catch (Exception e) {\n          // ignore analysis exceptions since we are applying arbitrary text to all fields\n          termsToMatch = EMPTY_BYTES_SET;\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), EMPTY_BYTES_SET);\n            fieldTokens.add(\"query\", analyzeValue(request.getQuery(), analysisContext));\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<? extends Object>> indexTokens \n          = new SimpleOrderedMap<NamedList<? extends Object>>();\n        for (Object fieldValue : fieldValues) {\n          indexTokens.add(String.valueOf(fieldValue), \n                          analyzeValue(fieldValue.toString(), analysisContext));\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","sourceNew":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        final String queryValue = request.getQuery();\n        Set<BytesRef> termsToMatch;\n        try {\n          termsToMatch = (queryValue != null && request.isShowMatch())\n            ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n            : EMPTY_BYTES_SET;\n        } catch (Exception e) {\n          // ignore analysis exceptions since we are applying arbitrary text to all fields\n          termsToMatch = EMPTY_BYTES_SET;\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), EMPTY_BYTES_SET);\n            fieldTokens.add(\"query\", analyzeValue(request.getQuery(), analysisContext));\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<? extends Object>> indexTokens \n          = new SimpleOrderedMap<NamedList<? extends Object>>();\n        for (Object fieldValue : fieldValues) {\n          indexTokens.add(String.valueOf(fieldValue), \n                          analyzeValue(fieldValue.toString(), analysisContext));\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        final String queryValue = request.getQuery();\n        Set<BytesRef> termsToMatch;\n        try {\n          termsToMatch = (queryValue != null && request.isShowMatch())\n            ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n            : EMPTY_BYTES_SET;\n        } catch (Exception e) {\n          // ignore analysis exceptions since we are applying arbitrary text to all fields\n          termsToMatch = EMPTY_BYTES_SET;\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), EMPTY_BYTES_SET);\n            fieldTokens.add(\"query\", analyzeValue(request.getQuery(), analysisContext));\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<? extends Object>> indexTokens \n          = new SimpleOrderedMap<NamedList<? extends Object>>();\n        for (Object fieldValue : fieldValues) {\n          indexTokens.add(String.valueOf(fieldValue), \n                          analyzeValue(fieldValue.toString(), analysisContext));\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b5f7137bd9491c6596681b1f56e481e17964e581":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["b5f7137bd9491c6596681b1f56e481e17964e581"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a7347509fad0711ac30cb15a746e9a3830a38ebd","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a7347509fad0711ac30cb15a746e9a3830a38ebd","b5f7137bd9491c6596681b1f56e481e17964e581"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"b5f7137bd9491c6596681b1f56e481e17964e581":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["c26f00b574427b55127e869b935845554afde1fa","e79a6d080bdd5b2a8f56342cf571b5476de04180","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"1da8d55113b689b06716246649de6f62430f15c0":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["b5f7137bd9491c6596681b1f56e481e17964e581","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e79a6d080bdd5b2a8f56342cf571b5476de04180","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}