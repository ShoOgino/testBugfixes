{"path":"src/test/org/apache/lucene/analysis/TestTokenStreamBWComp#testMixedOldApiConsumer2().mjava","commits":[{"id":"93995eb4992a09cc5a4b13b04225eca0bca45d57","date":1253288184,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestTokenStreamBWComp#testMixedOldApiConsumer2().mjava","pathOld":"/dev/null","sourceNew":"  public void testMixedOldApiConsumer2() throws Exception {\n    // RoundRobinOldAPI is using TokenStream(next)\n    TokenStream stream = new RoundRobinOldAPI();\n    TermAttribute termAtt = (TermAttribute) stream.getAttribute(TermAttribute.class);\n    \n    assertTrue(stream.incrementToken());\n    Token bar = stream.next();\n    assertEquals(\"foo\", termAtt.term());\n    assertEquals(\"bar\", bar.term());\n\n    assertTrue(stream.incrementToken());\n    assertEquals(\"meh\", termAtt.term());\n    assertEquals(\"private 'bar' term should still be valid\", \"bar\", bar.term());\n\n    Token foo = stream.next();\n    assertEquals(\"the term attribute should still be the same\", \"meh\", termAtt.term());\n    assertEquals(\"foo\", foo.term());\n    assertEquals(\"private 'bar' term should still be valid\", \"bar\", bar.term());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestTokenStreamBWComp#testMixedOldApiConsumer2().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestTokenStreamBWComp#testMixedOldApiConsumer2().mjava","sourceNew":"  public void testMixedOldApiConsumer2() throws Exception {\n    // RoundRobinOldAPI is using TokenStream(next)\n    TokenStream stream = new RoundRobinOldAPI();\n    TermAttribute termAtt = stream.getAttribute(TermAttribute.class);\n    \n    assertTrue(stream.incrementToken());\n    Token bar = stream.next();\n    assertEquals(\"foo\", termAtt.term());\n    assertEquals(\"bar\", bar.term());\n\n    assertTrue(stream.incrementToken());\n    assertEquals(\"meh\", termAtt.term());\n    assertEquals(\"private 'bar' term should still be valid\", \"bar\", bar.term());\n\n    Token foo = stream.next();\n    assertEquals(\"the term attribute should still be the same\", \"meh\", termAtt.term());\n    assertEquals(\"foo\", foo.term());\n    assertEquals(\"private 'bar' term should still be valid\", \"bar\", bar.term());\n  }\n\n","sourceOld":"  public void testMixedOldApiConsumer2() throws Exception {\n    // RoundRobinOldAPI is using TokenStream(next)\n    TokenStream stream = new RoundRobinOldAPI();\n    TermAttribute termAtt = (TermAttribute) stream.getAttribute(TermAttribute.class);\n    \n    assertTrue(stream.incrementToken());\n    Token bar = stream.next();\n    assertEquals(\"foo\", termAtt.term());\n    assertEquals(\"bar\", bar.term());\n\n    assertTrue(stream.incrementToken());\n    assertEquals(\"meh\", termAtt.term());\n    assertEquals(\"private 'bar' term should still be valid\", \"bar\", bar.term());\n\n    Token foo = stream.next();\n    assertEquals(\"the term attribute should still be the same\", \"meh\", termAtt.term());\n    assertEquals(\"foo\", foo.term());\n    assertEquals(\"private 'bar' term should still be valid\", \"bar\", bar.term());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/analysis/TestTokenStreamBWComp#testMixedOldApiConsumer2().mjava","sourceNew":null,"sourceOld":"  public void testMixedOldApiConsumer2() throws Exception {\n    // RoundRobinOldAPI is using TokenStream(next)\n    TokenStream stream = new RoundRobinOldAPI();\n    TermAttribute termAtt = (TermAttribute) stream.getAttribute(TermAttribute.class);\n    \n    assertTrue(stream.incrementToken());\n    Token bar = stream.next();\n    assertEquals(\"foo\", termAtt.term());\n    assertEquals(\"bar\", bar.term());\n\n    assertTrue(stream.incrementToken());\n    assertEquals(\"meh\", termAtt.term());\n    assertEquals(\"private 'bar' term should still be valid\", \"bar\", bar.term());\n\n    Token foo = stream.next();\n    assertEquals(\"the term attribute should still be the same\", \"meh\", termAtt.term());\n    assertEquals(\"foo\", foo.term());\n    assertEquals(\"private 'bar' term should still be valid\", \"bar\", bar.term());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/analysis/TestTokenStreamBWComp#testMixedOldApiConsumer2().mjava","sourceNew":null,"sourceOld":"  public void testMixedOldApiConsumer2() throws Exception {\n    // RoundRobinOldAPI is using TokenStream(next)\n    TokenStream stream = new RoundRobinOldAPI();\n    TermAttribute termAtt = stream.getAttribute(TermAttribute.class);\n    \n    assertTrue(stream.incrementToken());\n    Token bar = stream.next();\n    assertEquals(\"foo\", termAtt.term());\n    assertEquals(\"bar\", bar.term());\n\n    assertTrue(stream.incrementToken());\n    assertEquals(\"meh\", termAtt.term());\n    assertEquals(\"private 'bar' term should still be valid\", \"bar\", bar.term());\n\n    Token foo = stream.next();\n    assertEquals(\"the term attribute should still be the same\", \"meh\", termAtt.term());\n    assertEquals(\"foo\", foo.term());\n    assertEquals(\"private 'bar' term should still be valid\", \"bar\", bar.term());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["93995eb4992a09cc5a4b13b04225eca0bca45d57"],"93995eb4992a09cc5a4b13b04225eca0bca45d57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["8d78f014fded44fbde905f4f84cdc21907b371e8","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["93995eb4992a09cc5a4b13b04225eca0bca45d57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"93995eb4992a09cc5a4b13b04225eca0bca45d57":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","8d78f014fded44fbde905f4f84cdc21907b371e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93995eb4992a09cc5a4b13b04225eca0bca45d57"],"0a046c0c310bc77931fc8441bd920053b607dd14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}