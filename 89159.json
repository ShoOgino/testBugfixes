{"path":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#test().mjava","commits":[{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      // Mix up a bunch of different combinations of shards and replicas in order to exercise boundary cases.\n      // shards, replicationfactor, maxreplicaspernode\n      int shards = random().nextInt(7);\n      if (shards < 2) shards = 2;\n      int rFactor = random().nextInt(4);\n      if (rFactor < 2) rFactor = 2;\n      createCollection(null, COLLECTION_NAME, shards, rFactor, shards * rFactor + 1, client, null, \"conf1\");\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n\n    listCollection();\n\n    clusterAssignPropertyTest();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      // Mix up a bunch of different combinations of shards and replicas in order to exercise boundary cases.\n      // shards, replicationfactor, maxreplicaspernode\n      int shards = random().nextInt(7);\n      if (shards < 2) shards = 2;\n      int rFactor = random().nextInt(4);\n      if (rFactor < 2) rFactor = 2;\n      createCollection(null, COLLECTION_NAME, shards, rFactor, shards * rFactor + 1, client, null, \"conf1\");\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n\n    listCollection();\n\n    clusterAssignPropertyTest();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      // Mix up a bunch of different combinations of shards and replicas in order to exercise boundary cases.\n      // shards, replicationfactor, maxreplicaspernode\n      int shards = random().nextInt(7);\n      if (shards < 2) shards = 2;\n      int rFactor = random().nextInt(4);\n      if (rFactor < 2) rFactor = 2;\n      createCollection(null, COLLECTION_NAME, shards, rFactor, shards * rFactor + 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n\n    listCollection();\n\n    clusterAssignPropertyTest();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      // Mix up a bunch of different combinations of shards and replicas in order to exercise boundary cases.\n      // shards, replicationfactor, maxreplicaspernode\n      int shards = random().nextInt(7);\n      if (shards < 2) shards = 2;\n      int rFactor = random().nextInt(4);\n      if (rFactor < 2) rFactor = 2;\n      createCollection(null, COLLECTION_NAME, shards, rFactor, shards * rFactor + 1, client, null, \"conf1\");\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n\n    listCollection();\n\n    clusterAssignPropertyTest();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestReplicaProperties#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      // Mix up a bunch of different combinations of shards and replicas in order to exercise boundary cases.\n      // shards, replicationfactor, maxreplicaspernode\n      int shards = random().nextInt(7);\n      if (shards < 2) shards = 2;\n      int rFactor = random().nextInt(4);\n      if (rFactor < 2) rFactor = 2;\n      createCollection(null, COLLECTION_NAME, shards, rFactor, shards * rFactor + 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n\n    listCollection();\n\n    clusterAssignPropertyTest();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      // Mix up a bunch of different combinations of shards and replicas in order to exercise boundary cases.\n      // shards, replicationfactor, maxreplicaspernode\n      int shards = random().nextInt(7);\n      if (shards < 2) shards = 2;\n      int rFactor = random().nextInt(4);\n      if (rFactor < 2) rFactor = 2;\n      createCollection(null, COLLECTION_NAME, shards, rFactor, shards * rFactor + 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n\n    listCollection();\n\n    clusterAssignPropertyTest();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestReplicaProperties#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      // Mix up a bunch of different combinations of shards and replicas in order to exercise boundary cases.\n      // shards, replicationfactor, maxreplicaspernode\n      int shards = random().nextInt(7);\n      if (shards < 2) shards = 2;\n      int rFactor = random().nextInt(4);\n      if (rFactor < 2) rFactor = 2;\n      createCollection(null, COLLECTION_NAME, shards, rFactor, shards * rFactor + 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n\n    listCollection();\n\n    clusterAssignPropertyTest();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      // Mix up a bunch of different combinations of shards and replicas in order to exercise boundary cases.\n      // shards, replicationfactor, maxreplicaspernode\n      int shards = random().nextInt(7);\n      if (shards < 2) shards = 2;\n      int rFactor = random().nextInt(4);\n      if (rFactor < 2) rFactor = 2;\n      createCollection(null, COLLECTION_NAME, shards, rFactor, shards * rFactor + 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n\n    listCollection();\n\n    clusterAssignPropertyTest();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cc3b13b430571c2e169f98fe38e1e7666f88522d","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"abb23fcc2461782ab204e61213240feb77d355aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["abb23fcc2461782ab204e61213240feb77d355aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"abb23fcc2461782ab204e61213240feb77d355aa":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abb23fcc2461782ab204e61213240feb77d355aa"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}