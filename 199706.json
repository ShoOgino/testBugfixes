{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","commits":[{"id":"e4848fb683db0790f2847173af06e2ad2d03328e","date":1498631007,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","sourceNew":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","sourceOld":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","sourceNew":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","sourceOld":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","pathOld":"/dev/null","sourceNew":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","sourceNew":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new DelegatingClusterDataProvider(null) {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getLiveNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","sourceOld":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","sourceNew":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","sourceOld":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new DelegatingClusterDataProvider(null) {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getLiveNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3955a9511098c96b652734b2f2d4160d07cc2d63","date":1504780677,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","sourceNew":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public ClusterState getClusterState() {\n        throw new UnsupportedOperationException(\"getClusterState\");\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","sourceOld":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6","date":1505752009,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","sourceNew":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","sourceOld":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public ClusterState getClusterState() {\n        throw new UnsupportedOperationException(\"getClusterState\");\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","sourceNew":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","sourceOld":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","sourceNew":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","sourceOld":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","sourceNew":null,"sourceOld":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String clusterState) {\n    return new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return nodeValues.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4848fb683db0790f2847173af06e2ad2d03328e"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","b71597cbe4c0f463a81f3f225fc0ff1355c8fee6"],"3955a9511098c96b652734b2f2d4160d07cc2d63":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":["3955a9511098c96b652734b2f2d4160d07cc2d63"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4848fb683db0790f2847173af06e2ad2d03328e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"e4848fb683db0790f2847173af06e2ad2d03328e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3955a9511098c96b652734b2f2d4160d07cc2d63":["b71597cbe4c0f463a81f3f225fc0ff1355c8fee6"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","28288370235ed02234a64753cdbf0c6ec096304a","e4848fb683db0790f2847173af06e2ad2d03328e"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["3955a9511098c96b652734b2f2d4160d07cc2d63"],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"e4848fb683db0790f2847173af06e2ad2d03328e":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}