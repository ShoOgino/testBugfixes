{"path":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource]#createComparator(AtomicReader,TermOrdValComparator_SML).mjava","commits":[{"id":"96d207426bd26fa5c1014e26d21d87603aea68b7","date":1327944562,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource]#createComparator(AtomicReader,TermOrdValComparator_SML).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource]#createComparator(IndexReader,TermOrdValComparator_SML).mjava","sourceNew":"  public static FieldComparator createComparator(AtomicReader reader, TermOrdValComparator_SML parent) throws IOException {\n    parent.termsIndex = FieldCache.DEFAULT.getTermsIndex(reader, parent.field);\n    final PackedInts.Reader docToOrd = parent.termsIndex.getDocToOrd();\n    PerSegmentComparator perSegComp = null;\n    if (docToOrd.hasArray()) {\n      final Object arr = docToOrd.getArray();\n      if (arr instanceof byte[]) {\n        perSegComp = new ByteOrdComparator((byte[]) arr, parent);\n      } else if (arr instanceof short[]) {\n        perSegComp = new ShortOrdComparator((short[]) arr, parent);\n      } else if (arr instanceof int[]) {\n        perSegComp = new IntOrdComparator((int[]) arr, parent);\n      }\n    }\n\n    if (perSegComp == null) {\n      perSegComp = new AnyOrdComparator(docToOrd, parent);\n    }\n\n    if (perSegComp.bottomSlot != -1) {\n      perSegComp.setBottom(perSegComp.bottomSlot);\n    }\n\n    parent.current = perSegComp;\n    return perSegComp;\n  }\n\n","sourceOld":"  public static FieldComparator createComparator(IndexReader reader, TermOrdValComparator_SML parent) throws IOException {\n    parent.termsIndex = FieldCache.DEFAULT.getTermsIndex(reader, parent.field);\n    final PackedInts.Reader docToOrd = parent.termsIndex.getDocToOrd();\n    PerSegmentComparator perSegComp = null;\n    if (docToOrd.hasArray()) {\n      final Object arr = docToOrd.getArray();\n      if (arr instanceof byte[]) {\n        perSegComp = new ByteOrdComparator((byte[]) arr, parent);\n      } else if (arr instanceof short[]) {\n        perSegComp = new ShortOrdComparator((short[]) arr, parent);\n      } else if (arr instanceof int[]) {\n        perSegComp = new IntOrdComparator((int[]) arr, parent);\n      }\n    }\n\n    if (perSegComp == null) {\n      perSegComp = new AnyOrdComparator(docToOrd, parent);\n    }\n\n    if (perSegComp.bottomSlot != -1) {\n      perSegComp.setBottom(perSegComp.bottomSlot);\n    }\n\n    parent.current = perSegComp;\n    return perSegComp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource]#createComparator(AtomicReader,TermOrdValComparator_SML).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource]#createComparator(IndexReader,TermOrdValComparator_SML).mjava","sourceNew":"  public static FieldComparator createComparator(AtomicReader reader, TermOrdValComparator_SML parent) throws IOException {\n    parent.termsIndex = FieldCache.DEFAULT.getTermsIndex(reader, parent.field);\n    final PackedInts.Reader docToOrd = parent.termsIndex.getDocToOrd();\n    PerSegmentComparator perSegComp = null;\n    if (docToOrd.hasArray()) {\n      final Object arr = docToOrd.getArray();\n      if (arr instanceof byte[]) {\n        perSegComp = new ByteOrdComparator((byte[]) arr, parent);\n      } else if (arr instanceof short[]) {\n        perSegComp = new ShortOrdComparator((short[]) arr, parent);\n      } else if (arr instanceof int[]) {\n        perSegComp = new IntOrdComparator((int[]) arr, parent);\n      }\n    }\n\n    if (perSegComp == null) {\n      perSegComp = new AnyOrdComparator(docToOrd, parent);\n    }\n\n    if (perSegComp.bottomSlot != -1) {\n      perSegComp.setBottom(perSegComp.bottomSlot);\n    }\n\n    parent.current = perSegComp;\n    return perSegComp;\n  }\n\n","sourceOld":"  public static FieldComparator createComparator(IndexReader reader, TermOrdValComparator_SML parent) throws IOException {\n    parent.termsIndex = FieldCache.DEFAULT.getTermsIndex(reader, parent.field);\n    final PackedInts.Reader docToOrd = parent.termsIndex.getDocToOrd();\n    PerSegmentComparator perSegComp = null;\n    if (docToOrd.hasArray()) {\n      final Object arr = docToOrd.getArray();\n      if (arr instanceof byte[]) {\n        perSegComp = new ByteOrdComparator((byte[]) arr, parent);\n      } else if (arr instanceof short[]) {\n        perSegComp = new ShortOrdComparator((short[]) arr, parent);\n      } else if (arr instanceof int[]) {\n        perSegComp = new IntOrdComparator((int[]) arr, parent);\n      }\n    }\n\n    if (perSegComp == null) {\n      perSegComp = new AnyOrdComparator(docToOrd, parent);\n    }\n\n    if (perSegComp.bottomSlot != -1) {\n      perSegComp.setBottom(perSegComp.bottomSlot);\n    }\n\n    parent.current = perSegComp;\n    return perSegComp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2893fd5349134af382d33ccc3d84840394c6c1","date":1353682567,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource]#createComparator(AtomicReader,TermOrdValComparator_SML).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource]#createComparator(AtomicReader,TermOrdValComparator_SML).mjava","sourceNew":"  public static FieldComparator createComparator(AtomicReader reader, TermOrdValComparator_SML parent) throws IOException {\n    parent.termsIndex = FieldCache.DEFAULT.getTermsIndex(reader, parent.field);\n    PerSegmentComparator perSegComp = new AnyOrdComparator(parent);\n\n    if (perSegComp.bottomSlot != -1) {\n      perSegComp.setBottom(perSegComp.bottomSlot);\n    }\n\n    parent.current = perSegComp;\n    return perSegComp;\n  }\n\n","sourceOld":"  public static FieldComparator createComparator(AtomicReader reader, TermOrdValComparator_SML parent) throws IOException {\n    parent.termsIndex = FieldCache.DEFAULT.getTermsIndex(reader, parent.field);\n    final PackedInts.Reader docToOrd = parent.termsIndex.getDocToOrd();\n    PerSegmentComparator perSegComp = null;\n    if (docToOrd.hasArray()) {\n      final Object arr = docToOrd.getArray();\n      if (arr instanceof byte[]) {\n        perSegComp = new ByteOrdComparator((byte[]) arr, parent);\n      } else if (arr instanceof short[]) {\n        perSegComp = new ShortOrdComparator((short[]) arr, parent);\n      } else if (arr instanceof int[]) {\n        perSegComp = new IntOrdComparator((int[]) arr, parent);\n      }\n    }\n\n    if (perSegComp == null) {\n      perSegComp = new AnyOrdComparator(docToOrd, parent);\n    }\n\n    if (perSegComp.bottomSlot != -1) {\n      perSegComp.setBottom(perSegComp.bottomSlot);\n    }\n\n    parent.current = perSegComp;\n    return perSegComp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource]#createComparator(AtomicReader,TermOrdValComparator_SML).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource]#createComparator(AtomicReader,TermOrdValComparator_SML).mjava","sourceNew":"  public static FieldComparator createComparator(AtomicReader reader, TermOrdValComparator_SML parent) throws IOException {\n    parent.termsIndex = FieldCache.DEFAULT.getTermsIndex(reader, parent.field);\n    PerSegmentComparator perSegComp = new AnyOrdComparator(parent);\n\n    if (perSegComp.bottomSlot != -1) {\n      perSegComp.setBottom(perSegComp.bottomSlot);\n    }\n\n    parent.current = perSegComp;\n    return perSegComp;\n  }\n\n","sourceOld":"  public static FieldComparator createComparator(AtomicReader reader, TermOrdValComparator_SML parent) throws IOException {\n    parent.termsIndex = FieldCache.DEFAULT.getTermsIndex(reader, parent.field);\n    final PackedInts.Reader docToOrd = parent.termsIndex.getDocToOrd();\n    PerSegmentComparator perSegComp = null;\n    if (docToOrd.hasArray()) {\n      final Object arr = docToOrd.getArray();\n      if (arr instanceof byte[]) {\n        perSegComp = new ByteOrdComparator((byte[]) arr, parent);\n      } else if (arr instanceof short[]) {\n        perSegComp = new ShortOrdComparator((short[]) arr, parent);\n      } else if (arr instanceof int[]) {\n        perSegComp = new IntOrdComparator((int[]) arr, parent);\n      }\n    }\n\n    if (perSegComp == null) {\n      perSegComp = new AnyOrdComparator(docToOrd, parent);\n    }\n\n    if (perSegComp.bottomSlot != -1) {\n      perSegComp.setBottom(perSegComp.bottomSlot);\n    }\n\n    parent.current = perSegComp;\n    return perSegComp;\n  }\n\n","bugFix":["a05818166782d252a03edc21cda3f0f186170b70","3c71d502dea2f9d6ed3d8783f510ea3254435de9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea252e5e61c9d1ca6595deb9168914574963e5c3","date":1389815046,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource]#createComparator(AtomicReader,TermOrdValComparator_SML).mjava","sourceNew":null,"sourceOld":"  public static FieldComparator createComparator(AtomicReader reader, TermOrdValComparator_SML parent) throws IOException {\n    parent.termsIndex = FieldCache.DEFAULT.getTermsIndex(reader, parent.field);\n    PerSegmentComparator perSegComp = new AnyOrdComparator(parent);\n\n    if (perSegComp.bottomSlot != -1) {\n      perSegComp.setBottom(perSegComp.bottomSlot);\n    }\n\n    parent.current = perSegComp;\n    return perSegComp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27ab7b234eab0cbc020836989b96ed430e1065bb","date":1389894025,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource]#createComparator(AtomicReader,TermOrdValComparator_SML).mjava","sourceNew":null,"sourceOld":"  public static FieldComparator createComparator(AtomicReader reader, TermOrdValComparator_SML parent) throws IOException {\n    parent.termsIndex = FieldCache.DEFAULT.getTermsIndex(reader, parent.field);\n    PerSegmentComparator perSegComp = new AnyOrdComparator(parent);\n\n    if (perSegComp.bottomSlot != -1) {\n      perSegComp.setBottom(perSegComp.bottomSlot);\n    }\n\n    parent.current = perSegComp;\n    return perSegComp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["5cab9a86bd67202d20b6adc463008c8e982b070a","6e2893fd5349134af382d33ccc3d84840394c6c1"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["d4d69c535930b5cce125cff868d40f6373dc27d4","ea252e5e61c9d1ca6595deb9168914574963e5c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"96d207426bd26fa5c1014e26d21d87603aea68b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ea252e5e61c9d1ca6595deb9168914574963e5c3":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","96d207426bd26fa5c1014e26d21d87603aea68b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["27ab7b234eab0cbc020836989b96ed430e1065bb"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["27ab7b234eab0cbc020836989b96ed430e1065bb","ea252e5e61c9d1ca6595deb9168914574963e5c3"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96d207426bd26fa5c1014e26d21d87603aea68b7","5cab9a86bd67202d20b6adc463008c8e982b070a"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"ea252e5e61c9d1ca6595deb9168914574963e5c3":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["d4d69c535930b5cce125cff868d40f6373dc27d4","6e2893fd5349134af382d33ccc3d84840394c6c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}