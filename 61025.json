{"path":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","sourceNew":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    \n    FuzzyQuery q = new FuzzyQuery(new Term(\"field\", \"fouba\"), 2);\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"foubara\"), 2);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"t\"), 3);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    reader.close();\n    index.close();\n  }\n\n","sourceOld":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    \n    FuzzyQuery q = new FuzzyQuery(new Term(\"field\", \"fouba\"), 2);\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"foubara\"), 2);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"t\"), 3);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    reader.close();\n    index.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","sourceNew":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    \n    FuzzyQuery q = new FuzzyQuery(new Term(\"field\", \"fouba\"), 2);\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"foubara\"), 2);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"t\"), 3);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    reader.close();\n    index.close();\n  }\n\n","sourceOld":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    \n    FuzzyQuery q = new FuzzyQuery(new Term(\"field\", \"fouba\"), 2);\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"foubara\"), 2);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"t\"), 3);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    reader.close();\n    index.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d374631bb6f5665bd5907a6186a9bb283a315f7d","date":1336345692,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","sourceNew":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    \n    FuzzyQuery q = new FuzzyQuery(new Term(\"field\", \"fouba\"), 2);\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"foubara\"), 2);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    try {\n      q = new FuzzyQuery(new Term(\"field\", \"t\"), 3);\n      fail();\n    } catch (IllegalArgumentException expected) {\n      // expected\n    }\n      \n    reader.close();\n    index.close();\n  }\n\n","sourceOld":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    \n    FuzzyQuery q = new FuzzyQuery(new Term(\"field\", \"fouba\"), 2);\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"foubara\"), 2);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"t\"), 3);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 4f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"a\"), 6f, 0, 50);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(\"test\", searcher.doc(hits[0].doc).get(\"field\"));\n    assertEquals(\"foobar\", searcher.doc(hits[1].doc).get(\"field\"));\n    \n    reader.close();\n    index.close();\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","sourceNew":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.shutdown();\n    \n    FuzzyQuery q = new FuzzyQuery(new Term(\"field\", \"fouba\"), 2);\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"foubara\"), 2);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    try {\n      q = new FuzzyQuery(new Term(\"field\", \"t\"), 3);\n      fail();\n    } catch (IllegalArgumentException expected) {\n      // expected\n    }\n      \n    reader.close();\n    index.close();\n  }\n\n","sourceOld":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    \n    FuzzyQuery q = new FuzzyQuery(new Term(\"field\", \"fouba\"), 2);\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"foubara\"), 2);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    try {\n      q = new FuzzyQuery(new Term(\"field\", \"t\"), 3);\n      fail();\n    } catch (IllegalArgumentException expected) {\n      // expected\n    }\n      \n    reader.close();\n    index.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","sourceNew":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    \n    FuzzyQuery q = new FuzzyQuery(new Term(\"field\", \"fouba\"), 2);\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"foubara\"), 2);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    try {\n      q = new FuzzyQuery(new Term(\"field\", \"t\"), 3);\n      fail();\n    } catch (IllegalArgumentException expected) {\n      // expected\n    }\n      \n    reader.close();\n    index.close();\n  }\n\n","sourceOld":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.shutdown();\n    \n    FuzzyQuery q = new FuzzyQuery(new Term(\"field\", \"fouba\"), 2);\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"foubara\"), 2);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    try {\n      q = new FuzzyQuery(new Term(\"field\", \"t\"), 3);\n      fail();\n    } catch (IllegalArgumentException expected) {\n      // expected\n    }\n      \n    reader.close();\n    index.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testDistanceAsEditsSearching().mjava","sourceNew":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    \n    FuzzyQuery q = new FuzzyQuery(new Term(\"field\", \"fouba\"), 2);\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"foubara\"), 2);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      new FuzzyQuery(new Term(\"field\", \"t\"), 3);\n    });\n\n    reader.close();\n    index.close();\n  }\n\n","sourceOld":"  public void testDistanceAsEditsSearching() throws Exception {\n    Directory index = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), index);\n    addDoc(\"foobar\", w);\n    addDoc(\"test\", w);\n    addDoc(\"working\", w);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    w.close();\n    \n    FuzzyQuery q = new FuzzyQuery(new Term(\"field\", \"fouba\"), 2);\n    ScoreDoc[] hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    q = new FuzzyQuery(new Term(\"field\", \"foubara\"), 2);\n    hits = searcher.search(q, 10).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(\"foobar\", searcher.doc(hits[0].doc).get(\"field\"));\n    \n    try {\n      q = new FuzzyQuery(new Term(\"field\", \"t\"), 3);\n      fail();\n    } catch (IllegalArgumentException expected) {\n      // expected\n    }\n      \n    reader.close();\n    index.close();\n  }\n\n","bugFix":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["05fe562aa248790944d43cdd478f512572835ba0"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}