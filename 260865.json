{"path":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","commits":[{"id":"32e7c2a80dad193a76a03ec46b878969d469ff6c","date":1323722006,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/DocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","sourceNew":"  // A RangeValueSource can't easily be a ValueSource that takes another ValueSource\n  // because it needs different behavior depending on the type of fields.  There is also\n  // a setup cost - parsing and normalizing params, and doing a binary search on the StringIndex.\n  // TODO: change \"reader\" to AtomicReaderContext\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    float lower;\n    float upper;\n\n    if (lowerVal == null) {\n      lower = Float.NEGATIVE_INFINITY;\n    } else {\n      lower = Float.parseFloat(lowerVal);\n    }\n    if (upperVal == null) {\n      upper = Float.POSITIVE_INFINITY;\n    } else {\n      upper = Float.parseFloat(upperVal);\n    }\n\n    final float l = lower;\n    final float u = upper;\n\n    if (includeLower && includeUpper) {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal <= u;\n        }\n      };\n    }\n    else if (includeLower && !includeUpper) {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal < u;\n        }\n      };\n    }\n    else if (!includeLower && includeUpper) {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal > l && docVal <= u;\n        }\n      };\n    }\n    else {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal > l && docVal < u;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  // A RangeValueSource can't easily be a ValueSource that takes another ValueSource\n  // because it needs different behavior depending on the type of fields.  There is also\n  // a setup cost - parsing and normalizing params, and doing a binary search on the StringIndex.\n  // TODO: change \"reader\" to AtomicReaderContext\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    float lower;\n    float upper;\n\n    if (lowerVal == null) {\n      lower = Float.NEGATIVE_INFINITY;\n    } else {\n      lower = Float.parseFloat(lowerVal);\n    }\n    if (upperVal == null) {\n      upper = Float.POSITIVE_INFINITY;\n    } else {\n      upper = Float.parseFloat(upperVal);\n    }\n\n    final float l = lower;\n    final float u = upper;\n\n    if (includeLower && includeUpper) {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal <= u;\n        }\n      };\n    }\n    else if (includeLower && !includeUpper) {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal < u;\n        }\n      };\n    }\n    else if (!includeLower && includeUpper) {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal > l && docVal <= u;\n        }\n      };\n    }\n    else {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal > l && docVal < u;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/DocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","sourceNew":"  // A RangeValueSource can't easily be a ValueSource that takes another ValueSource\n  // because it needs different behavior depending on the type of fields.  There is also\n  // a setup cost - parsing and normalizing params, and doing a binary search on the StringIndex.\n  // TODO: change \"reader\" to AtomicReaderContext\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    float lower;\n    float upper;\n\n    if (lowerVal == null) {\n      lower = Float.NEGATIVE_INFINITY;\n    } else {\n      lower = Float.parseFloat(lowerVal);\n    }\n    if (upperVal == null) {\n      upper = Float.POSITIVE_INFINITY;\n    } else {\n      upper = Float.parseFloat(upperVal);\n    }\n\n    final float l = lower;\n    final float u = upper;\n\n    if (includeLower && includeUpper) {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal <= u;\n        }\n      };\n    }\n    else if (includeLower && !includeUpper) {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal < u;\n        }\n      };\n    }\n    else if (!includeLower && includeUpper) {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal > l && docVal <= u;\n        }\n      };\n    }\n    else {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal > l && docVal < u;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  // A RangeValueSource can't easily be a ValueSource that takes another ValueSource\n  // because it needs different behavior depending on the type of fields.  There is also\n  // a setup cost - parsing and normalizing params, and doing a binary search on the StringIndex.\n  // TODO: change \"reader\" to AtomicReaderContext\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    float lower;\n    float upper;\n\n    if (lowerVal == null) {\n      lower = Float.NEGATIVE_INFINITY;\n    } else {\n      lower = Float.parseFloat(lowerVal);\n    }\n    if (upperVal == null) {\n      upper = Float.POSITIVE_INFINITY;\n    } else {\n      upper = Float.parseFloat(upperVal);\n    }\n\n    final float l = lower;\n    final float u = upper;\n\n    if (includeLower && includeUpper) {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal <= u;\n        }\n      };\n    }\n    else if (includeLower && !includeUpper) {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal < u;\n        }\n      };\n    }\n    else if (!includeLower && includeUpper) {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal > l && docVal <= u;\n        }\n      };\n    }\n    else {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal > l && docVal < u;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","sourceNew":"  // A RangeValueSource can't easily be a ValueSource that takes another ValueSource\n  // because it needs different behavior depending on the type of fields.  There is also\n  // a setup cost - parsing and normalizing params, and doing a binary search on the StringIndex.\n  // TODO: change \"reader\" to AtomicReaderContext\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    float lower;\n    float upper;\n\n    if (lowerVal == null) {\n      lower = Float.NEGATIVE_INFINITY;\n    } else {\n      lower = Float.parseFloat(lowerVal);\n    }\n    if (upperVal == null) {\n      upper = Float.POSITIVE_INFINITY;\n    } else {\n      upper = Float.parseFloat(upperVal);\n    }\n\n    final float l = lower;\n    final float u = upper;\n\n    if (includeLower && includeUpper) {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal <= u;\n        }\n      };\n    }\n    else if (includeLower && !includeUpper) {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal < u;\n        }\n      };\n    }\n    else if (!includeLower && includeUpper) {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal > l && docVal <= u;\n        }\n      };\n    }\n    else {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal > l && docVal < u;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  // A RangeValueSource can't easily be a ValueSource that takes another ValueSource\n  // because it needs different behavior depending on the type of fields.  There is also\n  // a setup cost - parsing and normalizing params, and doing a binary search on the StringIndex.\n  // TODO: change \"reader\" to AtomicReaderContext\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    float lower;\n    float upper;\n\n    if (lowerVal == null) {\n      lower = Float.NEGATIVE_INFINITY;\n    } else {\n      lower = Float.parseFloat(lowerVal);\n    }\n    if (upperVal == null) {\n      upper = Float.POSITIVE_INFINITY;\n    } else {\n      upper = Float.parseFloat(upperVal);\n    }\n\n    final float l = lower;\n    final float u = upper;\n\n    if (includeLower && includeUpper) {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal <= u;\n        }\n      };\n    }\n    else if (includeLower && !includeUpper) {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal < u;\n        }\n      };\n    }\n    else if (!includeLower && includeUpper) {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal > l && docVal <= u;\n        }\n      };\n    }\n    else {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal > l && docVal < u;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32e7c2a80dad193a76a03ec46b878969d469ff6c"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["32e7c2a80dad193a76a03ec46b878969d469ff6c","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}