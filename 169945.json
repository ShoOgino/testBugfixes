{"path":"lucene/src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","sourceNew":"  // returns fake norms if norms aren't available\n  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = getNorms(field);\n    return bytes;\n  }\n\n","sourceOld":"  // returns fake norms if norms aren't available\n  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = getNorms(field);\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91824676e57e2d1c945918662b835813385cd291","date":1299972146,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","sourceNew":"  @Override\n  public byte[] norms(String field) throws IOException {\n    ensureOpen();\n    final Norm norm = norms.get(field);\n    if (norm == null) {\n      // not indexed, or norms not stored\n      return null;  \n    }\n    return norm.bytes();\n  }\n\n","sourceOld":"  // returns fake norms if norms aren't available\n  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = getNorms(field);\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","sourceNew":"  @Override\n  public byte[] norms(String field) throws IOException {\n    ensureOpen();\n    final Norm norm = norms.get(field);\n    if (norm == null) {\n      // not indexed, or norms not stored\n      return null;  \n    }\n    return norm.bytes();\n  }\n\n","sourceOld":"  // returns fake norms if norms aren't available\n  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = getNorms(field);\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","sourceNew":"  @Override\n  public byte[] norms(String field) throws IOException {\n    ensureOpen();\n    final Norm norm = norms.get(field);\n    if (norm == null) {\n      // not indexed, or norms not stored\n      return null;  \n    }\n    return norm.bytes();\n  }\n\n","sourceOld":"  // returns fake norms if norms aren't available\n  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = getNorms(field);\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b5e0eebe355b14693e24007d721da78a79d8170","date":1305898401,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","sourceNew":"  @Override\n  public byte[] norms(String field) throws IOException {\n    ensureOpen();\n    final SegmentNorms norm = norms.get(field);\n    if (norm == null) {\n      // not indexed, or norms not stored\n      return null;  \n    }\n    return norm.bytes();\n  }\n\n","sourceOld":"  @Override\n  public byte[] norms(String field) throws IOException {\n    ensureOpen();\n    final Norm norm = norms.get(field);\n    if (norm == null) {\n      // not indexed, or norms not stored\n      return null;  \n    }\n    return norm.bytes();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","sourceNew":"  @Override\n  public byte[] norms(String field) throws IOException {\n    ensureOpen();\n    final SegmentNorms norm = norms.get(field);\n    if (norm == null) {\n      // not indexed, or norms not stored\n      return null;  \n    }\n    return norm.bytes();\n  }\n\n","sourceOld":"  @Override\n  public byte[] norms(String field) throws IOException {\n    ensureOpen();\n    final Norm norm = norms.get(field);\n    if (norm == null) {\n      // not indexed, or norms not stored\n      return null;  \n    }\n    return norm.bytes();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","date":1306150983,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","sourceNew":"  @Override\n  public byte[] norms(String field) throws IOException {\n    ensureOpen();\n    final SegmentNorms norm = norms.get(field);\n    if (norm == null) {\n      // not indexed, or norms not stored\n      return null;  \n    }\n    return norm.bytes();\n  }\n\n","sourceOld":"  @Override\n  public byte[] norms(String field) throws IOException {\n    ensureOpen();\n    final Norm norm = norms.get(field);\n    if (norm == null) {\n      // not indexed, or norms not stored\n      return null;  \n    }\n    return norm.bytes();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11f75174865a8734695cd60a4093339a4e63fcbb","date":1323039567,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","sourceNew":"  @Override\n  public byte[] norms(String field) throws IOException {\n    ensureOpen();\n    return core.norms.norms(field);\n  }\n\n","sourceOld":"  @Override\n  public byte[] norms(String field) throws IOException {\n    ensureOpen();\n    final SegmentNorms norm = norms.get(field);\n    if (norm == null) {\n      // not indexed, or norms not stored\n      return null;  \n    }\n    return norm.bytes();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","sourceNew":"  @Override\n  public byte[] norms(String field) throws IOException {\n    ensureOpen();\n    return core.norms.norms(field);\n  }\n\n","sourceOld":"  @Override\n  public byte[] norms(String field) throws IOException {\n    ensureOpen();\n    final SegmentNorms norm = norms.get(field);\n    if (norm == null) {\n      // not indexed, or norms not stored\n      return null;  \n    }\n    return norm.bytes();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","sourceNew":"  @Override\n  public byte[] norms(String field) throws IOException {\n    ensureOpen();\n    return core.norms.norms(field);\n  }\n\n","sourceOld":"  @Override\n  public byte[] norms(String field) throws IOException {\n    ensureOpen();\n    final SegmentNorms norm = norms.get(field);\n    if (norm == null) {\n      // not indexed, or norms not stored\n      return null;  \n    }\n    return norm.bytes();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6e3376a314fcc2b31bc46d399c2ff23552b78d6","date":1325780477,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#norms(String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public byte[] norms(String field) throws IOException {\n    ensureOpen();\n    return core.norms.norms(field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":["d619839baa8ce5503e496b94a9e42ad6f079293f","8b5e0eebe355b14693e24007d721da78a79d8170"],"11f75174865a8734695cd60a4093339a4e63fcbb":["8b5e0eebe355b14693e24007d721da78a79d8170"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["8b5e0eebe355b14693e24007d721da78a79d8170","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"8b5e0eebe355b14693e24007d721da78a79d8170":["91824676e57e2d1c945918662b835813385cd291"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["9454a6510e2db155fb01faa5c049b06ece95fab9","91824676e57e2d1c945918662b835813385cd291"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["9454a6510e2db155fb01faa5c049b06ece95fab9","91824676e57e2d1c945918662b835813385cd291"],"a3776dccca01c11e7046323cfad46a3b4a471233":["91824676e57e2d1c945918662b835813385cd291","8b5e0eebe355b14693e24007d721da78a79d8170"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["8b5e0eebe355b14693e24007d721da78a79d8170","11f75174865a8734695cd60a4093339a4e63fcbb"],"91824676e57e2d1c945918662b835813385cd291":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":[],"11f75174865a8734695cd60a4093339a4e63fcbb":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"8b5e0eebe355b14693e24007d721da78a79d8170":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","11f75174865a8734695cd60a4093339a4e63fcbb","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","a3776dccca01c11e7046323cfad46a3b4a471233","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"91824676e57e2d1c945918662b835813385cd291":["8b5e0eebe355b14693e24007d721da78a79d8170","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","91824676e57e2d1c945918662b835813385cd291"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}