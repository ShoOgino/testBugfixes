{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#sanityCheckAssertDoubles().mjava","commits":[{"id":"4c18a95e9168a30be855f5d5e7d61a863186fdc5","date":1415142581,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#sanityCheckAssertDoubles().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * test the test\n   */\n  private void sanityCheckAssertDoubles() {\n    assertDoubles(\"Null?\", null, null);\n    assertDoubles(\"big\", \n                  new Double(2.3005390038169265E9), \n                  new Double(2.300539003816927E9));\n    assertDoubles(\"small\", \n                  new Double(2.3005390038169265E-9), \n                  new Double(2.300539003816927E-9));\n    try {\n      assertDoubles(\"non-null\", null, 42);\n      fail(\"expected was null\");\n    } catch (AssertionError e) {}\n    try {\n      assertDoubles(\"non-null\", 42, null);\n      fail(\"actual was null\");\n    } catch (AssertionError e) {}\n    try {\n      assertDoubles(\"non-number\", 42, \"foo\");\n      fail(\"actual was non-number\");\n    } catch (AssertionError e) {}\n    try {\n      assertDoubles(\"diff\", \n                    new Double(2.3005390038169265E9), \n                    new Double(2.267272520100462E9));\n      fail(\"big & diff\");\n    } catch (AssertionError e) {}\n    try {\n      assertDoubles(\"diff\", \n                    new Double(2.3005390038169265E-9), \n                    new Double(2.267272520100462E-9));\n      fail(\"small & diff\");\n    } catch (AssertionError e) {}\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbdfda95da145c32af2267b537c92481acc7a522","date":1435597588,"type":4,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#sanityCheckAssertDoubles().mjava","sourceNew":null,"sourceOld":"  /**\n   * test the test\n   */\n  private void sanityCheckAssertDoubles() {\n    assertDoubles(\"Null?\", null, null);\n    assertDoubles(\"big\", \n                  new Double(2.3005390038169265E9), \n                  new Double(2.300539003816927E9));\n    assertDoubles(\"small\", \n                  new Double(2.3005390038169265E-9), \n                  new Double(2.300539003816927E-9));\n    try {\n      assertDoubles(\"non-null\", null, 42);\n      fail(\"expected was null\");\n    } catch (AssertionError e) {}\n    try {\n      assertDoubles(\"non-null\", 42, null);\n      fail(\"actual was null\");\n    } catch (AssertionError e) {}\n    try {\n      assertDoubles(\"non-number\", 42, \"foo\");\n      fail(\"actual was non-number\");\n    } catch (AssertionError e) {}\n    try {\n      assertDoubles(\"diff\", \n                    new Double(2.3005390038169265E9), \n                    new Double(2.267272520100462E9));\n      fail(\"big & diff\");\n    } catch (AssertionError e) {}\n    try {\n      assertDoubles(\"diff\", \n                    new Double(2.3005390038169265E-9), \n                    new Double(2.267272520100462E-9));\n      fail(\"small & diff\");\n    } catch (AssertionError e) {}\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c18a95e9168a30be855f5d5e7d61a863186fdc5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dbdfda95da145c32af2267b537c92481acc7a522":["4c18a95e9168a30be855f5d5e7d61a863186fdc5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dbdfda95da145c32af2267b537c92481acc7a522"]},"commit2Childs":{"4c18a95e9168a30be855f5d5e7d61a863186fdc5":["dbdfda95da145c32af2267b537c92481acc7a522"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c18a95e9168a30be855f5d5e7d61a863186fdc5"],"dbdfda95da145c32af2267b537c92481acc7a522":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}