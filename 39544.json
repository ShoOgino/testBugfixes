{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMemsetSize().mjava","commits":[{"id":"0e70d554d88e3aea4d497d35dc15dbb191a5d2bc","date":1524237108,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMemsetSize().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMemsetSize() throws Exception {\n    String expr = \"let(echo=\\\"b, c\\\",\" +\n        \"              a=memset(list(tuple(field1=val(1), field2=val(10)), tuple(field1=val(2), field2=val(20))), \" +\n        \"                       cols=\\\"field1, field2\\\", \" +\n        \"                       vars=\\\"f1, f2\\\",\" +\n        \"                       size=1),\" +\n        \"              b=add(f1),\" +\n        \"              c=add(f2))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),  1);\n    Number f1 = (Number)tuples.get(0).get(\"b\");\n    assertEquals(f1.doubleValue(), 1, 0.0);\n\n    Number f2 = (Number)tuples.get(0).get(\"c\");\n    assertEquals(f2.doubleValue(), 10, 0.0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16eed9af98b54bb6cee521e4828ab5c2b9cb0d31","date":1540236013,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMemsetSize().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMemsetSize().mjava","sourceNew":"  @Test\n  public void testMemsetSize() throws Exception {\n    String expr = \"let(echo=\\\"b, c\\\",\" +\n        \"              a=memset(plist(tuple(field1=val(1), field2=val(10)), tuple(field1=val(2), field2=val(20))), \" +\n        \"                       cols=\\\"field1, field2\\\", \" +\n        \"                       vars=\\\"f1, f2\\\",\" +\n        \"                       size=1),\" +\n        \"              b=add(f1),\" +\n        \"              c=add(f2))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),  1);\n    Number f1 = (Number)tuples.get(0).get(\"b\");\n    assertEquals(f1.doubleValue(), 1, 0.0);\n\n    Number f2 = (Number)tuples.get(0).get(\"c\");\n    assertEquals(f2.doubleValue(), 10, 0.0);\n  }\n\n","sourceOld":"  @Test\n  public void testMemsetSize() throws Exception {\n    String expr = \"let(echo=\\\"b, c\\\",\" +\n        \"              a=memset(list(tuple(field1=val(1), field2=val(10)), tuple(field1=val(2), field2=val(20))), \" +\n        \"                       cols=\\\"field1, field2\\\", \" +\n        \"                       vars=\\\"f1, f2\\\",\" +\n        \"                       size=1),\" +\n        \"              b=add(f1),\" +\n        \"              c=add(f2))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),  1);\n    Number f1 = (Number)tuples.get(0).get(\"b\");\n    assertEquals(f1.doubleValue(), 1, 0.0);\n\n    Number f2 = (Number)tuples.get(0).get(\"c\");\n    assertEquals(f2.doubleValue(), 10, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0e70d554d88e3aea4d497d35dc15dbb191a5d2bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"16eed9af98b54bb6cee521e4828ab5c2b9cb0d31":["0e70d554d88e3aea4d497d35dc15dbb191a5d2bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["16eed9af98b54bb6cee521e4828ab5c2b9cb0d31"]},"commit2Childs":{"0e70d554d88e3aea4d497d35dc15dbb191a5d2bc":["16eed9af98b54bb6cee521e4828ab5c2b9cb0d31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0e70d554d88e3aea4d497d35dc15dbb191a5d2bc"],"16eed9af98b54bb6cee521e4828ab5c2b9cb0d31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}