{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#StandardPostingsReader(Directory,SegmentInfo,IOContext,int).mjava","commits":[{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#StandardPostingsReader(Directory,SegmentInfo,IOContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#StandardPostingsReader(Directory,SegmentInfo,int,int).mjava","sourceNew":"  public StandardPostingsReader(Directory dir, SegmentInfo segmentInfo, IOContext context, int codecId) throws IOException {\n    freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, codecId, StandardCodec.FREQ_EXTENSION),\n                           context);\n    //this.segment = segmentInfo.name;\n    if (segmentInfo.getHasProx()) {\n      boolean success = false;\n      try {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, codecId, StandardCodec.PROX_EXTENSION),\n                               context);\n        success = true;\n      } finally {\n        if (!success) {\n          freqIn.close();\n        }\n      }\n    } else {\n      proxIn = null;\n    }\n  }\n\n","sourceOld":"  public StandardPostingsReader(Directory dir, SegmentInfo segmentInfo, int readBufferSize, int codecId) throws IOException {\n    freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, codecId, StandardCodec.FREQ_EXTENSION),\n                           readBufferSize);\n    //this.segment = segmentInfo.name;\n    if (segmentInfo.getHasProx()) {\n      boolean success = false;\n      try {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, codecId, StandardCodec.PROX_EXTENSION),\n                               readBufferSize);\n        success = true;\n      } finally {\n        if (!success) {\n          freqIn.close();\n        }\n      }\n    } else {\n      proxIn = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#StandardPostingsReader(Directory,SegmentInfo,IOContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#StandardPostingsReader(Directory,SegmentInfo,int,int).mjava","sourceNew":"  public StandardPostingsReader(Directory dir, SegmentInfo segmentInfo, IOContext context, int codecId) throws IOException {\n    freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, codecId, StandardCodec.FREQ_EXTENSION),\n                           context);\n    //this.segment = segmentInfo.name;\n    if (segmentInfo.getHasProx()) {\n      boolean success = false;\n      try {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, codecId, StandardCodec.PROX_EXTENSION),\n                               context);\n        success = true;\n      } finally {\n        if (!success) {\n          freqIn.close();\n        }\n      }\n    } else {\n      proxIn = null;\n    }\n  }\n\n","sourceOld":"  public StandardPostingsReader(Directory dir, SegmentInfo segmentInfo, int readBufferSize, int codecId) throws IOException {\n    freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, codecId, StandardCodec.FREQ_EXTENSION),\n                           readBufferSize);\n    //this.segment = segmentInfo.name;\n    if (segmentInfo.getHasProx()) {\n      boolean success = false;\n      try {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, codecId, StandardCodec.PROX_EXTENSION),\n                               readBufferSize);\n        success = true;\n      } finally {\n        if (!success) {\n          freqIn.close();\n        }\n      }\n    } else {\n      proxIn = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#StandardPostingsReader(Directory,SegmentInfo,IOContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#StandardPostingsReader(Directory,SegmentInfo,int,int).mjava","sourceNew":"  public StandardPostingsReader(Directory dir, SegmentInfo segmentInfo, IOContext context, int codecId) throws IOException {\n    freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, codecId, StandardCodec.FREQ_EXTENSION),\n                           context);\n    //this.segment = segmentInfo.name;\n    if (segmentInfo.getHasProx()) {\n      boolean success = false;\n      try {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, codecId, StandardCodec.PROX_EXTENSION),\n                               context);\n        success = true;\n      } finally {\n        if (!success) {\n          freqIn.close();\n        }\n      }\n    } else {\n      proxIn = null;\n    }\n  }\n\n","sourceOld":"  public StandardPostingsReader(Directory dir, SegmentInfo segmentInfo, int readBufferSize, int codecId) throws IOException {\n    freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, codecId, StandardCodec.FREQ_EXTENSION),\n                           readBufferSize);\n    //this.segment = segmentInfo.name;\n    if (segmentInfo.getHasProx()) {\n      boolean success = false;\n      try {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, codecId, StandardCodec.PROX_EXTENSION),\n                               readBufferSize);\n        success = true;\n      } finally {\n        if (!success) {\n          freqIn.close();\n        }\n      }\n    } else {\n      proxIn = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#StandardPostingsReader(Directory,SegmentInfo,IOContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#StandardPostingsReader(Directory,SegmentInfo,IOContext,int).mjava","sourceNew":"  public StandardPostingsReader(Directory dir, SegmentInfo segmentInfo, IOContext ioContext, int codecId) throws IOException {\n    freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, codecId, StandardCodec.FREQ_EXTENSION),\n                           ioContext);\n    // this.segment = segmentInfo.name;\n    if (segmentInfo.getHasProx()) {\n      boolean success = false;\n      try {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, codecId, StandardCodec.PROX_EXTENSION),\n                               ioContext);\n        success = true;\n      } finally {\n        if (!success) {\n          freqIn.close();\n        }\n      }\n    } else {\n      proxIn = null;\n    }\n  }\n\n","sourceOld":"  public StandardPostingsReader(Directory dir, SegmentInfo segmentInfo, IOContext context, int codecId) throws IOException {\n    freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, codecId, StandardCodec.FREQ_EXTENSION),\n                           context);\n    //this.segment = segmentInfo.name;\n    if (segmentInfo.getHasProx()) {\n      boolean success = false;\n      try {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, codecId, StandardCodec.PROX_EXTENSION),\n                               context);\n        success = true;\n      } finally {\n        if (!success) {\n          freqIn.close();\n        }\n      }\n    } else {\n      proxIn = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#StandardPostingsReader(Directory,SegmentInfo,IOContext,int).mjava","sourceNew":"  public Lucene40PostingsReader(Directory dir, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n    // this.segment = segmentInfo.name;\n    if (segmentInfo.getHasProx()) {\n      boolean success = false;\n      try {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                               ioContext);\n        success = true;\n      } finally {\n        if (!success) {\n          freqIn.close();\n        }\n      }\n    } else {\n      proxIn = null;\n    }\n  }\n\n","sourceOld":"  public StandardPostingsReader(Directory dir, SegmentInfo segmentInfo, IOContext ioContext, int codecId) throws IOException {\n    freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, codecId, StandardCodec.FREQ_EXTENSION),\n                           ioContext);\n    // this.segment = segmentInfo.name;\n    if (segmentInfo.getHasProx()) {\n      boolean success = false;\n      try {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, codecId, StandardCodec.PROX_EXTENSION),\n                               ioContext);\n        success = true;\n      } finally {\n        if (!success) {\n          freqIn.close();\n        }\n      }\n    } else {\n      proxIn = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":["dd5dd283c3d9f22e186699bf823c9d1e67f49152","dd5dd283c3d9f22e186699bf823c9d1e67f49152"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"7b91922b55d15444d554721b352861d028eb8278":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["7b91922b55d15444d554721b352861d028eb8278"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["60ba444201d2570214b6fcf1d15600dc1a01f548","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}