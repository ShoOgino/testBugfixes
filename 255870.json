{"path":"backwards/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}