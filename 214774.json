{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#deleteReaderReaderConflict(boolean).mjava","commits":[{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#deleteReaderReaderConflict(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n    Directory dir = newDirectory();\n\n    Term searchTerm1 = new Term(\"content\", \"aaa\");\n    Term searchTerm2 = new Term(\"content\", \"bbb\");\n    Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n    //  add 100 documents with term : aaa\n    //  add 100 documents with term : bbb\n    //  add 100 documents with term : ccc\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n        addDoc(writer, searchTerm1.text());\n        addDoc(writer, searchTerm2.text());\n        addDoc(writer, searchTerm3.text());\n    }\n    if(optimize)\n      writer.optimize();\n    writer.close();\n\n    // OPEN TWO READERS\n    // Both readers get segment info as exists at this time\n    IndexReader reader1 = IndexReader.open(dir, false);\n    assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n    assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n    assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n    IndexReader reader2 = IndexReader.open(dir, false);\n    assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n    assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n    assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n    assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n    assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n    assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n    // DELETE DOCS FROM READER 2 and CLOSE IT\n    // delete documents containing term: aaa\n    // when the reader is closed, the segment info is updated and\n    // the first reader is now stale\n    reader2.deleteDocuments(searchTerm1);\n    assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n    assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n    assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n    assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n    assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n    assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n    reader2.close();\n\n    // Make sure reader 1 is unchanged since it was open earlier\n    assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n    assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n    assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n    // ATTEMPT TO DELETE FROM STALE READER\n    // delete documents containing term: bbb\n    try {\n        reader1.deleteDocuments(searchTerm2);\n        fail(\"Delete allowed from a stale index reader\");\n    } catch (IOException e) {\n        /* success */\n    }\n\n    // RECREATE READER AND TRY AGAIN\n    reader1.close();\n    reader1 = IndexReader.open(dir, false);\n    assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n    assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n    assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n    reader1.deleteDocuments(searchTerm2);\n    assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n    assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n    assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n    reader1.close();\n\n    // Open another reader to confirm that everything is deleted\n    reader2 = IndexReader.open(dir, false);\n    assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n    assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n    assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n    reader2.close();\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#deleteReaderReaderConflict(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n    Directory dir = newDirectory();\n\n    Term searchTerm1 = new Term(\"content\", \"aaa\");\n    Term searchTerm2 = new Term(\"content\", \"bbb\");\n    Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n    //  add 100 documents with term : aaa\n    //  add 100 documents with term : bbb\n    //  add 100 documents with term : ccc\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n        addDoc(writer, searchTerm1.text());\n        addDoc(writer, searchTerm2.text());\n        addDoc(writer, searchTerm3.text());\n    }\n    if(optimize)\n      writer.optimize();\n    writer.close();\n\n    // OPEN TWO READERS\n    // Both readers get segment info as exists at this time\n    IndexReader reader1 = IndexReader.open(dir, false);\n    assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n    assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n    assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n    IndexReader reader2 = IndexReader.open(dir, false);\n    assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n    assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n    assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n    assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n    assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n    assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n    // DELETE DOCS FROM READER 2 and CLOSE IT\n    // delete documents containing term: aaa\n    // when the reader is closed, the segment info is updated and\n    // the first reader is now stale\n    reader2.deleteDocuments(searchTerm1);\n    assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n    assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n    assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n    assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n    assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n    assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n    reader2.close();\n\n    // Make sure reader 1 is unchanged since it was open earlier\n    assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n    assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n    assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n    // ATTEMPT TO DELETE FROM STALE READER\n    // delete documents containing term: bbb\n    try {\n        reader1.deleteDocuments(searchTerm2);\n        fail(\"Delete allowed from a stale index reader\");\n    } catch (IOException e) {\n        /* success */\n    }\n\n    // RECREATE READER AND TRY AGAIN\n    reader1.close();\n    reader1 = IndexReader.open(dir, false);\n    assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n    assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n    assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n    reader1.deleteDocuments(searchTerm2);\n    assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n    assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n    assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n    reader1.close();\n\n    // Open another reader to confirm that everything is deleted\n    reader2 = IndexReader.open(dir, false);\n    assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n    assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n    assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n    reader2.close();\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#deleteReaderReaderConflict(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n    Directory dir = newDirectory();\n\n    Term searchTerm1 = new Term(\"content\", \"aaa\");\n    Term searchTerm2 = new Term(\"content\", \"bbb\");\n    Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n    //  add 100 documents with term : aaa\n    //  add 100 documents with term : bbb\n    //  add 100 documents with term : ccc\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n        addDoc(writer, searchTerm1.text());\n        addDoc(writer, searchTerm2.text());\n        addDoc(writer, searchTerm3.text());\n    }\n    if(optimize)\n      writer.optimize();\n    writer.close();\n\n    // OPEN TWO READERS\n    // Both readers get segment info as exists at this time\n    IndexReader reader1 = IndexReader.open(dir, false);\n    assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n    assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n    assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n    IndexReader reader2 = IndexReader.open(dir, false);\n    assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n    assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n    assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n    assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n    assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n    assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n    // DELETE DOCS FROM READER 2 and CLOSE IT\n    // delete documents containing term: aaa\n    // when the reader is closed, the segment info is updated and\n    // the first reader is now stale\n    reader2.deleteDocuments(searchTerm1);\n    assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n    assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n    assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n    assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n    assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n    assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n    reader2.close();\n\n    // Make sure reader 1 is unchanged since it was open earlier\n    assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n    assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n    assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n    // ATTEMPT TO DELETE FROM STALE READER\n    // delete documents containing term: bbb\n    try {\n        reader1.deleteDocuments(searchTerm2);\n        fail(\"Delete allowed from a stale index reader\");\n    } catch (IOException e) {\n        /* success */\n    }\n\n    // RECREATE READER AND TRY AGAIN\n    reader1.close();\n    reader1 = IndexReader.open(dir, false);\n    assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n    assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n    assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n    reader1.deleteDocuments(searchTerm2);\n    assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n    assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n    assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n    reader1.close();\n\n    // Open another reader to confirm that everything is deleted\n    reader2 = IndexReader.open(dir, false);\n    assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n    assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n    assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n    reader2.close();\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#deleteReaderReaderConflict(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#deleteReaderReaderConflict(boolean).mjava","sourceNew":"  private void deleteReaderReaderConflict(boolean doFullMerge) throws IOException {\n    Directory dir = newDirectory();\n\n    Term searchTerm1 = new Term(\"content\", \"aaa\");\n    Term searchTerm2 = new Term(\"content\", \"bbb\");\n    Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n    //  add 100 documents with term : aaa\n    //  add 100 documents with term : bbb\n    //  add 100 documents with term : ccc\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n        addDoc(writer, searchTerm1.text());\n        addDoc(writer, searchTerm2.text());\n        addDoc(writer, searchTerm3.text());\n    }\n    if (doFullMerge) {\n      writer.forceMerge(1);\n    }\n    writer.close();\n\n    // OPEN TWO READERS\n    // Both readers get segment info as exists at this time\n    IndexReader reader1 = IndexReader.open(dir, false);\n    assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n    assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n    assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n    IndexReader reader2 = IndexReader.open(dir, false);\n    assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n    assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n    assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n    assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n    assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n    assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n    // DELETE DOCS FROM READER 2 and CLOSE IT\n    // delete documents containing term: aaa\n    // when the reader is closed, the segment info is updated and\n    // the first reader is now stale\n    reader2.deleteDocuments(searchTerm1);\n    assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n    assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n    assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n    assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n    assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n    assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n    reader2.close();\n\n    // Make sure reader 1 is unchanged since it was open earlier\n    assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n    assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n    assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n    // ATTEMPT TO DELETE FROM STALE READER\n    // delete documents containing term: bbb\n    try {\n        reader1.deleteDocuments(searchTerm2);\n        fail(\"Delete allowed from a stale index reader\");\n    } catch (IOException e) {\n        /* success */\n    }\n\n    // RECREATE READER AND TRY AGAIN\n    reader1.close();\n    reader1 = IndexReader.open(dir, false);\n    assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n    assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n    assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n    reader1.deleteDocuments(searchTerm2);\n    assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n    assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n    assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n    reader1.close();\n\n    // Open another reader to confirm that everything is deleted\n    reader2 = IndexReader.open(dir, false);\n    assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n    assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n    assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n    reader2.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n    Directory dir = newDirectory();\n\n    Term searchTerm1 = new Term(\"content\", \"aaa\");\n    Term searchTerm2 = new Term(\"content\", \"bbb\");\n    Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n    //  add 100 documents with term : aaa\n    //  add 100 documents with term : bbb\n    //  add 100 documents with term : ccc\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n        addDoc(writer, searchTerm1.text());\n        addDoc(writer, searchTerm2.text());\n        addDoc(writer, searchTerm3.text());\n    }\n    if(optimize)\n      writer.optimize();\n    writer.close();\n\n    // OPEN TWO READERS\n    // Both readers get segment info as exists at this time\n    IndexReader reader1 = IndexReader.open(dir, false);\n    assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n    assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n    assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n    IndexReader reader2 = IndexReader.open(dir, false);\n    assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n    assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n    assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n    assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n    assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n    assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n    // DELETE DOCS FROM READER 2 and CLOSE IT\n    // delete documents containing term: aaa\n    // when the reader is closed, the segment info is updated and\n    // the first reader is now stale\n    reader2.deleteDocuments(searchTerm1);\n    assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n    assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n    assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n    assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n    assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n    assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n    reader2.close();\n\n    // Make sure reader 1 is unchanged since it was open earlier\n    assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n    assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n    assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n    // ATTEMPT TO DELETE FROM STALE READER\n    // delete documents containing term: bbb\n    try {\n        reader1.deleteDocuments(searchTerm2);\n        fail(\"Delete allowed from a stale index reader\");\n    } catch (IOException e) {\n        /* success */\n    }\n\n    // RECREATE READER AND TRY AGAIN\n    reader1.close();\n    reader1 = IndexReader.open(dir, false);\n    assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n    assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n    assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n    reader1.deleteDocuments(searchTerm2);\n    assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n    assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n    assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n    reader1.close();\n\n    // Open another reader to confirm that everything is deleted\n    reader2 = IndexReader.open(dir, false);\n    assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n    assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n    assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n    reader2.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#deleteReaderReaderConflict(boolean).mjava","sourceNew":null,"sourceOld":"  private void deleteReaderReaderConflict(boolean doFullMerge) throws IOException {\n    Directory dir = newDirectory();\n\n    Term searchTerm1 = new Term(\"content\", \"aaa\");\n    Term searchTerm2 = new Term(\"content\", \"bbb\");\n    Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n    //  add 100 documents with term : aaa\n    //  add 100 documents with term : bbb\n    //  add 100 documents with term : ccc\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n        addDoc(writer, searchTerm1.text());\n        addDoc(writer, searchTerm2.text());\n        addDoc(writer, searchTerm3.text());\n    }\n    if (doFullMerge) {\n      writer.forceMerge(1);\n    }\n    writer.close();\n\n    // OPEN TWO READERS\n    // Both readers get segment info as exists at this time\n    IndexReader reader1 = IndexReader.open(dir, false);\n    assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n    assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n    assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n    IndexReader reader2 = IndexReader.open(dir, false);\n    assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n    assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n    assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n    assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n    assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n    assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n    // DELETE DOCS FROM READER 2 and CLOSE IT\n    // delete documents containing term: aaa\n    // when the reader is closed, the segment info is updated and\n    // the first reader is now stale\n    reader2.deleteDocuments(searchTerm1);\n    assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n    assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n    assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n    assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n    assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n    assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n    reader2.close();\n\n    // Make sure reader 1 is unchanged since it was open earlier\n    assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n    assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n    assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n    // ATTEMPT TO DELETE FROM STALE READER\n    // delete documents containing term: bbb\n    try {\n        reader1.deleteDocuments(searchTerm2);\n        fail(\"Delete allowed from a stale index reader\");\n    } catch (IOException e) {\n        /* success */\n    }\n\n    // RECREATE READER AND TRY AGAIN\n    reader1.close();\n    reader1 = IndexReader.open(dir, false);\n    assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n    assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n    assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n    reader1.deleteDocuments(searchTerm2);\n    assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n    assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n    assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n    reader1.close();\n\n    // Open another reader to confirm that everything is deleted\n    reader2 = IndexReader.open(dir, false);\n    assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n    assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n    assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n    reader2.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#deleteReaderReaderConflict(boolean).mjava","sourceNew":null,"sourceOld":"  private void deleteReaderReaderConflict(boolean doFullMerge) throws IOException {\n    Directory dir = newDirectory();\n\n    Term searchTerm1 = new Term(\"content\", \"aaa\");\n    Term searchTerm2 = new Term(\"content\", \"bbb\");\n    Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n    //  add 100 documents with term : aaa\n    //  add 100 documents with term : bbb\n    //  add 100 documents with term : ccc\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n        addDoc(writer, searchTerm1.text());\n        addDoc(writer, searchTerm2.text());\n        addDoc(writer, searchTerm3.text());\n    }\n    if (doFullMerge) {\n      writer.forceMerge(1);\n    }\n    writer.close();\n\n    // OPEN TWO READERS\n    // Both readers get segment info as exists at this time\n    IndexReader reader1 = IndexReader.open(dir, false);\n    assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n    assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n    assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n    IndexReader reader2 = IndexReader.open(dir, false);\n    assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n    assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n    assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n    assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n    assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n    assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n    // DELETE DOCS FROM READER 2 and CLOSE IT\n    // delete documents containing term: aaa\n    // when the reader is closed, the segment info is updated and\n    // the first reader is now stale\n    reader2.deleteDocuments(searchTerm1);\n    assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n    assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n    assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n    assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n    assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n    assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n    reader2.close();\n\n    // Make sure reader 1 is unchanged since it was open earlier\n    assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n    assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n    assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n    // ATTEMPT TO DELETE FROM STALE READER\n    // delete documents containing term: bbb\n    try {\n        reader1.deleteDocuments(searchTerm2);\n        fail(\"Delete allowed from a stale index reader\");\n    } catch (IOException e) {\n        /* success */\n    }\n\n    // RECREATE READER AND TRY AGAIN\n    reader1.close();\n    reader1 = IndexReader.open(dir, false);\n    assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n    assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n    assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n    reader1.deleteDocuments(searchTerm2);\n    assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n    assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n    assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n    reader1.close();\n\n    // Open another reader to confirm that everything is deleted\n    reader2 = IndexReader.open(dir, false);\n    assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n    assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n    assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n    reader2.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderDelete#deleteReaderReaderConflict(boolean).mjava","sourceNew":null,"sourceOld":"  private void deleteReaderReaderConflict(boolean doFullMerge) throws IOException {\n    Directory dir = newDirectory();\n\n    Term searchTerm1 = new Term(\"content\", \"aaa\");\n    Term searchTerm2 = new Term(\"content\", \"bbb\");\n    Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n    //  add 100 documents with term : aaa\n    //  add 100 documents with term : bbb\n    //  add 100 documents with term : ccc\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n        addDoc(writer, searchTerm1.text());\n        addDoc(writer, searchTerm2.text());\n        addDoc(writer, searchTerm3.text());\n    }\n    if (doFullMerge) {\n      writer.forceMerge(1);\n    }\n    writer.close();\n\n    // OPEN TWO READERS\n    // Both readers get segment info as exists at this time\n    IndexReader reader1 = IndexReader.open(dir, false);\n    assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n    assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n    assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n    IndexReader reader2 = IndexReader.open(dir, false);\n    assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n    assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n    assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n    assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n    assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n    assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n    // DELETE DOCS FROM READER 2 and CLOSE IT\n    // delete documents containing term: aaa\n    // when the reader is closed, the segment info is updated and\n    // the first reader is now stale\n    reader2.deleteDocuments(searchTerm1);\n    assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n    assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n    assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n    assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n    assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n    assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n    reader2.close();\n\n    // Make sure reader 1 is unchanged since it was open earlier\n    assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n    assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n    assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n    // ATTEMPT TO DELETE FROM STALE READER\n    // delete documents containing term: bbb\n    try {\n        reader1.deleteDocuments(searchTerm2);\n        fail(\"Delete allowed from a stale index reader\");\n    } catch (IOException e) {\n        /* success */\n    }\n\n    // RECREATE READER AND TRY AGAIN\n    reader1.close();\n    reader1 = IndexReader.open(dir, false);\n    assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n    assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n    assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n    reader1.deleteDocuments(searchTerm2);\n    assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n    assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n    assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n    assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n    assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n    assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n    reader1.close();\n\n    // Open another reader to confirm that everything is deleted\n    reader2 = IndexReader.open(dir, false);\n    assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n    assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n    assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n    reader2.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}