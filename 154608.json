{"path":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean).mjava","commits":[{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean).mjava","pathOld":"/dev/null","sourceNew":"    synchronized void release(SegmentReader sr, boolean drop) throws IOException {\n\n      final boolean pooled = readerMap.containsKey(sr.getSegmentInfo());\n\n      assert !pooled | readerMap.get(sr.getSegmentInfo()) == sr;\n\n      // Drop caller's ref\n      sr.decRef();\n\n      if (pooled && (drop || (!poolReaders && sr.getRefCount() == 1))) {\n\n        // We are the last ref to this reader; since we're\n        // not pooling readers, we release it:\n        readerMap.remove(sr.getSegmentInfo());\n\n        // TODO: java 5\n        // assert !sr.hasChanges || Thread.holdsLock(IndexWriter.this);\n\n        // Drop our ref -- this will commit any pending\n        // changes to the dir\n        boolean success = false;\n        try {\n          sr.close();\n          success = true;\n        } finally {\n          if (!success && sr.hasChanges) {\n            // Abandon the changes & retry closing:\n            sr.hasChanges = false;\n            try {\n              sr.close();\n            } catch (Throwable ignore) {\n              // Keep throwing original exception\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1085ea837da8f1e96697e17cf73e1d08e7329261"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f33fc116e28d7704378c9dd333711753bd0c9706","date":1248010179,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean).mjava","sourceNew":"    /**\n     * Release the segment reader (i.e. decRef it and close if there\n     * are no more references.\n     * @param sr\n     * @throws IOException\n     */\n    public synchronized void release(SegmentReader sr, boolean drop) throws IOException {\n\n      final boolean pooled = readerMap.containsKey(sr.getSegmentInfo());\n\n      assert !pooled | readerMap.get(sr.getSegmentInfo()) == sr;\n\n      // Drop caller's ref\n      sr.decRef();\n\n      if (pooled && (drop || (!poolReaders && sr.getRefCount() == 1))) {\n\n        // We are the last ref to this reader; since we're\n        // not pooling readers, we release it:\n        readerMap.remove(sr.getSegmentInfo());\n\n        // TODO: java 5\n        // assert !sr.hasChanges || Thread.holdsLock(IndexWriter.this);\n\n        // Drop our ref -- this will commit any pending\n        // changes to the dir\n        boolean success = false;\n        try {\n          sr.close();\n          success = true;\n        } finally {\n          if (!success && sr.hasChanges) {\n            // Abandon the changes & retry closing:\n            sr.hasChanges = false;\n            try {\n              sr.close();\n            } catch (Throwable ignore) {\n              // Keep throwing original exception\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    synchronized void release(SegmentReader sr, boolean drop) throws IOException {\n\n      final boolean pooled = readerMap.containsKey(sr.getSegmentInfo());\n\n      assert !pooled | readerMap.get(sr.getSegmentInfo()) == sr;\n\n      // Drop caller's ref\n      sr.decRef();\n\n      if (pooled && (drop || (!poolReaders && sr.getRefCount() == 1))) {\n\n        // We are the last ref to this reader; since we're\n        // not pooling readers, we release it:\n        readerMap.remove(sr.getSegmentInfo());\n\n        // TODO: java 5\n        // assert !sr.hasChanges || Thread.holdsLock(IndexWriter.this);\n\n        // Drop our ref -- this will commit any pending\n        // changes to the dir\n        boolean success = false;\n        try {\n          sr.close();\n          success = true;\n        } finally {\n          if (!success && sr.hasChanges) {\n            // Abandon the changes & retry closing:\n            sr.hasChanges = false;\n            try {\n              sr.close();\n            } catch (Throwable ignore) {\n              // Keep throwing original exception\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"68907d6beb9e6c97e3b8bd255eb9e6d009a232e3","date":1256689008,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean).mjava","sourceNew":"    /**\n     * Release the segment reader (i.e. decRef it and close if there\n     * are no more references.\n     * @param sr\n     * @throws IOException\n     */\n    public synchronized void release(SegmentReader sr, boolean drop) throws IOException {\n\n      final boolean pooled = readerMap.containsKey(sr.getSegmentInfo());\n\n      assert !pooled | readerMap.get(sr.getSegmentInfo()) == sr;\n\n      // Drop caller's ref\n      sr.decRef();\n\n      if (pooled && (drop || (!poolReaders && sr.getRefCount() == 1))) {\n\n        // We are the last ref to this reader; since we're\n        // not pooling readers, we release it:\n        readerMap.remove(sr.getSegmentInfo());\n\n        assert !sr.hasChanges || Thread.holdsLock(IndexWriter.this);\n\n        // Drop our ref -- this will commit any pending\n        // changes to the dir\n        boolean success = false;\n        try {\n          sr.close();\n          success = true;\n        } finally {\n          if (!success && sr.hasChanges) {\n            // Abandon the changes & retry closing:\n            sr.hasChanges = false;\n            try {\n              sr.close();\n            } catch (Throwable ignore) {\n              // Keep throwing original exception\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Release the segment reader (i.e. decRef it and close if there\n     * are no more references.\n     * @param sr\n     * @throws IOException\n     */\n    public synchronized void release(SegmentReader sr, boolean drop) throws IOException {\n\n      final boolean pooled = readerMap.containsKey(sr.getSegmentInfo());\n\n      assert !pooled | readerMap.get(sr.getSegmentInfo()) == sr;\n\n      // Drop caller's ref\n      sr.decRef();\n\n      if (pooled && (drop || (!poolReaders && sr.getRefCount() == 1))) {\n\n        // We are the last ref to this reader; since we're\n        // not pooling readers, we release it:\n        readerMap.remove(sr.getSegmentInfo());\n\n        // TODO: java 5\n        // assert !sr.hasChanges || Thread.holdsLock(IndexWriter.this);\n\n        // Drop our ref -- this will commit any pending\n        // changes to the dir\n        boolean success = false;\n        try {\n          sr.close();\n          success = true;\n        } finally {\n          if (!success && sr.hasChanges) {\n            // Abandon the changes & retry closing:\n            sr.hasChanges = false;\n            try {\n              sr.close();\n            } catch (Throwable ignore) {\n              // Keep throwing original exception\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["1085ea837da8f1e96697e17cf73e1d08e7329261"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5ce3c493909869d0de7bae1bd67d7b96a4f6f29","date":1268046506,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean).mjava","sourceNew":"    /**\n     * Release the segment reader (i.e. decRef it and close if there\n     * are no more references.\n     * @param sr\n     * @throws IOException\n     */\n    public synchronized void release(SegmentReader sr, boolean drop) throws IOException {\n\n      final boolean pooled = readerMap.containsKey(sr.getSegmentInfo());\n\n      assert !pooled | readerMap.get(sr.getSegmentInfo()) == sr;\n\n      // Drop caller's ref; for an external reader (not\n      // pooled), this decRef will close it\n      sr.decRef();\n\n      if (pooled && (drop || (!poolReaders && sr.getRefCount() == 1))) {\n\n        // We are the last ref to this reader; since we're\n        // not pooling readers, we release it:\n        readerMap.remove(sr.getSegmentInfo());\n\n        assert !sr.hasChanges || Thread.holdsLock(IndexWriter.this);\n\n        // Drop our ref -- this will commit any pending\n        // changes to the dir\n        boolean success = false;\n        try {\n          sr.close();\n          success = true;\n        } finally {\n          if (!success && sr.hasChanges) {\n            // Abandon the changes & retry closing:\n            sr.hasChanges = false;\n            try {\n              sr.close();\n            } catch (Throwable ignore) {\n              // Keep throwing original exception\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Release the segment reader (i.e. decRef it and close if there\n     * are no more references.\n     * @param sr\n     * @throws IOException\n     */\n    public synchronized void release(SegmentReader sr, boolean drop) throws IOException {\n\n      final boolean pooled = readerMap.containsKey(sr.getSegmentInfo());\n\n      assert !pooled | readerMap.get(sr.getSegmentInfo()) == sr;\n\n      // Drop caller's ref\n      sr.decRef();\n\n      if (pooled && (drop || (!poolReaders && sr.getRefCount() == 1))) {\n\n        // We are the last ref to this reader; since we're\n        // not pooling readers, we release it:\n        readerMap.remove(sr.getSegmentInfo());\n\n        assert !sr.hasChanges || Thread.holdsLock(IndexWriter.this);\n\n        // Drop our ref -- this will commit any pending\n        // changes to the dir\n        boolean success = false;\n        try {\n          sr.close();\n          success = true;\n        } finally {\n          if (!success && sr.hasChanges) {\n            // Abandon the changes & retry closing:\n            sr.hasChanges = false;\n            try {\n              sr.close();\n            } catch (Throwable ignore) {\n              // Keep throwing original exception\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(SegmentReader,boolean).mjava","sourceNew":"    /**\n     * Release the segment reader (i.e. decRef it and close if there\n     * are no more references.\n     * @param sr\n     * @throws IOException\n     */\n    public synchronized void release(SegmentReader sr, boolean drop) throws IOException {\n\n      final boolean pooled = readerMap.containsKey(sr.getSegmentInfo());\n\n      assert !pooled | readerMap.get(sr.getSegmentInfo()) == sr;\n\n      // Drop caller's ref; for an external reader (not\n      // pooled), this decRef will close it\n      sr.decRef();\n\n      if (pooled && (drop || (!poolReaders && sr.getRefCount() == 1))) {\n\n        // We are the last ref to this reader; since we're\n        // not pooling readers, we release it:\n        readerMap.remove(sr.getSegmentInfo());\n\n        assert !sr.hasChanges || Thread.holdsLock(IndexWriter.this);\n\n        // Drop our ref -- this will commit any pending\n        // changes to the dir\n        boolean success = false;\n        try {\n          sr.close();\n          success = true;\n        } finally {\n          if (!success && sr.hasChanges) {\n            // Abandon the changes & retry closing:\n            sr.hasChanges = false;\n            try {\n              sr.close();\n            } catch (Throwable ignore) {\n              // Keep throwing original exception\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Release the segment reader (i.e. decRef it and close if there\n     * are no more references.\n     * @param sr\n     * @throws IOException\n     */\n    public synchronized void release(SegmentReader sr, boolean drop) throws IOException {\n\n      final boolean pooled = readerMap.containsKey(sr.getSegmentInfo());\n\n      assert !pooled | readerMap.get(sr.getSegmentInfo()) == sr;\n\n      // Drop caller's ref; for an external reader (not\n      // pooled), this decRef will close it\n      sr.decRef();\n\n      if (pooled && (drop || (!poolReaders && sr.getRefCount() == 1))) {\n\n        // We are the last ref to this reader; since we're\n        // not pooling readers, we release it:\n        readerMap.remove(sr.getSegmentInfo());\n\n        assert !sr.hasChanges || Thread.holdsLock(IndexWriter.this);\n\n        // Drop our ref -- this will commit any pending\n        // changes to the dir\n        boolean success = false;\n        try {\n          sr.close();\n          success = true;\n        } finally {\n          if (!success && sr.hasChanges) {\n            // Abandon the changes & retry closing:\n            sr.hasChanges = false;\n            try {\n              sr.close();\n            } catch (Throwable ignore) {\n              // Keep throwing original exception\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"68907d6beb9e6c97e3b8bd255eb9e6d009a232e3":["f33fc116e28d7704378c9dd333711753bd0c9706"],"f33fc116e28d7704378c9dd333711753bd0c9706":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"a5ce3c493909869d0de7bae1bd67d7b96a4f6f29":["68907d6beb9e6c97e3b8bd255eb9e6d009a232e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4ff8864209d2e972cb4393600c26082f9a6533d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a5ce3c493909869d0de7bae1bd67d7b96a4f6f29"]},"commit2Childs":{"68907d6beb9e6c97e3b8bd255eb9e6d009a232e3":["a5ce3c493909869d0de7bae1bd67d7b96a4f6f29"],"f33fc116e28d7704378c9dd333711753bd0c9706":["68907d6beb9e6c97e3b8bd255eb9e6d009a232e3"],"a5ce3c493909869d0de7bae1bd67d7b96a4f6f29":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["f33fc116e28d7704378c9dd333711753bd0c9706"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}