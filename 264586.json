{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  // note: this might not be the most efficient... but its fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    // write the ordinals as a binary field\n    addBinaryField(field, new Iterable<BytesRef>() {\n      @Override\n      public Iterator<BytesRef> iterator() {\n        return new SortedSetIterator(docToOrdCount.iterator(), ords.iterator());\n      }\n    });\n      \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","sourceOld":"  // note: this might not be the most efficient... but its fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    // write the ordinals as a binary field\n    addBinaryField(field, new Iterable<BytesRef>() {\n      @Override\n      public Iterator<BytesRef> iterator() {\n        return new SortedSetIterator(docToOrdCount.iterator(), ords.iterator());\n      }\n    });\n      \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2daae254c28b627693692fbf8f14d2f36c3591c1","date":1409582110,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  // note: this might not be the most efficient... but its fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    assert field.getDocValuesGen() == -1;\n    // write the ordinals as a binary field\n    addBinaryField(field, new Iterable<BytesRef>() {\n      @Override\n      public Iterator<BytesRef> iterator() {\n        return new SortedSetIterator(docToOrdCount.iterator(), ords.iterator());\n      }\n    });\n      \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","sourceOld":"  // note: this might not be the most efficient... but its fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    // write the ordinals as a binary field\n    addBinaryField(field, new Iterable<BytesRef>() {\n      @Override\n      public Iterator<BytesRef> iterator() {\n        return new SortedSetIterator(docToOrdCount.iterator(), ords.iterator());\n      }\n    });\n      \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  // note: this might not be the most efficient... but its fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    assert field.getDocValuesGen() == -1;\n    // write the ordinals as a binary field\n    addBinaryField(field, new Iterable<BytesRef>() {\n      @Override\n      public Iterator<BytesRef> iterator() {\n        return new SortedSetIterator(docToOrdCount.iterator(), ords.iterator());\n      }\n    });\n      \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","sourceOld":"  // note: this might not be the most efficient... but its fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    // write the ordinals as a binary field\n    addBinaryField(field, new Iterable<BytesRef>() {\n      @Override\n      public Iterator<BytesRef> iterator() {\n        return new SortedSetIterator(docToOrdCount.iterator(), ords.iterator());\n      }\n    });\n      \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":null,"sourceOld":"  // note: this might not be the most efficient... but its fairly simple\n  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    assert field.getDocValuesGen() == -1;\n    // write the ordinals as a binary field\n    addBinaryField(field, new Iterable<BytesRef>() {\n      @Override\n      public Iterator<BytesRef> iterator() {\n        return new SortedSetIterator(docToOrdCount.iterator(), ords.iterator());\n      }\n    });\n      \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2daae254c28b627693692fbf8f14d2f36c3591c1"],"2daae254c28b627693692fbf8f14d2f36c3591c1":["4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["2daae254c28b627693692fbf8f14d2f36c3591c1"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2daae254c28b627693692fbf8f14d2f36c3591c1":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}