{"path":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#getMergeReaders().mjava","commits":[{"id":"4d9aa91d3fdd25528bac3b2e6115d54fc2f28753","date":1416999434,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#getMergeReaders().mjava","pathOld":"/dev/null","sourceNew":"        @Override\n        public List<LeafReader> getMergeReaders() throws IOException {\n          if (parallelReaders == null) {\n            parallelReaders = new ArrayList<>();\n            for (LeafReader reader : super.getMergeReaders()) {\n              parallelReaders.add(getCurrentReader(reader, schemaGen));\n            }\n          }\n\n          return parallelReaders;\n        }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"505bff044e47a553f461b6f4484d1d08faf4ac85","date":1420728783,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#getMergeReaders().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#getMergeReaders().mjava","sourceNew":"        @Override\n        public List<CodecReader> getMergeReaders() throws IOException {\n          if (parallelReaders == null) {\n            parallelReaders = new ArrayList<>();\n            for (CodecReader reader : super.getMergeReaders()) {\n              parallelReaders.add(getCurrentReader((SegmentReader)reader, schemaGen));\n            }\n          }\n\n          // TODO: fix ParallelLeafReader, if this is a good use case\n          List<CodecReader> mergeReaders = new ArrayList<>();\n          for (LeafReader reader : parallelReaders) {\n            mergeReaders.add(SlowCodecReaderWrapper.wrap(reader));\n          }\n          return mergeReaders;\n        }\n\n","sourceOld":"        @Override\n        public List<LeafReader> getMergeReaders() throws IOException {\n          if (parallelReaders == null) {\n            parallelReaders = new ArrayList<>();\n            for (LeafReader reader : super.getMergeReaders()) {\n              parallelReaders.add(getCurrentReader(reader, schemaGen));\n            }\n          }\n\n          return parallelReaders;\n        }\n\n","bugFix":["4d9aa91d3fdd25528bac3b2e6115d54fc2f28753"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#getMergeReaders().mjava","sourceNew":null,"sourceOld":"        @Override\n        public List<CodecReader> getMergeReaders() throws IOException {\n          if (parallelReaders == null) {\n            parallelReaders = new ArrayList<>();\n            for (CodecReader reader : super.getMergeReaders()) {\n              parallelReaders.add(getCurrentReader((SegmentReader)reader, schemaGen));\n            }\n          }\n\n          // TODO: fix ParallelLeafReader, if this is a good use case\n          List<CodecReader> mergeReaders = new ArrayList<>();\n          for (LeafReader reader : parallelReaders) {\n            mergeReaders.add(SlowCodecReaderWrapper.wrap(reader));\n          }\n          return mergeReaders;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#getMergeReaders().mjava","sourceNew":null,"sourceOld":"        @Override\n        public List<CodecReader> getMergeReaders() throws IOException {\n          if (parallelReaders == null) {\n            parallelReaders = new ArrayList<>();\n            for (CodecReader reader : super.getMergeReaders()) {\n              parallelReaders.add(getCurrentReader((SegmentReader)reader, schemaGen));\n            }\n          }\n\n          // TODO: fix ParallelLeafReader, if this is a good use case\n          List<CodecReader> mergeReaders = new ArrayList<>();\n          for (LeafReader reader : parallelReaders) {\n            mergeReaders.add(SlowCodecReaderWrapper.wrap(reader));\n          }\n          return mergeReaders;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#getMergeReaders().mjava","sourceNew":null,"sourceOld":"        @Override\n        public List<CodecReader> getMergeReaders() throws IOException {\n          if (parallelReaders == null) {\n            parallelReaders = new ArrayList<>();\n            for (CodecReader reader : super.getMergeReaders()) {\n              parallelReaders.add(getCurrentReader((SegmentReader)reader, schemaGen));\n            }\n          }\n\n          // TODO: fix ParallelLeafReader, if this is a good use case\n          List<CodecReader> mergeReaders = new ArrayList<>();\n          for (LeafReader reader : parallelReaders) {\n            mergeReaders.add(SlowCodecReaderWrapper.wrap(reader));\n          }\n          return mergeReaders;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#getMergeReaders().mjava","sourceNew":null,"sourceOld":"        @Override\n        public List<CodecReader> getMergeReaders() throws IOException {\n          if (parallelReaders == null) {\n            parallelReaders = new ArrayList<>();\n            for (CodecReader reader : super.getMergeReaders()) {\n              parallelReaders.add(getCurrentReader((SegmentReader)reader, schemaGen));\n            }\n          }\n\n          // TODO: fix ParallelLeafReader, if this is a good use case\n          List<CodecReader> mergeReaders = new ArrayList<>();\n          for (LeafReader reader : parallelReaders) {\n            mergeReaders.add(SlowCodecReaderWrapper.wrap(reader));\n          }\n          return mergeReaders;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#getMergeReaders().mjava","sourceNew":null,"sourceOld":"        @Override\n        public List<CodecReader> getMergeReaders() throws IOException {\n          if (parallelReaders == null) {\n            parallelReaders = new ArrayList<>();\n            for (CodecReader reader : super.getMergeReaders()) {\n              parallelReaders.add(getCurrentReader((SegmentReader)reader, schemaGen));\n            }\n          }\n\n          // TODO: fix ParallelLeafReader, if this is a good use case\n          List<CodecReader> mergeReaders = new ArrayList<>();\n          for (LeafReader reader : parallelReaders) {\n            mergeReaders.add(SlowCodecReaderWrapper.wrap(reader));\n          }\n          return mergeReaders;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d9aa91d3fdd25528bac3b2e6115d54fc2f28753":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["505bff044e47a553f461b6f4484d1d08faf4ac85","3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["505bff044e47a553f461b6f4484d1d08faf4ac85","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["4d9aa91d3fdd25528bac3b2e6115d54fc2f28753"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["505bff044e47a553f461b6f4484d1d08faf4ac85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["505bff044e47a553f461b6f4484d1d08faf4ac85","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"4d9aa91d3fdd25528bac3b2e6115d54fc2f28753":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d9aa91d3fdd25528bac3b2e6115d54fc2f28753"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}