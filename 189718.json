{"path":"lucene/src/test/org/apache/lucene/store/TestCopyBytes#testCopyBytesWithThreads().mjava","commits":[{"id":"d99afa1c46b08bf4cb2d9a791ea5f5e0391d6cac","date":1319817415,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestCopyBytes#testCopyBytesWithThreads().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-3541\n  public void testCopyBytesWithThreads() throws Exception {\n    int datalen = _TestUtil.nextInt(random, 101, 10000);\n    byte data[] = new byte[datalen];\n    random.nextBytes(data);\n    \n    Directory d = newDirectory();\n    IndexOutput output = d.createOutput(\"data\", IOContext.DEFAULT);\n    output.writeBytes(data, 0, datalen);\n    output.close();\n    \n    IndexInput input = d.openInput(\"data\", IOContext.DEFAULT);\n    IndexOutput outputHeader = d.createOutput(\"header\", IOContext.DEFAULT);\n    // copy our 100-byte header\n    input.copyBytes(outputHeader, 100);\n    outputHeader.close();\n    \n    // now make N copies of the remaining bytes\n    CopyThread copies[] = new CopyThread[10];\n    for (int i = 0; i < copies.length; i++) {\n      copies[i] = new CopyThread((IndexInput) input.clone(), d.createOutput(\"copy\" + i, IOContext.DEFAULT));\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].start();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].join();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      IndexInput copiedData = d.openInput(\"copy\" + i, IOContext.DEFAULT);\n      byte[] dataCopy = new byte[datalen];\n      System.arraycopy(data, 0, dataCopy, 0, 100); // copy the header for easy testing\n      copiedData.readBytes(dataCopy, 100, datalen-100);\n      assertArrayEquals(data, dataCopy);\n      copiedData.close();\n    }\n    input.close();\n    d.close();\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["66ad5d52334c6be735b490059924589a69b97bd6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestCopyBytes#testCopyBytesWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestCopyBytes#testCopyBytesWithThreads().mjava","sourceNew":"  // LUCENE-3541\n  public void testCopyBytesWithThreads() throws Exception {\n    int datalen = _TestUtil.nextInt(random, 101, 10000);\n    byte data[] = new byte[datalen];\n    random.nextBytes(data);\n    \n    Directory d = newDirectory();\n    IndexOutput output = d.createOutput(\"data\", IOContext.DEFAULT);\n    output.writeBytes(data, 0, datalen);\n    output.close();\n    \n    IndexInput input = d.openInput(\"data\", IOContext.DEFAULT);\n    IndexOutput outputHeader = d.createOutput(\"header\", IOContext.DEFAULT);\n    // copy our 100-byte header\n    input.copyBytes(outputHeader, 100);\n    outputHeader.close();\n    \n    // now make N copies of the remaining bytes\n    CopyThread copies[] = new CopyThread[10];\n    for (int i = 0; i < copies.length; i++) {\n      copies[i] = new CopyThread((IndexInput) input.clone(), d.createOutput(\"copy\" + i, IOContext.DEFAULT));\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].start();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].join();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      IndexInput copiedData = d.openInput(\"copy\" + i, IOContext.DEFAULT);\n      byte[] dataCopy = new byte[datalen];\n      System.arraycopy(data, 0, dataCopy, 0, 100); // copy the header for easy testing\n      copiedData.readBytes(dataCopy, 100, datalen-100);\n      assertArrayEquals(data, dataCopy);\n      copiedData.close();\n    }\n    input.close();\n    d.close();\n    \n  }\n\n","sourceOld":"  // LUCENE-3541\n  public void testCopyBytesWithThreads() throws Exception {\n    int datalen = _TestUtil.nextInt(random, 101, 10000);\n    byte data[] = new byte[datalen];\n    random.nextBytes(data);\n    \n    Directory d = newDirectory();\n    IndexOutput output = d.createOutput(\"data\", IOContext.DEFAULT);\n    output.writeBytes(data, 0, datalen);\n    output.close();\n    \n    IndexInput input = d.openInput(\"data\", IOContext.DEFAULT);\n    IndexOutput outputHeader = d.createOutput(\"header\", IOContext.DEFAULT);\n    // copy our 100-byte header\n    input.copyBytes(outputHeader, 100);\n    outputHeader.close();\n    \n    // now make N copies of the remaining bytes\n    CopyThread copies[] = new CopyThread[10];\n    for (int i = 0; i < copies.length; i++) {\n      copies[i] = new CopyThread((IndexInput) input.clone(), d.createOutput(\"copy\" + i, IOContext.DEFAULT));\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].start();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].join();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      IndexInput copiedData = d.openInput(\"copy\" + i, IOContext.DEFAULT);\n      byte[] dataCopy = new byte[datalen];\n      System.arraycopy(data, 0, dataCopy, 0, 100); // copy the header for easy testing\n      copiedData.readBytes(dataCopy, 100, datalen-100);\n      assertArrayEquals(data, dataCopy);\n      copiedData.close();\n    }\n    input.close();\n    d.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d99afa1c46b08bf4cb2d9a791ea5f5e0391d6cac"],"d99afa1c46b08bf4cb2d9a791ea5f5e0391d6cac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d99afa1c46b08bf4cb2d9a791ea5f5e0391d6cac":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d99afa1c46b08bf4cb2d9a791ea5f5e0391d6cac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}