{"path":"solr/core/src/test/org/apache/solr/response/TestGraphMLResponseWriter#testGraphMLOutput().mjava","commits":[{"id":"54d17c38a2ec6cf529776157e201d539c5c0ff2f","date":1462480579,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestGraphMLResponseWriter#testGraphMLOutput().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGraphMLOutput() throws Exception {\n    SolrQueryRequest request = req(\"blah\", \"blah\"); // Just need a request to attach the stream and traversal to.\n    SolrQueryResponse response = new SolrQueryResponse();\n    Map context = request.getContext();\n    TupleStream stream = new TestStream(); //Simulates a GatherNodesStream\n    Traversal traversal = new Traversal();\n    context.put(\"traversal\", traversal);\n    context.put(\"stream\", stream);\n    StringWriter writer = new StringWriter();\n\n    GraphMLResponseWriter graphMLResponseWriter = new GraphMLResponseWriter();\n    graphMLResponseWriter.write(writer, request, response);\n    String graphML = writer.toString();\n\n    //Validate the nodes\n    String error = h.validateXPath(graphML,\n                                   \"//graph/node[1][@id ='bill']\",\n                                   \"//graph/node[2][@id ='jim']\",\n                                   \"//graph/node[3][@id ='max']\");\n    if(error != null) {\n      throw new Exception(error);\n    }\n    //Validate the edges\n    error = h.validateXPath(graphML,\n                            \"//graph/edge[1][@source ='jim']\",\n                            \"//graph/edge[1][@target ='bill']\",\n                            \"//graph/edge[2][@source ='max']\",\n                            \"//graph/edge[2][@target ='bill']\",\n                            \"//graph/edge[3][@source ='max']\",\n                            \"//graph/edge[3][@target ='jim']\",\n                            \"//graph/edge[4][@source ='jim']\",\n                            \"//graph/edge[4][@target ='max']\"\n        );\n\n    if(error != null) {\n      throw new Exception(error);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79728e71d79579147b18f43e27a36e34be4986e2","date":1462480538,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestGraphMLResponseWriter#testGraphMLOutput().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGraphMLOutput() throws Exception {\n    SolrQueryRequest request = req(\"blah\", \"blah\"); // Just need a request to attach the stream and traversal to.\n    SolrQueryResponse response = new SolrQueryResponse();\n    Map context = request.getContext();\n    TupleStream stream = new TestStream(); //Simulates a GatherNodesStream\n    Traversal traversal = new Traversal();\n    context.put(\"traversal\", traversal);\n    context.put(\"stream\", stream);\n    StringWriter writer = new StringWriter();\n\n    GraphMLResponseWriter graphMLResponseWriter = new GraphMLResponseWriter();\n    graphMLResponseWriter.write(writer, request, response);\n    String graphML = writer.toString();\n\n    //Validate the nodes\n    String error = h.validateXPath(graphML,\n                                   \"//graph/node[1][@id ='bill']\",\n                                   \"//graph/node[2][@id ='jim']\",\n                                   \"//graph/node[3][@id ='max']\");\n    if(error != null) {\n      throw new Exception(error);\n    }\n    //Validate the edges\n    error = h.validateXPath(graphML,\n                            \"//graph/edge[1][@source ='jim']\",\n                            \"//graph/edge[1][@target ='bill']\",\n                            \"//graph/edge[2][@source ='max']\",\n                            \"//graph/edge[2][@target ='bill']\",\n                            \"//graph/edge[3][@source ='max']\",\n                            \"//graph/edge[3][@target ='jim']\",\n                            \"//graph/edge[4][@source ='jim']\",\n                            \"//graph/edge[4][@target ='max']\"\n        );\n\n    if(error != null) {\n      throw new Exception(error);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestGraphMLResponseWriter#testGraphMLOutput().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGraphMLOutput() throws Exception {\n    SolrQueryRequest request = req(\"blah\", \"blah\"); // Just need a request to attach the stream and traversal to.\n    SolrQueryResponse response = new SolrQueryResponse();\n    Map context = request.getContext();\n    TupleStream stream = new TestStream(); //Simulates a GatherNodesStream\n    Traversal traversal = new Traversal();\n    context.put(\"traversal\", traversal);\n    context.put(\"stream\", stream);\n    StringWriter writer = new StringWriter();\n\n    GraphMLResponseWriter graphMLResponseWriter = new GraphMLResponseWriter();\n    graphMLResponseWriter.write(writer, request, response);\n    String graphML = writer.toString();\n\n    //Validate the nodes\n    String error = h.validateXPath(graphML,\n                                   \"//graph/node[1][@id ='bill']\",\n                                   \"//graph/node[2][@id ='jim']\",\n                                   \"//graph/node[3][@id ='max']\");\n    if(error != null) {\n      throw new Exception(error);\n    }\n    //Validate the edges\n    error = h.validateXPath(graphML,\n                            \"//graph/edge[1][@source ='jim']\",\n                            \"//graph/edge[1][@target ='bill']\",\n                            \"//graph/edge[2][@source ='max']\",\n                            \"//graph/edge[2][@target ='bill']\",\n                            \"//graph/edge[3][@source ='max']\",\n                            \"//graph/edge[3][@target ='jim']\",\n                            \"//graph/edge[4][@source ='jim']\",\n                            \"//graph/edge[4][@target ='max']\"\n        );\n\n    if(error != null) {\n      throw new Exception(error);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestGraphMLResponseWriter#testGraphMLOutput().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGraphMLOutput() throws Exception {\n    SolrQueryRequest request = req(\"blah\", \"blah\"); // Just need a request to attach the stream and traversal to.\n    SolrQueryResponse response = new SolrQueryResponse();\n    Map context = request.getContext();\n    TupleStream stream = new TestStream(); //Simulates a GatherNodesStream\n    Traversal traversal = new Traversal();\n    context.put(\"traversal\", traversal);\n    context.put(\"stream\", stream);\n    StringWriter writer = new StringWriter();\n\n    GraphMLResponseWriter graphMLResponseWriter = new GraphMLResponseWriter();\n    graphMLResponseWriter.write(writer, request, response);\n    String graphML = writer.toString();\n\n    //Validate the nodes\n    String error = h.validateXPath(graphML,\n                                   \"//graph/node[1][@id ='bill']\",\n                                   \"//graph/node[2][@id ='jim']\",\n                                   \"//graph/node[3][@id ='max']\");\n    if(error != null) {\n      throw new Exception(error);\n    }\n    //Validate the edges\n    error = h.validateXPath(graphML,\n                            \"//graph/edge[1][@source ='jim']\",\n                            \"//graph/edge[1][@target ='bill']\",\n                            \"//graph/edge[2][@source ='max']\",\n                            \"//graph/edge[2][@target ='bill']\",\n                            \"//graph/edge[3][@source ='max']\",\n                            \"//graph/edge[3][@target ='jim']\",\n                            \"//graph/edge[4][@source ='jim']\",\n                            \"//graph/edge[4][@target ='max']\"\n        );\n\n    if(error != null) {\n      throw new Exception(error);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dd6cf7e1b30a14801c9e290183b875c6801bbe9","date":1591734817,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestGraphMLResponseWriter#testGraphMLOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestGraphMLResponseWriter#testGraphMLOutput().mjava","sourceNew":"  @Test\n  public void testGraphMLOutput() throws Exception {\n    SolrQueryRequest request = req(\"blah\", \"blah\"); // Just need a request to attach the stream and traversal to.\n    SolrQueryResponse response = new SolrQueryResponse();\n    Map context = request.getContext();\n    TupleStream stream = new TestStream(); //Simulates a GatherNodesStream\n    Traversal traversal = new Traversal();\n    context.put(\"traversal\", traversal);\n    context.put(\"stream\", stream);\n    StringWriter writer = new StringWriter();\n\n    GraphMLResponseWriter graphMLResponseWriter = new GraphMLResponseWriter();\n    graphMLResponseWriter.write(writer, request, response);\n    String graphML = writer.toString();\n\n    //Validate the nodes\n    String error = BaseTestHarness.validateXPath(graphML,\n                                   \"//graph/node[1][@id ='bill']\",\n                                   \"//graph/node[2][@id ='jim']\",\n                                   \"//graph/node[3][@id ='max']\");\n    if(error != null) {\n      throw new Exception(error);\n    }\n    //Validate the edges\n    error = BaseTestHarness.validateXPath(graphML,\n                            \"//graph/edge[1][@source ='jim']\",\n                            \"//graph/edge[1][@target ='bill']\",\n                            \"//graph/edge[2][@source ='max']\",\n                            \"//graph/edge[2][@target ='bill']\",\n                            \"//graph/edge[3][@source ='max']\",\n                            \"//graph/edge[3][@target ='jim']\",\n                            \"//graph/edge[4][@source ='jim']\",\n                            \"//graph/edge[4][@target ='max']\"\n        );\n\n    if(error != null) {\n      throw new Exception(error);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testGraphMLOutput() throws Exception {\n    SolrQueryRequest request = req(\"blah\", \"blah\"); // Just need a request to attach the stream and traversal to.\n    SolrQueryResponse response = new SolrQueryResponse();\n    Map context = request.getContext();\n    TupleStream stream = new TestStream(); //Simulates a GatherNodesStream\n    Traversal traversal = new Traversal();\n    context.put(\"traversal\", traversal);\n    context.put(\"stream\", stream);\n    StringWriter writer = new StringWriter();\n\n    GraphMLResponseWriter graphMLResponseWriter = new GraphMLResponseWriter();\n    graphMLResponseWriter.write(writer, request, response);\n    String graphML = writer.toString();\n\n    //Validate the nodes\n    String error = h.validateXPath(graphML,\n                                   \"//graph/node[1][@id ='bill']\",\n                                   \"//graph/node[2][@id ='jim']\",\n                                   \"//graph/node[3][@id ='max']\");\n    if(error != null) {\n      throw new Exception(error);\n    }\n    //Validate the edges\n    error = h.validateXPath(graphML,\n                            \"//graph/edge[1][@source ='jim']\",\n                            \"//graph/edge[1][@target ='bill']\",\n                            \"//graph/edge[2][@source ='max']\",\n                            \"//graph/edge[2][@target ='bill']\",\n                            \"//graph/edge[3][@source ='max']\",\n                            \"//graph/edge[3][@target ='jim']\",\n                            \"//graph/edge[4][@source ='jim']\",\n                            \"//graph/edge[4][@target ='max']\"\n        );\n\n    if(error != null) {\n      throw new Exception(error);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestGraphMLResponseWriter#testGraphMLOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestGraphMLResponseWriter#testGraphMLOutput().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testGraphMLOutput() throws Exception {\n    SolrQueryRequest request = req(\"blah\", \"blah\"); // Just need a request to attach the stream and traversal to.\n    @SuppressWarnings({\"rawtypes\"})\n    SolrQueryResponse response = new SolrQueryResponse();\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = request.getContext();\n    TupleStream stream = new TestStream(); //Simulates a GatherNodesStream\n    Traversal traversal = new Traversal();\n    context.put(\"traversal\", traversal);\n    context.put(\"stream\", stream);\n    StringWriter writer = new StringWriter();\n\n    GraphMLResponseWriter graphMLResponseWriter = new GraphMLResponseWriter();\n    graphMLResponseWriter.write(writer, request, response);\n    String graphML = writer.toString();\n\n    //Validate the nodes\n    String error = BaseTestHarness.validateXPath(graphML,\n                                   \"//graph/node[1][@id ='bill']\",\n                                   \"//graph/node[2][@id ='jim']\",\n                                   \"//graph/node[3][@id ='max']\");\n    if(error != null) {\n      throw new Exception(error);\n    }\n    //Validate the edges\n    error = BaseTestHarness.validateXPath(graphML,\n                            \"//graph/edge[1][@source ='jim']\",\n                            \"//graph/edge[1][@target ='bill']\",\n                            \"//graph/edge[2][@source ='max']\",\n                            \"//graph/edge[2][@target ='bill']\",\n                            \"//graph/edge[3][@source ='max']\",\n                            \"//graph/edge[3][@target ='jim']\",\n                            \"//graph/edge[4][@source ='jim']\",\n                            \"//graph/edge[4][@target ='max']\"\n        );\n\n    if(error != null) {\n      throw new Exception(error);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testGraphMLOutput() throws Exception {\n    SolrQueryRequest request = req(\"blah\", \"blah\"); // Just need a request to attach the stream and traversal to.\n    SolrQueryResponse response = new SolrQueryResponse();\n    Map context = request.getContext();\n    TupleStream stream = new TestStream(); //Simulates a GatherNodesStream\n    Traversal traversal = new Traversal();\n    context.put(\"traversal\", traversal);\n    context.put(\"stream\", stream);\n    StringWriter writer = new StringWriter();\n\n    GraphMLResponseWriter graphMLResponseWriter = new GraphMLResponseWriter();\n    graphMLResponseWriter.write(writer, request, response);\n    String graphML = writer.toString();\n\n    //Validate the nodes\n    String error = BaseTestHarness.validateXPath(graphML,\n                                   \"//graph/node[1][@id ='bill']\",\n                                   \"//graph/node[2][@id ='jim']\",\n                                   \"//graph/node[3][@id ='max']\");\n    if(error != null) {\n      throw new Exception(error);\n    }\n    //Validate the edges\n    error = BaseTestHarness.validateXPath(graphML,\n                            \"//graph/edge[1][@source ='jim']\",\n                            \"//graph/edge[1][@target ='bill']\",\n                            \"//graph/edge[2][@source ='max']\",\n                            \"//graph/edge[2][@target ='bill']\",\n                            \"//graph/edge[3][@source ='max']\",\n                            \"//graph/edge[3][@target ='jim']\",\n                            \"//graph/edge[4][@source ='jim']\",\n                            \"//graph/edge[4][@target ='max']\"\n        );\n\n    if(error != null) {\n      throw new Exception(error);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9dd6cf7e1b30a14801c9e290183b875c6801bbe9":["79728e71d79579147b18f43e27a36e34be4986e2"],"54d17c38a2ec6cf529776157e201d539c5c0ff2f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","79728e71d79579147b18f43e27a36e34be4986e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"79728e71d79579147b18f43e27a36e34be4986e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","54d17c38a2ec6cf529776157e201d539c5c0ff2f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","79728e71d79579147b18f43e27a36e34be4986e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["9dd6cf7e1b30a14801c9e290183b875c6801bbe9"]},"commit2Childs":{"9dd6cf7e1b30a14801c9e290183b875c6801bbe9":["e98520789adb1d5ad05afb4956eca0944a929688"],"54d17c38a2ec6cf529776157e201d539c5c0ff2f":["79728e71d79579147b18f43e27a36e34be4986e2"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54d17c38a2ec6cf529776157e201d539c5c0ff2f","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","79728e71d79579147b18f43e27a36e34be4986e2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"79728e71d79579147b18f43e27a36e34be4986e2":["9dd6cf7e1b30a14801c9e290183b875c6801bbe9","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}