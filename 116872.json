{"path":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTermination#testEarlyTermination().mjava","commits":[{"id":"4305a0063043df22166bf031d1d46b512f6beba4","date":1363885450,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTermination#testEarlyTermination().mjava","pathOld":"/dev/null","sourceNew":"  public void testEarlyTermination() throws IOException {\n    final int iters = atLeast(5);\n    final IndexReader reader = writer.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    for (int i = 0; i < iters; ++i) {\n      final Collector collector = new Collector() {\n\n        final boolean outOfOrder = random().nextBoolean();\n        boolean collectionTerminated = true;\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertFalse(collectionTerminated);\n          if (rarely()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collectionTerminated = false;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return outOfOrder;\n        }\n\n      };\n\n      searcher.search(new MatchAllDocsQuery(), collector);\n    }\n    reader.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b4ff8b67434bfbd297b9c539c0901323981a54a","date":1363886969,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTermination#testEarlyTermination().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTermination#testEarlyTermination().mjava","sourceNew":"  public void testEarlyTermination() throws IOException {\n    final int iters = atLeast(5);\n    final IndexReader reader = writer.getReader();\n\n    for (int i = 0; i < iters; ++i) {\n      final IndexSearcher searcher = newSearcher(reader);\n      final Collector collector = new Collector() {\n\n        final boolean outOfOrder = random().nextBoolean();\n        boolean collectionTerminated = true;\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertFalse(collectionTerminated);\n          if (rarely()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collectionTerminated = false;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return outOfOrder;\n        }\n\n      };\n\n      searcher.search(new MatchAllDocsQuery(), collector);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testEarlyTermination() throws IOException {\n    final int iters = atLeast(5);\n    final IndexReader reader = writer.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    for (int i = 0; i < iters; ++i) {\n      final Collector collector = new Collector() {\n\n        final boolean outOfOrder = random().nextBoolean();\n        boolean collectionTerminated = true;\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertFalse(collectionTerminated);\n          if (rarely()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collectionTerminated = false;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return outOfOrder;\n        }\n\n      };\n\n      searcher.search(new MatchAllDocsQuery(), collector);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d1c249f01722fe2de6d60de2f0aade417fbb638","date":1365517193,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTermination#testEarlyTermination().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTermination#testEarlyTermination().mjava","sourceNew":"  public void testEarlyTermination() throws IOException {\n    final int iters = atLeast(5);\n    final IndexReader reader = writer.getReader();\n\n    for (int i = 0; i < iters; ++i) {\n      final IndexSearcher searcher = newSearcher(reader);\n      final Collector collector = new Collector() {\n\n        final boolean outOfOrder = random().nextBoolean();\n        boolean collectionTerminated = true;\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertFalse(collectionTerminated);\n          if (rarely()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          if (random().nextBoolean()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          } else {\n            collectionTerminated = false;\n          }\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return outOfOrder;\n        }\n\n      };\n\n      searcher.search(new MatchAllDocsQuery(), collector);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testEarlyTermination() throws IOException {\n    final int iters = atLeast(5);\n    final IndexReader reader = writer.getReader();\n\n    for (int i = 0; i < iters; ++i) {\n      final IndexSearcher searcher = newSearcher(reader);\n      final Collector collector = new Collector() {\n\n        final boolean outOfOrder = random().nextBoolean();\n        boolean collectionTerminated = true;\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertFalse(collectionTerminated);\n          if (rarely()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collectionTerminated = false;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return outOfOrder;\n        }\n\n      };\n\n      searcher.search(new MatchAllDocsQuery(), collector);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTermination#testEarlyTermination().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTermination#testEarlyTermination().mjava","sourceNew":"  public void testEarlyTermination() throws IOException {\n    final int iters = atLeast(5);\n    final IndexReader reader = writer.getReader();\n\n    for (int i = 0; i < iters; ++i) {\n      final IndexSearcher searcher = newSearcher(reader);\n      final Collector collector = new SimpleCollector() {\n\n        final boolean outOfOrder = random().nextBoolean();\n        boolean collectionTerminated = true;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertFalse(collectionTerminated);\n          if (rarely()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n          if (random().nextBoolean()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          } else {\n            collectionTerminated = false;\n          }\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return outOfOrder;\n        }\n\n      };\n\n      searcher.search(new MatchAllDocsQuery(), collector);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testEarlyTermination() throws IOException {\n    final int iters = atLeast(5);\n    final IndexReader reader = writer.getReader();\n\n    for (int i = 0; i < iters; ++i) {\n      final IndexSearcher searcher = newSearcher(reader);\n      final Collector collector = new Collector() {\n\n        final boolean outOfOrder = random().nextBoolean();\n        boolean collectionTerminated = true;\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertFalse(collectionTerminated);\n          if (rarely()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          if (random().nextBoolean()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          } else {\n            collectionTerminated = false;\n          }\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return outOfOrder;\n        }\n\n      };\n\n      searcher.search(new MatchAllDocsQuery(), collector);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTermination#testEarlyTermination().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTermination#testEarlyTermination().mjava","sourceNew":"  public void testEarlyTermination() throws IOException {\n    final int iters = atLeast(5);\n    final IndexReader reader = writer.getReader();\n\n    for (int i = 0; i < iters; ++i) {\n      final IndexSearcher searcher = newSearcher(reader);\n      final Collector collector = new SimpleCollector() {\n\n        final boolean outOfOrder = random().nextBoolean();\n        boolean collectionTerminated = true;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertFalse(collectionTerminated);\n          if (rarely()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n          if (random().nextBoolean()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          } else {\n            collectionTerminated = false;\n          }\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return outOfOrder;\n        }\n\n      };\n\n      searcher.search(new MatchAllDocsQuery(), collector);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testEarlyTermination() throws IOException {\n    final int iters = atLeast(5);\n    final IndexReader reader = writer.getReader();\n\n    for (int i = 0; i < iters; ++i) {\n      final IndexSearcher searcher = newSearcher(reader);\n      final Collector collector = new Collector() {\n\n        final boolean outOfOrder = random().nextBoolean();\n        boolean collectionTerminated = true;\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertFalse(collectionTerminated);\n          if (rarely()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          if (random().nextBoolean()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          } else {\n            collectionTerminated = false;\n          }\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return outOfOrder;\n        }\n\n      };\n\n      searcher.search(new MatchAllDocsQuery(), collector);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTermination#testEarlyTermination().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTermination#testEarlyTermination().mjava","sourceNew":"  public void testEarlyTermination() throws IOException {\n    final int iters = atLeast(5);\n    final IndexReader reader = writer.getReader();\n\n    for (int i = 0; i < iters; ++i) {\n      final IndexSearcher searcher = newSearcher(reader);\n      final Collector collector = new SimpleCollector() {\n\n        final boolean outOfOrder = random().nextBoolean();\n        boolean collectionTerminated = true;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertFalse(collectionTerminated);\n          if (rarely()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          if (random().nextBoolean()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          } else {\n            collectionTerminated = false;\n          }\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return outOfOrder;\n        }\n\n      };\n\n      searcher.search(new MatchAllDocsQuery(), collector);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testEarlyTermination() throws IOException {\n    final int iters = atLeast(5);\n    final IndexReader reader = writer.getReader();\n\n    for (int i = 0; i < iters; ++i) {\n      final IndexSearcher searcher = newSearcher(reader);\n      final Collector collector = new SimpleCollector() {\n\n        final boolean outOfOrder = random().nextBoolean();\n        boolean collectionTerminated = true;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertFalse(collectionTerminated);\n          if (rarely()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n          if (random().nextBoolean()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          } else {\n            collectionTerminated = false;\n          }\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return outOfOrder;\n        }\n\n      };\n\n      searcher.search(new MatchAllDocsQuery(), collector);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTermination#testEarlyTermination().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTermination#testEarlyTermination().mjava","sourceNew":"  public void testEarlyTermination() throws IOException {\n    final int iters = atLeast(5);\n    final IndexReader reader = writer.getReader();\n\n    for (int i = 0; i < iters; ++i) {\n      final IndexSearcher searcher = newSearcher(reader);\n      final Collector collector = new SimpleCollector() {\n\n        boolean collectionTerminated = true;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertFalse(collectionTerminated);\n          if (rarely()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          if (random().nextBoolean()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          } else {\n            collectionTerminated = false;\n          }\n        }\n\n      };\n\n      searcher.search(new MatchAllDocsQuery(), collector);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testEarlyTermination() throws IOException {\n    final int iters = atLeast(5);\n    final IndexReader reader = writer.getReader();\n\n    for (int i = 0; i < iters; ++i) {\n      final IndexSearcher searcher = newSearcher(reader);\n      final Collector collector = new SimpleCollector() {\n\n        final boolean outOfOrder = random().nextBoolean();\n        boolean collectionTerminated = true;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertFalse(collectionTerminated);\n          if (rarely()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          if (random().nextBoolean()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          } else {\n            collectionTerminated = false;\n          }\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return outOfOrder;\n        }\n\n      };\n\n      searcher.search(new MatchAllDocsQuery(), collector);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTermination#testEarlyTermination().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTermination#testEarlyTermination().mjava","sourceNew":"  public void testEarlyTermination() throws IOException {\n    final int iters = atLeast(5);\n    final IndexReader reader = writer.getReader();\n\n    for (int i = 0; i < iters; ++i) {\n      final IndexSearcher searcher = newSearcher(reader);\n      final Collector collector = new SimpleCollector() {\n\n        boolean collectionTerminated = true;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertFalse(collectionTerminated);\n          if (rarely()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          if (random().nextBoolean()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          } else {\n            collectionTerminated = false;\n          }\n        }\n        \n        @Override\n        public boolean needsScores() {\n          return false;\n        }\n      };\n\n      searcher.search(new MatchAllDocsQuery(), collector);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testEarlyTermination() throws IOException {\n    final int iters = atLeast(5);\n    final IndexReader reader = writer.getReader();\n\n    for (int i = 0; i < iters; ++i) {\n      final IndexSearcher searcher = newSearcher(reader);\n      final Collector collector = new SimpleCollector() {\n\n        boolean collectionTerminated = true;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertFalse(collectionTerminated);\n          if (rarely()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          if (random().nextBoolean()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          } else {\n            collectionTerminated = false;\n          }\n        }\n\n      };\n\n      searcher.search(new MatchAllDocsQuery(), collector);\n    }\n    reader.close();\n  }\n\n","bugFix":["4305a0063043df22166bf031d1d46b512f6beba4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTermination#testEarlyTermination().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTermination#testEarlyTermination().mjava","sourceNew":"  public void testEarlyTermination() throws IOException {\n    final int iters = atLeast(5);\n    final IndexReader reader = writer.getReader();\n\n    for (int i = 0; i < iters; ++i) {\n      final IndexSearcher searcher = newSearcher(reader);\n      final Collector collector = new SimpleCollector() {\n\n        boolean collectionTerminated = true;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertFalse(collectionTerminated);\n          if (rarely()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          if (random().nextBoolean()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          } else {\n            collectionTerminated = false;\n          }\n        }\n        \n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n      };\n\n      searcher.search(new MatchAllDocsQuery(), collector);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testEarlyTermination() throws IOException {\n    final int iters = atLeast(5);\n    final IndexReader reader = writer.getReader();\n\n    for (int i = 0; i < iters; ++i) {\n      final IndexSearcher searcher = newSearcher(reader);\n      final Collector collector = new SimpleCollector() {\n\n        boolean collectionTerminated = true;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertFalse(collectionTerminated);\n          if (rarely()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          if (random().nextBoolean()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          } else {\n            collectionTerminated = false;\n          }\n        }\n        \n        @Override\n        public boolean needsScores() {\n          return false;\n        }\n      };\n\n      searcher.search(new MatchAllDocsQuery(), collector);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTermination#testEarlyTermination().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTermination#testEarlyTermination().mjava","sourceNew":"  public void testEarlyTermination() throws IOException {\n    final int iters = atLeast(5);\n    final IndexReader reader = writer.getReader();\n\n    for (int i = 0; i < iters; ++i) {\n      final IndexSearcher searcher = newSearcher(reader);\n      final Collector collector = new SimpleCollector() {\n\n        boolean collectionTerminated = true;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertFalse(collectionTerminated);\n          if (rarely()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          if (random().nextBoolean()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          } else {\n            collectionTerminated = false;\n          }\n        }\n        \n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n      };\n\n      searcher.search(new MatchAllDocsQuery(), collector);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testEarlyTermination() throws IOException {\n    final int iters = atLeast(5);\n    final IndexReader reader = writer.getReader();\n\n    for (int i = 0; i < iters; ++i) {\n      final IndexSearcher searcher = newSearcher(reader);\n      final Collector collector = new SimpleCollector() {\n\n        boolean collectionTerminated = true;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertFalse(collectionTerminated);\n          if (rarely()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          }\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          if (random().nextBoolean()) {\n            collectionTerminated = true;\n            throw new CollectionTerminatedException();\n          } else {\n            collectionTerminated = false;\n          }\n        }\n        \n        @Override\n        public boolean needsScores() {\n          return false;\n        }\n      };\n\n      searcher.search(new MatchAllDocsQuery(), collector);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"781239fc84d36be12b84e4d3e2618f5f07a182e3":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["4d1c249f01722fe2de6d60de2f0aade417fbb638","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["4d1c249f01722fe2de6d60de2f0aade417fbb638"],"4d1c249f01722fe2de6d60de2f0aade417fbb638":["1b4ff8b67434bfbd297b9c539c0901323981a54a"],"1b4ff8b67434bfbd297b9c539c0901323981a54a":["4305a0063043df22166bf031d1d46b512f6beba4"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["ae73da626f97850c922c42736f808d0378e165f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"4305a0063043df22166bf031d1d46b512f6beba4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"417142ff08fda9cf0b72d5133e63097a166c6458":["781239fc84d36be12b84e4d3e2618f5f07a182e3","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"781239fc84d36be12b84e4d3e2618f5f07a182e3":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4305a0063043df22166bf031d1d46b512f6beba4"],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"4d1c249f01722fe2de6d60de2f0aade417fbb638":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"1b4ff8b67434bfbd297b9c539c0901323981a54a":["4d1c249f01722fe2de6d60de2f0aade417fbb638"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"4305a0063043df22166bf031d1d46b512f6beba4":["1b4ff8b67434bfbd297b9c539c0901323981a54a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}