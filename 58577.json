{"path":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#createFieldNameSelector(SolrResourceLoader,IndexSchema,Set[String],Set[String],Collection[String],Collection[Pattern],FieldNameSelector).mjava","commits":[{"id":"be9a5d1846ac0beb625ba68da060e16119d9f51e","date":1328820081,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#createFieldNameSelector(SolrResourceLoader,IndexSchema,Set[String],Set[String],Collection[String],Collection[Pattern],FieldNameSelector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Utility method that can be used to define a FieldNameSelector\n   * using the same types of rules as the FieldMutatingUpdateProcessor init \n   * code.  This may be useful for Factories that wish to define default \n   * selectors in similar terms to what the configuration would look like.\n   * @lucene.internal\n   */\n  public static FieldNameSelector createFieldNameSelector\n    (final SolrResourceLoader loader,\n     final IndexSchema schema,\n     final Set<String> fields,\n     final Set<String> typeNames,\n     final Collection<String> typeClasses,\n     final Collection<Pattern> regexes,\n     final FieldNameSelector defSelector) {\n    \n    final Collection<Class> classes \n      = new ArrayList<Class>(typeClasses.size());\n    \n    for (String t : typeClasses) {\n      try {\n        classes.add(loader.findClass(t));\n      } catch (Exception e) {\n        throw new SolrException(SERVER_ERROR,\n                                \"Can't resolve typeClass: \" + t, e);\n      }\n    }\n    \n    if (classes.isEmpty() && \n        typeNames.isEmpty() && \n        regexes.isEmpty() && \n        fields.isEmpty()) {\n      return defSelector;\n    }\n    \n    return new ConfigurableFieldNameSelector\n      (schema, fields, typeNames, classes, regexes); \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","date":1334628185,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#createFieldNameSelector(SolrResourceLoader,IndexSchema,Set[String],Set[String],Collection[String],Collection[Pattern],FieldNameSelector).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#createFieldNameSelector(SolrResourceLoader,IndexSchema,Set[String],Set[String],Collection[String],Collection[Pattern],FieldNameSelector).mjava","sourceNew":"  /**\n   * Utility method that can be used to define a FieldNameSelector\n   * using the same types of rules as the FieldMutatingUpdateProcessor init \n   * code.  This may be useful for Factories that wish to define default \n   * selectors in similar terms to what the configuration would look like.\n   * @lucene.internal\n   */\n  public static FieldNameSelector createFieldNameSelector\n    (final SolrResourceLoader loader,\n     final IndexSchema schema,\n     final Set<String> fields,\n     final Set<String> typeNames,\n     final Collection<String> typeClasses,\n     final Collection<Pattern> regexes,\n     final FieldNameSelector defSelector) {\n    \n    final Collection<Class> classes \n      = new ArrayList<Class>(typeClasses.size());\n    \n    for (String t : typeClasses) {\n      try {\n        classes.add(loader.findClass(t, Object.class));\n      } catch (Exception e) {\n        throw new SolrException(SERVER_ERROR,\n                                \"Can't resolve typeClass: \" + t, e);\n      }\n    }\n    \n    if (classes.isEmpty() && \n        typeNames.isEmpty() && \n        regexes.isEmpty() && \n        fields.isEmpty()) {\n      return defSelector;\n    }\n    \n    return new ConfigurableFieldNameSelector\n      (schema, fields, typeNames, classes, regexes); \n  }\n\n","sourceOld":"  /**\n   * Utility method that can be used to define a FieldNameSelector\n   * using the same types of rules as the FieldMutatingUpdateProcessor init \n   * code.  This may be useful for Factories that wish to define default \n   * selectors in similar terms to what the configuration would look like.\n   * @lucene.internal\n   */\n  public static FieldNameSelector createFieldNameSelector\n    (final SolrResourceLoader loader,\n     final IndexSchema schema,\n     final Set<String> fields,\n     final Set<String> typeNames,\n     final Collection<String> typeClasses,\n     final Collection<Pattern> regexes,\n     final FieldNameSelector defSelector) {\n    \n    final Collection<Class> classes \n      = new ArrayList<Class>(typeClasses.size());\n    \n    for (String t : typeClasses) {\n      try {\n        classes.add(loader.findClass(t));\n      } catch (Exception e) {\n        throw new SolrException(SERVER_ERROR,\n                                \"Can't resolve typeClass: \" + t, e);\n      }\n    }\n    \n    if (classes.isEmpty() && \n        typeNames.isEmpty() && \n        regexes.isEmpty() && \n        fields.isEmpty()) {\n      return defSelector;\n    }\n    \n    return new ConfigurableFieldNameSelector\n      (schema, fields, typeNames, classes, regexes); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#createFieldNameSelector(SolrResourceLoader,SolrCore,Set[String],Set[String],Collection[String],Collection[Pattern],FieldNameSelector).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/FieldMutatingUpdateProcessor#createFieldNameSelector(SolrResourceLoader,IndexSchema,Set[String],Set[String],Collection[String],Collection[Pattern],FieldNameSelector).mjava","sourceNew":"  /**\n   * Utility method that can be used to define a FieldNameSelector\n   * using the same types of rules as the FieldMutatingUpdateProcessor init \n   * code.  This may be useful for Factories that wish to define default \n   * selectors in similar terms to what the configuration would look like.\n   * @lucene.internal\n   */\n  public static FieldNameSelector createFieldNameSelector\n    (final SolrResourceLoader loader,\n     final SolrCore core,\n     final Set<String> fields,\n     final Set<String> typeNames,\n     final Collection<String> typeClasses,\n     final Collection<Pattern> regexes,\n     final FieldNameSelector defSelector) {\n    \n    final Collection<Class> classes \n      = new ArrayList<Class>(typeClasses.size());\n    \n    for (String t : typeClasses) {\n      try {\n        classes.add(loader.findClass(t, Object.class));\n      } catch (Exception e) {\n        throw new SolrException(SERVER_ERROR,\n                                \"Can't resolve typeClass: \" + t, e);\n      }\n    }\n    \n    if (classes.isEmpty() && \n        typeNames.isEmpty() && \n        regexes.isEmpty() && \n        fields.isEmpty()) {\n      return defSelector;\n    }\n    \n    return new ConfigurableFieldNameSelector(core, fields, typeNames, classes, regexes); \n  }\n\n","sourceOld":"  /**\n   * Utility method that can be used to define a FieldNameSelector\n   * using the same types of rules as the FieldMutatingUpdateProcessor init \n   * code.  This may be useful for Factories that wish to define default \n   * selectors in similar terms to what the configuration would look like.\n   * @lucene.internal\n   */\n  public static FieldNameSelector createFieldNameSelector\n    (final SolrResourceLoader loader,\n     final IndexSchema schema,\n     final Set<String> fields,\n     final Set<String> typeNames,\n     final Collection<String> typeClasses,\n     final Collection<Pattern> regexes,\n     final FieldNameSelector defSelector) {\n    \n    final Collection<Class> classes \n      = new ArrayList<Class>(typeClasses.size());\n    \n    for (String t : typeClasses) {\n      try {\n        classes.add(loader.findClass(t, Object.class));\n      } catch (Exception e) {\n        throw new SolrException(SERVER_ERROR,\n                                \"Can't resolve typeClass: \" + t, e);\n      }\n    }\n    \n    if (classes.isEmpty() && \n        typeNames.isEmpty() && \n        regexes.isEmpty() && \n        fields.isEmpty()) {\n      return defSelector;\n    }\n    \n    return new ConfigurableFieldNameSelector\n      (schema, fields, typeNames, classes, regexes); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be9a5d1846ac0beb625ba68da060e16119d9f51e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["be9a5d1846ac0beb625ba68da060e16119d9f51e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08970e5b8411182a29412c177eff67ec1110095b"],"08970e5b8411182a29412c177eff67ec1110095b":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"]},"commit2Childs":{"be9a5d1846ac0beb625ba68da060e16119d9f51e":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be9a5d1846ac0beb625ba68da060e16119d9f51e"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["08970e5b8411182a29412c177eff67ec1110095b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"08970e5b8411182a29412c177eff67ec1110095b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}