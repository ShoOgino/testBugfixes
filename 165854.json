{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testTaxonomyReaderRefreshRaces().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testTaxonomyReaderRefreshRaces().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testTaxonomyReaderRefreshRaces().mjava","sourceNew":"  /**\n   * Test that getParentArrays is valid when retrieved during refresh\n   */\n  @Test\n  @Ignore\n  public void testTaxonomyReaderRefreshRaces() throws Exception {\n    // compute base child arrays - after first chunk, and after the other\n    Directory indexDirBase =  newDirectory();\n    TaxonomyWriter twBase = new DirectoryTaxonomyWriter(indexDirBase);\n    twBase.addCategory(new CategoryPath(\"a\", \"0\"));\n    final CategoryPath abPath = new CategoryPath(\"a\", \"b\");\n    twBase.addCategory(abPath);\n    twBase.commit();\n    TaxonomyReader trBase = new DirectoryTaxonomyReader(indexDirBase);\n\n    final ChildrenArrays ca1 = trBase.getChildrenArrays();\n    \n    final int abOrd = trBase.getOrdinal(abPath);\n    final int abYoungChildBase1 = ca1.getYoungestChildArray()[abOrd]; \n    \n    for (int i=0; i < 1<<10; i++) { //1024 facets\n      twBase.addCategory(new CategoryPath(\"a\", \"b\", Integer.toString(i)));\n    }\n    twBase.commit();\n    \n    trBase.refresh();\n    \n    final ChildrenArrays ca2 = trBase.getChildrenArrays();\n    final int abYoungChildBase2 = ca2.getYoungestChildArray()[abOrd];\n    \n    for (int retry=0; retry<100; retry++) {\n      assertConsistentYoungestChild(abPath, abOrd, abYoungChildBase1,  abYoungChildBase2, retry);\n    }\n    indexDirBase.close();\n  }\n\n","sourceOld":"  /**\n   * Test that getParentArrays is valid when retrieved during refresh\n   */\n  @Test\n  @Ignore\n  public void testTaxonomyReaderRefreshRaces() throws Exception {\n    // compute base child arrays - after first chunk, and after the other\n    Directory indexDirBase =  newDirectory();\n    TaxonomyWriter twBase = new DirectoryTaxonomyWriter(indexDirBase);\n    twBase.addCategory(new CategoryPath(\"a\", \"0\"));\n    final CategoryPath abPath = new CategoryPath(\"a\", \"b\");\n    twBase.addCategory(abPath);\n    twBase.commit();\n    TaxonomyReader trBase = new DirectoryTaxonomyReader(indexDirBase);\n\n    final ChildrenArrays ca1 = trBase.getChildrenArrays();\n    \n    final int abOrd = trBase.getOrdinal(abPath);\n    final int abYoungChildBase1 = ca1.getYoungestChildArray()[abOrd]; \n    \n    for (int i=0; i < 1<<10; i++) { //1024 facets\n      twBase.addCategory(new CategoryPath(\"a\", \"b\", Integer.toString(i)));\n    }\n    twBase.commit();\n    \n    trBase.refresh();\n    \n    final ChildrenArrays ca2 = trBase.getChildrenArrays();\n    final int abYoungChildBase2 = ca2.getYoungestChildArray()[abOrd];\n    \n    for (int retry=0; retry<100; retry++) {\n      assertConsistentYoungestChild(abPath, abOrd, abYoungChildBase1,  abYoungChildBase2, retry);\n    }\n    indexDirBase.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1","date":1353511594,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testTaxonomyReaderRefreshRaces().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testTaxonomyReaderRefreshRaces().mjava","sourceNew":"  // Test that getParentArrays is valid when retrieved during refresh\n  @Test\n  public void testTaxonomyReaderRefreshRaces() throws Exception {\n    // compute base child arrays - after first chunk, and after the other\n    Directory indexDirBase = newDirectory();\n    TaxonomyWriter twBase = new DirectoryTaxonomyWriter(indexDirBase);\n    twBase.addCategory(new CategoryPath(\"a\", \"0\"));\n    final CategoryPath abPath = new CategoryPath(\"a\", \"b\");\n    twBase.addCategory(abPath);\n    twBase.commit();\n    TaxonomyReader trBase = new DirectoryTaxonomyReader(indexDirBase);\n\n    final ChildrenArrays ca1 = trBase.getChildrenArrays();\n    \n    final int abOrd = trBase.getOrdinal(abPath);\n    final int abYoungChildBase1 = ca1.getYoungestChildArray()[abOrd]; \n    \n    final int numCategories = atLeast(800);\n    for (int i = 0; i < numCategories; i++) {\n      twBase.addCategory(new CategoryPath(\"a\", \"b\", Integer.toString(i)));\n    }\n    twBase.close();\n    \n    TaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(trBase);\n    assertNotNull(newTaxoReader);\n    trBase.close();\n    trBase = newTaxoReader;\n    \n    final ChildrenArrays ca2 = trBase.getChildrenArrays();\n    final int abYoungChildBase2 = ca2.getYoungestChildArray()[abOrd];\n    \n    int numRetries = atLeast(50);\n    for (int retry = 0; retry < numRetries; retry++) {\n      assertConsistentYoungestChild(abPath, abOrd, abYoungChildBase1, abYoungChildBase2, retry, numCategories);\n    }\n    \n    trBase.close();\n    indexDirBase.close();\n  }\n\n","sourceOld":"  /**\n   * Test that getParentArrays is valid when retrieved during refresh\n   */\n  @Test\n  @Ignore\n  public void testTaxonomyReaderRefreshRaces() throws Exception {\n    // compute base child arrays - after first chunk, and after the other\n    Directory indexDirBase =  newDirectory();\n    TaxonomyWriter twBase = new DirectoryTaxonomyWriter(indexDirBase);\n    twBase.addCategory(new CategoryPath(\"a\", \"0\"));\n    final CategoryPath abPath = new CategoryPath(\"a\", \"b\");\n    twBase.addCategory(abPath);\n    twBase.commit();\n    TaxonomyReader trBase = new DirectoryTaxonomyReader(indexDirBase);\n\n    final ChildrenArrays ca1 = trBase.getChildrenArrays();\n    \n    final int abOrd = trBase.getOrdinal(abPath);\n    final int abYoungChildBase1 = ca1.getYoungestChildArray()[abOrd]; \n    \n    for (int i=0; i < 1<<10; i++) { //1024 facets\n      twBase.addCategory(new CategoryPath(\"a\", \"b\", Integer.toString(i)));\n    }\n    twBase.commit();\n    \n    trBase.refresh();\n    \n    final ChildrenArrays ca2 = trBase.getChildrenArrays();\n    final int abYoungChildBase2 = ca2.getYoungestChildArray()[abOrd];\n    \n    for (int retry=0; retry<100; retry++) {\n      assertConsistentYoungestChild(abPath, abOrd, abYoungChildBase1,  abYoungChildBase2, retry);\n    }\n    indexDirBase.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d58d08788c3fd51172ba34474cca42499d6391b","date":1354802133,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testTaxonomyReaderRefreshRaces().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testTaxonomyReaderRefreshRaces().mjava","sourceNew":"  // Test that getParentArrays is valid when retrieved during refresh\n  @Test\n  public void testTaxonomyReaderRefreshRaces() throws Exception {\n    // compute base child arrays - after first chunk, and after the other\n    Directory indexDirBase = newDirectory();\n    TaxonomyWriter twBase = new DirectoryTaxonomyWriter(indexDirBase);\n    twBase.addCategory(new CategoryPath(\"a\", \"0\"));\n    final CategoryPath abPath = new CategoryPath(\"a\", \"b\");\n    twBase.addCategory(abPath);\n    twBase.commit();\n    TaxonomyReader trBase = new DirectoryTaxonomyReader(indexDirBase);\n\n    final ParallelTaxonomyArrays ca1 = trBase.getParallelTaxonomyArrays();\n    \n    final int abOrd = trBase.getOrdinal(abPath);\n    final int abYoungChildBase1 = ca1.children()[abOrd]; \n    \n    final int numCategories = atLeast(800);\n    for (int i = 0; i < numCategories; i++) {\n      twBase.addCategory(new CategoryPath(\"a\", \"b\", Integer.toString(i)));\n    }\n    twBase.close();\n    \n    TaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(trBase);\n    assertNotNull(newTaxoReader);\n    trBase.close();\n    trBase = newTaxoReader;\n    \n    final ParallelTaxonomyArrays ca2 = trBase.getParallelTaxonomyArrays();\n    final int abYoungChildBase2 = ca2.children()[abOrd];\n    \n    int numRetries = atLeast(50);\n    for (int retry = 0; retry < numRetries; retry++) {\n      assertConsistentYoungestChild(abPath, abOrd, abYoungChildBase1, abYoungChildBase2, retry, numCategories);\n    }\n    \n    trBase.close();\n    indexDirBase.close();\n  }\n\n","sourceOld":"  // Test that getParentArrays is valid when retrieved during refresh\n  @Test\n  public void testTaxonomyReaderRefreshRaces() throws Exception {\n    // compute base child arrays - after first chunk, and after the other\n    Directory indexDirBase = newDirectory();\n    TaxonomyWriter twBase = new DirectoryTaxonomyWriter(indexDirBase);\n    twBase.addCategory(new CategoryPath(\"a\", \"0\"));\n    final CategoryPath abPath = new CategoryPath(\"a\", \"b\");\n    twBase.addCategory(abPath);\n    twBase.commit();\n    TaxonomyReader trBase = new DirectoryTaxonomyReader(indexDirBase);\n\n    final ChildrenArrays ca1 = trBase.getChildrenArrays();\n    \n    final int abOrd = trBase.getOrdinal(abPath);\n    final int abYoungChildBase1 = ca1.getYoungestChildArray()[abOrd]; \n    \n    final int numCategories = atLeast(800);\n    for (int i = 0; i < numCategories; i++) {\n      twBase.addCategory(new CategoryPath(\"a\", \"b\", Integer.toString(i)));\n    }\n    twBase.close();\n    \n    TaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(trBase);\n    assertNotNull(newTaxoReader);\n    trBase.close();\n    trBase = newTaxoReader;\n    \n    final ChildrenArrays ca2 = trBase.getChildrenArrays();\n    final int abYoungChildBase2 = ca2.getYoungestChildArray()[abOrd];\n    \n    int numRetries = atLeast(50);\n    for (int retry = 0; retry < numRetries; retry++) {\n      assertConsistentYoungestChild(abPath, abOrd, abYoungChildBase1, abYoungChildBase2, retry, numCategories);\n    }\n    \n    trBase.close();\n    indexDirBase.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testTaxonomyReaderRefreshRaces().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testTaxonomyReaderRefreshRaces().mjava","sourceNew":"  // Test that getParentArrays is valid when retrieved during refresh\n  @Test\n  public void testTaxonomyReaderRefreshRaces() throws Exception {\n    // compute base child arrays - after first chunk, and after the other\n    Directory indexDirBase = newDirectory();\n    TaxonomyWriter twBase = new DirectoryTaxonomyWriter(indexDirBase);\n    twBase.addCategory(new CategoryPath(\"a\", \"0\"));\n    final CategoryPath abPath = new CategoryPath(\"a\", \"b\");\n    twBase.addCategory(abPath);\n    twBase.commit();\n    TaxonomyReader trBase = new DirectoryTaxonomyReader(indexDirBase);\n\n    final ParallelTaxonomyArrays ca1 = trBase.getParallelTaxonomyArrays();\n    \n    final int abOrd = trBase.getOrdinal(abPath);\n    final int abYoungChildBase1 = ca1.children()[abOrd]; \n    \n    final int numCategories = atLeast(800);\n    for (int i = 0; i < numCategories; i++) {\n      twBase.addCategory(new CategoryPath(\"a\", \"b\", Integer.toString(i)));\n    }\n    twBase.close();\n    \n    TaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(trBase);\n    assertNotNull(newTaxoReader);\n    trBase.close();\n    trBase = newTaxoReader;\n    \n    final ParallelTaxonomyArrays ca2 = trBase.getParallelTaxonomyArrays();\n    final int abYoungChildBase2 = ca2.children()[abOrd];\n    \n    int numRetries = atLeast(50);\n    for (int retry = 0; retry < numRetries; retry++) {\n      assertConsistentYoungestChild(abPath, abOrd, abYoungChildBase1, abYoungChildBase2, retry, numCategories);\n    }\n    \n    trBase.close();\n    indexDirBase.close();\n  }\n\n","sourceOld":"  /**\n   * Test that getParentArrays is valid when retrieved during refresh\n   */\n  @Test\n  @Ignore\n  public void testTaxonomyReaderRefreshRaces() throws Exception {\n    // compute base child arrays - after first chunk, and after the other\n    Directory indexDirBase =  newDirectory();\n    TaxonomyWriter twBase = new DirectoryTaxonomyWriter(indexDirBase);\n    twBase.addCategory(new CategoryPath(\"a\", \"0\"));\n    final CategoryPath abPath = new CategoryPath(\"a\", \"b\");\n    twBase.addCategory(abPath);\n    twBase.commit();\n    TaxonomyReader trBase = new DirectoryTaxonomyReader(indexDirBase);\n\n    final ChildrenArrays ca1 = trBase.getChildrenArrays();\n    \n    final int abOrd = trBase.getOrdinal(abPath);\n    final int abYoungChildBase1 = ca1.getYoungestChildArray()[abOrd]; \n    \n    for (int i=0; i < 1<<10; i++) { //1024 facets\n      twBase.addCategory(new CategoryPath(\"a\", \"b\", Integer.toString(i)));\n    }\n    twBase.commit();\n    \n    trBase.refresh();\n    \n    final ChildrenArrays ca2 = trBase.getChildrenArrays();\n    final int abYoungChildBase2 = ca2.getYoungestChildArray()[abOrd];\n    \n    for (int retry=0; retry<100; retry++) {\n      assertConsistentYoungestChild(abPath, abOrd, abYoungChildBase1,  abYoungChildBase2, retry);\n    }\n    indexDirBase.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testTaxonomyReaderRefreshRaces().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testTaxonomyReaderRefreshRaces().mjava","sourceNew":"  // Test that getParentArrays is valid when retrieved during refresh\n  @Test\n  public void testTaxonomyReaderRefreshRaces() throws Exception {\n    // compute base child arrays - after first chunk, and after the other\n    Directory indexDirBase = newDirectory();\n    TaxonomyWriter twBase = new DirectoryTaxonomyWriter(indexDirBase);\n    twBase.addCategory(new FacetLabel(\"a\", \"0\"));\n    final FacetLabel abPath = new FacetLabel(\"a\", \"b\");\n    twBase.addCategory(abPath);\n    twBase.commit();\n    TaxonomyReader trBase = new DirectoryTaxonomyReader(indexDirBase);\n\n    final ParallelTaxonomyArrays ca1 = trBase.getParallelTaxonomyArrays();\n    \n    final int abOrd = trBase.getOrdinal(abPath);\n    final int abYoungChildBase1 = ca1.children()[abOrd]; \n    \n    final int numCategories = atLeast(800);\n    for (int i = 0; i < numCategories; i++) {\n      twBase.addCategory(new FacetLabel(\"a\", \"b\", Integer.toString(i)));\n    }\n    twBase.close();\n    \n    TaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(trBase);\n    assertNotNull(newTaxoReader);\n    trBase.close();\n    trBase = newTaxoReader;\n    \n    final ParallelTaxonomyArrays ca2 = trBase.getParallelTaxonomyArrays();\n    final int abYoungChildBase2 = ca2.children()[abOrd];\n    \n    int numRetries = atLeast(50);\n    for (int retry = 0; retry < numRetries; retry++) {\n      assertConsistentYoungestChild(abPath, abOrd, abYoungChildBase1, abYoungChildBase2, retry, numCategories);\n    }\n    \n    trBase.close();\n    indexDirBase.close();\n  }\n\n","sourceOld":"  // Test that getParentArrays is valid when retrieved during refresh\n  @Test\n  public void testTaxonomyReaderRefreshRaces() throws Exception {\n    // compute base child arrays - after first chunk, and after the other\n    Directory indexDirBase = newDirectory();\n    TaxonomyWriter twBase = new DirectoryTaxonomyWriter(indexDirBase);\n    twBase.addCategory(new CategoryPath(\"a\", \"0\"));\n    final CategoryPath abPath = new CategoryPath(\"a\", \"b\");\n    twBase.addCategory(abPath);\n    twBase.commit();\n    TaxonomyReader trBase = new DirectoryTaxonomyReader(indexDirBase);\n\n    final ParallelTaxonomyArrays ca1 = trBase.getParallelTaxonomyArrays();\n    \n    final int abOrd = trBase.getOrdinal(abPath);\n    final int abYoungChildBase1 = ca1.children()[abOrd]; \n    \n    final int numCategories = atLeast(800);\n    for (int i = 0; i < numCategories; i++) {\n      twBase.addCategory(new CategoryPath(\"a\", \"b\", Integer.toString(i)));\n    }\n    twBase.close();\n    \n    TaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(trBase);\n    assertNotNull(newTaxoReader);\n    trBase.close();\n    trBase = newTaxoReader;\n    \n    final ParallelTaxonomyArrays ca2 = trBase.getParallelTaxonomyArrays();\n    final int abYoungChildBase2 = ca2.children()[abOrd];\n    \n    int numRetries = atLeast(50);\n    for (int retry = 0; retry < numRetries; retry++) {\n      assertConsistentYoungestChild(abPath, abOrd, abYoungChildBase1, abYoungChildBase2, retry, numCategories);\n    }\n    \n    trBase.close();\n    indexDirBase.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testTaxonomyReaderRefreshRaces().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testTaxonomyReaderRefreshRaces().mjava","sourceNew":"  // Test that getParentArrays is valid when retrieved during refresh\n  @Test\n  public void testTaxonomyReaderRefreshRaces() throws Exception {\n    // compute base child arrays - after first chunk, and after the other\n    Directory indexDirBase = newDirectory();\n    TaxonomyWriter twBase = new DirectoryTaxonomyWriter(indexDirBase);\n    twBase.addCategory(new FacetLabel(\"a\", \"0\"));\n    final FacetLabel abPath = new FacetLabel(\"a\", \"b\");\n    twBase.addCategory(abPath);\n    twBase.commit();\n    TaxonomyReader trBase = new DirectoryTaxonomyReader(indexDirBase);\n\n    final ParallelTaxonomyArrays ca1 = trBase.getParallelTaxonomyArrays();\n    \n    final int abOrd = trBase.getOrdinal(abPath);\n    final int abYoungChildBase1 = ca1.children()[abOrd]; \n    \n    final int numCategories = atLeast(800);\n    for (int i = 0; i < numCategories; i++) {\n      twBase.addCategory(new FacetLabel(\"a\", \"b\", Integer.toString(i)));\n    }\n    twBase.close();\n    \n    TaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(trBase);\n    assertNotNull(newTaxoReader);\n    trBase.close();\n    trBase = newTaxoReader;\n    \n    final ParallelTaxonomyArrays ca2 = trBase.getParallelTaxonomyArrays();\n    final int abYoungChildBase2 = ca2.children()[abOrd];\n    \n    int numRetries = atLeast(50);\n    for (int retry = 0; retry < numRetries; retry++) {\n      assertConsistentYoungestChild(abPath, abOrd, abYoungChildBase1, abYoungChildBase2, retry, numCategories);\n    }\n    \n    trBase.close();\n    indexDirBase.close();\n  }\n\n","sourceOld":"  // Test that getParentArrays is valid when retrieved during refresh\n  @Test\n  public void testTaxonomyReaderRefreshRaces() throws Exception {\n    // compute base child arrays - after first chunk, and after the other\n    Directory indexDirBase = newDirectory();\n    TaxonomyWriter twBase = new DirectoryTaxonomyWriter(indexDirBase);\n    twBase.addCategory(new CategoryPath(\"a\", \"0\"));\n    final CategoryPath abPath = new CategoryPath(\"a\", \"b\");\n    twBase.addCategory(abPath);\n    twBase.commit();\n    TaxonomyReader trBase = new DirectoryTaxonomyReader(indexDirBase);\n\n    final ParallelTaxonomyArrays ca1 = trBase.getParallelTaxonomyArrays();\n    \n    final int abOrd = trBase.getOrdinal(abPath);\n    final int abYoungChildBase1 = ca1.children()[abOrd]; \n    \n    final int numCategories = atLeast(800);\n    for (int i = 0; i < numCategories; i++) {\n      twBase.addCategory(new CategoryPath(\"a\", \"b\", Integer.toString(i)));\n    }\n    twBase.close();\n    \n    TaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(trBase);\n    assertNotNull(newTaxoReader);\n    trBase.close();\n    trBase = newTaxoReader;\n    \n    final ParallelTaxonomyArrays ca2 = trBase.getParallelTaxonomyArrays();\n    final int abYoungChildBase2 = ca2.children()[abOrd];\n    \n    int numRetries = atLeast(50);\n    for (int retry = 0; retry < numRetries; retry++) {\n      assertConsistentYoungestChild(abPath, abOrd, abYoungChildBase1, abYoungChildBase2, retry, numCategories);\n    }\n    \n    trBase.close();\n    indexDirBase.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c6c784f777a2cc8fa014507ea129526822714d","date":1579733373,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testTaxonomyReaderRefreshRaces().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testTaxonomyReaderRefreshRaces().mjava","sourceNew":"  // Test that getParentArrays is valid when retrieved during refresh\n  @Test\n  public void testTaxonomyReaderRefreshRaces() throws Exception {\n    // compute base child arrays - after first chunk, and after the other\n    Directory indexDirBase = newDirectory();\n    TaxonomyWriter twBase = new DirectoryTaxonomyWriter(indexDirBase);\n    twBase.addCategory(new FacetLabel(\"a\", \"0\"));\n    final FacetLabel abPath = new FacetLabel(\"a\", \"b\");\n    twBase.addCategory(abPath);\n    twBase.commit();\n    TaxonomyReader trBase = new DirectoryTaxonomyReader(indexDirBase);\n\n    final ParallelTaxonomyArrays ca1 = trBase.getParallelTaxonomyArrays();\n    \n    final int abOrd = trBase.getOrdinal(abPath);\n    final int abYoungChildBase1 = ca1.children()[abOrd]; \n    \n    final int numCategories = atLeast(200);\n    for (int i = 0; i < numCategories; i++) {\n      twBase.addCategory(new FacetLabel(\"a\", \"b\", Integer.toString(i)));\n    }\n    twBase.close();\n    \n    TaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(trBase);\n    assertNotNull(newTaxoReader);\n    trBase.close();\n    trBase = newTaxoReader;\n    \n    final ParallelTaxonomyArrays ca2 = trBase.getParallelTaxonomyArrays();\n    final int abYoungChildBase2 = ca2.children()[abOrd];\n    \n    int numRetries = atLeast(10);\n    for (int retry = 0; retry < numRetries; retry++) {\n      assertConsistentYoungestChild(abPath, abOrd, abYoungChildBase1, abYoungChildBase2, retry, numCategories);\n    }\n    \n    trBase.close();\n    indexDirBase.close();\n  }\n\n","sourceOld":"  // Test that getParentArrays is valid when retrieved during refresh\n  @Test\n  public void testTaxonomyReaderRefreshRaces() throws Exception {\n    // compute base child arrays - after first chunk, and after the other\n    Directory indexDirBase = newDirectory();\n    TaxonomyWriter twBase = new DirectoryTaxonomyWriter(indexDirBase);\n    twBase.addCategory(new FacetLabel(\"a\", \"0\"));\n    final FacetLabel abPath = new FacetLabel(\"a\", \"b\");\n    twBase.addCategory(abPath);\n    twBase.commit();\n    TaxonomyReader trBase = new DirectoryTaxonomyReader(indexDirBase);\n\n    final ParallelTaxonomyArrays ca1 = trBase.getParallelTaxonomyArrays();\n    \n    final int abOrd = trBase.getOrdinal(abPath);\n    final int abYoungChildBase1 = ca1.children()[abOrd]; \n    \n    final int numCategories = atLeast(800);\n    for (int i = 0; i < numCategories; i++) {\n      twBase.addCategory(new FacetLabel(\"a\", \"b\", Integer.toString(i)));\n    }\n    twBase.close();\n    \n    TaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(trBase);\n    assertNotNull(newTaxoReader);\n    trBase.close();\n    trBase = newTaxoReader;\n    \n    final ParallelTaxonomyArrays ca2 = trBase.getParallelTaxonomyArrays();\n    final int abYoungChildBase2 = ca2.children()[abOrd];\n    \n    int numRetries = atLeast(50);\n    for (int retry = 0; retry < numRetries; retry++) {\n      assertConsistentYoungestChild(abPath, abOrd, abYoungChildBase1, abYoungChildBase2, retry, numCategories);\n    }\n    \n    trBase.close();\n    indexDirBase.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57c6c784f777a2cc8fa014507ea129526822714d":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["b89678825b68eccaf09e6ab71675fc0b0af1e099","3d58d08788c3fd51172ba34474cca42499d6391b"],"3d58d08788c3fd51172ba34474cca42499d6391b":["219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["3d58d08788c3fd51172ba34474cca42499d6391b","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c6c784f777a2cc8fa014507ea129526822714d"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3d58d08788c3fd51172ba34474cca42499d6391b"]},"commit2Childs":{"57c6c784f777a2cc8fa014507ea129526822714d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["407687e67faf6e1f02a211ca078d8e3eed631027","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"3d58d08788c3fd51172ba34474cca42499d6391b":["407687e67faf6e1f02a211ca078d8e3eed631027","3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["57c6c784f777a2cc8fa014507ea129526822714d"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["3d58d08788c3fd51172ba34474cca42499d6391b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}