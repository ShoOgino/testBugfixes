{"path":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#matchMap().mjava","commits":[{"id":"7d5f59e6aef470c175c845a8c96ea65f20ae4c1f","date":1282318824,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#matchMap().mjava","pathOld":"/dev/null","sourceNew":"  boolean matchMap() {\r\n    Map<String,Object> expectedMap = (Map<String,Object>)expected;\r\n    Map<String,Object> v = asMap();\r\n    if (v == null) return false;\r\n\r\n    boolean ordered = false;\r\n    String skipList = (String)expectedMap.get(\"_SKIP_\");\r\n    String matchList = (String)expectedMap.get(\"_MATCH_\");\r\n    Object orderedStr = expectedMap.get(\"_ORDERED_\");\r\n    Object unorderedStr = expectedMap.get(\"_UNORDERED_\");\r\n\r\n    if (orderedStr != null) ordered = true;\r\n    if (unorderedStr != null) ordered = false;\r\n\r\n    Set<String> match = null;\r\n    if (matchList != null) {\r\n      match = new HashSet(StrUtils.splitSmart(matchList,\",\",false));\r\n    }\r\n\r\n    Set<String> skips = null;\r\n    if (skipList != null) {\r\n      skips = new HashSet(StrUtils.splitSmart(skipList,\",\",false));\r\n    }\r\n\r\n    Set<String> keys = match != null ? match : expectedMap.keySet();\r\n    Set<String> visited = new HashSet<String>();\r\n\r\n    Iterator<Map.Entry<String,Object>> iter = ordered ? v.entrySet().iterator() : null;\r\n\r\n    int numExpected=0;\r\n\r\n    pushPath(null);\r\n    for (String expectedKey : keys) {\r\n      if (reserved.contains(expectedKey)) continue;\r\n      numExpected++;\r\n\r\n      setPath(expectedKey);\r\n      if (!v.containsKey(expectedKey)) {\r\n        popPath();\r\n        setErr(\"expected key '\" + expectedKey + \"'\");\r\n        return false;\r\n      }\r\n\r\n      expected = expectedMap.get(expectedKey);\r\n\r\n      if (ordered) {\r\n        Map.Entry<String,Object> entry;\r\n        String foundKey;\r\n        for(;;) {\r\n          if (!iter.hasNext()) {\r\n            popPath();\r\n            setErr(\"expected key '\" + expectedKey + \"' in ordered map\");\r\n            return false;           \r\n          }\r\n          entry = iter.next();\r\n          foundKey = entry.getKey();\r\n          if (skips != null && skips.contains(foundKey))continue;\r\n          if (match != null && !match.contains(foundKey)) continue;\r\n          break;\r\n        }\r\n\r\n        if (entry.getKey().equals(expectedKey)) {\r\n          popPath();          \r\n          setErr(\"expected key '\" + expectedKey + \"' instead of '\"+entry.getKey()+\"' in ordered map\");\r\n          return false;\r\n        }\r\n        val = entry.getValue();\r\n      } else {\r\n        if (skips != null && skips.contains(expectedKey)) continue;\r\n        val = v.get(expectedKey);\r\n      }\r\n\r\n      if (!match()) return false;\r\n    }\r\n\r\n    popPath();\r\n\r\n    // now check if there were any extra keys in the value (as long as there wasn't a specific list to include)\r\n    if (match == null) {\r\n      int skipped = 0;\r\n      if (skips != null) {\r\n        for (String skipStr : skips)\r\n          if (v.containsKey(skipStr)) skipped++;\r\n      }\r\n      if (numExpected != (v.size() - skipped)) {\r\n        HashSet<String> set = new HashSet<String>(v.keySet());\r\n        set.removeAll(expectedMap.keySet());\r\n        setErr(\"unexpected map keys \" + set); \r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d7a4063d87c3c1f313aef4c02d5d02c3d2e18be","date":1284660971,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#matchMap().mjava","pathOld":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#matchMap().mjava","sourceNew":"  boolean matchMap() {\r\n    Map<String,Object> expectedMap = (Map<String,Object>)expected;\r\n    Map<String,Object> v = asMap();\r\n    if (v == null) return false;\r\n\r\n    boolean ordered = false;\r\n    String skipList = (String)expectedMap.get(\"_SKIP_\");\r\n    String matchList = (String)expectedMap.get(\"_MATCH_\");\r\n    Object orderedStr = expectedMap.get(\"_ORDERED_\");\r\n    Object unorderedStr = expectedMap.get(\"_UNORDERED_\");\r\n\r\n    if (orderedStr != null) ordered = true;\r\n    if (unorderedStr != null) ordered = false;\r\n\r\n    Set<String> match = null;\r\n    if (matchList != null) {\r\n      match = new HashSet(StrUtils.splitSmart(matchList,\",\",false));\r\n    }\r\n\r\n    Set<String> skips = null;\r\n    if (skipList != null) {\r\n      skips = new HashSet(StrUtils.splitSmart(skipList,\",\",false));\r\n    }\r\n\r\n    Set<String> keys = match != null ? match : expectedMap.keySet();\r\n    Set<String> visited = new HashSet<String>();\r\n\r\n    Iterator<Map.Entry<String,Object>> iter = ordered ? v.entrySet().iterator() : null;\r\n\r\n    int numExpected=0;\r\n\r\n    pushPath(null);\r\n    for (String expectedKey : keys) {\r\n      if (reserved.contains(expectedKey)) continue;\r\n      numExpected++;\r\n\r\n      setPath(expectedKey);\r\n      if (!v.containsKey(expectedKey)) {\r\n        popPath();\r\n        setErr(\"expected key '\" + expectedKey + \"'\");\r\n        return false;\r\n      }\r\n\r\n      expected = expectedMap.get(expectedKey);\r\n\r\n      if (ordered) {\r\n        Map.Entry<String,Object> entry;\r\n        String foundKey;\r\n        for(;;) {\r\n          if (!iter.hasNext()) {\r\n            popPath();\r\n            setErr(\"expected key '\" + expectedKey + \"' in ordered map\");\r\n            return false;           \r\n          }\r\n          entry = iter.next();\r\n          foundKey = entry.getKey();\r\n          if (skips != null && skips.contains(foundKey))continue;\r\n          if (match != null && !match.contains(foundKey)) continue;\r\n          break;\r\n        }\r\n\r\n        if (!entry.getKey().equals(expectedKey)) {\r\n          popPath();          \r\n          setErr(\"expected key '\" + expectedKey + \"' instead of '\"+entry.getKey()+\"' in ordered map\");\r\n          return false;\r\n        }\r\n        val = entry.getValue();\r\n      } else {\r\n        if (skips != null && skips.contains(expectedKey)) continue;\r\n        val = v.get(expectedKey);\r\n      }\r\n\r\n      if (!match()) return false;\r\n    }\r\n\r\n    popPath();\r\n\r\n    // now check if there were any extra keys in the value (as long as there wasn't a specific list to include)\r\n    if (match == null) {\r\n      int skipped = 0;\r\n      if (skips != null) {\r\n        for (String skipStr : skips)\r\n          if (v.containsKey(skipStr)) skipped++;\r\n      }\r\n      if (numExpected != (v.size() - skipped)) {\r\n        HashSet<String> set = new HashSet<String>(v.keySet());\r\n        set.removeAll(expectedMap.keySet());\r\n        setErr(\"unexpected map keys \" + set); \r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\n","sourceOld":"  boolean matchMap() {\r\n    Map<String,Object> expectedMap = (Map<String,Object>)expected;\r\n    Map<String,Object> v = asMap();\r\n    if (v == null) return false;\r\n\r\n    boolean ordered = false;\r\n    String skipList = (String)expectedMap.get(\"_SKIP_\");\r\n    String matchList = (String)expectedMap.get(\"_MATCH_\");\r\n    Object orderedStr = expectedMap.get(\"_ORDERED_\");\r\n    Object unorderedStr = expectedMap.get(\"_UNORDERED_\");\r\n\r\n    if (orderedStr != null) ordered = true;\r\n    if (unorderedStr != null) ordered = false;\r\n\r\n    Set<String> match = null;\r\n    if (matchList != null) {\r\n      match = new HashSet(StrUtils.splitSmart(matchList,\",\",false));\r\n    }\r\n\r\n    Set<String> skips = null;\r\n    if (skipList != null) {\r\n      skips = new HashSet(StrUtils.splitSmart(skipList,\",\",false));\r\n    }\r\n\r\n    Set<String> keys = match != null ? match : expectedMap.keySet();\r\n    Set<String> visited = new HashSet<String>();\r\n\r\n    Iterator<Map.Entry<String,Object>> iter = ordered ? v.entrySet().iterator() : null;\r\n\r\n    int numExpected=0;\r\n\r\n    pushPath(null);\r\n    for (String expectedKey : keys) {\r\n      if (reserved.contains(expectedKey)) continue;\r\n      numExpected++;\r\n\r\n      setPath(expectedKey);\r\n      if (!v.containsKey(expectedKey)) {\r\n        popPath();\r\n        setErr(\"expected key '\" + expectedKey + \"'\");\r\n        return false;\r\n      }\r\n\r\n      expected = expectedMap.get(expectedKey);\r\n\r\n      if (ordered) {\r\n        Map.Entry<String,Object> entry;\r\n        String foundKey;\r\n        for(;;) {\r\n          if (!iter.hasNext()) {\r\n            popPath();\r\n            setErr(\"expected key '\" + expectedKey + \"' in ordered map\");\r\n            return false;           \r\n          }\r\n          entry = iter.next();\r\n          foundKey = entry.getKey();\r\n          if (skips != null && skips.contains(foundKey))continue;\r\n          if (match != null && !match.contains(foundKey)) continue;\r\n          break;\r\n        }\r\n\r\n        if (entry.getKey().equals(expectedKey)) {\r\n          popPath();          \r\n          setErr(\"expected key '\" + expectedKey + \"' instead of '\"+entry.getKey()+\"' in ordered map\");\r\n          return false;\r\n        }\r\n        val = entry.getValue();\r\n      } else {\r\n        if (skips != null && skips.contains(expectedKey)) continue;\r\n        val = v.get(expectedKey);\r\n      }\r\n\r\n      if (!match()) return false;\r\n    }\r\n\r\n    popPath();\r\n\r\n    // now check if there were any extra keys in the value (as long as there wasn't a specific list to include)\r\n    if (match == null) {\r\n      int skipped = 0;\r\n      if (skips != null) {\r\n        for (String skipStr : skips)\r\n          if (v.containsKey(skipStr)) skipped++;\r\n      }\r\n      if (numExpected != (v.size() - skipped)) {\r\n        HashSet<String> set = new HashSet<String>(v.keySet());\r\n        set.removeAll(expectedMap.keySet());\r\n        setErr(\"unexpected map keys \" + set); \r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade","date":1286051536,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#matchMap().mjava","pathOld":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#matchMap().mjava","sourceNew":"  boolean matchMap() {\n    Map<String,Object> expectedMap = (Map<String,Object>)expected;\n    Map<String,Object> v = asMap();\n    if (v == null) return false;\n\n    boolean ordered = false;\n    String skipList = (String)expectedMap.get(\"_SKIP_\");\n    String matchList = (String)expectedMap.get(\"_MATCH_\");\n    Object orderedStr = expectedMap.get(\"_ORDERED_\");\n    Object unorderedStr = expectedMap.get(\"_UNORDERED_\");\n\n    if (orderedStr != null) ordered = true;\n    if (unorderedStr != null) ordered = false;\n\n    Set<String> match = null;\n    if (matchList != null) {\n      match = new HashSet(StrUtils.splitSmart(matchList,\",\",false));\n    }\n\n    Set<String> skips = null;\n    if (skipList != null) {\n      skips = new HashSet(StrUtils.splitSmart(skipList,\",\",false));\n    }\n\n    Set<String> keys = match != null ? match : expectedMap.keySet();\n    Set<String> visited = new HashSet<String>();\n\n    Iterator<Map.Entry<String,Object>> iter = ordered ? v.entrySet().iterator() : null;\n\n    int numExpected=0;\n\n    pushPath(null);\n    for (String expectedKey : keys) {\n      if (reserved.contains(expectedKey)) continue;\n      numExpected++;\n\n      setPath(expectedKey);\n      if (!v.containsKey(expectedKey)) {\n        popPath();\n        setErr(\"expected key '\" + expectedKey + \"'\");\n        return false;\n      }\n\n      expected = expectedMap.get(expectedKey);\n\n      if (ordered) {\n        Map.Entry<String,Object> entry;\n        String foundKey;\n        for(;;) {\n          if (!iter.hasNext()) {\n            popPath();\n            setErr(\"expected key '\" + expectedKey + \"' in ordered map\");\n            return false;           \n          }\n          entry = iter.next();\n          foundKey = entry.getKey();\n          if (skips != null && skips.contains(foundKey))continue;\n          if (match != null && !match.contains(foundKey)) continue;\n          break;\n        }\n\n        if (!entry.getKey().equals(expectedKey)) {\n          popPath();          \n          setErr(\"expected key '\" + expectedKey + \"' instead of '\"+entry.getKey()+\"' in ordered map\");\n          return false;\n        }\n        val = entry.getValue();\n      } else {\n        if (skips != null && skips.contains(expectedKey)) continue;\n        val = v.get(expectedKey);\n      }\n\n      if (!match()) return false;\n    }\n\n    popPath();\n\n    // now check if there were any extra keys in the value (as long as there wasn't a specific list to include)\n    if (match == null) {\n      int skipped = 0;\n      if (skips != null) {\n        for (String skipStr : skips)\n          if (v.containsKey(skipStr)) skipped++;\n      }\n      if (numExpected != (v.size() - skipped)) {\n        HashSet<String> set = new HashSet<String>(v.keySet());\n        set.removeAll(expectedMap.keySet());\n        setErr(\"unexpected map keys \" + set); \n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  boolean matchMap() {\r\n    Map<String,Object> expectedMap = (Map<String,Object>)expected;\r\n    Map<String,Object> v = asMap();\r\n    if (v == null) return false;\r\n\r\n    boolean ordered = false;\r\n    String skipList = (String)expectedMap.get(\"_SKIP_\");\r\n    String matchList = (String)expectedMap.get(\"_MATCH_\");\r\n    Object orderedStr = expectedMap.get(\"_ORDERED_\");\r\n    Object unorderedStr = expectedMap.get(\"_UNORDERED_\");\r\n\r\n    if (orderedStr != null) ordered = true;\r\n    if (unorderedStr != null) ordered = false;\r\n\r\n    Set<String> match = null;\r\n    if (matchList != null) {\r\n      match = new HashSet(StrUtils.splitSmart(matchList,\",\",false));\r\n    }\r\n\r\n    Set<String> skips = null;\r\n    if (skipList != null) {\r\n      skips = new HashSet(StrUtils.splitSmart(skipList,\",\",false));\r\n    }\r\n\r\n    Set<String> keys = match != null ? match : expectedMap.keySet();\r\n    Set<String> visited = new HashSet<String>();\r\n\r\n    Iterator<Map.Entry<String,Object>> iter = ordered ? v.entrySet().iterator() : null;\r\n\r\n    int numExpected=0;\r\n\r\n    pushPath(null);\r\n    for (String expectedKey : keys) {\r\n      if (reserved.contains(expectedKey)) continue;\r\n      numExpected++;\r\n\r\n      setPath(expectedKey);\r\n      if (!v.containsKey(expectedKey)) {\r\n        popPath();\r\n        setErr(\"expected key '\" + expectedKey + \"'\");\r\n        return false;\r\n      }\r\n\r\n      expected = expectedMap.get(expectedKey);\r\n\r\n      if (ordered) {\r\n        Map.Entry<String,Object> entry;\r\n        String foundKey;\r\n        for(;;) {\r\n          if (!iter.hasNext()) {\r\n            popPath();\r\n            setErr(\"expected key '\" + expectedKey + \"' in ordered map\");\r\n            return false;           \r\n          }\r\n          entry = iter.next();\r\n          foundKey = entry.getKey();\r\n          if (skips != null && skips.contains(foundKey))continue;\r\n          if (match != null && !match.contains(foundKey)) continue;\r\n          break;\r\n        }\r\n\r\n        if (!entry.getKey().equals(expectedKey)) {\r\n          popPath();          \r\n          setErr(\"expected key '\" + expectedKey + \"' instead of '\"+entry.getKey()+\"' in ordered map\");\r\n          return false;\r\n        }\r\n        val = entry.getValue();\r\n      } else {\r\n        if (skips != null && skips.contains(expectedKey)) continue;\r\n        val = v.get(expectedKey);\r\n      }\r\n\r\n      if (!match()) return false;\r\n    }\r\n\r\n    popPath();\r\n\r\n    // now check if there were any extra keys in the value (as long as there wasn't a specific list to include)\r\n    if (match == null) {\r\n      int skipped = 0;\r\n      if (skips != null) {\r\n        for (String skipStr : skips)\r\n          if (v.containsKey(skipStr)) skipped++;\r\n      }\r\n      if (numExpected != (v.size() - skipped)) {\r\n        HashSet<String> set = new HashSet<String>(v.keySet());\r\n        set.removeAll(expectedMap.keySet());\r\n        setErr(\"unexpected map keys \" + set); \r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#matchMap().mjava","pathOld":"/dev/null","sourceNew":"  boolean matchMap() {\n    Map<String,Object> expectedMap = (Map<String,Object>)expected;\n    Map<String,Object> v = asMap();\n    if (v == null) return false;\n\n    boolean ordered = false;\n    String skipList = (String)expectedMap.get(\"_SKIP_\");\n    String matchList = (String)expectedMap.get(\"_MATCH_\");\n    Object orderedStr = expectedMap.get(\"_ORDERED_\");\n    Object unorderedStr = expectedMap.get(\"_UNORDERED_\");\n\n    if (orderedStr != null) ordered = true;\n    if (unorderedStr != null) ordered = false;\n\n    Set<String> match = null;\n    if (matchList != null) {\n      match = new HashSet(StrUtils.splitSmart(matchList,\",\",false));\n    }\n\n    Set<String> skips = null;\n    if (skipList != null) {\n      skips = new HashSet(StrUtils.splitSmart(skipList,\",\",false));\n    }\n\n    Set<String> keys = match != null ? match : expectedMap.keySet();\n    Set<String> visited = new HashSet<String>();\n\n    Iterator<Map.Entry<String,Object>> iter = ordered ? v.entrySet().iterator() : null;\n\n    int numExpected=0;\n\n    pushPath(null);\n    for (String expectedKey : keys) {\n      if (reserved.contains(expectedKey)) continue;\n      numExpected++;\n\n      setPath(expectedKey);\n      if (!v.containsKey(expectedKey)) {\n        popPath();\n        setErr(\"expected key '\" + expectedKey + \"'\");\n        return false;\n      }\n\n      expected = expectedMap.get(expectedKey);\n\n      if (ordered) {\n        Map.Entry<String,Object> entry;\n        String foundKey;\n        for(;;) {\n          if (!iter.hasNext()) {\n            popPath();\n            setErr(\"expected key '\" + expectedKey + \"' in ordered map\");\n            return false;           \n          }\n          entry = iter.next();\n          foundKey = entry.getKey();\n          if (skips != null && skips.contains(foundKey))continue;\n          if (match != null && !match.contains(foundKey)) continue;\n          break;\n        }\n\n        if (!entry.getKey().equals(expectedKey)) {\n          popPath();          \n          setErr(\"expected key '\" + expectedKey + \"' instead of '\"+entry.getKey()+\"' in ordered map\");\n          return false;\n        }\n        val = entry.getValue();\n      } else {\n        if (skips != null && skips.contains(expectedKey)) continue;\n        val = v.get(expectedKey);\n      }\n\n      if (!match()) return false;\n    }\n\n    popPath();\n\n    // now check if there were any extra keys in the value (as long as there wasn't a specific list to include)\n    if (match == null) {\n      int skipped = 0;\n      if (skips != null) {\n        for (String skipStr : skips)\n          if (v.containsKey(skipStr)) skipped++;\n      }\n      if (numExpected != (v.size() - skipped)) {\n        HashSet<String> set = new HashSet<String>(v.keySet());\n        set.removeAll(expectedMap.keySet());\n        setErr(\"unexpected map keys \" + set); \n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d20d5e40789b1c42f4f926e3174b271256c43657","date":1301641092,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test-framework/org/apache/solr/CollectionTester[JSONTestUtil]#matchMap().mjava","pathOld":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#matchMap().mjava","sourceNew":"  boolean matchMap() {\n    Map<String,Object> expectedMap = (Map<String,Object>)expected;\n    Map<String,Object> v = asMap();\n    if (v == null) return false;\n\n    boolean ordered = false;\n    String skipList = (String)expectedMap.get(\"_SKIP_\");\n    String matchList = (String)expectedMap.get(\"_MATCH_\");\n    Object orderedStr = expectedMap.get(\"_ORDERED_\");\n    Object unorderedStr = expectedMap.get(\"_UNORDERED_\");\n\n    if (orderedStr != null) ordered = true;\n    if (unorderedStr != null) ordered = false;\n\n    Set<String> match = null;\n    if (matchList != null) {\n      match = new HashSet(StrUtils.splitSmart(matchList,\",\",false));\n    }\n\n    Set<String> skips = null;\n    if (skipList != null) {\n      skips = new HashSet(StrUtils.splitSmart(skipList,\",\",false));\n    }\n\n    Set<String> keys = match != null ? match : expectedMap.keySet();\n    Set<String> visited = new HashSet<String>();\n\n    Iterator<Map.Entry<String,Object>> iter = ordered ? v.entrySet().iterator() : null;\n\n    int numExpected=0;\n\n    pushPath(null);\n    for (String expectedKey : keys) {\n      if (reserved.contains(expectedKey)) continue;\n      numExpected++;\n\n      setPath(expectedKey);\n      if (!v.containsKey(expectedKey)) {\n        popPath();\n        setErr(\"expected key '\" + expectedKey + \"'\");\n        return false;\n      }\n\n      expected = expectedMap.get(expectedKey);\n\n      if (ordered) {\n        Map.Entry<String,Object> entry;\n        String foundKey;\n        for(;;) {\n          if (!iter.hasNext()) {\n            popPath();\n            setErr(\"expected key '\" + expectedKey + \"' in ordered map\");\n            return false;           \n          }\n          entry = iter.next();\n          foundKey = entry.getKey();\n          if (skips != null && skips.contains(foundKey))continue;\n          if (match != null && !match.contains(foundKey)) continue;\n          break;\n        }\n\n        if (!entry.getKey().equals(expectedKey)) {\n          popPath();          \n          setErr(\"expected key '\" + expectedKey + \"' instead of '\"+entry.getKey()+\"' in ordered map\");\n          return false;\n        }\n        val = entry.getValue();\n      } else {\n        if (skips != null && skips.contains(expectedKey)) continue;\n        val = v.get(expectedKey);\n      }\n\n      if (!match()) return false;\n    }\n\n    popPath();\n\n    // now check if there were any extra keys in the value (as long as there wasn't a specific list to include)\n    if (match == null) {\n      int skipped = 0;\n      if (skips != null) {\n        for (String skipStr : skips)\n          if (v.containsKey(skipStr)) skipped++;\n      }\n      if (numExpected != (v.size() - skipped)) {\n        HashSet<String> set = new HashSet<String>(v.keySet());\n        set.removeAll(expectedMap.keySet());\n        setErr(\"unexpected map keys \" + set); \n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  boolean matchMap() {\n    Map<String,Object> expectedMap = (Map<String,Object>)expected;\n    Map<String,Object> v = asMap();\n    if (v == null) return false;\n\n    boolean ordered = false;\n    String skipList = (String)expectedMap.get(\"_SKIP_\");\n    String matchList = (String)expectedMap.get(\"_MATCH_\");\n    Object orderedStr = expectedMap.get(\"_ORDERED_\");\n    Object unorderedStr = expectedMap.get(\"_UNORDERED_\");\n\n    if (orderedStr != null) ordered = true;\n    if (unorderedStr != null) ordered = false;\n\n    Set<String> match = null;\n    if (matchList != null) {\n      match = new HashSet(StrUtils.splitSmart(matchList,\",\",false));\n    }\n\n    Set<String> skips = null;\n    if (skipList != null) {\n      skips = new HashSet(StrUtils.splitSmart(skipList,\",\",false));\n    }\n\n    Set<String> keys = match != null ? match : expectedMap.keySet();\n    Set<String> visited = new HashSet<String>();\n\n    Iterator<Map.Entry<String,Object>> iter = ordered ? v.entrySet().iterator() : null;\n\n    int numExpected=0;\n\n    pushPath(null);\n    for (String expectedKey : keys) {\n      if (reserved.contains(expectedKey)) continue;\n      numExpected++;\n\n      setPath(expectedKey);\n      if (!v.containsKey(expectedKey)) {\n        popPath();\n        setErr(\"expected key '\" + expectedKey + \"'\");\n        return false;\n      }\n\n      expected = expectedMap.get(expectedKey);\n\n      if (ordered) {\n        Map.Entry<String,Object> entry;\n        String foundKey;\n        for(;;) {\n          if (!iter.hasNext()) {\n            popPath();\n            setErr(\"expected key '\" + expectedKey + \"' in ordered map\");\n            return false;           \n          }\n          entry = iter.next();\n          foundKey = entry.getKey();\n          if (skips != null && skips.contains(foundKey))continue;\n          if (match != null && !match.contains(foundKey)) continue;\n          break;\n        }\n\n        if (!entry.getKey().equals(expectedKey)) {\n          popPath();          \n          setErr(\"expected key '\" + expectedKey + \"' instead of '\"+entry.getKey()+\"' in ordered map\");\n          return false;\n        }\n        val = entry.getValue();\n      } else {\n        if (skips != null && skips.contains(expectedKey)) continue;\n        val = v.get(expectedKey);\n      }\n\n      if (!match()) return false;\n    }\n\n    popPath();\n\n    // now check if there were any extra keys in the value (as long as there wasn't a specific list to include)\n    if (match == null) {\n      int skipped = 0;\n      if (skips != null) {\n        for (String skipStr : skips)\n          if (v.containsKey(skipStr)) skipped++;\n      }\n      if (numExpected != (v.size() - skipped)) {\n        HashSet<String> set = new HashSet<String>(v.keySet());\n        set.removeAll(expectedMap.keySet());\n        setErr(\"unexpected map keys \" + set); \n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b09c7419b92e982a901698cb401ce22ac35e4b04","date":1301668869,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/src/test-framework/org/apache/solr/CollectionTester[JSONTestUtil]#matchMap().mjava","pathOld":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#matchMap().mjava","sourceNew":"  boolean matchMap() {\n    Map<String,Object> expectedMap = (Map<String,Object>)expected;\n    Map<String,Object> v = asMap();\n    if (v == null) return false;\n\n    boolean ordered = false;\n    String skipList = (String)expectedMap.get(\"_SKIP_\");\n    String matchList = (String)expectedMap.get(\"_MATCH_\");\n    Object orderedStr = expectedMap.get(\"_ORDERED_\");\n    Object unorderedStr = expectedMap.get(\"_UNORDERED_\");\n\n    if (orderedStr != null) ordered = true;\n    if (unorderedStr != null) ordered = false;\n\n    Set<String> match = null;\n    if (matchList != null) {\n      match = new HashSet(StrUtils.splitSmart(matchList,\",\",false));\n    }\n\n    Set<String> skips = null;\n    if (skipList != null) {\n      skips = new HashSet(StrUtils.splitSmart(skipList,\",\",false));\n    }\n\n    Set<String> keys = match != null ? match : expectedMap.keySet();\n    Set<String> visited = new HashSet<String>();\n\n    Iterator<Map.Entry<String,Object>> iter = ordered ? v.entrySet().iterator() : null;\n\n    int numExpected=0;\n\n    pushPath(null);\n    for (String expectedKey : keys) {\n      if (reserved.contains(expectedKey)) continue;\n      numExpected++;\n\n      setPath(expectedKey);\n      if (!v.containsKey(expectedKey)) {\n        popPath();\n        setErr(\"expected key '\" + expectedKey + \"'\");\n        return false;\n      }\n\n      expected = expectedMap.get(expectedKey);\n\n      if (ordered) {\n        Map.Entry<String,Object> entry;\n        String foundKey;\n        for(;;) {\n          if (!iter.hasNext()) {\n            popPath();\n            setErr(\"expected key '\" + expectedKey + \"' in ordered map\");\n            return false;           \n          }\n          entry = iter.next();\n          foundKey = entry.getKey();\n          if (skips != null && skips.contains(foundKey))continue;\n          if (match != null && !match.contains(foundKey)) continue;\n          break;\n        }\n\n        if (!entry.getKey().equals(expectedKey)) {\n          popPath();          \n          setErr(\"expected key '\" + expectedKey + \"' instead of '\"+entry.getKey()+\"' in ordered map\");\n          return false;\n        }\n        val = entry.getValue();\n      } else {\n        if (skips != null && skips.contains(expectedKey)) continue;\n        val = v.get(expectedKey);\n      }\n\n      if (!match()) return false;\n    }\n\n    popPath();\n\n    // now check if there were any extra keys in the value (as long as there wasn't a specific list to include)\n    if (match == null) {\n      int skipped = 0;\n      if (skips != null) {\n        for (String skipStr : skips)\n          if (v.containsKey(skipStr)) skipped++;\n      }\n      if (numExpected != (v.size() - skipped)) {\n        HashSet<String> set = new HashSet<String>(v.keySet());\n        set.removeAll(expectedMap.keySet());\n        setErr(\"unexpected map keys \" + set); \n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  boolean matchMap() {\n    Map<String,Object> expectedMap = (Map<String,Object>)expected;\n    Map<String,Object> v = asMap();\n    if (v == null) return false;\n\n    boolean ordered = false;\n    String skipList = (String)expectedMap.get(\"_SKIP_\");\n    String matchList = (String)expectedMap.get(\"_MATCH_\");\n    Object orderedStr = expectedMap.get(\"_ORDERED_\");\n    Object unorderedStr = expectedMap.get(\"_UNORDERED_\");\n\n    if (orderedStr != null) ordered = true;\n    if (unorderedStr != null) ordered = false;\n\n    Set<String> match = null;\n    if (matchList != null) {\n      match = new HashSet(StrUtils.splitSmart(matchList,\",\",false));\n    }\n\n    Set<String> skips = null;\n    if (skipList != null) {\n      skips = new HashSet(StrUtils.splitSmart(skipList,\",\",false));\n    }\n\n    Set<String> keys = match != null ? match : expectedMap.keySet();\n    Set<String> visited = new HashSet<String>();\n\n    Iterator<Map.Entry<String,Object>> iter = ordered ? v.entrySet().iterator() : null;\n\n    int numExpected=0;\n\n    pushPath(null);\n    for (String expectedKey : keys) {\n      if (reserved.contains(expectedKey)) continue;\n      numExpected++;\n\n      setPath(expectedKey);\n      if (!v.containsKey(expectedKey)) {\n        popPath();\n        setErr(\"expected key '\" + expectedKey + \"'\");\n        return false;\n      }\n\n      expected = expectedMap.get(expectedKey);\n\n      if (ordered) {\n        Map.Entry<String,Object> entry;\n        String foundKey;\n        for(;;) {\n          if (!iter.hasNext()) {\n            popPath();\n            setErr(\"expected key '\" + expectedKey + \"' in ordered map\");\n            return false;           \n          }\n          entry = iter.next();\n          foundKey = entry.getKey();\n          if (skips != null && skips.contains(foundKey))continue;\n          if (match != null && !match.contains(foundKey)) continue;\n          break;\n        }\n\n        if (!entry.getKey().equals(expectedKey)) {\n          popPath();          \n          setErr(\"expected key '\" + expectedKey + \"' instead of '\"+entry.getKey()+\"' in ordered map\");\n          return false;\n        }\n        val = entry.getValue();\n      } else {\n        if (skips != null && skips.contains(expectedKey)) continue;\n        val = v.get(expectedKey);\n      }\n\n      if (!match()) return false;\n    }\n\n    popPath();\n\n    // now check if there were any extra keys in the value (as long as there wasn't a specific list to include)\n    if (match == null) {\n      int skipped = 0;\n      if (skips != null) {\n        for (String skipStr : skips)\n          if (v.containsKey(skipStr)) skipped++;\n      }\n      if (numExpected != (v.size() - skipped)) {\n        HashSet<String> set = new HashSet<String>(v.keySet());\n        set.removeAll(expectedMap.keySet());\n        setErr(\"unexpected map keys \" + set); \n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/CollectionTester[JSONTestUtil]#matchMap().mjava","pathOld":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#matchMap().mjava","sourceNew":"  boolean matchMap() {\n    Map<String,Object> expectedMap = (Map<String,Object>)expected;\n    Map<String,Object> v = asMap();\n    if (v == null) return false;\n\n    boolean ordered = false;\n    String skipList = (String)expectedMap.get(\"_SKIP_\");\n    String matchList = (String)expectedMap.get(\"_MATCH_\");\n    Object orderedStr = expectedMap.get(\"_ORDERED_\");\n    Object unorderedStr = expectedMap.get(\"_UNORDERED_\");\n\n    if (orderedStr != null) ordered = true;\n    if (unorderedStr != null) ordered = false;\n\n    Set<String> match = null;\n    if (matchList != null) {\n      match = new HashSet(StrUtils.splitSmart(matchList,\",\",false));\n    }\n\n    Set<String> skips = null;\n    if (skipList != null) {\n      skips = new HashSet(StrUtils.splitSmart(skipList,\",\",false));\n    }\n\n    Set<String> keys = match != null ? match : expectedMap.keySet();\n    Set<String> visited = new HashSet<String>();\n\n    Iterator<Map.Entry<String,Object>> iter = ordered ? v.entrySet().iterator() : null;\n\n    int numExpected=0;\n\n    pushPath(null);\n    for (String expectedKey : keys) {\n      if (reserved.contains(expectedKey)) continue;\n      numExpected++;\n\n      setPath(expectedKey);\n      if (!v.containsKey(expectedKey)) {\n        popPath();\n        setErr(\"expected key '\" + expectedKey + \"'\");\n        return false;\n      }\n\n      expected = expectedMap.get(expectedKey);\n\n      if (ordered) {\n        Map.Entry<String,Object> entry;\n        String foundKey;\n        for(;;) {\n          if (!iter.hasNext()) {\n            popPath();\n            setErr(\"expected key '\" + expectedKey + \"' in ordered map\");\n            return false;           \n          }\n          entry = iter.next();\n          foundKey = entry.getKey();\n          if (skips != null && skips.contains(foundKey))continue;\n          if (match != null && !match.contains(foundKey)) continue;\n          break;\n        }\n\n        if (!entry.getKey().equals(expectedKey)) {\n          popPath();          \n          setErr(\"expected key '\" + expectedKey + \"' instead of '\"+entry.getKey()+\"' in ordered map\");\n          return false;\n        }\n        val = entry.getValue();\n      } else {\n        if (skips != null && skips.contains(expectedKey)) continue;\n        val = v.get(expectedKey);\n      }\n\n      if (!match()) return false;\n    }\n\n    popPath();\n\n    // now check if there were any extra keys in the value (as long as there wasn't a specific list to include)\n    if (match == null) {\n      int skipped = 0;\n      if (skips != null) {\n        for (String skipStr : skips)\n          if (v.containsKey(skipStr)) skipped++;\n      }\n      if (numExpected != (v.size() - skipped)) {\n        HashSet<String> set = new HashSet<String>(v.keySet());\n        set.removeAll(expectedMap.keySet());\n        setErr(\"unexpected map keys \" + set); \n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  boolean matchMap() {\n    Map<String,Object> expectedMap = (Map<String,Object>)expected;\n    Map<String,Object> v = asMap();\n    if (v == null) return false;\n\n    boolean ordered = false;\n    String skipList = (String)expectedMap.get(\"_SKIP_\");\n    String matchList = (String)expectedMap.get(\"_MATCH_\");\n    Object orderedStr = expectedMap.get(\"_ORDERED_\");\n    Object unorderedStr = expectedMap.get(\"_UNORDERED_\");\n\n    if (orderedStr != null) ordered = true;\n    if (unorderedStr != null) ordered = false;\n\n    Set<String> match = null;\n    if (matchList != null) {\n      match = new HashSet(StrUtils.splitSmart(matchList,\",\",false));\n    }\n\n    Set<String> skips = null;\n    if (skipList != null) {\n      skips = new HashSet(StrUtils.splitSmart(skipList,\",\",false));\n    }\n\n    Set<String> keys = match != null ? match : expectedMap.keySet();\n    Set<String> visited = new HashSet<String>();\n\n    Iterator<Map.Entry<String,Object>> iter = ordered ? v.entrySet().iterator() : null;\n\n    int numExpected=0;\n\n    pushPath(null);\n    for (String expectedKey : keys) {\n      if (reserved.contains(expectedKey)) continue;\n      numExpected++;\n\n      setPath(expectedKey);\n      if (!v.containsKey(expectedKey)) {\n        popPath();\n        setErr(\"expected key '\" + expectedKey + \"'\");\n        return false;\n      }\n\n      expected = expectedMap.get(expectedKey);\n\n      if (ordered) {\n        Map.Entry<String,Object> entry;\n        String foundKey;\n        for(;;) {\n          if (!iter.hasNext()) {\n            popPath();\n            setErr(\"expected key '\" + expectedKey + \"' in ordered map\");\n            return false;           \n          }\n          entry = iter.next();\n          foundKey = entry.getKey();\n          if (skips != null && skips.contains(foundKey))continue;\n          if (match != null && !match.contains(foundKey)) continue;\n          break;\n        }\n\n        if (!entry.getKey().equals(expectedKey)) {\n          popPath();          \n          setErr(\"expected key '\" + expectedKey + \"' instead of '\"+entry.getKey()+\"' in ordered map\");\n          return false;\n        }\n        val = entry.getValue();\n      } else {\n        if (skips != null && skips.contains(expectedKey)) continue;\n        val = v.get(expectedKey);\n      }\n\n      if (!match()) return false;\n    }\n\n    popPath();\n\n    // now check if there were any extra keys in the value (as long as there wasn't a specific list to include)\n    if (match == null) {\n      int skipped = 0;\n      if (skips != null) {\n        for (String skipStr : skips)\n          if (v.containsKey(skipStr)) skipped++;\n      }\n      if (numExpected != (v.size() - skipped)) {\n        HashSet<String> set = new HashSet<String>(v.keySet());\n        set.removeAll(expectedMap.keySet());\n        setErr(\"unexpected map keys \" + set); \n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/CollectionTester[JSONTestUtil]#matchMap().mjava","pathOld":"solr/src/test/org/apache/solr/CollectionTester[JSONTestUtil]#matchMap().mjava","sourceNew":"  boolean matchMap() {\n    Map<String,Object> expectedMap = (Map<String,Object>)expected;\n    Map<String,Object> v = asMap();\n    if (v == null) return false;\n\n    boolean ordered = false;\n    String skipList = (String)expectedMap.get(\"_SKIP_\");\n    String matchList = (String)expectedMap.get(\"_MATCH_\");\n    Object orderedStr = expectedMap.get(\"_ORDERED_\");\n    Object unorderedStr = expectedMap.get(\"_UNORDERED_\");\n\n    if (orderedStr != null) ordered = true;\n    if (unorderedStr != null) ordered = false;\n\n    Set<String> match = null;\n    if (matchList != null) {\n      match = new HashSet(StrUtils.splitSmart(matchList,\",\",false));\n    }\n\n    Set<String> skips = null;\n    if (skipList != null) {\n      skips = new HashSet(StrUtils.splitSmart(skipList,\",\",false));\n    }\n\n    Set<String> keys = match != null ? match : expectedMap.keySet();\n    Set<String> visited = new HashSet<String>();\n\n    Iterator<Map.Entry<String,Object>> iter = ordered ? v.entrySet().iterator() : null;\n\n    int numExpected=0;\n\n    pushPath(null);\n    for (String expectedKey : keys) {\n      if (reserved.contains(expectedKey)) continue;\n      numExpected++;\n\n      setPath(expectedKey);\n      if (!v.containsKey(expectedKey)) {\n        popPath();\n        setErr(\"expected key '\" + expectedKey + \"'\");\n        return false;\n      }\n\n      expected = expectedMap.get(expectedKey);\n\n      if (ordered) {\n        Map.Entry<String,Object> entry;\n        String foundKey;\n        for(;;) {\n          if (!iter.hasNext()) {\n            popPath();\n            setErr(\"expected key '\" + expectedKey + \"' in ordered map\");\n            return false;           \n          }\n          entry = iter.next();\n          foundKey = entry.getKey();\n          if (skips != null && skips.contains(foundKey))continue;\n          if (match != null && !match.contains(foundKey)) continue;\n          break;\n        }\n\n        if (!entry.getKey().equals(expectedKey)) {\n          popPath();          \n          setErr(\"expected key '\" + expectedKey + \"' instead of '\"+entry.getKey()+\"' in ordered map\");\n          return false;\n        }\n        val = entry.getValue();\n      } else {\n        if (skips != null && skips.contains(expectedKey)) continue;\n        val = v.get(expectedKey);\n      }\n\n      if (!match()) return false;\n    }\n\n    popPath();\n\n    // now check if there were any extra keys in the value (as long as there wasn't a specific list to include)\n    if (match == null) {\n      int skipped = 0;\n      if (skips != null) {\n        for (String skipStr : skips)\n          if (v.containsKey(skipStr)) skipped++;\n      }\n      if (numExpected != (v.size() - skipped)) {\n        HashSet<String> set = new HashSet<String>(v.keySet());\n        set.removeAll(expectedMap.keySet());\n        setErr(\"unexpected map keys \" + set); \n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  boolean matchMap() {\n    Map<String,Object> expectedMap = (Map<String,Object>)expected;\n    Map<String,Object> v = asMap();\n    if (v == null) return false;\n\n    boolean ordered = false;\n    String skipList = (String)expectedMap.get(\"_SKIP_\");\n    String matchList = (String)expectedMap.get(\"_MATCH_\");\n    Object orderedStr = expectedMap.get(\"_ORDERED_\");\n    Object unorderedStr = expectedMap.get(\"_UNORDERED_\");\n\n    if (orderedStr != null) ordered = true;\n    if (unorderedStr != null) ordered = false;\n\n    Set<String> match = null;\n    if (matchList != null) {\n      match = new HashSet(StrUtils.splitSmart(matchList,\",\",false));\n    }\n\n    Set<String> skips = null;\n    if (skipList != null) {\n      skips = new HashSet(StrUtils.splitSmart(skipList,\",\",false));\n    }\n\n    Set<String> keys = match != null ? match : expectedMap.keySet();\n    Set<String> visited = new HashSet<String>();\n\n    Iterator<Map.Entry<String,Object>> iter = ordered ? v.entrySet().iterator() : null;\n\n    int numExpected=0;\n\n    pushPath(null);\n    for (String expectedKey : keys) {\n      if (reserved.contains(expectedKey)) continue;\n      numExpected++;\n\n      setPath(expectedKey);\n      if (!v.containsKey(expectedKey)) {\n        popPath();\n        setErr(\"expected key '\" + expectedKey + \"'\");\n        return false;\n      }\n\n      expected = expectedMap.get(expectedKey);\n\n      if (ordered) {\n        Map.Entry<String,Object> entry;\n        String foundKey;\n        for(;;) {\n          if (!iter.hasNext()) {\n            popPath();\n            setErr(\"expected key '\" + expectedKey + \"' in ordered map\");\n            return false;           \n          }\n          entry = iter.next();\n          foundKey = entry.getKey();\n          if (skips != null && skips.contains(foundKey))continue;\n          if (match != null && !match.contains(foundKey)) continue;\n          break;\n        }\n\n        if (!entry.getKey().equals(expectedKey)) {\n          popPath();          \n          setErr(\"expected key '\" + expectedKey + \"' instead of '\"+entry.getKey()+\"' in ordered map\");\n          return false;\n        }\n        val = entry.getValue();\n      } else {\n        if (skips != null && skips.contains(expectedKey)) continue;\n        val = v.get(expectedKey);\n      }\n\n      if (!match()) return false;\n    }\n\n    popPath();\n\n    // now check if there were any extra keys in the value (as long as there wasn't a specific list to include)\n    if (match == null) {\n      int skipped = 0;\n      if (skips != null) {\n        for (String skipStr : skips)\n          if (v.containsKey(skipStr)) skipped++;\n      }\n      if (numExpected != (v.size() - skipped)) {\n        HashSet<String> set = new HashSet<String>(v.keySet());\n        set.removeAll(expectedMap.keySet());\n        setErr(\"unexpected map keys \" + set); \n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d7a4063d87c3c1f313aef4c02d5d02c3d2e18be":["7d5f59e6aef470c175c845a8c96ea65f20ae4c1f"],"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade":["6d7a4063d87c3c1f313aef4c02d5d02c3d2e18be"],"7d5f59e6aef470c175c845a8c96ea65f20ae4c1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade","b09c7419b92e982a901698cb401ce22ac35e4b04"],"b09c7419b92e982a901698cb401ce22ac35e4b04":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"d20d5e40789b1c42f4f926e3174b271256c43657":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"45669a651c970812a680841b97a77cce06af559f":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b09c7419b92e982a901698cb401ce22ac35e4b04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b09c7419b92e982a901698cb401ce22ac35e4b04"]},"commit2Childs":{"6d7a4063d87c3c1f313aef4c02d5d02c3d2e18be":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b09c7419b92e982a901698cb401ce22ac35e4b04","d20d5e40789b1c42f4f926e3174b271256c43657","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7d5f59e6aef470c175c845a8c96ea65f20ae4c1f":["6d7a4063d87c3c1f313aef4c02d5d02c3d2e18be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d5f59e6aef470c175c845a8c96ea65f20ae4c1f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b09c7419b92e982a901698cb401ce22ac35e4b04":["135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d20d5e40789b1c42f4f926e3174b271256c43657":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["45669a651c970812a680841b97a77cce06af559f"],"45669a651c970812a680841b97a77cce06af559f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d20d5e40789b1c42f4f926e3174b271256c43657","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}