{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller#checkCompressed(AbstractHttpMessage,InputStream).mjava","commits":[{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":1,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#checkCompressed(AbstractHttpMessage,InputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#checkCompressed(HttpMethod,InputStream).mjava","sourceNew":"  /*\n   * This is copied from CommonsHttpSolrServer\n   */\n  private InputStream checkCompressed(AbstractHttpMessage method, InputStream respBody) throws IOException {\n    Header contentEncodingHeader = method.getFirstHeader(\"Content-Encoding\");\n    if (contentEncodingHeader != null) {\n      String contentEncoding = contentEncodingHeader.getValue();\n      if (contentEncoding.contains(\"gzip\")) {\n        respBody = new GZIPInputStream(respBody);\n      } else if (contentEncoding.contains(\"deflate\")) {\n        respBody = new InflaterInputStream(respBody);\n      }\n    } else {\n      Header contentTypeHeader = method.getFirstHeader(\"Content-Type\");\n      if (contentTypeHeader != null) {\n        String contentType = contentTypeHeader.getValue();\n        if (contentType != null) {\n          if (contentType.startsWith(\"application/x-gzip-compressed\")) {\n            respBody = new GZIPInputStream(respBody);\n          } else if (contentType.startsWith(\"application/x-deflate\")) {\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n      }\n    }\n    return respBody;\n  }\n\n","sourceOld":"  /*\n   * This is copied from CommonsHttpSolrServer\n   */\n  private InputStream checkCompressed(HttpMethod method, InputStream respBody) throws IOException {\n    Header contentEncodingHeader = method.getResponseHeader(\"Content-Encoding\");\n    if (contentEncodingHeader != null) {\n      String contentEncoding = contentEncodingHeader.getValue();\n      if (contentEncoding.contains(\"gzip\")) {\n        respBody = new GZIPInputStream(respBody);\n      } else if (contentEncoding.contains(\"deflate\")) {\n        respBody = new InflaterInputStream(respBody);\n      }\n    } else {\n      Header contentTypeHeader = method.getResponseHeader(\"Content-Type\");\n      if (contentTypeHeader != null) {\n        String contentType = contentTypeHeader.getValue();\n        if (contentType != null) {\n          if (contentType.startsWith(\"application/x-gzip-compressed\")) {\n            respBody = new GZIPInputStream(respBody);\n          } else if (contentType.startsWith(\"application/x-deflate\")) {\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n      }\n    }\n    return respBody;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2425308ebcd91b538a601df94ae1551ccaab2bb","date":1340702883,"type":4,"author":"Sami Siren","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#checkCompressed(AbstractHttpMessage,InputStream).mjava","sourceNew":null,"sourceOld":"  /*\n   * This is copied from CommonsHttpSolrServer\n   */\n  private InputStream checkCompressed(AbstractHttpMessage method, InputStream respBody) throws IOException {\n    Header contentEncodingHeader = method.getFirstHeader(\"Content-Encoding\");\n    if (contentEncodingHeader != null) {\n      String contentEncoding = contentEncodingHeader.getValue();\n      if (contentEncoding.contains(\"gzip\")) {\n        respBody = new GZIPInputStream(respBody);\n      } else if (contentEncoding.contains(\"deflate\")) {\n        respBody = new InflaterInputStream(respBody);\n      }\n    } else {\n      Header contentTypeHeader = method.getFirstHeader(\"Content-Type\");\n      if (contentTypeHeader != null) {\n        String contentType = contentTypeHeader.getValue();\n        if (contentType != null) {\n          if (contentType.startsWith(\"application/x-gzip-compressed\")) {\n            respBody = new GZIPInputStream(respBody);\n          } else if (contentType.startsWith(\"application/x-deflate\")) {\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n      }\n    }\n    return respBody;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#checkCompressed(AbstractHttpMessage,InputStream).mjava","sourceNew":null,"sourceOld":"  /*\n   * This is copied from CommonsHttpSolrServer\n   */\n  private InputStream checkCompressed(AbstractHttpMessage method, InputStream respBody) throws IOException {\n    Header contentEncodingHeader = method.getFirstHeader(\"Content-Encoding\");\n    if (contentEncodingHeader != null) {\n      String contentEncoding = contentEncodingHeader.getValue();\n      if (contentEncoding.contains(\"gzip\")) {\n        respBody = new GZIPInputStream(respBody);\n      } else if (contentEncoding.contains(\"deflate\")) {\n        respBody = new InflaterInputStream(respBody);\n      }\n    } else {\n      Header contentTypeHeader = method.getFirstHeader(\"Content-Type\");\n      if (contentTypeHeader != null) {\n        String contentType = contentTypeHeader.getValue();\n        if (contentType != null) {\n          if (contentType.startsWith(\"application/x-gzip-compressed\")) {\n            respBody = new GZIPInputStream(respBody);\n          } else if (contentType.startsWith(\"application/x-deflate\")) {\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n      }\n    }\n    return respBody;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6","f2425308ebcd91b538a601df94ae1551ccaab2bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2425308ebcd91b538a601df94ae1551ccaab2bb":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f2425308ebcd91b538a601df94ae1551ccaab2bb"]},"commit2Childs":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["fe33227f6805edab2036cbb80645cc4e2d1fa424","f2425308ebcd91b538a601df94ae1551ccaab2bb"],"f2425308ebcd91b538a601df94ae1551ccaab2bb":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}