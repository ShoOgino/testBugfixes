{"path":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testSoftDeleteWithTryUpdateDocValue().mjava","commits":[{"id":"76fa08feb5824ec6249c5398bfc8578b93738cd8","date":1530756947,"type":0,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testSoftDeleteWithTryUpdateDocValue().mjava","pathOld":"/dev/null","sourceNew":"  public void testSoftDeleteWithTryUpdateDocValue() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\")\n        .setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\", MatchAllDocsQuery::new, newLogMergePolicy()));\n    IndexWriter writer = new IndexWriter(dir, config);\n    SearcherManager sm = new SearcherManager(writer, new SearcherFactory());\n    Document d = new Document();\n    d.add(new StringField(\"id\", \"0\", Field.Store.YES));\n    writer.addDocument(d);\n    sm.maybeRefreshBlocking();\n    doUpdate(new Term(\"id\", \"0\"), writer,\n        new NumericDocValuesField(\"soft_delete\", 1), new NumericDocValuesField(\"other-field\", 1));\n    sm.maybeRefreshBlocking();\n    assertEquals(1, writer.segmentInfos.asList().size());\n    SegmentCommitInfo si = writer.segmentInfos.asList().get(0);\n    assertEquals(1, si.getSoftDelCount());\n    assertEquals(1, si.info.maxDoc());\n    IOUtils.close(sm, writer, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["631ea3d1607299c59f33edef140ffc19a81f07a0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testSoftDeleteWithTryUpdateDocValue().mjava","pathOld":"/dev/null","sourceNew":"  public void testSoftDeleteWithTryUpdateDocValue() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\")\n        .setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\", MatchAllDocsQuery::new, newLogMergePolicy()));\n    IndexWriter writer = new IndexWriter(dir, config);\n    SearcherManager sm = new SearcherManager(writer, new SearcherFactory());\n    Document d = new Document();\n    d.add(new StringField(\"id\", \"0\", Field.Store.YES));\n    writer.addDocument(d);\n    sm.maybeRefreshBlocking();\n    doUpdate(new Term(\"id\", \"0\"), writer,\n        new NumericDocValuesField(\"soft_delete\", 1), new NumericDocValuesField(\"other-field\", 1));\n    sm.maybeRefreshBlocking();\n    assertEquals(1, writer.segmentInfos.asList().size());\n    SegmentCommitInfo si = writer.segmentInfos.asList().get(0);\n    assertEquals(1, si.getSoftDelCount());\n    assertEquals(1, si.info.maxDoc());\n    IOUtils.close(sm, writer, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testSoftDeleteWithTryUpdateDocValue().mjava","pathOld":"/dev/null","sourceNew":"  public void testSoftDeleteWithTryUpdateDocValue() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\")\n        .setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\", MatchAllDocsQuery::new, newLogMergePolicy()));\n    IndexWriter writer = new IndexWriter(dir, config);\n    SearcherManager sm = new SearcherManager(writer, new SearcherFactory());\n    Document d = new Document();\n    d.add(new StringField(\"id\", \"0\", Field.Store.YES));\n    writer.addDocument(d);\n    sm.maybeRefreshBlocking();\n    doUpdate(new Term(\"id\", \"0\"), writer,\n        new NumericDocValuesField(\"soft_delete\", 1), new NumericDocValuesField(\"other-field\", 1));\n    sm.maybeRefreshBlocking();\n    assertEquals(1, writer.segmentInfos.asList().size());\n    SegmentCommitInfo si = writer.segmentInfos.asList().get(0);\n    assertEquals(1, si.getSoftDelCount());\n    assertEquals(1, si.info.maxDoc());\n    IOUtils.close(sm, writer, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"631ea3d1607299c59f33edef140ffc19a81f07a0","date":1532450367,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testSoftDeleteWithTryUpdateDocValue().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testSoftDeleteWithTryUpdateDocValue().mjava","sourceNew":"  public void testSoftDeleteWithTryUpdateDocValue() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\")\n        .setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\", MatchAllDocsQuery::new, newLogMergePolicy()));\n    IndexWriter writer = new IndexWriter(dir, config);\n    SearcherManager sm = new SearcherManager(writer, new SearcherFactory());\n    Document d = new Document();\n    d.add(new StringField(\"id\", \"0\", Field.Store.YES));\n    writer.addDocument(d);\n    sm.maybeRefreshBlocking();\n    doUpdate(new Term(\"id\", \"0\"), writer,\n        new NumericDocValuesField(\"soft_delete\", 1), new NumericDocValuesField(\"other-field\", 1));\n    sm.maybeRefreshBlocking();\n    assertEquals(1, writer.listOfSegmentCommitInfos().size());\n    SegmentCommitInfo si = writer.listOfSegmentCommitInfos().get(0);\n    assertEquals(1, si.getSoftDelCount());\n    assertEquals(1, si.info.maxDoc());\n    IOUtils.close(sm, writer, dir);\n  }\n\n","sourceOld":"  public void testSoftDeleteWithTryUpdateDocValue() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\")\n        .setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\", MatchAllDocsQuery::new, newLogMergePolicy()));\n    IndexWriter writer = new IndexWriter(dir, config);\n    SearcherManager sm = new SearcherManager(writer, new SearcherFactory());\n    Document d = new Document();\n    d.add(new StringField(\"id\", \"0\", Field.Store.YES));\n    writer.addDocument(d);\n    sm.maybeRefreshBlocking();\n    doUpdate(new Term(\"id\", \"0\"), writer,\n        new NumericDocValuesField(\"soft_delete\", 1), new NumericDocValuesField(\"other-field\", 1));\n    sm.maybeRefreshBlocking();\n    assertEquals(1, writer.segmentInfos.asList().size());\n    SegmentCommitInfo si = writer.segmentInfos.asList().get(0);\n    assertEquals(1, si.getSoftDelCount());\n    assertEquals(1, si.info.maxDoc());\n    IOUtils.close(sm, writer, dir);\n  }\n\n","bugFix":["76fa08feb5824ec6249c5398bfc8578b93738cd8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2","date":1588002560,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testSoftDeleteWithTryUpdateDocValue().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testSoftDeleteWithTryUpdateDocValue().mjava","sourceNew":"  public void testSoftDeleteWithTryUpdateDocValue() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\")\n        .setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\", MatchAllDocsQuery::new, newLogMergePolicy()));\n    IndexWriter writer = new IndexWriter(dir, config);\n    SearcherManager sm = new SearcherManager(writer, new SearcherFactory());\n    Document d = new Document();\n    d.add(new StringField(\"id\", \"0\", Field.Store.YES));\n    writer.addDocument(d);\n    sm.maybeRefreshBlocking();\n    doUpdate(new Term(\"id\", \"0\"), writer,\n        new NumericDocValuesField(\"soft_delete\", 1), new NumericDocValuesField(\"other-field\", 1));\n    sm.maybeRefreshBlocking();\n    assertEquals(1, writer.cloneSegmentInfos().size());\n    SegmentCommitInfo si = writer.cloneSegmentInfos().info(0);\n    assertEquals(1, si.getSoftDelCount());\n    assertEquals(1, si.info.maxDoc());\n    IOUtils.close(sm, writer, dir);\n  }\n\n","sourceOld":"  public void testSoftDeleteWithTryUpdateDocValue() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\")\n        .setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\", MatchAllDocsQuery::new, newLogMergePolicy()));\n    IndexWriter writer = new IndexWriter(dir, config);\n    SearcherManager sm = new SearcherManager(writer, new SearcherFactory());\n    Document d = new Document();\n    d.add(new StringField(\"id\", \"0\", Field.Store.YES));\n    writer.addDocument(d);\n    sm.maybeRefreshBlocking();\n    doUpdate(new Term(\"id\", \"0\"), writer,\n        new NumericDocValuesField(\"soft_delete\", 1), new NumericDocValuesField(\"other-field\", 1));\n    sm.maybeRefreshBlocking();\n    assertEquals(1, writer.listOfSegmentCommitInfos().size());\n    SegmentCommitInfo si = writer.listOfSegmentCommitInfos().get(0);\n    assertEquals(1, si.getSoftDelCount());\n    assertEquals(1, si.info.maxDoc());\n    IOUtils.close(sm, writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","76fa08feb5824ec6249c5398bfc8578b93738cd8"],"631ea3d1607299c59f33edef140ffc19a81f07a0":["76fa08feb5824ec6249c5398bfc8578b93738cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["631ea3d1607299c59f33edef140ffc19a81f07a0"],"76fa08feb5824ec6249c5398bfc8578b93738cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","76fa08feb5824ec6249c5398bfc8578b93738cd8"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"631ea3d1607299c59f33edef140ffc19a81f07a0":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","76fa08feb5824ec6249c5398bfc8578b93738cd8","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"76fa08feb5824ec6249c5398bfc8578b93738cd8":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","631ea3d1607299c59f33edef140ffc19a81f07a0","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}