{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateHttp2SolrClient#waitForEmptyQueue().mjava","commits":[{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateHttp2SolrClient#waitForEmptyQueue().mjava","pathOld":"/dev/null","sourceNew":"  private void waitForEmptyQueue() {\n    boolean threadInterrupted = Thread.currentThread().isInterrupted();\n\n    while (!queue.isEmpty()) {\n      if (scheduler.isTerminated()) {\n        log.warn(\"The task queue still has elements but the update scheduler {} is terminated. Can't process any more tasks. \"\n            + \"Queue size: {}, Runners: {}. Current thread Interrupted? {}\", scheduler, queue.size(), runners.size(), threadInterrupted);\n        break;\n      }\n\n      synchronized (runners) {\n        int queueSize = queue.size();\n        if (queueSize > 0 && runners.isEmpty()) {\n          log.warn(\"No more runners, but queue still has \" +\n              queueSize + \" adding more runners to process remaining requests on queue\");\n          addRunner();\n        }\n      }\n      synchronized (queue) {\n        try {\n          queue.wait(250);\n        } catch (InterruptedException e) {\n          // If we set the thread as interrupted again, the next time the wait it's called i t's going to return immediately\n          threadInterrupted = true;\n          log.warn(\"Thread interrupted while waiting for update queue to be empty. There are still {} elements in the queue.\",\n              queue.size());\n        }\n      }\n    }\n    if (threadInterrupted) {\n      Thread.currentThread().interrupt();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fd332226a93e244bd33f35c03128eb09cbf3c88","date":1570651010,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateHttp2SolrClient#waitForEmptyQueue().mjava","sourceNew":null,"sourceOld":"  private void waitForEmptyQueue() {\n    boolean threadInterrupted = Thread.currentThread().isInterrupted();\n\n    while (!queue.isEmpty()) {\n      if (scheduler.isTerminated()) {\n        log.warn(\"The task queue still has elements but the update scheduler {} is terminated. Can't process any more tasks. \"\n            + \"Queue size: {}, Runners: {}. Current thread Interrupted? {}\", scheduler, queue.size(), runners.size(), threadInterrupted);\n        break;\n      }\n\n      synchronized (runners) {\n        int queueSize = queue.size();\n        if (queueSize > 0 && runners.isEmpty()) {\n          log.warn(\"No more runners, but queue still has \" +\n              queueSize + \" adding more runners to process remaining requests on queue\");\n          addRunner();\n        }\n      }\n      synchronized (queue) {\n        try {\n          queue.wait(250);\n        } catch (InterruptedException e) {\n          // If we set the thread as interrupted again, the next time the wait it's called i t's going to return immediately\n          threadInterrupted = true;\n          log.warn(\"Thread interrupted while waiting for update queue to be empty. There are still {} elements in the queue.\",\n              queue.size());\n        }\n      }\n    }\n    if (threadInterrupted) {\n      Thread.currentThread().interrupt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateHttp2SolrClient#waitForEmptyQueue().mjava","sourceNew":null,"sourceOld":"  private void waitForEmptyQueue() {\n    boolean threadInterrupted = Thread.currentThread().isInterrupted();\n\n    while (!queue.isEmpty()) {\n      if (scheduler.isTerminated()) {\n        log.warn(\"The task queue still has elements but the update scheduler {} is terminated. Can't process any more tasks. \"\n            + \"Queue size: {}, Runners: {}. Current thread Interrupted? {}\", scheduler, queue.size(), runners.size(), threadInterrupted);\n        break;\n      }\n\n      synchronized (runners) {\n        int queueSize = queue.size();\n        if (queueSize > 0 && runners.isEmpty()) {\n          log.warn(\"No more runners, but queue still has \" +\n              queueSize + \" adding more runners to process remaining requests on queue\");\n          addRunner();\n        }\n      }\n      synchronized (queue) {\n        try {\n          queue.wait(250);\n        } catch (InterruptedException e) {\n          // If we set the thread as interrupted again, the next time the wait it's called i t's going to return immediately\n          threadInterrupted = true;\n          log.warn(\"Thread interrupted while waiting for update queue to be empty. There are still {} elements in the queue.\",\n              queue.size());\n        }\n      }\n    }\n    if (threadInterrupted) {\n      Thread.currentThread().interrupt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2fd332226a93e244bd33f35c03128eb09cbf3c88":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2fd332226a93e244bd33f35c03128eb09cbf3c88"],"b0b597c65628ca9e73913a07e81691f8229bae35":["1a77e5e21cbd575a8240b0e3926164f15295f4e8","2fd332226a93e244bd33f35c03128eb09cbf3c88"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["2fd332226a93e244bd33f35c03128eb09cbf3c88","b0b597c65628ca9e73913a07e81691f8229bae35"],"2fd332226a93e244bd33f35c03128eb09cbf3c88":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}