{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readBinary(ChecksumIndexInput,String).mjava","commits":[{"id":"fb9d1512598fc72005b830d5e2b88e61a0f4b374","date":1543843391,"type":1,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readBinary(ChecksumIndexInput,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readBinary(ChecksumIndexInput).mjava","sourceNew":"  private BinaryEntry readBinary(ChecksumIndexInput meta, String name) throws IOException {\n    BinaryEntry entry = new BinaryEntry(name);\n    entry.dataOffset = meta.readLong();\n    entry.dataLength = meta.readLong();\n    entry.docsWithFieldOffset = meta.readLong();\n    entry.docsWithFieldLength = meta.readLong();\n    entry.numDocsWithField = meta.readInt();\n    entry.minLength = meta.readInt();\n    entry.maxLength = meta.readInt();\n    if (entry.minLength < entry.maxLength) {\n      entry.addressesOffset = meta.readLong();\n      final int blockShift = meta.readVInt();\n      entry.addressesMeta = DirectMonotonicReader.loadMeta(meta, entry.numDocsWithField + 1L, blockShift);\n      ramBytesUsed += entry.addressesMeta.ramBytesUsed();\n      entry.addressesLength = meta.readLong();\n    }\n    return entry;\n  }\n\n","sourceOld":"  private BinaryEntry readBinary(ChecksumIndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.dataOffset = meta.readLong();\n    entry.dataLength = meta.readLong();\n    entry.docsWithFieldOffset = meta.readLong();\n    entry.docsWithFieldLength = meta.readLong();\n    entry.numDocsWithField = meta.readInt();\n    entry.minLength = meta.readInt();\n    entry.maxLength = meta.readInt();\n    if (entry.minLength < entry.maxLength) {\n      entry.addressesOffset = meta.readLong();\n      final int blockShift = meta.readVInt();\n      entry.addressesMeta = DirectMonotonicReader.loadMeta(meta, entry.numDocsWithField + 1L, blockShift);\n      ramBytesUsed += entry.addressesMeta.ramBytesUsed();\n      entry.addressesLength = meta.readLong();\n    }\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c74cb19c6e988ccfef4286a1f3f0e5930f0863e","date":1544534277,"type":5,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readBinary(ChecksumIndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readBinary(ChecksumIndexInput,String).mjava","sourceNew":"  private BinaryEntry readBinary(ChecksumIndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.dataOffset = meta.readLong();\n    entry.dataLength = meta.readLong();\n    entry.docsWithFieldOffset = meta.readLong();\n    entry.docsWithFieldLength = meta.readLong();\n    entry.numDocsWithField = meta.readInt();\n    entry.minLength = meta.readInt();\n    entry.maxLength = meta.readInt();\n    if (entry.minLength < entry.maxLength) {\n      entry.addressesOffset = meta.readLong();\n      final int blockShift = meta.readVInt();\n      entry.addressesMeta = DirectMonotonicReader.loadMeta(meta, entry.numDocsWithField + 1L, blockShift);\n      ramBytesUsed += entry.addressesMeta.ramBytesUsed();\n      entry.addressesLength = meta.readLong();\n    }\n    return entry;\n  }\n\n","sourceOld":"  private BinaryEntry readBinary(ChecksumIndexInput meta, String name) throws IOException {\n    BinaryEntry entry = new BinaryEntry(name);\n    entry.dataOffset = meta.readLong();\n    entry.dataLength = meta.readLong();\n    entry.docsWithFieldOffset = meta.readLong();\n    entry.docsWithFieldLength = meta.readLong();\n    entry.numDocsWithField = meta.readInt();\n    entry.minLength = meta.readInt();\n    entry.maxLength = meta.readInt();\n    if (entry.minLength < entry.maxLength) {\n      entry.addressesOffset = meta.readLong();\n      final int blockShift = meta.readVInt();\n      entry.addressesMeta = DirectMonotonicReader.loadMeta(meta, entry.numDocsWithField + 1L, blockShift);\n      ramBytesUsed += entry.addressesMeta.ramBytesUsed();\n      entry.addressesLength = meta.readLong();\n    }\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd70c9571310639a77f0123aea0db41077d9bb6","date":1544538617,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readBinary(ChecksumIndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readBinary(ChecksumIndexInput,String).mjava","sourceNew":"  private BinaryEntry readBinary(ChecksumIndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.dataOffset = meta.readLong();\n    entry.dataLength = meta.readLong();\n    entry.docsWithFieldOffset = meta.readLong();\n    entry.docsWithFieldLength = meta.readLong();\n    entry.numDocsWithField = meta.readInt();\n    entry.minLength = meta.readInt();\n    entry.maxLength = meta.readInt();\n    if (entry.minLength < entry.maxLength) {\n      entry.addressesOffset = meta.readLong();\n      final int blockShift = meta.readVInt();\n      entry.addressesMeta = DirectMonotonicReader.loadMeta(meta, entry.numDocsWithField + 1L, blockShift);\n      ramBytesUsed += entry.addressesMeta.ramBytesUsed();\n      entry.addressesLength = meta.readLong();\n    }\n    return entry;\n  }\n\n","sourceOld":"  private BinaryEntry readBinary(ChecksumIndexInput meta, String name) throws IOException {\n    BinaryEntry entry = new BinaryEntry(name);\n    entry.dataOffset = meta.readLong();\n    entry.dataLength = meta.readLong();\n    entry.docsWithFieldOffset = meta.readLong();\n    entry.docsWithFieldLength = meta.readLong();\n    entry.numDocsWithField = meta.readInt();\n    entry.minLength = meta.readInt();\n    entry.maxLength = meta.readInt();\n    if (entry.minLength < entry.maxLength) {\n      entry.addressesOffset = meta.readLong();\n      final int blockShift = meta.readVInt();\n      entry.addressesMeta = DirectMonotonicReader.loadMeta(meta, entry.numDocsWithField + 1L, blockShift);\n      ramBytesUsed += entry.addressesMeta.ramBytesUsed();\n      entry.addressesLength = meta.readLong();\n    }\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cfd70c9571310639a77f0123aea0db41077d9bb6":["fb9d1512598fc72005b830d5e2b88e61a0f4b374","5c74cb19c6e988ccfef4286a1f3f0e5930f0863e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb9d1512598fc72005b830d5e2b88e61a0f4b374":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c74cb19c6e988ccfef4286a1f3f0e5930f0863e":["fb9d1512598fc72005b830d5e2b88e61a0f4b374"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd70c9571310639a77f0123aea0db41077d9bb6"]},"commit2Childs":{"cfd70c9571310639a77f0123aea0db41077d9bb6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb9d1512598fc72005b830d5e2b88e61a0f4b374"],"fb9d1512598fc72005b830d5e2b88e61a0f4b374":["cfd70c9571310639a77f0123aea0db41077d9bb6","5c74cb19c6e988ccfef4286a1f3f0e5930f0863e"],"5c74cb19c6e988ccfef4286a1f3f0e5930f0863e":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}