{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#SimpleTextBKDReader(IndexInput,int,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","commits":[{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#SimpleTextBKDReader(IndexInput,int,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#SimpleTextBKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","sourceNew":"  public SimpleTextBKDReader(IndexInput in, int numDataDims, int numIndexDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                             byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    this.in = in;\n    this.numDataDims = numDataDims;\n    this.numIndexDims = numIndexDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    // no version check here because callers of this API (SimpleText) have no back compat:\n    bytesPerIndexEntry = numIndexDims == 1 ? bytesPerDim : bytesPerDim + 1;\n    packedBytesLength = numDataDims * bytesPerDim;\n    packedIndexBytesLength = numIndexDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    this.docCount = docCount;\n    this.version = SimpleTextBKDWriter.VERSION_CURRENT;\n    assert minPackedValue.length == packedIndexBytesLength;\n    assert maxPackedValue.length == packedIndexBytesLength;\n  }\n\n","sourceOld":"  public SimpleTextBKDReader(IndexInput in, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                             byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    this.in = in;\n    this.numDims = numDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    // no version check here because callers of this API (SimpleText) have no back compat:\n    bytesPerIndexEntry = numDims == 1 ? bytesPerDim : bytesPerDim + 1;\n    packedBytesLength = numDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    this.docCount = docCount;\n    this.version = SimpleTextBKDWriter.VERSION_CURRENT;\n    assert minPackedValue.length == packedBytesLength;\n    assert maxPackedValue.length == packedBytesLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#SimpleTextBKDReader(IndexInput,int,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#SimpleTextBKDReader(IndexInput,int,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","sourceNew":"  public SimpleTextBKDReader(IndexInput in, int numDims, int numIndexDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                             byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    this.in = in;\n    this.numDims = numDims;\n    this.numIndexDims = numIndexDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    // no version check here because callers of this API (SimpleText) have no back compat:\n    bytesPerIndexEntry = numIndexDims == 1 ? bytesPerDim : bytesPerDim + 1;\n    packedBytesLength = numDims * bytesPerDim;\n    packedIndexBytesLength = numIndexDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    this.docCount = docCount;\n    this.version = SimpleTextBKDWriter.VERSION_CURRENT;\n    assert minPackedValue.length == packedIndexBytesLength;\n    assert maxPackedValue.length == packedIndexBytesLength;\n  }\n\n","sourceOld":"  public SimpleTextBKDReader(IndexInput in, int numDataDims, int numIndexDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                             byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    this.in = in;\n    this.numDataDims = numDataDims;\n    this.numIndexDims = numIndexDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    // no version check here because callers of this API (SimpleText) have no back compat:\n    bytesPerIndexEntry = numIndexDims == 1 ? bytesPerDim : bytesPerDim + 1;\n    packedBytesLength = numDataDims * bytesPerDim;\n    packedIndexBytesLength = numIndexDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    this.docCount = docCount;\n    this.version = SimpleTextBKDWriter.VERSION_CURRENT;\n    assert minPackedValue.length == packedIndexBytesLength;\n    assert maxPackedValue.length == packedIndexBytesLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6652c943595e92c187ee904c382863013eae28f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}