{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetShardValue(String,String,String,Object,boolean,boolean).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetShardValue(String,String,String,Object,boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetShardValue(String,String,String,Object,boolean,boolean).mjava","sourceNew":"  /**\n   * Set per-collection value (eg. a metric). This value will be applied to each replica in a selected shard.\n   * @param collection collection name\n   * @param shard shard name. If null then all shards will be affected.\n   * @param key property name\n   * @param value property value\n   * @param delta if true then treat the numeric value as delta to add to the existing value\n   *              (or set the value to delta if missing)\n   * @param divide if the value is a {@link Number} and this is true, then the value will be evenly\n   *               divided by the number of replicas.\n   */\n  public void simSetShardValue(String collection, String shard, String key, Object value, boolean delta, boolean divide) throws Exception {\n    final List<ReplicaInfo> infos;\n    if (shard == null) {\n      infos = new ArrayList<>();\n      colShardReplicaMap.computeIfAbsent(collection, c -> new ConcurrentHashMap<>())\n        .forEach((sh, replicas) -> infos.addAll(replicas));\n    } else {\n      infos = colShardReplicaMap.computeIfAbsent(collection, c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(shard, s -> new ArrayList<>());\n    }\n    if (infos.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection \" + collection + \" doesn't exist (shard=\" + shard + \").\");\n    }\n    if (divide && value != null && (value instanceof Number)) {\n      if ((value instanceof Long) || (value instanceof Integer)) {\n        value = ((Number) value).longValue() / infos.size();\n      } else {\n        value = ((Number) value).doubleValue() / infos.size();\n      }\n    }\n    for (ReplicaInfo r : infos) {\n      synchronized (r) {\n        if (value == null) {\n          r.getVariables().remove(key);\n        } else {\n          if (delta) {\n            Object prevValue = r.getVariables().get(key);\n            if (prevValue != null) {\n              if ((prevValue instanceof Number) && (value instanceof Number)) {\n                if (((prevValue instanceof Long) || (prevValue instanceof Integer) ||\n                    (prevValue instanceof AtomicLong) || (prevValue instanceof AtomicInteger)) &&\n                    ((value instanceof Long) || (value instanceof Integer))) {\n                  long newValue = ((Number)prevValue).longValue() + ((Number)value).longValue();\n                  // minimize object allocations\n                  if (prevValue instanceof AtomicLong) {\n                    ((AtomicLong)prevValue).set(newValue);\n                  } else if (prevValue instanceof AtomicInteger) {\n                    ((AtomicInteger)prevValue).set(((Number)prevValue).intValue() + ((Number)value).intValue());\n                  } else {\n                    r.getVariables().put(key, newValue);\n                  }\n                } else {\n                  double newValue = ((Number)prevValue).doubleValue() + ((Number)value).doubleValue();\n                  if (prevValue instanceof AtomicDouble) {\n                    ((AtomicDouble)prevValue).set(newValue);\n                  } else {\n                    r.getVariables().put(key, newValue);\n                  }\n                }\n              } else {\n                throw new UnsupportedOperationException(\"delta cannot be applied to non-numeric values: \" + prevValue + \" and \" + value);\n              }\n            } else {\n              if (value instanceof Integer) {\n                r.getVariables().put(key, new AtomicInteger((Integer)value));\n              } else if (value instanceof Long) {\n                r.getVariables().put(key, new AtomicLong((Long)value));\n              } else if (value instanceof Double) {\n                r.getVariables().put(key, new AtomicDouble((Double)value));\n              } else {\n                r.getVariables().put(key, value);\n              }\n            }\n          } else {\n            if (value instanceof Integer) {\n              r.getVariables().put(key, new AtomicInteger((Integer)value));\n            } else if (value instanceof Long) {\n              r.getVariables().put(key, new AtomicLong((Long)value));\n            } else if (value instanceof Double) {\n              r.getVariables().put(key, new AtomicDouble((Double)value));\n            } else {\n              r.getVariables().put(key, value);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Set per-collection value (eg. a metric). This value will be applied to each replica in a selected shard.\n   * @param collection collection name\n   * @param shard shard name. If null then all shards will be affected.\n   * @param key property name\n   * @param value property value\n   * @param delta if true then treat the numeric value as delta to add to the existing value\n   *              (or set the value to delta if missing)\n   * @param divide if the value is a {@link Number} and this is true, then the value will be evenly\n   *               divided by the number of replicas.\n   */\n  public void simSetShardValue(String collection, String shard, String key, Object value, boolean delta, boolean divide) throws Exception {\n    final List<ReplicaInfo> infos;\n    if (shard == null) {\n      infos = new ArrayList<>();\n      colShardReplicaMap.computeIfAbsent(collection, c -> new ConcurrentHashMap<>())\n        .forEach((sh, replicas) -> infos.addAll(replicas));\n    } else {\n      infos = colShardReplicaMap.computeIfAbsent(collection, c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(shard, s -> new ArrayList<>());\n    }\n    if (infos.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection \" + collection + \" doesn't exist (shard=\" + shard + \").\");\n    }\n    if (divide && value != null && (value instanceof Number)) {\n      if ((value instanceof Long) || (value instanceof Integer)) {\n        value = ((Number) value).longValue() / infos.size();\n      } else {\n        value = ((Number) value).doubleValue() / infos.size();\n      }\n    }\n    for (ReplicaInfo r : infos) {\n      synchronized (r) {\n        if (value == null) {\n          r.getVariables().remove(key);\n        } else {\n          if (delta) {\n            Object prevValue = r.getVariables().get(key);\n            if (prevValue != null) {\n              if ((prevValue instanceof Number) && (value instanceof Number)) {\n                if (((prevValue instanceof Long) || (prevValue instanceof Integer) ||\n                    (prevValue instanceof AtomicLong) || (prevValue instanceof AtomicInteger)) &&\n                    ((value instanceof Long) || (value instanceof Integer))) {\n                  long newValue = ((Number)prevValue).longValue() + ((Number)value).longValue();\n                  // minimize object allocations\n                  if (prevValue instanceof AtomicLong) {\n                    ((AtomicLong)prevValue).set(newValue);\n                  } else if (prevValue instanceof AtomicInteger) {\n                    ((AtomicInteger)prevValue).set(((Number)prevValue).intValue() + ((Number)value).intValue());\n                  } else {\n                    r.getVariables().put(key, newValue);\n                  }\n                } else {\n                  double newValue = ((Number)prevValue).doubleValue() + ((Number)value).doubleValue();\n                  if (prevValue instanceof AtomicDouble) {\n                    ((AtomicDouble)prevValue).set(newValue);\n                  } else {\n                    r.getVariables().put(key, newValue);\n                  }\n                }\n              } else {\n                throw new UnsupportedOperationException(\"delta cannot be applied to non-numeric values: \" + prevValue + \" and \" + value);\n              }\n            } else {\n              if (value instanceof Integer) {\n                r.getVariables().put(key, new AtomicInteger((Integer)value));\n              } else if (value instanceof Long) {\n                r.getVariables().put(key, new AtomicLong((Long)value));\n              } else if (value instanceof Double) {\n                r.getVariables().put(key, new AtomicDouble((Double)value));\n              } else {\n                r.getVariables().put(key, value);\n              }\n            }\n          } else {\n            if (value instanceof Integer) {\n              r.getVariables().put(key, new AtomicInteger((Integer)value));\n            } else if (value instanceof Long) {\n              r.getVariables().put(key, new AtomicLong((Long)value));\n            } else if (value instanceof Double) {\n              r.getVariables().put(key, new AtomicDouble((Double)value));\n            } else {\n              r.getVariables().put(key, value);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetShardValue(String,String,String,Object,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetShardValue(String,String,String,Object,boolean,boolean).mjava","sourceNew":"  /**\n   * Set per-collection value (eg. a metric). This value will be applied to each replica in a selected shard.\n   * @param collection collection name\n   * @param shard shard name. If null then all shards will be affected.\n   * @param key property name\n   * @param value property value\n   * @param delta if true then treat the numeric value as delta to add to the existing value\n   *              (or set the value to delta if missing)\n   * @param divide if the value is a {@link Number} and this is true, then the value will be evenly\n   *               divided by the number of replicas.\n   */\n  public void simSetShardValue(String collection, String shard, String key, Object value, boolean delta, boolean divide) throws Exception {\n    final List<Replica> infos;\n    if (shard == null) {\n      infos = new ArrayList<>();\n      colShardReplicaMap.computeIfAbsent(collection, c -> new ConcurrentHashMap<>())\n        .forEach((sh, replicas) -> infos.addAll(replicas));\n    } else {\n      infos = colShardReplicaMap.computeIfAbsent(collection, c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(shard, s -> new ArrayList<>());\n    }\n    if (infos.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection \" + collection + \" doesn't exist (shard=\" + shard + \").\");\n    }\n    if (divide && value != null && (value instanceof Number)) {\n      if ((value instanceof Long) || (value instanceof Integer)) {\n        value = ((Number) value).longValue() / infos.size();\n      } else {\n        value = ((Number) value).doubleValue() / infos.size();\n      }\n    }\n    for (Replica r : infos) {\n      synchronized (r) {\n        if (value == null) {\n          r.getProperties().remove(key);\n        } else {\n          if (delta) {\n            Object prevValue = r.getProperties().get(key);\n            if (prevValue != null) {\n              if ((prevValue instanceof Number) && (value instanceof Number)) {\n                if (((prevValue instanceof Long) || (prevValue instanceof Integer) ||\n                    (prevValue instanceof AtomicLong) || (prevValue instanceof AtomicInteger)) &&\n                    ((value instanceof Long) || (value instanceof Integer))) {\n                  long newValue = ((Number)prevValue).longValue() + ((Number)value).longValue();\n                  // minimize object allocations\n                  if (prevValue instanceof AtomicLong) {\n                    ((AtomicLong)prevValue).set(newValue);\n                  } else if (prevValue instanceof AtomicInteger) {\n                    ((AtomicInteger)prevValue).set(((Number)prevValue).intValue() + ((Number)value).intValue());\n                  } else {\n                    r.getProperties().put(key, newValue);\n                  }\n                } else {\n                  double newValue = ((Number)prevValue).doubleValue() + ((Number)value).doubleValue();\n                  if (prevValue instanceof AtomicDouble) {\n                    ((AtomicDouble)prevValue).set(newValue);\n                  } else {\n                    r.getProperties().put(key, newValue);\n                  }\n                }\n              } else {\n                throw new UnsupportedOperationException(\"delta cannot be applied to non-numeric values: \" + prevValue + \" and \" + value);\n              }\n            } else {\n              if (value instanceof Integer) {\n                r.getProperties().put(key, new AtomicInteger((Integer)value));\n              } else if (value instanceof Long) {\n                r.getProperties().put(key, new AtomicLong((Long)value));\n              } else if (value instanceof Double) {\n                r.getProperties().put(key, new AtomicDouble((Double)value));\n              } else {\n                r.getProperties().put(key, value);\n              }\n            }\n          } else {\n            if (value instanceof Integer) {\n              r.getProperties().put(key, new AtomicInteger((Integer)value));\n            } else if (value instanceof Long) {\n              r.getProperties().put(key, new AtomicLong((Long)value));\n            } else if (value instanceof Double) {\n              r.getProperties().put(key, new AtomicDouble((Double)value));\n            } else {\n              r.getProperties().put(key, value);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Set per-collection value (eg. a metric). This value will be applied to each replica in a selected shard.\n   * @param collection collection name\n   * @param shard shard name. If null then all shards will be affected.\n   * @param key property name\n   * @param value property value\n   * @param delta if true then treat the numeric value as delta to add to the existing value\n   *              (or set the value to delta if missing)\n   * @param divide if the value is a {@link Number} and this is true, then the value will be evenly\n   *               divided by the number of replicas.\n   */\n  public void simSetShardValue(String collection, String shard, String key, Object value, boolean delta, boolean divide) throws Exception {\n    final List<ReplicaInfo> infos;\n    if (shard == null) {\n      infos = new ArrayList<>();\n      colShardReplicaMap.computeIfAbsent(collection, c -> new ConcurrentHashMap<>())\n        .forEach((sh, replicas) -> infos.addAll(replicas));\n    } else {\n      infos = colShardReplicaMap.computeIfAbsent(collection, c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(shard, s -> new ArrayList<>());\n    }\n    if (infos.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection \" + collection + \" doesn't exist (shard=\" + shard + \").\");\n    }\n    if (divide && value != null && (value instanceof Number)) {\n      if ((value instanceof Long) || (value instanceof Integer)) {\n        value = ((Number) value).longValue() / infos.size();\n      } else {\n        value = ((Number) value).doubleValue() / infos.size();\n      }\n    }\n    for (ReplicaInfo r : infos) {\n      synchronized (r) {\n        if (value == null) {\n          r.getVariables().remove(key);\n        } else {\n          if (delta) {\n            Object prevValue = r.getVariables().get(key);\n            if (prevValue != null) {\n              if ((prevValue instanceof Number) && (value instanceof Number)) {\n                if (((prevValue instanceof Long) || (prevValue instanceof Integer) ||\n                    (prevValue instanceof AtomicLong) || (prevValue instanceof AtomicInteger)) &&\n                    ((value instanceof Long) || (value instanceof Integer))) {\n                  long newValue = ((Number)prevValue).longValue() + ((Number)value).longValue();\n                  // minimize object allocations\n                  if (prevValue instanceof AtomicLong) {\n                    ((AtomicLong)prevValue).set(newValue);\n                  } else if (prevValue instanceof AtomicInteger) {\n                    ((AtomicInteger)prevValue).set(((Number)prevValue).intValue() + ((Number)value).intValue());\n                  } else {\n                    r.getVariables().put(key, newValue);\n                  }\n                } else {\n                  double newValue = ((Number)prevValue).doubleValue() + ((Number)value).doubleValue();\n                  if (prevValue instanceof AtomicDouble) {\n                    ((AtomicDouble)prevValue).set(newValue);\n                  } else {\n                    r.getVariables().put(key, newValue);\n                  }\n                }\n              } else {\n                throw new UnsupportedOperationException(\"delta cannot be applied to non-numeric values: \" + prevValue + \" and \" + value);\n              }\n            } else {\n              if (value instanceof Integer) {\n                r.getVariables().put(key, new AtomicInteger((Integer)value));\n              } else if (value instanceof Long) {\n                r.getVariables().put(key, new AtomicLong((Long)value));\n              } else if (value instanceof Double) {\n                r.getVariables().put(key, new AtomicDouble((Double)value));\n              } else {\n                r.getVariables().put(key, value);\n              }\n            }\n          } else {\n            if (value instanceof Integer) {\n              r.getVariables().put(key, new AtomicInteger((Integer)value));\n            } else if (value instanceof Long) {\n              r.getVariables().put(key, new AtomicLong((Long)value));\n            } else if (value instanceof Double) {\n              r.getVariables().put(key, new AtomicDouble((Double)value));\n            } else {\n              r.getVariables().put(key, value);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetShardValue(String,String,String,Object,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Set per-collection value (eg. a metric). This value will be applied to each replica in a selected shard.\n   * @param collection collection name\n   * @param shard shard name. If null then all shards will be affected.\n   * @param key property name\n   * @param value property value\n   * @param delta if true then treat the numeric value as delta to add to the existing value\n   *              (or set the value to delta if missing)\n   * @param divide if the value is a {@link Number} and this is true, then the value will be evenly\n   *               divided by the number of replicas.\n   */\n  public void simSetShardValue(String collection, String shard, String key, Object value, boolean delta, boolean divide) throws Exception {\n    final List<Replica> infos;\n    if (shard == null) {\n      infos = new ArrayList<>();\n      colShardReplicaMap.computeIfAbsent(collection, c -> new ConcurrentHashMap<>())\n        .forEach((sh, replicas) -> infos.addAll(replicas));\n    } else {\n      infos = colShardReplicaMap.computeIfAbsent(collection, c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(shard, s -> new ArrayList<>());\n    }\n    if (infos.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection \" + collection + \" doesn't exist (shard=\" + shard + \").\");\n    }\n    if (divide && value != null && (value instanceof Number)) {\n      if ((value instanceof Long) || (value instanceof Integer)) {\n        value = ((Number) value).longValue() / infos.size();\n      } else {\n        value = ((Number) value).doubleValue() / infos.size();\n      }\n    }\n    for (Replica r : infos) {\n      synchronized (r) {\n        if (value == null) {\n          r.getProperties().remove(key);\n        } else {\n          if (delta) {\n            Object prevValue = r.getProperties().get(key);\n            if (prevValue != null) {\n              if ((prevValue instanceof Number) && (value instanceof Number)) {\n                if (((prevValue instanceof Long) || (prevValue instanceof Integer) ||\n                    (prevValue instanceof AtomicLong) || (prevValue instanceof AtomicInteger)) &&\n                    ((value instanceof Long) || (value instanceof Integer))) {\n                  long newValue = ((Number)prevValue).longValue() + ((Number)value).longValue();\n                  // minimize object allocations\n                  if (prevValue instanceof AtomicLong) {\n                    ((AtomicLong)prevValue).set(newValue);\n                  } else if (prevValue instanceof AtomicInteger) {\n                    ((AtomicInteger)prevValue).set(((Number)prevValue).intValue() + ((Number)value).intValue());\n                  } else {\n                    r.getProperties().put(key, newValue);\n                  }\n                } else {\n                  double newValue = ((Number)prevValue).doubleValue() + ((Number)value).doubleValue();\n                  if (prevValue instanceof AtomicDouble) {\n                    ((AtomicDouble)prevValue).set(newValue);\n                  } else {\n                    r.getProperties().put(key, newValue);\n                  }\n                }\n              } else {\n                throw new UnsupportedOperationException(\"delta cannot be applied to non-numeric values: \" + prevValue + \" and \" + value);\n              }\n            } else {\n              if (value instanceof Integer) {\n                r.getProperties().put(key, new AtomicInteger((Integer)value));\n              } else if (value instanceof Long) {\n                r.getProperties().put(key, new AtomicLong((Long)value));\n              } else if (value instanceof Double) {\n                r.getProperties().put(key, new AtomicDouble((Double)value));\n              } else {\n                r.getProperties().put(key, value);\n              }\n            }\n          } else {\n            if (value instanceof Integer) {\n              r.getProperties().put(key, new AtomicInteger((Integer)value));\n            } else if (value instanceof Long) {\n              r.getProperties().put(key, new AtomicLong((Long)value));\n            } else if (value instanceof Double) {\n              r.getProperties().put(key, new AtomicDouble((Double)value));\n            } else {\n              r.getProperties().put(key, value);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}