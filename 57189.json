{"path":"src/test/org/apache/lucene/util/LuceneTestCase#dumpIterator(String,Iterator,PrintStream).mjava","commits":[{"id":"e69f59b863731d864bf3047235e718f0f88f8841","date":1250105498,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/LuceneTestCase#dumpIterator(String,Iterator,PrintStream).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convinience method for logging an iterator.\n   * @param label String logged before/after the items in the iterator\n   * @param iter Each next() is toString()ed and logged on it's own line. If iter is null this is logged differnetly then an empty iterator.\n   * @param stream Stream to log messages to.\n   */\n  public static void dumpIterator(String label, Iterator iter, \n                                  PrintStream stream) {\n    stream.println(\"*** BEGIN \"+label+\" ***\");\n    if (null == iter) {\n      stream.println(\" ... NULL ...\");\n    } else {\n      while (iter.hasNext()) {\n        stream.println(iter.next().toString());\n      }\n    }\n    stream.println(\"*** END \"+label+\" ***\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/LuceneTestCase#[T]_dumpIterator(String,Iterator[T],PrintStream).mjava","pathOld":"src/test/org/apache/lucene/util/LuceneTestCase#dumpIterator(String,Iterator,PrintStream).mjava","sourceNew":"  /**\n   * Convinience method for logging an iterator.\n   * @param label String logged before/after the items in the iterator\n   * @param iter Each next() is toString()ed and logged on it's own line. If iter is null this is logged differnetly then an empty iterator.\n   * @param stream Stream to log messages to.\n   */\n  public static <T> void dumpIterator(String label, Iterator<T> iter, \n                                  PrintStream stream) {\n    stream.println(\"*** BEGIN \"+label+\" ***\");\n    if (null == iter) {\n      stream.println(\" ... NULL ...\");\n    } else {\n      while (iter.hasNext()) {\n        stream.println(iter.next().toString());\n      }\n    }\n    stream.println(\"*** END \"+label+\" ***\");\n  }\n\n","sourceOld":"  /**\n   * Convinience method for logging an iterator.\n   * @param label String logged before/after the items in the iterator\n   * @param iter Each next() is toString()ed and logged on it's own line. If iter is null this is logged differnetly then an empty iterator.\n   * @param stream Stream to log messages to.\n   */\n  public static void dumpIterator(String label, Iterator iter, \n                                  PrintStream stream) {\n    stream.println(\"*** BEGIN \"+label+\" ***\");\n    if (null == iter) {\n      stream.println(\" ... NULL ...\");\n    } else {\n      while (iter.hasNext()) {\n        stream.println(iter.next().toString());\n      }\n    }\n    stream.println(\"*** END \"+label+\" ***\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e69f59b863731d864bf3047235e718f0f88f8841":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["e69f59b863731d864bf3047235e718f0f88f8841"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"e69f59b863731d864bf3047235e718f0f88f8841":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e69f59b863731d864bf3047235e718f0f88f8841"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}