{"path":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBooleanQueryCachesSubClauses().mjava","commits":[{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBooleanQueryCachesSubClauses().mjava","pathOld":"/dev/null","sourceNew":"  public void testBooleanQueryCachesSubClauses() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BooleanQuery bq = new BooleanQuery();\n    TermQuery should = new TermQuery(new Term(\"foo\", \"baz\"));\n    TermQuery must = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery filter = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery mustNot = new TermQuery(new Term(\"foo\", \"foo\"));\n    bq.add(should, Occur.SHOULD);\n    bq.add(must, Occur.MUST);\n    bq.add(filter, Occur.FILTER);\n    bq.add(mustNot, Occur.MUST_NOT);\n\n    // same bq but with FILTER instead of MUST\n    BooleanQuery bq2 = new BooleanQuery();\n    bq2.add(should, Occur.SHOULD);\n    bq2.add(must, Occur.FILTER);\n    bq2.add(filter, Occur.FILTER);\n    bq2.add(mustNot, Occur.MUST_NOT);\n    \n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq, 1);\n    assertEquals(new HashSet<>(Arrays.asList(filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    queryCache.clear();\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(new ConstantScoreQuery(bq), 1);\n    assertEquals(new HashSet<>(Arrays.asList(bq2, should, must, filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["631e24c389c59f74b6d125a2a4cb909d6fbfa356"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBooleanQueryCachesSubClauses().mjava","pathOld":"/dev/null","sourceNew":"  public void testBooleanQueryCachesSubClauses() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BooleanQuery bq = new BooleanQuery();\n    TermQuery should = new TermQuery(new Term(\"foo\", \"baz\"));\n    TermQuery must = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery filter = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery mustNot = new TermQuery(new Term(\"foo\", \"foo\"));\n    bq.add(should, Occur.SHOULD);\n    bq.add(must, Occur.MUST);\n    bq.add(filter, Occur.FILTER);\n    bq.add(mustNot, Occur.MUST_NOT);\n\n    // same bq but with FILTER instead of MUST\n    BooleanQuery bq2 = new BooleanQuery();\n    bq2.add(should, Occur.SHOULD);\n    bq2.add(must, Occur.FILTER);\n    bq2.add(filter, Occur.FILTER);\n    bq2.add(mustNot, Occur.MUST_NOT);\n    \n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq, 1);\n    assertEquals(new HashSet<>(Arrays.asList(filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    queryCache.clear();\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(new ConstantScoreQuery(bq), 1);\n    assertEquals(new HashSet<>(Arrays.asList(bq2, should, must, filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBooleanQueryCachesSubClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBooleanQueryCachesSubClauses().mjava","sourceNew":"  public void testBooleanQueryCachesSubClauses() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    TermQuery should = new TermQuery(new Term(\"foo\", \"baz\"));\n    TermQuery must = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery filter = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery mustNot = new TermQuery(new Term(\"foo\", \"foo\"));\n    bq.add(should, Occur.SHOULD);\n    bq.add(must, Occur.MUST);\n    bq.add(filter, Occur.FILTER);\n    bq.add(mustNot, Occur.MUST_NOT);\n\n    // same bq but with FILTER instead of MUST\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(should, Occur.SHOULD);\n    bq2.add(must, Occur.FILTER);\n    bq2.add(filter, Occur.FILTER);\n    bq2.add(mustNot, Occur.MUST_NOT);\n    \n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq.build(), 1);\n    assertEquals(new HashSet<>(Arrays.asList(filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    queryCache.clear();\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(new ConstantScoreQuery(bq.build()), 1);\n    assertEquals(new HashSet<>(Arrays.asList(bq2.build(), should, must, filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBooleanQueryCachesSubClauses() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BooleanQuery bq = new BooleanQuery();\n    TermQuery should = new TermQuery(new Term(\"foo\", \"baz\"));\n    TermQuery must = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery filter = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery mustNot = new TermQuery(new Term(\"foo\", \"foo\"));\n    bq.add(should, Occur.SHOULD);\n    bq.add(must, Occur.MUST);\n    bq.add(filter, Occur.FILTER);\n    bq.add(mustNot, Occur.MUST_NOT);\n\n    // same bq but with FILTER instead of MUST\n    BooleanQuery bq2 = new BooleanQuery();\n    bq2.add(should, Occur.SHOULD);\n    bq2.add(must, Occur.FILTER);\n    bq2.add(filter, Occur.FILTER);\n    bq2.add(mustNot, Occur.MUST_NOT);\n    \n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq, 1);\n    assertEquals(new HashSet<>(Arrays.asList(filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    queryCache.clear();\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(new ConstantScoreQuery(bq), 1);\n    assertEquals(new HashSet<>(Arrays.asList(bq2, should, must, filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"631e24c389c59f74b6d125a2a4cb909d6fbfa356","date":1445957240,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBooleanQueryCachesSubClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBooleanQueryCachesSubClauses().mjava","sourceNew":"  public void testBooleanQueryCachesSubClauses() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    TermQuery should = new TermQuery(new Term(\"foo\", \"baz\"));\n    TermQuery must = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery filter = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery mustNot = new TermQuery(new Term(\"foo\", \"foo\"));\n    bq.add(should, Occur.SHOULD);\n    bq.add(must, Occur.MUST);\n    bq.add(filter, Occur.FILTER);\n    bq.add(mustNot, Occur.MUST_NOT);\n\n    // same bq but with FILTER instead of MUST\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(should, Occur.SHOULD);\n    bq2.add(must, Occur.FILTER);\n    bq2.add(filter, Occur.FILTER);\n    bq2.add(mustNot, Occur.MUST_NOT);\n\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq.build(), 1);\n    assertEquals(new HashSet<>(Arrays.asList(filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    queryCache.clear();\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(new ConstantScoreQuery(bq.build()), 1);\n    assertEquals(new HashSet<>(Arrays.asList(bq2.build(), should, must, filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBooleanQueryCachesSubClauses() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    TermQuery should = new TermQuery(new Term(\"foo\", \"baz\"));\n    TermQuery must = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery filter = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery mustNot = new TermQuery(new Term(\"foo\", \"foo\"));\n    bq.add(should, Occur.SHOULD);\n    bq.add(must, Occur.MUST);\n    bq.add(filter, Occur.FILTER);\n    bq.add(mustNot, Occur.MUST_NOT);\n\n    // same bq but with FILTER instead of MUST\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(should, Occur.SHOULD);\n    bq2.add(must, Occur.FILTER);\n    bq2.add(filter, Occur.FILTER);\n    bq2.add(mustNot, Occur.MUST_NOT);\n    \n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq.build(), 1);\n    assertEquals(new HashSet<>(Arrays.asList(filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    queryCache.clear();\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(new ConstantScoreQuery(bq.build()), 1);\n    assertEquals(new HashSet<>(Arrays.asList(bq2.build(), should, must, filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0f907db1bc6eb97b13f9c1ef2191d14b5e632","date":1449148233,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBooleanQueryCachesSubClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBooleanQueryCachesSubClauses().mjava","sourceNew":"  public void testBooleanQueryCachesSubClauses() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    doc.add(new StringField(\"foo\", \"quux\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    TermQuery should = new TermQuery(new Term(\"foo\", \"baz\"));\n    TermQuery must = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery filter = new TermQuery(new Term(\"foo\", \"quux\"));\n    TermQuery mustNot = new TermQuery(new Term(\"foo\", \"foo\"));\n    bq.add(should, Occur.SHOULD);\n    bq.add(must, Occur.MUST);\n    bq.add(filter, Occur.FILTER);\n    bq.add(mustNot, Occur.MUST_NOT);\n\n    // same bq but with FILTER instead of MUST\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(should, Occur.SHOULD);\n    bq2.add(must, Occur.FILTER);\n    bq2.add(filter, Occur.FILTER);\n    bq2.add(mustNot, Occur.MUST_NOT);\n\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq.build(), 1);\n    assertEquals(new HashSet<>(Arrays.asList(filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    queryCache.clear();\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(new ConstantScoreQuery(bq.build()), 1);\n    assertEquals(new HashSet<>(Arrays.asList(bq2.build(), should, must, filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBooleanQueryCachesSubClauses() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    TermQuery should = new TermQuery(new Term(\"foo\", \"baz\"));\n    TermQuery must = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery filter = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery mustNot = new TermQuery(new Term(\"foo\", \"foo\"));\n    bq.add(should, Occur.SHOULD);\n    bq.add(must, Occur.MUST);\n    bq.add(filter, Occur.FILTER);\n    bq.add(mustNot, Occur.MUST_NOT);\n\n    // same bq but with FILTER instead of MUST\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(should, Occur.SHOULD);\n    bq2.add(must, Occur.FILTER);\n    bq2.add(filter, Occur.FILTER);\n    bq2.add(mustNot, Occur.MUST_NOT);\n\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq.build(), 1);\n    assertEquals(new HashSet<>(Arrays.asList(filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    queryCache.clear();\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(new ConstantScoreQuery(bq.build()), 1);\n    assertEquals(new HashSet<>(Arrays.asList(bq2.build(), should, must, filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aac61ee5b4492f174e60bd54939aba9539906edf","date":1461245473,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBooleanQueryCachesSubClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBooleanQueryCachesSubClauses().mjava","sourceNew":"  public void testBooleanQueryCachesSubClauses() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    doc.add(new StringField(\"foo\", \"quux\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    TermQuery should = new TermQuery(new Term(\"foo\", \"baz\"));\n    TermQuery must = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery filter = new TermQuery(new Term(\"foo\", \"quux\"));\n    TermQuery mustNot = new TermQuery(new Term(\"foo\", \"foo\"));\n    bq.add(should, Occur.SHOULD);\n    bq.add(must, Occur.MUST);\n    bq.add(filter, Occur.FILTER);\n    bq.add(mustNot, Occur.MUST_NOT);\n\n    // same bq but with FILTER instead of MUST\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(should, Occur.SHOULD);\n    bq2.add(must, Occur.FILTER);\n    bq2.add(filter, Occur.FILTER);\n    bq2.add(mustNot, Occur.MUST_NOT);\n\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq.build(), 1);\n    assertEquals(new HashSet<>(Arrays.asList(filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    queryCache.clear();\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(new ConstantScoreQuery(bq.build()), 1);\n    assertEquals(new HashSet<>(Arrays.asList(bq2.build(), should, must, filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBooleanQueryCachesSubClauses() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    doc.add(new StringField(\"foo\", \"quux\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    TermQuery should = new TermQuery(new Term(\"foo\", \"baz\"));\n    TermQuery must = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery filter = new TermQuery(new Term(\"foo\", \"quux\"));\n    TermQuery mustNot = new TermQuery(new Term(\"foo\", \"foo\"));\n    bq.add(should, Occur.SHOULD);\n    bq.add(must, Occur.MUST);\n    bq.add(filter, Occur.FILTER);\n    bq.add(mustNot, Occur.MUST_NOT);\n\n    // same bq but with FILTER instead of MUST\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(should, Occur.SHOULD);\n    bq2.add(must, Occur.FILTER);\n    bq2.add(filter, Occur.FILTER);\n    bq2.add(mustNot, Occur.MUST_NOT);\n\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq.build(), 1);\n    assertEquals(new HashSet<>(Arrays.asList(filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    queryCache.clear();\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(new ConstantScoreQuery(bq.build()), 1);\n    assertEquals(new HashSet<>(Arrays.asList(bq2.build(), should, must, filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7732a106554be0db3e03ac5211e46f6e0c285b8","date":1511975378,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBooleanQueryCachesSubClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBooleanQueryCachesSubClauses().mjava","sourceNew":"  public void testBooleanQueryCachesSubClauses() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    doc.add(new StringField(\"foo\", \"quux\", Store.YES));\n    w.addDocument(doc);\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true, Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    TermQuery should = new TermQuery(new Term(\"foo\", \"baz\"));\n    TermQuery must = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery filter = new TermQuery(new Term(\"foo\", \"quux\"));\n    TermQuery mustNot = new TermQuery(new Term(\"foo\", \"foo\"));\n    bq.add(should, Occur.SHOULD);\n    bq.add(must, Occur.MUST);\n    bq.add(filter, Occur.FILTER);\n    bq.add(mustNot, Occur.MUST_NOT);\n\n    // same bq but with FILTER instead of MUST\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(should, Occur.SHOULD);\n    bq2.add(must, Occur.FILTER);\n    bq2.add(filter, Occur.FILTER);\n    bq2.add(mustNot, Occur.MUST_NOT);\n\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq.build(), 1);\n    assertEquals(new HashSet<>(Arrays.asList(filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    queryCache.clear();\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(new ConstantScoreQuery(bq.build()), 1);\n    assertEquals(new HashSet<>(Arrays.asList(bq2.build(), should, must, filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBooleanQueryCachesSubClauses() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    doc.add(new StringField(\"foo\", \"quux\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    TermQuery should = new TermQuery(new Term(\"foo\", \"baz\"));\n    TermQuery must = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery filter = new TermQuery(new Term(\"foo\", \"quux\"));\n    TermQuery mustNot = new TermQuery(new Term(\"foo\", \"foo\"));\n    bq.add(should, Occur.SHOULD);\n    bq.add(must, Occur.MUST);\n    bq.add(filter, Occur.FILTER);\n    bq.add(mustNot, Occur.MUST_NOT);\n\n    // same bq but with FILTER instead of MUST\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(should, Occur.SHOULD);\n    bq2.add(must, Occur.FILTER);\n    bq2.add(filter, Occur.FILTER);\n    bq2.add(mustNot, Occur.MUST_NOT);\n\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq.build(), 1);\n    assertEquals(new HashSet<>(Arrays.asList(filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    queryCache.clear();\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(new ConstantScoreQuery(bq.build()), 1);\n    assertEquals(new HashSet<>(Arrays.asList(bq2.build(), should, must, filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBooleanQueryCachesSubClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBooleanQueryCachesSubClauses().mjava","sourceNew":"  public void testBooleanQueryCachesSubClauses() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    doc.add(new StringField(\"foo\", \"quux\", Store.YES));\n    w.addDocument(doc);\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true, Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    TermQuery should = new TermQuery(new Term(\"foo\", \"baz\"));\n    TermQuery must = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery filter = new TermQuery(new Term(\"foo\", \"quux\"));\n    TermQuery mustNot = new TermQuery(new Term(\"foo\", \"foo\"));\n    bq.add(should, Occur.SHOULD);\n    bq.add(must, Occur.MUST);\n    bq.add(filter, Occur.FILTER);\n    bq.add(mustNot, Occur.MUST_NOT);\n\n    // same bq but with FILTER instead of MUST\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(should, Occur.SHOULD);\n    bq2.add(must, Occur.FILTER);\n    bq2.add(filter, Occur.FILTER);\n    bq2.add(mustNot, Occur.MUST_NOT);\n\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq.build(), 1);\n    assertEquals(new HashSet<>(Arrays.asList(filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    queryCache.clear();\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(new ConstantScoreQuery(bq.build()), 1);\n    assertEquals(new HashSet<>(Arrays.asList(bq2.build(), should, must, filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBooleanQueryCachesSubClauses() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    doc.add(new StringField(\"foo\", \"quux\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    TermQuery should = new TermQuery(new Term(\"foo\", \"baz\"));\n    TermQuery must = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery filter = new TermQuery(new Term(\"foo\", \"quux\"));\n    TermQuery mustNot = new TermQuery(new Term(\"foo\", \"foo\"));\n    bq.add(should, Occur.SHOULD);\n    bq.add(must, Occur.MUST);\n    bq.add(filter, Occur.FILTER);\n    bq.add(mustNot, Occur.MUST_NOT);\n\n    // same bq but with FILTER instead of MUST\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(should, Occur.SHOULD);\n    bq2.add(must, Occur.FILTER);\n    bq2.add(filter, Occur.FILTER);\n    bq2.add(mustNot, Occur.MUST_NOT);\n\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq.build(), 1);\n    assertEquals(new HashSet<>(Arrays.asList(filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    queryCache.clear();\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(new ConstantScoreQuery(bq.build()), 1);\n    assertEquals(new HashSet<>(Arrays.asList(bq2.build(), should, must, filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"789fb338d3c53b4478938723d60f6623e764ca38","date":1521535944,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBooleanQueryCachesSubClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBooleanQueryCachesSubClauses().mjava","sourceNew":"  public void testBooleanQueryCachesSubClauses() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    doc.add(new StringField(\"foo\", \"quux\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    TermQuery should = new TermQuery(new Term(\"foo\", \"baz\"));\n    TermQuery must = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery filter = new TermQuery(new Term(\"foo\", \"quux\"));\n    TermQuery mustNot = new TermQuery(new Term(\"foo\", \"foo\"));\n    bq.add(should, Occur.SHOULD);\n    bq.add(must, Occur.MUST);\n    bq.add(filter, Occur.FILTER);\n    bq.add(mustNot, Occur.MUST_NOT);\n\n    // same bq but with FILTER instead of MUST\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(should, Occur.SHOULD);\n    bq2.add(must, Occur.FILTER);\n    bq2.add(filter, Occur.FILTER);\n    bq2.add(mustNot, Occur.MUST_NOT);\n\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq.build(), 1);\n    assertEquals(new HashSet<>(Arrays.asList(filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    queryCache.clear();\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(new ConstantScoreQuery(bq.build()), 1);\n    assertEquals(new HashSet<>(Arrays.asList(bq2.build(), should, must, filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBooleanQueryCachesSubClauses() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    doc.add(new StringField(\"foo\", \"quux\", Store.YES));\n    w.addDocument(doc);\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true, Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    TermQuery should = new TermQuery(new Term(\"foo\", \"baz\"));\n    TermQuery must = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery filter = new TermQuery(new Term(\"foo\", \"quux\"));\n    TermQuery mustNot = new TermQuery(new Term(\"foo\", \"foo\"));\n    bq.add(should, Occur.SHOULD);\n    bq.add(must, Occur.MUST);\n    bq.add(filter, Occur.FILTER);\n    bq.add(mustNot, Occur.MUST_NOT);\n\n    // same bq but with FILTER instead of MUST\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(should, Occur.SHOULD);\n    bq2.add(must, Occur.FILTER);\n    bq2.add(filter, Occur.FILTER);\n    bq2.add(mustNot, Occur.MUST_NOT);\n\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq.build(), 1);\n    assertEquals(new HashSet<>(Arrays.asList(filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    queryCache.clear();\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(new ConstantScoreQuery(bq.build()), 1);\n    assertEquals(new HashSet<>(Arrays.asList(bq2.build(), should, must, filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBooleanQueryCachesSubClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBooleanQueryCachesSubClauses().mjava","sourceNew":"  public void testBooleanQueryCachesSubClauses() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    doc.add(new StringField(\"foo\", \"quux\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    TermQuery should = new TermQuery(new Term(\"foo\", \"baz\"));\n    TermQuery must = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery filter = new TermQuery(new Term(\"foo\", \"quux\"));\n    TermQuery mustNot = new TermQuery(new Term(\"foo\", \"foo\"));\n    bq.add(should, Occur.SHOULD);\n    bq.add(must, Occur.MUST);\n    bq.add(filter, Occur.FILTER);\n    bq.add(mustNot, Occur.MUST_NOT);\n\n    // same bq but with FILTER instead of MUST\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(should, Occur.SHOULD);\n    bq2.add(must, Occur.FILTER);\n    bq2.add(filter, Occur.FILTER);\n    bq2.add(mustNot, Occur.MUST_NOT);\n\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq.build(), 1);\n    assertEquals(new HashSet<>(Arrays.asList(filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    queryCache.clear();\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(new ConstantScoreQuery(bq.build()), 1);\n    assertEquals(new HashSet<>(Arrays.asList(bq2.build(), should, must, filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBooleanQueryCachesSubClauses() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    doc.add(new StringField(\"foo\", \"quux\", Store.YES));\n    w.addDocument(doc);\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true, Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    TermQuery should = new TermQuery(new Term(\"foo\", \"baz\"));\n    TermQuery must = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery filter = new TermQuery(new Term(\"foo\", \"quux\"));\n    TermQuery mustNot = new TermQuery(new Term(\"foo\", \"foo\"));\n    bq.add(should, Occur.SHOULD);\n    bq.add(must, Occur.MUST);\n    bq.add(filter, Occur.FILTER);\n    bq.add(mustNot, Occur.MUST_NOT);\n\n    // same bq but with FILTER instead of MUST\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(should, Occur.SHOULD);\n    bq2.add(must, Occur.FILTER);\n    bq2.add(filter, Occur.FILTER);\n    bq2.add(mustNot, Occur.MUST_NOT);\n\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq.build(), 1);\n    assertEquals(new HashSet<>(Arrays.asList(filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    queryCache.clear();\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(new ConstantScoreQuery(bq.build()), 1);\n    assertEquals(new HashSet<>(Arrays.asList(bq2.build(), should, must, filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c9d00c591703058371b3dc36f4957a6f24ca302","date":1527233410,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBooleanQueryCachesSubClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBooleanQueryCachesSubClauses().mjava","sourceNew":"  public void testBooleanQueryCachesSubClauses() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    doc.add(new StringField(\"foo\", \"quux\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    TermQuery should = new TermQuery(new Term(\"foo\", \"baz\"));\n    TermQuery must = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery filter = new TermQuery(new Term(\"foo\", \"quux\"));\n    TermQuery mustNot = new TermQuery(new Term(\"foo\", \"foo\"));\n    bq.add(should, Occur.SHOULD);\n    bq.add(must, Occur.MUST);\n    bq.add(filter, Occur.FILTER);\n    bq.add(mustNot, Occur.MUST_NOT);\n\n    // same bq but with FILTER instead of MUST\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(should, Occur.SHOULD);\n    bq2.add(must, Occur.FILTER);\n    bq2.add(filter, Occur.FILTER);\n    bq2.add(mustNot, Occur.MUST_NOT);\n\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq.build(), 1);\n    assertEquals(new HashSet<>(Arrays.asList(filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    queryCache.clear();\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(new ConstantScoreQuery(bq.build()), 1);\n    assertEquals(new HashSet<>(Arrays.asList(bq2.build(), should, must, filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBooleanQueryCachesSubClauses() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    doc.add(new StringField(\"foo\", \"quux\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    TermQuery should = new TermQuery(new Term(\"foo\", \"baz\"));\n    TermQuery must = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery filter = new TermQuery(new Term(\"foo\", \"quux\"));\n    TermQuery mustNot = new TermQuery(new Term(\"foo\", \"foo\"));\n    bq.add(should, Occur.SHOULD);\n    bq.add(must, Occur.MUST);\n    bq.add(filter, Occur.FILTER);\n    bq.add(mustNot, Occur.MUST_NOT);\n\n    // same bq but with FILTER instead of MUST\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(should, Occur.SHOULD);\n    bq2.add(must, Occur.FILTER);\n    bq2.add(filter, Occur.FILTER);\n    bq2.add(mustNot, Occur.MUST_NOT);\n\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq.build(), 1);\n    assertEquals(new HashSet<>(Arrays.asList(filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    queryCache.clear();\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(new ConstantScoreQuery(bq.build()), 1);\n    assertEquals(new HashSet<>(Arrays.asList(bq2.build(), should, must, filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3b18b7e0f913460bf896d65b6de19fad9cdf6fb","date":1557385218,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBooleanQueryCachesSubClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBooleanQueryCachesSubClauses().mjava","sourceNew":"  public void testBooleanQueryCachesSubClauses() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    doc.add(new StringField(\"foo\", \"quux\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    TermQuery must = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery filter = new TermQuery(new Term(\"foo\", \"quux\"));\n    TermQuery mustNot = new TermQuery(new Term(\"foo\", \"foo\"));\n    bq.add(must, Occur.MUST);\n    bq.add(filter, Occur.FILTER);\n    bq.add(mustNot, Occur.MUST_NOT);\n\n    // same bq but with FILTER instead of MUST\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(must, Occur.FILTER);\n    bq2.add(filter, Occur.FILTER);\n    bq2.add(mustNot, Occur.MUST_NOT);\n\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq.build(), 1);\n    assertEquals(new HashSet<>(Arrays.asList(filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    queryCache.clear();\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(new ConstantScoreQuery(bq.build()), 1);\n    assertEquals(new HashSet<>(Arrays.asList(bq2.build(), must, filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBooleanQueryCachesSubClauses() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    doc.add(new StringField(\"foo\", \"quux\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    TermQuery should = new TermQuery(new Term(\"foo\", \"baz\"));\n    TermQuery must = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery filter = new TermQuery(new Term(\"foo\", \"quux\"));\n    TermQuery mustNot = new TermQuery(new Term(\"foo\", \"foo\"));\n    bq.add(should, Occur.SHOULD);\n    bq.add(must, Occur.MUST);\n    bq.add(filter, Occur.FILTER);\n    bq.add(mustNot, Occur.MUST_NOT);\n\n    // same bq but with FILTER instead of MUST\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(should, Occur.SHOULD);\n    bq2.add(must, Occur.FILTER);\n    bq2.add(filter, Occur.FILTER);\n    bq2.add(mustNot, Occur.MUST_NOT);\n\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq.build(), 1);\n    assertEquals(new HashSet<>(Arrays.asList(filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    queryCache.clear();\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(new ConstantScoreQuery(bq.build()), 1);\n    assertEquals(new HashSet<>(Arrays.asList(bq2.build(), should, must, filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5754bd6f04f13b67e9575f8b226a0303c31c7d5","date":1573506453,"type":3,"author":"ginger","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBooleanQueryCachesSubClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testBooleanQueryCachesSubClauses().mjava","sourceNew":"  public void testBooleanQueryCachesSubClauses() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    doc.add(new StringField(\"foo\", \"quux\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true, Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    TermQuery must = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery filter = new TermQuery(new Term(\"foo\", \"quux\"));\n    TermQuery mustNot = new TermQuery(new Term(\"foo\", \"foo\"));\n    bq.add(must, Occur.MUST);\n    bq.add(filter, Occur.FILTER);\n    bq.add(mustNot, Occur.MUST_NOT);\n\n    // same bq but with FILTER instead of MUST\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(must, Occur.FILTER);\n    bq2.add(filter, Occur.FILTER);\n    bq2.add(mustNot, Occur.MUST_NOT);\n\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq.build(), 1);\n    assertEquals(new HashSet<>(Arrays.asList(filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    queryCache.clear();\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(new ConstantScoreQuery(bq.build()), 1);\n    assertEquals(new HashSet<>(Arrays.asList(bq2.build(), must, filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBooleanQueryCachesSubClauses() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.YES));\n    doc.add(new StringField(\"foo\", \"quux\", Store.YES));\n    w.addDocument(doc);\n    w.commit();\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    TermQuery must = new TermQuery(new Term(\"foo\", \"bar\"));\n    TermQuery filter = new TermQuery(new Term(\"foo\", \"quux\"));\n    TermQuery mustNot = new TermQuery(new Term(\"foo\", \"foo\"));\n    bq.add(must, Occur.MUST);\n    bq.add(filter, Occur.FILTER);\n    bq.add(mustNot, Occur.MUST_NOT);\n\n    // same bq but with FILTER instead of MUST\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(must, Occur.FILTER);\n    bq2.add(filter, Occur.FILTER);\n    bq2.add(mustNot, Occur.MUST_NOT);\n\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq.build(), 1);\n    assertEquals(new HashSet<>(Arrays.asList(filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    queryCache.clear();\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(new ConstantScoreQuery(bq.build()), 1);\n    assertEquals(new HashSet<>(Arrays.asList(bq2.build(), must, filter, mustNot)), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["1aad05eeff7818b0833c02ac6b743aa72054963b","789fb338d3c53b4478938723d60f6623e764ca38"],"aac61ee5b4492f174e60bd54939aba9539906edf":["59a0f907db1bc6eb97b13f9c1ef2191d14b5e632"],"59a0f907db1bc6eb97b13f9c1ef2191d14b5e632":["631e24c389c59f74b6d125a2a4cb909d6fbfa356"],"6c9d00c591703058371b3dc36f4957a6f24ca302":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["f3b18b7e0f913460bf896d65b6de19fad9cdf6fb"],"c7732a106554be0db3e03ac5211e46f6e0c285b8":["aac61ee5b4492f174e60bd54939aba9539906edf"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["aac61ee5b4492f174e60bd54939aba9539906edf","c7732a106554be0db3e03ac5211e46f6e0c285b8"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"f3b18b7e0f913460bf896d65b6de19fad9cdf6fb":["6c9d00c591703058371b3dc36f4957a6f24ca302"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"789fb338d3c53b4478938723d60f6623e764ca38":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"631e24c389c59f74b6d125a2a4cb909d6fbfa356":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"]},"commit2Childs":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["6c9d00c591703058371b3dc36f4957a6f24ca302"],"aac61ee5b4492f174e60bd54939aba9539906edf":["c7732a106554be0db3e03ac5211e46f6e0c285b8","1aad05eeff7818b0833c02ac6b743aa72054963b"],"59a0f907db1bc6eb97b13f9c1ef2191d14b5e632":["aac61ee5b4492f174e60bd54939aba9539906edf"],"6c9d00c591703058371b3dc36f4957a6f24ca302":["f3b18b7e0f913460bf896d65b6de19fad9cdf6fb"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7732a106554be0db3e03ac5211e46f6e0c285b8":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","789fb338d3c53b4478938723d60f6623e764ca38"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["631e24c389c59f74b6d125a2a4cb909d6fbfa356"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"789fb338d3c53b4478938723d60f6623e764ca38":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60596f28be69b10c37a56a303c2dbea07b2ca4ba","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"f3b18b7e0f913460bf896d65b6de19fad9cdf6fb":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"],"631e24c389c59f74b6d125a2a4cb909d6fbfa356":["59a0f907db1bc6eb97b13f9c1ef2191d14b5e632"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}