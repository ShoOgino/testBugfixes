{"path":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#getHashableId().mjava","commits":[{"id":"fbb99676a68bd056726c87b20f1854ee4d740a29","date":1346421532,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#getHashableId().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @return String id to hash\n   */\n  public String getHashableId() {\n    String id = null;\n    IndexSchema schema = req.getSchema();\n    SchemaField sf = schema.getUniqueKeyField();\n    if (sf != null) {\n      if (solrDoc != null) {\n        SolrInputField field = solrDoc.getField(sf.getName());\n        \n        int count = field == null ? 0 : field.getValueCount();\n        if (count == 0) {\n          if (overwrite) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Document is missing mandatory uniqueKey field: \"\n                    + sf.getName());\n          }\n        } else if (count > 1) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Document contains multiple values for uniqueKey field: \" + field);\n        } else {\n          return field.getFirstValue().toString();\n        }\n      }\n    }\n    return id;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d1f90e969803cc84174589b5e4a39b7935fecd","date":1346584861,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#getHashableId().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @return String id to hash\n   */\n  public String getHashableId() {\n    String id = null;\n    IndexSchema schema = req.getSchema();\n    SchemaField sf = schema.getUniqueKeyField();\n    if (sf != null) {\n      if (solrDoc != null) {\n        SolrInputField field = solrDoc.getField(sf.getName());\n        \n        int count = field == null ? 0 : field.getValueCount();\n        if (count == 0) {\n          if (overwrite) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Document is missing mandatory uniqueKey field: \"\n                    + sf.getName());\n          }\n        } else if (count > 1) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Document contains multiple values for uniqueKey field: \" + field);\n        } else {\n          return field.getFirstValue().toString();\n        }\n      }\n    }\n    return id;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5ce7c704ca874aa623a99f2669737b52ec71cfc","date":1528728510,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#getHashableId().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#getHashableId().mjava","sourceNew":"  /**\n   * @return String id to hash\n   */\n  public String getHashableId() {\n    IndexSchema schema = req.getSchema();\n    SchemaField sf = schema.getUniqueKeyField();\n    if (sf != null) {\n      if (solrDoc != null) {\n        SolrInputField field = solrDoc.getField(sf.getName());\n\n        int count = field == null ? 0 : field.getValueCount();\n        if (count == 0) {\n          if (overwrite) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Document is missing mandatory uniqueKey field: \"\n                    + sf.getName());\n          }\n        } else if (count > 1) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Document contains multiple values for uniqueKey field: \" + field);\n        } else {\n          return field.getFirstValue().toString();\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * @return String id to hash\n   */\n  public String getHashableId() {\n    String id = null;\n    IndexSchema schema = req.getSchema();\n    SchemaField sf = schema.getUniqueKeyField();\n    if (sf != null) {\n      if (solrDoc != null) {\n        SolrInputField field = solrDoc.getField(sf.getName());\n        \n        int count = field == null ? 0 : field.getValueCount();\n        if (count == 0) {\n          if (overwrite) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Document is missing mandatory uniqueKey field: \"\n                    + sf.getName());\n          }\n        } else if (count > 1) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Document contains multiple values for uniqueKey field: \" + field);\n        } else {\n          return field.getFirstValue().toString();\n        }\n      }\n    }\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#getHashableId().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#getHashableId().mjava","sourceNew":"  /**\n   * @return String id to hash\n   */\n  public String getHashableId() {\n    IndexSchema schema = req.getSchema();\n    SchemaField sf = schema.getUniqueKeyField();\n    if (sf != null) {\n      if (solrDoc != null) {\n        SolrInputField field = solrDoc.getField(sf.getName());\n\n        int count = field == null ? 0 : field.getValueCount();\n        if (count == 0) {\n          if (overwrite) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Document is missing mandatory uniqueKey field: \"\n                    + sf.getName());\n          }\n        } else if (count > 1) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Document contains multiple values for uniqueKey field: \" + field);\n        } else {\n          return field.getFirstValue().toString();\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * @return String id to hash\n   */\n  public String getHashableId() {\n    String id = null;\n    IndexSchema schema = req.getSchema();\n    SchemaField sf = schema.getUniqueKeyField();\n    if (sf != null) {\n      if (solrDoc != null) {\n        SolrInputField field = solrDoc.getField(sf.getName());\n        \n        int count = field == null ? 0 : field.getValueCount();\n        if (count == 0) {\n          if (overwrite) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Document is missing mandatory uniqueKey field: \"\n                    + sf.getName());\n          }\n        } else if (count > 1) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Document contains multiple values for uniqueKey field: \" + field);\n        } else {\n          return field.getFirstValue().toString();\n        }\n      }\n    }\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#getHashableId().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#getHashableId().mjava","sourceNew":"  /**\n   * @return String id to hash\n   */\n  public String getHashableId() {\n    IndexSchema schema = req.getSchema();\n    SchemaField sf = schema.getUniqueKeyField();\n    if (sf != null) {\n      if (solrDoc != null) {\n        SolrInputField field = solrDoc.getField(sf.getName());\n\n        int count = field == null ? 0 : field.getValueCount();\n        if (count == 0) {\n          if (overwrite) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Document is missing mandatory uniqueKey field: \"\n                    + sf.getName());\n          }\n        } else if (count > 1) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Document contains multiple values for uniqueKey field: \" + field);\n        } else {\n          return field.getFirstValue().toString();\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * @return String id to hash\n   */\n  public String getHashableId() {\n    String id = null;\n    IndexSchema schema = req.getSchema();\n    SchemaField sf = schema.getUniqueKeyField();\n    if (sf != null) {\n      if (solrDoc != null) {\n        SolrInputField field = solrDoc.getField(sf.getName());\n        \n        int count = field == null ? 0 : field.getValueCount();\n        if (count == 0) {\n          if (overwrite) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Document is missing mandatory uniqueKey field: \"\n                    + sf.getName());\n          }\n        } else if (count > 1) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Document contains multiple values for uniqueKey field: \" + field);\n        } else {\n          return field.getFirstValue().toString();\n        }\n      }\n    }\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d0d1f90e969803cc84174589b5e4a39b7935fecd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fbb99676a68bd056726c87b20f1854ee4d740a29"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["fbb99676a68bd056726c87b20f1854ee4d740a29","c5ce7c704ca874aa623a99f2669737b52ec71cfc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5ce7c704ca874aa623a99f2669737b52ec71cfc":["fbb99676a68bd056726c87b20f1854ee4d740a29"],"fbb99676a68bd056726c87b20f1854ee4d740a29":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c5ce7c704ca874aa623a99f2669737b52ec71cfc"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["fbb99676a68bd056726c87b20f1854ee4d740a29","c5ce7c704ca874aa623a99f2669737b52ec71cfc"]},"commit2Childs":{"d0d1f90e969803cc84174589b5e4a39b7935fecd":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0d1f90e969803cc84174589b5e4a39b7935fecd","fbb99676a68bd056726c87b20f1854ee4d740a29"],"fbb99676a68bd056726c87b20f1854ee4d740a29":["d0d1f90e969803cc84174589b5e4a39b7935fecd","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c5ce7c704ca874aa623a99f2669737b52ec71cfc","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c5ce7c704ca874aa623a99f2669737b52ec71cfc":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["d0d1f90e969803cc84174589b5e4a39b7935fecd","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}