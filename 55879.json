{"path":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","sourceNew":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","sourceNew":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","sourceNew":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","sourceNew":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fc9f4a33c8fefeb1260aea04273a36b0d32378e","date":1421852764,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","sourceNew":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSortSpec(\"weight, desc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSortSpec(\"w\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSortSpec(\"weight desc, bday\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSortSpec(\"pow(weight,,2) desc, bday asc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSortSpec(\"pow() desc, bday asc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSortSpec(\"pow((weight,2) desc, bday asc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c8dc56dbae186505066de8a78986cba31525ef0","date":1447876120,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/SortSpecParsingTest#testBad().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","sourceNew":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    //test some bad vals\n    try {\n      sort = SortSpecParsing.parseSortSpec(\"weight, desc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = SortSpecParsing.parseSortSpec(\"w\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = SortSpecParsing.parseSortSpec(\"weight desc, bday\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = SortSpecParsing.parseSortSpec(\"pow(weight,,2) desc, bday asc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = SortSpecParsing.parseSortSpec(\"pow() desc, bday asc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = SortSpecParsing.parseSortSpec(\"pow((weight,2) desc, bday asc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSortSpec(\"weight, desc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSortSpec(\"w\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSortSpec(\"weight desc, bday\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSortSpec(\"pow(weight,,2) desc, bday asc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSortSpec(\"pow() desc, bday asc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSortSpec(\"pow((weight,2) desc, bday asc\", req).getSort();\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c8dc56dbae186505066de8a78986cba31525ef0":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e"],"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["08970e5b8411182a29412c177eff67ec1110095b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6c8dc56dbae186505066de8a78986cba31525ef0"],"08970e5b8411182a29412c177eff67ec1110095b":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"6c8dc56dbae186505066de8a78986cba31525ef0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["6c8dc56dbae186505066de8a78986cba31525ef0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"08970e5b8411182a29412c177eff67ec1110095b":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}