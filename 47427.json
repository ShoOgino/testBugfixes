{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientConPoolTest#testPoolSize().mjava","commits":[{"id":"15fb22f207e0cbf913dbc9857b6a4fe30390a625","date":1475989569,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientConPoolTest#testPoolSize().mjava","pathOld":"/dev/null","sourceNew":"  public void testPoolSize() throws SolrServerException, IOException {\n    PoolingHttpClientConnectionManager pool = HttpClientUtil.createPoolingConnectionManager();\n    final HttpSolrClient client1 ;\n    final String fooUrl;\n    {\n      fooUrl = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n      CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams(), pool,\n            false /* let client shutdown it*/);\n      client1 = getHttpSolrClient(fooUrl, httpClient);\n      client1.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n    }\n    final String barUrl = yetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n    \n    List<String> urls = new ArrayList<>();\n    for(int i=0; i<17; i++) {\n      urls.add(fooUrl);\n    }\n    for(int i=0; i<31; i++) {\n      urls.add(barUrl);\n    }\n    \n    Collections.shuffle(urls, random());\n    \n    try {\n      int i=0;\n      for (String url : urls) {\n        if (!client1.getBaseURL().equals(url)) {\n          client1.setBaseURL(url);\n        }\n        client1.add(new SolrInputDocument(\"id\", \"\"+(i++)));\n      }\n      client1.setBaseURL(fooUrl);\n      client1.commit();\n      assertEquals(17, client1.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      \n      client1.setBaseURL(barUrl);\n      client1.commit();\n      assertEquals(31, client1.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      \n      PoolStats stats = pool.getTotalStats();\n      assertEquals(\"oh \"+stats, 2, stats.getAvailable());\n    } finally {\n      for (HttpSolrClient c : new HttpSolrClient []{ client1}) {\n        HttpClientUtil.close(c.getHttpClient());\n        c.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62af1a9971ab17b3a78c92d81cccccd5dd34653e","date":1476026269,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientConPoolTest#testPoolSize().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientConPoolTest#testPoolSize().mjava","sourceNew":"  public void testPoolSize() throws SolrServerException, IOException {\n    PoolingHttpClientConnectionManager pool = HttpClientUtil.createPoolingConnectionManager();\n    final HttpSolrClient client1 ;\n    final String fooUrl;\n    {\n      fooUrl = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n      CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams(), pool,\n            false /* let client shutdown it*/);\n      client1 = getHttpSolrClient(fooUrl, httpClient);\n      client1.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n    }\n    final String barUrl = yetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n    \n    {\n      client1.setBaseURL(fooUrl);\n      client1.deleteByQuery(\"*:*\");\n      client1.setBaseURL(barUrl);\n      client1.deleteByQuery(\"*:*\");\n    }\n    \n    List<String> urls = new ArrayList<>();\n    for(int i=0; i<17; i++) {\n      urls.add(fooUrl);\n    }\n    for(int i=0; i<31; i++) {\n      urls.add(barUrl);\n    }\n    \n    Collections.shuffle(urls, random());\n    \n    try {\n      int i=0;\n      for (String url : urls) {\n        if (!client1.getBaseURL().equals(url)) {\n          client1.setBaseURL(url);\n        }\n        client1.add(new SolrInputDocument(\"id\", \"\"+(i++)));\n      }\n      client1.setBaseURL(fooUrl);\n      client1.commit();\n      assertEquals(17, client1.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      \n      client1.setBaseURL(barUrl);\n      client1.commit();\n      assertEquals(31, client1.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      \n      PoolStats stats = pool.getTotalStats();\n      assertEquals(\"oh \"+stats, 2, stats.getAvailable());\n    } finally {\n      for (HttpSolrClient c : new HttpSolrClient []{ client1}) {\n        HttpClientUtil.close(c.getHttpClient());\n        c.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPoolSize() throws SolrServerException, IOException {\n    PoolingHttpClientConnectionManager pool = HttpClientUtil.createPoolingConnectionManager();\n    final HttpSolrClient client1 ;\n    final String fooUrl;\n    {\n      fooUrl = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n      CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams(), pool,\n            false /* let client shutdown it*/);\n      client1 = getHttpSolrClient(fooUrl, httpClient);\n      client1.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n    }\n    final String barUrl = yetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n    \n    List<String> urls = new ArrayList<>();\n    for(int i=0; i<17; i++) {\n      urls.add(fooUrl);\n    }\n    for(int i=0; i<31; i++) {\n      urls.add(barUrl);\n    }\n    \n    Collections.shuffle(urls, random());\n    \n    try {\n      int i=0;\n      for (String url : urls) {\n        if (!client1.getBaseURL().equals(url)) {\n          client1.setBaseURL(url);\n        }\n        client1.add(new SolrInputDocument(\"id\", \"\"+(i++)));\n      }\n      client1.setBaseURL(fooUrl);\n      client1.commit();\n      assertEquals(17, client1.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      \n      client1.setBaseURL(barUrl);\n      client1.commit();\n      assertEquals(31, client1.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      \n      PoolStats stats = pool.getTotalStats();\n      assertEquals(\"oh \"+stats, 2, stats.getAvailable());\n    } finally {\n      for (HttpSolrClient c : new HttpSolrClient []{ client1}) {\n        HttpClientUtil.close(c.getHttpClient());\n        c.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientConPoolTest#testPoolSize().mjava","pathOld":"/dev/null","sourceNew":"  public void testPoolSize() throws SolrServerException, IOException {\n    PoolingHttpClientConnectionManager pool = HttpClientUtil.createPoolingConnectionManager();\n    final HttpSolrClient client1 ;\n    final String fooUrl;\n    {\n      fooUrl = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n      CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams(), pool,\n            false /* let client shutdown it*/);\n      client1 = getHttpSolrClient(fooUrl, httpClient);\n      client1.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n    }\n    final String barUrl = yetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n    \n    {\n      client1.setBaseURL(fooUrl);\n      client1.deleteByQuery(\"*:*\");\n      client1.setBaseURL(barUrl);\n      client1.deleteByQuery(\"*:*\");\n    }\n    \n    List<String> urls = new ArrayList<>();\n    for(int i=0; i<17; i++) {\n      urls.add(fooUrl);\n    }\n    for(int i=0; i<31; i++) {\n      urls.add(barUrl);\n    }\n    \n    Collections.shuffle(urls, random());\n    \n    try {\n      int i=0;\n      for (String url : urls) {\n        if (!client1.getBaseURL().equals(url)) {\n          client1.setBaseURL(url);\n        }\n        client1.add(new SolrInputDocument(\"id\", \"\"+(i++)));\n      }\n      client1.setBaseURL(fooUrl);\n      client1.commit();\n      assertEquals(17, client1.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      \n      client1.setBaseURL(barUrl);\n      client1.commit();\n      assertEquals(31, client1.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      \n      PoolStats stats = pool.getTotalStats();\n      assertEquals(\"oh \"+stats, 2, stats.getAvailable());\n    } finally {\n      for (HttpSolrClient c : new HttpSolrClient []{ client1}) {\n        HttpClientUtil.close(c.getHttpClient());\n        c.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43d1e498704edd2bba13548a189eed4dfccff11b","date":1499143458,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientConPoolTest#testPoolSize().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientConPoolTest#testPoolSize().mjava","sourceNew":"  public void testPoolSize() throws SolrServerException, IOException {\n    PoolingHttpClientConnectionManager pool = HttpClientUtil.createPoolingConnectionManager();\n    final HttpSolrClient client1 ;\n    final String fooUrl;\n    {\n      fooUrl = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n      CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams(), pool,\n            false /* let client shutdown it*/);\n      client1 = getHttpSolrClient(fooUrl, httpClient, DEFAULT_CONNECTION_TIMEOUT);\n    }\n    final String barUrl = yetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n    \n    {\n      client1.setBaseURL(fooUrl);\n      client1.deleteByQuery(\"*:*\");\n      client1.setBaseURL(barUrl);\n      client1.deleteByQuery(\"*:*\");\n    }\n    \n    List<String> urls = new ArrayList<>();\n    for(int i=0; i<17; i++) {\n      urls.add(fooUrl);\n    }\n    for(int i=0; i<31; i++) {\n      urls.add(barUrl);\n    }\n    \n    Collections.shuffle(urls, random());\n    \n    try {\n      int i=0;\n      for (String url : urls) {\n        if (!client1.getBaseURL().equals(url)) {\n          client1.setBaseURL(url);\n        }\n        client1.add(new SolrInputDocument(\"id\", \"\"+(i++)));\n      }\n      client1.setBaseURL(fooUrl);\n      client1.commit();\n      assertEquals(17, client1.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      \n      client1.setBaseURL(barUrl);\n      client1.commit();\n      assertEquals(31, client1.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      \n      PoolStats stats = pool.getTotalStats();\n      assertEquals(\"oh \"+stats, 2, stats.getAvailable());\n    } finally {\n      for (HttpSolrClient c : new HttpSolrClient []{ client1}) {\n        HttpClientUtil.close(c.getHttpClient());\n        c.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPoolSize() throws SolrServerException, IOException {\n    PoolingHttpClientConnectionManager pool = HttpClientUtil.createPoolingConnectionManager();\n    final HttpSolrClient client1 ;\n    final String fooUrl;\n    {\n      fooUrl = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n      CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams(), pool,\n            false /* let client shutdown it*/);\n      client1 = getHttpSolrClient(fooUrl, httpClient);\n      client1.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n    }\n    final String barUrl = yetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n    \n    {\n      client1.setBaseURL(fooUrl);\n      client1.deleteByQuery(\"*:*\");\n      client1.setBaseURL(barUrl);\n      client1.deleteByQuery(\"*:*\");\n    }\n    \n    List<String> urls = new ArrayList<>();\n    for(int i=0; i<17; i++) {\n      urls.add(fooUrl);\n    }\n    for(int i=0; i<31; i++) {\n      urls.add(barUrl);\n    }\n    \n    Collections.shuffle(urls, random());\n    \n    try {\n      int i=0;\n      for (String url : urls) {\n        if (!client1.getBaseURL().equals(url)) {\n          client1.setBaseURL(url);\n        }\n        client1.add(new SolrInputDocument(\"id\", \"\"+(i++)));\n      }\n      client1.setBaseURL(fooUrl);\n      client1.commit();\n      assertEquals(17, client1.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      \n      client1.setBaseURL(barUrl);\n      client1.commit();\n      assertEquals(31, client1.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      \n      PoolStats stats = pool.getTotalStats();\n      assertEquals(\"oh \"+stats, 2, stats.getAvailable());\n    } finally {\n      for (HttpSolrClient c : new HttpSolrClient []{ client1}) {\n        HttpClientUtil.close(c.getHttpClient());\n        c.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientConPoolTest#testPoolSize().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientConPoolTest#testPoolSize().mjava","sourceNew":"  public void testPoolSize() throws SolrServerException, IOException {\n    PoolingHttpClientConnectionManager pool = HttpClientUtil.createPoolingConnectionManager();\n    final HttpSolrClient client1 ;\n    final String fooUrl;\n    {\n      fooUrl = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n      CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams(), pool,\n            false /* let client shutdown it*/);\n      client1 = getHttpSolrClient(fooUrl, httpClient, DEFAULT_CONNECTION_TIMEOUT);\n    }\n    final String barUrl = yetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n    \n    {\n      client1.setBaseURL(fooUrl);\n      client1.deleteByQuery(\"*:*\");\n      client1.setBaseURL(barUrl);\n      client1.deleteByQuery(\"*:*\");\n    }\n    \n    List<String> urls = new ArrayList<>();\n    for(int i=0; i<17; i++) {\n      urls.add(fooUrl);\n    }\n    for(int i=0; i<31; i++) {\n      urls.add(barUrl);\n    }\n    \n    Collections.shuffle(urls, random());\n    \n    try {\n      int i=0;\n      for (String url : urls) {\n        if (!client1.getBaseURL().equals(url)) {\n          client1.setBaseURL(url);\n        }\n        client1.add(new SolrInputDocument(\"id\", \"\"+(i++)));\n      }\n      client1.setBaseURL(fooUrl);\n      client1.commit();\n      assertEquals(17, client1.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      \n      client1.setBaseURL(barUrl);\n      client1.commit();\n      assertEquals(31, client1.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      \n      PoolStats stats = pool.getTotalStats();\n      assertEquals(\"oh \"+stats, 2, stats.getAvailable());\n    } finally {\n      for (HttpSolrClient c : new HttpSolrClient []{ client1}) {\n        HttpClientUtil.close(c.getHttpClient());\n        c.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPoolSize() throws SolrServerException, IOException {\n    PoolingHttpClientConnectionManager pool = HttpClientUtil.createPoolingConnectionManager();\n    final HttpSolrClient client1 ;\n    final String fooUrl;\n    {\n      fooUrl = jetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n      CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams(), pool,\n            false /* let client shutdown it*/);\n      client1 = getHttpSolrClient(fooUrl, httpClient);\n      client1.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n    }\n    final String barUrl = yetty.getBaseUrl().toString() + \"/\" + \"collection1\";\n    \n    {\n      client1.setBaseURL(fooUrl);\n      client1.deleteByQuery(\"*:*\");\n      client1.setBaseURL(barUrl);\n      client1.deleteByQuery(\"*:*\");\n    }\n    \n    List<String> urls = new ArrayList<>();\n    for(int i=0; i<17; i++) {\n      urls.add(fooUrl);\n    }\n    for(int i=0; i<31; i++) {\n      urls.add(barUrl);\n    }\n    \n    Collections.shuffle(urls, random());\n    \n    try {\n      int i=0;\n      for (String url : urls) {\n        if (!client1.getBaseURL().equals(url)) {\n          client1.setBaseURL(url);\n        }\n        client1.add(new SolrInputDocument(\"id\", \"\"+(i++)));\n      }\n      client1.setBaseURL(fooUrl);\n      client1.commit();\n      assertEquals(17, client1.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      \n      client1.setBaseURL(barUrl);\n      client1.commit();\n      assertEquals(31, client1.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n      \n      PoolStats stats = pool.getTotalStats();\n      assertEquals(\"oh \"+stats, 2, stats.getAvailable());\n    } finally {\n      for (HttpSolrClient c : new HttpSolrClient []{ client1}) {\n        HttpClientUtil.close(c.getHttpClient());\n        c.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43d1e498704edd2bba13548a189eed4dfccff11b":["62af1a9971ab17b3a78c92d81cccccd5dd34653e"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["62af1a9971ab17b3a78c92d81cccccd5dd34653e","43d1e498704edd2bba13548a189eed4dfccff11b"],"62af1a9971ab17b3a78c92d81cccccd5dd34653e":["15fb22f207e0cbf913dbc9857b6a4fe30390a625"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"15fb22f207e0cbf913dbc9857b6a4fe30390a625":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","62af1a9971ab17b3a78c92d81cccccd5dd34653e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43d1e498704edd2bba13548a189eed4dfccff11b"]},"commit2Childs":{"43d1e498704edd2bba13548a189eed4dfccff11b":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"62af1a9971ab17b3a78c92d81cccccd5dd34653e":["43d1e498704edd2bba13548a189eed4dfccff11b","2ea161f828a3a7a6eb9410a431aecda6d7ab1065","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15fb22f207e0cbf913dbc9857b6a4fe30390a625","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"15fb22f207e0cbf913dbc9857b6a4fe30390a625":["62af1a9971ab17b3a78c92d81cccccd5dd34653e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}