{"path":"lucene/src/java/org/apache/lucene/index/codecs/intblock/VariableIntBlockIndexInput.Index#read(IndexInput,boolean).mjava","commits":[{"id":"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8","date":1281277545,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/intblock/VariableIntBlockIndexInput.Index#read(IndexInput,boolean).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void read(final IndexInput indexIn, final boolean absolute) throws IOException {\n      if (absolute) {\n        fp = indexIn.readVLong();\n        upto = indexIn.readByte()&0xFF;\n      } else {\n        final long delta = indexIn.readVLong();\n        if (delta == 0) {\n          // same block\n          upto = indexIn.readByte()&0xFF;\n        } else {\n          // new block\n          fp += delta;\n          upto = indexIn.readByte()&0xFF;\n        }\n      }\n      // TODO: we can't do this assert because non-causal\n      // int encoders can have upto over the buffer size\n      //assert upto < maxBlockSize: \"upto=\" + upto + \" max=\" + maxBlockSize;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/intblock/VariableIntBlockIndexInput.Index#read(IndexInput,boolean).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void read(final IndexInput indexIn, final boolean absolute) throws IOException {\n      if (absolute) {\n        fp = indexIn.readVLong();\n        upto = indexIn.readByte()&0xFF;\n      } else {\n        final long delta = indexIn.readVLong();\n        if (delta == 0) {\n          // same block\n          upto = indexIn.readByte()&0xFF;\n        } else {\n          // new block\n          fp += delta;\n          upto = indexIn.readByte()&0xFF;\n        }\n      }\n      // TODO: we can't do this assert because non-causal\n      // int encoders can have upto over the buffer size\n      //assert upto < maxBlockSize: \"upto=\" + upto + \" max=\" + maxBlockSize;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/intblock/VariableIntBlockIndexInput.Index#read(DataInput,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/intblock/VariableIntBlockIndexInput.Index#read(IndexInput,boolean).mjava","sourceNew":"    @Override\n    public void read(final DataInput indexIn, final boolean absolute) throws IOException {\n      if (absolute) {\n        fp = indexIn.readVLong();\n        upto = indexIn.readByte()&0xFF;\n      } else {\n        final long delta = indexIn.readVLong();\n        if (delta == 0) {\n          // same block\n          upto = indexIn.readByte()&0xFF;\n        } else {\n          // new block\n          fp += delta;\n          upto = indexIn.readByte()&0xFF;\n        }\n      }\n      // TODO: we can't do this assert because non-causal\n      // int encoders can have upto over the buffer size\n      //assert upto < maxBlockSize: \"upto=\" + upto + \" max=\" + maxBlockSize;\n    }\n\n","sourceOld":"    @Override\n    public void read(final IndexInput indexIn, final boolean absolute) throws IOException {\n      if (absolute) {\n        fp = indexIn.readVLong();\n        upto = indexIn.readByte()&0xFF;\n      } else {\n        final long delta = indexIn.readVLong();\n        if (delta == 0) {\n          // same block\n          upto = indexIn.readByte()&0xFF;\n        } else {\n          // new block\n          fp += delta;\n          upto = indexIn.readByte()&0xFF;\n        }\n      }\n      // TODO: we can't do this assert because non-causal\n      // int encoders can have upto over the buffer size\n      //assert upto < maxBlockSize: \"upto=\" + upto + \" max=\" + maxBlockSize;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/intblock/VariableIntBlockIndexInput.Index#read(DataInput,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/intblock/VariableIntBlockIndexInput.Index#read(IndexInput,boolean).mjava","sourceNew":"    @Override\n    public void read(final DataInput indexIn, final boolean absolute) throws IOException {\n      if (absolute) {\n        fp = indexIn.readVLong();\n        upto = indexIn.readByte()&0xFF;\n      } else {\n        final long delta = indexIn.readVLong();\n        if (delta == 0) {\n          // same block\n          upto = indexIn.readByte()&0xFF;\n        } else {\n          // new block\n          fp += delta;\n          upto = indexIn.readByte()&0xFF;\n        }\n      }\n      // TODO: we can't do this assert because non-causal\n      // int encoders can have upto over the buffer size\n      //assert upto < maxBlockSize: \"upto=\" + upto + \" max=\" + maxBlockSize;\n    }\n\n","sourceOld":"    @Override\n    public void read(final IndexInput indexIn, final boolean absolute) throws IOException {\n      if (absolute) {\n        fp = indexIn.readVLong();\n        upto = indexIn.readByte()&0xFF;\n      } else {\n        final long delta = indexIn.readVLong();\n        if (delta == 0) {\n          // same block\n          upto = indexIn.readByte()&0xFF;\n        } else {\n          // new block\n          fp += delta;\n          upto = indexIn.readByte()&0xFF;\n        }\n      }\n      // TODO: we can't do this assert because non-causal\n      // int encoders can have upto over the buffer size\n      //assert upto < maxBlockSize: \"upto=\" + upto + \" max=\" + maxBlockSize;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/intblock/VariableIntBlockIndexInput.Index#read(IndexInput,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void read(final IndexInput indexIn, final boolean absolute) throws IOException {\n      if (absolute) {\n        fp = indexIn.readVLong();\n        upto = indexIn.readByte()&0xFF;\n      } else {\n        final long delta = indexIn.readVLong();\n        if (delta == 0) {\n          // same block\n          upto = indexIn.readByte()&0xFF;\n        } else {\n          // new block\n          fp += delta;\n          upto = indexIn.readByte()&0xFF;\n        }\n      }\n      // TODO: we can't do this assert because non-causal\n      // int encoders can have upto over the buffer size\n      //assert upto < maxBlockSize: \"upto=\" + upto + \" max=\" + maxBlockSize;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b1add9ddc0005b07550d4350720aac22dc9886b3":["03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b1add9ddc0005b07550d4350720aac22dc9886b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b1add9ddc0005b07550d4350720aac22dc9886b3"]},"commit2Childs":{"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8":["29ef99d61cda9641b6250bf9567329a6e65f901d","b1add9ddc0005b07550d4350720aac22dc9886b3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}