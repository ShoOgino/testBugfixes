{"path":"src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","commits":[{"id":"9ad07cf326135fbb108f766a0798c8ee00b17dcb","date":1077215339,"type":1,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentsReader#norms(String).mjava","sourceNew":"  public synchronized byte[] norms(String field) throws IOException {\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;\t\t\t\t  // cache hit\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < readers.length; i++)\n      readers[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);\t\t  // update cache\n    return bytes;\n  }\n\n","sourceOld":"  public final synchronized byte[] norms(String field) throws IOException {\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;\t\t\t\t  // cache hit\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < readers.length; i++)\n      readers[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);\t\t  // update cache\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f653aecb322b74d99e6ecdb93765e453a3d7aa71","date":1082107025,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","sourceNew":"  public synchronized byte[] norms(String field) throws IOException {\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;\t\t\t\t  // cache hit\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);\t\t  // update cache\n    return bytes;\n  }\n\n","sourceOld":"  public synchronized byte[] norms(String field) throws IOException {\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;\t\t\t\t  // cache hit\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < readers.length; i++)\n      readers[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);\t\t  // update cache\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbe196f6406e5d96f401c346389b069dc7fd0e1","date":1084538986,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","sourceNew":"  public synchronized byte[] norms(String field) throws IOException {\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","sourceOld":"  public synchronized byte[] norms(String field) throws IOException {\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;\t\t\t\t  // cache hit\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);\t\t  // update cache\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"950f3c7592cb559e2534e5089c78833250e156a3","date":1130557968,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","sourceNew":"  public synchronized byte[] norms(String field) throws IOException {\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return fakeNorms();\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","sourceOld":"  public synchronized byte[] norms(String field) throws IOException {\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","sourceNew":"  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return fakeNorms();\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","sourceOld":"  public synchronized byte[] norms(String field) throws IOException {\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return fakeNorms();\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f2552b9f13037c62acd400d263d1e9262d6e4e","date":1185490328,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","sourceNew":"  public synchronized byte[] norms(String field) throws IOException {\r\n    ensureOpen();\r\n    byte[] bytes = (byte[])normsCache.get(field);\r\n    if (bytes != null)\r\n      return bytes;          // cache hit\r\n    if (!hasNorms(field))\r\n      return fakeNorms();\r\n\r\n    bytes = new byte[maxDoc()];\r\n    for (int i = 0; i < subReaders.length; i++)\r\n      subReaders[i].norms(field, bytes, starts[i]);\r\n    normsCache.put(field, bytes);      // update cache\r\n    return bytes;\r\n  }\r\n\n","sourceOld":"  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return fakeNorms();\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"125b5699f11b58d9be0820c6ce8b1648812902e8","date":1190273227,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","pathOld":"/dev/null","sourceNew":"  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return fakeNorms();\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a","date":1240951127,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","sourceNew":"  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return getDisableFakeNorms() ? null : fakeNorms();\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","sourceOld":"  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return fakeNorms();\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1","date":1255502337,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","sourceNew":"  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return null;\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","sourceOld":"  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return getDisableFakeNorms() ? null : fakeNorms();\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d","date":1255859449,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","sourceNew":"  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return null;\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","sourceOld":"  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return null;\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","sourceNew":"  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return null;\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","sourceOld":"  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return null;\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","sourceNew":"  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return null;\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","sourceOld":"  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return null;\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"125b5699f11b58d9be0820c6ce8b1648812902e8":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["950f3c7592cb559e2534e5089c78833250e156a3"],"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"950f3c7592cb559e2534e5089c78833250e156a3":["ddbe196f6406e5d96f401c346389b069dc7fd0e1"],"8a9e385641d717e641408d8fbbc62be8fc766357":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"9ad07cf326135fbb108f766a0798c8ee00b17dcb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["9ad07cf326135fbb108f766a0798c8ee00b17dcb"],"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"ddbe196f6406e5d96f401c346389b069dc7fd0e1":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"125b5699f11b58d9be0820c6ce8b1648812902e8":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"950f3c7592cb559e2534e5089c78833250e156a3":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"9ad07cf326135fbb108f766a0798c8ee00b17dcb":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["ddbe196f6406e5d96f401c346389b069dc7fd0e1"],"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["8a9e385641d717e641408d8fbbc62be8fc766357"],"ddbe196f6406e5d96f401c346389b069dc7fd0e1":["950f3c7592cb559e2534e5089c78833250e156a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ad07cf326135fbb108f766a0798c8ee00b17dcb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}