{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","commits":[{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOptimize#testOptimizeMaxNumSegments().mjava","sourceNew":"  public void testPartialMerge() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", StringField.TYPE_UNSTORED));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random, incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testOptimizeMaxNumSegments() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", StringField.TYPE_UNSTORED));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random, incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setMergePolicy(ldmp));\n      writer.optimize(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","sourceNew":"  public void testPartialMerge() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", StringField.TYPE_UNSTORED));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random, incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testPartialMerge() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", StringField.TYPE_UNSTORED));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random, incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}