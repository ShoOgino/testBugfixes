{"path":"solr/core/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType]#hashCode().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType]#hashCode().mjava","pathOld":"solr/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType]#hashCode().mjava","sourceNew":"  /** Returns a hash code value for this object. */\n  @Override\n  public int hashCode() {\n    // don't bother making the hash expensive - the center latitude + min longitude will be very uinque \n    long hash = Double.doubleToLongBits(latCenter);\n    hash = hash * 31 + Double.doubleToLongBits(lonMin);\n    return (int)(hash >> 32 + hash);\n  }\n\n","sourceOld":"  /** Returns a hash code value for this object. */\n  @Override\n  public int hashCode() {\n    // don't bother making the hash expensive - the center latitude + min longitude will be very uinque \n    long hash = Double.doubleToLongBits(latCenter);\n    hash = hash * 31 + Double.doubleToLongBits(lonMin);\n    return (int)(hash >> 32 + hash);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType]#hashCode().mjava","pathOld":"solr/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType]#hashCode().mjava","sourceNew":"  /** Returns a hash code value for this object. */\n  @Override\n  public int hashCode() {\n    // don't bother making the hash expensive - the center latitude + min longitude will be very uinque \n    long hash = Double.doubleToLongBits(latCenter);\n    hash = hash * 31 + Double.doubleToLongBits(lonMin);\n    return (int)(hash >> 32 + hash);\n  }\n\n","sourceOld":"  /** Returns a hash code value for this object. */\n  @Override\n  public int hashCode() {\n    // don't bother making the hash expensive - the center latitude + min longitude will be very uinque \n    long hash = Double.doubleToLongBits(latCenter);\n    hash = hash * 31 + Double.doubleToLongBits(lonMin);\n    return (int)(hash >> 32 + hash);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType]#hashCode().mjava","pathOld":"solr/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType]#hashCode().mjava","sourceNew":"  /** Returns a hash code value for this object. */\n  @Override\n  public int hashCode() {\n    // don't bother making the hash expensive - the center latitude + min longitude will be very uinque \n    long hash = Double.doubleToLongBits(latCenter);\n    hash = hash * 31 + Double.doubleToLongBits(lonMin);\n    return (int)(hash >> 32 + hash);\n  }\n\n","sourceOld":"  /** Returns a hash code value for this object. */\n  @Override\n  public int hashCode() {\n    // don't bother making the hash expensive - the center latitude + min longitude will be very uinque \n    long hash = Double.doubleToLongBits(latCenter);\n    hash = hash * 31 + Double.doubleToLongBits(lonMin);\n    return (int)(hash >> 32 + hash);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69227e655c7a72315c68e596f0a899f339b1ec2b","date":1340137626,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType]#hashCode().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType]#hashCode().mjava","sourceNew":"  /** Returns a hash code value for this object. */\n  @Override\n  public int hashCode() {\n    // don't bother making the hash expensive - the center latitude + min longitude will be very uinque \n    long hash = Double.doubleToLongBits(latCenter);\n    hash = hash * 31 + Double.doubleToLongBits(lonMin);\n    hash = hash * 31 + (long)super.hashCode();\n    return (int)(hash >> 32 + hash);\n  }\n\n","sourceOld":"  /** Returns a hash code value for this object. */\n  @Override\n  public int hashCode() {\n    // don't bother making the hash expensive - the center latitude + min longitude will be very uinque \n    long hash = Double.doubleToLongBits(latCenter);\n    hash = hash * 31 + Double.doubleToLongBits(lonMin);\n    return (int)(hash >> 32 + hash);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da956410d7a790f567af4e7e94584fb0930212f2","date":1346859431,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType]#hashCode().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType]#hashCode().mjava","sourceNew":"  /** Returns a hash code value for this object. */\n  @Override\n  public int hashCode() {\n    // don't bother making the hash expensive - the center latitude + min longitude will be very unique\n    long hash = Double.doubleToLongBits(latCenter);\n    hash = hash * 31 + Double.doubleToLongBits(lonMin);\n    hash = hash * 31 + (long)super.hashCode();\n    return (int)(hash >> 32 + hash);\n  }\n\n","sourceOld":"  /** Returns a hash code value for this object. */\n  @Override\n  public int hashCode() {\n    // don't bother making the hash expensive - the center latitude + min longitude will be very uinque \n    long hash = Double.doubleToLongBits(latCenter);\n    hash = hash * 31 + Double.doubleToLongBits(lonMin);\n    hash = hash * 31 + (long)super.hashCode();\n    return (int)(hash >> 32 + hash);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType]#hashCode().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType]#hashCode().mjava","sourceNew":"  /** Returns a hash code value for this object. */\n  @Override\n  public int hashCode() {\n    // don't bother making the hash expensive - the center latitude + min longitude will be very unique\n    long hash = classHash();\n    hash = hash * 31 + Double.doubleToLongBits(latCenter);\n    hash = hash * 31 + Double.doubleToLongBits(lonMin);\n    return (int) (hash >> 32 + hash);\n  }\n\n","sourceOld":"  /** Returns a hash code value for this object. */\n  @Override\n  public int hashCode() {\n    // don't bother making the hash expensive - the center latitude + min longitude will be very unique\n    long hash = Double.doubleToLongBits(latCenter);\n    hash = hash * 31 + Double.doubleToLongBits(lonMin);\n    hash = hash * 31 + (long)super.hashCode();\n    return (int)(hash >> 32 + hash);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType]#hashCode().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType]#hashCode().mjava","sourceNew":"  /** Returns a hash code value for this object. */\n  @Override\n  public int hashCode() {\n    // don't bother making the hash expensive - the center latitude + min longitude will be very unique\n    long hash = classHash();\n    hash = hash * 31 + Double.doubleToLongBits(latCenter);\n    hash = hash * 31 + Double.doubleToLongBits(lonMin);\n    return (int) (hash >> 32 + hash);\n  }\n\n","sourceOld":"  /** Returns a hash code value for this object. */\n  @Override\n  public int hashCode() {\n    // don't bother making the hash expensive - the center latitude + min longitude will be very unique\n    long hash = Double.doubleToLongBits(latCenter);\n    hash = hash * 31 + Double.doubleToLongBits(lonMin);\n    hash = hash * 31 + (long)super.hashCode();\n    return (int)(hash >> 32 + hash);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"69227e655c7a72315c68e596f0a899f339b1ec2b":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"da956410d7a790f567af4e7e94584fb0930212f2":["69227e655c7a72315c68e596f0a899f339b1ec2b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["da956410d7a790f567af4e7e94584fb0930212f2"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["da956410d7a790f567af4e7e94584fb0930212f2","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e7bc21595222ae4f75509300fbb7726691f387f"]},"commit2Childs":{"69227e655c7a72315c68e596f0a899f339b1ec2b":["da956410d7a790f567af4e7e94584fb0930212f2"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["69227e655c7a72315c68e596f0a899f339b1ec2b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"da956410d7a790f567af4e7e94584fb0930212f2":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"0e7bc21595222ae4f75509300fbb7726691f387f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}