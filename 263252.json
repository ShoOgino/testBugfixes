{"path":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, true, false, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          ExactSimScorer docScorer = similarity.exactSimScorer(stats, context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      return new ComplexExplanation(false, 0.0f, \"no matching term\");      \n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, true, false, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          ExactSimScorer docScorer = similarity.exactSimScorer(stats, context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      return new ComplexExplanation(false, 0.0f, \"no matching term\");      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b799defcfda6d303cbb180917bf1e749089adf42","date":1370695356,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, true, false, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      return new ComplexExplanation(false, 0.0f, \"no matching term\");      \n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, true, false, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          ExactSimScorer docScorer = similarity.exactSimScorer(stats, context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      return new ComplexExplanation(false, 0.0f, \"no matching term\");      \n    }\n\n","bugFix":["660345363f16c7d4c38aa11a35bf59aa99466cf1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      return new ComplexExplanation(false, 0.0f, \"no matching term\");      \n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, true, false, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      return new ComplexExplanation(false, 0.0f, \"no matching term\");      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      return new ComplexExplanation(false, 0.0f, \"no matching term\");      \n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, true, false, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      return new ComplexExplanation(false, 0.0f, \"no matching term\");      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      return new ComplexExplanation(false, 0.0f, \"no matching term\");      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["b799defcfda6d303cbb180917bf1e749089adf42"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b799defcfda6d303cbb180917bf1e749089adf42":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acf00221f44c5f08ccea014f2492b53af15ecd66":["b799defcfda6d303cbb180917bf1e749089adf42","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b799defcfda6d303cbb180917bf1e749089adf42"],"b799defcfda6d303cbb180917bf1e749089adf42":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}