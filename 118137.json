{"path":"solr/core/src/java/org/apache/solr/schema/AbstractEnumField.EnumMapping#EnumMapping(IndexSchema,FieldType,Map[String,String]).mjava","commits":[{"id":"54ad8c9e9210e008dc7b8ad5a037ff20879150ea","date":1501889566,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractEnumField.EnumMapping#EnumMapping(IndexSchema,FieldType,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"    /** \n     * Takes in a FieldType and the initArgs Map used for that type, removing the keys\n     * that specify the enum.\n     *\n     * @param schema for opening resources\n     * @param fieldType Used for logging or error messages\n     * @param args the init args to comsume the enum name + config file from\n     */\n    public EnumMapping(IndexSchema schema, FieldType fieldType, Map<String, String> args) {\n      final String ftName = fieldType.getTypeName();\n      \n      // NOTE: ghosting member variables for most of constructor\n      final Map<String, Integer> enumStringToIntMap = new HashMap<>();\n      final Map<Integer, String> enumIntToStringMap = new HashMap<>();\n      \n      enumsConfigFile = args.get(PARAM_ENUMS_CONFIG);\n      if (enumsConfigFile == null) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n                                ftName + \": No enums config file was configured.\");\n      }\n      enumName = args.get(PARAM_ENUM_NAME);\n      if (enumName == null) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n                                ftName + \": No enum name was configured.\");\n      }\n      \n      InputStream is = null;\n      \n      try {\n        is = schema.getResourceLoader().openResource(enumsConfigFile);\n        final DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n        try {\n          final Document doc = dbf.newDocumentBuilder().parse(is);\n          final XPathFactory xpathFactory = XPathFactory.newInstance();\n          final XPath xpath = xpathFactory.newXPath();\n          final String xpathStr = String.format(Locale.ROOT, \"/enumsConfig/enum[@name='%s']\", enumName);\n          final NodeList nodes = (NodeList) xpath.evaluate(xpathStr, doc, XPathConstants.NODESET);\n          final int nodesLength = nodes.getLength();\n          if (nodesLength == 0) {\n            String exceptionMessage = String.format\n              (Locale.ENGLISH, \"%s: No enum configuration found for enum '%s' in %s.\",\n               ftName, enumName, enumsConfigFile);\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, exceptionMessage);\n          }\n          if (nodesLength > 1) {\n            if (log.isWarnEnabled())\n              log.warn(\"{}: More than one enum configuration found for enum '{}' in {}. The last one was taken.\",\n                       ftName, enumName, enumsConfigFile);\n          }\n          final Node enumNode = nodes.item(nodesLength - 1);\n          final NodeList valueNodes = (NodeList) xpath.evaluate(\"value\", enumNode, XPathConstants.NODESET);\n          for (int i = 0; i < valueNodes.getLength(); i++) {\n            final Node valueNode = valueNodes.item(i);\n            final String valueStr = valueNode.getTextContent();\n            if ((valueStr == null) || (valueStr.length() == 0)) {\n              final String exceptionMessage = String.format\n                (Locale.ENGLISH, \"%s: A value was defined with an no value in enum '%s' in %s.\",\n                 ftName, enumName, enumsConfigFile);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, exceptionMessage);\n            }\n            if (enumStringToIntMap.containsKey(valueStr)) {\n              final String exceptionMessage = String.format\n                (Locale.ENGLISH, \"%s: A duplicated definition was found for value '%s' in enum '%s' in %s.\",\n                 ftName, valueStr, enumName, enumsConfigFile);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, exceptionMessage);\n            }\n            enumIntToStringMap.put(i, valueStr);\n            enumStringToIntMap.put(valueStr, i);\n          }\n        }\n        catch (ParserConfigurationException | XPathExpressionException | SAXException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  ftName + \": Error parsing enums config.\", e);\n        }\n      }\n      catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                ftName + \": Error while opening enums config.\", e);\n      } finally {\n        try {\n          if (is != null) {\n            is.close();\n          }\n        }\n        catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n      \n      if ((enumStringToIntMap.size() == 0) || (enumIntToStringMap.size() == 0)) {\n        String exceptionMessage = String.format\n          (Locale.ENGLISH, \"%s: Invalid configuration was defined for enum '%s' in %s.\",\n           ftName, enumName, enumsConfigFile);\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, exceptionMessage);\n      }\n      \n      this.enumStringToIntMap = Collections.unmodifiableMap(enumStringToIntMap);\n      this.enumIntToStringMap = Collections.unmodifiableMap(enumIntToStringMap);\n      \n      args.remove(PARAM_ENUMS_CONFIG);\n      args.remove(PARAM_ENUM_NAME);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractEnumField.EnumMapping#EnumMapping(IndexSchema,FieldType,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"    /** \n     * Takes in a FieldType and the initArgs Map used for that type, removing the keys\n     * that specify the enum.\n     *\n     * @param schema for opening resources\n     * @param fieldType Used for logging or error messages\n     * @param args the init args to comsume the enum name + config file from\n     */\n    public EnumMapping(IndexSchema schema, FieldType fieldType, Map<String, String> args) {\n      final String ftName = fieldType.getTypeName();\n      \n      // NOTE: ghosting member variables for most of constructor\n      final Map<String, Integer> enumStringToIntMap = new HashMap<>();\n      final Map<Integer, String> enumIntToStringMap = new HashMap<>();\n      \n      enumsConfigFile = args.get(PARAM_ENUMS_CONFIG);\n      if (enumsConfigFile == null) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n                                ftName + \": No enums config file was configured.\");\n      }\n      enumName = args.get(PARAM_ENUM_NAME);\n      if (enumName == null) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n                                ftName + \": No enum name was configured.\");\n      }\n      \n      InputStream is = null;\n      \n      try {\n        is = schema.getResourceLoader().openResource(enumsConfigFile);\n        final DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n        try {\n          final Document doc = dbf.newDocumentBuilder().parse(is);\n          final XPathFactory xpathFactory = XPathFactory.newInstance();\n          final XPath xpath = xpathFactory.newXPath();\n          final String xpathStr = String.format(Locale.ROOT, \"/enumsConfig/enum[@name='%s']\", enumName);\n          final NodeList nodes = (NodeList) xpath.evaluate(xpathStr, doc, XPathConstants.NODESET);\n          final int nodesLength = nodes.getLength();\n          if (nodesLength == 0) {\n            String exceptionMessage = String.format\n              (Locale.ENGLISH, \"%s: No enum configuration found for enum '%s' in %s.\",\n               ftName, enumName, enumsConfigFile);\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, exceptionMessage);\n          }\n          if (nodesLength > 1) {\n            if (log.isWarnEnabled())\n              log.warn(\"{}: More than one enum configuration found for enum '{}' in {}. The last one was taken.\",\n                       ftName, enumName, enumsConfigFile);\n          }\n          final Node enumNode = nodes.item(nodesLength - 1);\n          final NodeList valueNodes = (NodeList) xpath.evaluate(\"value\", enumNode, XPathConstants.NODESET);\n          for (int i = 0; i < valueNodes.getLength(); i++) {\n            final Node valueNode = valueNodes.item(i);\n            final String valueStr = valueNode.getTextContent();\n            if ((valueStr == null) || (valueStr.length() == 0)) {\n              final String exceptionMessage = String.format\n                (Locale.ENGLISH, \"%s: A value was defined with an no value in enum '%s' in %s.\",\n                 ftName, enumName, enumsConfigFile);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, exceptionMessage);\n            }\n            if (enumStringToIntMap.containsKey(valueStr)) {\n              final String exceptionMessage = String.format\n                (Locale.ENGLISH, \"%s: A duplicated definition was found for value '%s' in enum '%s' in %s.\",\n                 ftName, valueStr, enumName, enumsConfigFile);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, exceptionMessage);\n            }\n            enumIntToStringMap.put(i, valueStr);\n            enumStringToIntMap.put(valueStr, i);\n          }\n        }\n        catch (ParserConfigurationException | XPathExpressionException | SAXException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  ftName + \": Error parsing enums config.\", e);\n        }\n      }\n      catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                ftName + \": Error while opening enums config.\", e);\n      } finally {\n        try {\n          if (is != null) {\n            is.close();\n          }\n        }\n        catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n      \n      if ((enumStringToIntMap.size() == 0) || (enumIntToStringMap.size() == 0)) {\n        String exceptionMessage = String.format\n          (Locale.ENGLISH, \"%s: Invalid configuration was defined for enum '%s' in %s.\",\n           ftName, enumName, enumsConfigFile);\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, exceptionMessage);\n      }\n      \n      this.enumStringToIntMap = Collections.unmodifiableMap(enumStringToIntMap);\n      this.enumIntToStringMap = Collections.unmodifiableMap(enumIntToStringMap);\n      \n      args.remove(PARAM_ENUMS_CONFIG);\n      args.remove(PARAM_ENUM_NAME);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575ba8a7e01f51915a430b8c67d2461f0703feaa","date":1529234129,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractEnumField.EnumMapping#EnumMapping(IndexSchema,FieldType,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractEnumField.EnumMapping#EnumMapping(IndexSchema,FieldType,Map[String,String]).mjava","sourceNew":"    /** \n     * Takes in a FieldType and the initArgs Map used for that type, removing the keys\n     * that specify the enum.\n     *\n     * @param schema for opening resources\n     * @param fieldType Used for logging or error messages\n     * @param args the init args to comsume the enum name + config file from\n     */\n    public EnumMapping(IndexSchema schema, FieldType fieldType, Map<String, String> args) {\n      final String ftName = fieldType.getTypeName();\n      \n      // NOTE: ghosting member variables for most of constructor\n      final Map<String, Integer> enumStringToIntMap = new HashMap<>();\n      final Map<Integer, String> enumIntToStringMap = new HashMap<>();\n      \n      enumsConfigFile = args.get(PARAM_ENUMS_CONFIG);\n      if (enumsConfigFile == null) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n                                ftName + \": No enums config file was configured.\");\n      }\n      enumName = args.get(PARAM_ENUM_NAME);\n      if (enumName == null) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n                                ftName + \": No enum name was configured.\");\n      }\n      \n      final SolrResourceLoader loader = schema.getResourceLoader(); \n      try {\n        log.debug(\"Reloading enums config file from {}\", enumsConfigFile);\n        Document doc = SafeXMLParsing.parseConfigXML(log, loader, enumsConfigFile);\n        final XPathFactory xpathFactory = XPathFactory.newInstance();\n        final XPath xpath = xpathFactory.newXPath();\n        final String xpathStr = String.format(Locale.ROOT, \"/enumsConfig/enum[@name='%s']\", enumName);\n        final NodeList nodes = (NodeList) xpath.evaluate(xpathStr, doc, XPathConstants.NODESET);\n        final int nodesLength = nodes.getLength();\n        if (nodesLength == 0) {\n          String exceptionMessage = String.format\n            (Locale.ENGLISH, \"%s: No enum configuration found for enum '%s' in %s.\",\n             ftName, enumName, enumsConfigFile);\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, exceptionMessage);\n        }\n        if (nodesLength > 1) {\n          if (log.isWarnEnabled())\n            log.warn(\"{}: More than one enum configuration found for enum '{}' in {}. The last one was taken.\",\n                     ftName, enumName, enumsConfigFile);\n        }\n        final Node enumNode = nodes.item(nodesLength - 1);\n        final NodeList valueNodes = (NodeList) xpath.evaluate(\"value\", enumNode, XPathConstants.NODESET);\n        for (int i = 0; i < valueNodes.getLength(); i++) {\n          final Node valueNode = valueNodes.item(i);\n          final String valueStr = valueNode.getTextContent();\n          if ((valueStr == null) || (valueStr.length() == 0)) {\n            final String exceptionMessage = String.format\n              (Locale.ENGLISH, \"%s: A value was defined with an no value in enum '%s' in %s.\",\n               ftName, enumName, enumsConfigFile);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, exceptionMessage);\n          }\n          if (enumStringToIntMap.containsKey(valueStr)) {\n            final String exceptionMessage = String.format\n              (Locale.ENGLISH, \"%s: A duplicated definition was found for value '%s' in enum '%s' in %s.\",\n               ftName, valueStr, enumName, enumsConfigFile);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, exceptionMessage);\n          }\n          enumIntToStringMap.put(i, valueStr);\n          enumStringToIntMap.put(valueStr, i);\n        }\n      } catch (IOException | SAXException | XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                ftName + \": Error while parsing enums config.\", e);\n      }\n      \n      if ((enumStringToIntMap.size() == 0) || (enumIntToStringMap.size() == 0)) {\n        String exceptionMessage = String.format\n          (Locale.ENGLISH, \"%s: Invalid configuration was defined for enum '%s' in %s.\",\n           ftName, enumName, enumsConfigFile);\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, exceptionMessage);\n      }\n      \n      this.enumStringToIntMap = Collections.unmodifiableMap(enumStringToIntMap);\n      this.enumIntToStringMap = Collections.unmodifiableMap(enumIntToStringMap);\n      \n      args.remove(PARAM_ENUMS_CONFIG);\n      args.remove(PARAM_ENUM_NAME);\n    }\n\n","sourceOld":"    /** \n     * Takes in a FieldType and the initArgs Map used for that type, removing the keys\n     * that specify the enum.\n     *\n     * @param schema for opening resources\n     * @param fieldType Used for logging or error messages\n     * @param args the init args to comsume the enum name + config file from\n     */\n    public EnumMapping(IndexSchema schema, FieldType fieldType, Map<String, String> args) {\n      final String ftName = fieldType.getTypeName();\n      \n      // NOTE: ghosting member variables for most of constructor\n      final Map<String, Integer> enumStringToIntMap = new HashMap<>();\n      final Map<Integer, String> enumIntToStringMap = new HashMap<>();\n      \n      enumsConfigFile = args.get(PARAM_ENUMS_CONFIG);\n      if (enumsConfigFile == null) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n                                ftName + \": No enums config file was configured.\");\n      }\n      enumName = args.get(PARAM_ENUM_NAME);\n      if (enumName == null) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n                                ftName + \": No enum name was configured.\");\n      }\n      \n      InputStream is = null;\n      \n      try {\n        is = schema.getResourceLoader().openResource(enumsConfigFile);\n        final DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n        try {\n          final Document doc = dbf.newDocumentBuilder().parse(is);\n          final XPathFactory xpathFactory = XPathFactory.newInstance();\n          final XPath xpath = xpathFactory.newXPath();\n          final String xpathStr = String.format(Locale.ROOT, \"/enumsConfig/enum[@name='%s']\", enumName);\n          final NodeList nodes = (NodeList) xpath.evaluate(xpathStr, doc, XPathConstants.NODESET);\n          final int nodesLength = nodes.getLength();\n          if (nodesLength == 0) {\n            String exceptionMessage = String.format\n              (Locale.ENGLISH, \"%s: No enum configuration found for enum '%s' in %s.\",\n               ftName, enumName, enumsConfigFile);\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, exceptionMessage);\n          }\n          if (nodesLength > 1) {\n            if (log.isWarnEnabled())\n              log.warn(\"{}: More than one enum configuration found for enum '{}' in {}. The last one was taken.\",\n                       ftName, enumName, enumsConfigFile);\n          }\n          final Node enumNode = nodes.item(nodesLength - 1);\n          final NodeList valueNodes = (NodeList) xpath.evaluate(\"value\", enumNode, XPathConstants.NODESET);\n          for (int i = 0; i < valueNodes.getLength(); i++) {\n            final Node valueNode = valueNodes.item(i);\n            final String valueStr = valueNode.getTextContent();\n            if ((valueStr == null) || (valueStr.length() == 0)) {\n              final String exceptionMessage = String.format\n                (Locale.ENGLISH, \"%s: A value was defined with an no value in enum '%s' in %s.\",\n                 ftName, enumName, enumsConfigFile);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, exceptionMessage);\n            }\n            if (enumStringToIntMap.containsKey(valueStr)) {\n              final String exceptionMessage = String.format\n                (Locale.ENGLISH, \"%s: A duplicated definition was found for value '%s' in enum '%s' in %s.\",\n                 ftName, valueStr, enumName, enumsConfigFile);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, exceptionMessage);\n            }\n            enumIntToStringMap.put(i, valueStr);\n            enumStringToIntMap.put(valueStr, i);\n          }\n        }\n        catch (ParserConfigurationException | XPathExpressionException | SAXException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  ftName + \": Error parsing enums config.\", e);\n        }\n      }\n      catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                ftName + \": Error while opening enums config.\", e);\n      } finally {\n        try {\n          if (is != null) {\n            is.close();\n          }\n        }\n        catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n      \n      if ((enumStringToIntMap.size() == 0) || (enumIntToStringMap.size() == 0)) {\n        String exceptionMessage = String.format\n          (Locale.ENGLISH, \"%s: Invalid configuration was defined for enum '%s' in %s.\",\n           ftName, enumName, enumsConfigFile);\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, exceptionMessage);\n      }\n      \n      this.enumStringToIntMap = Collections.unmodifiableMap(enumStringToIntMap);\n      this.enumIntToStringMap = Collections.unmodifiableMap(enumIntToStringMap);\n      \n      args.remove(PARAM_ENUMS_CONFIG);\n      args.remove(PARAM_ENUM_NAME);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractEnumField.EnumMapping#EnumMapping(IndexSchema,FieldType,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractEnumField.EnumMapping#EnumMapping(IndexSchema,FieldType,Map[String,String]).mjava","sourceNew":"    /** \n     * Takes in a FieldType and the initArgs Map used for that type, removing the keys\n     * that specify the enum.\n     *\n     * @param schema for opening resources\n     * @param fieldType Used for logging or error messages\n     * @param args the init args to comsume the enum name + config file from\n     */\n    public EnumMapping(IndexSchema schema, FieldType fieldType, Map<String, String> args) {\n      final String ftName = fieldType.getTypeName();\n      \n      // NOTE: ghosting member variables for most of constructor\n      final Map<String, Integer> enumStringToIntMap = new HashMap<>();\n      final Map<Integer, String> enumIntToStringMap = new HashMap<>();\n      \n      enumsConfigFile = args.get(PARAM_ENUMS_CONFIG);\n      if (enumsConfigFile == null) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n                                ftName + \": No enums config file was configured.\");\n      }\n      enumName = args.get(PARAM_ENUM_NAME);\n      if (enumName == null) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n                                ftName + \": No enum name was configured.\");\n      }\n      \n      final SolrResourceLoader loader = schema.getResourceLoader(); \n      try {\n        log.debug(\"Reloading enums config file from {}\", enumsConfigFile);\n        Document doc = SafeXMLParsing.parseConfigXML(log, loader, enumsConfigFile);\n        final XPathFactory xpathFactory = XPathFactory.newInstance();\n        final XPath xpath = xpathFactory.newXPath();\n        final String xpathStr = String.format(Locale.ROOT, \"/enumsConfig/enum[@name='%s']\", enumName);\n        final NodeList nodes = (NodeList) xpath.evaluate(xpathStr, doc, XPathConstants.NODESET);\n        final int nodesLength = nodes.getLength();\n        if (nodesLength == 0) {\n          String exceptionMessage = String.format\n            (Locale.ENGLISH, \"%s: No enum configuration found for enum '%s' in %s.\",\n             ftName, enumName, enumsConfigFile);\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, exceptionMessage);\n        }\n        if (nodesLength > 1) {\n          if (log.isWarnEnabled())\n            log.warn(\"{}: More than one enum configuration found for enum '{}' in {}. The last one was taken.\",\n                     ftName, enumName, enumsConfigFile);\n        }\n        final Node enumNode = nodes.item(nodesLength - 1);\n        final NodeList valueNodes = (NodeList) xpath.evaluate(\"value\", enumNode, XPathConstants.NODESET);\n        for (int i = 0; i < valueNodes.getLength(); i++) {\n          final Node valueNode = valueNodes.item(i);\n          final String valueStr = valueNode.getTextContent();\n          if ((valueStr == null) || (valueStr.length() == 0)) {\n            final String exceptionMessage = String.format\n              (Locale.ENGLISH, \"%s: A value was defined with an no value in enum '%s' in %s.\",\n               ftName, enumName, enumsConfigFile);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, exceptionMessage);\n          }\n          if (enumStringToIntMap.containsKey(valueStr)) {\n            final String exceptionMessage = String.format\n              (Locale.ENGLISH, \"%s: A duplicated definition was found for value '%s' in enum '%s' in %s.\",\n               ftName, valueStr, enumName, enumsConfigFile);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, exceptionMessage);\n          }\n          enumIntToStringMap.put(i, valueStr);\n          enumStringToIntMap.put(valueStr, i);\n        }\n      } catch (IOException | SAXException | XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                ftName + \": Error while parsing enums config.\", e);\n      }\n      \n      if ((enumStringToIntMap.size() == 0) || (enumIntToStringMap.size() == 0)) {\n        String exceptionMessage = String.format\n          (Locale.ENGLISH, \"%s: Invalid configuration was defined for enum '%s' in %s.\",\n           ftName, enumName, enumsConfigFile);\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, exceptionMessage);\n      }\n      \n      this.enumStringToIntMap = Collections.unmodifiableMap(enumStringToIntMap);\n      this.enumIntToStringMap = Collections.unmodifiableMap(enumIntToStringMap);\n      \n      args.remove(PARAM_ENUMS_CONFIG);\n      args.remove(PARAM_ENUM_NAME);\n    }\n\n","sourceOld":"    /** \n     * Takes in a FieldType and the initArgs Map used for that type, removing the keys\n     * that specify the enum.\n     *\n     * @param schema for opening resources\n     * @param fieldType Used for logging or error messages\n     * @param args the init args to comsume the enum name + config file from\n     */\n    public EnumMapping(IndexSchema schema, FieldType fieldType, Map<String, String> args) {\n      final String ftName = fieldType.getTypeName();\n      \n      // NOTE: ghosting member variables for most of constructor\n      final Map<String, Integer> enumStringToIntMap = new HashMap<>();\n      final Map<Integer, String> enumIntToStringMap = new HashMap<>();\n      \n      enumsConfigFile = args.get(PARAM_ENUMS_CONFIG);\n      if (enumsConfigFile == null) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n                                ftName + \": No enums config file was configured.\");\n      }\n      enumName = args.get(PARAM_ENUM_NAME);\n      if (enumName == null) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n                                ftName + \": No enum name was configured.\");\n      }\n      \n      InputStream is = null;\n      \n      try {\n        is = schema.getResourceLoader().openResource(enumsConfigFile);\n        final DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n        try {\n          final Document doc = dbf.newDocumentBuilder().parse(is);\n          final XPathFactory xpathFactory = XPathFactory.newInstance();\n          final XPath xpath = xpathFactory.newXPath();\n          final String xpathStr = String.format(Locale.ROOT, \"/enumsConfig/enum[@name='%s']\", enumName);\n          final NodeList nodes = (NodeList) xpath.evaluate(xpathStr, doc, XPathConstants.NODESET);\n          final int nodesLength = nodes.getLength();\n          if (nodesLength == 0) {\n            String exceptionMessage = String.format\n              (Locale.ENGLISH, \"%s: No enum configuration found for enum '%s' in %s.\",\n               ftName, enumName, enumsConfigFile);\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, exceptionMessage);\n          }\n          if (nodesLength > 1) {\n            if (log.isWarnEnabled())\n              log.warn(\"{}: More than one enum configuration found for enum '{}' in {}. The last one was taken.\",\n                       ftName, enumName, enumsConfigFile);\n          }\n          final Node enumNode = nodes.item(nodesLength - 1);\n          final NodeList valueNodes = (NodeList) xpath.evaluate(\"value\", enumNode, XPathConstants.NODESET);\n          for (int i = 0; i < valueNodes.getLength(); i++) {\n            final Node valueNode = valueNodes.item(i);\n            final String valueStr = valueNode.getTextContent();\n            if ((valueStr == null) || (valueStr.length() == 0)) {\n              final String exceptionMessage = String.format\n                (Locale.ENGLISH, \"%s: A value was defined with an no value in enum '%s' in %s.\",\n                 ftName, enumName, enumsConfigFile);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, exceptionMessage);\n            }\n            if (enumStringToIntMap.containsKey(valueStr)) {\n              final String exceptionMessage = String.format\n                (Locale.ENGLISH, \"%s: A duplicated definition was found for value '%s' in enum '%s' in %s.\",\n                 ftName, valueStr, enumName, enumsConfigFile);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, exceptionMessage);\n            }\n            enumIntToStringMap.put(i, valueStr);\n            enumStringToIntMap.put(valueStr, i);\n          }\n        }\n        catch (ParserConfigurationException | XPathExpressionException | SAXException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  ftName + \": Error parsing enums config.\", e);\n        }\n      }\n      catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                ftName + \": Error while opening enums config.\", e);\n      } finally {\n        try {\n          if (is != null) {\n            is.close();\n          }\n        }\n        catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n      \n      if ((enumStringToIntMap.size() == 0) || (enumIntToStringMap.size() == 0)) {\n        String exceptionMessage = String.format\n          (Locale.ENGLISH, \"%s: Invalid configuration was defined for enum '%s' in %s.\",\n           ftName, enumName, enumsConfigFile);\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, exceptionMessage);\n      }\n      \n      this.enumStringToIntMap = Collections.unmodifiableMap(enumStringToIntMap);\n      this.enumIntToStringMap = Collections.unmodifiableMap(enumIntToStringMap);\n      \n      args.remove(PARAM_ENUMS_CONFIG);\n      args.remove(PARAM_ENUM_NAME);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractEnumField.EnumMapping#EnumMapping(IndexSchema,FieldType,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractEnumField.EnumMapping#EnumMapping(IndexSchema,FieldType,Map[String,String]).mjava","sourceNew":"    /** \n     * Takes in a FieldType and the initArgs Map used for that type, removing the keys\n     * that specify the enum.\n     *\n     * @param schema for opening resources\n     * @param fieldType Used for logging or error messages\n     * @param args the init args to comsume the enum name + config file from\n     */\n    public EnumMapping(IndexSchema schema, FieldType fieldType, Map<String, String> args) {\n      final String ftName = fieldType.getTypeName();\n      \n      // NOTE: ghosting member variables for most of constructor\n      final Map<String, Integer> enumStringToIntMap = new HashMap<>();\n      final Map<Integer, String> enumIntToStringMap = new HashMap<>();\n      \n      enumsConfigFile = args.get(PARAM_ENUMS_CONFIG);\n      if (enumsConfigFile == null) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n                                ftName + \": No enums config file was configured.\");\n      }\n      enumName = args.get(PARAM_ENUM_NAME);\n      if (enumName == null) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n                                ftName + \": No enum name was configured.\");\n      }\n      \n      final SolrResourceLoader loader = schema.getResourceLoader(); \n      try {\n        log.debug(\"Reloading enums config file from {}\", enumsConfigFile);\n        Document doc = SafeXMLParsing.parseConfigXML(log, loader, enumsConfigFile);\n        final XPathFactory xpathFactory = XPathFactory.newInstance();\n        final XPath xpath = xpathFactory.newXPath();\n        final String xpathStr = String.format(Locale.ROOT, \"/enumsConfig/enum[@name='%s']\", enumName);\n        final NodeList nodes = (NodeList) xpath.evaluate(xpathStr, doc, XPathConstants.NODESET);\n        final int nodesLength = nodes.getLength();\n        if (nodesLength == 0) {\n          String exceptionMessage = String.format\n            (Locale.ENGLISH, \"%s: No enum configuration found for enum '%s' in %s.\",\n             ftName, enumName, enumsConfigFile);\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, exceptionMessage);\n        }\n        if (nodesLength > 1) {\n          if (log.isWarnEnabled())\n            log.warn(\"{}: More than one enum configuration found for enum '{}' in {}. The last one was taken.\",\n                     ftName, enumName, enumsConfigFile);\n        }\n        final Node enumNode = nodes.item(nodesLength - 1);\n        final NodeList valueNodes = (NodeList) xpath.evaluate(\"value\", enumNode, XPathConstants.NODESET);\n        for (int i = 0; i < valueNodes.getLength(); i++) {\n          final Node valueNode = valueNodes.item(i);\n          final String valueStr = valueNode.getTextContent();\n          if ((valueStr == null) || (valueStr.length() == 0)) {\n            final String exceptionMessage = String.format\n              (Locale.ENGLISH, \"%s: A value was defined with an no value in enum '%s' in %s.\",\n               ftName, enumName, enumsConfigFile);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, exceptionMessage);\n          }\n          if (enumStringToIntMap.containsKey(valueStr)) {\n            final String exceptionMessage = String.format\n              (Locale.ENGLISH, \"%s: A duplicated definition was found for value '%s' in enum '%s' in %s.\",\n               ftName, valueStr, enumName, enumsConfigFile);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, exceptionMessage);\n          }\n          enumIntToStringMap.put(i, valueStr);\n          enumStringToIntMap.put(valueStr, i);\n        }\n      } catch (IOException | SAXException | XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                ftName + \": Error while parsing enums config.\", e);\n      }\n      \n      if ((enumStringToIntMap.size() == 0) || (enumIntToStringMap.size() == 0)) {\n        String exceptionMessage = String.format\n          (Locale.ENGLISH, \"%s: Invalid configuration was defined for enum '%s' in %s.\",\n           ftName, enumName, enumsConfigFile);\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, exceptionMessage);\n      }\n      \n      this.enumStringToIntMap = Collections.unmodifiableMap(enumStringToIntMap);\n      this.enumIntToStringMap = Collections.unmodifiableMap(enumIntToStringMap);\n      \n      args.remove(PARAM_ENUMS_CONFIG);\n      args.remove(PARAM_ENUM_NAME);\n    }\n\n","sourceOld":"    /** \n     * Takes in a FieldType and the initArgs Map used for that type, removing the keys\n     * that specify the enum.\n     *\n     * @param schema for opening resources\n     * @param fieldType Used for logging or error messages\n     * @param args the init args to comsume the enum name + config file from\n     */\n    public EnumMapping(IndexSchema schema, FieldType fieldType, Map<String, String> args) {\n      final String ftName = fieldType.getTypeName();\n      \n      // NOTE: ghosting member variables for most of constructor\n      final Map<String, Integer> enumStringToIntMap = new HashMap<>();\n      final Map<Integer, String> enumIntToStringMap = new HashMap<>();\n      \n      enumsConfigFile = args.get(PARAM_ENUMS_CONFIG);\n      if (enumsConfigFile == null) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n                                ftName + \": No enums config file was configured.\");\n      }\n      enumName = args.get(PARAM_ENUM_NAME);\n      if (enumName == null) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n                                ftName + \": No enum name was configured.\");\n      }\n      \n      InputStream is = null;\n      \n      try {\n        is = schema.getResourceLoader().openResource(enumsConfigFile);\n        final DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n        try {\n          final Document doc = dbf.newDocumentBuilder().parse(is);\n          final XPathFactory xpathFactory = XPathFactory.newInstance();\n          final XPath xpath = xpathFactory.newXPath();\n          final String xpathStr = String.format(Locale.ROOT, \"/enumsConfig/enum[@name='%s']\", enumName);\n          final NodeList nodes = (NodeList) xpath.evaluate(xpathStr, doc, XPathConstants.NODESET);\n          final int nodesLength = nodes.getLength();\n          if (nodesLength == 0) {\n            String exceptionMessage = String.format\n              (Locale.ENGLISH, \"%s: No enum configuration found for enum '%s' in %s.\",\n               ftName, enumName, enumsConfigFile);\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, exceptionMessage);\n          }\n          if (nodesLength > 1) {\n            if (log.isWarnEnabled())\n              log.warn(\"{}: More than one enum configuration found for enum '{}' in {}. The last one was taken.\",\n                       ftName, enumName, enumsConfigFile);\n          }\n          final Node enumNode = nodes.item(nodesLength - 1);\n          final NodeList valueNodes = (NodeList) xpath.evaluate(\"value\", enumNode, XPathConstants.NODESET);\n          for (int i = 0; i < valueNodes.getLength(); i++) {\n            final Node valueNode = valueNodes.item(i);\n            final String valueStr = valueNode.getTextContent();\n            if ((valueStr == null) || (valueStr.length() == 0)) {\n              final String exceptionMessage = String.format\n                (Locale.ENGLISH, \"%s: A value was defined with an no value in enum '%s' in %s.\",\n                 ftName, enumName, enumsConfigFile);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, exceptionMessage);\n            }\n            if (enumStringToIntMap.containsKey(valueStr)) {\n              final String exceptionMessage = String.format\n                (Locale.ENGLISH, \"%s: A duplicated definition was found for value '%s' in enum '%s' in %s.\",\n                 ftName, valueStr, enumName, enumsConfigFile);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, exceptionMessage);\n            }\n            enumIntToStringMap.put(i, valueStr);\n            enumStringToIntMap.put(valueStr, i);\n          }\n        }\n        catch (ParserConfigurationException | XPathExpressionException | SAXException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  ftName + \": Error parsing enums config.\", e);\n        }\n      }\n      catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                ftName + \": Error while opening enums config.\", e);\n      } finally {\n        try {\n          if (is != null) {\n            is.close();\n          }\n        }\n        catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n      \n      if ((enumStringToIntMap.size() == 0) || (enumIntToStringMap.size() == 0)) {\n        String exceptionMessage = String.format\n          (Locale.ENGLISH, \"%s: Invalid configuration was defined for enum '%s' in %s.\",\n           ftName, enumName, enumsConfigFile);\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, exceptionMessage);\n      }\n      \n      this.enumStringToIntMap = Collections.unmodifiableMap(enumStringToIntMap);\n      this.enumIntToStringMap = Collections.unmodifiableMap(enumIntToStringMap);\n      \n      args.remove(PARAM_ENUMS_CONFIG);\n      args.remove(PARAM_ENUM_NAME);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractEnumField.EnumMapping#EnumMapping(IndexSchema,FieldType,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractEnumField.EnumMapping#EnumMapping(IndexSchema,FieldType,Map[String,String]).mjava","sourceNew":"    /** \n     * Takes in a FieldType and the initArgs Map used for that type, removing the keys\n     * that specify the enum.\n     *\n     * @param schema for opening resources\n     * @param fieldType Used for logging or error messages\n     * @param args the init args to comsume the enum name + config file from\n     */\n    public EnumMapping(IndexSchema schema, FieldType fieldType, Map<String, String> args) {\n      final String ftName = fieldType.getTypeName();\n      \n      // NOTE: ghosting member variables for most of constructor\n      final Map<String, Integer> enumStringToIntMap = new HashMap<>();\n      final Map<Integer, String> enumIntToStringMap = new HashMap<>();\n      \n      enumsConfigFile = args.get(PARAM_ENUMS_CONFIG);\n      if (enumsConfigFile == null) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n                                ftName + \": No enums config file was configured.\");\n      }\n      enumName = args.get(PARAM_ENUM_NAME);\n      if (enumName == null) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n                                ftName + \": No enum name was configured.\");\n      }\n      \n      final SolrResourceLoader loader = schema.getResourceLoader(); \n      try {\n        log.debug(\"Reloading enums config file from {}\", enumsConfigFile);\n        Document doc = SafeXMLParsing.parseConfigXML(log, loader, enumsConfigFile);\n        final XPathFactory xpathFactory = XPathFactory.newInstance();\n        final XPath xpath = xpathFactory.newXPath();\n        final String xpathStr = String.format(Locale.ROOT, \"/enumsConfig/enum[@name='%s']\", enumName);\n        final NodeList nodes = (NodeList) xpath.evaluate(xpathStr, doc, XPathConstants.NODESET);\n        final int nodesLength = nodes.getLength();\n        if (nodesLength == 0) {\n          String exceptionMessage = String.format\n            (Locale.ENGLISH, \"%s: No enum configuration found for enum '%s' in %s.\",\n             ftName, enumName, enumsConfigFile);\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, exceptionMessage);\n        }\n        if (nodesLength > 1) {\n          log.warn(\"{}: More than one enum configuration found for enum '{}' in {}. The last one was taken.\"\n              , ftName, enumName, enumsConfigFile);\n        }\n        final Node enumNode = nodes.item(nodesLength - 1);\n        final NodeList valueNodes = (NodeList) xpath.evaluate(\"value\", enumNode, XPathConstants.NODESET);\n        for (int i = 0; i < valueNodes.getLength(); i++) {\n          final Node valueNode = valueNodes.item(i);\n          final String valueStr = valueNode.getTextContent();\n          if ((valueStr == null) || (valueStr.length() == 0)) {\n            final String exceptionMessage = String.format\n              (Locale.ENGLISH, \"%s: A value was defined with an no value in enum '%s' in %s.\",\n               ftName, enumName, enumsConfigFile);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, exceptionMessage);\n          }\n          if (enumStringToIntMap.containsKey(valueStr)) {\n            final String exceptionMessage = String.format\n              (Locale.ENGLISH, \"%s: A duplicated definition was found for value '%s' in enum '%s' in %s.\",\n               ftName, valueStr, enumName, enumsConfigFile);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, exceptionMessage);\n          }\n          enumIntToStringMap.put(i, valueStr);\n          enumStringToIntMap.put(valueStr, i);\n        }\n      } catch (IOException | SAXException | XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                ftName + \": Error while parsing enums config.\", e);\n      }\n      \n      if ((enumStringToIntMap.size() == 0) || (enumIntToStringMap.size() == 0)) {\n        String exceptionMessage = String.format\n          (Locale.ENGLISH, \"%s: Invalid configuration was defined for enum '%s' in %s.\",\n           ftName, enumName, enumsConfigFile);\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, exceptionMessage);\n      }\n      \n      this.enumStringToIntMap = Collections.unmodifiableMap(enumStringToIntMap);\n      this.enumIntToStringMap = Collections.unmodifiableMap(enumIntToStringMap);\n      \n      args.remove(PARAM_ENUMS_CONFIG);\n      args.remove(PARAM_ENUM_NAME);\n    }\n\n","sourceOld":"    /** \n     * Takes in a FieldType and the initArgs Map used for that type, removing the keys\n     * that specify the enum.\n     *\n     * @param schema for opening resources\n     * @param fieldType Used for logging or error messages\n     * @param args the init args to comsume the enum name + config file from\n     */\n    public EnumMapping(IndexSchema schema, FieldType fieldType, Map<String, String> args) {\n      final String ftName = fieldType.getTypeName();\n      \n      // NOTE: ghosting member variables for most of constructor\n      final Map<String, Integer> enumStringToIntMap = new HashMap<>();\n      final Map<Integer, String> enumIntToStringMap = new HashMap<>();\n      \n      enumsConfigFile = args.get(PARAM_ENUMS_CONFIG);\n      if (enumsConfigFile == null) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n                                ftName + \": No enums config file was configured.\");\n      }\n      enumName = args.get(PARAM_ENUM_NAME);\n      if (enumName == null) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n                                ftName + \": No enum name was configured.\");\n      }\n      \n      final SolrResourceLoader loader = schema.getResourceLoader(); \n      try {\n        log.debug(\"Reloading enums config file from {}\", enumsConfigFile);\n        Document doc = SafeXMLParsing.parseConfigXML(log, loader, enumsConfigFile);\n        final XPathFactory xpathFactory = XPathFactory.newInstance();\n        final XPath xpath = xpathFactory.newXPath();\n        final String xpathStr = String.format(Locale.ROOT, \"/enumsConfig/enum[@name='%s']\", enumName);\n        final NodeList nodes = (NodeList) xpath.evaluate(xpathStr, doc, XPathConstants.NODESET);\n        final int nodesLength = nodes.getLength();\n        if (nodesLength == 0) {\n          String exceptionMessage = String.format\n            (Locale.ENGLISH, \"%s: No enum configuration found for enum '%s' in %s.\",\n             ftName, enumName, enumsConfigFile);\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, exceptionMessage);\n        }\n        if (nodesLength > 1) {\n          if (log.isWarnEnabled())\n            log.warn(\"{}: More than one enum configuration found for enum '{}' in {}. The last one was taken.\",\n                     ftName, enumName, enumsConfigFile);\n        }\n        final Node enumNode = nodes.item(nodesLength - 1);\n        final NodeList valueNodes = (NodeList) xpath.evaluate(\"value\", enumNode, XPathConstants.NODESET);\n        for (int i = 0; i < valueNodes.getLength(); i++) {\n          final Node valueNode = valueNodes.item(i);\n          final String valueStr = valueNode.getTextContent();\n          if ((valueStr == null) || (valueStr.length() == 0)) {\n            final String exceptionMessage = String.format\n              (Locale.ENGLISH, \"%s: A value was defined with an no value in enum '%s' in %s.\",\n               ftName, enumName, enumsConfigFile);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, exceptionMessage);\n          }\n          if (enumStringToIntMap.containsKey(valueStr)) {\n            final String exceptionMessage = String.format\n              (Locale.ENGLISH, \"%s: A duplicated definition was found for value '%s' in enum '%s' in %s.\",\n               ftName, valueStr, enumName, enumsConfigFile);\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, exceptionMessage);\n          }\n          enumIntToStringMap.put(i, valueStr);\n          enumStringToIntMap.put(valueStr, i);\n        }\n      } catch (IOException | SAXException | XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                ftName + \": Error while parsing enums config.\", e);\n      }\n      \n      if ((enumStringToIntMap.size() == 0) || (enumIntToStringMap.size() == 0)) {\n        String exceptionMessage = String.format\n          (Locale.ENGLISH, \"%s: Invalid configuration was defined for enum '%s' in %s.\",\n           ftName, enumName, enumsConfigFile);\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, exceptionMessage);\n      }\n      \n      this.enumStringToIntMap = Collections.unmodifiableMap(enumStringToIntMap);\n      this.enumIntToStringMap = Collections.unmodifiableMap(enumIntToStringMap);\n      \n      args.remove(PARAM_ENUMS_CONFIG);\n      args.remove(PARAM_ENUM_NAME);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["54ad8c9e9210e008dc7b8ad5a037ff20879150ea","575ba8a7e01f51915a430b8c67d2461f0703feaa"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","54ad8c9e9210e008dc7b8ad5a037ff20879150ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["575ba8a7e01f51915a430b8c67d2461f0703feaa"],"575ba8a7e01f51915a430b8c67d2461f0703feaa":["54ad8c9e9210e008dc7b8ad5a037ff20879150ea"],"54ad8c9e9210e008dc7b8ad5a037ff20879150ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["54ad8c9e9210e008dc7b8ad5a037ff20879150ea","575ba8a7e01f51915a430b8c67d2461f0703feaa"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","54ad8c9e9210e008dc7b8ad5a037ff20879150ea"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"575ba8a7e01f51915a430b8c67d2461f0703feaa":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","575e66bd4b2349209027f6801184da7fc3cba13f","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"54ad8c9e9210e008dc7b8ad5a037ff20879150ea":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","575ba8a7e01f51915a430b8c67d2461f0703feaa","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}