{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MatrixMultiplyEvaluator#getMatrix(Object).mjava","commits":[{"id":"6c06c8eea352c1a2545792116e5f91fa3476e2a7","date":1519086445,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MatrixMultiplyEvaluator#getMatrix(Object).mjava","pathOld":"/dev/null","sourceNew":"  private RealMatrix getMatrix(Object o) throws IOException {\n    if(o instanceof Matrix) {\n      Matrix matrix = (Matrix)o;\n      return new Array2DRowRealMatrix(matrix.getData());\n    } else if(o instanceof List) {\n      List<Number> vec = (List<Number>)o;\n      double[][] data1 = new double[1][vec.size()];\n      for(int i=0; i<vec.size(); i++) {\n        data1[0][i] = vec.get(i).doubleValue();\n      }\n      return new Array2DRowRealMatrix(data1);\n    } else {\n      throw new IOException(\"The matrixMult function can only be applied to numeric arrays and matrices:\"+o.getClass().toString());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1832e2a2126bdb6cf9f50b59b7a9add0b0d29ac","date":1523323495,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MatrixMultiplyEvaluator#getMatrix(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MatrixMultiplyEvaluator#getMatrix(Object).mjava","sourceNew":"  private Array2DRowRealMatrix getMatrix(Object o) throws IOException {\n    if(o instanceof Matrix) {\n      Matrix matrix = (Matrix)o;\n      return new Array2DRowRealMatrix(matrix.getData(), false);\n    } else if(o instanceof List) {\n      List<Number> vec = (List<Number>)o;\n      double[][] data1 = new double[1][vec.size()];\n      for(int i=0; i<vec.size(); i++) {\n        data1[0][i] = vec.get(i).doubleValue();\n      }\n      return new Array2DRowRealMatrix(data1, false);\n    } else {\n      throw new IOException(\"The matrixMult function can only be applied to numeric arrays and matrices:\"+o.getClass().toString());\n    }\n  }\n\n","sourceOld":"  private RealMatrix getMatrix(Object o) throws IOException {\n    if(o instanceof Matrix) {\n      Matrix matrix = (Matrix)o;\n      return new Array2DRowRealMatrix(matrix.getData());\n    } else if(o instanceof List) {\n      List<Number> vec = (List<Number>)o;\n      double[][] data1 = new double[1][vec.size()];\n      for(int i=0; i<vec.size(); i++) {\n        data1[0][i] = vec.get(i).doubleValue();\n      }\n      return new Array2DRowRealMatrix(data1);\n    } else {\n      throw new IOException(\"The matrixMult function can only be applied to numeric arrays and matrices:\"+o.getClass().toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"431c2627ab600554864fa78f5e76abef81faa42d","date":1523357854,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MatrixMultiplyEvaluator#getMatrix(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MatrixMultiplyEvaluator#getMatrix(Object).mjava","sourceNew":"  private Array2DRowRealMatrix getMatrix(Object o) throws IOException {\n    if(o instanceof Matrix) {\n      Matrix matrix = (Matrix)o;\n      return new Array2DRowRealMatrix(matrix.getData(), false);\n    } else if(o instanceof List) {\n      List<Number> vec = (List<Number>)o;\n      double[][] data1 = new double[1][vec.size()];\n      for(int i=0; i<vec.size(); i++) {\n        data1[0][i] = vec.get(i).doubleValue();\n      }\n      return new Array2DRowRealMatrix(data1, false);\n    } else {\n      throw new IOException(\"The matrixMult function can only be applied to numeric arrays and matrices:\"+o.getClass().toString());\n    }\n  }\n\n","sourceOld":"  private RealMatrix getMatrix(Object o) throws IOException {\n    if(o instanceof Matrix) {\n      Matrix matrix = (Matrix)o;\n      return new Array2DRowRealMatrix(matrix.getData());\n    } else if(o instanceof List) {\n      List<Number> vec = (List<Number>)o;\n      double[][] data1 = new double[1][vec.size()];\n      for(int i=0; i<vec.size(); i++) {\n        data1[0][i] = vec.get(i).doubleValue();\n      }\n      return new Array2DRowRealMatrix(data1);\n    } else {\n      throw new IOException(\"The matrixMult function can only be applied to numeric arrays and matrices:\"+o.getClass().toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MatrixMultiplyEvaluator#getMatrix(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MatrixMultiplyEvaluator#getMatrix(Object).mjava","sourceNew":"  private Array2DRowRealMatrix getMatrix(Object o) throws IOException {\n    if(o instanceof Matrix) {\n      Matrix matrix = (Matrix)o;\n      return new Array2DRowRealMatrix(matrix.getData(), false);\n    } else if(o instanceof List) {\n      @SuppressWarnings({\"unchecked\"})\n      List<Number> vec = (List<Number>)o;\n      double[][] data1 = new double[1][vec.size()];\n      for(int i=0; i<vec.size(); i++) {\n        data1[0][i] = vec.get(i).doubleValue();\n      }\n      return new Array2DRowRealMatrix(data1, false);\n    } else {\n      throw new IOException(\"The matrixMult function can only be applied to numeric arrays and matrices:\"+o.getClass().toString());\n    }\n  }\n\n","sourceOld":"  private Array2DRowRealMatrix getMatrix(Object o) throws IOException {\n    if(o instanceof Matrix) {\n      Matrix matrix = (Matrix)o;\n      return new Array2DRowRealMatrix(matrix.getData(), false);\n    } else if(o instanceof List) {\n      List<Number> vec = (List<Number>)o;\n      double[][] data1 = new double[1][vec.size()];\n      for(int i=0; i<vec.size(); i++) {\n        data1[0][i] = vec.get(i).doubleValue();\n      }\n      return new Array2DRowRealMatrix(data1, false);\n    } else {\n      throw new IOException(\"The matrixMult function can only be applied to numeric arrays and matrices:\"+o.getClass().toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["431c2627ab600554864fa78f5e76abef81faa42d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"431c2627ab600554864fa78f5e76abef81faa42d":["6c06c8eea352c1a2545792116e5f91fa3476e2a7","c1832e2a2126bdb6cf9f50b59b7a9add0b0d29ac"],"6c06c8eea352c1a2545792116e5f91fa3476e2a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"c1832e2a2126bdb6cf9f50b59b7a9add0b0d29ac":["6c06c8eea352c1a2545792116e5f91fa3476e2a7"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c06c8eea352c1a2545792116e5f91fa3476e2a7"],"431c2627ab600554864fa78f5e76abef81faa42d":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"6c06c8eea352c1a2545792116e5f91fa3476e2a7":["431c2627ab600554864fa78f5e76abef81faa42d","c1832e2a2126bdb6cf9f50b59b7a9add0b0d29ac"],"c1832e2a2126bdb6cf9f50b59b7a9add0b0d29ac":["431c2627ab600554864fa78f5e76abef81faa42d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}