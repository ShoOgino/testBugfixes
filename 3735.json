{"path":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkDuplicateTerms(MultiTermQuery.RewriteMethod).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkDuplicateTerms(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkDuplicateTerms(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  private void checkDuplicateTerms(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = TermRangeQuery.newStringRange(\"data\", \"2\", \"7\", true, true);\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryOrder(q1);\n    checkBooleanQueryOrder(q2);\n    checkBooleanQueryOrder(q3);\n  }\n\n","sourceOld":"  private void checkDuplicateTerms(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = TermRangeQuery.newStringRange(\"data\", \"2\", \"7\", true, true);\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryOrder(q1);\n    checkBooleanQueryOrder(q2);\n    checkBooleanQueryOrder(q3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}