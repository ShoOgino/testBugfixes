{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISICache#getRankInBlock(int).mjava","commits":[{"id":"91afec3d1be3c4538a6f92102a22573087f69d68","date":1543843480,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISICache#getRankInBlock(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get the rank (index) for all set bits up to just before the given rankPosition in the block.\n   * The caller is responsible for deriving the count of bits up to the docID target from the rankPosition.\n   * The caller is also responsible for keeping track of set bits up to the current block.\n   * Important: This only accepts rankPositions that aligns to {@link #RANK_BLOCK} boundaries.\n   * Note 1: Use {@link #denseRankPosition(int)} to obtain a calid rankPosition for a wanted docID.\n   * Note 2: The caller should seek to the rankPosition in the underlying slice to keep everything in sync.\n   * @param rankPosition a docID target that aligns to {@link #RANK_BLOCK}.\n   * @return the rank (index / set bits count) up to just before the given rankPosition.\n   *         If rank is disabled, -1 is returned.\n   */\n  // TODO: This method requires a lot of knowledge of the intrinsics of the cache. Usage should be simplified\n  int getRankInBlock(int rankPosition) {\n    if (rank == null) {\n      return -1;\n    }\n    assert rankPosition == denseRankPosition(rankPosition);\n    int rankIndex = rankPosition >> RANK_BLOCK_BITS;\n    return rankIndex >= rank.size() ? -1 : (int) rank.get(rankIndex);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90c33633162a86e6323f4cf2b93e2bb168b1dc22","date":1544534062,"type":4,"author":"Toke Eskildsen","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISICache#getRankInBlock(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get the rank (index) for all set bits up to just before the given rankPosition in the block.\n   * The caller is responsible for deriving the count of bits up to the docID target from the rankPosition.\n   * The caller is also responsible for keeping track of set bits up to the current block.\n   * Important: This only accepts rankPositions that aligns to {@link #RANK_BLOCK} boundaries.\n   * Note 1: Use {@link #denseRankPosition(int)} to obtain a calid rankPosition for a wanted docID.\n   * Note 2: The caller should seek to the rankPosition in the underlying slice to keep everything in sync.\n   * @param rankPosition a docID target that aligns to {@link #RANK_BLOCK}.\n   * @return the rank (index / set bits count) up to just before the given rankPosition.\n   *         If rank is disabled, -1 is returned.\n   */\n  // TODO: This method requires a lot of knowledge of the intrinsics of the cache. Usage should be simplified\n  int getRankInBlock(int rankPosition) {\n    if (rank == null) {\n      return -1;\n    }\n    assert rankPosition == denseRankPosition(rankPosition);\n    int rankIndex = rankPosition >> RANK_BLOCK_BITS;\n    return rankIndex >= rank.size() ? -1 : (int) rank.get(rankIndex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd70c9571310639a77f0123aea0db41077d9bb6","date":1544538617,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISICache#getRankInBlock(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get the rank (index) for all set bits up to just before the given rankPosition in the block.\n   * The caller is responsible for deriving the count of bits up to the docID target from the rankPosition.\n   * The caller is also responsible for keeping track of set bits up to the current block.\n   * Important: This only accepts rankPositions that aligns to {@link #RANK_BLOCK} boundaries.\n   * Note 1: Use {@link #denseRankPosition(int)} to obtain a calid rankPosition for a wanted docID.\n   * Note 2: The caller should seek to the rankPosition in the underlying slice to keep everything in sync.\n   * @param rankPosition a docID target that aligns to {@link #RANK_BLOCK}.\n   * @return the rank (index / set bits count) up to just before the given rankPosition.\n   *         If rank is disabled, -1 is returned.\n   */\n  // TODO: This method requires a lot of knowledge of the intrinsics of the cache. Usage should be simplified\n  int getRankInBlock(int rankPosition) {\n    if (rank == null) {\n      return -1;\n    }\n    assert rankPosition == denseRankPosition(rankPosition);\n    int rankIndex = rankPosition >> RANK_BLOCK_BITS;\n    return rankIndex >= rank.size() ? -1 : (int) rank.get(rankIndex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91afec3d1be3c4538a6f92102a22573087f69d68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cfd70c9571310639a77f0123aea0db41077d9bb6":["91afec3d1be3c4538a6f92102a22573087f69d68","90c33633162a86e6323f4cf2b93e2bb168b1dc22"],"90c33633162a86e6323f4cf2b93e2bb168b1dc22":["91afec3d1be3c4538a6f92102a22573087f69d68"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd70c9571310639a77f0123aea0db41077d9bb6"]},"commit2Childs":{"91afec3d1be3c4538a6f92102a22573087f69d68":["cfd70c9571310639a77f0123aea0db41077d9bb6","90c33633162a86e6323f4cf2b93e2bb168b1dc22"],"cfd70c9571310639a77f0123aea0db41077d9bb6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"90c33633162a86e6323f4cf2b93e2bb168b1dc22":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91afec3d1be3c4538a6f92102a22573087f69d68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}