{"path":"lucene/sandbox/src/java/org/apache/lucene/rangetree/NumericRangeTreeQuery#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"8c12c43c449a172df0f2b122918f0f5fc0e9a470","date":1438415333,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/rangetree/NumericRangeTreeQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        SortedNumericDocValues sdv = reader.getSortedNumericDocValues(field);\n        if (sdv == null) {\n          // No docs in this segment had this field\n          return null;\n        }\n\n        if (sdv instanceof RangeTreeSortedNumericDocValues == false) {\n          throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was not indexed with RangeTreeDocValuesFormat: got: \" + sdv);\n        }\n        RangeTreeSortedNumericDocValues treeDV = (RangeTreeSortedNumericDocValues) sdv;\n        RangeTreeReader tree = treeDV.getRangeTreeReader();\n\n        // lower\n        long minBoundIncl = (minValue == null) ? Long.MIN_VALUE : minValue.longValue();\n\n        if (minInclusive == false && minValue != null) {\n          if (minBoundIncl == Long.MAX_VALUE) {\n            return null;\n          }\n          minBoundIncl++;\n        }\n          \n        // upper\n        long maxBoundIncl = (maxValue == null) ? Long.MAX_VALUE : maxValue.longValue();\n        if (maxInclusive == false && maxValue != null) {\n          if (maxBoundIncl == Long.MIN_VALUE) {\n            return null;\n          }\n          maxBoundIncl--;\n        }\n\n        if (maxBoundIncl < minBoundIncl) {\n          return null;\n        }\n\n        DocIdSet result = tree.intersect(minBoundIncl, maxBoundIncl, treeDV.delegate, context.reader().maxDoc());\n\n        final DocIdSetIterator disi = result.iterator();\n\n        return new ConstantScoreScorer(this, score(), disi);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/rangetree/NumericRangeTreeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        SortedNumericDocValues sdv = reader.getSortedNumericDocValues(field);\n        if (sdv == null) {\n          // No docs in this segment had this field\n          return null;\n        }\n\n        if (sdv instanceof RangeTreeSortedNumericDocValues == false) {\n          throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was not indexed with RangeTreeDocValuesFormat: got: \" + sdv);\n        }\n        RangeTreeSortedNumericDocValues treeDV = (RangeTreeSortedNumericDocValues) sdv;\n        RangeTreeReader tree = treeDV.getRangeTreeReader();\n\n        // lower\n        long minBoundIncl = (minValue == null) ? Long.MIN_VALUE : minValue.longValue();\n\n        if (minInclusive == false && minValue != null) {\n          if (minBoundIncl == Long.MAX_VALUE) {\n            return null;\n          }\n          minBoundIncl++;\n        }\n          \n        // upper\n        long maxBoundIncl = (maxValue == null) ? Long.MAX_VALUE : maxValue.longValue();\n        if (maxInclusive == false && maxValue != null) {\n          if (maxBoundIncl == Long.MIN_VALUE) {\n            return null;\n          }\n          maxBoundIncl--;\n        }\n\n        if (maxBoundIncl < minBoundIncl) {\n          return null;\n        }\n\n        DocIdSet result = tree.intersect(minBoundIncl, maxBoundIncl, treeDV.delegate, context.reader().maxDoc());\n\n        final DocIdSetIterator disi = result.iterator();\n\n        return new ConstantScoreScorer(this, score(), disi);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8c12c43c449a172df0f2b122918f0f5fc0e9a470":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["8c12c43c449a172df0f2b122918f0f5fc0e9a470"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"]},"commit2Childs":{"8c12c43c449a172df0f2b122918f0f5fc0e9a470":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c12c43c449a172df0f2b122918f0f5fc0e9a470"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}