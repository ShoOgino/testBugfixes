{"path":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged().mjava","sourceNew":"  /** Implement this method to support {@link #openIfChanged(DirectoryReader)}.\n   * If this reader does not support reopen, return {@code null}, so\n   * client code is happy. This should be consistent with {@link #isCurrent}\n   * (should always return {@code true}) if reopen is not supported.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * DirectoryReader instance.\n   */\n  protected abstract DirectoryReader doOpenIfChanged() throws CorruptIndexException, IOException;\n\n","sourceOld":"  /** Implement this method to support {@link #openIfChanged(DirectoryReader)}.\n   * If this reader does not support reopen, return {@code null}, so\n   * client code is happy. This should be consistent with {@link #isCurrent}\n   * (should always return {@code true}) if reopen is not supported.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * DirectoryReader instance.\n   */\n  protected abstract DirectoryReader doOpenIfChanged() throws CorruptIndexException, IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged().mjava","sourceNew":"  /** Implement this method to support {@link #openIfChanged(DirectoryReader)}.\n   * If this reader does not support reopen, return {@code null}, so\n   * client code is happy. This should be consistent with {@link #isCurrent}\n   * (should always return {@code true}) if reopen is not supported.\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * DirectoryReader instance.\n   */\n  protected abstract DirectoryReader doOpenIfChanged() throws IOException;\n\n","sourceOld":"  /** Implement this method to support {@link #openIfChanged(DirectoryReader)}.\n   * If this reader does not support reopen, return {@code null}, so\n   * client code is happy. This should be consistent with {@link #isCurrent}\n   * (should always return {@code true}) if reopen is not supported.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * DirectoryReader instance.\n   */\n  protected abstract DirectoryReader doOpenIfChanged() throws CorruptIndexException, IOException;\n\n","bugFix":["d7bbf8cffd2321f26cf9f6487f1571d325f20bc3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged().mjava","sourceNew":"  /** Implement this method to support {@link #openIfChanged(DirectoryReader)}.\n   * If this reader does not support reopen, return {@code null}, so\n   * client code is happy. This should be consistent with {@link #isCurrent}\n   * (should always return {@code true}) if reopen is not supported.\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * DirectoryReader instance.\n   */\n  protected abstract DirectoryReader doOpenIfChanged() throws IOException;\n\n","sourceOld":"  /** Implement this method to support {@link #openIfChanged(DirectoryReader)}.\n   * If this reader does not support reopen, return {@code null}, so\n   * client code is happy. This should be consistent with {@link #isCurrent}\n   * (should always return {@code true}) if reopen is not supported.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * DirectoryReader instance.\n   */\n  protected abstract DirectoryReader doOpenIfChanged() throws CorruptIndexException, IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}