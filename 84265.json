{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testDaemonStream().mjava","commits":[{"id":"e81698e1493f01874d99b769bc4d9fc9f07555d6","date":1453489635,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testDaemonStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDaemonStream() throws Exception {\n\n    DaemonStream stream;\n    String expressionString;\n\n    // Basic test\n    stream = new DaemonStream(StreamExpressionParser.parse(\"daemon(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), id=\\\"blah\\\", runInterval=\\\"1000\\\", queueSize=\\\"100\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"daemon(search(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"id=blah\"));\n    assertTrue(expressionString.contains(\"queueSize=100\"));\n    assertTrue(expressionString.contains(\"runInterval=1000\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testDaemonStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testDaemonStream().mjava","sourceNew":"  @Test\n  public void testDaemonStream() throws Exception {\n    String expressionString;\n\n    // Basic test\n    try (DaemonStream stream = new DaemonStream(StreamExpressionParser.parse(\"daemon(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), id=\\\"blah\\\", runInterval=\\\"1000\\\", queueSize=\\\"100\\\")\"), factory)) {\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"daemon(search(collection1,\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n      assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n      assertTrue(expressionString.contains(\"id=blah\"));\n      assertTrue(expressionString.contains(\"queueSize=100\"));\n      assertTrue(expressionString.contains(\"runInterval=1000\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDaemonStream() throws Exception {\n\n    DaemonStream stream;\n    String expressionString;\n\n    // Basic test\n    stream = new DaemonStream(StreamExpressionParser.parse(\"daemon(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), id=\\\"blah\\\", runInterval=\\\"1000\\\", queueSize=\\\"100\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"daemon(search(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"id=blah\"));\n    assertTrue(expressionString.contains(\"queueSize=100\"));\n    assertTrue(expressionString.contains(\"runInterval=1000\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cba13865da71de3b9b0937fcbc66d726089356d","date":1537507909,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testDaemonStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testDaemonStream().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testDaemonStream() throws Exception {\n    String expressionString;\n\n    // Basic test\n    try (DaemonStream stream = new DaemonStream(StreamExpressionParser.parse(\"daemon(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), id=\\\"blah\\\", runInterval=\\\"1000\\\", queueSize=\\\"100\\\")\"), factory)) {\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"daemon(search(collection1,\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n      assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n      assertTrue(expressionString.contains(\"id=blah\"));\n      assertTrue(expressionString.contains(\"queueSize=100\"));\n      assertTrue(expressionString.contains(\"runInterval=1000\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDaemonStream() throws Exception {\n    String expressionString;\n\n    // Basic test\n    try (DaemonStream stream = new DaemonStream(StreamExpressionParser.parse(\"daemon(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), id=\\\"blah\\\", runInterval=\\\"1000\\\", queueSize=\\\"100\\\")\"), factory)) {\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"daemon(search(collection1,\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n      assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n      assertTrue(expressionString.contains(\"id=blah\"));\n      assertTrue(expressionString.contains(\"queueSize=100\"));\n      assertTrue(expressionString.contains(\"runInterval=1000\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testDaemonStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testDaemonStream().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testDaemonStream() throws Exception {\n    String expressionString;\n\n    // Basic test\n    try (DaemonStream stream = new DaemonStream(StreamExpressionParser.parse(\"daemon(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), id=\\\"blah\\\", runInterval=\\\"1000\\\", queueSize=\\\"100\\\")\"), factory)) {\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"daemon(search(collection1,\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n      assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n      assertTrue(expressionString.contains(\"id=blah\"));\n      assertTrue(expressionString.contains(\"queueSize=100\"));\n      assertTrue(expressionString.contains(\"runInterval=1000\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testDaemonStream() throws Exception {\n    String expressionString;\n\n    // Basic test\n    try (DaemonStream stream = new DaemonStream(StreamExpressionParser.parse(\"daemon(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), id=\\\"blah\\\", runInterval=\\\"1000\\\", queueSize=\\\"100\\\")\"), factory)) {\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"daemon(search(collection1,\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n      assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n      assertTrue(expressionString.contains(\"id=blah\"));\n      assertTrue(expressionString.contains(\"queueSize=100\"));\n      assertTrue(expressionString.contains(\"runInterval=1000\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e81698e1493f01874d99b769bc4d9fc9f07555d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cba13865da71de3b9b0937fcbc66d726089356d":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["e81698e1493f01874d99b769bc4d9fc9f07555d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["4cba13865da71de3b9b0937fcbc66d726089356d"]},"commit2Childs":{"e81698e1493f01874d99b769bc4d9fc9f07555d6":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e81698e1493f01874d99b769bc4d9fc9f07555d6"],"4cba13865da71de3b9b0937fcbc66d726089356d":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["4cba13865da71de3b9b0937fcbc66d726089356d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8d35c84fdef07284c122012ca4000d3b7285a66e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}