{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsCollector#getFacetResults().mjava","commits":[{"id":"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","date":1358784296,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsCollector#getFacetResults().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized List<FacetResult> getFacetResults() throws IOException {\n    try {\n      // first, count matching documents' facets\n      countFacets();\n      \n      ParallelTaxonomyArrays arrays = taxoReader.getParallelTaxonomyArrays();\n\n      if (fsp.indexingParams.getOrdinalPolicy() == OrdinalPolicy.NO_PARENTS) {\n        // need to count parents\n        countParents(arrays.parents());\n      }\n\n      // compute top-K\n      final int[] children = arrays.children();\n      final int[] siblings = arrays.siblings();\n      List<FacetResult> res = new ArrayList<FacetResult>();\n      for (FacetRequest fr : fsp.facetRequests) {\n        int rootOrd = taxoReader.getOrdinal(fr.categoryPath);\n        if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n          continue;\n        }\n        FacetResultNode root = new FacetResultNode();\n        root.ordinal = rootOrd;\n        root.label = fr.categoryPath;\n        root.value = counts[rootOrd];\n        if (fr.getNumResults() > taxoReader.getSize()) {\n          // specialize this case, user is interested in all available results\n          ArrayList<FacetResultNode> nodes = new ArrayList<FacetResultNode>();\n          int child = children[rootOrd];\n          while (child != TaxonomyReader.INVALID_ORDINAL) {\n            int count = counts[child];\n            if (count > 0) {\n              FacetResultNode node = new FacetResultNode();\n              node.label = taxoReader.getPath(child);\n              node.value = count;\n              nodes.add(node);\n            }\n            child = siblings[child];\n          }\n          root.residue = 0;\n          root.subResults = nodes;\n          res.add(new FacetResult(fr, root, nodes.size()));\n          continue;\n        }\n        \n        // since we use sentinel objects, we cannot reuse PQ. but that's ok because it's not big\n        FacetResultNodeQueue pq = new FacetResultNodeQueue(fr.getNumResults(), true);\n        FacetResultNode top = pq.top();\n        int child = children[rootOrd];\n        int numResults = 0; // count the number of results\n        int residue = 0;\n        while (child != TaxonomyReader.INVALID_ORDINAL) {\n          int count = counts[child];\n          if (count > top.value) {\n            residue += top.value;\n            top.value = count;\n            top.ordinal = child;\n            top = pq.updateTop();\n            ++numResults;\n          } else {\n            residue += count;\n          }\n          child = siblings[child];\n        }\n\n        // pop() the least (sentinel) elements\n        int pqsize = pq.size();\n        int size = numResults < pqsize ? numResults : pqsize;\n        for (int i = pqsize - size; i > 0; i--) { pq.pop(); }\n\n        // create the FacetResultNodes.\n        FacetResultNode[] subResults = new FacetResultNode[size];\n        for (int i = size - 1; i >= 0; i--) {\n          FacetResultNode node = pq.pop();\n          node.label = taxoReader.getPath(node.ordinal);\n          subResults[i] = node;\n        }\n        root.residue = residue;\n        root.subResults = Arrays.asList(subResults);\n        res.add(new FacetResult(fr, root, size));\n      }\n      return res;\n    } finally {\n      facetArrays.free();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsCollector#getFacetResults().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized List<FacetResult> getFacetResults() throws IOException {\n    try {\n      // first, count matching documents' facets\n      countFacets();\n      \n      ParallelTaxonomyArrays arrays = taxoReader.getParallelTaxonomyArrays();\n\n      if (fsp.indexingParams.getOrdinalPolicy() == OrdinalPolicy.NO_PARENTS) {\n        // need to count parents\n        countParents(arrays.parents());\n      }\n\n      // compute top-K\n      final int[] children = arrays.children();\n      final int[] siblings = arrays.siblings();\n      List<FacetResult> res = new ArrayList<FacetResult>();\n      for (FacetRequest fr : fsp.facetRequests) {\n        int rootOrd = taxoReader.getOrdinal(fr.categoryPath);\n        if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n          continue;\n        }\n        FacetResultNode root = new FacetResultNode();\n        root.ordinal = rootOrd;\n        root.label = fr.categoryPath;\n        root.value = counts[rootOrd];\n        if (fr.getNumResults() > taxoReader.getSize()) {\n          // specialize this case, user is interested in all available results\n          ArrayList<FacetResultNode> nodes = new ArrayList<FacetResultNode>();\n          int child = children[rootOrd];\n          while (child != TaxonomyReader.INVALID_ORDINAL) {\n            int count = counts[child];\n            if (count > 0) {\n              FacetResultNode node = new FacetResultNode();\n              node.label = taxoReader.getPath(child);\n              node.value = count;\n              nodes.add(node);\n            }\n            child = siblings[child];\n          }\n          root.residue = 0;\n          root.subResults = nodes;\n          res.add(new FacetResult(fr, root, nodes.size()));\n          continue;\n        }\n        \n        // since we use sentinel objects, we cannot reuse PQ. but that's ok because it's not big\n        FacetResultNodeQueue pq = new FacetResultNodeQueue(fr.getNumResults(), true);\n        FacetResultNode top = pq.top();\n        int child = children[rootOrd];\n        int numResults = 0; // count the number of results\n        int residue = 0;\n        while (child != TaxonomyReader.INVALID_ORDINAL) {\n          int count = counts[child];\n          if (count > top.value) {\n            residue += top.value;\n            top.value = count;\n            top.ordinal = child;\n            top = pq.updateTop();\n            ++numResults;\n          } else {\n            residue += count;\n          }\n          child = siblings[child];\n        }\n\n        // pop() the least (sentinel) elements\n        int pqsize = pq.size();\n        int size = numResults < pqsize ? numResults : pqsize;\n        for (int i = pqsize - size; i > 0; i--) { pq.pop(); }\n\n        // create the FacetResultNodes.\n        FacetResultNode[] subResults = new FacetResultNode[size];\n        for (int i = size - 1; i >= 0; i--) {\n          FacetResultNode node = pq.pop();\n          node.label = taxoReader.getPath(node.ordinal);\n          subResults[i] = node;\n        }\n        root.residue = residue;\n        root.subResults = Arrays.asList(subResults);\n        res.add(new FacetResult(fr, root, size));\n      }\n      return res;\n    } finally {\n      facetArrays.free();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dae862628c7a5275e1ff00ff3bc9803dedf124a9","date":1358939646,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsCollector#getFacetResults().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsCollector#getFacetResults().mjava","sourceNew":"  @Override\n  public synchronized List<FacetResult> getFacetResults() throws IOException {\n    try {\n      // first, count matching documents' facets\n      countFacets();\n      \n      ParallelTaxonomyArrays arrays = taxoReader.getParallelTaxonomyArrays();\n\n      if (fsp.indexingParams.getOrdinalPolicy() == OrdinalPolicy.NO_PARENTS) {\n        // need to count parents\n        countParents(arrays.parents());\n      }\n\n      // compute top-K\n      final int[] children = arrays.children();\n      final int[] siblings = arrays.siblings();\n      List<FacetResult> res = new ArrayList<FacetResult>();\n      for (FacetRequest fr : fsp.facetRequests) {\n        int rootOrd = taxoReader.getOrdinal(fr.categoryPath);\n        if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n          continue;\n        }\n        FacetResultNode root = new FacetResultNode();\n        root.ordinal = rootOrd;\n        root.label = fr.categoryPath;\n        root.value = counts[rootOrd];\n        if (fr.getNumResults() > taxoReader.getSize()) {\n          // specialize this case, user is interested in all available results\n          ArrayList<FacetResultNode> nodes = new ArrayList<FacetResultNode>();\n          int child = children[rootOrd];\n          while (child != TaxonomyReader.INVALID_ORDINAL) {\n            int count = counts[child];\n            if (count > 0) {\n              FacetResultNode node = new FacetResultNode();\n              node.label = taxoReader.getPath(child);\n              node.value = count;\n              nodes.add(node);\n            }\n            child = siblings[child];\n          }\n          root.subResults = nodes;\n          res.add(new FacetResult(fr, root, nodes.size()));\n          continue;\n        }\n        \n        // since we use sentinel objects, we cannot reuse PQ. but that's ok because it's not big\n        FacetResultNodeQueue pq = new FacetResultNodeQueue(fr.getNumResults(), true);\n        FacetResultNode top = pq.top();\n        int child = children[rootOrd];\n        int numResults = 0; // count the number of results\n        while (child != TaxonomyReader.INVALID_ORDINAL) {\n          int count = counts[child];\n          if (count > top.value) {\n            top.value = count;\n            top.ordinal = child;\n            top = pq.updateTop();\n            ++numResults;\n          }\n          child = siblings[child];\n        }\n\n        // pop() the least (sentinel) elements\n        int pqsize = pq.size();\n        int size = numResults < pqsize ? numResults : pqsize;\n        for (int i = pqsize - size; i > 0; i--) { pq.pop(); }\n\n        // create the FacetResultNodes.\n        FacetResultNode[] subResults = new FacetResultNode[size];\n        for (int i = size - 1; i >= 0; i--) {\n          FacetResultNode node = pq.pop();\n          node.label = taxoReader.getPath(node.ordinal);\n          subResults[i] = node;\n        }\n        root.subResults = Arrays.asList(subResults);\n        res.add(new FacetResult(fr, root, size));\n      }\n      return res;\n    } finally {\n      facetArrays.free();\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized List<FacetResult> getFacetResults() throws IOException {\n    try {\n      // first, count matching documents' facets\n      countFacets();\n      \n      ParallelTaxonomyArrays arrays = taxoReader.getParallelTaxonomyArrays();\n\n      if (fsp.indexingParams.getOrdinalPolicy() == OrdinalPolicy.NO_PARENTS) {\n        // need to count parents\n        countParents(arrays.parents());\n      }\n\n      // compute top-K\n      final int[] children = arrays.children();\n      final int[] siblings = arrays.siblings();\n      List<FacetResult> res = new ArrayList<FacetResult>();\n      for (FacetRequest fr : fsp.facetRequests) {\n        int rootOrd = taxoReader.getOrdinal(fr.categoryPath);\n        if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n          continue;\n        }\n        FacetResultNode root = new FacetResultNode();\n        root.ordinal = rootOrd;\n        root.label = fr.categoryPath;\n        root.value = counts[rootOrd];\n        if (fr.getNumResults() > taxoReader.getSize()) {\n          // specialize this case, user is interested in all available results\n          ArrayList<FacetResultNode> nodes = new ArrayList<FacetResultNode>();\n          int child = children[rootOrd];\n          while (child != TaxonomyReader.INVALID_ORDINAL) {\n            int count = counts[child];\n            if (count > 0) {\n              FacetResultNode node = new FacetResultNode();\n              node.label = taxoReader.getPath(child);\n              node.value = count;\n              nodes.add(node);\n            }\n            child = siblings[child];\n          }\n          root.residue = 0;\n          root.subResults = nodes;\n          res.add(new FacetResult(fr, root, nodes.size()));\n          continue;\n        }\n        \n        // since we use sentinel objects, we cannot reuse PQ. but that's ok because it's not big\n        FacetResultNodeQueue pq = new FacetResultNodeQueue(fr.getNumResults(), true);\n        FacetResultNode top = pq.top();\n        int child = children[rootOrd];\n        int numResults = 0; // count the number of results\n        int residue = 0;\n        while (child != TaxonomyReader.INVALID_ORDINAL) {\n          int count = counts[child];\n          if (count > top.value) {\n            residue += top.value;\n            top.value = count;\n            top.ordinal = child;\n            top = pq.updateTop();\n            ++numResults;\n          } else {\n            residue += count;\n          }\n          child = siblings[child];\n        }\n\n        // pop() the least (sentinel) elements\n        int pqsize = pq.size();\n        int size = numResults < pqsize ? numResults : pqsize;\n        for (int i = pqsize - size; i > 0; i--) { pq.pop(); }\n\n        // create the FacetResultNodes.\n        FacetResultNode[] subResults = new FacetResultNode[size];\n        for (int i = size - 1; i >= 0; i--) {\n          FacetResultNode node = pq.pop();\n          node.label = taxoReader.getPath(node.ordinal);\n          subResults[i] = node;\n        }\n        root.residue = residue;\n        root.subResults = Arrays.asList(subResults);\n        res.add(new FacetResult(fr, root, size));\n      }\n      return res;\n    } finally {\n      facetArrays.free();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66644845192a1c92d87d5324cc0b5af16ad31b42","date":1358970583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsCollector#getFacetResults().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsCollector#getFacetResults().mjava","sourceNew":"  @Override\n  public synchronized List<FacetResult> getFacetResults() throws IOException {\n    try {\n      // first, count matching documents' facets\n      countFacets();\n      \n      ParallelTaxonomyArrays arrays = taxoReader.getParallelTaxonomyArrays();\n\n      if (ordinalPolicy == OrdinalPolicy.NO_PARENTS) {\n        // need to count parents\n        countParents(arrays.parents());\n      }\n\n      // compute top-K\n      final int[] children = arrays.children();\n      final int[] siblings = arrays.siblings();\n      List<FacetResult> res = new ArrayList<FacetResult>();\n      for (FacetRequest fr : fsp.facetRequests) {\n        int rootOrd = taxoReader.getOrdinal(fr.categoryPath);\n        if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n          continue;\n        }\n        FacetResultNode root = new FacetResultNode();\n        root.ordinal = rootOrd;\n        root.label = fr.categoryPath;\n        root.value = counts[rootOrd];\n        if (fr.getNumResults() > taxoReader.getSize()) {\n          // specialize this case, user is interested in all available results\n          ArrayList<FacetResultNode> nodes = new ArrayList<FacetResultNode>();\n          int child = children[rootOrd];\n          while (child != TaxonomyReader.INVALID_ORDINAL) {\n            int count = counts[child];\n            if (count > 0) {\n              FacetResultNode node = new FacetResultNode();\n              node.label = taxoReader.getPath(child);\n              node.value = count;\n              nodes.add(node);\n            }\n            child = siblings[child];\n          }\n          root.subResults = nodes;\n          res.add(new FacetResult(fr, root, nodes.size()));\n          continue;\n        }\n        \n        // since we use sentinel objects, we cannot reuse PQ. but that's ok because it's not big\n        FacetResultNodeQueue pq = new FacetResultNodeQueue(fr.getNumResults(), true);\n        FacetResultNode top = pq.top();\n        int child = children[rootOrd];\n        int numResults = 0; // count the number of results\n        while (child != TaxonomyReader.INVALID_ORDINAL) {\n          int count = counts[child];\n          if (count > top.value) {\n            top.value = count;\n            top.ordinal = child;\n            top = pq.updateTop();\n            ++numResults;\n          }\n          child = siblings[child];\n        }\n\n        // pop() the least (sentinel) elements\n        int pqsize = pq.size();\n        int size = numResults < pqsize ? numResults : pqsize;\n        for (int i = pqsize - size; i > 0; i--) { pq.pop(); }\n\n        // create the FacetResultNodes.\n        FacetResultNode[] subResults = new FacetResultNode[size];\n        for (int i = size - 1; i >= 0; i--) {\n          FacetResultNode node = pq.pop();\n          node.label = taxoReader.getPath(node.ordinal);\n          subResults[i] = node;\n        }\n        root.subResults = Arrays.asList(subResults);\n        res.add(new FacetResult(fr, root, size));\n      }\n      return res;\n    } finally {\n      facetArrays.free();\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized List<FacetResult> getFacetResults() throws IOException {\n    try {\n      // first, count matching documents' facets\n      countFacets();\n      \n      ParallelTaxonomyArrays arrays = taxoReader.getParallelTaxonomyArrays();\n\n      if (fsp.indexingParams.getOrdinalPolicy() == OrdinalPolicy.NO_PARENTS) {\n        // need to count parents\n        countParents(arrays.parents());\n      }\n\n      // compute top-K\n      final int[] children = arrays.children();\n      final int[] siblings = arrays.siblings();\n      List<FacetResult> res = new ArrayList<FacetResult>();\n      for (FacetRequest fr : fsp.facetRequests) {\n        int rootOrd = taxoReader.getOrdinal(fr.categoryPath);\n        if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n          continue;\n        }\n        FacetResultNode root = new FacetResultNode();\n        root.ordinal = rootOrd;\n        root.label = fr.categoryPath;\n        root.value = counts[rootOrd];\n        if (fr.getNumResults() > taxoReader.getSize()) {\n          // specialize this case, user is interested in all available results\n          ArrayList<FacetResultNode> nodes = new ArrayList<FacetResultNode>();\n          int child = children[rootOrd];\n          while (child != TaxonomyReader.INVALID_ORDINAL) {\n            int count = counts[child];\n            if (count > 0) {\n              FacetResultNode node = new FacetResultNode();\n              node.label = taxoReader.getPath(child);\n              node.value = count;\n              nodes.add(node);\n            }\n            child = siblings[child];\n          }\n          root.subResults = nodes;\n          res.add(new FacetResult(fr, root, nodes.size()));\n          continue;\n        }\n        \n        // since we use sentinel objects, we cannot reuse PQ. but that's ok because it's not big\n        FacetResultNodeQueue pq = new FacetResultNodeQueue(fr.getNumResults(), true);\n        FacetResultNode top = pq.top();\n        int child = children[rootOrd];\n        int numResults = 0; // count the number of results\n        while (child != TaxonomyReader.INVALID_ORDINAL) {\n          int count = counts[child];\n          if (count > top.value) {\n            top.value = count;\n            top.ordinal = child;\n            top = pq.updateTop();\n            ++numResults;\n          }\n          child = siblings[child];\n        }\n\n        // pop() the least (sentinel) elements\n        int pqsize = pq.size();\n        int size = numResults < pqsize ? numResults : pqsize;\n        for (int i = pqsize - size; i > 0; i--) { pq.pop(); }\n\n        // create the FacetResultNodes.\n        FacetResultNode[] subResults = new FacetResultNode[size];\n        for (int i = size - 1; i >= 0; i--) {\n          FacetResultNode node = pq.pop();\n          node.label = taxoReader.getPath(node.ordinal);\n          subResults[i] = node;\n        }\n        root.subResults = Arrays.asList(subResults);\n        res.add(new FacetResult(fr, root, size));\n      }\n      return res;\n    } finally {\n      facetArrays.free();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f514f15ea8b182372ed5ec7f45525a814ede42d","date":1359009309,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsCollector#getFacetResults().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsCollector#getFacetResults().mjava","sourceNew":"  @Override\n  public synchronized List<FacetResult> getFacetResults() throws IOException {\n    try {\n      // first, count matching documents' facets\n      countFacets();\n      \n      ParallelTaxonomyArrays arrays = taxoReader.getParallelTaxonomyArrays();\n\n      if (ordinalPolicy == OrdinalPolicy.NO_PARENTS) {\n        // need to count parents\n        countParents(arrays.parents());\n      }\n\n      // compute top-K\n      final int[] children = arrays.children();\n      final int[] siblings = arrays.siblings();\n      List<FacetResult> res = new ArrayList<FacetResult>();\n      for (FacetRequest fr : fsp.facetRequests) {\n        int rootOrd = taxoReader.getOrdinal(fr.categoryPath);\n        if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n          continue;\n        }\n        FacetResultNode root = new FacetResultNode();\n        root.ordinal = rootOrd;\n        root.label = fr.categoryPath;\n        root.value = counts[rootOrd];\n        if (fr.getNumResults() > taxoReader.getSize()) {\n          // specialize this case, user is interested in all available results\n          ArrayList<FacetResultNode> nodes = new ArrayList<FacetResultNode>();\n          int child = children[rootOrd];\n          while (child != TaxonomyReader.INVALID_ORDINAL) {\n            int count = counts[child];\n            if (count > 0) {\n              FacetResultNode node = new FacetResultNode();\n              node.label = taxoReader.getPath(child);\n              node.value = count;\n              nodes.add(node);\n            }\n            child = siblings[child];\n          }\n          Collections.sort(nodes, new Comparator<FacetResultNode>() {\n            @Override\n            public int compare(FacetResultNode o1, FacetResultNode o2) {\n              int value = (int) (o2.value - o1.value);\n              if (value == 0) {\n                value = o2.ordinal - o1.ordinal;\n              }\n              return value;\n            }\n          });\n          \n          root.subResults = nodes;\n          res.add(new FacetResult(fr, root, nodes.size()));\n          continue;\n        }\n        \n        // since we use sentinel objects, we cannot reuse PQ. but that's ok because it's not big\n        FacetResultNodeQueue pq = new FacetResultNodeQueue(fr.getNumResults(), true);\n        FacetResultNode top = pq.top();\n        int child = children[rootOrd];\n        int numResults = 0; // count the number of results\n        while (child != TaxonomyReader.INVALID_ORDINAL) {\n          int count = counts[child];\n          if (count > top.value) {\n            top.value = count;\n            top.ordinal = child;\n            top = pq.updateTop();\n            ++numResults;\n          }\n          child = siblings[child];\n        }\n\n        // pop() the least (sentinel) elements\n        int pqsize = pq.size();\n        int size = numResults < pqsize ? numResults : pqsize;\n        for (int i = pqsize - size; i > 0; i--) { pq.pop(); }\n\n        // create the FacetResultNodes.\n        FacetResultNode[] subResults = new FacetResultNode[size];\n        for (int i = size - 1; i >= 0; i--) {\n          FacetResultNode node = pq.pop();\n          node.label = taxoReader.getPath(node.ordinal);\n          subResults[i] = node;\n        }\n        root.subResults = Arrays.asList(subResults);\n        res.add(new FacetResult(fr, root, size));\n      }\n      return res;\n    } finally {\n      facetArrays.free();\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized List<FacetResult> getFacetResults() throws IOException {\n    try {\n      // first, count matching documents' facets\n      countFacets();\n      \n      ParallelTaxonomyArrays arrays = taxoReader.getParallelTaxonomyArrays();\n\n      if (ordinalPolicy == OrdinalPolicy.NO_PARENTS) {\n        // need to count parents\n        countParents(arrays.parents());\n      }\n\n      // compute top-K\n      final int[] children = arrays.children();\n      final int[] siblings = arrays.siblings();\n      List<FacetResult> res = new ArrayList<FacetResult>();\n      for (FacetRequest fr : fsp.facetRequests) {\n        int rootOrd = taxoReader.getOrdinal(fr.categoryPath);\n        if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n          continue;\n        }\n        FacetResultNode root = new FacetResultNode();\n        root.ordinal = rootOrd;\n        root.label = fr.categoryPath;\n        root.value = counts[rootOrd];\n        if (fr.getNumResults() > taxoReader.getSize()) {\n          // specialize this case, user is interested in all available results\n          ArrayList<FacetResultNode> nodes = new ArrayList<FacetResultNode>();\n          int child = children[rootOrd];\n          while (child != TaxonomyReader.INVALID_ORDINAL) {\n            int count = counts[child];\n            if (count > 0) {\n              FacetResultNode node = new FacetResultNode();\n              node.label = taxoReader.getPath(child);\n              node.value = count;\n              nodes.add(node);\n            }\n            child = siblings[child];\n          }\n          root.subResults = nodes;\n          res.add(new FacetResult(fr, root, nodes.size()));\n          continue;\n        }\n        \n        // since we use sentinel objects, we cannot reuse PQ. but that's ok because it's not big\n        FacetResultNodeQueue pq = new FacetResultNodeQueue(fr.getNumResults(), true);\n        FacetResultNode top = pq.top();\n        int child = children[rootOrd];\n        int numResults = 0; // count the number of results\n        while (child != TaxonomyReader.INVALID_ORDINAL) {\n          int count = counts[child];\n          if (count > top.value) {\n            top.value = count;\n            top.ordinal = child;\n            top = pq.updateTop();\n            ++numResults;\n          }\n          child = siblings[child];\n        }\n\n        // pop() the least (sentinel) elements\n        int pqsize = pq.size();\n        int size = numResults < pqsize ? numResults : pqsize;\n        for (int i = pqsize - size; i > 0; i--) { pq.pop(); }\n\n        // create the FacetResultNodes.\n        FacetResultNode[] subResults = new FacetResultNode[size];\n        for (int i = size - 1; i >= 0; i--) {\n          FacetResultNode node = pq.pop();\n          node.label = taxoReader.getPath(node.ordinal);\n          subResults[i] = node;\n        }\n        root.subResults = Arrays.asList(subResults);\n        res.add(new FacetResult(fr, root, size));\n      }\n      return res;\n    } finally {\n      facetArrays.free();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d5244a676b83c2d551c3746e8181588ba619e1","date":1359031414,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsCollector#getFacetResults().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsCollector#getFacetResults().mjava","sourceNew":"  @Override\n  public synchronized List<FacetResult> getFacetResults() throws IOException {\n    try {\n      // first, count matching documents' facets\n      countFacets();\n      \n      ParallelTaxonomyArrays arrays = taxoReader.getParallelTaxonomyArrays();\n\n      if (ordinalPolicy == OrdinalPolicy.NO_PARENTS) {\n        // need to count parents\n        countParents(arrays.parents());\n      }\n\n      // compute top-K\n      final int[] children = arrays.children();\n      final int[] siblings = arrays.siblings();\n      List<FacetResult> res = new ArrayList<FacetResult>();\n      for (FacetRequest fr : fsp.facetRequests) {\n        int rootOrd = taxoReader.getOrdinal(fr.categoryPath);\n        if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n          continue;\n        }\n        FacetResultNode root = new FacetResultNode();\n        root.ordinal = rootOrd;\n        root.label = fr.categoryPath;\n        root.value = counts[rootOrd];\n        if (fr.getNumResults() > taxoReader.getSize()) {\n          // specialize this case, user is interested in all available results\n          ArrayList<FacetResultNode> nodes = new ArrayList<FacetResultNode>();\n          int child = children[rootOrd];\n          while (child != TaxonomyReader.INVALID_ORDINAL) {\n            int count = counts[child];\n            if (count > 0) {\n              FacetResultNode node = new FacetResultNode();\n              node.label = taxoReader.getPath(child);\n              node.value = count;\n              nodes.add(node);\n            }\n            child = siblings[child];\n          }\n          Collections.sort(nodes, new Comparator<FacetResultNode>() {\n            @Override\n            public int compare(FacetResultNode o1, FacetResultNode o2) {\n              int value = (int) (o2.value - o1.value);\n              if (value == 0) {\n                value = o2.ordinal - o1.ordinal;\n              }\n              return value;\n            }\n          });\n          \n          root.subResults = nodes;\n          res.add(new FacetResult(fr, root, nodes.size()));\n          continue;\n        }\n        \n        // since we use sentinel objects, we cannot reuse PQ. but that's ok because it's not big\n        FacetResultNodeQueue pq = new FacetResultNodeQueue(fr.getNumResults(), true);\n        FacetResultNode top = pq.top();\n        int child = children[rootOrd];\n        int numResults = 0; // count the number of results\n        while (child != TaxonomyReader.INVALID_ORDINAL) {\n          int count = counts[child];\n          if (count > top.value) {\n            top.value = count;\n            top.ordinal = child;\n            top = pq.updateTop();\n            ++numResults;\n          }\n          child = siblings[child];\n        }\n\n        // pop() the least (sentinel) elements\n        int pqsize = pq.size();\n        int size = numResults < pqsize ? numResults : pqsize;\n        for (int i = pqsize - size; i > 0; i--) { pq.pop(); }\n\n        // create the FacetResultNodes.\n        FacetResultNode[] subResults = new FacetResultNode[size];\n        for (int i = size - 1; i >= 0; i--) {\n          FacetResultNode node = pq.pop();\n          node.label = taxoReader.getPath(node.ordinal);\n          subResults[i] = node;\n        }\n        root.subResults = Arrays.asList(subResults);\n        res.add(new FacetResult(fr, root, size));\n      }\n      return res;\n    } finally {\n      facetArrays.free();\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized List<FacetResult> getFacetResults() throws IOException {\n    try {\n      // first, count matching documents' facets\n      countFacets();\n      \n      ParallelTaxonomyArrays arrays = taxoReader.getParallelTaxonomyArrays();\n\n      if (fsp.indexingParams.getOrdinalPolicy() == OrdinalPolicy.NO_PARENTS) {\n        // need to count parents\n        countParents(arrays.parents());\n      }\n\n      // compute top-K\n      final int[] children = arrays.children();\n      final int[] siblings = arrays.siblings();\n      List<FacetResult> res = new ArrayList<FacetResult>();\n      for (FacetRequest fr : fsp.facetRequests) {\n        int rootOrd = taxoReader.getOrdinal(fr.categoryPath);\n        if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n          continue;\n        }\n        FacetResultNode root = new FacetResultNode();\n        root.ordinal = rootOrd;\n        root.label = fr.categoryPath;\n        root.value = counts[rootOrd];\n        if (fr.getNumResults() > taxoReader.getSize()) {\n          // specialize this case, user is interested in all available results\n          ArrayList<FacetResultNode> nodes = new ArrayList<FacetResultNode>();\n          int child = children[rootOrd];\n          while (child != TaxonomyReader.INVALID_ORDINAL) {\n            int count = counts[child];\n            if (count > 0) {\n              FacetResultNode node = new FacetResultNode();\n              node.label = taxoReader.getPath(child);\n              node.value = count;\n              nodes.add(node);\n            }\n            child = siblings[child];\n          }\n          root.residue = 0;\n          root.subResults = nodes;\n          res.add(new FacetResult(fr, root, nodes.size()));\n          continue;\n        }\n        \n        // since we use sentinel objects, we cannot reuse PQ. but that's ok because it's not big\n        FacetResultNodeQueue pq = new FacetResultNodeQueue(fr.getNumResults(), true);\n        FacetResultNode top = pq.top();\n        int child = children[rootOrd];\n        int numResults = 0; // count the number of results\n        int residue = 0;\n        while (child != TaxonomyReader.INVALID_ORDINAL) {\n          int count = counts[child];\n          if (count > top.value) {\n            residue += top.value;\n            top.value = count;\n            top.ordinal = child;\n            top = pq.updateTop();\n            ++numResults;\n          } else {\n            residue += count;\n          }\n          child = siblings[child];\n        }\n\n        // pop() the least (sentinel) elements\n        int pqsize = pq.size();\n        int size = numResults < pqsize ? numResults : pqsize;\n        for (int i = pqsize - size; i > 0; i--) { pq.pop(); }\n\n        // create the FacetResultNodes.\n        FacetResultNode[] subResults = new FacetResultNode[size];\n        for (int i = size - 1; i >= 0; i--) {\n          FacetResultNode node = pq.pop();\n          node.label = taxoReader.getPath(node.ordinal);\n          subResults[i] = node;\n        }\n        root.residue = residue;\n        root.subResults = Arrays.asList(subResults);\n        res.add(new FacetResult(fr, root, size));\n      }\n      return res;\n    } finally {\n      facetArrays.free();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"239f79ed06f0979cfe1911ec5fba32b94fda43c1","date":1359553898,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsCollector#getFacetResults().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsCollector#getFacetResults().mjava","sourceNew":"  @Override\n  public synchronized List<FacetResult> getFacetResults() throws IOException {\n    try {\n      // first, count matching documents' facets\n      countFacets();\n      \n      ParallelTaxonomyArrays arrays = taxoReader.getParallelTaxonomyArrays();\n\n      // compute top-K\n      final int[] children = arrays.children();\n      final int[] siblings = arrays.siblings();\n      List<FacetResult> res = new ArrayList<FacetResult>();\n      for (FacetRequest fr : fsp.facetRequests) {\n        int rootOrd = taxoReader.getOrdinal(fr.categoryPath);\n        if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n          continue;\n        }\n        OrdinalPolicy ordinalPolicy = clp.getOrdinalPolicy(fr.categoryPath.components[0]);\n        if (ordinalPolicy == OrdinalPolicy.NO_PARENTS) {\n          // need to count parents\n          counts[rootOrd] += rollupCounts(children[rootOrd], children, siblings);\n        }\n        \n        FacetResultNode root = new FacetResultNode();\n        root.ordinal = rootOrd;\n        root.label = fr.categoryPath;\n        root.value = counts[rootOrd];\n        if (fr.getNumResults() > taxoReader.getSize()) {\n          // specialize this case, user is interested in all available results\n          ArrayList<FacetResultNode> nodes = new ArrayList<FacetResultNode>();\n          int child = children[rootOrd];\n          while (child != TaxonomyReader.INVALID_ORDINAL) {\n            int count = counts[child];\n            if (count > 0) {\n              FacetResultNode node = new FacetResultNode();\n              node.label = taxoReader.getPath(child);\n              node.value = count;\n              nodes.add(node);\n            }\n            child = siblings[child];\n          }\n          Collections.sort(nodes, new Comparator<FacetResultNode>() {\n            @Override\n            public int compare(FacetResultNode o1, FacetResultNode o2) {\n              int value = (int) (o2.value - o1.value);\n              if (value == 0) {\n                value = o2.ordinal - o1.ordinal;\n              }\n              return value;\n            }\n          });\n          \n          root.subResults = nodes;\n          res.add(new FacetResult(fr, root, nodes.size()));\n          continue;\n        }\n        \n        // since we use sentinel objects, we cannot reuse PQ. but that's ok because it's not big\n        FacetResultNodeQueue pq = new FacetResultNodeQueue(fr.getNumResults(), true);\n        FacetResultNode top = pq.top();\n        int child = children[rootOrd];\n        int numResults = 0; // count the number of results\n        while (child != TaxonomyReader.INVALID_ORDINAL) {\n          int count = counts[child];\n          if (count > top.value) {\n            top.value = count;\n            top.ordinal = child;\n            top = pq.updateTop();\n            ++numResults;\n          }\n          child = siblings[child];\n        }\n\n        // pop() the least (sentinel) elements\n        int pqsize = pq.size();\n        int size = numResults < pqsize ? numResults : pqsize;\n        for (int i = pqsize - size; i > 0; i--) { pq.pop(); }\n\n        // create the FacetResultNodes.\n        FacetResultNode[] subResults = new FacetResultNode[size];\n        for (int i = size - 1; i >= 0; i--) {\n          FacetResultNode node = pq.pop();\n          node.label = taxoReader.getPath(node.ordinal);\n          subResults[i] = node;\n        }\n        root.subResults = Arrays.asList(subResults);\n        res.add(new FacetResult(fr, root, size));\n      }\n      return res;\n    } finally {\n      facetArrays.free();\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized List<FacetResult> getFacetResults() throws IOException {\n    try {\n      // first, count matching documents' facets\n      countFacets();\n      \n      ParallelTaxonomyArrays arrays = taxoReader.getParallelTaxonomyArrays();\n\n      if (ordinalPolicy == OrdinalPolicy.NO_PARENTS) {\n        // need to count parents\n        countParents(arrays.parents());\n      }\n\n      // compute top-K\n      final int[] children = arrays.children();\n      final int[] siblings = arrays.siblings();\n      List<FacetResult> res = new ArrayList<FacetResult>();\n      for (FacetRequest fr : fsp.facetRequests) {\n        int rootOrd = taxoReader.getOrdinal(fr.categoryPath);\n        if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n          continue;\n        }\n        FacetResultNode root = new FacetResultNode();\n        root.ordinal = rootOrd;\n        root.label = fr.categoryPath;\n        root.value = counts[rootOrd];\n        if (fr.getNumResults() > taxoReader.getSize()) {\n          // specialize this case, user is interested in all available results\n          ArrayList<FacetResultNode> nodes = new ArrayList<FacetResultNode>();\n          int child = children[rootOrd];\n          while (child != TaxonomyReader.INVALID_ORDINAL) {\n            int count = counts[child];\n            if (count > 0) {\n              FacetResultNode node = new FacetResultNode();\n              node.label = taxoReader.getPath(child);\n              node.value = count;\n              nodes.add(node);\n            }\n            child = siblings[child];\n          }\n          Collections.sort(nodes, new Comparator<FacetResultNode>() {\n            @Override\n            public int compare(FacetResultNode o1, FacetResultNode o2) {\n              int value = (int) (o2.value - o1.value);\n              if (value == 0) {\n                value = o2.ordinal - o1.ordinal;\n              }\n              return value;\n            }\n          });\n          \n          root.subResults = nodes;\n          res.add(new FacetResult(fr, root, nodes.size()));\n          continue;\n        }\n        \n        // since we use sentinel objects, we cannot reuse PQ. but that's ok because it's not big\n        FacetResultNodeQueue pq = new FacetResultNodeQueue(fr.getNumResults(), true);\n        FacetResultNode top = pq.top();\n        int child = children[rootOrd];\n        int numResults = 0; // count the number of results\n        while (child != TaxonomyReader.INVALID_ORDINAL) {\n          int count = counts[child];\n          if (count > top.value) {\n            top.value = count;\n            top.ordinal = child;\n            top = pq.updateTop();\n            ++numResults;\n          }\n          child = siblings[child];\n        }\n\n        // pop() the least (sentinel) elements\n        int pqsize = pq.size();\n        int size = numResults < pqsize ? numResults : pqsize;\n        for (int i = pqsize - size; i > 0; i--) { pq.pop(); }\n\n        // create the FacetResultNodes.\n        FacetResultNode[] subResults = new FacetResultNode[size];\n        for (int i = size - 1; i >= 0; i--) {\n          FacetResultNode node = pq.pop();\n          node.label = taxoReader.getPath(node.ordinal);\n          subResults[i] = node;\n        }\n        root.subResults = Arrays.asList(subResults);\n        res.add(new FacetResult(fr, root, size));\n      }\n      return res;\n    } finally {\n      facetArrays.free();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsCollector#getFacetResults().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsCollector#getFacetResults().mjava","sourceNew":"  @Override\n  public synchronized List<FacetResult> getFacetResults() throws IOException {\n    try {\n      // first, count matching documents' facets\n      countFacets();\n      \n      ParallelTaxonomyArrays arrays = taxoReader.getParallelTaxonomyArrays();\n\n      // compute top-K\n      final int[] children = arrays.children();\n      final int[] siblings = arrays.siblings();\n      List<FacetResult> res = new ArrayList<FacetResult>();\n      for (FacetRequest fr : fsp.facetRequests) {\n        int rootOrd = taxoReader.getOrdinal(fr.categoryPath);\n        if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n          continue;\n        }\n        OrdinalPolicy ordinalPolicy = clp.getOrdinalPolicy(fr.categoryPath.components[0]);\n        if (ordinalPolicy == OrdinalPolicy.NO_PARENTS) {\n          // need to count parents\n          counts[rootOrd] += rollupCounts(children[rootOrd], children, siblings);\n        }\n        \n        FacetResultNode root = new FacetResultNode();\n        root.ordinal = rootOrd;\n        root.label = fr.categoryPath;\n        root.value = counts[rootOrd];\n        if (fr.getNumResults() > taxoReader.getSize()) {\n          // specialize this case, user is interested in all available results\n          ArrayList<FacetResultNode> nodes = new ArrayList<FacetResultNode>();\n          int child = children[rootOrd];\n          while (child != TaxonomyReader.INVALID_ORDINAL) {\n            int count = counts[child];\n            if (count > 0) {\n              FacetResultNode node = new FacetResultNode();\n              node.label = taxoReader.getPath(child);\n              node.value = count;\n              nodes.add(node);\n            }\n            child = siblings[child];\n          }\n          Collections.sort(nodes, new Comparator<FacetResultNode>() {\n            @Override\n            public int compare(FacetResultNode o1, FacetResultNode o2) {\n              int value = (int) (o2.value - o1.value);\n              if (value == 0) {\n                value = o2.ordinal - o1.ordinal;\n              }\n              return value;\n            }\n          });\n          \n          root.subResults = nodes;\n          res.add(new FacetResult(fr, root, nodes.size()));\n          continue;\n        }\n        \n        // since we use sentinel objects, we cannot reuse PQ. but that's ok because it's not big\n        FacetResultNodeQueue pq = new FacetResultNodeQueue(fr.getNumResults(), true);\n        FacetResultNode top = pq.top();\n        int child = children[rootOrd];\n        int numResults = 0; // count the number of results\n        while (child != TaxonomyReader.INVALID_ORDINAL) {\n          int count = counts[child];\n          if (count > top.value) {\n            top.value = count;\n            top.ordinal = child;\n            top = pq.updateTop();\n            ++numResults;\n          }\n          child = siblings[child];\n        }\n\n        // pop() the least (sentinel) elements\n        int pqsize = pq.size();\n        int size = numResults < pqsize ? numResults : pqsize;\n        for (int i = pqsize - size; i > 0; i--) { pq.pop(); }\n\n        // create the FacetResultNodes.\n        FacetResultNode[] subResults = new FacetResultNode[size];\n        for (int i = size - 1; i >= 0; i--) {\n          FacetResultNode node = pq.pop();\n          node.label = taxoReader.getPath(node.ordinal);\n          subResults[i] = node;\n        }\n        root.subResults = Arrays.asList(subResults);\n        res.add(new FacetResult(fr, root, size));\n      }\n      return res;\n    } finally {\n      facetArrays.free();\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized List<FacetResult> getFacetResults() throws IOException {\n    try {\n      // first, count matching documents' facets\n      countFacets();\n      \n      ParallelTaxonomyArrays arrays = taxoReader.getParallelTaxonomyArrays();\n\n      if (ordinalPolicy == OrdinalPolicy.NO_PARENTS) {\n        // need to count parents\n        countParents(arrays.parents());\n      }\n\n      // compute top-K\n      final int[] children = arrays.children();\n      final int[] siblings = arrays.siblings();\n      List<FacetResult> res = new ArrayList<FacetResult>();\n      for (FacetRequest fr : fsp.facetRequests) {\n        int rootOrd = taxoReader.getOrdinal(fr.categoryPath);\n        if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n          continue;\n        }\n        FacetResultNode root = new FacetResultNode();\n        root.ordinal = rootOrd;\n        root.label = fr.categoryPath;\n        root.value = counts[rootOrd];\n        if (fr.getNumResults() > taxoReader.getSize()) {\n          // specialize this case, user is interested in all available results\n          ArrayList<FacetResultNode> nodes = new ArrayList<FacetResultNode>();\n          int child = children[rootOrd];\n          while (child != TaxonomyReader.INVALID_ORDINAL) {\n            int count = counts[child];\n            if (count > 0) {\n              FacetResultNode node = new FacetResultNode();\n              node.label = taxoReader.getPath(child);\n              node.value = count;\n              nodes.add(node);\n            }\n            child = siblings[child];\n          }\n          Collections.sort(nodes, new Comparator<FacetResultNode>() {\n            @Override\n            public int compare(FacetResultNode o1, FacetResultNode o2) {\n              int value = (int) (o2.value - o1.value);\n              if (value == 0) {\n                value = o2.ordinal - o1.ordinal;\n              }\n              return value;\n            }\n          });\n          \n          root.subResults = nodes;\n          res.add(new FacetResult(fr, root, nodes.size()));\n          continue;\n        }\n        \n        // since we use sentinel objects, we cannot reuse PQ. but that's ok because it's not big\n        FacetResultNodeQueue pq = new FacetResultNodeQueue(fr.getNumResults(), true);\n        FacetResultNode top = pq.top();\n        int child = children[rootOrd];\n        int numResults = 0; // count the number of results\n        while (child != TaxonomyReader.INVALID_ORDINAL) {\n          int count = counts[child];\n          if (count > top.value) {\n            top.value = count;\n            top.ordinal = child;\n            top = pq.updateTop();\n            ++numResults;\n          }\n          child = siblings[child];\n        }\n\n        // pop() the least (sentinel) elements\n        int pqsize = pq.size();\n        int size = numResults < pqsize ? numResults : pqsize;\n        for (int i = pqsize - size; i > 0; i--) { pq.pop(); }\n\n        // create the FacetResultNodes.\n        FacetResultNode[] subResults = new FacetResultNode[size];\n        for (int i = size - 1; i >= 0; i--) {\n          FacetResultNode node = pq.pop();\n          node.label = taxoReader.getPath(node.ordinal);\n          subResults[i] = node;\n        }\n        root.subResults = Arrays.asList(subResults);\n        res.add(new FacetResult(fr, root, size));\n      }\n      return res;\n    } finally {\n      facetArrays.free();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsCollector#getFacetResults().mjava","sourceNew":null,"sourceOld":"  @Override\n  public synchronized List<FacetResult> getFacetResults() throws IOException {\n    try {\n      // first, count matching documents' facets\n      countFacets();\n      \n      ParallelTaxonomyArrays arrays = taxoReader.getParallelTaxonomyArrays();\n\n      // compute top-K\n      final int[] children = arrays.children();\n      final int[] siblings = arrays.siblings();\n      List<FacetResult> res = new ArrayList<FacetResult>();\n      for (FacetRequest fr : fsp.facetRequests) {\n        int rootOrd = taxoReader.getOrdinal(fr.categoryPath);\n        if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n          continue;\n        }\n        OrdinalPolicy ordinalPolicy = clp.getOrdinalPolicy(fr.categoryPath.components[0]);\n        if (ordinalPolicy == OrdinalPolicy.NO_PARENTS) {\n          // need to count parents\n          counts[rootOrd] += rollupCounts(children[rootOrd], children, siblings);\n        }\n        \n        FacetResultNode root = new FacetResultNode();\n        root.ordinal = rootOrd;\n        root.label = fr.categoryPath;\n        root.value = counts[rootOrd];\n        if (fr.getNumResults() > taxoReader.getSize()) {\n          // specialize this case, user is interested in all available results\n          ArrayList<FacetResultNode> nodes = new ArrayList<FacetResultNode>();\n          int child = children[rootOrd];\n          while (child != TaxonomyReader.INVALID_ORDINAL) {\n            int count = counts[child];\n            if (count > 0) {\n              FacetResultNode node = new FacetResultNode();\n              node.label = taxoReader.getPath(child);\n              node.value = count;\n              nodes.add(node);\n            }\n            child = siblings[child];\n          }\n          Collections.sort(nodes, new Comparator<FacetResultNode>() {\n            @Override\n            public int compare(FacetResultNode o1, FacetResultNode o2) {\n              int value = (int) (o2.value - o1.value);\n              if (value == 0) {\n                value = o2.ordinal - o1.ordinal;\n              }\n              return value;\n            }\n          });\n          \n          root.subResults = nodes;\n          res.add(new FacetResult(fr, root, nodes.size()));\n          continue;\n        }\n        \n        // since we use sentinel objects, we cannot reuse PQ. but that's ok because it's not big\n        FacetResultNodeQueue pq = new FacetResultNodeQueue(fr.getNumResults(), true);\n        FacetResultNode top = pq.top();\n        int child = children[rootOrd];\n        int numResults = 0; // count the number of results\n        while (child != TaxonomyReader.INVALID_ORDINAL) {\n          int count = counts[child];\n          if (count > top.value) {\n            top.value = count;\n            top.ordinal = child;\n            top = pq.updateTop();\n            ++numResults;\n          }\n          child = siblings[child];\n        }\n\n        // pop() the least (sentinel) elements\n        int pqsize = pq.size();\n        int size = numResults < pqsize ? numResults : pqsize;\n        for (int i = pqsize - size; i > 0; i--) { pq.pop(); }\n\n        // create the FacetResultNodes.\n        FacetResultNode[] subResults = new FacetResultNode[size];\n        for (int i = size - 1; i >= 0; i--) {\n          FacetResultNode node = pq.pop();\n          node.label = taxoReader.getPath(node.ordinal);\n          subResults[i] = node;\n        }\n        root.subResults = Arrays.asList(subResults);\n        res.add(new FacetResult(fr, root, size));\n      }\n      return res;\n    } finally {\n      facetArrays.free();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f514f15ea8b182372ed5ec7f45525a814ede42d":["66644845192a1c92d87d5324cc0b5af16ad31b42"],"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dae862628c7a5275e1ff00ff3bc9803dedf124a9":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"61d5f95d14e5b9b046998c51e16709a398c15226":["b2d5244a676b83c2d551c3746e8181588ba619e1","239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"66644845192a1c92d87d5324cc0b5af16ad31b42":["dae862628c7a5275e1ff00ff3bc9803dedf124a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["7f514f15ea8b182372ed5ec7f45525a814ede42d"],"07155cdd910937cdf6877e48884d5782845c8b8b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"b2d5244a676b83c2d551c3746e8181588ba619e1":["07155cdd910937cdf6877e48884d5782845c8b8b","7f514f15ea8b182372ed5ec7f45525a814ede42d"]},"commit2Childs":{"7f514f15ea8b182372ed5ec7f45525a814ede42d":["239f79ed06f0979cfe1911ec5fba32b94fda43c1","b2d5244a676b83c2d551c3746e8181588ba619e1"],"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["dae862628c7a5275e1ff00ff3bc9803dedf124a9","07155cdd910937cdf6877e48884d5782845c8b8b"],"dae862628c7a5275e1ff00ff3bc9803dedf124a9":["66644845192a1c92d87d5324cc0b5af16ad31b42"],"61d5f95d14e5b9b046998c51e16709a398c15226":[],"66644845192a1c92d87d5324cc0b5af16ad31b42":["7f514f15ea8b182372ed5ec7f45525a814ede42d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","07155cdd910937cdf6877e48884d5782845c8b8b"],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["61d5f95d14e5b9b046998c51e16709a398c15226","571abba77e55fea386a38c0024f72ffa5b37a9ad"],"07155cdd910937cdf6877e48884d5782845c8b8b":["b2d5244a676b83c2d551c3746e8181588ba619e1"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b2d5244a676b83c2d551c3746e8181588ba619e1":["61d5f95d14e5b9b046998c51e16709a398c15226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}