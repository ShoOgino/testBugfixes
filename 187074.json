{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testFutureCommit().mjava","commits":[{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testFutureCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testFutureCommit().mjava","sourceNew":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testFutureCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testFutureCommit().mjava","sourceNew":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testFutureCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testFutureCommit().mjava","sourceNew":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testFutureCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testFutureCommit().mjava","sourceNew":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testFutureCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testFutureCommit().mjava","sourceNew":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testFutureCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testFutureCommit().mjava","sourceNew":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9172d6bebb12f0bba2ebb1756779c2f8948ab7e","date":1327848882,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testFutureCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testFutureCommit().mjava","sourceNew":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : DirectoryReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : DirectoryReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testFutureCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testFutureCommit().mjava","sourceNew":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : DirectoryReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : DirectoryReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testFutureCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testFutureCommit().mjava","sourceNew":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : DirectoryReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : DirectoryReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : DirectoryReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : DirectoryReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"f9172d6bebb12f0bba2ebb1756779c2f8948ab7e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","f9172d6bebb12f0bba2ebb1756779c2f8948ab7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f9172d6bebb12f0bba2ebb1756779c2f8948ab7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","f9172d6bebb12f0bba2ebb1756779c2f8948ab7e","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}