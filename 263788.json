{"path":"lucene/core/src/java/org/apache/lucene/util/InPlaceMergeSorter#mergeSort(int,int).mjava","commits":[{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/InPlaceMergeSorter#mergeSort(int,int).mjava","pathOld":"/dev/null","sourceNew":"  void mergeSort(int from, int to) {\n    if (to - from < THRESHOLD) {\n      insertionSort(from, to);\n    } else {\n      final int mid = (from + to) >>> 1;\n      mergeSort(from, mid);\n      mergeSort(mid, to);\n      mergeInPlace(from, mid, to);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5f3620d30d0f461f4d68b511e0bccc098fa61a6","date":1464249608,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/InPlaceMergeSorter#mergeSort(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/InPlaceMergeSorter#mergeSort(int,int).mjava","sourceNew":"  void mergeSort(int from, int to) {\n    if (to - from < INSERTION_SORT_THRESHOLD) {\n      insertionSort(from, to);\n    } else {\n      final int mid = (from + to) >>> 1;\n      mergeSort(from, mid);\n      mergeSort(mid, to);\n      mergeInPlace(from, mid, to);\n    }\n  }\n\n","sourceOld":"  void mergeSort(int from, int to) {\n    if (to - from < THRESHOLD) {\n      insertionSort(from, to);\n    } else {\n      final int mid = (from + to) >>> 1;\n      mergeSort(from, mid);\n      mergeSort(mid, to);\n      mergeInPlace(from, mid, to);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/InPlaceMergeSorter#mergeSort(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/InPlaceMergeSorter#mergeSort(int,int).mjava","sourceNew":"  void mergeSort(int from, int to) {\n    if (to - from < INSERTION_SORT_THRESHOLD) {\n      insertionSort(from, to);\n    } else {\n      final int mid = (from + to) >>> 1;\n      mergeSort(from, mid);\n      mergeSort(mid, to);\n      mergeInPlace(from, mid, to);\n    }\n  }\n\n","sourceOld":"  void mergeSort(int from, int to) {\n    if (to - from < THRESHOLD) {\n      insertionSort(from, to);\n    } else {\n      final int mid = (from + to) >>> 1;\n      mergeSort(from, mid);\n      mergeSort(mid, to);\n      mergeInPlace(from, mid, to);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a20457919db052812998f60294d17daa883ff972","date":1470227748,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/InPlaceMergeSorter#mergeSort(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/InPlaceMergeSorter#mergeSort(int,int).mjava","sourceNew":"  void mergeSort(int from, int to) {\n    if (to - from < BINARY_SORT_THRESHOLD) {\n      binarySort(from, to);\n    } else {\n      final int mid = (from + to) >>> 1;\n      mergeSort(from, mid);\n      mergeSort(mid, to);\n      mergeInPlace(from, mid, to);\n    }\n  }\n\n","sourceOld":"  void mergeSort(int from, int to) {\n    if (to - from < INSERTION_SORT_THRESHOLD) {\n      insertionSort(from, to);\n    } else {\n      final int mid = (from + to) >>> 1;\n      mergeSort(from, mid);\n      mergeSort(mid, to);\n      mergeInPlace(from, mid, to);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/InPlaceMergeSorter#mergeSort(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/InPlaceMergeSorter#mergeSort(int,int).mjava","sourceNew":"  void mergeSort(int from, int to) {\n    if (to - from < BINARY_SORT_THRESHOLD) {\n      binarySort(from, to);\n    } else {\n      final int mid = (from + to) >>> 1;\n      mergeSort(from, mid);\n      mergeSort(mid, to);\n      mergeInPlace(from, mid, to);\n    }\n  }\n\n","sourceOld":"  void mergeSort(int from, int to) {\n    if (to - from < INSERTION_SORT_THRESHOLD) {\n      insertionSort(from, to);\n    } else {\n      final int mid = (from + to) >>> 1;\n      mergeSort(from, mid);\n      mergeSort(mid, to);\n      mergeInPlace(from, mid, to);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/InPlaceMergeSorter#mergeSort(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/InPlaceMergeSorter#mergeSort(int,int).mjava","sourceNew":"  void mergeSort(int from, int to) {\n    if (to - from < BINARY_SORT_THRESHOLD) {\n      binarySort(from, to);\n    } else {\n      final int mid = (from + to) >>> 1;\n      mergeSort(from, mid);\n      mergeSort(mid, to);\n      mergeInPlace(from, mid, to);\n    }\n  }\n\n","sourceOld":"  void mergeSort(int from, int to) {\n    if (to - from < THRESHOLD) {\n      insertionSort(from, to);\n    } else {\n      final int mid = (from + to) >>> 1;\n      mergeSort(from, mid);\n      mergeSort(mid, to);\n      mergeInPlace(from, mid, to);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a5f3620d30d0f461f4d68b511e0bccc098fa61a6":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"a20457919db052812998f60294d17daa883ff972":["a5f3620d30d0f461f4d68b511e0bccc098fa61a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83870855d82aba6819217abeff5a40779dbb28b4":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f","a5f3620d30d0f461f4d68b511e0bccc098fa61a6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f","a20457919db052812998f60294d17daa883ff972"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a5f3620d30d0f461f4d68b511e0bccc098fa61a6","a20457919db052812998f60294d17daa883ff972"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a20457919db052812998f60294d17daa883ff972"]},"commit2Childs":{"a5f3620d30d0f461f4d68b511e0bccc098fa61a6":["a20457919db052812998f60294d17daa883ff972","83870855d82aba6819217abeff5a40779dbb28b4","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a20457919db052812998f60294d17daa883ff972":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["a5f3620d30d0f461f4d68b511e0bccc098fa61a6","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}