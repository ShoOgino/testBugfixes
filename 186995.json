{"path":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkPreferredsAreLeaders().mjava","commits":[{"id":"73fd358e8ec697393d56617f4d9cedaca74dca14","date":1547954439,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkPreferredsAreLeaders().mjava","pathOld":"/dev/null","sourceNew":"  // Fail if we the replicas with the preferredLeader property are _not_ also the leaders.\n  private void checkPreferredsAreLeaders() throws InterruptedException, KeeperException {\n    // Make sure that the shard unique are where you expect.\n    TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);\n\n    while (timeout.hasTimedOut() == false) {\n      if (checkPreferredsAreLeaders(false)) {\n        // Ok, all preferreds are leaders. Just for Let's also get the election queue and guarantee that every\n        // live replica is in the queue and none are repeated.\n        checkElectionQueues();\n        return;\n      }\n      TimeUnit.MILLISECONDS.sleep(100);\n    }\n\n    log.error(\"Leaders are not all preferres {}\", cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(COLLECTION_NAME));\n    // Show the errors\n    checkPreferredsAreLeaders(true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkPreferredsAreLeaders().mjava","pathOld":"/dev/null","sourceNew":"  // Fail if we the replicas with the preferredLeader property are _not_ also the leaders.\n  private void checkPreferredsAreLeaders() throws InterruptedException, KeeperException {\n    // Make sure that the shard unique are where you expect.\n    TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);\n\n    while (timeout.hasTimedOut() == false) {\n      if (checkPreferredsAreLeaders(false)) {\n        // Ok, all preferreds are leaders. Just for Let's also get the election queue and guarantee that every\n        // live replica is in the queue and none are repeated.\n        checkElectionQueues();\n        return;\n      }\n      TimeUnit.MILLISECONDS.sleep(100);\n    }\n\n    log.error(\"Leaders are not all preferres {}\", cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(COLLECTION_NAME));\n    // Show the errors\n    checkPreferredsAreLeaders(true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73fd358e8ec697393d56617f4d9cedaca74dca14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73fd358e8ec697393d56617f4d9cedaca74dca14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73fd358e8ec697393d56617f4d9cedaca74dca14"]},"commit2Childs":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","73fd358e8ec697393d56617f4d9cedaca74dca14"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}