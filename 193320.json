{"path":"backwards/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testRangeFilterId().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testRangeFilterId().mjava","pathOld":"/dev/null","sourceNew":"  public void testRangeFilterId() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n        \n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n    \n    int numDocs = reader.numDocs();\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n    FieldCacheRangeFilter fcrf;\n    result = search.search(q,fcrf = FieldCacheRangeFilter.newStringRange(\"id\",minIP,maxIP,T,T), numDocs).scoreDocs;\n    assertTrue(fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",minIP,maxIP,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",minIP,maxIP,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",minIP,maxIP,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",medIP,maxIP,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",minIP,medIP,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n\n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",minIP,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",null,maxIP,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",minIP,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",null,maxIP,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",medIP,maxIP,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",minIP,medIP,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",minIP,minIP,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",medIP,medIP,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",maxIP,maxIP,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",minIP,minIP,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",null,minIP,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",maxIP,maxIP,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",maxIP,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",medIP,medIP,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n        \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testRangeFilterId().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testRangeFilterId().mjava","sourceNew":"  public void testRangeFilterId() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n        \n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n    \n    int numDocs = reader.numDocs();\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n    FieldCacheRangeFilter fcrf;\n    result = search.search(q,fcrf = FieldCacheRangeFilter.newStringRange(\"id\",minIP,maxIP,T,T), numDocs).scoreDocs;\n    assertTrue(fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",minIP,maxIP,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",minIP,maxIP,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",minIP,maxIP,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",medIP,maxIP,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",minIP,medIP,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n\n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",minIP,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",null,maxIP,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",minIP,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",null,maxIP,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",medIP,maxIP,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",minIP,medIP,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",minIP,minIP,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",medIP,medIP,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",maxIP,maxIP,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",minIP,minIP,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",null,minIP,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",maxIP,maxIP,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",maxIP,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",medIP,medIP,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n        \n  }\n\n","sourceOld":"  public void testRangeFilterId() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n        \n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n    \n    int numDocs = reader.numDocs();\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n    FieldCacheRangeFilter fcrf;\n    result = search.search(q,fcrf = FieldCacheRangeFilter.newStringRange(\"id\",minIP,maxIP,T,T), numDocs).scoreDocs;\n    assertTrue(fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",minIP,maxIP,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",minIP,maxIP,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",minIP,maxIP,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",medIP,maxIP,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",minIP,medIP,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n\n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",minIP,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",null,maxIP,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",minIP,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",null,maxIP,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",medIP,maxIP,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",minIP,medIP,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",minIP,minIP,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",medIP,medIP,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",maxIP,maxIP,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",minIP,minIP,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",null,minIP,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",maxIP,maxIP,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",maxIP,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newStringRange(\"id\",medIP,medIP,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}