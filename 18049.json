{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","commits":[{"id":"cf39fad3cd224bbe2a1acfbb2792690c8a62be1b","date":1357611186,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","pathOld":"/dev/null","sourceNew":"    private BinaryDocValues getVariableBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n      // nocommit: what are we doing with clone?!\n      final IndexInput data = this.data.clone();\n      final NumericDocValues addresses = getNumeric(field);\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = docID == 0 ? bytes.offset : bytes.offset + addresses.get(docID-1);\n          long endAddress = bytes.offset + addresses.get(docID);\n          int length = (int) (endAddress - startAddress);\n          try {\n            data.seek(startAddress);\n            if (result.length < length) {\n              result.offset = 0;\n              result.bytes = new byte[length];\n            }\n            data.readBytes(result.bytes, result.offset, length);\n            result.length = length;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be442aa722f1c08c70ec5d9938c9f80a8138e627","date":1357613095,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"    private BinaryDocValues getVariableBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n      // nocommit: what are we doing with clone?!\n      final IndexInput data = this.data.clone();\n      final NumericDocValues addresses = getNumeric(field);\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = docID == 0 ? bytes.offset : bytes.offset + addresses.get(docID-1);\n          long endAddress = bytes.offset + addresses.get(docID);\n          int length = (int) (endAddress - startAddress);\n          try {\n            data.seek(startAddress);\n            if (result.length < length) {\n              result.offset = 0;\n              result.bytes = new byte[length];\n            }\n            data.readBytes(result.bytes, result.offset, length);\n            result.length = length;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        @Override\n        public int size() {\n          return bytes.count;\n        }\n      };\n    }\n\n","sourceOld":"    private BinaryDocValues getVariableBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n      // nocommit: what are we doing with clone?!\n      final IndexInput data = this.data.clone();\n      final NumericDocValues addresses = getNumeric(field);\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = docID == 0 ? bytes.offset : bytes.offset + addresses.get(docID-1);\n          long endAddress = bytes.offset + addresses.get(docID);\n          int length = (int) (endAddress - startAddress);\n          try {\n            data.seek(startAddress);\n            if (result.length < length) {\n              result.offset = 0;\n              result.bytes = new byte[length];\n            }\n            data.readBytes(result.bytes, result.offset, length);\n            result.length = length;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68acf69be1b41192ae2278afc452bb66f6349cba","date":1357657311,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","sourceNew":null,"sourceOld":"    private BinaryDocValues getVariableBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n      // nocommit: what are we doing with clone?!\n      final IndexInput data = this.data.clone();\n      final NumericDocValues addresses = getNumeric(field);\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = docID == 0 ? bytes.offset : bytes.offset + addresses.get(docID-1);\n          long endAddress = bytes.offset + addresses.get(docID);\n          int length = (int) (endAddress - startAddress);\n          try {\n            data.seek(startAddress);\n            if (result.length < length) {\n              result.offset = 0;\n              result.bytes = new byte[length];\n            }\n            data.readBytes(result.bytes, result.offset, length);\n            result.length = length;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        @Override\n        public int size() {\n          return bytes.count;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cf39fad3cd224bbe2a1acfbb2792690c8a62be1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"68acf69be1b41192ae2278afc452bb66f6349cba":["be442aa722f1c08c70ec5d9938c9f80a8138e627"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be442aa722f1c08c70ec5d9938c9f80a8138e627":["cf39fad3cd224bbe2a1acfbb2792690c8a62be1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"cf39fad3cd224bbe2a1acfbb2792690c8a62be1b":["be442aa722f1c08c70ec5d9938c9f80a8138e627"],"68acf69be1b41192ae2278afc452bb66f6349cba":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf39fad3cd224bbe2a1acfbb2792690c8a62be1b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"be442aa722f1c08c70ec5d9938c9f80a8138e627":["68acf69be1b41192ae2278afc452bb66f6349cba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["68acf69be1b41192ae2278afc452bb66f6349cba","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}