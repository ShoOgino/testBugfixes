{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testMethods().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testMethods().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testMethods().mjava","sourceNew":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 2, false);\n    HashMap<String,Integer> hm = new HashMap<String,Integer>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n    hm.put(\"baz\", 3);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n\n    CharArraySet cs = cm.keySet();\n    int n=0;\n    for (Object o : cs) {\n      assertTrue(cm.containsKey(o));\n      char[] co = (char[]) o;\n      assertTrue(cm.containsKey(co, 0, co.length));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n    cs.clear();\n    assertEquals(0, cs.size());\n    assertEquals(0, cm.size());\n    try {\n      cs.add(\"test\");\n      fail(\"keySet() allows adding new keys\");\n    } catch (UnsupportedOperationException ue) {\n      // pass\n    }\n    cm.putAll(hm);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n\n    Iterator<Map.Entry<Object,Integer>> iter1 = cm.entrySet().iterator();\n    n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<Object,Integer> entry = iter1.next();\n      Object key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(cm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n    assertEquals(cm.size(), n);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.entrySet().iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.entrySet().clear();\n    assertEquals(0, cm.size());\n    assertEquals(0, cm.entrySet().size());\n    assertTrue(cm.isEmpty());\n  }\n\n","sourceOld":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 2, false);\n    HashMap<String,Integer> hm = new HashMap<String,Integer>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n    hm.put(\"baz\", 3);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n\n    CharArraySet cs = cm.keySet();\n    int n=0;\n    for (Object o : cs) {\n      assertTrue(cm.containsKey(o));\n      char[] co = (char[]) o;\n      assertTrue(cm.containsKey(co, 0, co.length));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n    cs.clear();\n    assertEquals(0, cs.size());\n    assertEquals(0, cm.size());\n    try {\n      cs.add(\"test\");\n      fail(\"keySet() allows adding new keys\");\n    } catch (UnsupportedOperationException ue) {\n      // pass\n    }\n    cm.putAll(hm);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n\n    Iterator<Map.Entry<Object,Integer>> iter1 = cm.entrySet().iterator();\n    n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<Object,Integer> entry = iter1.next();\n      Object key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(cm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n    assertEquals(cm.size(), n);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.entrySet().iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.entrySet().clear();\n    assertEquals(0, cm.size());\n    assertEquals(0, cm.entrySet().size());\n    assertTrue(cm.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testMethods().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testMethods().mjava","sourceNew":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<>(TEST_VERSION_CURRENT, 2, false);\n    HashMap<String,Integer> hm = new HashMap<>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n    hm.put(\"baz\", 3);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n\n    CharArraySet cs = cm.keySet();\n    int n=0;\n    for (Object o : cs) {\n      assertTrue(cm.containsKey(o));\n      char[] co = (char[]) o;\n      assertTrue(cm.containsKey(co, 0, co.length));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n    cs.clear();\n    assertEquals(0, cs.size());\n    assertEquals(0, cm.size());\n    try {\n      cs.add(\"test\");\n      fail(\"keySet() allows adding new keys\");\n    } catch (UnsupportedOperationException ue) {\n      // pass\n    }\n    cm.putAll(hm);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n\n    Iterator<Map.Entry<Object,Integer>> iter1 = cm.entrySet().iterator();\n    n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<Object,Integer> entry = iter1.next();\n      Object key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(cm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n    assertEquals(cm.size(), n);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.entrySet().iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.entrySet().clear();\n    assertEquals(0, cm.size());\n    assertEquals(0, cm.entrySet().size());\n    assertTrue(cm.isEmpty());\n  }\n\n","sourceOld":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 2, false);\n    HashMap<String,Integer> hm = new HashMap<String,Integer>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n    hm.put(\"baz\", 3);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n\n    CharArraySet cs = cm.keySet();\n    int n=0;\n    for (Object o : cs) {\n      assertTrue(cm.containsKey(o));\n      char[] co = (char[]) o;\n      assertTrue(cm.containsKey(co, 0, co.length));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n    cs.clear();\n    assertEquals(0, cs.size());\n    assertEquals(0, cm.size());\n    try {\n      cs.add(\"test\");\n      fail(\"keySet() allows adding new keys\");\n    } catch (UnsupportedOperationException ue) {\n      // pass\n    }\n    cm.putAll(hm);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n\n    Iterator<Map.Entry<Object,Integer>> iter1 = cm.entrySet().iterator();\n    n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<Object,Integer> entry = iter1.next();\n      Object key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(cm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n    assertEquals(cm.size(), n);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.entrySet().iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.entrySet().clear();\n    assertEquals(0, cm.size());\n    assertEquals(0, cm.entrySet().size());\n    assertTrue(cm.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testMethods().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testMethods().mjava","sourceNew":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<>(2, false);\n    HashMap<String,Integer> hm = new HashMap<>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n    hm.put(\"baz\", 3);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n\n    CharArraySet cs = cm.keySet();\n    int n=0;\n    for (Object o : cs) {\n      assertTrue(cm.containsKey(o));\n      char[] co = (char[]) o;\n      assertTrue(cm.containsKey(co, 0, co.length));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n    cs.clear();\n    assertEquals(0, cs.size());\n    assertEquals(0, cm.size());\n    try {\n      cs.add(\"test\");\n      fail(\"keySet() allows adding new keys\");\n    } catch (UnsupportedOperationException ue) {\n      // pass\n    }\n    cm.putAll(hm);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n\n    Iterator<Map.Entry<Object,Integer>> iter1 = cm.entrySet().iterator();\n    n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<Object,Integer> entry = iter1.next();\n      Object key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(cm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n    assertEquals(cm.size(), n);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.entrySet().iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.entrySet().clear();\n    assertEquals(0, cm.size());\n    assertEquals(0, cm.entrySet().size());\n    assertTrue(cm.isEmpty());\n  }\n\n","sourceOld":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<>(TEST_VERSION_CURRENT, 2, false);\n    HashMap<String,Integer> hm = new HashMap<>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n    hm.put(\"baz\", 3);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n\n    CharArraySet cs = cm.keySet();\n    int n=0;\n    for (Object o : cs) {\n      assertTrue(cm.containsKey(o));\n      char[] co = (char[]) o;\n      assertTrue(cm.containsKey(co, 0, co.length));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n    cs.clear();\n    assertEquals(0, cs.size());\n    assertEquals(0, cm.size());\n    try {\n      cs.add(\"test\");\n      fail(\"keySet() allows adding new keys\");\n    } catch (UnsupportedOperationException ue) {\n      // pass\n    }\n    cm.putAll(hm);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n\n    Iterator<Map.Entry<Object,Integer>> iter1 = cm.entrySet().iterator();\n    n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<Object,Integer> entry = iter1.next();\n      Object key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(cm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n    assertEquals(cm.size(), n);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.entrySet().iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.entrySet().clear();\n    assertEquals(0, cm.size());\n    assertEquals(0, cm.entrySet().size());\n    assertTrue(cm.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testMethods().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testMethods().mjava","sourceNew":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<>(TEST_VERSION_CURRENT, 2, false);\n    HashMap<String,Integer> hm = new HashMap<>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n    hm.put(\"baz\", 3);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n\n    CharArraySet cs = cm.keySet();\n    int n=0;\n    for (Object o : cs) {\n      assertTrue(cm.containsKey(o));\n      char[] co = (char[]) o;\n      assertTrue(cm.containsKey(co, 0, co.length));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n    cs.clear();\n    assertEquals(0, cs.size());\n    assertEquals(0, cm.size());\n    try {\n      cs.add(\"test\");\n      fail(\"keySet() allows adding new keys\");\n    } catch (UnsupportedOperationException ue) {\n      // pass\n    }\n    cm.putAll(hm);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n\n    Iterator<Map.Entry<Object,Integer>> iter1 = cm.entrySet().iterator();\n    n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<Object,Integer> entry = iter1.next();\n      Object key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(cm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n    assertEquals(cm.size(), n);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.entrySet().iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.entrySet().clear();\n    assertEquals(0, cm.size());\n    assertEquals(0, cm.entrySet().size());\n    assertTrue(cm.isEmpty());\n  }\n\n","sourceOld":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<>(2, false);\n    HashMap<String,Integer> hm = new HashMap<>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n    hm.put(\"baz\", 3);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n\n    CharArraySet cs = cm.keySet();\n    int n=0;\n    for (Object o : cs) {\n      assertTrue(cm.containsKey(o));\n      char[] co = (char[]) o;\n      assertTrue(cm.containsKey(co, 0, co.length));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n    cs.clear();\n    assertEquals(0, cs.size());\n    assertEquals(0, cm.size());\n    try {\n      cs.add(\"test\");\n      fail(\"keySet() allows adding new keys\");\n    } catch (UnsupportedOperationException ue) {\n      // pass\n    }\n    cm.putAll(hm);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n\n    Iterator<Map.Entry<Object,Integer>> iter1 = cm.entrySet().iterator();\n    n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<Object,Integer> entry = iter1.next();\n      Object key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(cm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n    assertEquals(cm.size(), n);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.entrySet().iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.entrySet().clear();\n    assertEquals(0, cm.size());\n    assertEquals(0, cm.entrySet().size());\n    assertTrue(cm.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testMethods().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testMethods().mjava","sourceNew":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<>(2, false);\n    HashMap<String,Integer> hm = new HashMap<>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n    hm.put(\"baz\", 3);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n\n    CharArraySet cs = cm.keySet();\n    int n=0;\n    for (Object o : cs) {\n      assertTrue(cm.containsKey(o));\n      char[] co = (char[]) o;\n      assertTrue(cm.containsKey(co, 0, co.length));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n    cs.clear();\n    assertEquals(0, cs.size());\n    assertEquals(0, cm.size());\n    try {\n      cs.add(\"test\");\n      fail(\"keySet() allows adding new keys\");\n    } catch (UnsupportedOperationException ue) {\n      // pass\n    }\n    cm.putAll(hm);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n\n    Iterator<Map.Entry<Object,Integer>> iter1 = cm.entrySet().iterator();\n    n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<Object,Integer> entry = iter1.next();\n      Object key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(cm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n    assertEquals(cm.size(), n);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.entrySet().iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.entrySet().clear();\n    assertEquals(0, cm.size());\n    assertEquals(0, cm.entrySet().size());\n    assertTrue(cm.isEmpty());\n  }\n\n","sourceOld":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<>(TEST_VERSION_CURRENT, 2, false);\n    HashMap<String,Integer> hm = new HashMap<>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n    hm.put(\"baz\", 3);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n\n    CharArraySet cs = cm.keySet();\n    int n=0;\n    for (Object o : cs) {\n      assertTrue(cm.containsKey(o));\n      char[] co = (char[]) o;\n      assertTrue(cm.containsKey(co, 0, co.length));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n    cs.clear();\n    assertEquals(0, cs.size());\n    assertEquals(0, cm.size());\n    try {\n      cs.add(\"test\");\n      fail(\"keySet() allows adding new keys\");\n    } catch (UnsupportedOperationException ue) {\n      // pass\n    }\n    cm.putAll(hm);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n\n    Iterator<Map.Entry<Object,Integer>> iter1 = cm.entrySet().iterator();\n    n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<Object,Integer> entry = iter1.next();\n      Object key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(cm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n    assertEquals(cm.size(), n);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.entrySet().iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.entrySet().clear();\n    assertEquals(0, cm.size());\n    assertEquals(0, cm.entrySet().size());\n    assertTrue(cm.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testMethods().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testMethods().mjava","sourceNew":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<>(2, false);\n    HashMap<String,Integer> hm = new HashMap<>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n    hm.put(\"baz\", 3);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n\n    CharArraySet cs = cm.keySet();\n    int n=0;\n    for (Object o : cs) {\n      assertTrue(cm.containsKey(o));\n      char[] co = (char[]) o;\n      assertTrue(cm.containsKey(co, 0, co.length));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n    cs.clear();\n    assertEquals(0, cs.size());\n    assertEquals(0, cm.size());\n    // keySet() should not allow adding new keys\n    expectThrows(UnsupportedOperationException.class, () -> {\n      cs.add(\"test\");\n    });\n\n    cm.putAll(hm);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n\n    Iterator<Map.Entry<Object,Integer>> iter1 = cm.entrySet().iterator();\n    n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<Object,Integer> entry = iter1.next();\n      Object key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(cm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n    assertEquals(cm.size(), n);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.entrySet().iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.entrySet().clear();\n    assertEquals(0, cm.size());\n    assertEquals(0, cm.entrySet().size());\n    assertTrue(cm.isEmpty());\n  }\n\n","sourceOld":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<>(2, false);\n    HashMap<String,Integer> hm = new HashMap<>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n    hm.put(\"baz\", 3);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n\n    CharArraySet cs = cm.keySet();\n    int n=0;\n    for (Object o : cs) {\n      assertTrue(cm.containsKey(o));\n      char[] co = (char[]) o;\n      assertTrue(cm.containsKey(co, 0, co.length));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n    cs.clear();\n    assertEquals(0, cs.size());\n    assertEquals(0, cm.size());\n    try {\n      cs.add(\"test\");\n      fail(\"keySet() allows adding new keys\");\n    } catch (UnsupportedOperationException ue) {\n      // pass\n    }\n    cm.putAll(hm);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n\n    Iterator<Map.Entry<Object,Integer>> iter1 = cm.entrySet().iterator();\n    n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<Object,Integer> entry = iter1.next();\n      Object key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(cm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n    assertEquals(cm.size(), n);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.entrySet().iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.entrySet().clear();\n    assertEquals(0, cm.size());\n    assertEquals(0, cm.entrySet().size());\n    assertTrue(cm.isEmpty());\n  }\n\n","bugFix":["3c09067bd60a59f680992d62794689898c0148ac"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArrayMap#testMethods().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testMethods().mjava","sourceNew":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<>(2, false);\n    HashMap<String,Integer> hm = new HashMap<>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n    hm.put(\"baz\", 3);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n\n    CharArraySet cs = cm.keySet();\n    int n=0;\n    for (Object o : cs) {\n      assertTrue(cm.containsKey(o));\n      char[] co = (char[]) o;\n      assertTrue(cm.containsKey(co, 0, co.length));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n    cs.clear();\n    assertEquals(0, cs.size());\n    assertEquals(0, cm.size());\n    // keySet() should not allow adding new keys\n    expectThrows(UnsupportedOperationException.class, () -> {\n      cs.add(\"test\");\n    });\n\n    cm.putAll(hm);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n\n    Iterator<Map.Entry<Object,Integer>> iter1 = cm.entrySet().iterator();\n    n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<Object,Integer> entry = iter1.next();\n      Object key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(cm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n    assertEquals(cm.size(), n);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.entrySet().iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.entrySet().clear();\n    assertEquals(0, cm.size());\n    assertEquals(0, cm.entrySet().size());\n    assertTrue(cm.isEmpty());\n  }\n\n","sourceOld":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<>(2, false);\n    HashMap<String,Integer> hm = new HashMap<>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n    hm.put(\"baz\", 3);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n\n    CharArraySet cs = cm.keySet();\n    int n=0;\n    for (Object o : cs) {\n      assertTrue(cm.containsKey(o));\n      char[] co = (char[]) o;\n      assertTrue(cm.containsKey(co, 0, co.length));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n    cs.clear();\n    assertEquals(0, cs.size());\n    assertEquals(0, cm.size());\n    // keySet() should not allow adding new keys\n    expectThrows(UnsupportedOperationException.class, () -> {\n      cs.add(\"test\");\n    });\n\n    cm.putAll(hm);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n\n    Iterator<Map.Entry<Object,Integer>> iter1 = cm.entrySet().iterator();\n    n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<Object,Integer> entry = iter1.next();\n      Object key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(cm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n    assertEquals(cm.size(), n);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.entrySet().iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.entrySet().clear();\n    assertEquals(0, cm.size());\n    assertEquals(0, cm.entrySet().size());\n    assertTrue(cm.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArrayMap#testMethods().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testMethods().mjava","sourceNew":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<>(2, false);\n    HashMap<String,Integer> hm = new HashMap<>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n    hm.put(\"baz\", 3);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n\n    CharArraySet cs = cm.keySet();\n    int n=0;\n    for (Object o : cs) {\n      assertTrue(cm.containsKey(o));\n      char[] co = (char[]) o;\n      assertTrue(cm.containsKey(co, 0, co.length));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n    cs.clear();\n    assertEquals(0, cs.size());\n    assertEquals(0, cm.size());\n    // keySet() should not allow adding new keys\n    expectThrows(UnsupportedOperationException.class, () -> {\n      cs.add(\"test\");\n    });\n\n    cm.putAll(hm);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n\n    Iterator<Map.Entry<Object,Integer>> iter1 = cm.entrySet().iterator();\n    n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<Object,Integer> entry = iter1.next();\n      Object key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(cm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n    assertEquals(cm.size(), n);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.entrySet().iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.entrySet().clear();\n    assertEquals(0, cm.size());\n    assertEquals(0, cm.entrySet().size());\n    assertTrue(cm.isEmpty());\n  }\n\n","sourceOld":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<>(2, false);\n    HashMap<String,Integer> hm = new HashMap<>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n    hm.put(\"baz\", 3);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n\n    CharArraySet cs = cm.keySet();\n    int n=0;\n    for (Object o : cs) {\n      assertTrue(cm.containsKey(o));\n      char[] co = (char[]) o;\n      assertTrue(cm.containsKey(co, 0, co.length));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n    cs.clear();\n    assertEquals(0, cs.size());\n    assertEquals(0, cm.size());\n    // keySet() should not allow adding new keys\n    expectThrows(UnsupportedOperationException.class, () -> {\n      cs.add(\"test\");\n    });\n\n    cm.putAll(hm);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n\n    Iterator<Map.Entry<Object,Integer>> iter1 = cm.entrySet().iterator();\n    n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<Object,Integer> entry = iter1.next();\n      Object key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(cm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n    assertEquals(cm.size(), n);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.entrySet().iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.entrySet().clear();\n    assertEquals(0, cm.size());\n    assertEquals(0, cm.entrySet().size());\n    assertTrue(cm.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["05fe562aa248790944d43cdd478f512572835ba0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["05fe562aa248790944d43cdd478f512572835ba0","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["05fe562aa248790944d43cdd478f512572835ba0"],"05fe562aa248790944d43cdd478f512572835ba0":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}