{"path":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getIndexReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getIndexReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getIndexReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getIndexReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getIndexReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getIndexReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59fc0e55b44c555c39d950def9414b5596c6ebe2","date":1327620010,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(new SlowMultiReaderWrapper(req.getSearcher().getIndexReader()));\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getIndexReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78a55f24d9b493c2a1cecf79f1d78279062b545b","date":1327688152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(new SlowMultiReaderWrapper(req.getSearcher().getIndexReader()));\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getIndexReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(new SlowMultiReaderWrapper(req.getSearcher().getIndexReader()));\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getIndexReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d207426bd26fa5c1014e26d21d87603aea68b7","date":1327944562,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getAtomicReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(new SlowMultiReaderWrapper(req.getSearcher().getIndexReader()));\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getAtomicReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(new SlowMultiReaderWrapper(req.getSearcher().getIndexReader()));\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getAtomicReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\")) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getAtomicReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getAtomicReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\")) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getAtomicReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\")) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getAtomicReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\")) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getAtomicReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\"), true) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5275a994b4fc707fafce0408625bd3456edc28a4","date":1400004510,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    SortedSetDocValues dv = DocValues.getSortedSet(req.getSearcher().getAtomicReader(), proto.field());\n\n    assertEquals(size, dv.getValueCount());\n\n    TermsEnum te = dv.termsEnum();\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\")) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getAtomicReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\")) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    SortedSetDocValues dv = DocValues.getSortedSet(req.getSearcher().getAtomicReader(), proto.field());\n\n    assertEquals(size, dv.getValueCount());\n\n    TermsEnum te = dv.termsEnum();\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\")) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getAtomicReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\")) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    SortedSetDocValues dv = DocValues.getSortedSet(req.getSearcher().getAtomicReader(), proto.field());\n\n    assertEquals(size, dv.getValueCount());\n\n    TermsEnum te = dv.termsEnum();\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\")) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    UnInvertedField uif = new UnInvertedField(proto.field(), req.getSearcher());\n\n    assertEquals(size, uif.getNumTerms());\n\n    TermsEnum te = uif.getOrdTermsEnum(req.getSearcher().getAtomicReader());\n    assertEquals(size == 0, te == null);\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\")) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    SortedSetDocValues dv = DocValues.getSortedSet(req.getSearcher().getLeafReader(), proto.field());\n\n    assertEquals(size, dv.getValueCount());\n\n    TermsEnum te = dv.termsEnum();\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\")) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    SortedSetDocValues dv = DocValues.getSortedSet(req.getSearcher().getAtomicReader(), proto.field());\n\n    assertEquals(size, dv.getValueCount());\n\n    TermsEnum te = dv.termsEnum();\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\")) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e07c409cff8701e4dc3d45934b021a949a5a8822","date":1475694629,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    SortedSetDocValues dv = DocValues.getSortedSet(req.getSearcher().getSlowAtomicReader(), proto.field());\n\n    assertEquals(size, dv.getValueCount());\n\n    TermsEnum te = dv.termsEnum();\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\")) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    SortedSetDocValues dv = DocValues.getSortedSet(req.getSearcher().getLeafReader(), proto.field());\n\n    assertEquals(size, dv.getValueCount());\n\n    TermsEnum te = dv.termsEnum();\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\")) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#doTermEnum(int).mjava","sourceNew":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    SortedSetDocValues dv = DocValues.getSortedSet(req.getSearcher().getSlowAtomicReader(), proto.field());\n\n    assertEquals(size, dv.getValueCount());\n\n    TermsEnum te = dv.termsEnum();\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\")) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","sourceOld":"  void doTermEnum(int size) throws Exception {\n    //System.out.println(\"doTermEnum size=\" + size);\n    close();\n    createIndex(size);\n    req = lrf.makeRequest(\"q\",\"*:*\");\n\n    SortedSetDocValues dv = DocValues.getSortedSet(req.getSearcher().getLeafReader(), proto.field());\n\n    assertEquals(size, dv.getValueCount());\n\n    TermsEnum te = dv.termsEnum();\n\n    Random r = new Random(size);\n    // test seeking by term string\n    for (int i=0; i<size*2+10; i++) {\n      int rnum = r.nextInt(size+2);\n      String s = t(rnum);\n      //System.out.println(\"s=\" + s);\n      final BytesRef br;\n      if (te == null) {\n        br = null;\n      } else {\n        TermsEnum.SeekStatus status = te.seekCeil(new BytesRef(s));\n        if (status == TermsEnum.SeekStatus.END) {\n          br = null;\n        } else {\n          br = te.term();\n        }\n      }\n      assertEquals(br != null, rnum < size);\n      if (rnum < size) {\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n\n    // test seeking before term\n    if (size>0) {\n      assertEquals(size>0, te.seekCeil(new BytesRef(\"000\")) != TermsEnum.SeekStatus.END);\n      assertEquals(0, te.ord());\n      assertEquals(t(0), te.term().utf8ToString());\n    }\n\n    if (size>0) {\n      // test seeking by term number\n      for (int i=0; i<size*2+10; i++) {\n        int rnum = r.nextInt(size);\n        String s = t(rnum);\n        te.seekExact((long) rnum);\n        BytesRef br = te.term();\n        assertNotNull(br);\n        assertEquals(rnum, (int) te.ord());\n        assertEquals(s, te.term().utf8ToString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"78a55f24d9b493c2a1cecf79f1d78279062b545b":["c26f00b574427b55127e869b935845554afde1fa","59fc0e55b44c555c39d950def9414b5596c6ebe2"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["5cab9a86bd67202d20b6adc463008c8e982b070a","19275ba31e621f6da1b83bf13af75233876fd3d4"],"5275a994b4fc707fafce0408625bd3456edc28a4":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["c26f00b574427b55127e869b935845554afde1fa","59fc0e55b44c555c39d950def9414b5596c6ebe2"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"e07c409cff8701e4dc3d45934b021a949a5a8822":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"56572ec06f1407c066d6b7399413178b33176cd8":["19275ba31e621f6da1b83bf13af75233876fd3d4","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["59fc0e55b44c555c39d950def9414b5596c6ebe2","96d207426bd26fa5c1014e26d21d87603aea68b7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c9fb5f46e264daf5ba3860defe623a89d202dd87","e07c409cff8701e4dc3d45934b021a949a5a8822"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["19275ba31e621f6da1b83bf13af75233876fd3d4","5275a994b4fc707fafce0408625bd3456edc28a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59fc0e55b44c555c39d950def9414b5596c6ebe2":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e07c409cff8701e4dc3d45934b021a949a5a8822"]},"commit2Childs":{"78a55f24d9b493c2a1cecf79f1d78279062b545b":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"5275a994b4fc707fafce0408625bd3456edc28a4":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"c26f00b574427b55127e869b935845554afde1fa":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","59fc0e55b44c555c39d950def9414b5596c6ebe2"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["96d207426bd26fa5c1014e26d21d87603aea68b7"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","5275a994b4fc707fafce0408625bd3456edc28a4","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"e07c409cff8701e4dc3d45934b021a949a5a8822":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["e07c409cff8701e4dc3d45934b021a949a5a8822","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"59fc0e55b44c555c39d950def9414b5596c6ebe2":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","5cab9a86bd67202d20b6adc463008c8e982b070a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["78a55f24d9b493c2a1cecf79f1d78279062b545b","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}