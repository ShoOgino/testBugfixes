{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#reusableTokenStream(String,Reader).mjava","commits":[{"id":"18359c8e12d55f66c27cfe7babe86283f06a6aa5","date":1250426225,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a (possibly reused) TokenStream which tokenizes all the text \n   * in the provided Reader.\n   *\n   * @return A TokenStream built from a StandardTokenizer filtered with\n   *         StandardFilter, StopFilter, DutchStemFilter\n   */\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    \n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(reader);\n      streams.result = new StandardFilter(streams.source);\n      streams.result = new StopFilter(streams.result, stoptable);\n      streams.result = new DutchStemFilter(streams.result, excltable);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45b06c3ff8a4d9d3d751dd311e51c59303c2719c","date":1250600126,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link StopFilter}, \n   *   and {@link DutchStemFilter}\n   */\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    \n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(reader);\n      streams.result = new StandardFilter(streams.source);\n      streams.result = new StopFilter(streams.result, stoptable);\n      streams.result = new DutchStemFilter(streams.result, excltable);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","sourceOld":"  /**\n   * Returns a (possibly reused) TokenStream which tokenizes all the text \n   * in the provided Reader.\n   *\n   * @return A TokenStream built from a StandardTokenizer filtered with\n   *         StandardFilter, StopFilter, DutchStemFilter\n   */\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    \n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(reader);\n      streams.result = new StandardFilter(streams.source);\n      streams.result = new StopFilter(streams.result, stoptable);\n      streams.result = new DutchStemFilter(streams.result, excltable);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d162e44966cfe4ab497a76295986daa4665ffc9","date":1250682991,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link StopFilter}, \n   *   and {@link DutchStemFilter}\n   */\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    \n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(reader);\n      streams.result = new StandardFilter(streams.source);\n      streams.result = new StopFilter(streams.result, stoptable);\n      streams.result = new DutchStemFilter(streams.result, excltable, stemdict);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","sourceOld":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link StopFilter}, \n   *   and {@link DutchStemFilter}\n   */\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    \n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(reader);\n      streams.result = new StandardFilter(streams.source);\n      streams.result = new StopFilter(streams.result, stoptable);\n      streams.result = new DutchStemFilter(streams.result, excltable);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link StopFilter}, \n   *   and {@link DutchStemFilter}\n   */\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    \n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(reader);\n      streams.result = new StandardFilter(streams.source);\n      streams.result = new StopFilter(false, streams.result, stoptable);\n      streams.result = new DutchStemFilter(streams.result, excltable, stemdict);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","sourceOld":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link StopFilter}, \n   *   and {@link DutchStemFilter}\n   */\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    \n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(reader);\n      streams.result = new StandardFilter(streams.source);\n      streams.result = new StopFilter(streams.result, stoptable);\n      streams.result = new DutchStemFilter(streams.result, excltable, stemdict);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link StopFilter}, \n   *   and {@link DutchStemFilter}\n   */\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    \n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(matchVersion, reader);\n      streams.result = new StandardFilter(streams.source);\n      streams.result = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                                      streams.result, stoptable);\n      streams.result = new DutchStemFilter(streams.result, excltable, stemdict);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","sourceOld":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link StopFilter}, \n   *   and {@link DutchStemFilter}\n   */\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    \n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(reader);\n      streams.result = new StandardFilter(streams.source);\n      streams.result = new StopFilter(false, streams.result, stoptable);\n      streams.result = new DutchStemFilter(streams.result, excltable, stemdict);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link StopFilter}, \n   *   and {@link DutchStemFilter}\n   */\n  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    \n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(matchVersion, reader);\n      streams.result = new StandardFilter(streams.source);\n      streams.result = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                                      streams.result, stoptable);\n      streams.result = new DutchStemFilter(streams.result, excltable, stemdict);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","sourceOld":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link StopFilter}, \n   *   and {@link DutchStemFilter}\n   */\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    \n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(matchVersion, reader);\n      streams.result = new StandardFilter(streams.source);\n      streams.result = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                                      streams.result, stoptable);\n      streams.result = new DutchStemFilter(streams.result, excltable, stemdict);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f6c85ffa816c86be877aa7a5029a5daa1336e7f","date":1259617761,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link StopFilter}, \n   *   and {@link DutchStemFilter}\n   */\n  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    \n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(matchVersion, reader);\n      streams.result = new StandardFilter(streams.source);\n      streams.result = new StopFilter(matchVersion, streams.result, stoptable);\n      streams.result = new DutchStemFilter(streams.result, excltable, stemdict);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","sourceOld":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link StopFilter}, \n   *   and {@link DutchStemFilter}\n   */\n  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    \n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(matchVersion, reader);\n      streams.result = new StandardFilter(streams.source);\n      streams.result = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                                      streams.result, stoptable);\n      streams.result = new DutchStemFilter(streams.result, excltable, stemdict);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de8f86ed4fa7f4b6970b25037bcca3d2732236b9","date":1260365552,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link StopFilter}, \n   *   and {@link DutchStemFilter}\n   */\n  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(matchVersion, reader);\n      streams.result = new StandardFilter(streams.source);\n      streams.result = new StopFilter(matchVersion, streams.result, stoptable);\n      streams.result = new DutchStemFilter(streams.result, excltable, stemdict);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","sourceOld":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link StopFilter}, \n   *   and {@link DutchStemFilter}\n   */\n  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    \n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(matchVersion, reader);\n      streams.result = new StandardFilter(streams.source);\n      streams.result = new StopFilter(matchVersion, streams.result, stoptable);\n      streams.result = new DutchStemFilter(streams.result, excltable, stemdict);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9fc748b8fc4097ccc222bdf2948cc2d20770c54","date":1264591145,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#createComponents(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/DutchAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link StopFilter}, \n   *   and {@link DutchStemFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader aReader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, aReader);\n    TokenStream result = new StandardFilter(source);\n    result = new StopFilter(matchVersion, result, stoptable);\n    if (!excltable.isEmpty())\n      result = new KeywordMarkerTokenFilter(result, excltable);\n    result = new DutchStemFilter(result, stemdict);\n    return new TokenStreamComponents(source, result);\n  }\n\n","sourceOld":"  /**\n   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the \n   * text in the provided {@link Reader}.\n   *\n   * @return A {@link TokenStream} built from a {@link StandardTokenizer}\n   *   filtered with {@link StandardFilter}, {@link StopFilter}, \n   *   and {@link DutchStemFilter}\n   */\n  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(matchVersion, reader);\n      streams.result = new StandardFilter(streams.source);\n      streams.result = new StopFilter(matchVersion, streams.result, stoptable);\n      streams.result = new DutchStemFilter(streams.result, excltable, stemdict);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","bugFix":null,"bugIntro":["c2877c077c0dc229ee9871dc196b2a62442df599"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4d162e44966cfe4ab497a76295986daa4665ffc9":["45b06c3ff8a4d9d3d751dd311e51c59303c2719c"],"b9fc748b8fc4097ccc222bdf2948cc2d20770c54":["de8f86ed4fa7f4b6970b25037bcca3d2732236b9"],"18359c8e12d55f66c27cfe7babe86283f06a6aa5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["ba1116b3450a9c1642c89445d131b37344055245"],"de8f86ed4fa7f4b6970b25037bcca3d2732236b9":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["4d162e44966cfe4ab497a76295986daa4665ffc9"],"45b06c3ff8a4d9d3d751dd311e51c59303c2719c":["18359c8e12d55f66c27cfe7babe86283f06a6aa5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b9fc748b8fc4097ccc222bdf2948cc2d20770c54"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"ba1116b3450a9c1642c89445d131b37344055245":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"]},"commit2Childs":{"4d162e44966cfe4ab497a76295986daa4665ffc9":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"b9fc748b8fc4097ccc222bdf2948cc2d20770c54":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"18359c8e12d55f66c27cfe7babe86283f06a6aa5":["45b06c3ff8a4d9d3d751dd311e51c59303c2719c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["18359c8e12d55f66c27cfe7babe86283f06a6aa5"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"45b06c3ff8a4d9d3d751dd311e51c59303c2719c":["4d162e44966cfe4ab497a76295986daa4665ffc9"],"de8f86ed4fa7f4b6970b25037bcca3d2732236b9":["b9fc748b8fc4097ccc222bdf2948cc2d20770c54"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["ba1116b3450a9c1642c89445d131b37344055245"],"ba1116b3450a9c1642c89445d131b37344055245":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["de8f86ed4fa7f4b6970b25037bcca3d2732236b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}