{"path":"solr/core/src/test/org/apache/solr/util/TestNumberUtils#testConverters().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestNumberUtils#testConverters().mjava","pathOld":"solr/src/test/org/apache/solr/util/TestNumberUtils#testConverters().mjava","sourceNew":"  public void testConverters()\n  {\n    int iter=1000;\n    int arrsz=100000;\n    int num=12345;\n\n    // INTEGERS\n    List<Converter> converters = new ArrayList<Converter>();\n    converters.add( new Int2Int() );\n    converters.add( new SortInt() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    \n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getSpecial();\n        Comparable n2 = getSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // LONG\n    converters.clear();\n    converters.add( new SortLong() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getLongSpecial();\n        Comparable n2 = getLongSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // FLOAT\n    converters.clear();\n    converters.add( new Float2Float() );\n    converters.add( new SortFloat() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getFloatSpecial();\n        Comparable n2 = getFloatSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // DOUBLE\n    converters.clear();\n    converters.add( new SortDouble() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getDoubleSpecial();\n        Comparable n2 = getDoubleSpecial();\n        test( n1, n2, c );\n      }\n    }\n  }\n\n","sourceOld":"  public void testConverters()\n  {\n    int iter=1000;\n    int arrsz=100000;\n    int num=12345;\n\n    // INTEGERS\n    List<Converter> converters = new ArrayList<Converter>();\n    converters.add( new Int2Int() );\n    converters.add( new SortInt() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    \n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getSpecial();\n        Comparable n2 = getSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // LONG\n    converters.clear();\n    converters.add( new SortLong() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getLongSpecial();\n        Comparable n2 = getLongSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // FLOAT\n    converters.clear();\n    converters.add( new Float2Float() );\n    converters.add( new SortFloat() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getFloatSpecial();\n        Comparable n2 = getFloatSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // DOUBLE\n    converters.clear();\n    converters.add( new SortDouble() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getDoubleSpecial();\n        Comparable n2 = getDoubleSpecial();\n        test( n1, n2, c );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestNumberUtils#testConverters().mjava","pathOld":"solr/src/test/org/apache/solr/util/TestNumberUtils#testConverters().mjava","sourceNew":"  public void testConverters()\n  {\n    int iter=1000;\n    int arrsz=100000;\n    int num=12345;\n\n    // INTEGERS\n    List<Converter> converters = new ArrayList<Converter>();\n    converters.add( new Int2Int() );\n    converters.add( new SortInt() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    \n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getSpecial();\n        Comparable n2 = getSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // LONG\n    converters.clear();\n    converters.add( new SortLong() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getLongSpecial();\n        Comparable n2 = getLongSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // FLOAT\n    converters.clear();\n    converters.add( new Float2Float() );\n    converters.add( new SortFloat() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getFloatSpecial();\n        Comparable n2 = getFloatSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // DOUBLE\n    converters.clear();\n    converters.add( new SortDouble() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getDoubleSpecial();\n        Comparable n2 = getDoubleSpecial();\n        test( n1, n2, c );\n      }\n    }\n  }\n\n","sourceOld":"  public void testConverters()\n  {\n    int iter=1000;\n    int arrsz=100000;\n    int num=12345;\n\n    // INTEGERS\n    List<Converter> converters = new ArrayList<Converter>();\n    converters.add( new Int2Int() );\n    converters.add( new SortInt() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    \n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getSpecial();\n        Comparable n2 = getSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // LONG\n    converters.clear();\n    converters.add( new SortLong() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getLongSpecial();\n        Comparable n2 = getLongSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // FLOAT\n    converters.clear();\n    converters.add( new Float2Float() );\n    converters.add( new SortFloat() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getFloatSpecial();\n        Comparable n2 = getFloatSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // DOUBLE\n    converters.clear();\n    converters.add( new SortDouble() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getDoubleSpecial();\n        Comparable n2 = getDoubleSpecial();\n        test( n1, n2, c );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestNumberUtils#testConverters().mjava","pathOld":"solr/src/test/org/apache/solr/util/TestNumberUtils#testConverters().mjava","sourceNew":"  public void testConverters()\n  {\n    int iter=1000;\n    int arrsz=100000;\n    int num=12345;\n\n    // INTEGERS\n    List<Converter> converters = new ArrayList<Converter>();\n    converters.add( new Int2Int() );\n    converters.add( new SortInt() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    \n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getSpecial();\n        Comparable n2 = getSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // LONG\n    converters.clear();\n    converters.add( new SortLong() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getLongSpecial();\n        Comparable n2 = getLongSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // FLOAT\n    converters.clear();\n    converters.add( new Float2Float() );\n    converters.add( new SortFloat() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getFloatSpecial();\n        Comparable n2 = getFloatSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // DOUBLE\n    converters.clear();\n    converters.add( new SortDouble() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getDoubleSpecial();\n        Comparable n2 = getDoubleSpecial();\n        test( n1, n2, c );\n      }\n    }\n  }\n\n","sourceOld":"  public void testConverters()\n  {\n    int iter=1000;\n    int arrsz=100000;\n    int num=12345;\n\n    // INTEGERS\n    List<Converter> converters = new ArrayList<Converter>();\n    converters.add( new Int2Int() );\n    converters.add( new SortInt() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    \n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getSpecial();\n        Comparable n2 = getSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // LONG\n    converters.clear();\n    converters.add( new SortLong() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getLongSpecial();\n        Comparable n2 = getLongSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // FLOAT\n    converters.clear();\n    converters.add( new Float2Float() );\n    converters.add( new SortFloat() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getFloatSpecial();\n        Comparable n2 = getFloatSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // DOUBLE\n    converters.clear();\n    converters.add( new SortDouble() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getDoubleSpecial();\n        Comparable n2 = getDoubleSpecial();\n        test( n1, n2, c );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4916a60d95bb3cb5d443ebf7b0207efff56fc4aa","date":1347957056,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestNumberUtils#testConverters().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestNumberUtils#testConverters().mjava","sourceNew":"  public void testConverters()\n  {\n    int iter=1000;\n\n    // INTEGERS\n    List<Converter> converters = new ArrayList<Converter>();\n    converters.add( new Int2Int() );\n    converters.add( new SortInt() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    \n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        test(getSpecial(), getSpecial(), c );\n      }\n    }\n\n    // LONG\n    converters.clear();\n    converters.add( new SortLong() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        test(getLongSpecial(), getLongSpecial(), c );\n      }\n    }\n\n    // FLOAT\n    converters.clear();\n    converters.add( new Float2Float() );\n    converters.add( new SortFloat() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        test(getFloatSpecial(), getFloatSpecial(), c );\n      }\n    }\n\n    // DOUBLE\n    converters.clear();\n    converters.add( new SortDouble() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        test(getDoubleSpecial(), getDoubleSpecial(), c );\n      }\n    }\n  }\n\n","sourceOld":"  public void testConverters()\n  {\n    int iter=1000;\n    int arrsz=100000;\n    int num=12345;\n\n    // INTEGERS\n    List<Converter> converters = new ArrayList<Converter>();\n    converters.add( new Int2Int() );\n    converters.add( new SortInt() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    \n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getSpecial();\n        Comparable n2 = getSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // LONG\n    converters.clear();\n    converters.add( new SortLong() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getLongSpecial();\n        Comparable n2 = getLongSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // FLOAT\n    converters.clear();\n    converters.add( new Float2Float() );\n    converters.add( new SortFloat() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getFloatSpecial();\n        Comparable n2 = getFloatSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // DOUBLE\n    converters.clear();\n    converters.add( new SortDouble() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getDoubleSpecial();\n        Comparable n2 = getDoubleSpecial();\n        test( n1, n2, c );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestNumberUtils#testConverters().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestNumberUtils#testConverters().mjava","sourceNew":"  public void testConverters()\n  {\n    int iter=1000;\n\n    // INTEGERS\n    List<Converter> converters = new ArrayList<>();\n    converters.add( new Int2Int() );\n    converters.add( new SortInt() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    \n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        test(getSpecial(), getSpecial(), c );\n      }\n    }\n\n    // LONG\n    converters.clear();\n    converters.add( new SortLong() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        test(getLongSpecial(), getLongSpecial(), c );\n      }\n    }\n\n    // FLOAT\n    converters.clear();\n    converters.add( new Float2Float() );\n    converters.add( new SortFloat() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        test(getFloatSpecial(), getFloatSpecial(), c );\n      }\n    }\n\n    // DOUBLE\n    converters.clear();\n    converters.add( new SortDouble() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        test(getDoubleSpecial(), getDoubleSpecial(), c );\n      }\n    }\n  }\n\n","sourceOld":"  public void testConverters()\n  {\n    int iter=1000;\n\n    // INTEGERS\n    List<Converter> converters = new ArrayList<Converter>();\n    converters.add( new Int2Int() );\n    converters.add( new SortInt() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    \n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        test(getSpecial(), getSpecial(), c );\n      }\n    }\n\n    // LONG\n    converters.clear();\n    converters.add( new SortLong() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        test(getLongSpecial(), getLongSpecial(), c );\n      }\n    }\n\n    // FLOAT\n    converters.clear();\n    converters.add( new Float2Float() );\n    converters.add( new SortFloat() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        test(getFloatSpecial(), getFloatSpecial(), c );\n      }\n    }\n\n    // DOUBLE\n    converters.clear();\n    converters.add( new SortDouble() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        test(getDoubleSpecial(), getDoubleSpecial(), c );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2106271e380c198349e0f6eac0395bb462913fab","date":1397072894,"type":4,"author":"Steven Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/util/TestNumberUtils#testConverters().mjava","sourceNew":null,"sourceOld":"  public void testConverters()\n  {\n    int iter=1000;\n\n    // INTEGERS\n    List<Converter> converters = new ArrayList<>();\n    converters.add( new Int2Int() );\n    converters.add( new SortInt() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    \n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        test(getSpecial(), getSpecial(), c );\n      }\n    }\n\n    // LONG\n    converters.clear();\n    converters.add( new SortLong() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        test(getLongSpecial(), getLongSpecial(), c );\n      }\n    }\n\n    // FLOAT\n    converters.clear();\n    converters.add( new Float2Float() );\n    converters.add( new SortFloat() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        test(getFloatSpecial(), getFloatSpecial(), c );\n      }\n    }\n\n    // DOUBLE\n    converters.clear();\n    converters.add( new SortDouble() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        test(getDoubleSpecial(), getDoubleSpecial(), c );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4916a60d95bb3cb5d443ebf7b0207efff56fc4aa"],"4916a60d95bb3cb5d443ebf7b0207efff56fc4aa":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2106271e380c198349e0f6eac0395bb462913fab":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2106271e380c198349e0f6eac0395bb462913fab"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2106271e380c198349e0f6eac0395bb462913fab"],"4916a60d95bb3cb5d443ebf7b0207efff56fc4aa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["4916a60d95bb3cb5d443ebf7b0207efff56fc4aa"],"2106271e380c198349e0f6eac0395bb462913fab":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}