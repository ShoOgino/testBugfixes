{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#loadParams(SolrParams).mjava","commits":[{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#loadParams(SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#loadParams(Map).mjava","sourceNew":"  private SolrParams loadParams(SolrParams paramsIn) throws IOException {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams(paramsIn);\n    if (params.get(\"partitionKeys\") != null) {\n      if(!params.get(\"partitionKeys\").equals(\"none\")) {\n        String partitionFilter = getPartitionFilter();\n        solrParams.add(\"fq\", partitionFilter);\n      }\n    } else {\n      if(numWorkers > 1) {\n        throw new IOException(\"When numWorkers > 1 partitionKeys must be set. Set partitionKeys=none to send the entire stream to each worker.\");\n      }\n    }\n\n    if(checkpoint > 0) {\n      solrParams.add(\"fq\", \"{!frange cost=100 incl=false l=\"+checkpoint+\"}_version_\");\n    }\n\n    return solrParams;\n  }\n\n","sourceOld":"  private SolrParams loadParams(Map params) throws IOException {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    if(params.containsKey(\"partitionKeys\")) {\n      if(!params.get(\"partitionKeys\").equals(\"none\")) {\n        String partitionFilter = getPartitionFilter();\n        solrParams.add(\"fq\", partitionFilter);\n      }\n    } else {\n      if(numWorkers > 1) {\n        throw new IOException(\"When numWorkers > 1 partitionKeys must be set. Set partitionKeys=none to send the entire stream to each worker.\");\n      }\n    }\n\n    if(checkpoint > 0) {\n      solrParams.add(\"fq\", \"{!frange cost=100 incl=false l=\"+checkpoint+\"}_version_\");\n    }\n\n    Iterator<Map.Entry> it = params.entrySet().iterator();\n    while(it.hasNext()) {\n      Map.Entry entry = it.next();\n      solrParams.add((String)entry.getKey(), entry.getValue().toString());\n    }\n\n    return solrParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#loadParams(SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#loadParams(Map).mjava","sourceNew":"  private SolrParams loadParams(SolrParams paramsIn) throws IOException {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams(paramsIn);\n    if (params.get(\"partitionKeys\") != null) {\n      if(!params.get(\"partitionKeys\").equals(\"none\")) {\n        String partitionFilter = getPartitionFilter();\n        solrParams.add(\"fq\", partitionFilter);\n      }\n    } else {\n      if(numWorkers > 1) {\n        throw new IOException(\"When numWorkers > 1 partitionKeys must be set. Set partitionKeys=none to send the entire stream to each worker.\");\n      }\n    }\n\n    if(checkpoint > 0) {\n      solrParams.add(\"fq\", \"{!frange cost=100 incl=false l=\"+checkpoint+\"}_version_\");\n    }\n\n    return solrParams;\n  }\n\n","sourceOld":"  private SolrParams loadParams(Map params) throws IOException {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    if(params.containsKey(\"partitionKeys\")) {\n      if(!params.get(\"partitionKeys\").equals(\"none\")) {\n        String partitionFilter = getPartitionFilter();\n        solrParams.add(\"fq\", partitionFilter);\n      }\n    } else {\n      if(numWorkers > 1) {\n        throw new IOException(\"When numWorkers > 1 partitionKeys must be set. Set partitionKeys=none to send the entire stream to each worker.\");\n      }\n    }\n\n    if(checkpoint > 0) {\n      solrParams.add(\"fq\", \"{!frange cost=100 incl=false l=\"+checkpoint+\"}_version_\");\n    }\n\n    Iterator<Map.Entry> it = params.entrySet().iterator();\n    while(it.hasNext()) {\n      Map.Entry entry = it.next();\n      solrParams.add((String)entry.getKey(), entry.getValue().toString());\n    }\n\n    return solrParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#loadParams(SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#loadParams(Map).mjava","sourceNew":"  private SolrParams loadParams(SolrParams paramsIn) throws IOException {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams(paramsIn);\n    if (params.get(\"partitionKeys\") != null) {\n      if(!params.get(\"partitionKeys\").equals(\"none\")) {\n        String partitionFilter = getPartitionFilter();\n        solrParams.add(\"fq\", partitionFilter);\n      }\n    } else {\n      if(numWorkers > 1) {\n        throw new IOException(\"When numWorkers > 1 partitionKeys must be set. Set partitionKeys=none to send the entire stream to each worker.\");\n      }\n    }\n\n    if(checkpoint > 0) {\n      solrParams.add(\"fq\", \"{!frange cost=100 incl=false l=\"+checkpoint+\"}_version_\");\n    }\n\n    return solrParams;\n  }\n\n","sourceOld":"  private SolrParams loadParams(Map params) throws IOException {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    if(params.containsKey(\"partitionKeys\")) {\n      if(!params.get(\"partitionKeys\").equals(\"none\")) {\n        String partitionFilter = getPartitionFilter();\n        solrParams.add(\"fq\", partitionFilter);\n      }\n    } else {\n      if(numWorkers > 1) {\n        throw new IOException(\"When numWorkers > 1 partitionKeys must be set. Set partitionKeys=none to send the entire stream to each worker.\");\n      }\n    }\n\n    if(checkpoint > 0) {\n      solrParams.add(\"fq\", \"{!frange cost=100 incl=false l=\"+checkpoint+\"}_version_\");\n    }\n\n    Iterator<Map.Entry> it = params.entrySet().iterator();\n    while(it.hasNext()) {\n      Map.Entry entry = it.next();\n      solrParams.add((String)entry.getKey(), entry.getValue().toString());\n    }\n\n    return solrParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#loadParams(SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  private SolrParams loadParams(SolrParams paramsIn) throws IOException {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams(paramsIn);\n    if (params.get(\"partitionKeys\") != null) {\n      if(!params.get(\"partitionKeys\").equals(\"none\")) {\n        String partitionFilter = getPartitionFilter();\n        solrParams.add(\"fq\", partitionFilter);\n      }\n    } else {\n      if(numWorkers > 1) {\n        throw new IOException(\"When numWorkers > 1 partitionKeys must be set. Set partitionKeys=none to send the entire stream to each worker.\");\n      }\n    }\n\n    if(checkpoint > 0) {\n      solrParams.add(\"fq\", \"{!frange cost=100 incl=false l=\"+checkpoint+\"}_version_\");\n    }\n\n    return solrParams;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85b7d92fa7b7dac117c267e0ad18c1f62df5a15c","date":1534705178,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#loadParams(SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#loadParams(SolrParams).mjava","sourceNew":"  private SolrParams loadParams(SolrParams paramsIn) throws IOException {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams(paramsIn);\n    if (params.get(\"partitionKeys\") != null) {\n      if(!params.get(\"partitionKeys\").equals(\"none\") && numWorkers > 1) {\n        String partitionFilter = getPartitionFilter();\n        solrParams.add(\"fq\", partitionFilter);\n      }\n    } else if(numWorkers > 1) {\n        throw new IOException(\"When numWorkers > 1 partitionKeys must be set. Set partitionKeys=none to send the entire stream to each worker.\");\n    }\n\n    if(checkpoint > 0) {\n      solrParams.add(\"fq\", \"{!frange cost=100 incl=false l=\"+checkpoint+\"}_version_\");\n    }\n\n    return solrParams;\n  }\n\n","sourceOld":"  private SolrParams loadParams(SolrParams paramsIn) throws IOException {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams(paramsIn);\n    if (params.get(\"partitionKeys\") != null) {\n      if(!params.get(\"partitionKeys\").equals(\"none\")) {\n        String partitionFilter = getPartitionFilter();\n        solrParams.add(\"fq\", partitionFilter);\n      }\n    } else {\n      if(numWorkers > 1) {\n        throw new IOException(\"When numWorkers > 1 partitionKeys must be set. Set partitionKeys=none to send the entire stream to each worker.\");\n      }\n    }\n\n    if(checkpoint > 0) {\n      solrParams.add(\"fq\", \"{!frange cost=100 incl=false l=\"+checkpoint+\"}_version_\");\n    }\n\n    return solrParams;\n  }\n\n","bugFix":["826d15444ddf61716dc768c229cd54b2c2ccce1c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d9c44f68e848648da304352cf7c045c33148f4","date":1557331987,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#loadParams(SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#loadParams(SolrParams).mjava","sourceNew":"  private ModifiableSolrParams loadParams(SolrParams paramsIn) throws IOException {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams(paramsIn);\n    if (params.get(\"partitionKeys\") != null) {\n      if(!params.get(\"partitionKeys\").equals(\"none\") && numWorkers > 1) {\n        String partitionFilter = getPartitionFilter();\n        solrParams.add(\"fq\", partitionFilter);\n      }\n    } else if(numWorkers > 1) {\n        throw new IOException(\"When numWorkers > 1 partitionKeys must be set. Set partitionKeys=none to send the entire stream to each worker.\");\n    }\n\n    if(checkpoint > 0) {\n      solrParams.add(\"fq\", \"{!frange cost=100 incl=false l=\"+checkpoint+\"}_version_\");\n    }\n\n    return solrParams;\n  }\n\n","sourceOld":"  private SolrParams loadParams(SolrParams paramsIn) throws IOException {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams(paramsIn);\n    if (params.get(\"partitionKeys\") != null) {\n      if(!params.get(\"partitionKeys\").equals(\"none\") && numWorkers > 1) {\n        String partitionFilter = getPartitionFilter();\n        solrParams.add(\"fq\", partitionFilter);\n      }\n    } else if(numWorkers > 1) {\n        throw new IOException(\"When numWorkers > 1 partitionKeys must be set. Set partitionKeys=none to send the entire stream to each worker.\");\n    }\n\n    if(checkpoint > 0) {\n      solrParams.add(\"fq\", \"{!frange cost=100 incl=false l=\"+checkpoint+\"}_version_\");\n    }\n\n    return solrParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"85b7d92fa7b7dac117c267e0ad18c1f62df5a15c":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70d9c44f68e848648da304352cf7c045c33148f4"],"70d9c44f68e848648da304352cf7c045c33148f4":["85b7d92fa7b7dac117c267e0ad18c1f62df5a15c"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","826d15444ddf61716dc768c229cd54b2c2ccce1c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e66a459d38c1c4a2f97128433dab546f683a9fed","826d15444ddf61716dc768c229cd54b2c2ccce1c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"85b7d92fa7b7dac117c267e0ad18c1f62df5a15c":["70d9c44f68e848648da304352cf7c045c33148f4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["85b7d92fa7b7dac117c267e0ad18c1f62df5a15c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"70d9c44f68e848648da304352cf7c045c33148f4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}