{"path":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","sourceNew":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n\n    PhraseQuery q = new PhraseQuery();\n    q.setSlop(3);\n    q.add(new Term(FIELD_NAME, \"world\"));\n    q.add(new Term(FIELD_NAME, \"flatland\"));\n\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = new PhraseQuery();\n    q.setSlop(3);\n    q.add(new Term(\"text\", \"world\"));\n    q.add(new Term(\"text\", \"flatland\"));\n\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","sourceOld":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n\n    PhraseQuery q = new PhraseQuery();\n    q.setSlop(3);\n    q.add(new Term(FIELD_NAME, \"world\"));\n    q.add(new Term(FIELD_NAME, \"flatland\"));\n\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = new PhraseQuery();\n    q.setSlop(3);\n    q.add(new Term(\"text\", \"world\"));\n    q.add(new Term(\"text\", \"flatland\"));\n\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","sourceNew":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n\n    PhraseQuery q = new PhraseQuery(3, FIELD_NAME, \"world\", \"flatland\");\n\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = new PhraseQuery(3, \"text\", \"world\", \"flatland\");\n\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","sourceOld":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n\n    PhraseQuery q = new PhraseQuery();\n    q.setSlop(3);\n    q.add(new Term(FIELD_NAME, \"world\"));\n    q.add(new Term(FIELD_NAME, \"flatland\"));\n\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = new PhraseQuery();\n    q.setSlop(3);\n    q.add(new Term(\"text\", \"world\"));\n    q.add(new Term(\"text\", \"flatland\"));\n\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9e1499c5d26c936238506df90a3c02c76707722":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9e1499c5d26c936238506df90a3c02c76707722"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e9e1499c5d26c936238506df90a3c02c76707722"],"e9e1499c5d26c936238506df90a3c02c76707722":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}