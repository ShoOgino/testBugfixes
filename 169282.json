{"path":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","sourceNew":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    Collection<String> fields = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    readerToFields.put(reader, fields);\n    for (final String field : fields) {                         // update fieldToReader map\n      if (fieldToReader.get(field) == null)\n        fieldToReader.put(field, reader);\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n  }\n\n","sourceOld":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    Collection<String> fields = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    readerToFields.put(reader, fields);\n    for (final String field : fields) {                         // update fieldToReader map\n      if (fieldToReader.get(field) == null)\n        fieldToReader.put(field, reader);\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","sourceNew":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    Collection<String> fields = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    readerToFields.put(reader, fields);\n    for (final String field : fields) {               // update fieldToReader map\n      if (fieldToReader.get(field) == null) {\n        fieldToReader.put(field, reader);\n      }\n      this.fields.addField(field, reader);\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n  }\n\n","sourceOld":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    Collection<String> fields = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    readerToFields.put(reader, fields);\n    for (final String field : fields) {                         // update fieldToReader map\n      if (fieldToReader.get(field) == null)\n        fieldToReader.put(field, reader);\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0d06946f61921459f43309f86ed621ebe67eebe","date":1294182697,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","sourceNew":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    Collection<String> fields = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    readerToFields.put(reader, fields);\n    for (final String field : fields) {               // update fieldToReader map\n      if (fieldToReader.get(field) == null) {\n        fieldToReader.put(field, reader);\n      }\n      this.fields.addField(field, reader);\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n    synchronized(normsCache) {\n      normsCache.clear(); // TODO: don't need to clear this for all fields really?\n    }\n  }\n\n","sourceOld":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    Collection<String> fields = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    readerToFields.put(reader, fields);\n    for (final String field : fields) {               // update fieldToReader map\n      if (fieldToReader.get(field) == null) {\n        fieldToReader.put(field, reader);\n      }\n      this.fields.addField(field, reader);\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","sourceNew":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    Collection<String> fields = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    readerToFields.put(reader, fields);\n    for (final String field : fields) {               // update fieldToReader map\n      if (fieldToReader.get(field) == null) {\n        fieldToReader.put(field, reader);\n      }\n      this.fields.addField(field, reader);\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n    synchronized(normsCache) {\n      normsCache.clear(); // TODO: don't need to clear this for all fields really?\n    }\n  }\n\n","sourceOld":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    Collection<String> fields = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    readerToFields.put(reader, fields);\n    for (final String field : fields) {               // update fieldToReader map\n      if (fieldToReader.get(field) == null) {\n        fieldToReader.put(field, reader);\n      }\n      this.fields.addField(field, reader);\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","sourceNew":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    Collection<String> fields = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    readerToFields.put(reader, fields);\n    for (final String field : fields) {               // update fieldToReader map\n      if (fieldToReader.get(field) == null) {\n        fieldToReader.put(field, reader);\n      }\n      this.fields.addField(field, reader);\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n    synchronized(normsCache) {\n      normsCache.clear(); // TODO: don't need to clear this for all fields really?\n    }\n  }\n\n","sourceOld":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    Collection<String> fields = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    readerToFields.put(reader, fields);\n    for (final String field : fields) {               // update fieldToReader map\n      if (fieldToReader.get(field) == null) {\n        fieldToReader.put(field, reader);\n      }\n      this.fields.addField(field, reader);\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7d432db6b63a4974306a3d1bc4e9a09d00eb4d5","date":1307284877,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","sourceNew":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    Collection<String> fields = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    readerToFields.put(reader, fields);\n    for (final String field : fields) {               // update fieldToReader map\n      if (fieldToReader.get(field) == null) {\n        fieldToReader.put(field, reader);\n      }\n      this.fields.addField(field, reader);\n      this.perDocs.addField(field, reader);\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n    synchronized(normsCache) {\n      normsCache.clear(); // TODO: don't need to clear this for all fields really?\n    }\n  }\n\n","sourceOld":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    Collection<String> fields = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    readerToFields.put(reader, fields);\n    for (final String field : fields) {               // update fieldToReader map\n      if (fieldToReader.get(field) == null) {\n        fieldToReader.put(field, reader);\n      }\n      this.fields.addField(field, reader);\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n    synchronized(normsCache) {\n      normsCache.clear(); // TODO: don't need to clear this for all fields really?\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","sourceNew":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    Collection<String> fields = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    readerToFields.put(reader, fields);\n    for (final String field : fields) {               // update fieldToReader map\n      if (fieldToReader.get(field) == null) {\n        fieldToReader.put(field, reader);\n      }\n      this.fields.addField(field, reader);\n      this.perDocs.addField(field, reader);\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n    synchronized(normsCache) {\n      normsCache.clear(); // TODO: don't need to clear this for all fields really?\n    }\n  }\n\n","sourceOld":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    Collection<String> fields = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    readerToFields.put(reader, fields);\n    for (final String field : fields) {               // update fieldToReader map\n      if (fieldToReader.get(field) == null) {\n        fieldToReader.put(field, reader);\n      }\n      this.fields.addField(field, reader);\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n    synchronized(normsCache) {\n      normsCache.clear(); // TODO: don't need to clear this for all fields really?\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","sourceNew":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    Collection<String> fields = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    readerToFields.put(reader, fields);\n    for (final String field : fields) {               // update fieldToReader map\n      if (fieldToReader.get(field) == null) {\n        fieldToReader.put(field, reader);\n      }\n      this.fields.addField(field, reader);\n      this.perDocs.addField(field, reader);\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n    synchronized(normsCache) {\n      normsCache.clear(); // TODO: don't need to clear this for all fields really?\n    }\n  }\n\n","sourceOld":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    Collection<String> fields = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    readerToFields.put(reader, fields);\n    for (final String field : fields) {               // update fieldToReader map\n      if (fieldToReader.get(field) == null) {\n        fieldToReader.put(field, reader);\n      }\n      this.fields.addField(field, reader);\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n    synchronized(normsCache) {\n      normsCache.clear(); // TODO: don't need to clear this for all fields really?\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","sourceNew":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    Collection<String> fields = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    readerToFields.put(reader, fields);\n    for (final String field : fields) {               // update fieldToReader map\n      if (fieldToReader.get(field) == null) {\n        fieldToReader.put(field, reader);\n        this.fields.addField(field, MultiFields.getFields(reader).terms(field));\n        this.perDocs.addField(field, reader);\n      }\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n    synchronized(normsCache) {\n      normsCache.clear(); // TODO: don't need to clear this for all fields really?\n    }\n  }\n\n","sourceOld":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    Collection<String> fields = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    readerToFields.put(reader, fields);\n    for (final String field : fields) {               // update fieldToReader map\n      if (fieldToReader.get(field) == null) {\n        fieldToReader.put(field, reader);\n      }\n      this.fields.addField(field, reader);\n      this.perDocs.addField(field, reader);\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n    synchronized(normsCache) {\n      normsCache.clear(); // TODO: don't need to clear this for all fields really?\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cac4d5fa6c305b94f6232a70bda07f096ad0348c","date":1323538980,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","sourceNew":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    Collection<String> fields = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    readerToFields.put(reader, fields);\n    for (final String field : fields) {               // update fieldToReader map\n      if (fieldToReader.get(field) == null) {\n        fieldToReader.put(field, reader);\n        this.fields.addField(field, MultiFields.getFields(reader).terms(field));\n      }\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n    synchronized(normsCache) {\n      normsCache.clear(); // TODO: don't need to clear this for all fields really?\n    }\n  }\n\n","sourceOld":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    Collection<String> fields = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    readerToFields.put(reader, fields);\n    for (final String field : fields) {               // update fieldToReader map\n      if (fieldToReader.get(field) == null) {\n        fieldToReader.put(field, reader);\n        this.fields.addField(field, MultiFields.getFields(reader).terms(field));\n        this.perDocs.addField(field, reader);\n      }\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n    synchronized(normsCache) {\n      normsCache.clear(); // TODO: don't need to clear this for all fields really?\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","sourceNew":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    Collection<String> fields = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    readerToFields.put(reader, fields);\n    for (final String field : fields) {               // update fieldToReader map\n      if (fieldToReader.get(field) == null) {\n        fieldToReader.put(field, reader);\n        this.fields.addField(field, MultiFields.getFields(reader).terms(field));\n      }\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n    synchronized(normsCache) {\n      normsCache.clear(); // TODO: don't need to clear this for all fields really?\n    }\n  }\n\n","sourceOld":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    Collection<String> fields = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    readerToFields.put(reader, fields);\n    for (final String field : fields) {               // update fieldToReader map\n      if (fieldToReader.get(field) == null) {\n        fieldToReader.put(field, reader);\n        this.fields.addField(field, MultiFields.getFields(reader).terms(field));\n        this.perDocs.addField(field, reader);\n      }\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n    synchronized(normsCache) {\n      normsCache.clear(); // TODO: don't need to clear this for all fields really?\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","sourceNew":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    final FieldInfos readerFieldInfos = ReaderUtil.getMergedFieldInfos(reader);\n    for(FieldInfo fieldInfo : readerFieldInfos) {   // update fieldToReader map\n      // NOTE: first reader having a given field \"wins\":\n      if (fieldToReader.get(fieldInfo.name) == null) {\n        fieldInfos.add(fieldInfo);\n        fieldToReader.put(fieldInfo.name, reader);\n        this.fields.addField(fieldInfo.name, MultiFields.getFields(reader).terms(fieldInfo.name));\n      }\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n    synchronized(normsCache) {\n      normsCache.clear(); // TODO: don't need to clear this for all fields really?\n    }\n  }\n\n","sourceOld":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    Collection<String> fields = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    readerToFields.put(reader, fields);\n    for (final String field : fields) {               // update fieldToReader map\n      if (fieldToReader.get(field) == null) {\n        fieldToReader.put(field, reader);\n        this.fields.addField(field, MultiFields.getFields(reader).terms(field));\n      }\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n    synchronized(normsCache) {\n      normsCache.clear(); // TODO: don't need to clear this for all fields really?\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(AtomicIndexReader,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","sourceNew":" /** Add an AtomicIndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link AtomicIndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(AtomicIndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    final FieldInfos readerFieldInfos = ReaderUtil.getMergedFieldInfos(reader);\n    for(FieldInfo fieldInfo : readerFieldInfos) {   // update fieldToReader map\n      // NOTE: first reader having a given field \"wins\":\n      if (fieldToReader.get(fieldInfo.name) == null) {\n        fieldInfos.add(fieldInfo);\n        fieldToReader.put(fieldInfo.name, reader);\n        this.fields.addField(fieldInfo.name, reader.terms(fieldInfo.name));\n      }\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n    synchronized(normsCache) {\n      normsCache.clear(); // TODO: don't need to clear this for all fields really?\n    }\n  }\n\n","sourceOld":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    final FieldInfos readerFieldInfos = ReaderUtil.getMergedFieldInfos(reader);\n    for(FieldInfo fieldInfo : readerFieldInfos) {   // update fieldToReader map\n      // NOTE: first reader having a given field \"wins\":\n      if (fieldToReader.get(fieldInfo.name) == null) {\n        fieldInfos.add(fieldInfo);\n        fieldToReader.put(fieldInfo.name, reader);\n        this.fields.addField(fieldInfo.name, MultiFields.getFields(reader).terms(fieldInfo.name));\n      }\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n    synchronized(normsCache) {\n      normsCache.clear(); // TODO: don't need to clear this for all fields really?\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(AtomicReader,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(IndexReader,boolean).mjava","sourceNew":" /** Add an AtomicIndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link AtomicReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(AtomicReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    final FieldInfos readerFieldInfos = MultiFields.getMergedFieldInfos(reader);\n    for(FieldInfo fieldInfo : readerFieldInfos) {   // update fieldToReader map\n      // NOTE: first reader having a given field \"wins\":\n      if (fieldToReader.get(fieldInfo.name) == null) {\n        fieldInfos.add(fieldInfo);\n        fieldToReader.put(fieldInfo.name, reader);\n        this.fields.addField(fieldInfo.name, reader.terms(fieldInfo.name));\n      }\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n    synchronized(normsCache) {\n      normsCache.clear(); // TODO: don't need to clear this for all fields really?\n    }\n  }\n\n","sourceOld":" /** Add an IndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link IndexReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(IndexReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    final FieldInfos readerFieldInfos = ReaderUtil.getMergedFieldInfos(reader);\n    for(FieldInfo fieldInfo : readerFieldInfos) {   // update fieldToReader map\n      // NOTE: first reader having a given field \"wins\":\n      if (fieldToReader.get(fieldInfo.name) == null) {\n        fieldInfos.add(fieldInfo);\n        fieldToReader.put(fieldInfo.name, reader);\n        this.fields.addField(fieldInfo.name, MultiFields.getFields(reader).terms(fieldInfo.name));\n      }\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n    synchronized(normsCache) {\n      normsCache.clear(); // TODO: don't need to clear this for all fields really?\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["b0d06946f61921459f43309f86ed621ebe67eebe","2e8d7ba2175f47e280231533f7d3016249cea88b"],"70ad682703b8585f5d0a637efec044d57ec05efb":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","b0d06946f61921459f43309f86ed621ebe67eebe"],"b0d06946f61921459f43309f86ed621ebe67eebe":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3cc749c053615f5871f3b95715fe292f34e70a53":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["3cc749c053615f5871f3b95715fe292f34e70a53","cac4d5fa6c305b94f6232a70bda07f096ad0348c"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["b0d06946f61921459f43309f86ed621ebe67eebe","e7d432db6b63a4974306a3d1bc4e9a09d00eb4d5"],"e7d432db6b63a4974306a3d1bc4e9a09d00eb4d5":["70ad682703b8585f5d0a637efec044d57ec05efb"],"cac4d5fa6c305b94f6232a70bda07f096ad0348c":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","b0d06946f61921459f43309f86ed621ebe67eebe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"70ad682703b8585f5d0a637efec044d57ec05efb":["e7d432db6b63a4974306a3d1bc4e9a09d00eb4d5"],"b0d06946f61921459f43309f86ed621ebe67eebe":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","70ad682703b8585f5d0a637efec044d57ec05efb","2e8d7ba2175f47e280231533f7d3016249cea88b","868da859b43505d9d2a023bfeae6dd0c795f5295"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["70ad682703b8585f5d0a637efec044d57ec05efb","b0d06946f61921459f43309f86ed621ebe67eebe","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3cc749c053615f5871f3b95715fe292f34e70a53":["d638301ad1cfcae567b681b893bc8781f0ee48a5","cac4d5fa6c305b94f6232a70bda07f096ad0348c"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3cc749c053615f5871f3b95715fe292f34e70a53"],"cac4d5fa6c305b94f6232a70bda07f096ad0348c":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"e7d432db6b63a4974306a3d1bc4e9a09d00eb4d5":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}