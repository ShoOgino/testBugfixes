{"path":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage.ZooKeeperStorageIO#delete(String).mjava","commits":[{"id":"afb6bf9ce227ab6aac5068547e286ecc958b8b9d","date":1394661169,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage.ZooKeeperStorageIO#delete(String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean delete(String storedResourceId) throws IOException {\n      boolean wasDeleted = false;\n      final String znodePath = getZnodeForResource(storedResourceId);\n      \n      // this might be overkill for a delete operation\n      try {\n        if (zkClient.exists(znodePath, retryOnConnLoss)) {\n          log.info(\"Attempting to delete znode {}\", znodePath);\n          zkClient.delete(znodePath, -1, retryOnConnLoss);\n          wasDeleted = zkClient.exists(znodePath, retryOnConnLoss);\n          \n          if (wasDeleted) {\n            log.info(\"Deleted znode {}\", znodePath);\n          } else {\n            log.warn(\"Failed to delete znode {}\", znodePath);\n          }\n        } else {\n          log.warn(\"Znode {} does not exist; delete operation ignored.\", znodePath);\n        }\n      } catch (Exception e) {\n        if (e instanceof IOException) {\n          throw (IOException)e;\n        } else {\n          throw new IOException(\"Failed to read data at \"+znodePath, e);\n        }\n      }\n      \n      return wasDeleted;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d62172dd2fc1195c7e475550ac394a9948a18ae","date":1474974102,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage.ZooKeeperStorageIO#delete(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage.ZooKeeperStorageIO#delete(String).mjava","sourceNew":"    @Override\n    public boolean delete(String storedResourceId) throws IOException {\n      boolean wasDeleted = false;\n      final String znodePath = getZnodeForResource(storedResourceId);\n      \n      // this might be overkill for a delete operation\n      try {\n        if (zkClient.exists(znodePath, retryOnConnLoss)) {\n          log.debug(\"Attempting to delete znode {}\", znodePath);\n          zkClient.delete(znodePath, -1, retryOnConnLoss);\n          wasDeleted = zkClient.exists(znodePath, retryOnConnLoss);\n          \n          if (wasDeleted) {\n            log.info(\"Deleted znode {}\", znodePath);\n          } else {\n            log.warn(\"Failed to delete znode {}\", znodePath);\n          }\n        } else {\n          log.warn(\"Znode {} does not exist; delete operation ignored.\", znodePath);\n        }\n      } catch (Exception e) {\n        if (e instanceof IOException) {\n          throw (IOException)e;\n        } else {\n          throw new IOException(\"Failed to read data at \"+znodePath, e);\n        }\n      }\n      \n      return wasDeleted;\n    }\n\n","sourceOld":"    @Override\n    public boolean delete(String storedResourceId) throws IOException {\n      boolean wasDeleted = false;\n      final String znodePath = getZnodeForResource(storedResourceId);\n      \n      // this might be overkill for a delete operation\n      try {\n        if (zkClient.exists(znodePath, retryOnConnLoss)) {\n          log.info(\"Attempting to delete znode {}\", znodePath);\n          zkClient.delete(znodePath, -1, retryOnConnLoss);\n          wasDeleted = zkClient.exists(znodePath, retryOnConnLoss);\n          \n          if (wasDeleted) {\n            log.info(\"Deleted znode {}\", znodePath);\n          } else {\n            log.warn(\"Failed to delete znode {}\", znodePath);\n          }\n        } else {\n          log.warn(\"Znode {} does not exist; delete operation ignored.\", znodePath);\n        }\n      } catch (Exception e) {\n        if (e instanceof IOException) {\n          throw (IOException)e;\n        } else {\n          throw new IOException(\"Failed to read data at \"+znodePath, e);\n        }\n      }\n      \n      return wasDeleted;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage.ZooKeeperStorageIO#delete(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage.ZooKeeperStorageIO#delete(String).mjava","sourceNew":"    @Override\n    public boolean delete(String storedResourceId) throws IOException {\n      boolean wasDeleted = false;\n      final String znodePath = getZnodeForResource(storedResourceId);\n      \n      // this might be overkill for a delete operation\n      try {\n        if (zkClient.exists(znodePath, retryOnConnLoss)) {\n          log.debug(\"Attempting to delete znode {}\", znodePath);\n          zkClient.delete(znodePath, -1, retryOnConnLoss);\n          wasDeleted = zkClient.exists(znodePath, retryOnConnLoss);\n          \n          if (wasDeleted) {\n            log.info(\"Deleted znode {}\", znodePath);\n          } else {\n            log.warn(\"Failed to delete znode {}\", znodePath);\n          }\n        } else {\n          log.warn(\"Znode {} does not exist; delete operation ignored.\", znodePath);\n        }\n      } catch (Exception e) {\n        if (e instanceof IOException) {\n          throw (IOException)e;\n        } else {\n          throw new IOException(\"Failed to read data at \"+znodePath, e);\n        }\n      }\n      \n      return wasDeleted;\n    }\n\n","sourceOld":"    @Override\n    public boolean delete(String storedResourceId) throws IOException {\n      boolean wasDeleted = false;\n      final String znodePath = getZnodeForResource(storedResourceId);\n      \n      // this might be overkill for a delete operation\n      try {\n        if (zkClient.exists(znodePath, retryOnConnLoss)) {\n          log.info(\"Attempting to delete znode {}\", znodePath);\n          zkClient.delete(znodePath, -1, retryOnConnLoss);\n          wasDeleted = zkClient.exists(znodePath, retryOnConnLoss);\n          \n          if (wasDeleted) {\n            log.info(\"Deleted znode {}\", znodePath);\n          } else {\n            log.warn(\"Failed to delete znode {}\", znodePath);\n          }\n        } else {\n          log.warn(\"Znode {} does not exist; delete operation ignored.\", znodePath);\n        }\n      } catch (Exception e) {\n        if (e instanceof IOException) {\n          throw (IOException)e;\n        } else {\n          throw new IOException(\"Failed to read data at \"+znodePath, e);\n        }\n      }\n      \n      return wasDeleted;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage.ZooKeeperStorageIO#delete(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage.ZooKeeperStorageIO#delete(String).mjava","sourceNew":"    @Override\n    public boolean delete(String storedResourceId) throws IOException {\n      boolean wasDeleted = false;\n      final String znodePath = getZnodeForResource(storedResourceId);\n      \n      // this might be overkill for a delete operation\n      try {\n        if (zkClient.exists(znodePath, retryOnConnLoss)) {\n          log.debug(\"Attempting to delete znode {}\", znodePath);\n          zkClient.delete(znodePath, -1, retryOnConnLoss);\n          wasDeleted = zkClient.exists(znodePath, retryOnConnLoss);\n          \n          if (wasDeleted) {\n            log.info(\"Deleted znode {}\", znodePath);\n          } else {\n            log.warn(\"Failed to delete znode {}\", znodePath);\n          }\n        } else {\n          log.warn(\"Znode {} does not exist; delete operation ignored.\", znodePath);\n        }\n      } catch (Exception e) {\n        if (e instanceof IOException) {\n          throw (IOException)e;\n        } else {\n          throw new IOException(\"Failed to read data at \"+znodePath, e);\n        }\n      }\n      \n      return wasDeleted;\n    }\n\n","sourceOld":"    @Override\n    public boolean delete(String storedResourceId) throws IOException {\n      boolean wasDeleted = false;\n      final String znodePath = getZnodeForResource(storedResourceId);\n      \n      // this might be overkill for a delete operation\n      try {\n        if (zkClient.exists(znodePath, retryOnConnLoss)) {\n          log.info(\"Attempting to delete znode {}\", znodePath);\n          zkClient.delete(znodePath, -1, retryOnConnLoss);\n          wasDeleted = zkClient.exists(znodePath, retryOnConnLoss);\n          \n          if (wasDeleted) {\n            log.info(\"Deleted znode {}\", znodePath);\n          } else {\n            log.warn(\"Failed to delete znode {}\", znodePath);\n          }\n        } else {\n          log.warn(\"Znode {} does not exist; delete operation ignored.\", znodePath);\n        }\n      } catch (Exception e) {\n        if (e instanceof IOException) {\n          throw (IOException)e;\n        } else {\n          throw new IOException(\"Failed to read data at \"+znodePath, e);\n        }\n      }\n      \n      return wasDeleted;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d62172dd2fc1195c7e475550ac394a9948a18ae":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d","0d62172dd2fc1195c7e475550ac394a9948a18ae"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"0d62172dd2fc1195c7e475550ac394a9948a18ae":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["0d62172dd2fc1195c7e475550ac394a9948a18ae","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}