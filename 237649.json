{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.DefaultSchemaRegistryProvider#getSchemaRegistry().mjava","commits":[{"id":"92002994f5f8188263b948db8a8d2a3823c80ad3","date":1461796841,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.DefaultSchemaRegistryProvider#getSchemaRegistry().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Registry<ConnectionSocketFactory> getSchemaRegistry() {\n      // this mimics PoolingHttpClientConnectionManager's default behavior,\n      // except that we explicitly use SSLConnectionSocketFactory.getSystemSocketFactory()\n      // to pick up the system level default SSLContext (where javax.net.ssl.* properties\n      // related to keystore & truststore are specified)\n      RegistryBuilder<ConnectionSocketFactory> builder = RegistryBuilder.<ConnectionSocketFactory>create();\n      builder.register(\"http\", PlainConnectionSocketFactory.getSocketFactory());\n      builder.register(\"https\", SSLConnectionSocketFactory.getSystemSocketFactory());\n      return builder.build();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e67ae138c1173c6193dbcfd9a94142b99ed2a0c5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e67ae138c1173c6193dbcfd9a94142b99ed2a0c5","date":1524429517,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.DefaultSchemaRegistryProvider#getSchemaRegistry().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.DefaultSchemaRegistryProvider#getSchemaRegistry().mjava","sourceNew":"    @Override\n    public Registry<ConnectionSocketFactory> getSchemaRegistry() {\n      // this mimics PoolingHttpClientConnectionManager's default behavior,\n      // except that we explicitly use SSLConnectionSocketFactory.getSystemSocketFactory()\n      // to pick up the system level default SSLContext (where javax.net.ssl.* properties\n      // related to keystore & truststore are specified)\n      RegistryBuilder<ConnectionSocketFactory> builder = RegistryBuilder.<ConnectionSocketFactory> create();\n      builder.register(\"http\", PlainConnectionSocketFactory.getSocketFactory());\n\n      // logic to turn off peer host check\n      SSLConnectionSocketFactory sslConnectionSocketFactory = null;\n      boolean sslCheckPeerName = toBooleanDefaultIfNull(\n          toBooleanObject(System.getProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME)), true);\n      if (sslCheckPeerName) {\n        sslConnectionSocketFactory = SSLConnectionSocketFactory.getSystemSocketFactory();\n      } else {\n        sslConnectionSocketFactory = new SSLConnectionSocketFactory(SSLContexts.createSystemDefault(),\n                                                                    NoopHostnameVerifier.INSTANCE);\n        logger.debug(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME + \"is false, hostname checks disabled.\");\n      }\n      builder.register(\"https\", sslConnectionSocketFactory);\n\n      return builder.build();\n    }\n\n","sourceOld":"    @Override\n    public Registry<ConnectionSocketFactory> getSchemaRegistry() {\n      // this mimics PoolingHttpClientConnectionManager's default behavior,\n      // except that we explicitly use SSLConnectionSocketFactory.getSystemSocketFactory()\n      // to pick up the system level default SSLContext (where javax.net.ssl.* properties\n      // related to keystore & truststore are specified)\n      RegistryBuilder<ConnectionSocketFactory> builder = RegistryBuilder.<ConnectionSocketFactory>create();\n      builder.register(\"http\", PlainConnectionSocketFactory.getSocketFactory());\n      builder.register(\"https\", SSLConnectionSocketFactory.getSystemSocketFactory());\n      return builder.build();\n    }\n\n","bugFix":["92002994f5f8188263b948db8a8d2a3823c80ad3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.DefaultSchemaRegistryProvider#getSchemaRegistry().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.DefaultSchemaRegistryProvider#getSchemaRegistry().mjava","sourceNew":"    @Override\n    public Registry<ConnectionSocketFactory> getSchemaRegistry() {\n      // this mimics PoolingHttpClientConnectionManager's default behavior,\n      // except that we explicitly use SSLConnectionSocketFactory.getSystemSocketFactory()\n      // to pick up the system level default SSLContext (where javax.net.ssl.* properties\n      // related to keystore & truststore are specified)\n      RegistryBuilder<ConnectionSocketFactory> builder = RegistryBuilder.<ConnectionSocketFactory> create();\n      builder.register(\"http\", PlainConnectionSocketFactory.getSocketFactory());\n\n      // logic to turn off peer host check\n      SSLConnectionSocketFactory sslConnectionSocketFactory = null;\n      boolean sslCheckPeerName = toBooleanDefaultIfNull(\n          toBooleanObject(System.getProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME)), true);\n      if (sslCheckPeerName) {\n        sslConnectionSocketFactory = SSLConnectionSocketFactory.getSystemSocketFactory();\n      } else {\n        sslConnectionSocketFactory = new SSLConnectionSocketFactory(SSLContexts.createSystemDefault(),\n                                                                    NoopHostnameVerifier.INSTANCE);\n        log.debug(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME + \"is false, hostname checks disabled.\");\n      }\n      builder.register(\"https\", sslConnectionSocketFactory);\n\n      return builder.build();\n    }\n\n","sourceOld":"    @Override\n    public Registry<ConnectionSocketFactory> getSchemaRegistry() {\n      // this mimics PoolingHttpClientConnectionManager's default behavior,\n      // except that we explicitly use SSLConnectionSocketFactory.getSystemSocketFactory()\n      // to pick up the system level default SSLContext (where javax.net.ssl.* properties\n      // related to keystore & truststore are specified)\n      RegistryBuilder<ConnectionSocketFactory> builder = RegistryBuilder.<ConnectionSocketFactory> create();\n      builder.register(\"http\", PlainConnectionSocketFactory.getSocketFactory());\n\n      // logic to turn off peer host check\n      SSLConnectionSocketFactory sslConnectionSocketFactory = null;\n      boolean sslCheckPeerName = toBooleanDefaultIfNull(\n          toBooleanObject(System.getProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME)), true);\n      if (sslCheckPeerName) {\n        sslConnectionSocketFactory = SSLConnectionSocketFactory.getSystemSocketFactory();\n      } else {\n        sslConnectionSocketFactory = new SSLConnectionSocketFactory(SSLContexts.createSystemDefault(),\n                                                                    NoopHostnameVerifier.INSTANCE);\n        logger.debug(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME + \"is false, hostname checks disabled.\");\n      }\n      builder.register(\"https\", sslConnectionSocketFactory);\n\n      return builder.build();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9f4aeebb20113377af399c0f4e9bf74ef941405","date":1560858591,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.DefaultSchemaRegistryProvider#getSchemaRegistry().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.DefaultSchemaRegistryProvider#getSchemaRegistry().mjava","sourceNew":"    @Override\n    public Registry<ConnectionSocketFactory> getSchemaRegistry() {\n      // this mimics PoolingHttpClientConnectionManager's default behavior,\n      // except that we explicitly use SSLConnectionSocketFactory.getSystemSocketFactory()\n      // to pick up the system level default SSLContext (where javax.net.ssl.* properties\n      // related to keystore & truststore are specified)\n      RegistryBuilder<ConnectionSocketFactory> builder = RegistryBuilder.<ConnectionSocketFactory> create();\n      builder.register(\"http\", PlainConnectionSocketFactory.getSocketFactory());\n\n      // logic to turn off peer host check\n      SSLConnectionSocketFactory sslConnectionSocketFactory = null;\n      boolean sslCheckPeerName = toBooleanDefaultIfNull(\n          toBooleanObject(System.getProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME)), true);\n      if (sslCheckPeerName) {\n        String[] cipherSuites = split(System.getProperty(\"https.cipherSuites\"));\n        sslConnectionSocketFactory = new SSLConnectionSocketFactory(SSLContexts.createSystemDefault(),\n            getSupportedSSLProtocols(), cipherSuites, SSLConnectionSocketFactory.getDefaultHostnameVerifier());\n      } else {\n        sslConnectionSocketFactory = new SSLConnectionSocketFactory(SSLContexts.createSystemDefault(),\n                                                                    NoopHostnameVerifier.INSTANCE);\n        log.debug(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME + \"is false, hostname checks disabled.\");\n      }\n      builder.register(\"https\", sslConnectionSocketFactory);\n\n      return builder.build();\n    }\n\n","sourceOld":"    @Override\n    public Registry<ConnectionSocketFactory> getSchemaRegistry() {\n      // this mimics PoolingHttpClientConnectionManager's default behavior,\n      // except that we explicitly use SSLConnectionSocketFactory.getSystemSocketFactory()\n      // to pick up the system level default SSLContext (where javax.net.ssl.* properties\n      // related to keystore & truststore are specified)\n      RegistryBuilder<ConnectionSocketFactory> builder = RegistryBuilder.<ConnectionSocketFactory> create();\n      builder.register(\"http\", PlainConnectionSocketFactory.getSocketFactory());\n\n      // logic to turn off peer host check\n      SSLConnectionSocketFactory sslConnectionSocketFactory = null;\n      boolean sslCheckPeerName = toBooleanDefaultIfNull(\n          toBooleanObject(System.getProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME)), true);\n      if (sslCheckPeerName) {\n        sslConnectionSocketFactory = SSLConnectionSocketFactory.getSystemSocketFactory();\n      } else {\n        sslConnectionSocketFactory = new SSLConnectionSocketFactory(SSLContexts.createSystemDefault(),\n                                                                    NoopHostnameVerifier.INSTANCE);\n        log.debug(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME + \"is false, hostname checks disabled.\");\n      }\n      builder.register(\"https\", sslConnectionSocketFactory);\n\n      return builder.build();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3ffa4c5138b265fd040cebc0c054245f746fec8","date":1560937397,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.DefaultSchemaRegistryProvider#getSchemaRegistry().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.DefaultSchemaRegistryProvider#getSchemaRegistry().mjava","sourceNew":"    @Override\n    public Registry<ConnectionSocketFactory> getSchemaRegistry() {\n      // this mimics PoolingHttpClientConnectionManager's default behavior,\n      // except that we explicitly use SSLConnectionSocketFactory.getSystemSocketFactory()\n      // to pick up the system level default SSLContext (where javax.net.ssl.* properties\n      // related to keystore & truststore are specified)\n      RegistryBuilder<ConnectionSocketFactory> builder = RegistryBuilder.<ConnectionSocketFactory> create();\n      builder.register(\"http\", PlainConnectionSocketFactory.getSocketFactory());\n\n      // logic to turn off peer host check\n      SSLConnectionSocketFactory sslConnectionSocketFactory = null;\n      boolean sslCheckPeerName = toBooleanDefaultIfNull(\n          toBooleanObject(System.getProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME)), true);\n      if (sslCheckPeerName) {\n        sslConnectionSocketFactory = SSLConnectionSocketFactory.getSystemSocketFactory();\n      } else {\n        sslConnectionSocketFactory = new SSLConnectionSocketFactory(SSLContexts.createSystemDefault(),\n                                                                    NoopHostnameVerifier.INSTANCE);\n        log.debug(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME + \"is false, hostname checks disabled.\");\n      }\n      builder.register(\"https\", sslConnectionSocketFactory);\n\n      return builder.build();\n    }\n\n","sourceOld":"    @Override\n    public Registry<ConnectionSocketFactory> getSchemaRegistry() {\n      // this mimics PoolingHttpClientConnectionManager's default behavior,\n      // except that we explicitly use SSLConnectionSocketFactory.getSystemSocketFactory()\n      // to pick up the system level default SSLContext (where javax.net.ssl.* properties\n      // related to keystore & truststore are specified)\n      RegistryBuilder<ConnectionSocketFactory> builder = RegistryBuilder.<ConnectionSocketFactory> create();\n      builder.register(\"http\", PlainConnectionSocketFactory.getSocketFactory());\n\n      // logic to turn off peer host check\n      SSLConnectionSocketFactory sslConnectionSocketFactory = null;\n      boolean sslCheckPeerName = toBooleanDefaultIfNull(\n          toBooleanObject(System.getProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME)), true);\n      if (sslCheckPeerName) {\n        String[] cipherSuites = split(System.getProperty(\"https.cipherSuites\"));\n        sslConnectionSocketFactory = new SSLConnectionSocketFactory(SSLContexts.createSystemDefault(),\n            getSupportedSSLProtocols(), cipherSuites, SSLConnectionSocketFactory.getDefaultHostnameVerifier());\n      } else {\n        sslConnectionSocketFactory = new SSLConnectionSocketFactory(SSLContexts.createSystemDefault(),\n                                                                    NoopHostnameVerifier.INSTANCE);\n        log.debug(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME + \"is false, hostname checks disabled.\");\n      }\n      builder.register(\"https\", sslConnectionSocketFactory);\n\n      return builder.build();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e856e5ac973044540959acff90fa900278d2692","date":1585275350,"type":5,"author":"Andy Throgmorton","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.DefaultSocketFactoryRegistryProvider#getSocketFactoryRegistry().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.DefaultSchemaRegistryProvider#getSchemaRegistry().mjava","sourceNew":"    @Override\n    public Registry<ConnectionSocketFactory> getSocketFactoryRegistry() {\n      // this mimics PoolingHttpClientConnectionManager's default behavior,\n      // except that we explicitly use SSLConnectionSocketFactory.getSystemSocketFactory()\n      // to pick up the system level default SSLContext (where javax.net.ssl.* properties\n      // related to keystore & truststore are specified)\n      RegistryBuilder<ConnectionSocketFactory> builder = RegistryBuilder.<ConnectionSocketFactory> create();\n      builder.register(\"http\", PlainConnectionSocketFactory.getSocketFactory());\n\n      // logic to turn off peer host check\n      SSLConnectionSocketFactory sslConnectionSocketFactory = null;\n      boolean sslCheckPeerName = toBooleanDefaultIfNull(\n          toBooleanObject(System.getProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME)), true);\n      if (sslCheckPeerName) {\n        sslConnectionSocketFactory = SSLConnectionSocketFactory.getSystemSocketFactory();\n      } else {\n        sslConnectionSocketFactory = new SSLConnectionSocketFactory(SSLContexts.createSystemDefault(),\n                                                                    NoopHostnameVerifier.INSTANCE);\n        log.debug(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME + \"is false, hostname checks disabled.\");\n      }\n      builder.register(\"https\", sslConnectionSocketFactory);\n\n      return builder.build();\n    }\n\n","sourceOld":"    @Override\n    public Registry<ConnectionSocketFactory> getSchemaRegistry() {\n      // this mimics PoolingHttpClientConnectionManager's default behavior,\n      // except that we explicitly use SSLConnectionSocketFactory.getSystemSocketFactory()\n      // to pick up the system level default SSLContext (where javax.net.ssl.* properties\n      // related to keystore & truststore are specified)\n      RegistryBuilder<ConnectionSocketFactory> builder = RegistryBuilder.<ConnectionSocketFactory> create();\n      builder.register(\"http\", PlainConnectionSocketFactory.getSocketFactory());\n\n      // logic to turn off peer host check\n      SSLConnectionSocketFactory sslConnectionSocketFactory = null;\n      boolean sslCheckPeerName = toBooleanDefaultIfNull(\n          toBooleanObject(System.getProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME)), true);\n      if (sslCheckPeerName) {\n        sslConnectionSocketFactory = SSLConnectionSocketFactory.getSystemSocketFactory();\n      } else {\n        sslConnectionSocketFactory = new SSLConnectionSocketFactory(SSLContexts.createSystemDefault(),\n                                                                    NoopHostnameVerifier.INSTANCE);\n        log.debug(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME + \"is false, hostname checks disabled.\");\n      }\n      builder.register(\"https\", sslConnectionSocketFactory);\n\n      return builder.build();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e67ae138c1173c6193dbcfd9a94142b99ed2a0c5":["92002994f5f8188263b948db8a8d2a3823c80ad3"],"9e856e5ac973044540959acff90fa900278d2692":["c3ffa4c5138b265fd040cebc0c054245f746fec8"],"c3ffa4c5138b265fd040cebc0c054245f746fec8":["e9f4aeebb20113377af399c0f4e9bf74ef941405"],"e9f4aeebb20113377af399c0f4e9bf74ef941405":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92002994f5f8188263b948db8a8d2a3823c80ad3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e856e5ac973044540959acff90fa900278d2692"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["e67ae138c1173c6193dbcfd9a94142b99ed2a0c5"]},"commit2Childs":{"e67ae138c1173c6193dbcfd9a94142b99ed2a0c5":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"9e856e5ac973044540959acff90fa900278d2692":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3ffa4c5138b265fd040cebc0c054245f746fec8":["9e856e5ac973044540959acff90fa900278d2692"],"e9f4aeebb20113377af399c0f4e9bf74ef941405":["c3ffa4c5138b265fd040cebc0c054245f746fec8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92002994f5f8188263b948db8a8d2a3823c80ad3"],"92002994f5f8188263b948db8a8d2a3823c80ad3":["e67ae138c1173c6193dbcfd9a94142b99ed2a0c5"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["e9f4aeebb20113377af399c0f4e9bf74ef941405"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}