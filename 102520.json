{"path":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handlePing(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"8d8d10f2e06a107b21bd13856db864b3824143af","date":1335191859,"type":0,"author":"Stefan Matheis","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handlePing(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  protected void handlePing(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n    SolrParams params = req.getParams();\n    SolrCore core = req.getCore();\n    \n    // Get the RequestHandler\n    String qt = params.get( CommonParams.QT );//optional; you get the default otherwise\n    SolrRequestHandler handler = core.getRequestHandler( qt );\n    if( handler == null ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Unknown RequestHandler (qt): \"+qt );\n    }\n    \n    if( handler instanceof PingRequestHandler ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Cannot execute the PingRequestHandler recursively\" );\n    }\n    \n    // Execute the ping query and catch any possible exception\n    Throwable ex = null;\n    try {\n      SolrQueryResponse pingrsp = new SolrQueryResponse();\n      core.execute(handler, req, pingrsp );\n      ex = pingrsp.getException();\n    }\n    catch( Throwable th ) {\n      ex = th;\n    }\n    \n    // Send an error or an 'OK' message (response code will be 200)\n    if( ex != null ) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Ping query caused exception: \"+ex.getMessage(), ex );\n    }\n    rsp.add( \"status\", \"OK\" );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","date":1389633998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handlePing(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handlePing(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handlePing(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n    SolrParams params = req.getParams();\n    SolrCore core = req.getCore();\n    \n    // Get the RequestHandler\n    String qt = params.get( CommonParams.QT );//optional; you get the default otherwise\n    SolrRequestHandler handler = core.getRequestHandler( qt );\n    if( handler == null ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Unknown RequestHandler (qt): \"+qt );\n    }\n    \n    if( handler instanceof PingRequestHandler ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Cannot execute the PingRequestHandler recursively\" );\n    }\n    \n    // Execute the ping query and catch any possible exception\n    Throwable ex = null;\n    try {\n      SolrQueryResponse pingrsp = new SolrQueryResponse();\n      core.execute(handler, req, pingrsp );\n      ex = pingrsp.getException();\n    }\n    catch( Exception e ) {\n      ex = e;\n    }\n    \n    // Send an error or an 'OK' message (response code will be 200)\n    if( ex != null ) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Ping query caused exception: \"+ex.getMessage(), ex );\n    }\n    rsp.add( \"status\", \"OK\" );\n  }\n\n","sourceOld":"  protected void handlePing(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n    SolrParams params = req.getParams();\n    SolrCore core = req.getCore();\n    \n    // Get the RequestHandler\n    String qt = params.get( CommonParams.QT );//optional; you get the default otherwise\n    SolrRequestHandler handler = core.getRequestHandler( qt );\n    if( handler == null ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Unknown RequestHandler (qt): \"+qt );\n    }\n    \n    if( handler instanceof PingRequestHandler ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Cannot execute the PingRequestHandler recursively\" );\n    }\n    \n    // Execute the ping query and catch any possible exception\n    Throwable ex = null;\n    try {\n      SolrQueryResponse pingrsp = new SolrQueryResponse();\n      core.execute(handler, req, pingrsp );\n      ex = pingrsp.getException();\n    }\n    catch( Throwable th ) {\n      ex = th;\n    }\n    \n    // Send an error or an 'OK' message (response code will be 200)\n    if( ex != null ) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Ping query caused exception: \"+ex.getMessage(), ex );\n    }\n    rsp.add( \"status\", \"OK\" );\n  }\n\n","bugFix":["8d8d10f2e06a107b21bd13856db864b3824143af"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72210c8d5b81704dea0379ab74b7714e77ab3263","date":1442020665,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handlePing(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handlePing(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handlePing(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n    SolrParams params = req.getParams();\n    SolrCore core = req.getCore();\n    \n    // Get the RequestHandler\n    String qt = params.get( CommonParams.QT );//optional; you get the default otherwise    \n    SolrRequestHandler handler = core.getRequestHandler( qt );\n    if( handler == null ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Unknown RequestHandler (qt): \"+qt );\n    }\n    \n    if( handler instanceof PingRequestHandler ) {\n      // In case it's a query for shard, use default handler     \n      if (params.getBool(ShardParams.IS_SHARD, false)) {\n        handler = core.getRequestHandler( null );\n        ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n        wparams.remove(CommonParams.QT);\n        req.setParams(wparams);\n      } else { \n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n            \"Cannot execute the PingRequestHandler recursively\" );\n      }\n    }\n    \n    // Execute the ping query and catch any possible exception\n    Throwable ex = null;\n    \n    // In case it's a query for shard, return the result from delegated handler for distributed query to merge result\n    if (params.getBool(ShardParams.IS_SHARD, false)) {\n      try {\n        core.execute(handler, req, rsp );\n        ex = rsp.getException(); \n      }\n      catch( Exception e ) {\n        ex = e;\n      }\n      // Send an error or return\n      if( ex != null ) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n            \"Ping query caused exception: \"+ex.getMessage(), ex );\n      }\n    } else {\n      try {\n        SolrQueryResponse pingrsp = new SolrQueryResponse();\n        core.execute(handler, req, pingrsp );\n        ex = pingrsp.getException();       \n      }\n      catch( Exception e ) {\n        ex = e;\n      }\n      \n      // Send an error or an 'OK' message (response code will be 200)\n      if( ex != null ) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n            \"Ping query caused exception: \"+ex.getMessage(), ex );\n      }\n      \n      rsp.add( \"status\", \"OK\" );     \n    }   \n\n  }\n\n","sourceOld":"  protected void handlePing(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n    SolrParams params = req.getParams();\n    SolrCore core = req.getCore();\n    \n    // Get the RequestHandler\n    String qt = params.get( CommonParams.QT );//optional; you get the default otherwise\n    SolrRequestHandler handler = core.getRequestHandler( qt );\n    if( handler == null ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Unknown RequestHandler (qt): \"+qt );\n    }\n    \n    if( handler instanceof PingRequestHandler ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Cannot execute the PingRequestHandler recursively\" );\n    }\n    \n    // Execute the ping query and catch any possible exception\n    Throwable ex = null;\n    try {\n      SolrQueryResponse pingrsp = new SolrQueryResponse();\n      core.execute(handler, req, pingrsp );\n      ex = pingrsp.getException();\n    }\n    catch( Exception e ) {\n      ex = e;\n    }\n    \n    // Send an error or an 'OK' message (response code will be 200)\n    if( ex != null ) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Ping query caused exception: \"+ex.getMessage(), ex );\n    }\n    rsp.add( \"status\", \"OK\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e80313f2bd5f966a6e44d8213f2d3d5f7c1d656c","date":1456187117,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handlePing(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handlePing(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handlePing(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n    SolrParams params = req.getParams();\n    SolrCore core = req.getCore();\n    \n    // Get the RequestHandler\n    String qt = params.get( CommonParams.QT );//optional; you get the default otherwise    \n    SolrRequestHandler handler = core.getRequestHandler( qt );\n    if( handler == null ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Unknown RequestHandler (qt): \"+qt );\n    }\n    \n    if( handler instanceof PingRequestHandler ) {\n      // In case it's a query for shard, use default handler     \n      if (params.getBool(ShardParams.IS_SHARD, false)) {\n        handler = core.getRequestHandler( null );\n        ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n        wparams.remove(CommonParams.QT);\n        req.setParams(wparams);\n      } else { \n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n            \"Cannot execute the PingRequestHandler recursively\" );\n      }\n    }\n    \n    // Execute the ping query and catch any possible exception\n    Throwable ex = null;\n    \n    // In case it's a query for shard, return the result from delegated handler for distributed query to merge result\n    if (params.getBool(ShardParams.IS_SHARD, false)) {\n      try {\n        core.execute(handler, req, rsp );\n        ex = rsp.getException(); \n      }\n      catch( Exception e ) {\n        ex = e;\n      }\n      // Send an error or return\n      if( ex != null ) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n            \"Ping query caused exception: \"+ex.getMessage(), ex );\n      }\n    } else {\n      try {\n        SolrQueryResponse pingrsp = new SolrQueryResponse();\n        core.execute(handler, req, pingrsp );\n        ex = pingrsp.getException(); \n        NamedList<Object> headers = rsp.getResponseHeader();\n        if(headers != null) {\n          headers.add(\"zkConnected\", pingrsp.getResponseHeader().get(\"zkConnected\"));\n        }\n        \n      }\n      catch( Exception e ) {\n        ex = e;\n      }\n      \n      // Send an error or an 'OK' message (response code will be 200)\n      if( ex != null ) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n            \"Ping query caused exception: \"+ex.getMessage(), ex );\n      }\n      \n      rsp.add( \"status\", \"OK\" );     \n    }   \n\n  }\n\n","sourceOld":"  protected void handlePing(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n    SolrParams params = req.getParams();\n    SolrCore core = req.getCore();\n    \n    // Get the RequestHandler\n    String qt = params.get( CommonParams.QT );//optional; you get the default otherwise    \n    SolrRequestHandler handler = core.getRequestHandler( qt );\n    if( handler == null ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Unknown RequestHandler (qt): \"+qt );\n    }\n    \n    if( handler instanceof PingRequestHandler ) {\n      // In case it's a query for shard, use default handler     \n      if (params.getBool(ShardParams.IS_SHARD, false)) {\n        handler = core.getRequestHandler( null );\n        ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n        wparams.remove(CommonParams.QT);\n        req.setParams(wparams);\n      } else { \n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n            \"Cannot execute the PingRequestHandler recursively\" );\n      }\n    }\n    \n    // Execute the ping query and catch any possible exception\n    Throwable ex = null;\n    \n    // In case it's a query for shard, return the result from delegated handler for distributed query to merge result\n    if (params.getBool(ShardParams.IS_SHARD, false)) {\n      try {\n        core.execute(handler, req, rsp );\n        ex = rsp.getException(); \n      }\n      catch( Exception e ) {\n        ex = e;\n      }\n      // Send an error or return\n      if( ex != null ) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n            \"Ping query caused exception: \"+ex.getMessage(), ex );\n      }\n    } else {\n      try {\n        SolrQueryResponse pingrsp = new SolrQueryResponse();\n        core.execute(handler, req, pingrsp );\n        ex = pingrsp.getException();       \n      }\n      catch( Exception e ) {\n        ex = e;\n      }\n      \n      // Send an error or an 'OK' message (response code will be 200)\n      if( ex != null ) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n            \"Ping query caused exception: \"+ex.getMessage(), ex );\n      }\n      \n      rsp.add( \"status\", \"OK\" );     \n    }   \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handlePing(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/PingRequestHandler#handlePing(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handlePing(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n    SolrParams params = req.getParams();\n    SolrCore core = req.getCore();\n    \n    // Get the RequestHandler\n    String qt = params.get( CommonParams.QT );//optional; you get the default otherwise    \n    SolrRequestHandler handler = core.getRequestHandler( qt );\n    if( handler == null ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Unknown RequestHandler (qt): \"+qt );\n    }\n    \n    if( handler instanceof PingRequestHandler ) {\n      // In case it's a query for shard, use default handler     \n      if (params.getBool(ShardParams.IS_SHARD, false)) {\n        handler = core.getRequestHandler( null );\n        ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n        wparams.remove(CommonParams.QT);\n        req.setParams(wparams);\n      } else { \n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n            \"Cannot execute the PingRequestHandler recursively\" );\n      }\n    }\n    \n    // Execute the ping query and catch any possible exception\n    Throwable ex = null;\n    \n    // In case it's a query for shard, return the result from delegated handler for distributed query to merge result\n    if (params.getBool(ShardParams.IS_SHARD, false)) {\n      try {\n        core.execute(handler, req, rsp );\n        ex = rsp.getException(); \n      }\n      catch( Exception e ) {\n        ex = e;\n      }\n      // Send an error or return\n      if( ex != null ) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n            \"Ping query caused exception: \"+ex.getMessage(), ex );\n      }\n    } else {\n      try {\n        SolrQueryResponse pingrsp = new SolrQueryResponse();\n        core.execute(handler, req, pingrsp );\n        ex = pingrsp.getException(); \n        NamedList<Object> headers = rsp.getResponseHeader();\n        if(headers != null) {\n          headers.add(\"zkConnected\", pingrsp.getResponseHeader().get(\"zkConnected\"));\n        }\n        \n      }\n      catch( Exception e ) {\n        ex = e;\n      }\n      \n      // Send an error or an 'OK' message (response code will be 200)\n      if( ex != null ) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n            \"Ping query caused exception: \"+ex.getMessage(), ex );\n      }\n      \n      rsp.add( \"status\", \"OK\" );     \n    }   \n\n  }\n\n","sourceOld":"  protected void handlePing(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n    SolrParams params = req.getParams();\n    SolrCore core = req.getCore();\n    \n    // Get the RequestHandler\n    String qt = params.get( CommonParams.QT );//optional; you get the default otherwise    \n    SolrRequestHandler handler = core.getRequestHandler( qt );\n    if( handler == null ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Unknown RequestHandler (qt): \"+qt );\n    }\n    \n    if( handler instanceof PingRequestHandler ) {\n      // In case it's a query for shard, use default handler     \n      if (params.getBool(ShardParams.IS_SHARD, false)) {\n        handler = core.getRequestHandler( null );\n        ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n        wparams.remove(CommonParams.QT);\n        req.setParams(wparams);\n      } else { \n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n            \"Cannot execute the PingRequestHandler recursively\" );\n      }\n    }\n    \n    // Execute the ping query and catch any possible exception\n    Throwable ex = null;\n    \n    // In case it's a query for shard, return the result from delegated handler for distributed query to merge result\n    if (params.getBool(ShardParams.IS_SHARD, false)) {\n      try {\n        core.execute(handler, req, rsp );\n        ex = rsp.getException(); \n      }\n      catch( Exception e ) {\n        ex = e;\n      }\n      // Send an error or return\n      if( ex != null ) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n            \"Ping query caused exception: \"+ex.getMessage(), ex );\n      }\n    } else {\n      try {\n        SolrQueryResponse pingrsp = new SolrQueryResponse();\n        core.execute(handler, req, pingrsp );\n        ex = pingrsp.getException();       \n      }\n      catch( Exception e ) {\n        ex = e;\n      }\n      \n      // Send an error or an 'OK' message (response code will be 200)\n      if( ex != null ) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n            \"Ping query caused exception: \"+ex.getMessage(), ex );\n      }\n      \n      rsp.add( \"status\", \"OK\" );     \n    }   \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8d8d10f2e06a107b21bd13856db864b3824143af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"72210c8d5b81704dea0379ab74b7714e77ab3263":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"419a8f52c6635419beb951255cacbbb281044c57":["72210c8d5b81704dea0379ab74b7714e77ab3263","e80313f2bd5f966a6e44d8213f2d3d5f7c1d656c"],"e80313f2bd5f966a6e44d8213f2d3d5f7c1d656c":["72210c8d5b81704dea0379ab74b7714e77ab3263"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["8d8d10f2e06a107b21bd13856db864b3824143af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["419a8f52c6635419beb951255cacbbb281044c57"]},"commit2Childs":{"8d8d10f2e06a107b21bd13856db864b3824143af":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"72210c8d5b81704dea0379ab74b7714e77ab3263":["419a8f52c6635419beb951255cacbbb281044c57","e80313f2bd5f966a6e44d8213f2d3d5f7c1d656c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8d8d10f2e06a107b21bd13856db864b3824143af"],"419a8f52c6635419beb951255cacbbb281044c57":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e80313f2bd5f966a6e44d8213f2d3d5f7c1d656c":["419a8f52c6635419beb951255cacbbb281044c57"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["72210c8d5b81704dea0379ab74b7714e77ab3263"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}