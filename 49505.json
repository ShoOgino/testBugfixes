{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#push().mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#push().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#push().mjava","sourceNew":"  // Pushes pending positions to the wrapped codec\n  private void push() throws IOException {\n    // if (DEBUG) System.out.println(\"PW now push @ \" + pendingCount + \" wrapped=\" + wrappedPostingsWriter);\n    assert pendingCount == pending.length;\n      \n    wrappedPostingsWriter.startTerm();\n      \n    // Flush all buffered docs\n    if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n      Position doc = null;\n      for(Position pos : pending) {\n        if (doc == null) {\n          doc = pos;\n          // if (DEBUG) System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        } else if (doc.docID != pos.docID) {\n          assert pos.docID > doc.docID;\n          // if (DEBUG) System.out.println(\"PW: wrapped.finishDoc\");\n          wrappedPostingsWriter.finishDoc();\n          doc = pos;\n          // if (DEBUG) System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        }\n        // if (DEBUG) System.out.println(\"PW:   wrapped.addPos pos=\" + pos.pos);\n        wrappedPostingsWriter.addPosition(pos.pos, pos.payload, pos.startOffset, pos.endOffset);\n      }\n      //wrappedPostingsWriter.finishDoc();\n    } else {\n      for(Position doc : pending) {\n        wrappedPostingsWriter.startDoc(doc.docID, indexOptions == IndexOptions.DOCS_ONLY ? 0 : doc.termFreq);\n      }\n    }\n    pendingCount = -1;\n  }\n\n","sourceOld":"  // Pushes pending positions to the wrapped codec\n  private void push() throws IOException {\n    // if (DEBUG) System.out.println(\"PW now push @ \" + pendingCount + \" wrapped=\" + wrappedPostingsWriter);\n    assert pendingCount == pending.length;\n      \n    wrappedPostingsWriter.startTerm();\n      \n    // Flush all buffered docs\n    if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n      Position doc = null;\n      for(Position pos : pending) {\n        if (doc == null) {\n          doc = pos;\n          // if (DEBUG) System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        } else if (doc.docID != pos.docID) {\n          assert pos.docID > doc.docID;\n          // if (DEBUG) System.out.println(\"PW: wrapped.finishDoc\");\n          wrappedPostingsWriter.finishDoc();\n          doc = pos;\n          // if (DEBUG) System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        }\n        // if (DEBUG) System.out.println(\"PW:   wrapped.addPos pos=\" + pos.pos);\n        wrappedPostingsWriter.addPosition(pos.pos, pos.payload, pos.startOffset, pos.endOffset);\n      }\n      //wrappedPostingsWriter.finishDoc();\n    } else {\n      for(Position doc : pending) {\n        wrappedPostingsWriter.startDoc(doc.docID, indexOptions == IndexOptions.DOCS_ONLY ? 0 : doc.termFreq);\n      }\n    }\n    pendingCount = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#push().mjava","sourceNew":null,"sourceOld":"  // Pushes pending positions to the wrapped codec\n  private void push() throws IOException {\n    // if (DEBUG) System.out.println(\"PW now push @ \" + pendingCount + \" wrapped=\" + wrappedPostingsWriter);\n    assert pendingCount == pending.length;\n      \n    wrappedPostingsWriter.startTerm();\n      \n    // Flush all buffered docs\n    if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n      Position doc = null;\n      for(Position pos : pending) {\n        if (doc == null) {\n          doc = pos;\n          // if (DEBUG) System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        } else if (doc.docID != pos.docID) {\n          assert pos.docID > doc.docID;\n          // if (DEBUG) System.out.println(\"PW: wrapped.finishDoc\");\n          wrappedPostingsWriter.finishDoc();\n          doc = pos;\n          // if (DEBUG) System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        }\n        // if (DEBUG) System.out.println(\"PW:   wrapped.addPos pos=\" + pos.pos);\n        wrappedPostingsWriter.addPosition(pos.pos, pos.payload, pos.startOffset, pos.endOffset);\n      }\n      //wrappedPostingsWriter.finishDoc();\n    } else {\n      for(Position doc : pending) {\n        wrappedPostingsWriter.startDoc(doc.docID, indexOptions == IndexOptions.DOCS_ONLY ? 0 : doc.termFreq);\n      }\n    }\n    pendingCount = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"]},"commit2Childs":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}