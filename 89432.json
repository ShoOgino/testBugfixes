{"path":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        DimensionalValues values = reader.getDimensionalValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = planetModel.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        int[] hitCount = new int[1];\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                             hitCount[0]++;\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DUtil.decodeValueCenter(planetMax, BKDUtil.bytesToInt(packedValue, 0));\n                             double y = Geo3DUtil.decodeValueCenter(planetMax, BKDUtil.bytesToInt(packedValue, 1));\n                             double z = Geo3DUtil.decodeValueCenter(planetMax, BKDUtil.bytesToInt(packedValue, 2));\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                               hitCount[0]++;\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, BKDUtil.bytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, BKDUtil.bytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, BKDUtil.bytesToInt(minPackedValue, 1));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, BKDUtil.bytesToInt(maxPackedValue, 1));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, BKDUtil.bytesToInt(minPackedValue, 2));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, BKDUtil.bytesToInt(maxPackedValue, 2));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        // NOTE: hitCount[0] will be over-estimate in multi-valued case\n        return new ConstantScoreScorer(this, score(), result.build(hitCount[0]).iterator());\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        DimensionalValues values = reader.getDimensionalValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = planetModel.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        int[] hitCount = new int[1];\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                             hitCount[0]++;\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DUtil.decodeValueCenter(planetMax, NumericUtils.bytesToInt(packedValue, 0));\n                             double y = Geo3DUtil.decodeValueCenter(planetMax, NumericUtils.bytesToInt(packedValue, 1));\n                             double z = Geo3DUtil.decodeValueCenter(planetMax, NumericUtils.bytesToInt(packedValue, 2));\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                               hitCount[0]++;\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 1));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 1));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 2));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 2));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        // NOTE: hitCount[0] will be over-estimate in multi-valued case\n        return new ConstantScoreScorer(this, score(), result.build(hitCount[0]).iterator());\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        DimensionalValues values = reader.getDimensionalValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = planetModel.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        int[] hitCount = new int[1];\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                             hitCount[0]++;\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DUtil.decodeValueCenter(planetMax, BKDUtil.bytesToInt(packedValue, 0));\n                             double y = Geo3DUtil.decodeValueCenter(planetMax, BKDUtil.bytesToInt(packedValue, 1));\n                             double z = Geo3DUtil.decodeValueCenter(planetMax, BKDUtil.bytesToInt(packedValue, 2));\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                               hitCount[0]++;\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, BKDUtil.bytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, BKDUtil.bytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, BKDUtil.bytesToInt(minPackedValue, 1));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, BKDUtil.bytesToInt(maxPackedValue, 1));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, BKDUtil.bytesToInt(minPackedValue, 2));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, BKDUtil.bytesToInt(maxPackedValue, 2));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        // NOTE: hitCount[0] will be over-estimate in multi-valued case\n        return new ConstantScoreScorer(this, score(), result.build(hitCount[0]).iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = planetModel.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        int[] hitCount = new int[1];\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                             hitCount[0]++;\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DUtil.decodeValueCenter(planetMax, NumericUtils.bytesToInt(packedValue, 0));\n                             double y = Geo3DUtil.decodeValueCenter(planetMax, NumericUtils.bytesToInt(packedValue, 1));\n                             double z = Geo3DUtil.decodeValueCenter(planetMax, NumericUtils.bytesToInt(packedValue, 2));\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                               hitCount[0]++;\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 1));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 1));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 2));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 2));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        // NOTE: hitCount[0] will be over-estimate in multi-valued case\n        return new ConstantScoreScorer(this, score(), result.build(hitCount[0]).iterator());\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        DimensionalValues values = reader.getDimensionalValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = planetModel.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        int[] hitCount = new int[1];\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                             hitCount[0]++;\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DUtil.decodeValueCenter(planetMax, NumericUtils.bytesToInt(packedValue, 0));\n                             double y = Geo3DUtil.decodeValueCenter(planetMax, NumericUtils.bytesToInt(packedValue, 1));\n                             double z = Geo3DUtil.decodeValueCenter(planetMax, NumericUtils.bytesToInt(packedValue, 2));\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                               hitCount[0]++;\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 1));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 1));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 2));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 2));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        // NOTE: hitCount[0] will be over-estimate in multi-valued case\n        return new ConstantScoreScorer(this, score(), result.build(hitCount[0]).iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f226a8b088dd9c8f6ab287a77237c4aa00a238e5","date":1456187572,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = planetModel.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        int[] hitCount = new int[1];\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                             hitCount[0]++;\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DUtil.decodeValueCenter(planetMax, NumericUtils.bytesToInt(packedValue, 0));\n                             double y = Geo3DUtil.decodeValueCenter(planetMax, NumericUtils.bytesToInt(packedValue, 1 * Integer.BYTES));\n                             double z = Geo3DUtil.decodeValueCenter(planetMax, NumericUtils.bytesToInt(packedValue, 2 * Integer.BYTES));\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                               hitCount[0]++;\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 1 * Integer.BYTES));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 1 * Integer.BYTES));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 2 * Integer.BYTES));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 2 * Integer.BYTES));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        // NOTE: hitCount[0] will be over-estimate in multi-valued case\n        return new ConstantScoreScorer(this, score(), result.build(hitCount[0]).iterator());\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = planetModel.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        int[] hitCount = new int[1];\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                             hitCount[0]++;\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DUtil.decodeValueCenter(planetMax, NumericUtils.bytesToInt(packedValue, 0));\n                             double y = Geo3DUtil.decodeValueCenter(planetMax, NumericUtils.bytesToInt(packedValue, 1));\n                             double z = Geo3DUtil.decodeValueCenter(planetMax, NumericUtils.bytesToInt(packedValue, 2));\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                               hitCount[0]++;\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 1));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 1));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 2));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 2));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        // NOTE: hitCount[0] will be over-estimate in multi-valued case\n        return new ConstantScoreScorer(this, score(), result.build(hitCount[0]).iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = planetModel.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        int[] hitCount = new int[1];\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                             hitCount[0]++;\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DUtil.decodeValueCenter(planetMax, NumericUtils.bytesToInt(packedValue, 0));\n                             double y = Geo3DUtil.decodeValueCenter(planetMax, NumericUtils.bytesToInt(packedValue, 1 * Integer.BYTES));\n                             double z = Geo3DUtil.decodeValueCenter(planetMax, NumericUtils.bytesToInt(packedValue, 2 * Integer.BYTES));\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                               hitCount[0]++;\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 1 * Integer.BYTES));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 1 * Integer.BYTES));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 2 * Integer.BYTES));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 2 * Integer.BYTES));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        // NOTE: hitCount[0] will be over-estimate in multi-valued case\n        return new ConstantScoreScorer(this, score(), result.build(hitCount[0]).iterator());\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = planetModel.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        int[] hitCount = new int[1];\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                             hitCount[0]++;\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DUtil.decodeValueCenter(planetMax, NumericUtils.bytesToInt(packedValue, 0));\n                             double y = Geo3DUtil.decodeValueCenter(planetMax, NumericUtils.bytesToInt(packedValue, 1));\n                             double z = Geo3DUtil.decodeValueCenter(planetMax, NumericUtils.bytesToInt(packedValue, 2));\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                               hitCount[0]++;\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 1));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 1));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 2));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 2));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        // NOTE: hitCount[0] will be over-estimate in multi-valued case\n        return new ConstantScoreScorer(this, score(), result.build(hitCount[0]).iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf8357a0b6e20da8f78592ec8e53dbd375b1026b","date":1456330381,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = planetModel.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        int[] hitCount = new int[1];\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                             hitCount[0]++;\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DPoint.decodeDimension(planetModel, packedValue, 0);\n                             double y = Geo3DPoint.decodeDimension(planetModel, packedValue, Integer.BYTES);\n                             double z = Geo3DPoint.decodeDimension(planetModel, packedValue, 2 * Integer.BYTES);\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                               hitCount[0]++;\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 1 * Integer.BYTES));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 1 * Integer.BYTES));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 2 * Integer.BYTES));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 2 * Integer.BYTES));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        // NOTE: hitCount[0] will be over-estimate in multi-valued case\n        return new ConstantScoreScorer(this, score(), result.build(hitCount[0]).iterator());\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = planetModel.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        int[] hitCount = new int[1];\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                             hitCount[0]++;\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DUtil.decodeValueCenter(planetMax, NumericUtils.bytesToInt(packedValue, 0));\n                             double y = Geo3DUtil.decodeValueCenter(planetMax, NumericUtils.bytesToInt(packedValue, 1 * Integer.BYTES));\n                             double z = Geo3DUtil.decodeValueCenter(planetMax, NumericUtils.bytesToInt(packedValue, 2 * Integer.BYTES));\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                               hitCount[0]++;\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 1 * Integer.BYTES));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 1 * Integer.BYTES));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 2 * Integer.BYTES));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 2 * Integer.BYTES));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        // NOTE: hitCount[0] will be over-estimate in multi-valued case\n        return new ConstantScoreScorer(this, score(), result.build(hitCount[0]).iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e79a60784094f4a1d4e4b03b3e8086bf55d3eeed","date":1456346320,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = planetModel.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        int[] hitCount = new int[1];\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                             hitCount[0]++;\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DPoint.decodeDimension(planetModel, packedValue, 0);\n                             double y = Geo3DPoint.decodeDimension(planetModel, packedValue, Integer.BYTES);\n                             double z = Geo3DPoint.decodeDimension(planetModel, packedValue, 2 * Integer.BYTES);\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                               hitCount[0]++;\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 1 * Integer.BYTES));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 1 * Integer.BYTES));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 2 * Integer.BYTES));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 2 * Integer.BYTES));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        // NOTE: hitCount[0] will be over-estimate in multi-valued case\n        return new ConstantScoreScorer(this, score(), result.build(hitCount[0]).iterator());\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = planetModel.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        int[] hitCount = new int[1];\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                             hitCount[0]++;\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DUtil.decodeValueCenter(planetMax, NumericUtils.bytesToInt(packedValue, 0));\n                             double y = Geo3DUtil.decodeValueCenter(planetMax, NumericUtils.bytesToInt(packedValue, 1 * Integer.BYTES));\n                             double z = Geo3DUtil.decodeValueCenter(planetMax, NumericUtils.bytesToInt(packedValue, 2 * Integer.BYTES));\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                               hitCount[0]++;\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 1 * Integer.BYTES));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 1 * Integer.BYTES));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 2 * Integer.BYTES));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 2 * Integer.BYTES));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        // NOTE: hitCount[0] will be over-estimate in multi-valued case\n        return new ConstantScoreScorer(this, score(), result.build(hitCount[0]).iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b63007489248c99b5cdc766ce55938891f5d969","date":1456737032,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = planetModel.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DPoint.decodeDimension(planetModel, packedValue, 0);\n                             double y = Geo3DPoint.decodeDimension(planetModel, packedValue, Integer.BYTES);\n                             double z = Geo3DPoint.decodeDimension(planetModel, packedValue, 2 * Integer.BYTES);\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 1 * Integer.BYTES));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 1 * Integer.BYTES));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 2 * Integer.BYTES));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 2 * Integer.BYTES));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = planetModel.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        int[] hitCount = new int[1];\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                             hitCount[0]++;\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DPoint.decodeDimension(planetModel, packedValue, 0);\n                             double y = Geo3DPoint.decodeDimension(planetModel, packedValue, Integer.BYTES);\n                             double z = Geo3DPoint.decodeDimension(planetModel, packedValue, 2 * Integer.BYTES);\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                               hitCount[0]++;\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 1 * Integer.BYTES));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 1 * Integer.BYTES));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 2 * Integer.BYTES));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 2 * Integer.BYTES));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        // NOTE: hitCount[0] will be over-estimate in multi-valued case\n        return new ConstantScoreScorer(this, score(), result.build(hitCount[0]).iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = planetModel.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DPoint.decodeDimension(planetModel, packedValue, 0);\n                             double y = Geo3DPoint.decodeDimension(planetModel, packedValue, Integer.BYTES);\n                             double z = Geo3DPoint.decodeDimension(planetModel, packedValue, 2 * Integer.BYTES);\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 1 * Integer.BYTES));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 1 * Integer.BYTES));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 2 * Integer.BYTES));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 2 * Integer.BYTES));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = planetModel.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        int[] hitCount = new int[1];\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                             hitCount[0]++;\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DPoint.decodeDimension(planetModel, packedValue, 0);\n                             double y = Geo3DPoint.decodeDimension(planetModel, packedValue, Integer.BYTES);\n                             double z = Geo3DPoint.decodeDimension(planetModel, packedValue, 2 * Integer.BYTES);\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                               hitCount[0]++;\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 1 * Integer.BYTES));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 1 * Integer.BYTES));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 2 * Integer.BYTES));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 2 * Integer.BYTES));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        // NOTE: hitCount[0] will be over-estimate in multi-valued case\n        return new ConstantScoreScorer(this, score(), result.build(hitCount[0]).iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb","date":1457059932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = planetModel.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DPoint.decodeDimension(planetModel, packedValue, 0);\n                             double y = Geo3DPoint.decodeDimension(planetModel, packedValue, Integer.BYTES);\n                             double z = Geo3DPoint.decodeDimension(planetModel, packedValue, 2 * Integer.BYTES);\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 1 * Integer.BYTES));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 1 * Integer.BYTES));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 2 * Integer.BYTES));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 2 * Integer.BYTES));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = planetModel.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DPoint.decodeDimension(planetModel, packedValue, 0);\n                             double y = Geo3DPoint.decodeDimension(planetModel, packedValue, Integer.BYTES);\n                             double z = Geo3DPoint.decodeDimension(planetModel, packedValue, 2 * Integer.BYTES);\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 1 * Integer.BYTES));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 1 * Integer.BYTES));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 2 * Integer.BYTES));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 2 * Integer.BYTES));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","bugFix":["f226a8b088dd9c8f6ab287a77237c4aa00a238e5","770342641f7b505eaa8dccdc666158bff2419109"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = planetModel.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DPoint.decodeDimension(planetModel, packedValue, 0);\n                             double y = Geo3DPoint.decodeDimension(planetModel, packedValue, Integer.BYTES);\n                             double z = Geo3DPoint.decodeDimension(planetModel, packedValue, 2 * Integer.BYTES);\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 1 * Integer.BYTES));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 1 * Integer.BYTES));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 2 * Integer.BYTES));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 2 * Integer.BYTES));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = planetModel.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DPoint.decodeDimension(planetModel, packedValue, 0);\n                             double y = Geo3DPoint.decodeDimension(planetModel, packedValue, Integer.BYTES);\n                             double z = Geo3DPoint.decodeDimension(planetModel, packedValue, 2 * Integer.BYTES);\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 1 * Integer.BYTES));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 1 * Integer.BYTES));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.bytesToInt(minPackedValue, 2 * Integer.BYTES));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.bytesToInt(maxPackedValue, 2 * Integer.BYTES));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"171684e0272517c4ed0b7e61af869397e512d8e5","date":1457346184,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = PlanetModel.WGS84.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DPoint.decodeDimension(packedValue, 0);\n                             double y = Geo3DPoint.decodeDimension(packedValue, Integer.BYTES);\n                             double z = Geo3DPoint.decodeDimension(packedValue, 2 * Integer.BYTES);\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 1 * Integer.BYTES));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 1 * Integer.BYTES));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 2 * Integer.BYTES));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 2 * Integer.BYTES));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = planetModel.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DPoint.decodeDimension(planetModel, packedValue, 0);\n                             double y = Geo3DPoint.decodeDimension(planetModel, packedValue, Integer.BYTES);\n                             double z = Geo3DPoint.decodeDimension(planetModel, packedValue, 2 * Integer.BYTES);\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 1 * Integer.BYTES));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 1 * Integer.BYTES));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 2 * Integer.BYTES));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 2 * Integer.BYTES));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = PlanetModel.WGS84.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DPoint.decodeDimension(packedValue, 0);\n                             double y = Geo3DPoint.decodeDimension(packedValue, Integer.BYTES);\n                             double z = Geo3DPoint.decodeDimension(packedValue, 2 * Integer.BYTES);\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 1 * Integer.BYTES));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 1 * Integer.BYTES));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 2 * Integer.BYTES));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 2 * Integer.BYTES));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = PlanetModel.WGS84.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DPoint.decodeDimension(packedValue, 0);\n                             double y = Geo3DPoint.decodeDimension(packedValue, Integer.BYTES);\n                             double z = Geo3DPoint.decodeDimension(packedValue, 2 * Integer.BYTES);\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 1 * Integer.BYTES));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 1 * Integer.BYTES));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 2 * Integer.BYTES));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 2 * Integer.BYTES));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["cf8357a0b6e20da8f78592ec8e53dbd375b1026b","2b63007489248c99b5cdc766ce55938891f5d969"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["770342641f7b505eaa8dccdc666158bff2419109"],"419a8f52c6635419beb951255cacbbb281044c57":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4e444678504caf66a8060b1d514383aa4feac0c":["171684e0272517c4ed0b7e61af869397e512d8e5"],"770342641f7b505eaa8dccdc666158bff2419109":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"cf8357a0b6e20da8f78592ec8e53dbd375b1026b":["419a8f52c6635419beb951255cacbbb281044c57"],"e79a60784094f4a1d4e4b03b3e8086bf55d3eeed":["419a8f52c6635419beb951255cacbbb281044c57","cf8357a0b6e20da8f78592ec8e53dbd375b1026b"],"171684e0272517c4ed0b7e61af869397e512d8e5":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b63007489248c99b5cdc766ce55938891f5d969":["cf8357a0b6e20da8f78592ec8e53dbd375b1026b"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["af2638813028b254a88b418ebeafb541afb49653","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["2b63007489248c99b5cdc766ce55938891f5d969"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["419a8f52c6635419beb951255cacbbb281044c57","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"419a8f52c6635419beb951255cacbbb281044c57":["cf8357a0b6e20da8f78592ec8e53dbd375b1026b","e79a60784094f4a1d4e4b03b3e8086bf55d3eeed"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["419a8f52c6635419beb951255cacbbb281044c57"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cf8357a0b6e20da8f78592ec8e53dbd375b1026b":["af2638813028b254a88b418ebeafb541afb49653","e79a60784094f4a1d4e4b03b3e8086bf55d3eeed","2b63007489248c99b5cdc766ce55938891f5d969"],"e79a60784094f4a1d4e4b03b3e8086bf55d3eeed":[],"171684e0272517c4ed0b7e61af869397e512d8e5":["b4e444678504caf66a8060b1d514383aa4feac0c"],"2b63007489248c99b5cdc766ce55938891f5d969":["af2638813028b254a88b418ebeafb541afb49653","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["171684e0272517c4ed0b7e61af869397e512d8e5"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e79a60784094f4a1d4e4b03b3e8086bf55d3eeed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}