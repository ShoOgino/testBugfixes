{"path":"src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorer3(Scorer,Scorer).mjava","commits":[{"id":"29d6eadc26bef1d3f5d3804b90cb7ba77162d007","date":1106594461,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorer3(Scorer,Scorer).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses the arguments and prohibitedScorers.\n   * @param requiredCountingSumScorer A required scorer already built.\n   * @param optionalCountingSumScorer An optional scorer already built.\n   */\n  private Scorer makeCountingSumScorer3(\n      Scorer requiredCountingSumScorer,\n      Scorer optionalCountingSumScorer)\n  {\n    if (prohibitedScorers.size() == 0) { // no prohibited\n      return new ReqOptSumScorer(requiredCountingSumScorer,\n                                 optionalCountingSumScorer);\n    } else if (prohibitedScorers.size() == 1) { // 1 prohibited\n      return new ReqOptSumScorer(\n                    new ReqExclScorer(requiredCountingSumScorer,\n                                      (Scorer) prohibitedScorers.get(0)),  // not match counting\n                    optionalCountingSumScorer);\n    } else { // more prohibited\n      return new ReqOptSumScorer(\n                    new ReqExclScorer(\n                          requiredCountingSumScorer,\n                          new DisjunctionSumScorer(prohibitedScorers)), // score unused. not match counting\n                    optionalCountingSumScorer);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6bffc7c3c9ddfcefe91b728c0680af2a3a96444","date":1132159199,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorer3(Scorer,Scorer).mjava","sourceNew":null,"sourceOld":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses the arguments and prohibitedScorers.\n   * @param requiredCountingSumScorer A required scorer already built.\n   * @param optionalCountingSumScorer An optional scorer already built.\n   */\n  private Scorer makeCountingSumScorer3(\n      Scorer requiredCountingSumScorer,\n      Scorer optionalCountingSumScorer)\n  {\n    if (prohibitedScorers.size() == 0) { // no prohibited\n      return new ReqOptSumScorer(requiredCountingSumScorer,\n                                 optionalCountingSumScorer);\n    } else if (prohibitedScorers.size() == 1) { // 1 prohibited\n      return new ReqOptSumScorer(\n                    new ReqExclScorer(requiredCountingSumScorer,\n                                      (Scorer) prohibitedScorers.get(0)),  // not match counting\n                    optionalCountingSumScorer);\n    } else { // more prohibited\n      return new ReqOptSumScorer(\n                    new ReqExclScorer(\n                          requiredCountingSumScorer,\n                          new DisjunctionSumScorer(prohibitedScorers)), // score unused. not match counting\n                    optionalCountingSumScorer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6bffc7c3c9ddfcefe91b728c0680af2a3a96444":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6bffc7c3c9ddfcefe91b728c0680af2a3a96444"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"b6bffc7c3c9ddfcefe91b728c0680af2a3a96444":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["b6bffc7c3c9ddfcefe91b728c0680af2a3a96444"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}