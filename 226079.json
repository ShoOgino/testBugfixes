{"path":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#testCompileBackwards().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#testCompileBackwards().mjava","pathOld":"modules/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#testCompileBackwards().mjava","sourceNew":"  public void testCompileBackwards() throws Exception {\n    URI uri = getClass().getResource(\"testRules.txt\").toURI();\n    String path = uri.getPath();\n    Compile.main(new String[] {\"-test\", path});\n    String compiled = path + \".out\";\n    Trie trie = loadTrie(compiled);\n    assertTrie(trie, path, true, true);\n    assertTrie(trie, path, false, true);\n    new File(compiled).delete();\n  }\n\n","sourceOld":"  public void testCompileBackwards() throws Exception {\n    URI uri = getClass().getResource(\"testRules.txt\").toURI();\n    String path = uri.getPath();\n    Compile.main(new String[] {\"-test\", path});\n    String compiled = path + \".out\";\n    Trie trie = loadTrie(compiled);\n    assertTrie(trie, path, true, true);\n    assertTrie(trie, path, false, true);\n    new File(compiled).delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3123be0c46a5ed1c1a40d102db7c24106694c35","date":1355608257,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#testCompileBackwards().mjava","pathOld":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#testCompileBackwards().mjava","sourceNew":"  public void testCompileBackwards() throws Exception {\n    File dir = _TestUtil.getTempDir(\"testCompile\");\n    dir.mkdirs();\n    InputStream input = getClass().getResourceAsStream(\"testRules.txt\");\n    File output = new File(dir, \"testRules.txt\");\n    copy(input, output);\n    input.close();\n    String path = output.getAbsolutePath();\n    Compile.main(new String[] {\"-test\", path});\n    String compiled = path + \".out\";\n    Trie trie = loadTrie(compiled);\n    assertTrie(trie, path, true, true);\n    assertTrie(trie, path, false, true);\n    new File(compiled).delete();\n  }\n\n","sourceOld":"  public void testCompileBackwards() throws Exception {\n    URI uri = getClass().getResource(\"testRules.txt\").toURI();\n    String path = uri.getPath();\n    Compile.main(new String[] {\"-test\", path});\n    String compiled = path + \".out\";\n    Trie trie = loadTrie(compiled);\n    assertTrie(trie, path, true, true);\n    assertTrie(trie, path, false, true);\n    new File(compiled).delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#testCompileBackwards().mjava","pathOld":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#testCompileBackwards().mjava","sourceNew":"  public void testCompileBackwards() throws Exception {\n    File dir = _TestUtil.getTempDir(\"testCompile\");\n    dir.mkdirs();\n    InputStream input = getClass().getResourceAsStream(\"testRules.txt\");\n    File output = new File(dir, \"testRules.txt\");\n    copy(input, output);\n    input.close();\n    String path = output.getAbsolutePath();\n    Compile.main(new String[] {\"-test\", path});\n    String compiled = path + \".out\";\n    Trie trie = loadTrie(compiled);\n    assertTrie(trie, path, true, true);\n    assertTrie(trie, path, false, true);\n    new File(compiled).delete();\n  }\n\n","sourceOld":"  public void testCompileBackwards() throws Exception {\n    URI uri = getClass().getResource(\"testRules.txt\").toURI();\n    String path = uri.getPath();\n    Compile.main(new String[] {\"-test\", path});\n    String compiled = path + \".out\";\n    Trie trie = loadTrie(compiled);\n    assertTrie(trie, path, true, true);\n    assertTrie(trie, path, false, true);\n    new File(compiled).delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#testCompileBackwards().mjava","pathOld":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#testCompileBackwards().mjava","sourceNew":"  public void testCompileBackwards() throws Exception {\n    File dir = TestUtil.getTempDir(\"testCompile\");\n    dir.mkdirs();\n    InputStream input = getClass().getResourceAsStream(\"testRules.txt\");\n    File output = new File(dir, \"testRules.txt\");\n    copy(input, output);\n    input.close();\n    String path = output.getAbsolutePath();\n    Compile.main(new String[] {\"-test\", path});\n    String compiled = path + \".out\";\n    Trie trie = loadTrie(compiled);\n    assertTrie(trie, path, true, true);\n    assertTrie(trie, path, false, true);\n    new File(compiled).delete();\n  }\n\n","sourceOld":"  public void testCompileBackwards() throws Exception {\n    File dir = _TestUtil.getTempDir(\"testCompile\");\n    dir.mkdirs();\n    InputStream input = getClass().getResourceAsStream(\"testRules.txt\");\n    File output = new File(dir, \"testRules.txt\");\n    copy(input, output);\n    input.close();\n    String path = output.getAbsolutePath();\n    Compile.main(new String[] {\"-test\", path});\n    String compiled = path + \".out\";\n    Trie trie = loadTrie(compiled);\n    assertTrie(trie, path, true, true);\n    assertTrie(trie, path, false, true);\n    new File(compiled).delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#testCompileBackwards().mjava","pathOld":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#testCompileBackwards().mjava","sourceNew":"  public void testCompileBackwards() throws Exception {\n    File dir = TestUtil.createTempDir(\"testCompile\");\n    dir.mkdirs();\n    InputStream input = getClass().getResourceAsStream(\"testRules.txt\");\n    File output = new File(dir, \"testRules.txt\");\n    copy(input, output);\n    input.close();\n    String path = output.getAbsolutePath();\n    Compile.main(new String[] {\"-test\", path});\n    String compiled = path + \".out\";\n    Trie trie = loadTrie(compiled);\n    assertTrie(trie, path, true, true);\n    assertTrie(trie, path, false, true);\n    new File(compiled).delete();\n  }\n\n","sourceOld":"  public void testCompileBackwards() throws Exception {\n    File dir = TestUtil.getTempDir(\"testCompile\");\n    dir.mkdirs();\n    InputStream input = getClass().getResourceAsStream(\"testRules.txt\");\n    File output = new File(dir, \"testRules.txt\");\n    copy(input, output);\n    input.close();\n    String path = output.getAbsolutePath();\n    Compile.main(new String[] {\"-test\", path});\n    String compiled = path + \".out\";\n    Trie trie = loadTrie(compiled);\n    assertTrie(trie, path, true, true);\n    assertTrie(trie, path, false, true);\n    new File(compiled).delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#testCompileBackwards().mjava","pathOld":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#testCompileBackwards().mjava","sourceNew":"  public void testCompileBackwards() throws Exception {\n    File dir = createTempDir(\"testCompile\");\n    dir.mkdirs();\n    InputStream input = getClass().getResourceAsStream(\"testRules.txt\");\n    File output = new File(dir, \"testRules.txt\");\n    copy(input, output);\n    input.close();\n    String path = output.getAbsolutePath();\n    Compile.main(new String[] {\"-test\", path});\n    String compiled = path + \".out\";\n    Trie trie = loadTrie(compiled);\n    assertTrie(trie, path, true, true);\n    assertTrie(trie, path, false, true);\n    new File(compiled).delete();\n  }\n\n","sourceOld":"  public void testCompileBackwards() throws Exception {\n    File dir = TestUtil.createTempDir(\"testCompile\");\n    dir.mkdirs();\n    InputStream input = getClass().getResourceAsStream(\"testRules.txt\");\n    File output = new File(dir, \"testRules.txt\");\n    copy(input, output);\n    input.close();\n    String path = output.getAbsolutePath();\n    Compile.main(new String[] {\"-test\", path});\n    String compiled = path + \".out\";\n    Trie trie = loadTrie(compiled);\n    assertTrie(trie, path, true, true);\n    assertTrie(trie, path, false, true);\n    new File(compiled).delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#testCompileBackwards().mjava","pathOld":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#testCompileBackwards().mjava","sourceNew":"  public void testCompileBackwards() throws Exception {\n    File dir = createTempDir(\"testCompile\");\n    dir.mkdirs();\n    InputStream input = getClass().getResourceAsStream(\"testRules.txt\");\n    File output = new File(dir, \"testRules.txt\");\n    copy(input, output);\n    input.close();\n    String path = output.getAbsolutePath();\n    Compile.main(new String[] {\"-test\", path});\n    String compiled = path + \".out\";\n    Trie trie = loadTrie(compiled);\n    assertTrie(trie, path, true, true);\n    assertTrie(trie, path, false, true);\n    new File(compiled).delete();\n  }\n\n","sourceOld":"  public void testCompileBackwards() throws Exception {\n    File dir = TestUtil.getTempDir(\"testCompile\");\n    dir.mkdirs();\n    InputStream input = getClass().getResourceAsStream(\"testRules.txt\");\n    File output = new File(dir, \"testRules.txt\");\n    copy(input, output);\n    input.close();\n    String path = output.getAbsolutePath();\n    Compile.main(new String[] {\"-test\", path});\n    String compiled = path + \".out\";\n    Trie trie = loadTrie(compiled);\n    assertTrie(trie, path, true, true);\n    assertTrie(trie, path, false, true);\n    new File(compiled).delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#testCompileBackwards().mjava","pathOld":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#testCompileBackwards().mjava","sourceNew":"  public void testCompileBackwards() throws Exception {\n    File dir = createTempDir(\"testCompile\");\n    dir.mkdirs();\n    InputStream input = getClass().getResourceAsStream(\"testRules.txt\");\n    File output = new File(dir, \"testRules.txt\");\n    copy(input, output);\n    input.close();\n    String path = output.getAbsolutePath();\n    Compile.main(new String[] {\"-test\", path});\n    String compiled = path + \".out\";\n    Trie trie = loadTrie(compiled);\n    assertTrie(trie, path, true, true);\n    assertTrie(trie, path, false, true);\n    Files.delete(new File(compiled).toPath());\n  }\n\n","sourceOld":"  public void testCompileBackwards() throws Exception {\n    File dir = createTempDir(\"testCompile\");\n    dir.mkdirs();\n    InputStream input = getClass().getResourceAsStream(\"testRules.txt\");\n    File output = new File(dir, \"testRules.txt\");\n    copy(input, output);\n    input.close();\n    String path = output.getAbsolutePath();\n    Compile.main(new String[] {\"-test\", path});\n    String compiled = path + \".out\";\n    Trie trie = loadTrie(compiled);\n    assertTrie(trie, path, true, true);\n    assertTrie(trie, path, false, true);\n    new File(compiled).delete();\n  }\n\n","bugFix":["67748b41458c73d49a48168362cc7f4c960a2542"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#testCompileBackwards().mjava","pathOld":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#testCompileBackwards().mjava","sourceNew":"  public void testCompileBackwards() throws Exception {\n    Path dir = createTempDir(\"testCompile\");\n    Path output = dir.resolve(\"testRules.txt\");\n    try (InputStream input = getClass().getResourceAsStream(\"testRules.txt\")) {\n      Files.copy(input, output);\n    }\n    String path = output.toAbsolutePath().toString();\n    Compile.main(new String[] {\"-test\", path});\n    Path compiled = dir.resolve(\"testRules.txt.out\");\n    Trie trie = loadTrie(compiled);\n    assertTrie(trie, output, true, true);\n    assertTrie(trie, output, false, true);\n  }\n\n","sourceOld":"  public void testCompileBackwards() throws Exception {\n    File dir = createTempDir(\"testCompile\");\n    dir.mkdirs();\n    InputStream input = getClass().getResourceAsStream(\"testRules.txt\");\n    File output = new File(dir, \"testRules.txt\");\n    copy(input, output);\n    input.close();\n    String path = output.getAbsolutePath();\n    Compile.main(new String[] {\"-test\", path});\n    String compiled = path + \".out\";\n    Trie trie = loadTrie(compiled);\n    assertTrie(trie, path, true, true);\n    assertTrie(trie, path, false, true);\n    Files.delete(new File(compiled).toPath());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","e3123be0c46a5ed1c1a40d102db7c24106694c35"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["e3123be0c46a5ed1c1a40d102db7c24106694c35"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"e3123be0c46a5ed1c1a40d102db7c24106694c35":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","e3123be0c46a5ed1c1a40d102db7c24106694c35"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["f4abec28b874149a7223e32cc7a01704c27790de"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e3123be0c46a5ed1c1a40d102db7c24106694c35":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}