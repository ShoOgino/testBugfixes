{"path":"lucene/src/java/org/apache/lucene/search/FieldCache#getLongs(AtomicReader,String,LongParser,boolean).mjava","commits":[{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCache#getLongs(AtomicReader,String,LongParser,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCache#getLongs(AtomicIndexReader,String,LongParser,boolean).mjava","sourceNew":"  /**\n   * Checks the internal cache for an appropriate entry, and if none is found,\n   * reads the terms in <code>field</code> as longs and returns an array of\n   * size <code>reader.maxDoc()</code> of the value each document has in the\n   * given field.\n   *\n   * @param reader Used to get field values.\n   * @param field  Which field contains the longs.\n   * @param parser Computes integer for string values.\n   * @param setDocsWithField  If true then {@link #getDocsWithField} will\n   *        also be computed and stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException If any error occurs.\n   */\n  public long[] getLongs(AtomicReader reader, String field, LongParser parser, boolean setDocsWithField)\n          throws IOException;\n\n","sourceOld":"  /**\n   * Checks the internal cache for an appropriate entry, and if none is found,\n   * reads the terms in <code>field</code> as longs and returns an array of\n   * size <code>reader.maxDoc()</code> of the value each document has in the\n   * given field.\n   *\n   * @param reader Used to get field values.\n   * @param field  Which field contains the longs.\n   * @param parser Computes integer for string values.\n   * @param setDocsWithField  If true then {@link #getDocsWithField} will\n   *        also be computed and stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException If any error occurs.\n   */\n  public long[] getLongs(AtomicIndexReader reader, String field, LongParser parser, boolean setDocsWithField)\n          throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCache#getLongs(AtomicReader,String,LongParser,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCache#getLongs(IndexReader,String,LongParser,boolean).mjava","sourceNew":"  /**\n   * Checks the internal cache for an appropriate entry, and if none is found,\n   * reads the terms in <code>field</code> as longs and returns an array of\n   * size <code>reader.maxDoc()</code> of the value each document has in the\n   * given field.\n   *\n   * @param reader Used to get field values.\n   * @param field  Which field contains the longs.\n   * @param parser Computes integer for string values.\n   * @param setDocsWithField  If true then {@link #getDocsWithField} will\n   *        also be computed and stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException If any error occurs.\n   */\n  public long[] getLongs(AtomicReader reader, String field, LongParser parser, boolean setDocsWithField)\n          throws IOException;\n\n","sourceOld":"  /**\n   * Checks the internal cache for an appropriate entry, and if none is found,\n   * reads the terms in <code>field</code> as longs and returns an array of\n   * size <code>reader.maxDoc()</code> of the value each document has in the\n   * given field.\n   *\n   * @param reader Used to get field values.\n   * @param field  Which field contains the longs.\n   * @param parser Computes integer for string values.\n   * @param setDocsWithField  If true then {@link #getDocsWithField} will\n   *        also be computed and stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException If any error occurs.\n   */\n  public long[] getLongs(IndexReader reader, String field, LongParser parser, boolean setDocsWithField)\n          throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getLongs(AtomicReader,String,LongParser,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCache#getLongs(AtomicReader,String,LongParser,boolean).mjava","sourceNew":"  /**\n   * Checks the internal cache for an appropriate entry, and if none is found,\n   * reads the terms in <code>field</code> as longs and returns an array of\n   * size <code>reader.maxDoc()</code> of the value each document has in the\n   * given field.\n   *\n   * @param reader Used to get field values.\n   * @param field  Which field contains the longs.\n   * @param parser Computes integer for string values.\n   * @param setDocsWithField  If true then {@link #getDocsWithField} will\n   *        also be computed and stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException If any error occurs.\n   */\n  public long[] getLongs(AtomicReader reader, String field, LongParser parser, boolean setDocsWithField)\n          throws IOException;\n\n","sourceOld":"  /**\n   * Checks the internal cache for an appropriate entry, and if none is found,\n   * reads the terms in <code>field</code> as longs and returns an array of\n   * size <code>reader.maxDoc()</code> of the value each document has in the\n   * given field.\n   *\n   * @param reader Used to get field values.\n   * @param field  Which field contains the longs.\n   * @param parser Computes integer for string values.\n   * @param setDocsWithField  If true then {@link #getDocsWithField} will\n   *        also be computed and stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException If any error occurs.\n   */\n  public long[] getLongs(AtomicReader reader, String field, LongParser parser, boolean setDocsWithField)\n          throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da6d5ac19a80d65b1e864251f155d30960353b7e","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}