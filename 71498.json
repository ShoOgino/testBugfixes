{"path":"solr/core/src/test/org/apache/solr/update/processor/CategoryRoutedAliasUpdateProcessorTest#testMaxCardinality().mjava","commits":[{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":0,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/CategoryRoutedAliasUpdateProcessorTest#testMaxCardinality().mjava","pathOld":"/dev/null","sourceNew":"  @Slow\n  @Test\n  public void testMaxCardinality() throws Exception {\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    final int maxCardinality = 2; // max cardinality for current test\n\n    // Start with one collection manually created (and use higher numShards & replicas than we'll use for others)\n    //  This tests we may pre-create the collection and it's acceptable.\n    final String colVogon = getAlias() + \"__CRA__\" + SHIPS[0];\n\n    // we expect changes ensuring a legal collection name.\n    final String colHoG = getAlias() + \"__CRA__\" + SHIPS[1].replaceAll(\"\\\\s\", \"_\");\n\n    List<String> retrievedConfigSetNames = new ConfigSetAdminRequest.List().process(solrClient).getConfigSets();\n    List<String> expectedConfigSetNames = Arrays.asList(\"_default\", configName);\n\n    // config sets leak between tests so we can't be any more specific than this on the next 2 asserts\n    assertTrue(\"We expect at least 2 configSets\",\n        retrievedConfigSetNames.size() >= expectedConfigSetNames.size());\n    assertTrue(\"ConfigNames should include :\" + expectedConfigSetNames, retrievedConfigSetNames.containsAll(expectedConfigSetNames));\n\n    CollectionAdminRequest.createCategoryRoutedAlias(getAlias(), categoryField, maxCardinality,\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 1, 1)\n            .setMaxShardsPerNode(2))\n        .process(solrClient);\n\n    // now we index a document\n    addDocsAndCommit(true, newDoc(SHIPS[0]));\n    //assertDocRoutedToCol(lastDocId, col23rd);\n\n    String uninitialized = getAlias() + \"__CRA__\" + CategoryRoutedAlias.UNINITIALIZED;\n    assertInvariants(colVogon, uninitialized);\n\n    addDocsAndCommit(true, newDoc(SHIPS[1]));\n\n    assertInvariants(colVogon, colHoG);\n\n    // should fail since max cardinality is reached\n    testFailedDocument(newDoc(SHIPS[2]), \"Max cardinality\");\n    assertInvariants(colVogon, colHoG);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/CategoryRoutedAliasUpdateProcessorTest#testMaxCardinality().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/CategoryRoutedAliasUpdateProcessorTest#testMaxCardinality().mjava","sourceNew":"  @Slow\n  @Test\n  public void testMaxCardinality() throws Exception {\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    final int maxCardinality = 2; // max cardinality for current test\n\n    // Start with one collection manually created (and use higher numShards & replicas than we'll use for others)\n    //  This tests we may pre-create the collection and it's acceptable.\n    final String colVogon = getAlias() + \"__CRA__\" + SHIPS[0];\n\n    // we expect changes ensuring a legal collection name.\n    final String colHoG = getAlias() + \"__CRA__\" + SHIPS[1].replaceAll(\"\\\\s\", \"_\");\n\n    List<String> retrievedConfigSetNames = new ConfigSetAdminRequest.List().process(solrClient).getConfigSets();\n    List<String> expectedConfigSetNames = Arrays.asList(\"_default\", configName);\n\n    // config sets leak between tests so we can't be any more specific than this on the next 2 asserts\n    assertTrue(\"We expect at least 2 configSets\",\n        retrievedConfigSetNames.size() >= expectedConfigSetNames.size());\n    assertTrue(\"ConfigNames should include :\" + expectedConfigSetNames, retrievedConfigSetNames.containsAll(expectedConfigSetNames));\n\n    CollectionAdminRequest.createCategoryRoutedAlias(getAlias(), categoryField, maxCardinality,\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 1, 1))\n        .process(solrClient);\n\n    // now we index a document\n    addDocsAndCommit(true, newDoc(SHIPS[0]));\n    //assertDocRoutedToCol(lastDocId, col23rd);\n\n    String uninitialized = getAlias() + \"__CRA__\" + CategoryRoutedAlias.UNINITIALIZED;\n    assertInvariants(colVogon, uninitialized);\n\n    addDocsAndCommit(true, newDoc(SHIPS[1]));\n\n    assertInvariants(colVogon, colHoG);\n\n    // should fail since max cardinality is reached\n    testFailedDocument(newDoc(SHIPS[2]), \"Max cardinality\");\n    assertInvariants(colVogon, colHoG);\n  }\n\n","sourceOld":"  @Slow\n  @Test\n  public void testMaxCardinality() throws Exception {\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    final int maxCardinality = 2; // max cardinality for current test\n\n    // Start with one collection manually created (and use higher numShards & replicas than we'll use for others)\n    //  This tests we may pre-create the collection and it's acceptable.\n    final String colVogon = getAlias() + \"__CRA__\" + SHIPS[0];\n\n    // we expect changes ensuring a legal collection name.\n    final String colHoG = getAlias() + \"__CRA__\" + SHIPS[1].replaceAll(\"\\\\s\", \"_\");\n\n    List<String> retrievedConfigSetNames = new ConfigSetAdminRequest.List().process(solrClient).getConfigSets();\n    List<String> expectedConfigSetNames = Arrays.asList(\"_default\", configName);\n\n    // config sets leak between tests so we can't be any more specific than this on the next 2 asserts\n    assertTrue(\"We expect at least 2 configSets\",\n        retrievedConfigSetNames.size() >= expectedConfigSetNames.size());\n    assertTrue(\"ConfigNames should include :\" + expectedConfigSetNames, retrievedConfigSetNames.containsAll(expectedConfigSetNames));\n\n    CollectionAdminRequest.createCategoryRoutedAlias(getAlias(), categoryField, maxCardinality,\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 1, 1)\n            .setMaxShardsPerNode(2))\n        .process(solrClient);\n\n    // now we index a document\n    addDocsAndCommit(true, newDoc(SHIPS[0]));\n    //assertDocRoutedToCol(lastDocId, col23rd);\n\n    String uninitialized = getAlias() + \"__CRA__\" + CategoryRoutedAlias.UNINITIALIZED;\n    assertInvariants(colVogon, uninitialized);\n\n    addDocsAndCommit(true, newDoc(SHIPS[1]));\n\n    assertInvariants(colVogon, colHoG);\n\n    // should fail since max cardinality is reached\n    testFailedDocument(newDoc(SHIPS[2]), \"Max cardinality\");\n    assertInvariants(colVogon, colHoG);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["b627755385655c7cd3fb296f17593658805cf4d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b627755385655c7cd3fb296f17593658805cf4d5"],"b627755385655c7cd3fb296f17593658805cf4d5":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}