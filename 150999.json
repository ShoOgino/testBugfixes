{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(IndexDocument,Analyzer,Term).mjava","commits":[{"id":"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","date":1341524239,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(IndexDocument,Analyzer,Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(Iterable[#-extends-IndexableField],Analyzer,Term).mjava","sourceNew":"  boolean updateDocument(final IndexDocument doc, final Analyzer analyzer,\n      final Term delTerm) throws IOException {\n\n    boolean maybeMerge = preUpdate();\n\n    final ThreadState perThread = flushControl.obtainAndLock();\n\n    final DocumentsWriterPerThread flushingDWPT;\n    \n    try {\n\n      if (!perThread.isActive()) {\n        ensureOpen();\n        assert false: \"perThread is not active but we are still open\";\n      }\n       \n      final DocumentsWriterPerThread dwpt = perThread.dwpt;\n      try {\n        dwpt.updateDocument(doc, analyzer, delTerm); \n        numDocsInRAM.incrementAndGet();\n      } finally {\n        if (dwpt.checkAndResetHasAborted()) {\n          flushControl.doOnAbort(perThread);\n        }\n      }\n      final boolean isUpdate = delTerm != null;\n      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);\n    } finally {\n      perThread.unlock();\n    }\n\n    return postUpdate(flushingDWPT, maybeMerge);\n  }\n\n","sourceOld":"  boolean updateDocument(final Iterable<? extends IndexableField> doc, final Analyzer analyzer,\n      final Term delTerm) throws IOException {\n\n    boolean maybeMerge = preUpdate();\n\n    final ThreadState perThread = flushControl.obtainAndLock();\n\n    final DocumentsWriterPerThread flushingDWPT;\n    \n    try {\n\n      if (!perThread.isActive()) {\n        ensureOpen();\n        assert false: \"perThread is not active but we are still open\";\n      }\n       \n      final DocumentsWriterPerThread dwpt = perThread.dwpt;\n      try {\n        dwpt.updateDocument(doc, analyzer, delTerm); \n        numDocsInRAM.incrementAndGet();\n      } finally {\n        if (dwpt.checkAndResetHasAborted()) {\n          flushControl.doOnAbort(perThread);\n        }\n      }\n      final boolean isUpdate = delTerm != null;\n      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);\n    } finally {\n      perThread.unlock();\n    }\n\n    return postUpdate(flushingDWPT, maybeMerge);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d1f90e969803cc84174589b5e4a39b7935fecd","date":1346584861,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(IndexDocument,Analyzer,Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(IndexDocument,Analyzer,Term).mjava","sourceNew":"  boolean updateDocument(final IndexDocument doc, final Analyzer analyzer,\n      final Term delTerm) throws IOException {\n\n    boolean maybeMerge = preUpdate();\n\n    final ThreadState perThread = flushControl.obtainAndLock();\n\n    final DocumentsWriterPerThread flushingDWPT;\n    \n    try {\n\n      if (!perThread.isActive()) {\n        ensureOpen();\n        throw new IllegalStateException(\"perThread is not active but we are still open\");\n      }\n       \n      final DocumentsWriterPerThread dwpt = perThread.dwpt;\n      try {\n        dwpt.updateDocument(doc, analyzer, delTerm); \n        numDocsInRAM.incrementAndGet();\n      } finally {\n        if (dwpt.checkAndResetHasAborted()) {\n          flushControl.doOnAbort(perThread);\n        }\n      }\n      final boolean isUpdate = delTerm != null;\n      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);\n    } finally {\n      perThread.unlock();\n    }\n\n    return postUpdate(flushingDWPT, maybeMerge);\n  }\n\n","sourceOld":"  boolean updateDocument(final IndexDocument doc, final Analyzer analyzer,\n      final Term delTerm) throws IOException {\n\n    boolean maybeMerge = preUpdate();\n\n    final ThreadState perThread = flushControl.obtainAndLock();\n\n    final DocumentsWriterPerThread flushingDWPT;\n    \n    try {\n\n      if (!perThread.isActive()) {\n        ensureOpen();\n        assert false: \"perThread is not active but we are still open\";\n      }\n       \n      final DocumentsWriterPerThread dwpt = perThread.dwpt;\n      try {\n        dwpt.updateDocument(doc, analyzer, delTerm); \n        numDocsInRAM.incrementAndGet();\n      } finally {\n        if (dwpt.checkAndResetHasAborted()) {\n          flushControl.doOnAbort(perThread);\n        }\n      }\n      final boolean isUpdate = delTerm != null;\n      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);\n    } finally {\n      perThread.unlock();\n    }\n\n    return postUpdate(flushingDWPT, maybeMerge);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(IndexDocument,Analyzer,Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(Iterable[#-extends-IndexableField],Analyzer,Term).mjava","sourceNew":"  boolean updateDocument(final IndexDocument doc, final Analyzer analyzer,\n      final Term delTerm) throws IOException {\n\n    boolean maybeMerge = preUpdate();\n\n    final ThreadState perThread = flushControl.obtainAndLock();\n\n    final DocumentsWriterPerThread flushingDWPT;\n    \n    try {\n\n      if (!perThread.isActive()) {\n        ensureOpen();\n        throw new IllegalStateException(\"perThread is not active but we are still open\");\n      }\n       \n      final DocumentsWriterPerThread dwpt = perThread.dwpt;\n      try {\n        dwpt.updateDocument(doc, analyzer, delTerm); \n        numDocsInRAM.incrementAndGet();\n      } finally {\n        if (dwpt.checkAndResetHasAborted()) {\n          flushControl.doOnAbort(perThread);\n        }\n      }\n      final boolean isUpdate = delTerm != null;\n      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);\n    } finally {\n      perThread.unlock();\n    }\n\n    return postUpdate(flushingDWPT, maybeMerge);\n  }\n\n","sourceOld":"  boolean updateDocument(final Iterable<? extends IndexableField> doc, final Analyzer analyzer,\n      final Term delTerm) throws IOException {\n\n    boolean maybeMerge = preUpdate();\n\n    final ThreadState perThread = flushControl.obtainAndLock();\n\n    final DocumentsWriterPerThread flushingDWPT;\n    \n    try {\n\n      if (!perThread.isActive()) {\n        ensureOpen();\n        throw new IllegalStateException(\"perThread is not active but we are still open\");\n      }\n       \n      final DocumentsWriterPerThread dwpt = perThread.dwpt;\n      try {\n        dwpt.updateDocument(doc, analyzer, delTerm); \n        numDocsInRAM.incrementAndGet();\n      } finally {\n        if (dwpt.checkAndResetHasAborted()) {\n          flushControl.doOnAbort(perThread);\n        }\n      }\n      final boolean isUpdate = delTerm != null;\n      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);\n    } finally {\n      perThread.unlock();\n    }\n\n    return postUpdate(flushingDWPT, maybeMerge);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(IndexDocument,Analyzer,Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(IndexDocument,Analyzer,Term).mjava","sourceNew":"  boolean updateDocument(final IndexDocument doc, final Analyzer analyzer,\n      final Term delTerm) throws IOException {\n\n    boolean hasEvents = preUpdate();\n\n    final ThreadState perThread = flushControl.obtainAndLock();\n\n    final DocumentsWriterPerThread flushingDWPT;\n    try {\n      if (!perThread.isActive()) {\n        ensureOpen();\n        assert false: \"perThread is not active but we are still open\";\n      }\n      ensureInitialized(perThread);\n      assert perThread.isInitialized();\n      final DocumentsWriterPerThread dwpt = perThread.dwpt;\n      final int dwptNumDocs = dwpt.getNumDocsInRAM();\n      try {\n        dwpt.updateDocument(doc, analyzer, delTerm); \n        numDocsInRAM.incrementAndGet();\n      } finally {\n        if (dwpt.checkAndResetHasAborted()) {\n          if (!dwpt.pendingFilesToDelete().isEmpty()) {\n            putEvent(new DeleteNewFilesEvent(dwpt.pendingFilesToDelete()));\n          }\n          subtractFlushedNumDocs(dwptNumDocs);\n          flushControl.doOnAbort(perThread);\n        }\n      }\n      final boolean isUpdate = delTerm != null;\n      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);\n    } finally {\n      perThread.unlock();\n    }\n\n    return postUpdate(flushingDWPT, hasEvents);\n  }\n\n","sourceOld":"  boolean updateDocument(final IndexDocument doc, final Analyzer analyzer,\n      final Term delTerm) throws IOException {\n\n    boolean maybeMerge = preUpdate();\n\n    final ThreadState perThread = flushControl.obtainAndLock();\n\n    final DocumentsWriterPerThread flushingDWPT;\n    \n    try {\n\n      if (!perThread.isActive()) {\n        ensureOpen();\n        throw new IllegalStateException(\"perThread is not active but we are still open\");\n      }\n       \n      final DocumentsWriterPerThread dwpt = perThread.dwpt;\n      try {\n        dwpt.updateDocument(doc, analyzer, delTerm); \n        numDocsInRAM.incrementAndGet();\n      } finally {\n        if (dwpt.checkAndResetHasAborted()) {\n          flushControl.doOnAbort(perThread);\n        }\n      }\n      final boolean isUpdate = delTerm != null;\n      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);\n    } finally {\n      perThread.unlock();\n    }\n\n    return postUpdate(flushingDWPT, maybeMerge);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(IndexDocument,Analyzer,Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(IndexDocument,Analyzer,Term).mjava","sourceNew":"  boolean updateDocument(final IndexDocument doc, final Analyzer analyzer,\n      final Term delTerm) throws IOException {\n\n    boolean hasEvents = preUpdate();\n\n    final ThreadState perThread = flushControl.obtainAndLock();\n\n    final DocumentsWriterPerThread flushingDWPT;\n    try {\n      if (!perThread.isActive()) {\n        ensureOpen();\n        assert false: \"perThread is not active but we are still open\";\n      }\n      ensureInitialized(perThread);\n      assert perThread.isInitialized();\n      final DocumentsWriterPerThread dwpt = perThread.dwpt;\n      final int dwptNumDocs = dwpt.getNumDocsInRAM();\n      try {\n        dwpt.updateDocument(doc, analyzer, delTerm); \n        numDocsInRAM.incrementAndGet();\n      } finally {\n        if (dwpt.checkAndResetHasAborted()) {\n          if (!dwpt.pendingFilesToDelete().isEmpty()) {\n            putEvent(new DeleteNewFilesEvent(dwpt.pendingFilesToDelete()));\n          }\n          subtractFlushedNumDocs(dwptNumDocs);\n          flushControl.doOnAbort(perThread);\n        }\n      }\n      final boolean isUpdate = delTerm != null;\n      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);\n    } finally {\n      perThread.unlock();\n    }\n\n    return postUpdate(flushingDWPT, hasEvents);\n  }\n\n","sourceOld":"  boolean updateDocument(final IndexDocument doc, final Analyzer analyzer,\n      final Term delTerm) throws IOException {\n\n    boolean maybeMerge = preUpdate();\n\n    final ThreadState perThread = flushControl.obtainAndLock();\n\n    final DocumentsWriterPerThread flushingDWPT;\n    \n    try {\n\n      if (!perThread.isActive()) {\n        ensureOpen();\n        throw new IllegalStateException(\"perThread is not active but we are still open\");\n      }\n       \n      final DocumentsWriterPerThread dwpt = perThread.dwpt;\n      try {\n        dwpt.updateDocument(doc, analyzer, delTerm); \n        numDocsInRAM.incrementAndGet();\n      } finally {\n        if (dwpt.checkAndResetHasAborted()) {\n          flushControl.doOnAbort(perThread);\n        }\n      }\n      final boolean isUpdate = delTerm != null;\n      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);\n    } finally {\n      perThread.unlock();\n    }\n\n    return postUpdate(flushingDWPT, maybeMerge);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(IndexDocument,Analyzer,Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(IndexDocument,Analyzer,Term).mjava","sourceNew":"  boolean updateDocument(final IndexDocument doc, final Analyzer analyzer,\n      final Term delTerm) throws IOException {\n\n    boolean hasEvents = preUpdate();\n\n    final ThreadState perThread = flushControl.obtainAndLock();\n\n    final DocumentsWriterPerThread flushingDWPT;\n    try {\n      if (!perThread.isActive()) {\n        ensureOpen();\n        assert false: \"perThread is not active but we are still open\";\n      }\n      ensureInitialized(perThread);\n      assert perThread.isInitialized();\n      final DocumentsWriterPerThread dwpt = perThread.dwpt;\n      final int dwptNumDocs = dwpt.getNumDocsInRAM();\n      try {\n        dwpt.updateDocument(doc, analyzer, delTerm); \n        numDocsInRAM.incrementAndGet();\n      } finally {\n        if (dwpt.checkAndResetHasAborted()) {\n          if (!dwpt.pendingFilesToDelete().isEmpty()) {\n            putEvent(new DeleteNewFilesEvent(dwpt.pendingFilesToDelete()));\n          }\n          subtractFlushedNumDocs(dwptNumDocs);\n          flushControl.doOnAbort(perThread);\n        }\n      }\n      final boolean isUpdate = delTerm != null;\n      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);\n    } finally {\n      perThread.unlock();\n    }\n\n    return postUpdate(flushingDWPT, hasEvents);\n  }\n\n","sourceOld":"  boolean updateDocument(final IndexDocument doc, final Analyzer analyzer,\n      final Term delTerm) throws IOException {\n\n    boolean maybeMerge = preUpdate();\n\n    final ThreadState perThread = flushControl.obtainAndLock();\n\n    final DocumentsWriterPerThread flushingDWPT;\n    \n    try {\n\n      if (!perThread.isActive()) {\n        ensureOpen();\n        throw new IllegalStateException(\"perThread is not active but we are still open\");\n      }\n       \n      final DocumentsWriterPerThread dwpt = perThread.dwpt;\n      try {\n        dwpt.updateDocument(doc, analyzer, delTerm); \n        numDocsInRAM.incrementAndGet();\n      } finally {\n        if (dwpt.checkAndResetHasAborted()) {\n          flushControl.doOnAbort(perThread);\n        }\n      }\n      final boolean isUpdate = delTerm != null;\n      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);\n    } finally {\n      perThread.unlock();\n    }\n\n    return postUpdate(flushingDWPT, maybeMerge);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(IndexDocument,Analyzer,Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(IndexDocument,Analyzer,Term).mjava","sourceNew":"  boolean updateDocument(final IndexDocument doc, final Analyzer analyzer,\n      final Term delTerm) throws IOException {\n\n    boolean hasEvents = preUpdate();\n\n    final ThreadState perThread = flushControl.obtainAndLock();\n\n    final DocumentsWriterPerThread flushingDWPT;\n    try {\n      if (!perThread.isActive()) {\n        ensureOpen();\n        assert false: \"perThread is not active but we are still open\";\n      }\n      ensureInitialized(perThread);\n      assert perThread.isInitialized();\n      final DocumentsWriterPerThread dwpt = perThread.dwpt;\n      final int dwptNumDocs = dwpt.getNumDocsInRAM();\n      try {\n        dwpt.updateDocument(doc, analyzer, delTerm); \n      } finally {\n        // We don't know whether the document actually\n        // counted as being indexed, so we must subtract here to\n        // accumulate our separate counter:\n        numDocsInRAM.addAndGet(dwpt.getNumDocsInRAM() - dwptNumDocs);\n        if (dwpt.checkAndResetHasAborted()) {\n          if (!dwpt.pendingFilesToDelete().isEmpty()) {\n            putEvent(new DeleteNewFilesEvent(dwpt.pendingFilesToDelete()));\n          }\n          subtractFlushedNumDocs(dwptNumDocs);\n          flushControl.doOnAbort(perThread);\n        }\n      }\n      final boolean isUpdate = delTerm != null;\n      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);\n    } finally {\n      perThread.unlock();\n    }\n\n    return postUpdate(flushingDWPT, hasEvents);\n  }\n\n","sourceOld":"  boolean updateDocument(final IndexDocument doc, final Analyzer analyzer,\n      final Term delTerm) throws IOException {\n\n    boolean hasEvents = preUpdate();\n\n    final ThreadState perThread = flushControl.obtainAndLock();\n\n    final DocumentsWriterPerThread flushingDWPT;\n    try {\n      if (!perThread.isActive()) {\n        ensureOpen();\n        assert false: \"perThread is not active but we are still open\";\n      }\n      ensureInitialized(perThread);\n      assert perThread.isInitialized();\n      final DocumentsWriterPerThread dwpt = perThread.dwpt;\n      final int dwptNumDocs = dwpt.getNumDocsInRAM();\n      try {\n        dwpt.updateDocument(doc, analyzer, delTerm); \n        numDocsInRAM.incrementAndGet();\n      } finally {\n        if (dwpt.checkAndResetHasAborted()) {\n          if (!dwpt.pendingFilesToDelete().isEmpty()) {\n            putEvent(new DeleteNewFilesEvent(dwpt.pendingFilesToDelete()));\n          }\n          subtractFlushedNumDocs(dwptNumDocs);\n          flushControl.doOnAbort(perThread);\n        }\n      }\n      final boolean isUpdate = delTerm != null;\n      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);\n    } finally {\n      perThread.unlock();\n    }\n\n    return postUpdate(flushingDWPT, hasEvents);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"839ca1793cd9a8eb5bd7c7c62918192d47972f73","date":1399544004,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(IndexDocument,Analyzer,Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(IndexDocument,Analyzer,Term).mjava","sourceNew":"  boolean updateDocument(final IndexDocument doc, final Analyzer analyzer,\n      final Term delTerm) throws IOException {\n\n    boolean hasEvents = preUpdate();\n\n    final ThreadState perThread = flushControl.obtainAndLock();\n\n    final DocumentsWriterPerThread flushingDWPT;\n    try {\n      if (!perThread.isActive()) {\n        ensureOpen();\n        assert false: \"perThread is not active but we are still open\";\n      }\n      ensureInitialized(perThread);\n      assert perThread.isInitialized();\n      final DocumentsWriterPerThread dwpt = perThread.dwpt;\n      final int dwptNumDocs = dwpt.getNumDocsInRAM();\n      try {\n        dwpt.updateDocument(doc, analyzer, delTerm); \n      } finally {\n        // We don't know whether the document actually\n        // counted as being indexed, so we must subtract here to\n        // accumulate our separate counter:\n        numDocsInRAM.addAndGet(dwpt.getNumDocsInRAM() - dwptNumDocs);\n        if (dwpt.checkAndResetHasAborted()) {\n          if (!dwpt.pendingFilesToDelete().isEmpty()) {\n            putEvent(new DeleteNewFilesEvent(dwpt.pendingFilesToDelete()));\n          }\n          subtractFlushedNumDocs(dwptNumDocs);\n          flushControl.doOnAbort(perThread);\n        }\n      }\n      final boolean isUpdate = delTerm != null;\n      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);\n    } finally {\n      perThreadPool.release(perThread);\n    }\n\n    return postUpdate(flushingDWPT, hasEvents);\n  }\n\n","sourceOld":"  boolean updateDocument(final IndexDocument doc, final Analyzer analyzer,\n      final Term delTerm) throws IOException {\n\n    boolean hasEvents = preUpdate();\n\n    final ThreadState perThread = flushControl.obtainAndLock();\n\n    final DocumentsWriterPerThread flushingDWPT;\n    try {\n      if (!perThread.isActive()) {\n        ensureOpen();\n        assert false: \"perThread is not active but we are still open\";\n      }\n      ensureInitialized(perThread);\n      assert perThread.isInitialized();\n      final DocumentsWriterPerThread dwpt = perThread.dwpt;\n      final int dwptNumDocs = dwpt.getNumDocsInRAM();\n      try {\n        dwpt.updateDocument(doc, analyzer, delTerm); \n      } finally {\n        // We don't know whether the document actually\n        // counted as being indexed, so we must subtract here to\n        // accumulate our separate counter:\n        numDocsInRAM.addAndGet(dwpt.getNumDocsInRAM() - dwptNumDocs);\n        if (dwpt.checkAndResetHasAborted()) {\n          if (!dwpt.pendingFilesToDelete().isEmpty()) {\n            putEvent(new DeleteNewFilesEvent(dwpt.pendingFilesToDelete()));\n          }\n          subtractFlushedNumDocs(dwptNumDocs);\n          flushControl.doOnAbort(perThread);\n        }\n      }\n      final boolean isUpdate = delTerm != null;\n      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);\n    } finally {\n      perThread.unlock();\n    }\n\n    return postUpdate(flushingDWPT, hasEvents);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9299079153fd7895bf3cf6835cf7019af2ba89b3","date":1417813477,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(IndexDocument,Analyzer,Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(IndexDocument,Analyzer,Term).mjava","sourceNew":"  boolean updateDocument(final IndexDocument doc, final Analyzer analyzer,\n      final Term delTerm) throws IOException, AbortingException {\n\n    boolean hasEvents = preUpdate();\n\n    final ThreadState perThread = flushControl.obtainAndLock();\n\n    final DocumentsWriterPerThread flushingDWPT;\n    try {\n      if (!perThread.isActive()) {\n        ensureOpen();\n        assert false: \"perThread is not active but we are still open\";\n      }\n      ensureInitialized(perThread);\n      assert perThread.isInitialized();\n      final DocumentsWriterPerThread dwpt = perThread.dwpt;\n      final int dwptNumDocs = dwpt.getNumDocsInRAM();\n      try {\n        dwpt.updateDocument(doc, analyzer, delTerm); \n      } catch (AbortingException ae) {\n        flushControl.doOnAbort(perThread);\n        dwpt.abort();\n        throw ae;\n      } finally {\n        // We don't know whether the document actually\n        // counted as being indexed, so we must subtract here to\n        // accumulate our separate counter:\n        numDocsInRAM.addAndGet(dwpt.getNumDocsInRAM() - dwptNumDocs);\n      }\n      final boolean isUpdate = delTerm != null;\n      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);\n    } finally {\n      perThreadPool.release(perThread);\n    }\n\n    return postUpdate(flushingDWPT, hasEvents);\n  }\n\n","sourceOld":"  boolean updateDocument(final IndexDocument doc, final Analyzer analyzer,\n      final Term delTerm) throws IOException {\n\n    boolean hasEvents = preUpdate();\n\n    final ThreadState perThread = flushControl.obtainAndLock();\n\n    final DocumentsWriterPerThread flushingDWPT;\n    try {\n      if (!perThread.isActive()) {\n        ensureOpen();\n        assert false: \"perThread is not active but we are still open\";\n      }\n      ensureInitialized(perThread);\n      assert perThread.isInitialized();\n      final DocumentsWriterPerThread dwpt = perThread.dwpt;\n      final int dwptNumDocs = dwpt.getNumDocsInRAM();\n      try {\n        dwpt.updateDocument(doc, analyzer, delTerm); \n      } finally {\n        // We don't know whether the document actually\n        // counted as being indexed, so we must subtract here to\n        // accumulate our separate counter:\n        numDocsInRAM.addAndGet(dwpt.getNumDocsInRAM() - dwptNumDocs);\n        if (dwpt.checkAndResetHasAborted()) {\n          if (!dwpt.pendingFilesToDelete().isEmpty()) {\n            putEvent(new DeleteNewFilesEvent(dwpt.pendingFilesToDelete()));\n          }\n          subtractFlushedNumDocs(dwptNumDocs);\n          flushControl.doOnAbort(perThread);\n        }\n      }\n      final boolean isUpdate = delTerm != null;\n      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);\n    } finally {\n      perThreadPool.release(perThread);\n    }\n\n    return postUpdate(flushingDWPT, hasEvents);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5898ca35059bc3a89ba6a275ec92a5c32057aedc","date":1436893905,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(IndexDocument,Analyzer,Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(IndexDocument,Analyzer,Term).mjava","sourceNew":"  boolean updateDocument(final IndexDocument doc, final Analyzer analyzer,\n      final Term delTerm) throws IOException, AbortingException {\n\n    boolean hasEvents = preUpdate();\n\n    final ThreadState perThread = flushControl.obtainAndLock();\n\n    final DocumentsWriterPerThread flushingDWPT;\n    try {\n      // This must happen after we've pulled the ThreadState because IW.close\n      // waits for all ThreadStates to be released:\n      ensureOpen();\n      ensureInitialized(perThread);\n      assert perThread.isInitialized();\n      final DocumentsWriterPerThread dwpt = perThread.dwpt;\n      final int dwptNumDocs = dwpt.getNumDocsInRAM();\n      try {\n        dwpt.updateDocument(doc, analyzer, delTerm); \n      } catch (AbortingException ae) {\n        flushControl.doOnAbort(perThread);\n        dwpt.abort();\n        throw ae;\n      } finally {\n        // We don't know whether the document actually\n        // counted as being indexed, so we must subtract here to\n        // accumulate our separate counter:\n        numDocsInRAM.addAndGet(dwpt.getNumDocsInRAM() - dwptNumDocs);\n      }\n      final boolean isUpdate = delTerm != null;\n      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);\n    } finally {\n      perThreadPool.release(perThread);\n    }\n\n    return postUpdate(flushingDWPT, hasEvents);\n  }\n\n","sourceOld":"  boolean updateDocument(final IndexDocument doc, final Analyzer analyzer,\n      final Term delTerm) throws IOException, AbortingException {\n\n    boolean hasEvents = preUpdate();\n\n    final ThreadState perThread = flushControl.obtainAndLock();\n\n    final DocumentsWriterPerThread flushingDWPT;\n    try {\n      if (!perThread.isActive()) {\n        ensureOpen();\n        assert false: \"perThread is not active but we are still open\";\n      }\n      ensureInitialized(perThread);\n      assert perThread.isInitialized();\n      final DocumentsWriterPerThread dwpt = perThread.dwpt;\n      final int dwptNumDocs = dwpt.getNumDocsInRAM();\n      try {\n        dwpt.updateDocument(doc, analyzer, delTerm); \n      } catch (AbortingException ae) {\n        flushControl.doOnAbort(perThread);\n        dwpt.abort();\n        throw ae;\n      } finally {\n        // We don't know whether the document actually\n        // counted as being indexed, so we must subtract here to\n        // accumulate our separate counter:\n        numDocsInRAM.addAndGet(dwpt.getNumDocsInRAM() - dwptNumDocs);\n      }\n      final boolean isUpdate = delTerm != null;\n      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);\n    } finally {\n      perThreadPool.release(perThread);\n    }\n\n    return postUpdate(flushingDWPT, hasEvents);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(Iterable[#-extends-IndexableField],Analyzer,Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(IndexDocument,Analyzer,Term).mjava","sourceNew":"  boolean updateDocument(final Iterable<? extends IndexableField> doc, final Analyzer analyzer,\n      final Term delTerm) throws IOException, AbortingException {\n\n    boolean hasEvents = preUpdate();\n\n    final ThreadState perThread = flushControl.obtainAndLock();\n\n    final DocumentsWriterPerThread flushingDWPT;\n    try {\n      // This must happen after we've pulled the ThreadState because IW.close\n      // waits for all ThreadStates to be released:\n      ensureOpen();\n      ensureInitialized(perThread);\n      assert perThread.isInitialized();\n      final DocumentsWriterPerThread dwpt = perThread.dwpt;\n      final int dwptNumDocs = dwpt.getNumDocsInRAM();\n      try {\n        dwpt.updateDocument(doc, analyzer, delTerm); \n      } catch (AbortingException ae) {\n        flushControl.doOnAbort(perThread);\n        dwpt.abort();\n        throw ae;\n      } finally {\n        // We don't know whether the document actually\n        // counted as being indexed, so we must subtract here to\n        // accumulate our separate counter:\n        numDocsInRAM.addAndGet(dwpt.getNumDocsInRAM() - dwptNumDocs);\n      }\n      final boolean isUpdate = delTerm != null;\n      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);\n    } finally {\n      perThreadPool.release(perThread);\n    }\n\n    return postUpdate(flushingDWPT, hasEvents);\n  }\n\n","sourceOld":"  boolean updateDocument(final IndexDocument doc, final Analyzer analyzer,\n      final Term delTerm) throws IOException, AbortingException {\n\n    boolean hasEvents = preUpdate();\n\n    final ThreadState perThread = flushControl.obtainAndLock();\n\n    final DocumentsWriterPerThread flushingDWPT;\n    try {\n      // This must happen after we've pulled the ThreadState because IW.close\n      // waits for all ThreadStates to be released:\n      ensureOpen();\n      ensureInitialized(perThread);\n      assert perThread.isInitialized();\n      final DocumentsWriterPerThread dwpt = perThread.dwpt;\n      final int dwptNumDocs = dwpt.getNumDocsInRAM();\n      try {\n        dwpt.updateDocument(doc, analyzer, delTerm); \n      } catch (AbortingException ae) {\n        flushControl.doOnAbort(perThread);\n        dwpt.abort();\n        throw ae;\n      } finally {\n        // We don't know whether the document actually\n        // counted as being indexed, so we must subtract here to\n        // accumulate our separate counter:\n        numDocsInRAM.addAndGet(dwpt.getNumDocsInRAM() - dwptNumDocs);\n      }\n      final boolean isUpdate = delTerm != null;\n      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);\n    } finally {\n      perThreadPool.release(perThread);\n    }\n\n    return postUpdate(flushingDWPT, hasEvents);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7af110b00ea8df9429309d83e38e0533d82e144f":["1d028314cced5858683a1bb4741423d0f934257b"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["1d028314cced5858683a1bb4741423d0f934257b","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["1d028314cced5858683a1bb4741423d0f934257b","7af110b00ea8df9429309d83e38e0533d82e144f"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":["33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d028314cced5858683a1bb4741423d0f934257b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d0d1f90e969803cc84174589b5e4a39b7935fecd"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"839ca1793cd9a8eb5bd7c7c62918192d47972f73":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["839ca1793cd9a8eb5bd7c7c62918192d47972f73"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["7af110b00ea8df9429309d83e38e0533d82e144f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["5898ca35059bc3a89ba6a275ec92a5c32057aedc"],"5898ca35059bc3a89ba6a275ec92a5c32057aedc":["9299079153fd7895bf3cf6835cf7019af2ba89b3"]},"commit2Childs":{"7af110b00ea8df9429309d83e38e0533d82e144f":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"d0d1f90e969803cc84174589b5e4a39b7935fecd":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["d0d1f90e969803cc84174589b5e4a39b7935fecd"],"839ca1793cd9a8eb5bd7c7c62918192d47972f73":["9299079153fd7895bf3cf6835cf7019af2ba89b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0d1f90e969803cc84174589b5e4a39b7935fecd","1d028314cced5858683a1bb4741423d0f934257b","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["5898ca35059bc3a89ba6a275ec92a5c32057aedc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["839ca1793cd9a8eb5bd7c7c62918192d47972f73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5898ca35059bc3a89ba6a275ec92a5c32057aedc":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}