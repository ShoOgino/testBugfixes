{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","sourceNew":"    public void collect(int doc) throws IOException {\n      int groupOrd = groupFieldTermsIndex.getOrd(doc);\n      if (facetOrdTermsEnum != null) {\n        reuse = facetFieldDocTermOrds.lookup(doc, reuse);\n      }\n      int chunk;\n      boolean first = true;\n      int[] buffer = new int[5];\n      do {\n        chunk = reuse != null ? reuse.read(buffer) : 0;\n        if (first && chunk == 0) {\n          chunk = 1;\n          buffer[0] = facetFieldDocTermOrds.numTerms(); // this facet ord is reserved for docs not containing facet field.\n        }\n        first = false;\n\n        for (int pos = 0; pos < chunk; pos++) {\n          int facetOrd = buffer[pos];\n          if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = (groupOrd * (facetFieldDocTermOrds.numTerms() + 1)) + facetOrd;\n          if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n            continue;\n          }\n\n          segmentTotalCount++;\n          segmentFacetCounts[facetOrd]++;\n\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n          groupedFacetHits.add(\n              new GroupedFacetHit(\n                  groupOrd == 0 ? null : groupFieldTermsIndex.lookup(groupOrd, new BytesRef()),\n                  facetOrd == facetFieldDocTermOrds.numTerms() ? null : BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupTerm(facetOrdTermsEnum, facetOrd))\n              )\n          );\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","sourceOld":"    public void collect(int doc) throws IOException {\n      int groupOrd = groupFieldTermsIndex.getOrd(doc);\n      if (facetOrdTermsEnum != null) {\n        reuse = facetFieldDocTermOrds.lookup(doc, reuse);\n      }\n      int chunk;\n      boolean first = true;\n      int[] buffer = new int[5];\n      do {\n        chunk = reuse != null ? reuse.read(buffer) : 0;\n        if (first && chunk == 0) {\n          chunk = 1;\n          buffer[0] = facetFieldDocTermOrds.numTerms(); // this facet ord is reserved for docs not containing facet field.\n        }\n        first = false;\n\n        for (int pos = 0; pos < chunk; pos++) {\n          int facetOrd = buffer[pos];\n          if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = (groupOrd * (facetFieldDocTermOrds.numTerms() + 1)) + facetOrd;\n          if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n            continue;\n          }\n\n          segmentTotalCount++;\n          segmentFacetCounts[facetOrd]++;\n\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n          groupedFacetHits.add(\n              new GroupedFacetHit(\n                  groupOrd == 0 ? null : groupFieldTermsIndex.lookup(groupOrd, new BytesRef()),\n                  facetOrd == facetFieldDocTermOrds.numTerms() ? null : BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupTerm(facetOrdTermsEnum, facetOrd))\n              )\n          );\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"165a9b73fdc51a44eaa99472596b138ab3e83c08","date":1346151826,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","sourceNew":"    public void collect(int doc) throws IOException {\n      if (facetFieldDocTermOrds.isEmpty()) {\n        return;\n      }\n\n      int groupOrd = groupFieldTermsIndex.getOrd(doc);\n      if (facetOrdTermsEnum != null) {\n        reuse = facetFieldDocTermOrds.lookup(doc, reuse);\n      }\n      int chunk;\n      boolean first = true;\n      int[] buffer = new int[5];\n      do {\n        chunk = reuse != null ? reuse.read(buffer) : 0;\n        if (first && chunk == 0) {\n          chunk = 1;\n          buffer[0] = facetFieldDocTermOrds.numTerms(); // this facet ord is reserved for docs not containing facet field.\n        }\n        first = false;\n\n        for (int pos = 0; pos < chunk; pos++) {\n          int facetOrd = buffer[pos];\n          if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = (groupOrd * (facetFieldDocTermOrds.numTerms() + 1)) + facetOrd;\n          if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n            continue;\n          }\n\n          segmentTotalCount++;\n          segmentFacetCounts[facetOrd]++;\n\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n          groupedFacetHits.add(\n              new GroupedFacetHit(\n                  groupOrd == 0 ? null : groupFieldTermsIndex.lookup(groupOrd, new BytesRef()),\n                  facetOrd == facetFieldDocTermOrds.numTerms() ? null : BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupTerm(facetOrdTermsEnum, facetOrd))\n              )\n          );\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","sourceOld":"    public void collect(int doc) throws IOException {\n      int groupOrd = groupFieldTermsIndex.getOrd(doc);\n      if (facetOrdTermsEnum != null) {\n        reuse = facetFieldDocTermOrds.lookup(doc, reuse);\n      }\n      int chunk;\n      boolean first = true;\n      int[] buffer = new int[5];\n      do {\n        chunk = reuse != null ? reuse.read(buffer) : 0;\n        if (first && chunk == 0) {\n          chunk = 1;\n          buffer[0] = facetFieldDocTermOrds.numTerms(); // this facet ord is reserved for docs not containing facet field.\n        }\n        first = false;\n\n        for (int pos = 0; pos < chunk; pos++) {\n          int facetOrd = buffer[pos];\n          if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = (groupOrd * (facetFieldDocTermOrds.numTerms() + 1)) + facetOrd;\n          if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n            continue;\n          }\n\n          segmentTotalCount++;\n          segmentFacetCounts[facetOrd]++;\n\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n          groupedFacetHits.add(\n              new GroupedFacetHit(\n                  groupOrd == 0 ? null : groupFieldTermsIndex.lookup(groupOrd, new BytesRef()),\n                  facetOrd == facetFieldDocTermOrds.numTerms() ? null : BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupTerm(facetOrdTermsEnum, facetOrd))\n              )\n          );\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","sourceNew":"    public void collect(int doc) throws IOException {\n      if (facetFieldDocTermOrds.isEmpty()) {\n        return;\n      }\n\n      int groupOrd = groupFieldTermsIndex.getOrd(doc);\n      if (facetOrdTermsEnum != null) {\n        reuse = facetFieldDocTermOrds.lookup(doc, reuse);\n      }\n      int chunk;\n      boolean first = true;\n      int[] buffer = new int[5];\n      do {\n        chunk = reuse != null ? reuse.read(buffer) : 0;\n        if (first && chunk == 0) {\n          chunk = 1;\n          buffer[0] = facetFieldDocTermOrds.numTerms(); // this facet ord is reserved for docs not containing facet field.\n        }\n        first = false;\n\n        for (int pos = 0; pos < chunk; pos++) {\n          int facetOrd = buffer[pos];\n          if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = (groupOrd * (facetFieldDocTermOrds.numTerms() + 1)) + facetOrd;\n          if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n            continue;\n          }\n\n          segmentTotalCount++;\n          segmentFacetCounts[facetOrd]++;\n\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n          groupedFacetHits.add(\n              new GroupedFacetHit(\n                  groupOrd == 0 ? null : groupFieldTermsIndex.lookup(groupOrd, new BytesRef()),\n                  facetOrd == facetFieldDocTermOrds.numTerms() ? null : BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupTerm(facetOrdTermsEnum, facetOrd))\n              )\n          );\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","sourceOld":"    public void collect(int doc) throws IOException {\n      int groupOrd = groupFieldTermsIndex.getOrd(doc);\n      if (facetOrdTermsEnum != null) {\n        reuse = facetFieldDocTermOrds.lookup(doc, reuse);\n      }\n      int chunk;\n      boolean first = true;\n      int[] buffer = new int[5];\n      do {\n        chunk = reuse != null ? reuse.read(buffer) : 0;\n        if (first && chunk == 0) {\n          chunk = 1;\n          buffer[0] = facetFieldDocTermOrds.numTerms(); // this facet ord is reserved for docs not containing facet field.\n        }\n        first = false;\n\n        for (int pos = 0; pos < chunk; pos++) {\n          int facetOrd = buffer[pos];\n          if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = (groupOrd * (facetFieldDocTermOrds.numTerms() + 1)) + facetOrd;\n          if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n            continue;\n          }\n\n          segmentTotalCount++;\n          segmentFacetCounts[facetOrd]++;\n\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n          groupedFacetHits.add(\n              new GroupedFacetHit(\n                  groupOrd == 0 ? null : groupFieldTermsIndex.lookup(groupOrd, new BytesRef()),\n                  facetOrd == facetFieldDocTermOrds.numTerms() ? null : BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupTerm(facetOrdTermsEnum, facetOrd))\n              )\n          );\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0870713be686b7dbb084bfcef739b585aa13e793","date":1347234628,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","sourceNew":"    public void collect(int doc) throws IOException {\n      int groupOrd = groupFieldTermsIndex.getOrd(doc);\n      if (facetFieldDocTermOrds.isEmpty()) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldDocTermOrds.numTerms() + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldDocTermOrds.numTerms()]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        groupedFacetHits.add(\n            new GroupedFacetHit(groupOrd == 0 ? null : groupFieldTermsIndex.lookup(groupOrd, new BytesRef()), null)\n        );\n        return;\n      }\n\n      if (facetOrdTermsEnum != null) {\n        reuse = facetFieldDocTermOrds.lookup(doc, reuse);\n      }\n      int chunk;\n      boolean first = true;\n      int[] buffer = new int[5];\n      do {\n        chunk = reuse != null ? reuse.read(buffer) : 0;\n        if (first && chunk == 0) {\n          chunk = 1;\n          buffer[0] = facetFieldDocTermOrds.numTerms(); // this facet ord is reserved for docs not containing facet field.\n        }\n        first = false;\n\n        for (int pos = 0; pos < chunk; pos++) {\n          int facetOrd = buffer[pos];\n          if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = (groupOrd * (facetFieldDocTermOrds.numTerms() + 1)) + facetOrd;\n          if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n            continue;\n          }\n\n          segmentTotalCount++;\n          segmentFacetCounts[facetOrd]++;\n\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n          groupedFacetHits.add(\n              new GroupedFacetHit(\n                  groupOrd == 0 ? null : groupFieldTermsIndex.lookup(groupOrd, new BytesRef()),\n                  facetOrd == facetFieldDocTermOrds.numTerms() ? null : BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupTerm(facetOrdTermsEnum, facetOrd))\n              )\n          );\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","sourceOld":"    public void collect(int doc) throws IOException {\n      if (facetFieldDocTermOrds.isEmpty()) {\n        return;\n      }\n\n      int groupOrd = groupFieldTermsIndex.getOrd(doc);\n      if (facetOrdTermsEnum != null) {\n        reuse = facetFieldDocTermOrds.lookup(doc, reuse);\n      }\n      int chunk;\n      boolean first = true;\n      int[] buffer = new int[5];\n      do {\n        chunk = reuse != null ? reuse.read(buffer) : 0;\n        if (first && chunk == 0) {\n          chunk = 1;\n          buffer[0] = facetFieldDocTermOrds.numTerms(); // this facet ord is reserved for docs not containing facet field.\n        }\n        first = false;\n\n        for (int pos = 0; pos < chunk; pos++) {\n          int facetOrd = buffer[pos];\n          if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = (groupOrd * (facetFieldDocTermOrds.numTerms() + 1)) + facetOrd;\n          if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n            continue;\n          }\n\n          segmentTotalCount++;\n          segmentFacetCounts[facetOrd]++;\n\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n          groupedFacetHits.add(\n              new GroupedFacetHit(\n                  groupOrd == 0 ? null : groupFieldTermsIndex.lookup(groupOrd, new BytesRef()),\n                  facetOrd == facetFieldDocTermOrds.numTerms() ? null : BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupTerm(facetOrdTermsEnum, facetOrd))\n              )\n          );\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","bugFix":["369f44b665973d5aa5fc7d0f2a75ffad475d21ee"],"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"854f97cd3613b9579fba83755c80b697e2f3993f","date":1353527621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","sourceNew":"    public void collect(int doc) throws IOException {\n      int groupOrd = groupFieldTermsIndex.getOrd(doc);\n      if (facetFieldDocTermOrds.isEmpty()) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldDocTermOrds.numTerms() + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldDocTermOrds.numTerms()]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        groupedFacetHits.add(\n            new GroupedFacetHit(groupOrd == -1 ? null : groupFieldTermsIndex.lookup(groupOrd, new BytesRef()), null)\n        );\n        return;\n      }\n\n      if (facetOrdTermsEnum != null) {\n        reuse = facetFieldDocTermOrds.lookup(doc, reuse);\n      }\n      int chunk;\n      boolean first = true;\n      int[] buffer = new int[5];\n      do {\n        chunk = reuse != null ? reuse.read(buffer) : 0;\n        if (first && chunk == 0) {\n          chunk = 1;\n          buffer[0] = facetFieldDocTermOrds.numTerms(); // this facet ord is reserved for docs not containing facet field.\n        }\n        first = false;\n\n        for (int pos = 0; pos < chunk; pos++) {\n          int facetOrd = buffer[pos];\n          if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = groupOrd * (facetFieldDocTermOrds.numTerms() + 1) + facetOrd;\n          if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n            continue;\n          }\n\n          segmentTotalCount++;\n          segmentFacetCounts[facetOrd]++;\n\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n          groupedFacetHits.add(\n              new GroupedFacetHit(\n                  groupOrd == -1 ? null : groupFieldTermsIndex.lookup(groupOrd, new BytesRef()),\n                  facetOrd == facetFieldDocTermOrds.numTerms() ? null : BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupTerm(facetOrdTermsEnum, facetOrd))\n              )\n          );\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","sourceOld":"    public void collect(int doc) throws IOException {\n      int groupOrd = groupFieldTermsIndex.getOrd(doc);\n      if (facetFieldDocTermOrds.isEmpty()) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldDocTermOrds.numTerms() + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldDocTermOrds.numTerms()]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        groupedFacetHits.add(\n            new GroupedFacetHit(groupOrd == 0 ? null : groupFieldTermsIndex.lookup(groupOrd, new BytesRef()), null)\n        );\n        return;\n      }\n\n      if (facetOrdTermsEnum != null) {\n        reuse = facetFieldDocTermOrds.lookup(doc, reuse);\n      }\n      int chunk;\n      boolean first = true;\n      int[] buffer = new int[5];\n      do {\n        chunk = reuse != null ? reuse.read(buffer) : 0;\n        if (first && chunk == 0) {\n          chunk = 1;\n          buffer[0] = facetFieldDocTermOrds.numTerms(); // this facet ord is reserved for docs not containing facet field.\n        }\n        first = false;\n\n        for (int pos = 0; pos < chunk; pos++) {\n          int facetOrd = buffer[pos];\n          if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = (groupOrd * (facetFieldDocTermOrds.numTerms() + 1)) + facetOrd;\n          if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n            continue;\n          }\n\n          segmentTotalCount++;\n          segmentFacetCounts[facetOrd]++;\n\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n          groupedFacetHits.add(\n              new GroupedFacetHit(\n                  groupOrd == 0 ? null : groupFieldTermsIndex.lookup(groupOrd, new BytesRef()),\n                  facetOrd == facetFieldDocTermOrds.numTerms() ? null : BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupTerm(facetOrdTermsEnum, facetOrd))\n              )\n          );\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d7e5f3aa5935964617824d1f9b2599ddb334464","date":1353762831,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","sourceNew":"    public void collect(int doc) throws IOException {\n      int groupOrd = groupFieldTermsIndex.getOrd(doc);\n      if (facetFieldDocTermOrds.isEmpty()) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldDocTermOrds.numTerms() + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldDocTermOrds.numTerms()]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        BytesRef groupKey;\n        if (groupOrd == -1) {\n          groupKey = null;\n        } else {\n          groupKey = new BytesRef();\n          groupFieldTermsIndex.lookupOrd(groupOrd, groupKey);\n        }\n        groupedFacetHits.add(new GroupedFacetHit(groupKey, null));\n        return;\n      }\n\n      if (facetOrdTermsEnum != null) {\n        reuse = facetFieldDocTermOrds.lookup(doc, reuse);\n      }\n      int chunk;\n      boolean first = true;\n      int[] buffer = new int[5];\n      do {\n        chunk = reuse != null ? reuse.read(buffer) : 0;\n        if (first && chunk == 0) {\n          chunk = 1;\n          buffer[0] = facetFieldDocTermOrds.numTerms(); // this facet ord is reserved for docs not containing facet field.\n        }\n        first = false;\n\n        for (int pos = 0; pos < chunk; pos++) {\n          int facetOrd = buffer[pos];\n          if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = groupOrd * (facetFieldDocTermOrds.numTerms() + 1) + facetOrd;\n          if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n            continue;\n          }\n\n          segmentTotalCount++;\n          segmentFacetCounts[facetOrd]++;\n\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n\n          BytesRef groupKey;\n          if (groupOrd == -1) {\n            groupKey = null;\n          } else {\n            groupKey = new BytesRef();\n            groupFieldTermsIndex.lookupOrd(groupOrd, groupKey);\n          }\n\n          groupedFacetHits.add(\n              new GroupedFacetHit(groupKey,\n                  facetOrd == facetFieldDocTermOrds.numTerms() ? null : BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupTerm(facetOrdTermsEnum, facetOrd))\n              )\n          );\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","sourceOld":"    public void collect(int doc) throws IOException {\n      int groupOrd = groupFieldTermsIndex.getOrd(doc);\n      if (facetFieldDocTermOrds.isEmpty()) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldDocTermOrds.numTerms() + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldDocTermOrds.numTerms()]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        groupedFacetHits.add(\n            new GroupedFacetHit(groupOrd == -1 ? null : groupFieldTermsIndex.lookup(groupOrd, new BytesRef()), null)\n        );\n        return;\n      }\n\n      if (facetOrdTermsEnum != null) {\n        reuse = facetFieldDocTermOrds.lookup(doc, reuse);\n      }\n      int chunk;\n      boolean first = true;\n      int[] buffer = new int[5];\n      do {\n        chunk = reuse != null ? reuse.read(buffer) : 0;\n        if (first && chunk == 0) {\n          chunk = 1;\n          buffer[0] = facetFieldDocTermOrds.numTerms(); // this facet ord is reserved for docs not containing facet field.\n        }\n        first = false;\n\n        for (int pos = 0; pos < chunk; pos++) {\n          int facetOrd = buffer[pos];\n          if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = groupOrd * (facetFieldDocTermOrds.numTerms() + 1) + facetOrd;\n          if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n            continue;\n          }\n\n          segmentTotalCount++;\n          segmentFacetCounts[facetOrd]++;\n\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n          groupedFacetHits.add(\n              new GroupedFacetHit(\n                  groupOrd == -1 ? null : groupFieldTermsIndex.lookup(groupOrd, new BytesRef()),\n                  facetOrd == facetFieldDocTermOrds.numTerms() ? null : BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupTerm(facetOrdTermsEnum, facetOrd))\n              )\n          );\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      int groupOrd = groupFieldTermsIndex.getOrd(doc);\n      if (facetFieldDocTermOrds.isEmpty()) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldDocTermOrds.numTerms() + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldDocTermOrds.numTerms()]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        groupedFacetHits.add(\n            new GroupedFacetHit(groupOrd == 0 ? null : groupFieldTermsIndex.lookup(groupOrd, new BytesRef()), null)\n        );\n        return;\n      }\n\n      if (facetOrdTermsEnum != null) {\n        reuse = facetFieldDocTermOrds.lookup(doc, reuse);\n      }\n      int chunk;\n      boolean first = true;\n      int[] buffer = new int[5];\n      do {\n        chunk = reuse != null ? reuse.read(buffer) : 0;\n        if (first && chunk == 0) {\n          chunk = 1;\n          buffer[0] = facetFieldDocTermOrds.numTerms(); // this facet ord is reserved for docs not containing facet field.\n        }\n        first = false;\n\n        for (int pos = 0; pos < chunk; pos++) {\n          int facetOrd = buffer[pos];\n          if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = (groupOrd * (facetFieldDocTermOrds.numTerms() + 1)) + facetOrd;\n          if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n            continue;\n          }\n\n          segmentTotalCount++;\n          segmentFacetCounts[facetOrd]++;\n\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n          groupedFacetHits.add(\n              new GroupedFacetHit(\n                  groupOrd == 0 ? null : groupFieldTermsIndex.lookup(groupOrd, new BytesRef()),\n                  facetOrd == facetFieldDocTermOrds.numTerms() ? null : BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupTerm(facetOrdTermsEnum, facetOrd))\n              )\n          );\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","sourceOld":"    public void collect(int doc) throws IOException {\n      int groupOrd = groupFieldTermsIndex.getOrd(doc);\n      if (facetFieldDocTermOrds.isEmpty()) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldDocTermOrds.numTerms() + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldDocTermOrds.numTerms()]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        groupedFacetHits.add(\n            new GroupedFacetHit(groupOrd == 0 ? null : groupFieldTermsIndex.lookup(groupOrd, new BytesRef()), null)\n        );\n        return;\n      }\n\n      if (facetOrdTermsEnum != null) {\n        reuse = facetFieldDocTermOrds.lookup(doc, reuse);\n      }\n      int chunk;\n      boolean first = true;\n      int[] buffer = new int[5];\n      do {\n        chunk = reuse != null ? reuse.read(buffer) : 0;\n        if (first && chunk == 0) {\n          chunk = 1;\n          buffer[0] = facetFieldDocTermOrds.numTerms(); // this facet ord is reserved for docs not containing facet field.\n        }\n        first = false;\n\n        for (int pos = 0; pos < chunk; pos++) {\n          int facetOrd = buffer[pos];\n          if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = (groupOrd * (facetFieldDocTermOrds.numTerms() + 1)) + facetOrd;\n          if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n            continue;\n          }\n\n          segmentTotalCount++;\n          segmentFacetCounts[facetOrd]++;\n\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n          groupedFacetHits.add(\n              new GroupedFacetHit(\n                  groupOrd == 0 ? null : groupFieldTermsIndex.lookup(groupOrd, new BytesRef()),\n                  facetOrd == facetFieldDocTermOrds.numTerms() ? null : BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupTerm(facetOrdTermsEnum, facetOrd))\n              )\n          );\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      int groupOrd = groupFieldTermsIndex.getOrd(doc);\n      if (facetFieldDocTermOrds.isEmpty()) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldDocTermOrds.numTerms() + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldDocTermOrds.numTerms()]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        BytesRef groupKey;\n        if (groupOrd == -1) {\n          groupKey = null;\n        } else {\n          groupKey = new BytesRef();\n          groupFieldTermsIndex.lookupOrd(groupOrd, groupKey);\n        }\n        groupedFacetHits.add(new GroupedFacetHit(groupKey, null));\n        return;\n      }\n\n      if (facetOrdTermsEnum != null) {\n        reuse = facetFieldDocTermOrds.lookup(doc, reuse);\n      }\n      int chunk;\n      boolean first = true;\n      int[] buffer = new int[5];\n      do {\n        chunk = reuse != null ? reuse.read(buffer) : 0;\n        if (first && chunk == 0) {\n          chunk = 1;\n          buffer[0] = facetFieldDocTermOrds.numTerms(); // this facet ord is reserved for docs not containing facet field.\n        }\n        first = false;\n\n        for (int pos = 0; pos < chunk; pos++) {\n          int facetOrd = buffer[pos];\n          if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = groupOrd * (facetFieldDocTermOrds.numTerms() + 1) + facetOrd;\n          if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n            continue;\n          }\n\n          segmentTotalCount++;\n          segmentFacetCounts[facetOrd]++;\n\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n\n          BytesRef groupKey;\n          if (groupOrd == -1) {\n            groupKey = null;\n          } else {\n            groupKey = new BytesRef();\n            groupFieldTermsIndex.lookupOrd(groupOrd, groupKey);\n          }\n\n          groupedFacetHits.add(\n              new GroupedFacetHit(groupKey,\n                  facetOrd == facetFieldDocTermOrds.numTerms() ? null : BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupTerm(facetOrdTermsEnum, facetOrd))\n              )\n          );\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","sourceOld":"    public void collect(int doc) throws IOException {\n      int groupOrd = groupFieldTermsIndex.getOrd(doc);\n      if (facetFieldDocTermOrds.isEmpty()) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldDocTermOrds.numTerms() + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldDocTermOrds.numTerms()]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        BytesRef groupKey;\n        if (groupOrd == -1) {\n          groupKey = null;\n        } else {\n          groupKey = new BytesRef();\n          groupFieldTermsIndex.lookupOrd(groupOrd, groupKey);\n        }\n        groupedFacetHits.add(new GroupedFacetHit(groupKey, null));\n        return;\n      }\n\n      if (facetOrdTermsEnum != null) {\n        reuse = facetFieldDocTermOrds.lookup(doc, reuse);\n      }\n      int chunk;\n      boolean first = true;\n      int[] buffer = new int[5];\n      do {\n        chunk = reuse != null ? reuse.read(buffer) : 0;\n        if (first && chunk == 0) {\n          chunk = 1;\n          buffer[0] = facetFieldDocTermOrds.numTerms(); // this facet ord is reserved for docs not containing facet field.\n        }\n        first = false;\n\n        for (int pos = 0; pos < chunk; pos++) {\n          int facetOrd = buffer[pos];\n          if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = groupOrd * (facetFieldDocTermOrds.numTerms() + 1) + facetOrd;\n          if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n            continue;\n          }\n\n          segmentTotalCount++;\n          segmentFacetCounts[facetOrd]++;\n\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n\n          BytesRef groupKey;\n          if (groupOrd == -1) {\n            groupKey = null;\n          } else {\n            groupKey = new BytesRef();\n            groupFieldTermsIndex.lookupOrd(groupOrd, groupKey);\n          }\n\n          groupedFacetHits.add(\n              new GroupedFacetHit(groupKey,\n                  facetOrd == facetFieldDocTermOrds.numTerms() ? null : BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupTerm(facetOrdTermsEnum, facetOrd))\n              )\n          );\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      int groupOrd = groupFieldTermsIndex.getOrd(doc);\n      if (facetFieldDocTermOrds.isEmpty()) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldDocTermOrds.numTerms() + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldDocTermOrds.numTerms()]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        BytesRef groupKey;\n        if (groupOrd == -1) {\n          groupKey = null;\n        } else {\n          groupKey = new BytesRef();\n          groupFieldTermsIndex.lookupOrd(groupOrd, groupKey);\n        }\n        groupedFacetHits.add(new GroupedFacetHit(groupKey, null));\n        return;\n      }\n\n      if (facetOrdTermsEnum != null) {\n        reuse = facetFieldDocTermOrds.lookup(doc, reuse);\n      }\n      int chunk;\n      boolean first = true;\n      int[] buffer = new int[5];\n      do {\n        chunk = reuse != null ? reuse.read(buffer) : 0;\n        if (first && chunk == 0) {\n          chunk = 1;\n          buffer[0] = facetFieldDocTermOrds.numTerms(); // this facet ord is reserved for docs not containing facet field.\n        }\n        first = false;\n\n        for (int pos = 0; pos < chunk; pos++) {\n          int facetOrd = buffer[pos];\n          if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = groupOrd * (facetFieldDocTermOrds.numTerms() + 1) + facetOrd;\n          if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n            continue;\n          }\n\n          segmentTotalCount++;\n          segmentFacetCounts[facetOrd]++;\n\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n\n          BytesRef groupKey;\n          if (groupOrd == -1) {\n            groupKey = null;\n          } else {\n            groupKey = new BytesRef();\n            groupFieldTermsIndex.lookupOrd(groupOrd, groupKey);\n          }\n\n          groupedFacetHits.add(\n              new GroupedFacetHit(groupKey,\n                  facetOrd == facetFieldDocTermOrds.numTerms() ? null : BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupTerm(facetOrdTermsEnum, facetOrd))\n              )\n          );\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      int groupOrd = groupFieldTermsIndex.getOrd(doc);\n      if (facetFieldDocTermOrds.isEmpty()) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldDocTermOrds.numTerms() + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldDocTermOrds.numTerms()]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        groupedFacetHits.add(\n            new GroupedFacetHit(groupOrd == 0 ? null : groupFieldTermsIndex.lookup(groupOrd, new BytesRef()), null)\n        );\n        return;\n      }\n\n      if (facetOrdTermsEnum != null) {\n        reuse = facetFieldDocTermOrds.lookup(doc, reuse);\n      }\n      int chunk;\n      boolean first = true;\n      int[] buffer = new int[5];\n      do {\n        chunk = reuse != null ? reuse.read(buffer) : 0;\n        if (first && chunk == 0) {\n          chunk = 1;\n          buffer[0] = facetFieldDocTermOrds.numTerms(); // this facet ord is reserved for docs not containing facet field.\n        }\n        first = false;\n\n        for (int pos = 0; pos < chunk; pos++) {\n          int facetOrd = buffer[pos];\n          if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = (groupOrd * (facetFieldDocTermOrds.numTerms() + 1)) + facetOrd;\n          if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n            continue;\n          }\n\n          segmentTotalCount++;\n          segmentFacetCounts[facetOrd]++;\n\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n          groupedFacetHits.add(\n              new GroupedFacetHit(\n                  groupOrd == 0 ? null : groupFieldTermsIndex.lookup(groupOrd, new BytesRef()),\n                  facetOrd == facetFieldDocTermOrds.numTerms() ? null : BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupTerm(facetOrdTermsEnum, facetOrd))\n              )\n          );\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","bugFix":["0870713be686b7dbb084bfcef739b585aa13e793","369f44b665973d5aa5fc7d0f2a75ffad475d21ee"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bd41bee7250a9039c3bf0651303e11dd1aad9d9","date":1360626013,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      int groupOrd = groupFieldTermsIndex.getOrd(doc);\n      if (facetFieldNumTerms == 0) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldNumTerms]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        BytesRef groupKey;\n        if (groupOrd == -1) {\n          groupKey = null;\n        } else {\n          groupKey = new BytesRef();\n          groupFieldTermsIndex.lookupOrd(groupOrd, groupKey);\n        }\n        groupedFacetHits.add(new GroupedFacetHit(groupKey, null));\n        return;\n      }\n\n      facetFieldDocTermOrds.setDocument(doc);\n      long ord;\n      boolean empty = true;\n      while ((ord = facetFieldDocTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        process(groupOrd, (int) ord);\n        empty = false;\n      }\n      \n      if (empty) {\n        process(groupOrd, facetFieldNumTerms); // this facet ord is reserved for docs not containing facet field.\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      int groupOrd = groupFieldTermsIndex.getOrd(doc);\n      if (facetFieldDocTermOrds.isEmpty()) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldDocTermOrds.numTerms() + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldDocTermOrds.numTerms()]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        BytesRef groupKey;\n        if (groupOrd == -1) {\n          groupKey = null;\n        } else {\n          groupKey = new BytesRef();\n          groupFieldTermsIndex.lookupOrd(groupOrd, groupKey);\n        }\n        groupedFacetHits.add(new GroupedFacetHit(groupKey, null));\n        return;\n      }\n\n      if (facetOrdTermsEnum != null) {\n        reuse = facetFieldDocTermOrds.lookup(doc, reuse);\n      }\n      int chunk;\n      boolean first = true;\n      int[] buffer = new int[5];\n      do {\n        chunk = reuse != null ? reuse.read(buffer) : 0;\n        if (first && chunk == 0) {\n          chunk = 1;\n          buffer[0] = facetFieldDocTermOrds.numTerms(); // this facet ord is reserved for docs not containing facet field.\n        }\n        first = false;\n\n        for (int pos = 0; pos < chunk; pos++) {\n          int facetOrd = buffer[pos];\n          if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = groupOrd * (facetFieldDocTermOrds.numTerms() + 1) + facetOrd;\n          if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n            continue;\n          }\n\n          segmentTotalCount++;\n          segmentFacetCounts[facetOrd]++;\n\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n\n          BytesRef groupKey;\n          if (groupOrd == -1) {\n            groupKey = null;\n          } else {\n            groupKey = new BytesRef();\n            groupFieldTermsIndex.lookupOrd(groupOrd, groupKey);\n          }\n\n          groupedFacetHits.add(\n              new GroupedFacetHit(groupKey,\n                  facetOrd == facetFieldDocTermOrds.numTerms() ? null : BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupTerm(facetOrdTermsEnum, facetOrd))\n              )\n          );\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      int groupOrd = groupFieldTermsIndex.getOrd(doc);\n      if (facetFieldNumTerms == 0) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldNumTerms]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        BytesRef groupKey;\n        if (groupOrd == -1) {\n          groupKey = null;\n        } else {\n          groupKey = new BytesRef();\n          groupFieldTermsIndex.lookupOrd(groupOrd, groupKey);\n        }\n        groupedFacetHits.add(new GroupedFacetHit(groupKey, null));\n        return;\n      }\n\n      facetFieldDocTermOrds.setDocument(doc);\n      long ord;\n      boolean empty = true;\n      while ((ord = facetFieldDocTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        process(groupOrd, (int) ord);\n        empty = false;\n      }\n      \n      if (empty) {\n        process(groupOrd, facetFieldNumTerms); // this facet ord is reserved for docs not containing facet field.\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      int groupOrd = groupFieldTermsIndex.getOrd(doc);\n      if (facetFieldDocTermOrds.isEmpty()) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldDocTermOrds.numTerms() + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldDocTermOrds.numTerms()]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        BytesRef groupKey;\n        if (groupOrd == -1) {\n          groupKey = null;\n        } else {\n          groupKey = new BytesRef();\n          groupFieldTermsIndex.lookupOrd(groupOrd, groupKey);\n        }\n        groupedFacetHits.add(new GroupedFacetHit(groupKey, null));\n        return;\n      }\n\n      if (facetOrdTermsEnum != null) {\n        reuse = facetFieldDocTermOrds.lookup(doc, reuse);\n      }\n      int chunk;\n      boolean first = true;\n      int[] buffer = new int[5];\n      do {\n        chunk = reuse != null ? reuse.read(buffer) : 0;\n        if (first && chunk == 0) {\n          chunk = 1;\n          buffer[0] = facetFieldDocTermOrds.numTerms(); // this facet ord is reserved for docs not containing facet field.\n        }\n        first = false;\n\n        for (int pos = 0; pos < chunk; pos++) {\n          int facetOrd = buffer[pos];\n          if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = groupOrd * (facetFieldDocTermOrds.numTerms() + 1) + facetOrd;\n          if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n            continue;\n          }\n\n          segmentTotalCount++;\n          segmentFacetCounts[facetOrd]++;\n\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n\n          BytesRef groupKey;\n          if (groupOrd == -1) {\n            groupKey = null;\n          } else {\n            groupKey = new BytesRef();\n            groupFieldTermsIndex.lookupOrd(groupOrd, groupKey);\n          }\n\n          groupedFacetHits.add(\n              new GroupedFacetHit(groupKey,\n                  facetOrd == facetFieldDocTermOrds.numTerms() ? null : BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupTerm(facetOrdTermsEnum, facetOrd))\n              )\n          );\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      int groupOrd = groupFieldTermsIndex.getOrd(doc);\n      if (facetFieldNumTerms == 0) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldNumTerms]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        BytesRef groupKey;\n        if (groupOrd == -1) {\n          groupKey = null;\n        } else {\n          groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n        }\n        groupedFacetHits.add(new GroupedFacetHit(groupKey, null));\n        return;\n      }\n\n      facetFieldDocTermOrds.setDocument(doc);\n      long ord;\n      boolean empty = true;\n      while ((ord = facetFieldDocTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        process(groupOrd, (int) ord);\n        empty = false;\n      }\n      \n      if (empty) {\n        process(groupOrd, facetFieldNumTerms); // this facet ord is reserved for docs not containing facet field.\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      int groupOrd = groupFieldTermsIndex.getOrd(doc);\n      if (facetFieldNumTerms == 0) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldNumTerms]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        BytesRef groupKey;\n        if (groupOrd == -1) {\n          groupKey = null;\n        } else {\n          groupKey = new BytesRef();\n          groupFieldTermsIndex.lookupOrd(groupOrd, groupKey);\n        }\n        groupedFacetHits.add(new GroupedFacetHit(groupKey, null));\n        return;\n      }\n\n      facetFieldDocTermOrds.setDocument(doc);\n      long ord;\n      boolean empty = true;\n      while ((ord = facetFieldDocTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        process(groupOrd, (int) ord);\n        empty = false;\n      }\n      \n      if (empty) {\n        process(groupOrd, facetFieldNumTerms); // this facet ord is reserved for docs not containing facet field.\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      if (doc > groupFieldTermsIndex.docID()) {\n        groupFieldTermsIndex.advance(doc);\n      }\n\n      int groupOrd;\n      if (doc == groupFieldTermsIndex.docID()) {\n        groupOrd = groupFieldTermsIndex.ordValue();\n      } else {\n        groupOrd = -1;\n      }\n      \n      if (facetFieldNumTerms == 0) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldNumTerms]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        BytesRef groupKey;\n        if (groupOrd == -1) {\n          groupKey = null;\n        } else {\n          groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n        }\n        groupedFacetHits.add(new GroupedFacetHit(groupKey, null));\n        return;\n      }\n\n      if (doc > facetFieldDocTermOrds.docID()) {\n        facetFieldDocTermOrds.advance(doc);\n      }\n      boolean empty = true;\n      if (doc == facetFieldDocTermOrds.docID()) {\n        long ord;\n        while ((ord = facetFieldDocTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          process(groupOrd, (int) ord);\n          empty = false;\n        }\n      }\n      \n      if (empty) {\n        process(groupOrd, facetFieldNumTerms); // this facet ord is reserved for docs not containing facet field.\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      int groupOrd = groupFieldTermsIndex.getOrd(doc);\n      if (facetFieldNumTerms == 0) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldNumTerms]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        BytesRef groupKey;\n        if (groupOrd == -1) {\n          groupKey = null;\n        } else {\n          groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n        }\n        groupedFacetHits.add(new GroupedFacetHit(groupKey, null));\n        return;\n      }\n\n      facetFieldDocTermOrds.setDocument(doc);\n      long ord;\n      boolean empty = true;\n      while ((ord = facetFieldDocTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        process(groupOrd, (int) ord);\n        empty = false;\n      }\n      \n      if (empty) {\n        process(groupOrd, facetFieldNumTerms); // this facet ord is reserved for docs not containing facet field.\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      if (doc > groupFieldTermsIndex.docID()) {\n        groupFieldTermsIndex.advance(doc);\n      }\n\n      int groupOrd;\n      if (doc == groupFieldTermsIndex.docID()) {\n        groupOrd = groupFieldTermsIndex.ordValue();\n      } else {\n        groupOrd = -1;\n      }\n      \n      if (facetFieldNumTerms == 0) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldNumTerms]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        BytesRef groupKey;\n        if (groupOrd == -1) {\n          groupKey = null;\n        } else {\n          groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n        }\n        groupedFacetHits.add(new GroupedFacetHit(groupKey, null));\n        return;\n      }\n\n      if (doc > facetFieldDocTermOrds.docID()) {\n        facetFieldDocTermOrds.advance(doc);\n      }\n      boolean empty = true;\n      if (doc == facetFieldDocTermOrds.docID()) {\n        long ord;\n        while ((ord = facetFieldDocTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          process(groupOrd, (int) ord);\n          empty = false;\n        }\n      }\n      \n      if (empty) {\n        process(groupOrd, facetFieldNumTerms); // this facet ord is reserved for docs not containing facet field.\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      int groupOrd = groupFieldTermsIndex.getOrd(doc);\n      if (facetFieldNumTerms == 0) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldNumTerms]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        BytesRef groupKey;\n        if (groupOrd == -1) {\n          groupKey = null;\n        } else {\n          groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n        }\n        groupedFacetHits.add(new GroupedFacetHit(groupKey, null));\n        return;\n      }\n\n      facetFieldDocTermOrds.setDocument(doc);\n      long ord;\n      boolean empty = true;\n      while ((ord = facetFieldDocTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        process(groupOrd, (int) ord);\n        empty = false;\n      }\n      \n      if (empty) {\n        process(groupOrd, facetFieldNumTerms); // this facet ord is reserved for docs not containing facet field.\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      if (doc > groupFieldTermsIndex.docID()) {\n        groupFieldTermsIndex.advance(doc);\n      }\n\n      int groupOrd;\n      if (doc == groupFieldTermsIndex.docID()) {\n        groupOrd = groupFieldTermsIndex.ordValue();\n      } else {\n        groupOrd = -1;\n      }\n      \n      if (facetFieldNumTerms == 0) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldNumTerms]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        BytesRef groupKey;\n        if (groupOrd == -1) {\n          groupKey = null;\n        } else {\n          groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n        }\n        groupedFacetHits.add(new GroupedFacetHit(groupKey, null));\n        return;\n      }\n\n      if (doc > facetFieldDocTermOrds.docID()) {\n        facetFieldDocTermOrds.advance(doc);\n      }\n      boolean empty = true;\n      if (doc == facetFieldDocTermOrds.docID()) {\n        long ord;\n        while ((ord = facetFieldDocTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          process(groupOrd, (int) ord);\n          empty = false;\n        }\n      }\n      \n      if (empty) {\n        process(groupOrd, facetFieldNumTerms); // this facet ord is reserved for docs not containing facet field.\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      int groupOrd = groupFieldTermsIndex.getOrd(doc);\n      if (facetFieldNumTerms == 0) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldNumTerms]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        BytesRef groupKey;\n        if (groupOrd == -1) {\n          groupKey = null;\n        } else {\n          groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n        }\n        groupedFacetHits.add(new GroupedFacetHit(groupKey, null));\n        return;\n      }\n\n      facetFieldDocTermOrds.setDocument(doc);\n      long ord;\n      boolean empty = true;\n      while ((ord = facetFieldDocTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        process(groupOrd, (int) ord);\n        empty = false;\n      }\n      \n      if (empty) {\n        process(groupOrd, facetFieldNumTerms); // this facet ord is reserved for docs not containing facet field.\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/TermGroupFacetCollector.MV#collect(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      if (doc > groupFieldTermsIndex.docID()) {\n        groupFieldTermsIndex.advance(doc);\n      }\n\n      int groupOrd;\n      if (doc == groupFieldTermsIndex.docID()) {\n        groupOrd = groupFieldTermsIndex.ordValue();\n      } else {\n        groupOrd = -1;\n      }\n      \n      if (facetFieldNumTerms == 0) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldNumTerms]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        BytesRef groupKey;\n        if (groupOrd == -1) {\n          groupKey = null;\n        } else {\n          groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n        }\n        groupedFacetHits.add(new GroupedFacetHit(groupKey, null));\n        return;\n      }\n\n      if (doc > facetFieldDocTermOrds.docID()) {\n        facetFieldDocTermOrds.advance(doc);\n      }\n      boolean empty = true;\n      if (doc == facetFieldDocTermOrds.docID()) {\n        long ord;\n        while ((ord = facetFieldDocTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          process(groupOrd, (int) ord);\n          empty = false;\n        }\n      }\n      \n      if (empty) {\n        process(groupOrd, facetFieldNumTerms); // this facet ord is reserved for docs not containing facet field.\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      if (doc > groupFieldTermsIndex.docID()) {\n        groupFieldTermsIndex.advance(doc);\n      }\n\n      int groupOrd;\n      if (doc == groupFieldTermsIndex.docID()) {\n        groupOrd = groupFieldTermsIndex.ordValue();\n      } else {\n        groupOrd = -1;\n      }\n      \n      if (facetFieldNumTerms == 0) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldNumTerms]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        BytesRef groupKey;\n        if (groupOrd == -1) {\n          groupKey = null;\n        } else {\n          groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n        }\n        groupedFacetHits.add(new GroupedFacetHit(groupKey, null));\n        return;\n      }\n\n      if (doc > facetFieldDocTermOrds.docID()) {\n        facetFieldDocTermOrds.advance(doc);\n      }\n      boolean empty = true;\n      if (doc == facetFieldDocTermOrds.docID()) {\n        long ord;\n        while ((ord = facetFieldDocTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          process(groupOrd, (int) ord);\n          empty = false;\n        }\n      }\n      \n      if (empty) {\n        process(groupOrd, facetFieldNumTerms); // this facet ord is reserved for docs not containing facet field.\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/TermGroupFacetCollector.MV#collect(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      if (doc > groupFieldTermsIndex.docID()) {\n        groupFieldTermsIndex.advance(doc);\n      }\n\n      int groupOrd;\n      if (doc == groupFieldTermsIndex.docID()) {\n        groupOrd = groupFieldTermsIndex.ordValue();\n      } else {\n        groupOrd = -1;\n      }\n      \n      if (facetFieldNumTerms == 0) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldNumTerms]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        BytesRef groupKey;\n        if (groupOrd == -1) {\n          groupKey = null;\n        } else {\n          groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n        }\n        groupedFacetHits.add(new GroupedFacetHit(groupKey, null));\n        return;\n      }\n\n      if (doc > facetFieldDocTermOrds.docID()) {\n        facetFieldDocTermOrds.advance(doc);\n      }\n      boolean empty = true;\n      if (doc == facetFieldDocTermOrds.docID()) {\n        long ord;\n        while ((ord = facetFieldDocTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          process(groupOrd, (int) ord);\n          empty = false;\n        }\n      }\n      \n      if (empty) {\n        process(groupOrd, facetFieldNumTerms); // this facet ord is reserved for docs not containing facet field.\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      if (doc > groupFieldTermsIndex.docID()) {\n        groupFieldTermsIndex.advance(doc);\n      }\n\n      int groupOrd;\n      if (doc == groupFieldTermsIndex.docID()) {\n        groupOrd = groupFieldTermsIndex.ordValue();\n      } else {\n        groupOrd = -1;\n      }\n      \n      if (facetFieldNumTerms == 0) {\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1);\n        if (facetPrefix != null || segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n          return;\n        }\n\n        segmentTotalCount++;\n        segmentFacetCounts[facetFieldNumTerms]++;\n\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        BytesRef groupKey;\n        if (groupOrd == -1) {\n          groupKey = null;\n        } else {\n          groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n        }\n        groupedFacetHits.add(new GroupedFacetHit(groupKey, null));\n        return;\n      }\n\n      if (doc > facetFieldDocTermOrds.docID()) {\n        facetFieldDocTermOrds.advance(doc);\n      }\n      boolean empty = true;\n      if (doc == facetFieldDocTermOrds.docID()) {\n        long ord;\n        while ((ord = facetFieldDocTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          process(groupOrd, (int) ord);\n          empty = false;\n        }\n      }\n      \n      if (empty) {\n        process(groupOrd, facetFieldNumTerms); // this facet ord is reserved for docs not containing facet field.\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["9d7e5f3aa5935964617824d1f9b2599ddb334464","7530de27b87b961b51f01bd1299b7004d46e8823"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"165a9b73fdc51a44eaa99472596b138ab3e83c08":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"0870713be686b7dbb084bfcef739b585aa13e793":["165a9b73fdc51a44eaa99472596b138ab3e83c08"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","1bd41bee7250a9039c3bf0651303e11dd1aad9d9"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["b89678825b68eccaf09e6ab71675fc0b0af1e099","165a9b73fdc51a44eaa99472596b138ab3e83c08"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["7530de27b87b961b51f01bd1299b7004d46e8823","d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["854f97cd3613b9579fba83755c80b697e2f3993f"],"854f97cd3613b9579fba83755c80b697e2f3993f":["0870713be686b7dbb084bfcef739b585aa13e793"],"7530de27b87b961b51f01bd1299b7004d46e8823":["0870713be686b7dbb084bfcef739b585aa13e793"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ae958a739da1866696f442384393ba2f13e33e5"],"7ae958a739da1866696f442384393ba2f13e33e5":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"1bd41bee7250a9039c3bf0651303e11dd1aad9d9":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"165a9b73fdc51a44eaa99472596b138ab3e83c08":["0870713be686b7dbb084bfcef739b585aa13e793","05a14b2611ead08655a2b2bdc61632eb31316e57"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"0870713be686b7dbb084bfcef739b585aa13e793":["854f97cd3613b9579fba83755c80b697e2f3993f","7530de27b87b961b51f01bd1299b7004d46e8823"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["165a9b73fdc51a44eaa99472596b138ab3e83c08","05a14b2611ead08655a2b2bdc61632eb31316e57"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ddbb72a33557d2b5bc22ee95daf3281c43560502","1bd41bee7250a9039c3bf0651303e11dd1aad9d9"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7ae958a739da1866696f442384393ba2f13e33e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"854f97cd3613b9579fba83755c80b697e2f3993f":["9d7e5f3aa5935964617824d1f9b2599ddb334464"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4d69c535930b5cce125cff868d40f6373dc27d4"],"1bd41bee7250a9039c3bf0651303e11dd1aad9d9":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7ae958a739da1866696f442384393ba2f13e33e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","05a14b2611ead08655a2b2bdc61632eb31316e57","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}