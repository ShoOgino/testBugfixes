{"path":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testMultiValued().mjava","commits":[{"id":"3e21d7642ee7e0c00429964e5b47504602fe218c","date":1460897579,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testMultiValued().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testMultiValued().mjava","sourceNew":"  public void testMultiValued() throws Exception {\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    // and on seeds being able to reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    boolean small = random().nextBoolean();\n\n    for (int id=0;id<numPoints;id++) {\n      Document doc = new Document();\n      lats[2*id] = quantizeLat(randomLat(small));\n      lons[2*id] = quantizeLon(randomLon(small));\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.YES));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id], lons[2*id]);\n      lats[2*id+1] = quantizeLat(randomLat(small));\n      lons[2*id+1] = quantizeLon(randomLon(small));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id+1], lons[2*id+1]);\n\n      if (VERBOSE) {\n        System.out.println(\"id=\" + id);\n        System.out.println(\"  lat=\" + lats[2*id] + \" lon=\" + lons[2*id]);\n        System.out.println(\"  lat=\" + lats[2*id+1] + \" lon=\" + lons[2*id+1]);\n      }\n      w.addDocument(doc);\n    }\n\n    // TODO: share w/ verify; just need parallel array of the expected ids\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    int iters = atLeast(25);\n    for (int iter=0;iter<iters;iter++) {\n      Rectangle rect = randomRect(small);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" rect=\" + rect);\n      }\n\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        \n        boolean result1 = rectContainsPoint(rect, latDoc1, lonDoc1);\n        boolean result2 = rectContainsPoint(rect, latDoc2, lonDoc2);\n\n        boolean expected = result1 || result2;\n\n        if (hits.get(docID) != expected) {\n          String id = s.doc(docID).get(\"id\");\n          if (expected) {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should match but did not\");\n          } else {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should not match but did\");\n          }\n          System.out.println(\"  rect=\" + rect);\n          System.out.println(\"  lat=\" + latDoc1 + \" lon=\" + lonDoc1 + \"\\n  lat=\" + latDoc2 + \" lon=\" + lonDoc2);\n          System.out.println(\"  result1=\" + result1 + \" result2=\" + result2);\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValued() throws Exception {\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    // and on seeds being able to reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    boolean small = random().nextBoolean();\n\n    for (int id=0;id<numPoints;id++) {\n      Document doc = new Document();\n      lats[2*id] = quantizeLat(randomLat(small));\n      lons[2*id] = quantizeLon(randomLon(small));\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.YES));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id], lons[2*id]);\n      lats[2*id+1] = quantizeLat(randomLat(small));\n      lons[2*id+1] = quantizeLon(randomLon(small));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id+1], lons[2*id+1]);\n\n      if (VERBOSE) {\n        System.out.println(\"id=\" + id);\n        System.out.println(\"  lat=\" + lats[2*id] + \" lon=\" + lons[2*id]);\n        System.out.println(\"  lat=\" + lats[2*id+1] + \" lon=\" + lons[2*id+1]);\n      }\n      w.addDocument(doc);\n    }\n\n    // TODO: share w/ verify; just need parallel array of the expected ids\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    int iters = atLeast(25);\n    for (int iter=0;iter<iters;iter++) {\n      Rectangle rect = randomRect(small);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" rect=\" + rect);\n      }\n\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        \n        boolean result1 = rectContainsPoint(rect, latDoc1, lonDoc1);\n        boolean result2 = rectContainsPoint(rect, latDoc2, lonDoc2);\n\n        boolean expected = result1 || result2;\n\n        if (hits.get(docID) != expected) {\n          String id = s.doc(docID).get(\"id\");\n          if (expected) {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should match but did not\");\n          } else {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should not match but did\");\n          }\n          System.out.println(\"  rect=\" + rect);\n          System.out.println(\"  lat=\" + latDoc1 + \" lon=\" + lonDoc1 + \"\\n  lat=\" + latDoc2 + \" lon=\" + lonDoc2);\n          System.out.println(\"  result1=\" + result1 + \" result2=\" + result2);\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8cb57c50beb99a1245256e866350af8e5ea1f36","date":1460921840,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testMultiValued().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testMultiValued().mjava","sourceNew":"  public void testMultiValued() throws Exception {\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    // and on seeds being able to reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    boolean small = random().nextBoolean();\n\n    for (int id=0;id<numPoints;id++) {\n      Document doc = new Document();\n      lats[2*id] = quantizeLat(randomLat(small));\n      lons[2*id] = quantizeLon(randomLon(small));\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.YES));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id], lons[2*id]);\n      lats[2*id+1] = quantizeLat(randomLat(small));\n      lons[2*id+1] = quantizeLon(randomLon(small));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id+1], lons[2*id+1]);\n\n      if (VERBOSE) {\n        System.out.println(\"id=\" + id);\n        System.out.println(\"  lat=\" + lats[2*id] + \" lon=\" + lons[2*id]);\n        System.out.println(\"  lat=\" + lats[2*id+1] + \" lon=\" + lons[2*id+1]);\n      }\n      w.addDocument(doc);\n    }\n\n    // TODO: share w/ verify; just need parallel array of the expected ids\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    int iters = atLeast(25);\n    for (int iter=0;iter<iters;iter++) {\n      Rectangle rect = randomRect(small);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" rect=\" + rect);\n      }\n\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        \n        boolean result1 = rectContainsPoint(rect, latDoc1, lonDoc1);\n        boolean result2 = rectContainsPoint(rect, latDoc2, lonDoc2);\n\n        boolean expected = result1 || result2;\n\n        if (hits.get(docID) != expected) {\n          String id = s.doc(docID).get(\"id\");\n          if (expected) {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should match but did not\");\n          } else {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should not match but did\");\n          }\n          System.out.println(\"  rect=\" + rect);\n          System.out.println(\"  lat=\" + latDoc1 + \" lon=\" + lonDoc1 + \"\\n  lat=\" + latDoc2 + \" lon=\" + lonDoc2);\n          System.out.println(\"  result1=\" + result1 + \" result2=\" + result2);\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValued() throws Exception {\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    // and on seeds being able to reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    boolean small = random().nextBoolean();\n\n    for (int id=0;id<numPoints;id++) {\n      Document doc = new Document();\n      lats[2*id] = quantizeLat(randomLat(small));\n      lons[2*id] = quantizeLon(randomLon(small));\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.YES));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id], lons[2*id]);\n      lats[2*id+1] = quantizeLat(randomLat(small));\n      lons[2*id+1] = quantizeLon(randomLon(small));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id+1], lons[2*id+1]);\n\n      if (VERBOSE) {\n        System.out.println(\"id=\" + id);\n        System.out.println(\"  lat=\" + lats[2*id] + \" lon=\" + lons[2*id]);\n        System.out.println(\"  lat=\" + lats[2*id+1] + \" lon=\" + lons[2*id+1]);\n      }\n      w.addDocument(doc);\n    }\n\n    // TODO: share w/ verify; just need parallel array of the expected ids\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    int iters = atLeast(25);\n    for (int iter=0;iter<iters;iter++) {\n      Rectangle rect = randomRect(small);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" rect=\" + rect);\n      }\n\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        \n        boolean result1 = rectContainsPoint(rect, latDoc1, lonDoc1);\n        boolean result2 = rectContainsPoint(rect, latDoc2, lonDoc2);\n\n        boolean expected = result1 || result2;\n\n        if (hits.get(docID) != expected) {\n          String id = s.doc(docID).get(\"id\");\n          if (expected) {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should match but did not\");\n          } else {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should not match but did\");\n          }\n          System.out.println(\"  rect=\" + rect);\n          System.out.println(\"  lat=\" + latDoc1 + \" lon=\" + lonDoc1 + \"\\n  lat=\" + latDoc2 + \" lon=\" + lonDoc2);\n          System.out.println(\"  result1=\" + result1 + \" result2=\" + result2);\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2","date":1460953142,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testMultiValued().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testMultiValued().mjava","sourceNew":"  public void testMultiValued() throws Exception {\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    // and on seeds being able to reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int id=0;id<numPoints;id++) {\n      Document doc = new Document();\n      lats[2*id] = quantizeLat(nextLatitude());\n      lons[2*id] = quantizeLon(nextLongitude());\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.YES));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id], lons[2*id]);\n      lats[2*id+1] = quantizeLat(nextLatitude());\n      lons[2*id+1] = quantizeLon(nextLongitude());\n      addPointToDoc(FIELD_NAME, doc, lats[2*id+1], lons[2*id+1]);\n\n      if (VERBOSE) {\n        System.out.println(\"id=\" + id);\n        System.out.println(\"  lat=\" + lats[2*id] + \" lon=\" + lons[2*id]);\n        System.out.println(\"  lat=\" + lats[2*id+1] + \" lon=\" + lons[2*id+1]);\n      }\n      w.addDocument(doc);\n    }\n\n    // TODO: share w/ verify; just need parallel array of the expected ids\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    int iters = atLeast(25);\n    for (int iter=0;iter<iters;iter++) {\n      Rectangle rect = nextBox();\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" rect=\" + rect);\n      }\n\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        \n        boolean result1 = rectContainsPoint(rect, latDoc1, lonDoc1);\n        boolean result2 = rectContainsPoint(rect, latDoc2, lonDoc2);\n\n        boolean expected = result1 || result2;\n\n        if (hits.get(docID) != expected) {\n          String id = s.doc(docID).get(\"id\");\n          if (expected) {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should match but did not\");\n          } else {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should not match but did\");\n          }\n          System.out.println(\"  rect=\" + rect);\n          System.out.println(\"  lat=\" + latDoc1 + \" lon=\" + lonDoc1 + \"\\n  lat=\" + latDoc2 + \" lon=\" + lonDoc2);\n          System.out.println(\"  result1=\" + result1 + \" result2=\" + result2);\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValued() throws Exception {\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    // and on seeds being able to reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    boolean small = random().nextBoolean();\n\n    for (int id=0;id<numPoints;id++) {\n      Document doc = new Document();\n      lats[2*id] = quantizeLat(randomLat(small));\n      lons[2*id] = quantizeLon(randomLon(small));\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.YES));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id], lons[2*id]);\n      lats[2*id+1] = quantizeLat(randomLat(small));\n      lons[2*id+1] = quantizeLon(randomLon(small));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id+1], lons[2*id+1]);\n\n      if (VERBOSE) {\n        System.out.println(\"id=\" + id);\n        System.out.println(\"  lat=\" + lats[2*id] + \" lon=\" + lons[2*id]);\n        System.out.println(\"  lat=\" + lats[2*id+1] + \" lon=\" + lons[2*id+1]);\n      }\n      w.addDocument(doc);\n    }\n\n    // TODO: share w/ verify; just need parallel array of the expected ids\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    int iters = atLeast(25);\n    for (int iter=0;iter<iters;iter++) {\n      Rectangle rect = randomRect(small);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" rect=\" + rect);\n      }\n\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        \n        boolean result1 = rectContainsPoint(rect, latDoc1, lonDoc1);\n        boolean result2 = rectContainsPoint(rect, latDoc2, lonDoc2);\n\n        boolean expected = result1 || result2;\n\n        if (hits.get(docID) != expected) {\n          String id = s.doc(docID).get(\"id\");\n          if (expected) {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should match but did not\");\n          } else {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should not match but did\");\n          }\n          System.out.println(\"  rect=\" + rect);\n          System.out.println(\"  lat=\" + latDoc1 + \" lon=\" + lonDoc1 + \"\\n  lat=\" + latDoc2 + \" lon=\" + lonDoc2);\n          System.out.println(\"  result1=\" + result1 + \" result2=\" + result2);\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testMultiValued().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testMultiValued().mjava","sourceNew":"  public void testMultiValued() throws Exception {\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    // and on seeds being able to reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int id=0;id<numPoints;id++) {\n      Document doc = new Document();\n      lats[2*id] = quantizeLat(nextLatitude());\n      lons[2*id] = quantizeLon(nextLongitude());\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.YES));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id], lons[2*id]);\n      lats[2*id+1] = quantizeLat(nextLatitude());\n      lons[2*id+1] = quantizeLon(nextLongitude());\n      addPointToDoc(FIELD_NAME, doc, lats[2*id+1], lons[2*id+1]);\n\n      if (VERBOSE) {\n        System.out.println(\"id=\" + id);\n        System.out.println(\"  lat=\" + lats[2*id] + \" lon=\" + lons[2*id]);\n        System.out.println(\"  lat=\" + lats[2*id+1] + \" lon=\" + lons[2*id+1]);\n      }\n      w.addDocument(doc);\n    }\n\n    // TODO: share w/ verify; just need parallel array of the expected ids\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    int iters = atLeast(25);\n    for (int iter=0;iter<iters;iter++) {\n      Rectangle rect = nextBox();\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" rect=\" + rect);\n      }\n\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        \n        boolean result1 = rectContainsPoint(rect, latDoc1, lonDoc1);\n        boolean result2 = rectContainsPoint(rect, latDoc2, lonDoc2);\n\n        boolean expected = result1 || result2;\n\n        if (hits.get(docID) != expected) {\n          String id = s.doc(docID).get(\"id\");\n          if (expected) {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should match but did not\");\n          } else {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should not match but did\");\n          }\n          System.out.println(\"  rect=\" + rect);\n          System.out.println(\"  lat=\" + latDoc1 + \" lon=\" + lonDoc1 + \"\\n  lat=\" + latDoc2 + \" lon=\" + lonDoc2);\n          System.out.println(\"  result1=\" + result1 + \" result2=\" + result2);\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValued() throws Exception {\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    // and on seeds being able to reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    boolean small = random().nextBoolean();\n\n    for (int id=0;id<numPoints;id++) {\n      Document doc = new Document();\n      lats[2*id] = quantizeLat(randomLat(small));\n      lons[2*id] = quantizeLon(randomLon(small));\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.YES));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id], lons[2*id]);\n      lats[2*id+1] = quantizeLat(randomLat(small));\n      lons[2*id+1] = quantizeLon(randomLon(small));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id+1], lons[2*id+1]);\n\n      if (VERBOSE) {\n        System.out.println(\"id=\" + id);\n        System.out.println(\"  lat=\" + lats[2*id] + \" lon=\" + lons[2*id]);\n        System.out.println(\"  lat=\" + lats[2*id+1] + \" lon=\" + lons[2*id+1]);\n      }\n      w.addDocument(doc);\n    }\n\n    // TODO: share w/ verify; just need parallel array of the expected ids\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    int iters = atLeast(25);\n    for (int iter=0;iter<iters;iter++) {\n      Rectangle rect = randomRect(small);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" rect=\" + rect);\n      }\n\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        \n        boolean result1 = rectContainsPoint(rect, latDoc1, lonDoc1);\n        boolean result2 = rectContainsPoint(rect, latDoc2, lonDoc2);\n\n        boolean expected = result1 || result2;\n\n        if (hits.get(docID) != expected) {\n          String id = s.doc(docID).get(\"id\");\n          if (expected) {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should match but did not\");\n          } else {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should not match but did\");\n          }\n          System.out.println(\"  rect=\" + rect);\n          System.out.println(\"  lat=\" + latDoc1 + \" lon=\" + lonDoc1 + \"\\n  lat=\" + latDoc2 + \" lon=\" + lonDoc2);\n          System.out.println(\"  result1=\" + result1 + \" result2=\" + result2);\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testMultiValued().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testMultiValued().mjava","sourceNew":"  public void testMultiValued() throws Exception {\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    // and on seeds being able to reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int id=0;id<numPoints;id++) {\n      Document doc = new Document();\n      lats[2*id] = quantizeLat(nextLatitude());\n      lons[2*id] = quantizeLon(nextLongitude());\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.YES));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id], lons[2*id]);\n      lats[2*id+1] = quantizeLat(nextLatitude());\n      lons[2*id+1] = quantizeLon(nextLongitude());\n      addPointToDoc(FIELD_NAME, doc, lats[2*id+1], lons[2*id+1]);\n\n      if (VERBOSE) {\n        System.out.println(\"id=\" + id);\n        System.out.println(\"  lat=\" + lats[2*id] + \" lon=\" + lons[2*id]);\n        System.out.println(\"  lat=\" + lats[2*id+1] + \" lon=\" + lons[2*id+1]);\n      }\n      w.addDocument(doc);\n    }\n\n    // TODO: share w/ verify; just need parallel array of the expected ids\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    int iters = atLeast(25);\n    for (int iter=0;iter<iters;iter++) {\n      Rectangle rect = nextBox();\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" rect=\" + rect);\n      }\n\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public ScoreMode scoreMode() {\n            return ScoreMode.COMPLETE_NO_SCORES;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        \n        boolean result1 = rectContainsPoint(rect, latDoc1, lonDoc1);\n        boolean result2 = rectContainsPoint(rect, latDoc2, lonDoc2);\n\n        boolean expected = result1 || result2;\n\n        if (hits.get(docID) != expected) {\n          String id = s.doc(docID).get(\"id\");\n          if (expected) {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should match but did not\");\n          } else {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should not match but did\");\n          }\n          System.out.println(\"  rect=\" + rect);\n          System.out.println(\"  lat=\" + latDoc1 + \" lon=\" + lonDoc1 + \"\\n  lat=\" + latDoc2 + \" lon=\" + lonDoc2);\n          System.out.println(\"  result1=\" + result1 + \" result2=\" + result2);\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValued() throws Exception {\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    // and on seeds being able to reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int id=0;id<numPoints;id++) {\n      Document doc = new Document();\n      lats[2*id] = quantizeLat(nextLatitude());\n      lons[2*id] = quantizeLon(nextLongitude());\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.YES));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id], lons[2*id]);\n      lats[2*id+1] = quantizeLat(nextLatitude());\n      lons[2*id+1] = quantizeLon(nextLongitude());\n      addPointToDoc(FIELD_NAME, doc, lats[2*id+1], lons[2*id+1]);\n\n      if (VERBOSE) {\n        System.out.println(\"id=\" + id);\n        System.out.println(\"  lat=\" + lats[2*id] + \" lon=\" + lons[2*id]);\n        System.out.println(\"  lat=\" + lats[2*id+1] + \" lon=\" + lons[2*id+1]);\n      }\n      w.addDocument(doc);\n    }\n\n    // TODO: share w/ verify; just need parallel array of the expected ids\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    int iters = atLeast(25);\n    for (int iter=0;iter<iters;iter++) {\n      Rectangle rect = nextBox();\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" rect=\" + rect);\n      }\n\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        \n        boolean result1 = rectContainsPoint(rect, latDoc1, lonDoc1);\n        boolean result2 = rectContainsPoint(rect, latDoc2, lonDoc2);\n\n        boolean expected = result1 || result2;\n\n        if (hits.get(docID) != expected) {\n          String id = s.doc(docID).get(\"id\");\n          if (expected) {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should match but did not\");\n          } else {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should not match but did\");\n          }\n          System.out.println(\"  rect=\" + rect);\n          System.out.println(\"  lat=\" + latDoc1 + \" lon=\" + lonDoc1 + \"\\n  lat=\" + latDoc2 + \" lon=\" + lonDoc2);\n          System.out.println(\"  result1=\" + result1 + \" result2=\" + result2);\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testMultiValued().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testMultiValued().mjava","sourceNew":"  public void testMultiValued() throws Exception {\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    // and on seeds being able to reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int id=0;id<numPoints;id++) {\n      Document doc = new Document();\n      lats[2*id] = quantizeLat(nextLatitude());\n      lons[2*id] = quantizeLon(nextLongitude());\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.YES));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id], lons[2*id]);\n      lats[2*id+1] = quantizeLat(nextLatitude());\n      lons[2*id+1] = quantizeLon(nextLongitude());\n      addPointToDoc(FIELD_NAME, doc, lats[2*id+1], lons[2*id+1]);\n\n      if (VERBOSE) {\n        System.out.println(\"id=\" + id);\n        System.out.println(\"  lat=\" + lats[2*id] + \" lon=\" + lons[2*id]);\n        System.out.println(\"  lat=\" + lats[2*id+1] + \" lon=\" + lons[2*id+1]);\n      }\n      w.addDocument(doc);\n    }\n\n    // TODO: share w/ verify; just need parallel array of the expected ids\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    int iters = atLeast(25);\n    for (int iter=0;iter<iters;iter++) {\n      Rectangle rect = nextBox();\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" rect=\" + rect);\n      }\n\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public ScoreMode scoreMode() {\n            return ScoreMode.COMPLETE_NO_SCORES;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        \n        boolean result1 = rectContainsPoint(rect, latDoc1, lonDoc1);\n        boolean result2 = rectContainsPoint(rect, latDoc2, lonDoc2);\n\n        boolean expected = result1 || result2;\n\n        if (hits.get(docID) != expected) {\n          String id = s.doc(docID).get(\"id\");\n          if (expected) {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should match but did not\");\n          } else {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should not match but did\");\n          }\n          System.out.println(\"  rect=\" + rect);\n          System.out.println(\"  lat=\" + latDoc1 + \" lon=\" + lonDoc1 + \"\\n  lat=\" + latDoc2 + \" lon=\" + lonDoc2);\n          System.out.println(\"  result1=\" + result1 + \" result2=\" + result2);\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValued() throws Exception {\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    // and on seeds being able to reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int id=0;id<numPoints;id++) {\n      Document doc = new Document();\n      lats[2*id] = quantizeLat(nextLatitude());\n      lons[2*id] = quantizeLon(nextLongitude());\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.YES));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id], lons[2*id]);\n      lats[2*id+1] = quantizeLat(nextLatitude());\n      lons[2*id+1] = quantizeLon(nextLongitude());\n      addPointToDoc(FIELD_NAME, doc, lats[2*id+1], lons[2*id+1]);\n\n      if (VERBOSE) {\n        System.out.println(\"id=\" + id);\n        System.out.println(\"  lat=\" + lats[2*id] + \" lon=\" + lons[2*id]);\n        System.out.println(\"  lat=\" + lats[2*id+1] + \" lon=\" + lons[2*id+1]);\n      }\n      w.addDocument(doc);\n    }\n\n    // TODO: share w/ verify; just need parallel array of the expected ids\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    int iters = atLeast(25);\n    for (int iter=0;iter<iters;iter++) {\n      Rectangle rect = nextBox();\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" rect=\" + rect);\n      }\n\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        \n        boolean result1 = rectContainsPoint(rect, latDoc1, lonDoc1);\n        boolean result2 = rectContainsPoint(rect, latDoc2, lonDoc2);\n\n        boolean expected = result1 || result2;\n\n        if (hits.get(docID) != expected) {\n          String id = s.doc(docID).get(\"id\");\n          if (expected) {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should match but did not\");\n          } else {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should not match but did\");\n          }\n          System.out.println(\"  rect=\" + rect);\n          System.out.println(\"  lat=\" + latDoc1 + \" lon=\" + lonDoc1 + \"\\n  lat=\" + latDoc2 + \" lon=\" + lonDoc2);\n          System.out.println(\"  result1=\" + result1 + \" result2=\" + result2);\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testMultiValued().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testMultiValued().mjava","sourceNew":"  public void testMultiValued() throws Exception {\n    int numPoints = atLeast(1000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    // and on seeds being able to reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int id=0;id<numPoints;id++) {\n      Document doc = new Document();\n      lats[2*id] = quantizeLat(nextLatitude());\n      lons[2*id] = quantizeLon(nextLongitude());\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.YES));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id], lons[2*id]);\n      lats[2*id+1] = quantizeLat(nextLatitude());\n      lons[2*id+1] = quantizeLon(nextLongitude());\n      addPointToDoc(FIELD_NAME, doc, lats[2*id+1], lons[2*id+1]);\n\n      if (VERBOSE) {\n        System.out.println(\"id=\" + id);\n        System.out.println(\"  lat=\" + lats[2*id] + \" lon=\" + lons[2*id]);\n        System.out.println(\"  lat=\" + lats[2*id+1] + \" lon=\" + lons[2*id+1]);\n      }\n      w.addDocument(doc);\n    }\n\n    // TODO: share w/ verify; just need parallel array of the expected ids\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    int iters = atLeast(25);\n    for (int iter=0;iter<iters;iter++) {\n      Rectangle rect = nextBox();\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" rect=\" + rect);\n      }\n\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public ScoreMode scoreMode() {\n            return ScoreMode.COMPLETE_NO_SCORES;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        \n        boolean result1 = rectContainsPoint(rect, latDoc1, lonDoc1);\n        boolean result2 = rectContainsPoint(rect, latDoc2, lonDoc2);\n\n        boolean expected = result1 || result2;\n\n        if (hits.get(docID) != expected) {\n          String id = s.doc(docID).get(\"id\");\n          if (expected) {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should match but did not\");\n          } else {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should not match but did\");\n          }\n          System.out.println(\"  rect=\" + rect);\n          System.out.println(\"  lat=\" + latDoc1 + \" lon=\" + lonDoc1 + \"\\n  lat=\" + latDoc2 + \" lon=\" + lonDoc2);\n          System.out.println(\"  result1=\" + result1 + \" result2=\" + result2);\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValued() throws Exception {\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    // and on seeds being able to reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int id=0;id<numPoints;id++) {\n      Document doc = new Document();\n      lats[2*id] = quantizeLat(nextLatitude());\n      lons[2*id] = quantizeLon(nextLongitude());\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.YES));\n      addPointToDoc(FIELD_NAME, doc, lats[2*id], lons[2*id]);\n      lats[2*id+1] = quantizeLat(nextLatitude());\n      lons[2*id+1] = quantizeLon(nextLongitude());\n      addPointToDoc(FIELD_NAME, doc, lats[2*id+1], lons[2*id+1]);\n\n      if (VERBOSE) {\n        System.out.println(\"id=\" + id);\n        System.out.println(\"  lat=\" + lats[2*id] + \" lon=\" + lons[2*id]);\n        System.out.println(\"  lat=\" + lats[2*id+1] + \" lon=\" + lons[2*id+1]);\n      }\n      w.addDocument(doc);\n    }\n\n    // TODO: share w/ verify; just need parallel array of the expected ids\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    int iters = atLeast(25);\n    for (int iter=0;iter<iters;iter++) {\n      Rectangle rect = nextBox();\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" rect=\" + rect);\n      }\n\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public ScoreMode scoreMode() {\n            return ScoreMode.COMPLETE_NO_SCORES;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        \n        boolean result1 = rectContainsPoint(rect, latDoc1, lonDoc1);\n        boolean result2 = rectContainsPoint(rect, latDoc2, lonDoc2);\n\n        boolean expected = result1 || result2;\n\n        if (hits.get(docID) != expected) {\n          String id = s.doc(docID).get(\"id\");\n          if (expected) {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should match but did not\");\n          } else {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should not match but did\");\n          }\n          System.out.println(\"  rect=\" + rect);\n          System.out.println(\"  lat=\" + latDoc1 + \" lon=\" + lonDoc1 + \"\\n  lat=\" + latDoc2 + \" lon=\" + lonDoc2);\n          System.out.println(\"  result1=\" + result1 + \" result2=\" + result2);\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["417142ff08fda9cf0b72d5133e63097a166c6458"],"713122036535651642e6d4fe57ce12b449e18473":["f8cb57c50beb99a1245256e866350af8e5ea1f36","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["f8cb57c50beb99a1245256e866350af8e5ea1f36"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["713122036535651642e6d4fe57ce12b449e18473"],"3e21d7642ee7e0c00429964e5b47504602fe218c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e21d7642ee7e0c00429964e5b47504602fe218c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"417142ff08fda9cf0b72d5133e63097a166c6458":["713122036535651642e6d4fe57ce12b449e18473","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"713122036535651642e6d4fe57ce12b449e18473":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e21d7642ee7e0c00429964e5b47504602fe218c","f8cb57c50beb99a1245256e866350af8e5ea1f36"],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["713122036535651642e6d4fe57ce12b449e18473"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"3e21d7642ee7e0c00429964e5b47504602fe218c":["f8cb57c50beb99a1245256e866350af8e5ea1f36"],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["713122036535651642e6d4fe57ce12b449e18473","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"417142ff08fda9cf0b72d5133e63097a166c6458":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}