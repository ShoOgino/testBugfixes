{"path":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#assertRewrite(FilteredQuery,Class[#-extends-Query]).mjava","commits":[{"id":"586cf43028f4cae848088bc127a6e4d6773ce9aa","date":1323793944,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#assertRewrite(FilteredQuery,Class[#-extends-Query]).mjava","pathOld":"/dev/null","sourceNew":"  private void assertRewrite(FilteredQuery fq, Class<? extends Query> clazz) throws Exception {\n    // assign crazy boost to FQ\n    final float boost = random.nextFloat() * 100.f;\n    fq.setBoost(boost);\n    \n    // assign crazy boost to inner\n    final float innerBoost = random.nextFloat() * 100.f;\n    fq.getQuery().setBoost(innerBoost);\n    \n    // check the class and boosts of rewritten query\n    final Query rewritten = searcher.rewrite(fq);\n    assertTrue(\"is not instance of \" + clazz.getName(), clazz.isInstance(rewritten));\n    if (rewritten instanceof FilteredQuery) {\n      assertEquals(boost, rewritten.getBoost(), 1.E-5f);\n      assertEquals(innerBoost, ((FilteredQuery) rewritten).getQuery().getBoost(), 1.E-5f);\n    } else {\n      assertEquals(boost * innerBoost, rewritten.getBoost(), 1.E-5f);\n    }\n    \n    // check that the original query was not modified\n    assertEquals(boost, fq.getBoost(), 1.E-5f);\n    assertEquals(innerBoost, fq.getQuery().getBoost(), 1.E-5f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ceb6a6c707ada1df8bde804e25c98668e699a18","date":1323800602,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#assertRewrite(FilteredQuery,Class[#-extends-Query]).mjava","pathOld":"/dev/null","sourceNew":"  private void assertRewrite(FilteredQuery fq, Class<? extends Query> clazz) throws Exception {\n    // assign crazy boost to FQ\n    final float boost = random.nextFloat() * 100.f;\n    fq.setBoost(boost);\n    \n    // assign crazy boost to inner\n    final float innerBoost = random.nextFloat() * 100.f;\n    fq.getQuery().setBoost(innerBoost);\n    \n    // check the class and boosts of rewritten query\n    final Query rewritten = searcher.rewrite(fq);\n    assertTrue(\"is not instance of \" + clazz.getName(), clazz.isInstance(rewritten));\n    if (rewritten instanceof FilteredQuery) {\n      assertEquals(boost, rewritten.getBoost(), 1.E-5f);\n      assertEquals(innerBoost, ((FilteredQuery) rewritten).getQuery().getBoost(), 1.E-5f);\n    } else {\n      assertEquals(boost * innerBoost, rewritten.getBoost(), 1.E-5f);\n    }\n    \n    // check that the original query was not modified\n    assertEquals(boost, fq.getBoost(), 1.E-5f);\n    assertEquals(innerBoost, fq.getQuery().getBoost(), 1.E-5f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#assertRewrite(FilteredQuery,Class[#-extends-Query]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#assertRewrite(FilteredQuery,Class[#-extends-Query]).mjava","sourceNew":"  private void assertRewrite(FilteredQuery fq, Class<? extends Query> clazz) throws Exception {\n    // assign crazy boost to FQ\n    final float boost = random.nextFloat() * 100.f;\n    fq.setBoost(boost);\n    \n    // assign crazy boost to inner\n    final float innerBoost = random.nextFloat() * 100.f;\n    fq.getQuery().setBoost(innerBoost);\n    \n    // check the class and boosts of rewritten query\n    final Query rewritten = searcher.rewrite(fq);\n    assertTrue(\"is not instance of \" + clazz.getName(), clazz.isInstance(rewritten));\n    if (rewritten instanceof FilteredQuery) {\n      assertEquals(boost, rewritten.getBoost(), 1.E-5f);\n      assertEquals(innerBoost, ((FilteredQuery) rewritten).getQuery().getBoost(), 1.E-5f);\n    } else {\n      assertEquals(boost * innerBoost, rewritten.getBoost(), 1.E-5f);\n    }\n    \n    // check that the original query was not modified\n    assertEquals(boost, fq.getBoost(), 1.E-5f);\n    assertEquals(innerBoost, fq.getQuery().getBoost(), 1.E-5f);\n  }\n\n","sourceOld":"  private void assertRewrite(FilteredQuery fq, Class<? extends Query> clazz) throws Exception {\n    // assign crazy boost to FQ\n    final float boost = random.nextFloat() * 100.f;\n    fq.setBoost(boost);\n    \n    // assign crazy boost to inner\n    final float innerBoost = random.nextFloat() * 100.f;\n    fq.getQuery().setBoost(innerBoost);\n    \n    // check the class and boosts of rewritten query\n    final Query rewritten = searcher.rewrite(fq);\n    assertTrue(\"is not instance of \" + clazz.getName(), clazz.isInstance(rewritten));\n    if (rewritten instanceof FilteredQuery) {\n      assertEquals(boost, rewritten.getBoost(), 1.E-5f);\n      assertEquals(innerBoost, ((FilteredQuery) rewritten).getQuery().getBoost(), 1.E-5f);\n    } else {\n      assertEquals(boost * innerBoost, rewritten.getBoost(), 1.E-5f);\n    }\n    \n    // check that the original query was not modified\n    assertEquals(boost, fq.getBoost(), 1.E-5f);\n    assertEquals(innerBoost, fq.getQuery().getBoost(), 1.E-5f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ceb6a6c707ada1df8bde804e25c98668e699a18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","586cf43028f4cae848088bc127a6e4d6773ce9aa"],"586cf43028f4cae848088bc127a6e4d6773ce9aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["586cf43028f4cae848088bc127a6e4d6773ce9aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"4ceb6a6c707ada1df8bde804e25c98668e699a18":[],"586cf43028f4cae848088bc127a6e4d6773ce9aa":["4ceb6a6c707ada1df8bde804e25c98668e699a18","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ceb6a6c707ada1df8bde804e25c98668e699a18","586cf43028f4cae848088bc127a6e4d6773ce9aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ceb6a6c707ada1df8bde804e25c98668e699a18","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}