{"path":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingPostFilter#getBoostDocs(IndexSearcher,Set[String]).mjava","commits":[{"id":"c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d","date":1382570352,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingPostFilter#getBoostDocs(IndexSearcher,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"    private IntOpenHashSet getBoostDocs(IndexSearcher indexSearcher, Set<String> boosted) throws IOException {\n      IntOpenHashSet boostDocs = null;\n      if(boosted != null) {\n        SchemaField idField = this.schema.getUniqueKeyField();\n        String fieldName = idField.getName();\n        HashSet<BytesRef> localBoosts = new HashSet(boosted.size()*2);\n        Iterator<String> boostedIt = boosted.iterator();\n        while(boostedIt.hasNext()) {\n          localBoosts.add(new BytesRef(boostedIt.next()));\n        }\n\n        boostDocs = new IntOpenHashSet(boosted.size()*2);\n\n        List<AtomicReaderContext>leaves = indexSearcher.getTopReaderContext().leaves();\n        TermsEnum termsEnum = null;\n        DocsEnum docsEnum = null;\n        for(AtomicReaderContext leaf : leaves) {\n          AtomicReader reader = leaf.reader();\n          int docBase = leaf.docBase;\n          Bits liveDocs = reader.getLiveDocs();\n          Terms terms = reader.terms(fieldName);\n          termsEnum = terms.iterator(termsEnum);\n          Iterator<BytesRef> it = localBoosts.iterator();\n          while(it.hasNext()) {\n            BytesRef ref = it.next();\n            if(termsEnum.seekExact(ref)) {\n              docsEnum = termsEnum.docs(liveDocs, docsEnum);\n              int doc = docsEnum.nextDoc();\n              if(doc != -1) {\n                //Found the document.\n                boostDocs.add(doc+docBase);\n                it.remove();\n              }\n            }\n          }\n        }\n      }\n\n      return boostDocs;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceae51e37bbff02dcdeaa12303fec10d3eaaa004","date":1387382773,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingPostFilter#getBoostDocs(SolrIndexSearcher,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingPostFilter#getBoostDocs(IndexSearcher,Set[String]).mjava","sourceNew":"    private IntOpenHashSet getBoostDocs(SolrIndexSearcher indexSearcher, Set<String> boosted) throws IOException {\n      IntOpenHashSet boostDocs = null;\n      if(boosted != null) {\n        SchemaField idField = indexSearcher.getSchema().getUniqueKeyField();\n        String fieldName = idField.getName();\n        HashSet<BytesRef> localBoosts = new HashSet(boosted.size()*2);\n        Iterator<String> boostedIt = boosted.iterator();\n        while(boostedIt.hasNext()) {\n          localBoosts.add(new BytesRef(boostedIt.next()));\n        }\n\n        boostDocs = new IntOpenHashSet(boosted.size()*2);\n\n        List<AtomicReaderContext>leaves = indexSearcher.getTopReaderContext().leaves();\n        TermsEnum termsEnum = null;\n        DocsEnum docsEnum = null;\n        for(AtomicReaderContext leaf : leaves) {\n          AtomicReader reader = leaf.reader();\n          int docBase = leaf.docBase;\n          Bits liveDocs = reader.getLiveDocs();\n          Terms terms = reader.terms(fieldName);\n          termsEnum = terms.iterator(termsEnum);\n          Iterator<BytesRef> it = localBoosts.iterator();\n          while(it.hasNext()) {\n            BytesRef ref = it.next();\n            if(termsEnum.seekExact(ref)) {\n              docsEnum = termsEnum.docs(liveDocs, docsEnum);\n              int doc = docsEnum.nextDoc();\n              if(doc != -1) {\n                //Found the document.\n                boostDocs.add(doc+docBase);\n                it.remove();\n              }\n            }\n          }\n        }\n      }\n\n      return boostDocs;\n    }\n\n","sourceOld":"    private IntOpenHashSet getBoostDocs(IndexSearcher indexSearcher, Set<String> boosted) throws IOException {\n      IntOpenHashSet boostDocs = null;\n      if(boosted != null) {\n        SchemaField idField = this.schema.getUniqueKeyField();\n        String fieldName = idField.getName();\n        HashSet<BytesRef> localBoosts = new HashSet(boosted.size()*2);\n        Iterator<String> boostedIt = boosted.iterator();\n        while(boostedIt.hasNext()) {\n          localBoosts.add(new BytesRef(boostedIt.next()));\n        }\n\n        boostDocs = new IntOpenHashSet(boosted.size()*2);\n\n        List<AtomicReaderContext>leaves = indexSearcher.getTopReaderContext().leaves();\n        TermsEnum termsEnum = null;\n        DocsEnum docsEnum = null;\n        for(AtomicReaderContext leaf : leaves) {\n          AtomicReader reader = leaf.reader();\n          int docBase = leaf.docBase;\n          Bits liveDocs = reader.getLiveDocs();\n          Terms terms = reader.terms(fieldName);\n          termsEnum = terms.iterator(termsEnum);\n          Iterator<BytesRef> it = localBoosts.iterator();\n          while(it.hasNext()) {\n            BytesRef ref = it.next();\n            if(termsEnum.seekExact(ref)) {\n              docsEnum = termsEnum.docs(liveDocs, docsEnum);\n              int doc = docsEnum.nextDoc();\n              if(doc != -1) {\n                //Found the document.\n                boostDocs.add(doc+docBase);\n                it.remove();\n              }\n            }\n          }\n        }\n      }\n\n      return boostDocs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingPostFilter#getBoostDocs(IndexSearcher,Set[String]).mjava","sourceNew":null,"sourceOld":"    private IntOpenHashSet getBoostDocs(IndexSearcher indexSearcher, Set<String> boosted) throws IOException {\n      IntOpenHashSet boostDocs = null;\n      if(boosted != null) {\n        SchemaField idField = this.schema.getUniqueKeyField();\n        String fieldName = idField.getName();\n        HashSet<BytesRef> localBoosts = new HashSet(boosted.size()*2);\n        Iterator<String> boostedIt = boosted.iterator();\n        while(boostedIt.hasNext()) {\n          localBoosts.add(new BytesRef(boostedIt.next()));\n        }\n\n        boostDocs = new IntOpenHashSet(boosted.size()*2);\n\n        List<AtomicReaderContext>leaves = indexSearcher.getTopReaderContext().leaves();\n        TermsEnum termsEnum = null;\n        DocsEnum docsEnum = null;\n        for(AtomicReaderContext leaf : leaves) {\n          AtomicReader reader = leaf.reader();\n          int docBase = leaf.docBase;\n          Bits liveDocs = reader.getLiveDocs();\n          Terms terms = reader.terms(fieldName);\n          termsEnum = terms.iterator(termsEnum);\n          Iterator<BytesRef> it = localBoosts.iterator();\n          while(it.hasNext()) {\n            BytesRef ref = it.next();\n            if(termsEnum.seekExact(ref)) {\n              docsEnum = termsEnum.docs(liveDocs, docsEnum);\n              int doc = docsEnum.nextDoc();\n              if(doc != -1) {\n                //Found the document.\n                boostDocs.add(doc+docBase);\n                it.remove();\n              }\n            }\n          }\n        }\n      }\n\n      return boostDocs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d","ceae51e37bbff02dcdeaa12303fec10d3eaaa004"],"ceae51e37bbff02dcdeaa12303fec10d3eaaa004":["c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ceae51e37bbff02dcdeaa12303fec10d3eaaa004"]},"commit2Childs":{"c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ceae51e37bbff02dcdeaa12303fec10d3eaaa004"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ceae51e37bbff02dcdeaa12303fec10d3eaaa004":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}