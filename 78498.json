{"path":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#addReplicaToShard(String,Replica.Type).mjava","commits":[{"id":"4c538b3eeebd03c2067a2fa5be92f073a08b6f41","date":1496264014,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#addReplicaToShard(String,Replica.Type).mjava","pathOld":"/dev/null","sourceNew":"  private void addReplicaToShard(String shardName, Replica.Type type) throws ClientProtocolException, IOException, SolrServerException {\n    switch (random().nextInt(3)) {\n      case 0: // Add replica with SolrJ\n        CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, shardName, type).process(cluster.getSolrClient());\n        assertEquals(\"Unexpected response status: \" + response.getStatus(), 0, response.getStatus());\n        break;\n      case 1: // Add replica with V1 API\n        String url = String.format(Locale.ROOT, \"%s/admin/collections?action=ADDREPLICA&collection=%s&shard=%s&type=%s\",\n            cluster.getRandomJetty(random()).getBaseUrl(),\n            collectionName,\n            shardName,\n            type);\n        HttpGet addReplicaGet = new HttpGet(url);\n        HttpResponse httpResponse = cluster.getSolrClient().getHttpClient().execute(addReplicaGet);\n        assertEquals(200, httpResponse.getStatusLine().getStatusCode());\n        break;\n      case 2:// Add replica with V2 API\n        url = String.format(Locale.ROOT, \"%s/____v2/c/%s/shards\",\n            cluster.getRandomJetty(random()).getBaseUrl(),\n            collectionName);\n        String requestBody = String.format(Locale.ROOT, \"{add-replica:{shard:%s, type:%s}}\",\n            shardName,\n            type);\n        HttpPost addReplicaPost = new HttpPost(url);\n        addReplicaPost.setHeader(\"Content-type\", \"application/json\");\n        addReplicaPost.setEntity(new StringEntity(requestBody));\n        httpResponse = cluster.getSolrClient().getHttpClient().execute(addReplicaPost);\n        assertEquals(200, httpResponse.getStatusLine().getStatusCode());\n        break;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#addReplicaToShard(String,Replica.Type).mjava","pathOld":"/dev/null","sourceNew":"  private void addReplicaToShard(String shardName, Replica.Type type) throws ClientProtocolException, IOException, SolrServerException {\n    switch (random().nextInt(3)) {\n      case 0: // Add replica with SolrJ\n        CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, shardName, type).process(cluster.getSolrClient());\n        assertEquals(\"Unexpected response status: \" + response.getStatus(), 0, response.getStatus());\n        break;\n      case 1: // Add replica with V1 API\n        String url = String.format(Locale.ROOT, \"%s/admin/collections?action=ADDREPLICA&collection=%s&shard=%s&type=%s\",\n            cluster.getRandomJetty(random()).getBaseUrl(),\n            collectionName,\n            shardName,\n            type);\n        HttpGet addReplicaGet = new HttpGet(url);\n        HttpResponse httpResponse = cluster.getSolrClient().getHttpClient().execute(addReplicaGet);\n        assertEquals(200, httpResponse.getStatusLine().getStatusCode());\n        break;\n      case 2:// Add replica with V2 API\n        url = String.format(Locale.ROOT, \"%s/____v2/c/%s/shards\",\n            cluster.getRandomJetty(random()).getBaseUrl(),\n            collectionName);\n        String requestBody = String.format(Locale.ROOT, \"{add-replica:{shard:%s, type:%s}}\",\n            shardName,\n            type);\n        HttpPost addReplicaPost = new HttpPost(url);\n        addReplicaPost.setHeader(\"Content-type\", \"application/json\");\n        addReplicaPost.setEntity(new StringEntity(requestBody));\n        httpResponse = cluster.getSolrClient().getHttpClient().execute(addReplicaPost);\n        assertEquals(200, httpResponse.getStatusLine().getStatusCode());\n        break;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#addReplicaToShard(String,Replica.Type).mjava","pathOld":"/dev/null","sourceNew":"  private void addReplicaToShard(String shardName, Replica.Type type) throws ClientProtocolException, IOException, SolrServerException {\n    switch (random().nextInt(3)) {\n      case 0: // Add replica with SolrJ\n        CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, shardName, type).process(cluster.getSolrClient());\n        assertEquals(\"Unexpected response status: \" + response.getStatus(), 0, response.getStatus());\n        break;\n      case 1: // Add replica with V1 API\n        String url = String.format(Locale.ROOT, \"%s/admin/collections?action=ADDREPLICA&collection=%s&shard=%s&type=%s\",\n            cluster.getRandomJetty(random()).getBaseUrl(),\n            collectionName,\n            shardName,\n            type);\n        HttpGet addReplicaGet = new HttpGet(url);\n        HttpResponse httpResponse = cluster.getSolrClient().getHttpClient().execute(addReplicaGet);\n        assertEquals(200, httpResponse.getStatusLine().getStatusCode());\n        break;\n      case 2:// Add replica with V2 API\n        url = String.format(Locale.ROOT, \"%s/____v2/c/%s/shards\",\n            cluster.getRandomJetty(random()).getBaseUrl(),\n            collectionName);\n        String requestBody = String.format(Locale.ROOT, \"{add-replica:{shard:%s, type:%s}}\",\n            shardName,\n            type);\n        HttpPost addReplicaPost = new HttpPost(url);\n        addReplicaPost.setHeader(\"Content-type\", \"application/json\");\n        addReplicaPost.setEntity(new StringEntity(requestBody));\n        httpResponse = cluster.getSolrClient().getHttpClient().execute(addReplicaPost);\n        assertEquals(200, httpResponse.getStatusLine().getStatusCode());\n        break;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#addReplicaToShard(String,Replica.Type).mjava","pathOld":"/dev/null","sourceNew":"  private void addReplicaToShard(String shardName, Replica.Type type) throws ClientProtocolException, IOException, SolrServerException {\n    switch (random().nextInt(3)) {\n      case 0: // Add replica with SolrJ\n        CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, shardName, type).process(cluster.getSolrClient());\n        assertEquals(\"Unexpected response status: \" + response.getStatus(), 0, response.getStatus());\n        break;\n      case 1: // Add replica with V1 API\n        String url = String.format(Locale.ROOT, \"%s/admin/collections?action=ADDREPLICA&collection=%s&shard=%s&type=%s\",\n            cluster.getRandomJetty(random()).getBaseUrl(),\n            collectionName,\n            shardName,\n            type);\n        HttpGet addReplicaGet = new HttpGet(url);\n        HttpResponse httpResponse = cluster.getSolrClient().getHttpClient().execute(addReplicaGet);\n        assertEquals(200, httpResponse.getStatusLine().getStatusCode());\n        break;\n      case 2:// Add replica with V2 API\n        url = String.format(Locale.ROOT, \"%s/____v2/c/%s/shards\",\n            cluster.getRandomJetty(random()).getBaseUrl(),\n            collectionName);\n        String requestBody = String.format(Locale.ROOT, \"{add-replica:{shard:%s, type:%s}}\",\n            shardName,\n            type);\n        HttpPost addReplicaPost = new HttpPost(url);\n        addReplicaPost.setHeader(\"Content-type\", \"application/json\");\n        addReplicaPost.setEntity(new StringEntity(requestBody));\n        httpResponse = cluster.getSolrClient().getHttpClient().execute(addReplicaPost);\n        assertEquals(200, httpResponse.getStatusLine().getStatusCode());\n        break;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"4c538b3eeebd03c2067a2fa5be92f073a08b6f41":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4c538b3eeebd03c2067a2fa5be92f073a08b6f41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"4c538b3eeebd03c2067a2fa5be92f073a08b6f41":["42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","4c538b3eeebd03c2067a2fa5be92f073a08b6f41","28288370235ed02234a64753cdbf0c6ec096304a","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}