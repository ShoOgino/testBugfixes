{"path":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#run(FST[T],IntsRef,int[]).mjava","commits":[{"id":"d4769bdea5a853f1841c485bc1fd9d79cb7022fc","date":1292168168,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#run(FST[T],IntsRef,int[]).mjava","pathOld":"/dev/null","sourceNew":"    // runs the term, returning the output, or null if term\n    // isn't accepted.  if stopNode is non-null it must be\n    // length 2 int array; stopNode[0] will be the last\n    // matching node (-1 if the term is accepted)\n    // and stopNode[1] will be the length of the\n    // term prefix that matches\n    private T run(FST<T> fst, IntsRef term, int[] stopNode) throws IOException {\n      if (term.length == 0) {\n        final T output = fst.getEmptyOutput();\n        if (stopNode != null) {\n          stopNode[1] = 0;\n          if (output != null) {\n            // accepted\n            stopNode[0] = -1;\n          } else {\n            stopNode[0] = fst.getStartNode();\n          }\n        }\n        return output;\n      }\n\n      final FST.Arc<T> arc = new FST.Arc<T>();\n      int node = fst.getStartNode();\n      int lastNode = -1;\n      T output = fst.outputs.getNoOutput();\n      //System.out.println(\"match?\");\n      for(int i=0;i<term.length;i++) {\n        //System.out.println(\"  int=\" + term.ints[i]);\n        if (!fst.hasArcs(node)) {\n          //System.out.println(\"    no arcs!\");\n          // hit end node before term's end\n          if (stopNode != null) {\n            stopNode[0] = lastNode;\n            stopNode[1] = i-1;\n            return output;\n          } else {\n            return null;\n          }\n        }\n\n        if (fst.findArc(node, term.ints[term.offset + i], arc) != null) {\n          node = arc.target;\n          //System.out.println(\"    match final?=\" + arc.isFinal());\n          if (arc.output != fst.outputs.getNoOutput()) {\n            output = fst.outputs.add(output, arc.output);\n          }\n        } else if (stopNode != null) {\n          stopNode[0] = node;\n          stopNode[1] = i;\n          return output;\n        } else {\n          //System.out.println(\"    no match\");\n          return null;\n        }\n\n        lastNode = node;\n      }\n\n      if (!arc.isFinal()) {\n        // hit term's end before end node\n        if (stopNode != null) {\n          stopNode[0] = node;\n          stopNode[1] = term.length;\n          return output;\n        } else {\n          return null;\n        }\n      }\n\n      if (arc.nextFinalOutput != fst.outputs.getNoOutput()) {\n        output = fst.outputs.add(output, arc.nextFinalOutput);\n      }\n\n      if (stopNode != null) {\n        stopNode[0] = -1;\n        stopNode[1] = term.length;\n      }\n      return output;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#run(FST[T],IntsRef,int[]).mjava","pathOld":"/dev/null","sourceNew":"    // runs the term, returning the output, or null if term\n    // isn't accepted.  if stopNode is non-null it must be\n    // length 2 int array; stopNode[0] will be the last\n    // matching node (-1 if the term is accepted)\n    // and stopNode[1] will be the length of the\n    // term prefix that matches\n    private T run(FST<T> fst, IntsRef term, int[] stopNode) throws IOException {\n      if (term.length == 0) {\n        final T output = fst.getEmptyOutput();\n        if (stopNode != null) {\n          stopNode[1] = 0;\n          if (output != null) {\n            // accepted\n            stopNode[0] = -1;\n          } else {\n            stopNode[0] = fst.getStartNode();\n          }\n        }\n        return output;\n      }\n\n      final FST.Arc<T> arc = new FST.Arc<T>();\n      int node = fst.getStartNode();\n      int lastNode = -1;\n      T output = fst.outputs.getNoOutput();\n      //System.out.println(\"match?\");\n      for(int i=0;i<term.length;i++) {\n        //System.out.println(\"  int=\" + term.ints[i]);\n        if (!fst.hasArcs(node)) {\n          //System.out.println(\"    no arcs!\");\n          // hit end node before term's end\n          if (stopNode != null) {\n            stopNode[0] = lastNode;\n            stopNode[1] = i-1;\n            return output;\n          } else {\n            return null;\n          }\n        }\n\n        if (fst.findArc(node, term.ints[term.offset + i], arc) != null) {\n          node = arc.target;\n          //System.out.println(\"    match final?=\" + arc.isFinal());\n          if (arc.output != fst.outputs.getNoOutput()) {\n            output = fst.outputs.add(output, arc.output);\n          }\n        } else if (stopNode != null) {\n          stopNode[0] = node;\n          stopNode[1] = i;\n          return output;\n        } else {\n          //System.out.println(\"    no match\");\n          return null;\n        }\n\n        lastNode = node;\n      }\n\n      if (!arc.isFinal()) {\n        // hit term's end before end node\n        if (stopNode != null) {\n          stopNode[0] = node;\n          stopNode[1] = term.length;\n          return output;\n        } else {\n          return null;\n        }\n      }\n\n      if (arc.nextFinalOutput != fst.outputs.getNoOutput()) {\n        output = fst.outputs.add(output, arc.nextFinalOutput);\n      }\n\n      if (stopNode != null) {\n        stopNode[0] = -1;\n        stopNode[1] = term.length;\n      }\n      return output;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#run(FST[T],IntsRef,int[]).mjava","pathOld":"/dev/null","sourceNew":"    // runs the term, returning the output, or null if term\n    // isn't accepted.  if stopNode is non-null it must be\n    // length 2 int array; stopNode[0] will be the last\n    // matching node (-1 if the term is accepted)\n    // and stopNode[1] will be the length of the\n    // term prefix that matches\n    private T run(FST<T> fst, IntsRef term, int[] stopNode) throws IOException {\n      if (term.length == 0) {\n        final T output = fst.getEmptyOutput();\n        if (stopNode != null) {\n          stopNode[1] = 0;\n          if (output != null) {\n            // accepted\n            stopNode[0] = -1;\n          } else {\n            stopNode[0] = fst.getStartNode();\n          }\n        }\n        return output;\n      }\n\n      final FST.Arc<T> arc = new FST.Arc<T>();\n      int node = fst.getStartNode();\n      int lastNode = -1;\n      T output = fst.outputs.getNoOutput();\n      //System.out.println(\"match?\");\n      for(int i=0;i<term.length;i++) {\n        //System.out.println(\"  int=\" + term.ints[i]);\n        if (!fst.hasArcs(node)) {\n          //System.out.println(\"    no arcs!\");\n          // hit end node before term's end\n          if (stopNode != null) {\n            stopNode[0] = lastNode;\n            stopNode[1] = i-1;\n            return output;\n          } else {\n            return null;\n          }\n        }\n\n        if (fst.findArc(node, term.ints[term.offset + i], arc) != null) {\n          node = arc.target;\n          //System.out.println(\"    match final?=\" + arc.isFinal());\n          if (arc.output != fst.outputs.getNoOutput()) {\n            output = fst.outputs.add(output, arc.output);\n          }\n        } else if (stopNode != null) {\n          stopNode[0] = node;\n          stopNode[1] = i;\n          return output;\n        } else {\n          //System.out.println(\"    no match\");\n          return null;\n        }\n\n        lastNode = node;\n      }\n\n      if (!arc.isFinal()) {\n        // hit term's end before end node\n        if (stopNode != null) {\n          stopNode[0] = node;\n          stopNode[1] = term.length;\n          return output;\n        } else {\n          return null;\n        }\n      }\n\n      if (arc.nextFinalOutput != fst.outputs.getNoOutput()) {\n        output = fst.outputs.add(output, arc.nextFinalOutput);\n      }\n\n      if (stopNode != null) {\n        stopNode[0] = -1;\n        stopNode[1] = term.length;\n      }\n      return output;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#run(FST[T],IntsRef,int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#run(FST[T],IntsRef,int[]).mjava","sourceNew":"    // runs the term, returning the output, or null if term\n    // isn't accepted.  if prefixLength is non-null it must be\n    // length 1 int array; prefixLength[0] is set to the length\n    // of the term prefix that matches\n    private T run(FST<T> fst, IntsRef term, int[] prefixLength) throws IOException {\n      assert prefixLength == null || prefixLength.length == 1;\n      final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n      final T NO_OUTPUT = fst.outputs.getNoOutput();\n      T output = NO_OUTPUT;\n\n      for(int i=0;i<=term.length;i++) {\n        final int label;\n        if (i == term.length) {\n          label = FST.END_LABEL;\n        } else {\n          label = term.ints[term.offset+i];\n        }\n        //System.out.println(\"   loop i=\" + i + \" label=\" + label + \" output=\" + fst.outputs.outputToString(output) + \" curArc: target=\" + arc.target + \" isFinal?=\" + arc.isFinal());\n        if (fst.findTargetArc(label, arc, arc) == null) {\n          if (prefixLength != null) {\n            prefixLength[0] = i;\n            return output;\n          } else {\n            return null;\n          }\n        }\n        output = fst.outputs.add(output, arc.output);\n      }\n\n      if (prefixLength != null) {\n        prefixLength[0] = term.length;\n      }\n\n      return output;\n    }\n\n","sourceOld":"    // runs the term, returning the output, or null if term\n    // isn't accepted.  if stopNode is non-null it must be\n    // length 2 int array; stopNode[0] will be the last\n    // matching node (-1 if the term is accepted)\n    // and stopNode[1] will be the length of the\n    // term prefix that matches\n    private T run(FST<T> fst, IntsRef term, int[] stopNode) throws IOException {\n      if (term.length == 0) {\n        final T output = fst.getEmptyOutput();\n        if (stopNode != null) {\n          stopNode[1] = 0;\n          if (output != null) {\n            // accepted\n            stopNode[0] = -1;\n          } else {\n            stopNode[0] = fst.getStartNode();\n          }\n        }\n        return output;\n      }\n\n      final FST.Arc<T> arc = new FST.Arc<T>();\n      int node = fst.getStartNode();\n      int lastNode = -1;\n      T output = fst.outputs.getNoOutput();\n      //System.out.println(\"match?\");\n      for(int i=0;i<term.length;i++) {\n        //System.out.println(\"  int=\" + term.ints[i]);\n        if (!fst.hasArcs(node)) {\n          //System.out.println(\"    no arcs!\");\n          // hit end node before term's end\n          if (stopNode != null) {\n            stopNode[0] = lastNode;\n            stopNode[1] = i-1;\n            return output;\n          } else {\n            return null;\n          }\n        }\n\n        if (fst.findArc(node, term.ints[term.offset + i], arc) != null) {\n          node = arc.target;\n          //System.out.println(\"    match final?=\" + arc.isFinal());\n          if (arc.output != fst.outputs.getNoOutput()) {\n            output = fst.outputs.add(output, arc.output);\n          }\n        } else if (stopNode != null) {\n          stopNode[0] = node;\n          stopNode[1] = i;\n          return output;\n        } else {\n          //System.out.println(\"    no match\");\n          return null;\n        }\n\n        lastNode = node;\n      }\n\n      if (!arc.isFinal()) {\n        // hit term's end before end node\n        if (stopNode != null) {\n          stopNode[0] = node;\n          stopNode[1] = term.length;\n          return output;\n        } else {\n          return null;\n        }\n      }\n\n      if (arc.nextFinalOutput != fst.outputs.getNoOutput()) {\n        output = fst.outputs.add(output, arc.nextFinalOutput);\n      }\n\n      if (stopNode != null) {\n        stopNode[0] = -1;\n        stopNode[1] = term.length;\n      }\n      return output;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#run(FST[T],IntsRef,int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#run(FST[T],IntsRef,int[]).mjava","sourceNew":"    // runs the term, returning the output, or null if term\n    // isn't accepted.  if prefixLength is non-null it must be\n    // length 1 int array; prefixLength[0] is set to the length\n    // of the term prefix that matches\n    private T run(FST<T> fst, IntsRef term, int[] prefixLength) throws IOException {\n      assert prefixLength == null || prefixLength.length == 1;\n      final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n      final T NO_OUTPUT = fst.outputs.getNoOutput();\n      T output = NO_OUTPUT;\n\n      for(int i=0;i<=term.length;i++) {\n        final int label;\n        if (i == term.length) {\n          label = FST.END_LABEL;\n        } else {\n          label = term.ints[term.offset+i];\n        }\n        //System.out.println(\"   loop i=\" + i + \" label=\" + label + \" output=\" + fst.outputs.outputToString(output) + \" curArc: target=\" + arc.target + \" isFinal?=\" + arc.isFinal());\n        if (fst.findTargetArc(label, arc, arc) == null) {\n          if (prefixLength != null) {\n            prefixLength[0] = i;\n            return output;\n          } else {\n            return null;\n          }\n        }\n        output = fst.outputs.add(output, arc.output);\n      }\n\n      if (prefixLength != null) {\n        prefixLength[0] = term.length;\n      }\n\n      return output;\n    }\n\n","sourceOld":"    // runs the term, returning the output, or null if term\n    // isn't accepted.  if stopNode is non-null it must be\n    // length 2 int array; stopNode[0] will be the last\n    // matching node (-1 if the term is accepted)\n    // and stopNode[1] will be the length of the\n    // term prefix that matches\n    private T run(FST<T> fst, IntsRef term, int[] stopNode) throws IOException {\n      if (term.length == 0) {\n        final T output = fst.getEmptyOutput();\n        if (stopNode != null) {\n          stopNode[1] = 0;\n          if (output != null) {\n            // accepted\n            stopNode[0] = -1;\n          } else {\n            stopNode[0] = fst.getStartNode();\n          }\n        }\n        return output;\n      }\n\n      final FST.Arc<T> arc = new FST.Arc<T>();\n      int node = fst.getStartNode();\n      int lastNode = -1;\n      T output = fst.outputs.getNoOutput();\n      //System.out.println(\"match?\");\n      for(int i=0;i<term.length;i++) {\n        //System.out.println(\"  int=\" + term.ints[i]);\n        if (!fst.hasArcs(node)) {\n          //System.out.println(\"    no arcs!\");\n          // hit end node before term's end\n          if (stopNode != null) {\n            stopNode[0] = lastNode;\n            stopNode[1] = i-1;\n            return output;\n          } else {\n            return null;\n          }\n        }\n\n        if (fst.findArc(node, term.ints[term.offset + i], arc) != null) {\n          node = arc.target;\n          //System.out.println(\"    match final?=\" + arc.isFinal());\n          if (arc.output != fst.outputs.getNoOutput()) {\n            output = fst.outputs.add(output, arc.output);\n          }\n        } else if (stopNode != null) {\n          stopNode[0] = node;\n          stopNode[1] = i;\n          return output;\n        } else {\n          //System.out.println(\"    no match\");\n          return null;\n        }\n\n        lastNode = node;\n      }\n\n      if (!arc.isFinal()) {\n        // hit term's end before end node\n        if (stopNode != null) {\n          stopNode[0] = node;\n          stopNode[1] = term.length;\n          return output;\n        } else {\n          return null;\n        }\n      }\n\n      if (arc.nextFinalOutput != fst.outputs.getNoOutput()) {\n        output = fst.outputs.add(output, arc.nextFinalOutput);\n      }\n\n      if (stopNode != null) {\n        stopNode[0] = -1;\n        stopNode[1] = term.length;\n      }\n      return output;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#run(FST[T],IntsRef,int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#run(FST[T],IntsRef,int[]).mjava","sourceNew":"    // runs the term, returning the output, or null if term\n    // isn't accepted.  if prefixLength is non-null it must be\n    // length 1 int array; prefixLength[0] is set to the length\n    // of the term prefix that matches\n    private T run(FST<T> fst, IntsRef term, int[] prefixLength) throws IOException {\n      assert prefixLength == null || prefixLength.length == 1;\n      final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n      final T NO_OUTPUT = fst.outputs.getNoOutput();\n      T output = NO_OUTPUT;\n\n      for(int i=0;i<=term.length;i++) {\n        final int label;\n        if (i == term.length) {\n          label = FST.END_LABEL;\n        } else {\n          label = term.ints[term.offset+i];\n        }\n        //System.out.println(\"   loop i=\" + i + \" label=\" + label + \" output=\" + fst.outputs.outputToString(output) + \" curArc: target=\" + arc.target + \" isFinal?=\" + arc.isFinal());\n        if (fst.findTargetArc(label, arc, arc) == null) {\n          if (prefixLength != null) {\n            prefixLength[0] = i;\n            return output;\n          } else {\n            return null;\n          }\n        }\n        output = fst.outputs.add(output, arc.output);\n      }\n\n      if (prefixLength != null) {\n        prefixLength[0] = term.length;\n      }\n\n      return output;\n    }\n\n","sourceOld":"    // runs the term, returning the output, or null if term\n    // isn't accepted.  if stopNode is non-null it must be\n    // length 2 int array; stopNode[0] will be the last\n    // matching node (-1 if the term is accepted)\n    // and stopNode[1] will be the length of the\n    // term prefix that matches\n    private T run(FST<T> fst, IntsRef term, int[] stopNode) throws IOException {\n      if (term.length == 0) {\n        final T output = fst.getEmptyOutput();\n        if (stopNode != null) {\n          stopNode[1] = 0;\n          if (output != null) {\n            // accepted\n            stopNode[0] = -1;\n          } else {\n            stopNode[0] = fst.getStartNode();\n          }\n        }\n        return output;\n      }\n\n      final FST.Arc<T> arc = new FST.Arc<T>();\n      int node = fst.getStartNode();\n      int lastNode = -1;\n      T output = fst.outputs.getNoOutput();\n      //System.out.println(\"match?\");\n      for(int i=0;i<term.length;i++) {\n        //System.out.println(\"  int=\" + term.ints[i]);\n        if (!fst.hasArcs(node)) {\n          //System.out.println(\"    no arcs!\");\n          // hit end node before term's end\n          if (stopNode != null) {\n            stopNode[0] = lastNode;\n            stopNode[1] = i-1;\n            return output;\n          } else {\n            return null;\n          }\n        }\n\n        if (fst.findArc(node, term.ints[term.offset + i], arc) != null) {\n          node = arc.target;\n          //System.out.println(\"    match final?=\" + arc.isFinal());\n          if (arc.output != fst.outputs.getNoOutput()) {\n            output = fst.outputs.add(output, arc.output);\n          }\n        } else if (stopNode != null) {\n          stopNode[0] = node;\n          stopNode[1] = i;\n          return output;\n        } else {\n          //System.out.println(\"    no match\");\n          return null;\n        }\n\n        lastNode = node;\n      }\n\n      if (!arc.isFinal()) {\n        // hit term's end before end node\n        if (stopNode != null) {\n          stopNode[0] = node;\n          stopNode[1] = term.length;\n          return output;\n        } else {\n          return null;\n        }\n      }\n\n      if (arc.nextFinalOutput != fst.outputs.getNoOutput()) {\n        output = fst.outputs.add(output, arc.nextFinalOutput);\n      }\n\n      if (stopNode != null) {\n        stopNode[0] = -1;\n        stopNode[1] = term.length;\n      }\n      return output;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.FSTTester#run(FST[T],IntsRef,int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#run(FST[T],IntsRef,int[]).mjava","sourceNew":"    // runs the term, returning the output, or null if term\n    // isn't accepted.  if prefixLength is non-null it must be\n    // length 1 int array; prefixLength[0] is set to the length\n    // of the term prefix that matches\n    private T run(FST<T> fst, IntsRef term, int[] prefixLength) throws IOException {\n      assert prefixLength == null || prefixLength.length == 1;\n      final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n      final T NO_OUTPUT = fst.outputs.getNoOutput();\n      T output = NO_OUTPUT;\n\n      for(int i=0;i<=term.length;i++) {\n        final int label;\n        if (i == term.length) {\n          label = FST.END_LABEL;\n        } else {\n          label = term.ints[term.offset+i];\n        }\n        //System.out.println(\"   loop i=\" + i + \" label=\" + label + \" output=\" + fst.outputs.outputToString(output) + \" curArc: target=\" + arc.target + \" isFinal?=\" + arc.isFinal());\n        if (fst.findTargetArc(label, arc, arc) == null) {\n          if (prefixLength != null) {\n            prefixLength[0] = i;\n            return output;\n          } else {\n            return null;\n          }\n        }\n        output = fst.outputs.add(output, arc.output);\n      }\n\n      if (prefixLength != null) {\n        prefixLength[0] = term.length;\n      }\n\n      return output;\n    }\n\n","sourceOld":"    // runs the term, returning the output, or null if term\n    // isn't accepted.  if prefixLength is non-null it must be\n    // length 1 int array; prefixLength[0] is set to the length\n    // of the term prefix that matches\n    private T run(FST<T> fst, IntsRef term, int[] prefixLength) throws IOException {\n      assert prefixLength == null || prefixLength.length == 1;\n      final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n      final T NO_OUTPUT = fst.outputs.getNoOutput();\n      T output = NO_OUTPUT;\n\n      for(int i=0;i<=term.length;i++) {\n        final int label;\n        if (i == term.length) {\n          label = FST.END_LABEL;\n        } else {\n          label = term.ints[term.offset+i];\n        }\n        //System.out.println(\"   loop i=\" + i + \" label=\" + label + \" output=\" + fst.outputs.outputToString(output) + \" curArc: target=\" + arc.target + \" isFinal?=\" + arc.isFinal());\n        if (fst.findTargetArc(label, arc, arc) == null) {\n          if (prefixLength != null) {\n            prefixLength[0] = i;\n            return output;\n          } else {\n            return null;\n          }\n        }\n        output = fst.outputs.add(output, arc.output);\n      }\n\n      if (prefixLength != null) {\n        prefixLength[0] = term.length;\n      }\n\n      return output;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.FSTTester#run(FST[T],IntsRef,int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#run(FST[T],IntsRef,int[]).mjava","sourceNew":"    // runs the term, returning the output, or null if term\n    // isn't accepted.  if prefixLength is non-null it must be\n    // length 1 int array; prefixLength[0] is set to the length\n    // of the term prefix that matches\n    private T run(FST<T> fst, IntsRef term, int[] prefixLength) throws IOException {\n      assert prefixLength == null || prefixLength.length == 1;\n      final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n      final T NO_OUTPUT = fst.outputs.getNoOutput();\n      T output = NO_OUTPUT;\n\n      for(int i=0;i<=term.length;i++) {\n        final int label;\n        if (i == term.length) {\n          label = FST.END_LABEL;\n        } else {\n          label = term.ints[term.offset+i];\n        }\n        //System.out.println(\"   loop i=\" + i + \" label=\" + label + \" output=\" + fst.outputs.outputToString(output) + \" curArc: target=\" + arc.target + \" isFinal?=\" + arc.isFinal());\n        if (fst.findTargetArc(label, arc, arc) == null) {\n          if (prefixLength != null) {\n            prefixLength[0] = i;\n            return output;\n          } else {\n            return null;\n          }\n        }\n        output = fst.outputs.add(output, arc.output);\n      }\n\n      if (prefixLength != null) {\n        prefixLength[0] = term.length;\n      }\n\n      return output;\n    }\n\n","sourceOld":"    // runs the term, returning the output, or null if term\n    // isn't accepted.  if prefixLength is non-null it must be\n    // length 1 int array; prefixLength[0] is set to the length\n    // of the term prefix that matches\n    private T run(FST<T> fst, IntsRef term, int[] prefixLength) throws IOException {\n      assert prefixLength == null || prefixLength.length == 1;\n      final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n      final T NO_OUTPUT = fst.outputs.getNoOutput();\n      T output = NO_OUTPUT;\n\n      for(int i=0;i<=term.length;i++) {\n        final int label;\n        if (i == term.length) {\n          label = FST.END_LABEL;\n        } else {\n          label = term.ints[term.offset+i];\n        }\n        //System.out.println(\"   loop i=\" + i + \" label=\" + label + \" output=\" + fst.outputs.outputToString(output) + \" curArc: target=\" + arc.target + \" isFinal?=\" + arc.isFinal());\n        if (fst.findTargetArc(label, arc, arc) == null) {\n          if (prefixLength != null) {\n            prefixLength[0] = i;\n            return output;\n          } else {\n            return null;\n          }\n        }\n        output = fst.outputs.add(output, arc.output);\n      }\n\n      if (prefixLength != null) {\n        prefixLength[0] = term.length;\n      }\n\n      return output;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.FSTTester#run(FST[T],IntsRef,int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#run(FST[T],IntsRef,int[]).mjava","sourceNew":"    // runs the term, returning the output, or null if term\n    // isn't accepted.  if prefixLength is non-null it must be\n    // length 1 int array; prefixLength[0] is set to the length\n    // of the term prefix that matches\n    private T run(FST<T> fst, IntsRef term, int[] prefixLength) throws IOException {\n      assert prefixLength == null || prefixLength.length == 1;\n      final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n      final T NO_OUTPUT = fst.outputs.getNoOutput();\n      T output = NO_OUTPUT;\n\n      for(int i=0;i<=term.length;i++) {\n        final int label;\n        if (i == term.length) {\n          label = FST.END_LABEL;\n        } else {\n          label = term.ints[term.offset+i];\n        }\n        //System.out.println(\"   loop i=\" + i + \" label=\" + label + \" output=\" + fst.outputs.outputToString(output) + \" curArc: target=\" + arc.target + \" isFinal?=\" + arc.isFinal());\n        if (fst.findTargetArc(label, arc, arc) == null) {\n          if (prefixLength != null) {\n            prefixLength[0] = i;\n            return output;\n          } else {\n            return null;\n          }\n        }\n        output = fst.outputs.add(output, arc.output);\n      }\n\n      if (prefixLength != null) {\n        prefixLength[0] = term.length;\n      }\n\n      return output;\n    }\n\n","sourceOld":"    // runs the term, returning the output, or null if term\n    // isn't accepted.  if prefixLength is non-null it must be\n    // length 1 int array; prefixLength[0] is set to the length\n    // of the term prefix that matches\n    private T run(FST<T> fst, IntsRef term, int[] prefixLength) throws IOException {\n      assert prefixLength == null || prefixLength.length == 1;\n      final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n      final T NO_OUTPUT = fst.outputs.getNoOutput();\n      T output = NO_OUTPUT;\n\n      for(int i=0;i<=term.length;i++) {\n        final int label;\n        if (i == term.length) {\n          label = FST.END_LABEL;\n        } else {\n          label = term.ints[term.offset+i];\n        }\n        //System.out.println(\"   loop i=\" + i + \" label=\" + label + \" output=\" + fst.outputs.outputToString(output) + \" curArc: target=\" + arc.target + \" isFinal?=\" + arc.isFinal());\n        if (fst.findTargetArc(label, arc, arc) == null) {\n          if (prefixLength != null) {\n            prefixLength[0] = i;\n            return output;\n          } else {\n            return null;\n          }\n        }\n        output = fst.outputs.add(output, arc.output);\n      }\n\n      if (prefixLength != null) {\n        prefixLength[0] = term.length;\n      }\n\n      return output;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","56da903869515527852ee21ea7ef7bfe414cd40d"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["56da903869515527852ee21ea7ef7bfe414cd40d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["56da903869515527852ee21ea7ef7bfe414cd40d","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"56da903869515527852ee21ea7ef7bfe414cd40d":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["70ad682703b8585f5d0a637efec044d57ec05efb","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["70ad682703b8585f5d0a637efec044d57ec05efb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["56da903869515527852ee21ea7ef7bfe414cd40d","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}