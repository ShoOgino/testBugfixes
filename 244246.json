{"path":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCreateMoreTermsIndex().mjava","commits":[{"id":"ec8882143e40fbd4aaa2cc02fc4abb1217eb24c7","date":1411591737,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCreateMoreTermsIndex().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateMoreTermsIndex() throws Exception {\n    \n    Path indexDir = getIndexDir().resolve(\"moreterms\");\n    Files.deleteIfExists(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setNoCFSRatio(1.0);\n    mp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    // TODO: remove randomness\n    IndexWriterConfig conf = new IndexWriterConfig(analyzer)\n      .setMergePolicy(mp).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    LineFileDocs docs = new LineFileDocs(null, true);\n    for(int i=0;i<50;i++) {\n      writer.addDocument(docs.nextDoc());\n    }\n    writer.close();\n    dir.close();\n\n    // Gives you time to copy the index out!: (there is also\n    // a test option to not remove temp dir...):\n    Thread.sleep(100000);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"221076a44effb5561a3b799974ba1a35119fbcc0","date":1457468497,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCreateMoreTermsIndex().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCreateMoreTermsIndex().mjava","sourceNew":"  public void testCreateMoreTermsIndex() throws Exception {\n    \n    Path indexDir = getIndexDir().resolve(\"moreterms\");\n    Files.deleteIfExists(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setNoCFSRatio(1.0);\n    mp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    // TODO: remove randomness\n    IndexWriterConfig conf = new IndexWriterConfig(analyzer)\n      .setMergePolicy(mp).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    LineFileDocs docs = new LineFileDocs(null);\n    for(int i=0;i<50;i++) {\n      writer.addDocument(docs.nextDoc());\n    }\n    writer.close();\n    dir.close();\n\n    // Gives you time to copy the index out!: (there is also\n    // a test option to not remove temp dir...):\n    Thread.sleep(100000);\n  }\n\n","sourceOld":"  public void testCreateMoreTermsIndex() throws Exception {\n    \n    Path indexDir = getIndexDir().resolve(\"moreterms\");\n    Files.deleteIfExists(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setNoCFSRatio(1.0);\n    mp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    // TODO: remove randomness\n    IndexWriterConfig conf = new IndexWriterConfig(analyzer)\n      .setMergePolicy(mp).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    LineFileDocs docs = new LineFileDocs(null, true);\n    for(int i=0;i<50;i++) {\n      writer.addDocument(docs.nextDoc());\n    }\n    writer.close();\n    dir.close();\n\n    // Gives you time to copy the index out!: (there is also\n    // a test option to not remove temp dir...):\n    Thread.sleep(100000);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"313b9c84057c3a31294cbcd794ea84c4e81646d9","date":1478080099,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCreateMoreTermsIndex().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCreateMoreTermsIndex().mjava","sourceNew":"  public void testCreateMoreTermsIndex() throws Exception {\n    \n    Path indexDir = getIndexDir().resolve(\"moreterms\");\n    Files.deleteIfExists(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setNoCFSRatio(1.0);\n    mp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    // TODO: remove randomness\n    IndexWriterConfig conf = new IndexWriterConfig(analyzer)\n      .setMergePolicy(mp).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    LineFileDocs docs = new LineFileDocs(null);\n    for(int i=0;i<50;i++) {\n      writer.addDocument(docs.nextDoc());\n    }\n    docs.close();\n    writer.close();\n    dir.close();\n\n    // Gives you time to copy the index out!: (there is also\n    // a test option to not remove temp dir...):\n    Thread.sleep(100000);\n  }\n\n","sourceOld":"  public void testCreateMoreTermsIndex() throws Exception {\n    \n    Path indexDir = getIndexDir().resolve(\"moreterms\");\n    Files.deleteIfExists(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setNoCFSRatio(1.0);\n    mp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    // TODO: remove randomness\n    IndexWriterConfig conf = new IndexWriterConfig(analyzer)\n      .setMergePolicy(mp).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    LineFileDocs docs = new LineFileDocs(null);\n    for(int i=0;i<50;i++) {\n      writer.addDocument(docs.nextDoc());\n    }\n    writer.close();\n    dir.close();\n\n    // Gives you time to copy the index out!: (there is also\n    // a test option to not remove temp dir...):\n    Thread.sleep(100000);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCreateMoreTermsIndex().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCreateMoreTermsIndex().mjava","sourceNew":"  public void testCreateMoreTermsIndex() throws Exception {\n    \n    Path indexDir = getIndexDir().resolve(\"moreterms\");\n    Files.deleteIfExists(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setNoCFSRatio(1.0);\n    mp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    // TODO: remove randomness\n    IndexWriterConfig conf = new IndexWriterConfig(analyzer)\n      .setMergePolicy(mp).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    LineFileDocs docs = new LineFileDocs(null);\n    for(int i=0;i<50;i++) {\n      writer.addDocument(docs.nextDoc());\n    }\n    docs.close();\n    writer.close();\n    dir.close();\n\n    // Gives you time to copy the index out!: (there is also\n    // a test option to not remove temp dir...):\n    Thread.sleep(100000);\n  }\n\n","sourceOld":"  public void testCreateMoreTermsIndex() throws Exception {\n    \n    Path indexDir = getIndexDir().resolve(\"moreterms\");\n    Files.deleteIfExists(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setNoCFSRatio(1.0);\n    mp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    // TODO: remove randomness\n    IndexWriterConfig conf = new IndexWriterConfig(analyzer)\n      .setMergePolicy(mp).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    LineFileDocs docs = new LineFileDocs(null);\n    for(int i=0;i<50;i++) {\n      writer.addDocument(docs.nextDoc());\n    }\n    writer.close();\n    dir.close();\n\n    // Gives you time to copy the index out!: (there is also\n    // a test option to not remove temp dir...):\n    Thread.sleep(100000);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87655ca85dc29fc6a56702a356b312ebac60bd2d","date":1506818641,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCreateMoreTermsIndex().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCreateMoreTermsIndex().mjava","sourceNew":"  public void testCreateMoreTermsIndex() throws Exception {\n    \n    Path indexDir = getIndexDir().resolve(\"moreterms\");\n    Files.deleteIfExists(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setNoCFSRatio(1.0);\n    mp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    // TODO: remove randomness\n    IndexWriterConfig conf = new IndexWriterConfig(analyzer)\n      .setMergePolicy(mp).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    LineFileDocs docs = new LineFileDocs(random());\n    for(int i=0;i<50;i++) {\n      writer.addDocument(docs.nextDoc());\n    }\n    docs.close();\n    writer.close();\n    dir.close();\n\n    // Gives you time to copy the index out!: (there is also\n    // a test option to not remove temp dir...):\n    Thread.sleep(100000);\n  }\n\n","sourceOld":"  public void testCreateMoreTermsIndex() throws Exception {\n    \n    Path indexDir = getIndexDir().resolve(\"moreterms\");\n    Files.deleteIfExists(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setNoCFSRatio(1.0);\n    mp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    // TODO: remove randomness\n    IndexWriterConfig conf = new IndexWriterConfig(analyzer)\n      .setMergePolicy(mp).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    LineFileDocs docs = new LineFileDocs(null);\n    for(int i=0;i<50;i++) {\n      writer.addDocument(docs.nextDoc());\n    }\n    docs.close();\n    writer.close();\n    dir.close();\n\n    // Gives you time to copy the index out!: (there is also\n    // a test option to not remove temp dir...):\n    Thread.sleep(100000);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dfbaf08b93cfa3939fc67c0d7eec7d45024ade8","date":1506829036,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCreateMoreTermsIndex().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCreateMoreTermsIndex().mjava","sourceNew":"  public void testCreateMoreTermsIndex() throws Exception {\n    \n    Path indexDir = getIndexDir().resolve(\"moreterms\");\n    Files.deleteIfExists(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setNoCFSRatio(1.0);\n    mp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig conf = new IndexWriterConfig(analyzer)\n      .setMergePolicy(mp).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    LineFileDocs docs = new LineFileDocs(new Random(0));\n    for(int i=0;i<50;i++) {\n      writer.addDocument(docs.nextDoc());\n    }\n    docs.close();\n    writer.close();\n    dir.close();\n\n    // Gives you time to copy the index out!: (there is also\n    // a test option to not remove temp dir...):\n    Thread.sleep(100000);\n  }\n\n","sourceOld":"  public void testCreateMoreTermsIndex() throws Exception {\n    \n    Path indexDir = getIndexDir().resolve(\"moreterms\");\n    Files.deleteIfExists(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setNoCFSRatio(1.0);\n    mp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    // TODO: remove randomness\n    IndexWriterConfig conf = new IndexWriterConfig(analyzer)\n      .setMergePolicy(mp).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    LineFileDocs docs = new LineFileDocs(random());\n    for(int i=0;i<50;i++) {\n      writer.addDocument(docs.nextDoc());\n    }\n    docs.close();\n    writer.close();\n    dir.close();\n\n    // Gives you time to copy the index out!: (there is also\n    // a test option to not remove temp dir...):\n    Thread.sleep(100000);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCreateMoreTermsIndex().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCreateMoreTermsIndex().mjava","sourceNew":"  public void testCreateMoreTermsIndex() throws Exception {\n    \n    Path indexDir = getIndexDir().resolve(\"moreterms\");\n    Files.deleteIfExists(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setNoCFSRatio(1.0);\n    mp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig conf = new IndexWriterConfig(analyzer)\n      .setMergePolicy(mp).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    LineFileDocs docs = new LineFileDocs(new Random(0));\n    for(int i=0;i<50;i++) {\n      writer.addDocument(docs.nextDoc());\n    }\n    docs.close();\n    writer.close();\n    dir.close();\n\n    // Gives you time to copy the index out!: (there is also\n    // a test option to not remove temp dir...):\n    Thread.sleep(100000);\n  }\n\n","sourceOld":"  public void testCreateMoreTermsIndex() throws Exception {\n    \n    Path indexDir = getIndexDir().resolve(\"moreterms\");\n    Files.deleteIfExists(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setNoCFSRatio(1.0);\n    mp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    // TODO: remove randomness\n    IndexWriterConfig conf = new IndexWriterConfig(analyzer)\n      .setMergePolicy(mp).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    LineFileDocs docs = new LineFileDocs(null);\n    for(int i=0;i<50;i++) {\n      writer.addDocument(docs.nextDoc());\n    }\n    docs.close();\n    writer.close();\n    dir.close();\n\n    // Gives you time to copy the index out!: (there is also\n    // a test option to not remove temp dir...):\n    Thread.sleep(100000);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0dfbaf08b93cfa3939fc67c0d7eec7d45024ade8":["87655ca85dc29fc6a56702a356b312ebac60bd2d"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["313b9c84057c3a31294cbcd794ea84c4e81646d9","0dfbaf08b93cfa3939fc67c0d7eec7d45024ade8"],"ec8882143e40fbd4aaa2cc02fc4abb1217eb24c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["221076a44effb5561a3b799974ba1a35119fbcc0","313b9c84057c3a31294cbcd794ea84c4e81646d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87655ca85dc29fc6a56702a356b312ebac60bd2d":["313b9c84057c3a31294cbcd794ea84c4e81646d9"],"313b9c84057c3a31294cbcd794ea84c4e81646d9":["221076a44effb5561a3b799974ba1a35119fbcc0"],"221076a44effb5561a3b799974ba1a35119fbcc0":["ec8882143e40fbd4aaa2cc02fc4abb1217eb24c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0dfbaf08b93cfa3939fc67c0d7eec7d45024ade8"]},"commit2Childs":{"0dfbaf08b93cfa3939fc67c0d7eec7d45024ade8":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"ec8882143e40fbd4aaa2cc02fc4abb1217eb24c7":["221076a44effb5561a3b799974ba1a35119fbcc0"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec8882143e40fbd4aaa2cc02fc4abb1217eb24c7"],"87655ca85dc29fc6a56702a356b312ebac60bd2d":["0dfbaf08b93cfa3939fc67c0d7eec7d45024ade8"],"313b9c84057c3a31294cbcd794ea84c4e81646d9":["6240b74b884c5587f2a4062dd27d6c32bf228889","9720b151fde2073f4e401450f4574e5f31c2d0ff","87655ca85dc29fc6a56702a356b312ebac60bd2d"],"221076a44effb5561a3b799974ba1a35119fbcc0":["9720b151fde2073f4e401450f4574e5f31c2d0ff","313b9c84057c3a31294cbcd794ea84c4e81646d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","9720b151fde2073f4e401450f4574e5f31c2d0ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}