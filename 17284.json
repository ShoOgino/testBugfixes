{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testPassesIfWrapped().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testPassesIfWrapped().mjava","pathOld":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testPassesIfWrapped().mjava","sourceNew":"  // LUCENE-3831\n  public void testPassesIfWrapped() throws IOException {\n    RegexpQuery regex = new RegexpQuery(new Term(\"field\", \"worl.\"));\n    SpanQuery wrappedquery = new SpanOrQuery(new SpanMultiTermQueryWrapper<RegexpQuery>(regex));\n\n    MemoryIndex mindex = new MemoryIndex();\n    mindex.addField(\"field\", new MockAnalyzer(random()).tokenStream(\"field\", new StringReader(\"hello there\")));\n\n    // This passes though\n    assertEquals(0, mindex.search(wrappedquery), 0.00001f);\n  }\n\n","sourceOld":"  // LUCENE-3831\n  public void testPassesIfWrapped() throws IOException {\n    RegexpQuery regex = new RegexpQuery(new Term(\"field\", \"worl.\"));\n    SpanQuery wrappedquery = new SpanOrQuery(new SpanMultiTermQueryWrapper<RegexpQuery>(regex));\n\n    MemoryIndex mindex = new MemoryIndex();\n    mindex.addField(\"field\", new MockAnalyzer(random()).tokenStream(\"field\", new StringReader(\"hello there\")));\n\n    // This passes though\n    assertEquals(0, mindex.search(wrappedquery), 0.00001f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testPassesIfWrapped().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testPassesIfWrapped().mjava","sourceNew":"  // LUCENE-3831\n  public void testPassesIfWrapped() throws IOException {\n    RegexpQuery regex = new RegexpQuery(new Term(\"field\", \"worl.\"));\n    SpanQuery wrappedquery = new SpanOrQuery(new SpanMultiTermQueryWrapper<RegexpQuery>(regex));\n\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    mindex.addField(\"field\", new MockAnalyzer(random()).tokenStream(\"field\", new StringReader(\"hello there\")));\n\n    // This passes though\n    assertEquals(0, mindex.search(wrappedquery), 0.00001f);\n  }\n\n","sourceOld":"  // LUCENE-3831\n  public void testPassesIfWrapped() throws IOException {\n    RegexpQuery regex = new RegexpQuery(new Term(\"field\", \"worl.\"));\n    SpanQuery wrappedquery = new SpanOrQuery(new SpanMultiTermQueryWrapper<RegexpQuery>(regex));\n\n    MemoryIndex mindex = new MemoryIndex();\n    mindex.addField(\"field\", new MockAnalyzer(random()).tokenStream(\"field\", new StringReader(\"hello there\")));\n\n    // This passes though\n    assertEquals(0, mindex.search(wrappedquery), 0.00001f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testPassesIfWrapped().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testPassesIfWrapped().mjava","sourceNew":"  // LUCENE-3831\n  public void testPassesIfWrapped() throws IOException {\n    RegexpQuery regex = new RegexpQuery(new Term(\"field\", \"worl.\"));\n    SpanQuery wrappedquery = new SpanOrQuery(new SpanMultiTermQueryWrapper<RegexpQuery>(regex));\n\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    mindex.addField(\"field\", new MockAnalyzer(random()).tokenStream(\"field\", \"hello there\"));\n\n    // This passes though\n    assertEquals(0, mindex.search(wrappedquery), 0.00001f);\n  }\n\n","sourceOld":"  // LUCENE-3831\n  public void testPassesIfWrapped() throws IOException {\n    RegexpQuery regex = new RegexpQuery(new Term(\"field\", \"worl.\"));\n    SpanQuery wrappedquery = new SpanOrQuery(new SpanMultiTermQueryWrapper<RegexpQuery>(regex));\n\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    mindex.addField(\"field\", new MockAnalyzer(random()).tokenStream(\"field\", new StringReader(\"hello there\")));\n\n    // This passes though\n    assertEquals(0, mindex.search(wrappedquery), 0.00001f);\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testPassesIfWrapped().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testPassesIfWrapped().mjava","sourceNew":"  // LUCENE-3831\n  public void testPassesIfWrapped() throws IOException {\n    RegexpQuery regex = new RegexpQuery(new Term(\"field\", \"worl.\"));\n    SpanQuery wrappedquery = new SpanOrQuery(new SpanMultiTermQueryWrapper<RegexpQuery>(regex));\n\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    mindex.addField(\"field\", new MockAnalyzer(random()).tokenStream(\"field\", \"hello there\"));\n\n    // This passes though\n    assertEquals(0, mindex.search(wrappedquery), 0.00001f);\n  }\n\n","sourceOld":"  // LUCENE-3831\n  public void testPassesIfWrapped() throws IOException {\n    RegexpQuery regex = new RegexpQuery(new Term(\"field\", \"worl.\"));\n    SpanQuery wrappedquery = new SpanOrQuery(new SpanMultiTermQueryWrapper<RegexpQuery>(regex));\n\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    mindex.addField(\"field\", new MockAnalyzer(random()).tokenStream(\"field\", new StringReader(\"hello there\")));\n\n    // This passes though\n    assertEquals(0, mindex.search(wrappedquery), 0.00001f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testPassesIfWrapped().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testPassesIfWrapped().mjava","sourceNew":"  // LUCENE-3831\n  public void testPassesIfWrapped() throws IOException {\n    RegexpQuery regex = new RegexpQuery(new Term(\"field\", \"worl.\"));\n    SpanQuery wrappedquery = new SpanOrQuery(new SpanMultiTermQueryWrapper<>(regex));\n\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    mindex.addField(\"field\", new MockAnalyzer(random()).tokenStream(\"field\", \"hello there\"));\n\n    // This passes though\n    assertEquals(0, mindex.search(wrappedquery), 0.00001f);\n  }\n\n","sourceOld":"  // LUCENE-3831\n  public void testPassesIfWrapped() throws IOException {\n    RegexpQuery regex = new RegexpQuery(new Term(\"field\", \"worl.\"));\n    SpanQuery wrappedquery = new SpanOrQuery(new SpanMultiTermQueryWrapper<RegexpQuery>(regex));\n\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    mindex.addField(\"field\", new MockAnalyzer(random()).tokenStream(\"field\", \"hello there\"));\n\n    // This passes though\n    assertEquals(0, mindex.search(wrappedquery), 0.00001f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"761333d77c7f29123c00c93b107b743f32f012e6","date":1411986072,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testPassesIfWrapped().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testPassesIfWrapped().mjava","sourceNew":"  // LUCENE-3831\n  public void testPassesIfWrapped() throws IOException {\n    RegexpQuery regex = new RegexpQuery(new Term(\"field\", \"worl.\"));\n    SpanQuery wrappedquery = new SpanOrQuery(new SpanMultiTermQueryWrapper<>(regex));\n\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    mindex.addField(\"field\", new MockAnalyzer(random()).tokenStream(\"field\", \"hello there\"));\n\n    // This passes though\n    assertEquals(0, mindex.search(wrappedquery), 0.00001f);\n  }\n\n","sourceOld":"  // LUCENE-3831\n  public void testPassesIfWrapped() throws IOException {\n    RegexpQuery regex = new RegexpQuery(new Term(\"field\", \"worl.\"));\n    SpanQuery wrappedquery = new SpanOrQuery(new SpanMultiTermQueryWrapper<>(regex));\n\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    mindex.addField(\"field\", new MockAnalyzer(random()).tokenStream(\"field\", \"hello there\"));\n\n    // This passes though\n    assertEquals(0, mindex.search(wrappedquery), 0.00001f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testPassesIfWrapped().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testPassesIfWrapped().mjava","sourceNew":"  // LUCENE-3831\n  public void testPassesIfWrapped() throws IOException {\n    RegexpQuery regex = new RegexpQuery(new Term(\"field\", \"worl.\"));\n    SpanQuery wrappedquery = new SpanOrQuery(new SpanMultiTermQueryWrapper<>(regex));\n\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    mindex.addField(\"field\", new MockAnalyzer(random()).tokenStream(\"field\", \"hello there\"));\n\n    // This passes though\n    assertEquals(0, mindex.search(wrappedquery), 0.00001f);\n  }\n\n","sourceOld":"  // LUCENE-3831\n  public void testPassesIfWrapped() throws IOException {\n    RegexpQuery regex = new RegexpQuery(new Term(\"field\", \"worl.\"));\n    SpanQuery wrappedquery = new SpanOrQuery(new SpanMultiTermQueryWrapper<>(regex));\n\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    mindex.addField(\"field\", new MockAnalyzer(random()).tokenStream(\"field\", \"hello there\"));\n\n    // This passes though\n    assertEquals(0, mindex.search(wrappedquery), 0.00001f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63","c83d6c4335f31cae14f625a222bc842f20073dcd"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","761333d77c7f29123c00c93b107b743f32f012e6"],"761333d77c7f29123c00c93b107b743f32f012e6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["761333d77c7f29123c00c93b107b743f32f012e6"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d9a47902d6207303f5ed3e7aaca62ca33433af66","761333d77c7f29123c00c93b107b743f32f012e6"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c83d6c4335f31cae14f625a222bc842f20073dcd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"761333d77c7f29123c00c93b107b743f32f012e6":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}