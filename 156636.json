{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#randomAccessFilter(Filter).mjava","commits":[{"id":"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a","date":1427495869,"type":0,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#randomAccessFilter(Filter).mjava","pathOld":"/dev/null","sourceNew":"  private static Filter randomAccessFilter(Filter filter) {\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        DocIdSet docIdSet = filter.getDocIdSet(context, acceptDocs);\n        DocIdSetIterator iterator = docIdSet.iterator();\n        FixedBitSet bits = new FixedBitSet(context.reader().maxDoc());\n        if (iterator != null) {\n          int doc;\n          while((doc = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n            bits.set(doc);\n          }\n        }\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() throws IOException {\n            return iterator;\n          }\n\n          @Override\n          public Bits bits() throws IOException {\n            return bits;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return docIdSet.ramBytesUsed();\n          }\n        };\n      }\n\n      @Override\n      public String toString(String field) {\n        return filter.toString(field);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8249072f13ea4354ab7635c2d7a59cc682806dab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#randomAccessFilter(Filter).mjava","pathOld":"/dev/null","sourceNew":"  private static Filter randomAccessFilter(Filter filter) {\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        DocIdSet docIdSet = filter.getDocIdSet(context, acceptDocs);\n        DocIdSetIterator iterator = docIdSet.iterator();\n        FixedBitSet bits = new FixedBitSet(context.reader().maxDoc());\n        if (iterator != null) {\n          int doc;\n          while((doc = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n            bits.set(doc);\n          }\n        }\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() throws IOException {\n            return iterator;\n          }\n\n          @Override\n          public Bits bits() throws IOException {\n            return bits;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return docIdSet.ramBytesUsed();\n          }\n        };\n      }\n\n      @Override\n      public String toString(String field) {\n        return filter.toString(field);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8249072f13ea4354ab7635c2d7a59cc682806dab","date":1429649774,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#randomAccessFilter(Filter).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#randomAccessFilter(Filter).mjava","sourceNew":"  private static Filter randomAccessFilter(Filter filter) {\n    return new RandomAccessFilter(filter);\n  }\n\n","sourceOld":"  private static Filter randomAccessFilter(Filter filter) {\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        DocIdSet docIdSet = filter.getDocIdSet(context, acceptDocs);\n        DocIdSetIterator iterator = docIdSet.iterator();\n        FixedBitSet bits = new FixedBitSet(context.reader().maxDoc());\n        if (iterator != null) {\n          int doc;\n          while((doc = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n            bits.set(doc);\n          }\n        }\n        return new DocIdSet() {\n          @Override\n          public DocIdSetIterator iterator() throws IOException {\n            return iterator;\n          }\n\n          @Override\n          public Bits bits() throws IOException {\n            return bits;\n          }\n\n          @Override\n          public long ramBytesUsed() {\n            return docIdSet.ramBytesUsed();\n          }\n        };\n      }\n\n      @Override\n      public String toString(String field) {\n        return filter.toString(field);\n      }\n    };\n  }\n\n","bugFix":["07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c33f6677a2078739058f81eca1df69d12cd62b0","date":1432799589,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestPrefixCompletionQuery#randomAccessFilter(Filter).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#randomAccessFilter(Filter).mjava","sourceNew":"  private static Filter randomAccessFilter(Filter filter) {\n    return new RandomAccessFilter(filter);\n  }\n\n","sourceOld":"  private static Filter randomAccessFilter(Filter filter) {\n    return new RandomAccessFilter(filter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8249072f13ea4354ab7635c2d7a59cc682806dab":["07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["8249072f13ea4354ab7635c2d7a59cc682806dab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c33f6677a2078739058f81eca1df69d12cd62b0"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","8249072f13ea4354ab7635c2d7a59cc682806dab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"8249072f13ea4354ab7635c2d7a59cc682806dab":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}