{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReportTask#taskReportLine(String,TaskStats).mjava","commits":[{"id":"1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0","date":1174485154,"type":1,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReportTask#taskReportLine(String,TaskStats).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/Points#taskReportLine(String,TaskStats).mjava","sourceNew":"  /**\n   * Compute a report line for the given task stat.\n   * @param longestOp size of longest op name in the table.\n   * @param stat task stat to be printed.\n   * @return the report line.\n   */\n  protected String taskReportLine(String longestOp, TaskStats stat) {\n    PerfTask task = stat.getTask();\n    StringBuffer sb = new StringBuffer();\n    sb.append(Format.format(task.getName(), longestOp));\n    String round = (stat.getRound()>=0 ? \"\"+stat.getRound() : \"-\");\n    sb.append(Format.formatPaddLeft(round, ROUND));\n    sb.append(getRunData().getConfig().getColsValuesForValsByRound(stat.getRound()));\n    sb.append(Format.format(stat.getNumRuns(), RUNCNT)); \n    sb.append(Format.format(stat.getCount() / stat.getNumRuns(), RECCNT));\n    long elapsed = (stat.getElapsed()>0 ? stat.getElapsed() : 1); // assume at least 1ms\n    sb.append(Format.format(1,(float) (stat.getCount() * 1000.0 / elapsed), RECSEC));\n    sb.append(Format.format(2, (float) stat.getElapsed() / 1000, ELAPSED));\n    sb.append(Format.format(0, (float) stat.getMaxUsedMem() / stat.getNumRuns(), USEDMEM)); \n    sb.append(Format.format(0, (float) stat.getMaxTotMem() / stat.getNumRuns(), TOTMEM));\n    return sb.toString();\n  }\n\n","sourceOld":"  private String taskReportLine(String longestOp, TaskStats stat) {\r\n    PerfTask task = stat.getTask();\r\n    StringBuffer sb = new StringBuffer();\r\n    sb.append(Format.format(task.getName(), longestOp));\r\n    String round = (stat.getRound()>=0 ? \"\"+stat.getRound() : \"-\");\r\n    sb.append(Format.formatPaddLeft(round, ROUND));\r\n    sb.append(config.getColsValuesForValsByRound(stat.getRound()));\r\n    sb.append(Format.format(stat.getNumRuns(), RUNCNT)); \r\n    sb.append(Format.format(stat.getCount() / stat.getNumRuns(), RECCNT));\r\n    long elapsed = (stat.getElapsed()>0 ? stat.getElapsed() : 1); // assume at least 1ms\r\n    sb.append(Format.format(1,(float) (stat.getCount() * 1000.0 / elapsed), RECSEC));\r\n    sb.append(Format.format(2, (float) stat.getElapsed() / 1000, ELAPSED));\r\n    sb.append(Format.format(0, (float) stat.getMaxUsedMem() / stat.getNumRuns(), USEDMEM)); \r\n    sb.append(Format.format(0, (float) stat.getMaxTotMem() / stat.getNumRuns(), TOTMEM));\r\n    return sb.toString();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"856a6fdbeeee1d74a371997c41f57ad978133ab9","date":1243510304,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReportTask#taskReportLine(String,TaskStats).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReportTask#taskReportLine(String,TaskStats).mjava","sourceNew":"  /**\n   * Compute a report line for the given task stat.\n   * @param longestOp size of longest op name in the table.\n   * @param stat task stat to be printed.\n   * @return the report line.\n   */\n  protected String taskReportLine(String longestOp, TaskStats stat) {\n    PerfTask task = stat.getTask();\n    StringBuffer sb = new StringBuffer();\n    sb.append(Format.format(task.getName(), longestOp));\n    String round = (stat.getRound()>=0 ? \"\"+stat.getRound() : \"-\");\n    sb.append(Format.formatPaddLeft(round, ROUND));\n    sb.append(getRunData().getConfig().getColsValuesForValsByRound(stat.getRound()));\n    sb.append(Format.format(stat.getNumRuns(), RUNCNT)); \n    sb.append(Format.format(stat.getCount() / stat.getNumRuns(), RECCNT));\n    long elapsed = (stat.getElapsed()>0 ? stat.getElapsed() : 1); // assume at least 1ms\n    sb.append(Format.format(2, (float) (stat.getCount() * 1000.0 / elapsed), RECSEC));\n    sb.append(Format.format(2, (float) stat.getElapsed() / 1000, ELAPSED));\n    sb.append(Format.format(0, (float) stat.getMaxUsedMem() / stat.getNumRuns(), USEDMEM)); \n    sb.append(Format.format(0, (float) stat.getMaxTotMem() / stat.getNumRuns(), TOTMEM));\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Compute a report line for the given task stat.\n   * @param longestOp size of longest op name in the table.\n   * @param stat task stat to be printed.\n   * @return the report line.\n   */\n  protected String taskReportLine(String longestOp, TaskStats stat) {\n    PerfTask task = stat.getTask();\n    StringBuffer sb = new StringBuffer();\n    sb.append(Format.format(task.getName(), longestOp));\n    String round = (stat.getRound()>=0 ? \"\"+stat.getRound() : \"-\");\n    sb.append(Format.formatPaddLeft(round, ROUND));\n    sb.append(getRunData().getConfig().getColsValuesForValsByRound(stat.getRound()));\n    sb.append(Format.format(stat.getNumRuns(), RUNCNT)); \n    sb.append(Format.format(stat.getCount() / stat.getNumRuns(), RECCNT));\n    long elapsed = (stat.getElapsed()>0 ? stat.getElapsed() : 1); // assume at least 1ms\n    sb.append(Format.format(1,(float) (stat.getCount() * 1000.0 / elapsed), RECSEC));\n    sb.append(Format.format(2, (float) stat.getElapsed() / 1000, ELAPSED));\n    sb.append(Format.format(0, (float) stat.getMaxUsedMem() / stat.getNumRuns(), USEDMEM)); \n    sb.append(Format.format(0, (float) stat.getMaxTotMem() / stat.getNumRuns(), TOTMEM));\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReportTask#taskReportLine(String,TaskStats).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReportTask#taskReportLine(String,TaskStats).mjava","sourceNew":"  /**\n   * Compute a report line for the given task stat.\n   * @param longestOp size of longest op name in the table.\n   * @param stat task stat to be printed.\n   * @return the report line.\n   */\n  protected String taskReportLine(String longestOp, TaskStats stat) {\n    PerfTask task = stat.getTask();\n    StringBuffer sb = new StringBuffer();\n    sb.append(Format.format(task.getName(), longestOp));\n    String round = (stat.getRound()>=0 ? \"\"+stat.getRound() : \"-\");\n    sb.append(Format.formatPaddLeft(round, ROUND));\n    sb.append(getRunData().getConfig().getColsValuesForValsByRound(stat.getRound()));\n    sb.append(Format.format(stat.getNumRuns(), RUNCNT)); \n    sb.append(Format.format(stat.getCount() / stat.getNumRuns(), RECCNT));\n    long elapsed = (stat.getElapsed()>0 ? stat.getElapsed() : 1); // assume at least 1ms\n    sb.append(Format.format(2, (float) (stat.getCount() * 1000.0 / elapsed), RECSEC));\n    sb.append(Format.format(2, (float) stat.getElapsed() / 1000, ELAPSED));\n    sb.append(Format.format(0, (float) stat.getMaxUsedMem() / stat.getNumRuns(), USEDMEM)); \n    sb.append(Format.format(0, (float) stat.getMaxTotMem() / stat.getNumRuns(), TOTMEM));\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Compute a report line for the given task stat.\n   * @param longestOp size of longest op name in the table.\n   * @param stat task stat to be printed.\n   * @return the report line.\n   */\n  protected String taskReportLine(String longestOp, TaskStats stat) {\n    PerfTask task = stat.getTask();\n    StringBuffer sb = new StringBuffer();\n    sb.append(Format.format(task.getName(), longestOp));\n    String round = (stat.getRound()>=0 ? \"\"+stat.getRound() : \"-\");\n    sb.append(Format.formatPaddLeft(round, ROUND));\n    sb.append(getRunData().getConfig().getColsValuesForValsByRound(stat.getRound()));\n    sb.append(Format.format(stat.getNumRuns(), RUNCNT)); \n    sb.append(Format.format(stat.getCount() / stat.getNumRuns(), RECCNT));\n    long elapsed = (stat.getElapsed()>0 ? stat.getElapsed() : 1); // assume at least 1ms\n    sb.append(Format.format(2, (float) (stat.getCount() * 1000.0 / elapsed), RECSEC));\n    sb.append(Format.format(2, (float) stat.getElapsed() / 1000, ELAPSED));\n    sb.append(Format.format(0, (float) stat.getMaxUsedMem() / stat.getNumRuns(), USEDMEM)); \n    sb.append(Format.format(0, (float) stat.getMaxTotMem() / stat.getNumRuns(), TOTMEM));\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"856a6fdbeeee1d74a371997c41f57ad978133ab9":["1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["856a6fdbeeee1d74a371997c41f57ad978133ab9"]},"commit2Childs":{"1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0":["856a6fdbeeee1d74a371997c41f57ad978133ab9"],"856a6fdbeeee1d74a371997c41f57ad978133ab9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}