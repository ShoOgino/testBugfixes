{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","commits":[{"id":"5ad80176d91a6f70fe93880e43dfd697dc4e63ed","date":1400176913,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(\n                              SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      writeHeader(out);\n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      writeIndexHeader(indexOut);\n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(\n                              SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      writeHeader(out);\n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      writeIndexHeader(indexOut);\n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(\n                              SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      writeHeader(out);\n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      writeIndexHeader(indexOut);\n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(\n                              SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      writeHeader(out);\n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      writeIndexHeader(indexOut);\n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f838187609fee3a1afa5f162f93c796046242c84","date":1406216791,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(\n                              SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      writeHeader(out);\n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      writeIndexHeader(indexOut);\n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(\n                              SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      writeHeader(out);\n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      writeIndexHeader(indexOut);\n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(\n                              SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      writeHeader(out);\n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      writeIndexHeader(indexOut);\n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out, state);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(\n                              SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      writeHeader(out);\n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      writeIndexHeader(indexOut);\n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6d238816bcdf9bbe4ec886226d89bd93834eb7e","date":1413925889,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    this.maxDoc = state.segmentInfo.getDocCount();\n    this.fieldInfos = state.fieldInfos;\n    this.minItemsInBlock = minItemsInBlock;\n    this.maxItemsInBlock = maxItemsInBlock;\n    this.postingsWriter = postingsWriter;\n\n    final String termsName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_EXTENSION);\n    termsOut = state.directory.createOutput(termsName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      CodecUtil.writeSegmentHeader(termsOut, BlockTreeTermsReader.TERMS_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                  state.segmentInfo.getId(), state.segmentSuffix);\n\n      final String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(indexName, state.context);\n      CodecUtil.writeSegmentHeader(indexOut, BlockTreeTermsReader.TERMS_INDEX_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                   state.segmentInfo.getId(), state.segmentSuffix);\n\n      postingsWriter.init(termsOut, state);                          // have consumer write its format/header\n      \n      this.indexOut = indexOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut);\n      }\n    }\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(\n                              SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      writeHeader(out);\n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      writeIndexHeader(indexOut);\n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out, state);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    this.maxDoc = state.segmentInfo.getDocCount();\n    this.fieldInfos = state.fieldInfos;\n    this.minItemsInBlock = minItemsInBlock;\n    this.maxItemsInBlock = maxItemsInBlock;\n    this.postingsWriter = postingsWriter;\n\n    final String termsName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_EXTENSION);\n    termsOut = state.directory.createOutput(termsName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      CodecUtil.writeIndexHeader(termsOut, BlockTreeTermsReader.TERMS_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                  state.segmentInfo.getId(), state.segmentSuffix);\n\n      final String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(indexName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, BlockTreeTermsReader.TERMS_INDEX_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                   state.segmentInfo.getId(), state.segmentSuffix);\n\n      postingsWriter.init(termsOut, state);                          // have consumer write its format/header\n      \n      this.indexOut = indexOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut);\n      }\n    }\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    this.maxDoc = state.segmentInfo.getDocCount();\n    this.fieldInfos = state.fieldInfos;\n    this.minItemsInBlock = minItemsInBlock;\n    this.maxItemsInBlock = maxItemsInBlock;\n    this.postingsWriter = postingsWriter;\n\n    final String termsName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_EXTENSION);\n    termsOut = state.directory.createOutput(termsName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      CodecUtil.writeSegmentHeader(termsOut, BlockTreeTermsReader.TERMS_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                  state.segmentInfo.getId(), state.segmentSuffix);\n\n      final String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(indexName, state.context);\n      CodecUtil.writeSegmentHeader(indexOut, BlockTreeTermsReader.TERMS_INDEX_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                   state.segmentInfo.getId(), state.segmentSuffix);\n\n      postingsWriter.init(termsOut, state);                          // have consumer write its format/header\n      \n      this.indexOut = indexOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    this.maxDoc = state.segmentInfo.getDocCount();\n    this.fieldInfos = state.fieldInfos;\n    this.minItemsInBlock = minItemsInBlock;\n    this.maxItemsInBlock = maxItemsInBlock;\n    this.postingsWriter = postingsWriter;\n\n    final String termsName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_EXTENSION);\n    termsOut = state.directory.createOutput(termsName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      CodecUtil.writeIndexHeader(termsOut, BlockTreeTermsReader.TERMS_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                  state.segmentInfo.getId(), state.segmentSuffix);\n\n      final String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(indexName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, BlockTreeTermsReader.TERMS_INDEX_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                   state.segmentInfo.getId(), state.segmentSuffix);\n\n      postingsWriter.init(termsOut, state);                          // have consumer write its format/header\n      \n      this.indexOut = indexOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut);\n      }\n    }\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(\n                              SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      writeHeader(out);\n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      writeIndexHeader(indexOut);\n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7de3c1dd4c0ae19854783135d925c794bc213fbd","date":1421160242,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    validateSettings(minItemsInBlock, maxItemsInBlock);\n\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (maxItemsInBlock < 2*(minItemsInBlock-1)) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    this.maxDoc = state.segmentInfo.getDocCount();\n    this.fieldInfos = state.fieldInfos;\n    this.minItemsInBlock = minItemsInBlock;\n    this.maxItemsInBlock = maxItemsInBlock;\n    this.postingsWriter = postingsWriter;\n\n    final String termsName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_EXTENSION);\n    termsOut = state.directory.createOutput(termsName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      CodecUtil.writeIndexHeader(termsOut, BlockTreeTermsReader.TERMS_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                  state.segmentInfo.getId(), state.segmentSuffix);\n\n      final String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(indexName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, BlockTreeTermsReader.TERMS_INDEX_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                   state.segmentInfo.getId(), state.segmentSuffix);\n\n      postingsWriter.init(termsOut, state);                          // have consumer write its format/header\n      \n      this.indexOut = indexOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut);\n      }\n    }\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    this.maxDoc = state.segmentInfo.getDocCount();\n    this.fieldInfos = state.fieldInfos;\n    this.minItemsInBlock = minItemsInBlock;\n    this.maxItemsInBlock = maxItemsInBlock;\n    this.postingsWriter = postingsWriter;\n\n    final String termsName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_EXTENSION);\n    termsOut = state.directory.createOutput(termsName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      CodecUtil.writeIndexHeader(termsOut, BlockTreeTermsReader.TERMS_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                  state.segmentInfo.getId(), state.segmentSuffix);\n\n      final String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(indexName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, BlockTreeTermsReader.TERMS_INDEX_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                   state.segmentInfo.getId(), state.segmentSuffix);\n\n      postingsWriter.init(termsOut, state);                          // have consumer write its format/header\n      \n      this.indexOut = indexOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e12b51feeeb82a96947bdb9e0adce1f5e7c60f6","date":1422797288,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    validateSettings(minItemsInBlock, maxItemsInBlock);\n\n    this.maxDoc = state.segmentInfo.getDocCount();\n    this.fieldInfos = state.fieldInfos;\n    this.minItemsInBlock = minItemsInBlock;\n    this.maxItemsInBlock = maxItemsInBlock;\n    this.postingsWriter = postingsWriter;\n\n    final String termsName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_EXTENSION);\n    termsOut = state.directory.createOutput(termsName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      CodecUtil.writeIndexHeader(termsOut, BlockTreeTermsReader.TERMS_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                  state.segmentInfo.getId(), state.segmentSuffix);\n\n      final String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(indexName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, BlockTreeTermsReader.TERMS_INDEX_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                   state.segmentInfo.getId(), state.segmentSuffix);\n\n      postingsWriter.init(termsOut, state);                          // have consumer write its format/header\n      \n      this.indexOut = indexOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut);\n      }\n    }\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    validateSettings(minItemsInBlock, maxItemsInBlock);\n\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (maxItemsInBlock < 2*(minItemsInBlock-1)) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    this.maxDoc = state.segmentInfo.getDocCount();\n    this.fieldInfos = state.fieldInfos;\n    this.minItemsInBlock = minItemsInBlock;\n    this.maxItemsInBlock = maxItemsInBlock;\n    this.postingsWriter = postingsWriter;\n\n    final String termsName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_EXTENSION);\n    termsOut = state.directory.createOutput(termsName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      CodecUtil.writeIndexHeader(termsOut, BlockTreeTermsReader.TERMS_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                  state.segmentInfo.getId(), state.segmentSuffix);\n\n      final String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(indexName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, BlockTreeTermsReader.TERMS_INDEX_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                   state.segmentInfo.getId(), state.segmentSuffix);\n\n      postingsWriter.init(termsOut, state);                          // have consumer write its format/header\n      \n      this.indexOut = indexOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    validateSettings(minItemsInBlock, maxItemsInBlock);\n\n    this.maxDoc = state.segmentInfo.maxDoc();\n    this.fieldInfos = state.fieldInfos;\n    this.minItemsInBlock = minItemsInBlock;\n    this.maxItemsInBlock = maxItemsInBlock;\n    this.postingsWriter = postingsWriter;\n\n    final String termsName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_EXTENSION);\n    termsOut = state.directory.createOutput(termsName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      CodecUtil.writeIndexHeader(termsOut, BlockTreeTermsReader.TERMS_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                  state.segmentInfo.getId(), state.segmentSuffix);\n\n      final String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(indexName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, BlockTreeTermsReader.TERMS_INDEX_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                   state.segmentInfo.getId(), state.segmentSuffix);\n\n      postingsWriter.init(termsOut, state);                          // have consumer write its format/header\n      \n      this.indexOut = indexOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut);\n      }\n    }\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    validateSettings(minItemsInBlock, maxItemsInBlock);\n\n    this.maxDoc = state.segmentInfo.getDocCount();\n    this.fieldInfos = state.fieldInfos;\n    this.minItemsInBlock = minItemsInBlock;\n    this.maxItemsInBlock = maxItemsInBlock;\n    this.postingsWriter = postingsWriter;\n\n    final String termsName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_EXTENSION);\n    termsOut = state.directory.createOutput(termsName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      CodecUtil.writeIndexHeader(termsOut, BlockTreeTermsReader.TERMS_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                  state.segmentInfo.getId(), state.segmentSuffix);\n\n      final String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(indexName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, BlockTreeTermsReader.TERMS_INDEX_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                   state.segmentInfo.getId(), state.segmentSuffix);\n\n      postingsWriter.init(termsOut, state);                          // have consumer write its format/header\n      \n      this.indexOut = indexOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    validateSettings(minItemsInBlock, maxItemsInBlock);\n\n    this.maxDoc = state.segmentInfo.maxDoc();\n    this.fieldInfos = state.fieldInfos;\n    this.minItemsInBlock = minItemsInBlock;\n    this.maxItemsInBlock = maxItemsInBlock;\n    this.postingsWriter = postingsWriter;\n\n    final String termsName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_EXTENSION);\n    termsOut = state.directory.createOutput(termsName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      CodecUtil.writeIndexHeader(termsOut, BlockTreeTermsReader.TERMS_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                  state.segmentInfo.getId(), state.segmentSuffix);\n\n      final String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(indexName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, BlockTreeTermsReader.TERMS_INDEX_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                   state.segmentInfo.getId(), state.segmentSuffix);\n\n      postingsWriter.init(termsOut, state);                          // have consumer write its format/header\n      \n      this.indexOut = indexOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut);\n      }\n    }\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    validateSettings(minItemsInBlock, maxItemsInBlock);\n\n    this.maxDoc = state.segmentInfo.getDocCount();\n    this.fieldInfos = state.fieldInfos;\n    this.minItemsInBlock = minItemsInBlock;\n    this.maxItemsInBlock = maxItemsInBlock;\n    this.postingsWriter = postingsWriter;\n\n    final String termsName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_EXTENSION);\n    termsOut = state.directory.createOutput(termsName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      CodecUtil.writeIndexHeader(termsOut, BlockTreeTermsReader.TERMS_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                  state.segmentInfo.getId(), state.segmentSuffix);\n\n      final String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(indexName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, BlockTreeTermsReader.TERMS_INDEX_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                   state.segmentInfo.getId(), state.segmentSuffix);\n\n      postingsWriter.init(termsOut, state);                          // have consumer write its format/header\n      \n      this.indexOut = indexOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    validateSettings(minItemsInBlock, maxItemsInBlock);\n\n    this.maxDoc = state.segmentInfo.maxDoc();\n    this.fieldInfos = state.fieldInfos;\n    this.minItemsInBlock = minItemsInBlock;\n    this.maxItemsInBlock = maxItemsInBlock;\n    this.postingsWriter = postingsWriter;\n\n    final String termsName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_EXTENSION);\n    termsOut = state.directory.createOutput(termsName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      CodecUtil.writeIndexHeader(termsOut, BlockTreeTermsReader.TERMS_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                  state.segmentInfo.getId(), state.segmentSuffix);\n\n      final String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(indexName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, BlockTreeTermsReader.TERMS_INDEX_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                   state.segmentInfo.getId(), state.segmentSuffix);\n\n      postingsWriter.init(termsOut, state);                          // have consumer write its format/header\n      \n      this.indexOut = indexOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut);\n      }\n    }\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    validateSettings(minItemsInBlock, maxItemsInBlock);\n\n    this.maxDoc = state.segmentInfo.getDocCount();\n    this.fieldInfos = state.fieldInfos;\n    this.minItemsInBlock = minItemsInBlock;\n    this.maxItemsInBlock = maxItemsInBlock;\n    this.postingsWriter = postingsWriter;\n\n    final String termsName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_EXTENSION);\n    termsOut = state.directory.createOutput(termsName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      CodecUtil.writeIndexHeader(termsOut, BlockTreeTermsReader.TERMS_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                  state.segmentInfo.getId(), state.segmentSuffix);\n\n      final String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(indexName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, BlockTreeTermsReader.TERMS_INDEX_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                   state.segmentInfo.getId(), state.segmentSuffix);\n\n      postingsWriter.init(termsOut, state);                          // have consumer write its format/header\n      \n      this.indexOut = indexOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer, using default values for auto-prefix terms. */\n  public BlockTreeTermsWriter(SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock) throws IOException {\n    this(state, postingsWriter, minItemsInBlock, maxItemsInBlock, 0, 0);\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    validateSettings(minItemsInBlock, maxItemsInBlock);\n\n    this.maxDoc = state.segmentInfo.maxDoc();\n    this.fieldInfos = state.fieldInfos;\n    this.minItemsInBlock = minItemsInBlock;\n    this.maxItemsInBlock = maxItemsInBlock;\n    this.postingsWriter = postingsWriter;\n\n    final String termsName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_EXTENSION);\n    termsOut = state.directory.createOutput(termsName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      CodecUtil.writeIndexHeader(termsOut, BlockTreeTermsReader.TERMS_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                  state.segmentInfo.getId(), state.segmentSuffix);\n\n      final String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(indexName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, BlockTreeTermsReader.TERMS_INDEX_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                   state.segmentInfo.getId(), state.segmentSuffix);\n\n      postingsWriter.init(termsOut, state);                          // have consumer write its format/header\n      \n      this.indexOut = indexOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer, using default values for auto-prefix terms. */\n  public BlockTreeTermsWriter(SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock) throws IOException {\n    this(state, postingsWriter, minItemsInBlock, maxItemsInBlock, 0, 0);\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    validateSettings(minItemsInBlock, maxItemsInBlock);\n\n    this.maxDoc = state.segmentInfo.maxDoc();\n    this.fieldInfos = state.fieldInfos;\n    this.minItemsInBlock = minItemsInBlock;\n    this.maxItemsInBlock = maxItemsInBlock;\n    this.postingsWriter = postingsWriter;\n\n    final String termsName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_EXTENSION);\n    termsOut = state.directory.createOutput(termsName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      CodecUtil.writeIndexHeader(termsOut, BlockTreeTermsReader.TERMS_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                  state.segmentInfo.getId(), state.segmentSuffix);\n\n      final String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(indexName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, BlockTreeTermsReader.TERMS_INDEX_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                   state.segmentInfo.getId(), state.segmentSuffix);\n\n      postingsWriter.init(termsOut, state);                          // have consumer write its format/header\n      \n      this.indexOut = indexOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f","date":1466407389,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    validateSettings(minItemsInBlock,\n                     maxItemsInBlock);\n\n    this.minItemsInBlock = minItemsInBlock;\n    this.maxItemsInBlock = maxItemsInBlock;\n\n    this.maxDoc = state.segmentInfo.maxDoc();\n    this.fieldInfos = state.fieldInfos;\n    this.postingsWriter = postingsWriter;\n\n    final String termsName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_EXTENSION);\n    termsOut = state.directory.createOutput(termsName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      CodecUtil.writeIndexHeader(termsOut, BlockTreeTermsReader.TERMS_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                 state.segmentInfo.getId(), state.segmentSuffix);\n\n      final String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(indexName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, BlockTreeTermsReader.TERMS_INDEX_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                 state.segmentInfo.getId(), state.segmentSuffix);\n      //segment = state.segmentInfo.name;\n\n      postingsWriter.init(termsOut, state);                          // have consumer write its format/header\n      \n      this.indexOut = indexOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut);\n      }\n    }\n  }\n\n","sourceOld":"  /** Create a new writer, using default values for auto-prefix terms. */\n  public BlockTreeTermsWriter(SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock) throws IOException {\n    this(state, postingsWriter, minItemsInBlock, maxItemsInBlock, 0, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aaba221b22442bdf0ef28770c25fe259dfb3f55","date":1466496193,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    validateSettings(minItemsInBlock,\n                     maxItemsInBlock);\n\n    this.minItemsInBlock = minItemsInBlock;\n    this.maxItemsInBlock = maxItemsInBlock;\n\n    this.maxDoc = state.segmentInfo.maxDoc();\n    this.fieldInfos = state.fieldInfos;\n    this.postingsWriter = postingsWriter;\n\n    final String termsName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_EXTENSION);\n    termsOut = state.directory.createOutput(termsName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      CodecUtil.writeIndexHeader(termsOut, BlockTreeTermsReader.TERMS_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                 state.segmentInfo.getId(), state.segmentSuffix);\n\n      final String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(indexName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, BlockTreeTermsReader.TERMS_INDEX_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                 state.segmentInfo.getId(), state.segmentSuffix);\n      //segment = state.segmentInfo.name;\n\n      postingsWriter.init(termsOut, state);                          // have consumer write its format/header\n      \n      this.indexOut = indexOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut);\n      }\n    }\n  }\n\n","sourceOld":"  /** Create a new writer, using default values for auto-prefix terms. */\n  public BlockTreeTermsWriter(SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock) throws IOException {\n    this(state, postingsWriter, minItemsInBlock, maxItemsInBlock, 0, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    validateSettings(minItemsInBlock,\n                     maxItemsInBlock);\n\n    this.minItemsInBlock = minItemsInBlock;\n    this.maxItemsInBlock = maxItemsInBlock;\n\n    this.maxDoc = state.segmentInfo.maxDoc();\n    this.fieldInfos = state.fieldInfos;\n    this.postingsWriter = postingsWriter;\n\n    final String termsName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_EXTENSION);\n    termsOut = state.directory.createOutput(termsName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      CodecUtil.writeIndexHeader(termsOut, BlockTreeTermsReader.TERMS_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                 state.segmentInfo.getId(), state.segmentSuffix);\n\n      final String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(indexName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, BlockTreeTermsReader.TERMS_INDEX_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                 state.segmentInfo.getId(), state.segmentSuffix);\n      //segment = state.segmentInfo.name;\n\n      postingsWriter.init(termsOut, state);                          // have consumer write its format/header\n      \n      this.indexOut = indexOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut);\n      }\n    }\n  }\n\n","sourceOld":"  /** Create a new writer, using default values for auto-prefix terms. */\n  public BlockTreeTermsWriter(SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock) throws IOException {\n    this(state, postingsWriter, minItemsInBlock, maxItemsInBlock, 0, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99f06f5dd087b1829e7b4139e4d014c786b92572","date":1592312728,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    validateSettings(minItemsInBlock,\n                     maxItemsInBlock);\n\n    this.minItemsInBlock = minItemsInBlock;\n    this.maxItemsInBlock = maxItemsInBlock;\n\n    this.maxDoc = state.segmentInfo.maxDoc();\n    this.fieldInfos = state.fieldInfos;\n    this.postingsWriter = postingsWriter;\n\n    final String termsName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_EXTENSION);\n    termsOut = state.directory.createOutput(termsName, state.context);\n    boolean success = false;\n    IndexOutput metaOut = null, indexOut = null;\n    try {\n      CodecUtil.writeIndexHeader(termsOut, BlockTreeTermsReader.TERMS_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                 state.segmentInfo.getId(), state.segmentSuffix);\n\n      final String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(indexName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, BlockTreeTermsReader.TERMS_INDEX_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                 state.segmentInfo.getId(), state.segmentSuffix);\n      //segment = state.segmentInfo.name;\n\n      final String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_META_EXTENSION);\n      metaOut = state.directory.createOutput(metaName, state.context);\n      CodecUtil.writeIndexHeader(metaOut, BlockTreeTermsReader.TERMS_META_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n          state.segmentInfo.getId(), state.segmentSuffix);\n\n      postingsWriter.init(metaOut, state);                          // have consumer write its format/header\n\n      this.metaOut = metaOut;\n      this.indexOut = indexOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(metaOut, termsOut, indexOut);\n      }\n    }\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    validateSettings(minItemsInBlock,\n                     maxItemsInBlock);\n\n    this.minItemsInBlock = minItemsInBlock;\n    this.maxItemsInBlock = maxItemsInBlock;\n\n    this.maxDoc = state.segmentInfo.maxDoc();\n    this.fieldInfos = state.fieldInfos;\n    this.postingsWriter = postingsWriter;\n\n    final String termsName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_EXTENSION);\n    termsOut = state.directory.createOutput(termsName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      CodecUtil.writeIndexHeader(termsOut, BlockTreeTermsReader.TERMS_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                 state.segmentInfo.getId(), state.segmentSuffix);\n\n      final String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, BlockTreeTermsReader.TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(indexName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, BlockTreeTermsReader.TERMS_INDEX_CODEC_NAME, BlockTreeTermsReader.VERSION_CURRENT,\n                                 state.segmentInfo.getId(), state.segmentSuffix);\n      //segment = state.segmentInfo.name;\n\n      postingsWriter.init(termsOut, state);                          // have consumer write its format/header\n      \n      this.indexOut = indexOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"99eb4a732d1a908f4636ace52928876136bf1896":["f838187609fee3a1afa5f162f93c796046242c84"],"99f06f5dd087b1829e7b4139e4d014c786b92572":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"b0267c69e2456a3477a1ad785723f2135da3117e":["8e12b51feeeb82a96947bdb9e0adce1f5e7c60f6"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["c6d238816bcdf9bbe4ec886226d89bd93834eb7e"],"f838187609fee3a1afa5f162f93c796046242c84":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3e8715d826e588419327562287d5d6a8040d63d6","6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"7de3c1dd4c0ae19854783135d925c794bc213fbd":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":["99eb4a732d1a908f4636ace52928876136bf1896"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["8e12b51feeeb82a96947bdb9e0adce1f5e7c60f6","b0267c69e2456a3477a1ad785723f2135da3117e"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["3e8715d826e588419327562287d5d6a8040d63d6","25b8a027ba57951e63075a2ae9647c5c4a8c5c5f"],"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f":["3e8715d826e588419327562287d5d6a8040d63d6"],"b06445ae1731e049327712db0454e5643ca9b7fe":["8e12b51feeeb82a96947bdb9e0adce1f5e7c60f6","b0267c69e2456a3477a1ad785723f2135da3117e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","3e8715d826e588419327562287d5d6a8040d63d6"],"8e12b51feeeb82a96947bdb9e0adce1f5e7c60f6":["7de3c1dd4c0ae19854783135d925c794bc213fbd"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["f838187609fee3a1afa5f162f93c796046242c84","3384e6013a93e4d11b7d75388693f8d0388602bf"],"3e8715d826e588419327562287d5d6a8040d63d6":["b0267c69e2456a3477a1ad785723f2135da3117e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99f06f5dd087b1829e7b4139e4d014c786b92572"]},"commit2Childs":{"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"99eb4a732d1a908f4636ace52928876136bf1896":["c6d238816bcdf9bbe4ec886226d89bd93834eb7e"],"99f06f5dd087b1829e7b4139e4d014c786b92572":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b0267c69e2456a3477a1ad785723f2135da3117e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","3e8715d826e588419327562287d5d6a8040d63d6"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"f838187609fee3a1afa5f162f93c796046242c84":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"7de3c1dd4c0ae19854783135d925c794bc213fbd":["8e12b51feeeb82a96947bdb9e0adce1f5e7c60f6"],"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":["3384e6013a93e4d11b7d75388693f8d0388602bf"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["f838187609fee3a1afa5f162f93c796046242c84"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d2638f781be724518ff6c2263d14a48cf6e68017"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["99f06f5dd087b1829e7b4139e4d014c786b92572","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ad80176d91a6f70fe93880e43dfd697dc4e63ed","4d637064d608752565d4f9f41b2497dfdfdde50e"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"8e12b51feeeb82a96947bdb9e0adce1f5e7c60f6":["b0267c69e2456a3477a1ad785723f2135da3117e","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["7de3c1dd4c0ae19854783135d925c794bc213fbd"],"3e8715d826e588419327562287d5d6a8040d63d6":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","6aaba221b22442bdf0ef28770c25fe259dfb3f55","25b8a027ba57951e63075a2ae9647c5c4a8c5c5f","d2638f781be724518ff6c2263d14a48cf6e68017"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b06445ae1731e049327712db0454e5643ca9b7fe","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}