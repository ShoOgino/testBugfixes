{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testGetIndexCommit().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testGetIndexCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetIndexCommit().mjava","sourceNew":"    public void testGetIndexCommit() throws IOException {\n\n      Directory d = newDirectory();\n\n      // set up writer\n      IndexWriter writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      DirectoryReader r = DirectoryReader.open(d);\n      IndexCommit c = r.getIndexCommit();\n\n      assertEquals(sis.getCurrentSegmentFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertFalse(c.equals(r2.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().getSegmentCount() == 1);\n      r2.close();\n\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setOpenMode(OpenMode.APPEND));\n      writer.forceMerge(1);\n      writer.close();\n\n      r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertNull(DirectoryReader.openIfChanged(r2));\n      assertEquals(1, r2.getIndexCommit().getSegmentCount());\n\n      r.close();\n      r2.close();\n      d.close();\n    }      \n\n","sourceOld":"    public void testGetIndexCommit() throws IOException {\n\n      Directory d = newDirectory();\n\n      // set up writer\n      IndexWriter writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      DirectoryReader r = DirectoryReader.open(d);\n      IndexCommit c = r.getIndexCommit();\n\n      assertEquals(sis.getCurrentSegmentFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertFalse(c.equals(r2.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().getSegmentCount() == 1);\n      r2.close();\n\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setOpenMode(OpenMode.APPEND));\n      writer.forceMerge(1);\n      writer.close();\n\n      r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertNull(DirectoryReader.openIfChanged(r2));\n      assertEquals(1, r2.getIndexCommit().getSegmentCount());\n\n      r.close();\n      r2.close();\n      d.close();\n    }      \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"438e995b4e32916f631722aab36254146830fefb","date":1328903827,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testGetIndexCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testGetIndexCommit().mjava","sourceNew":"    public void testGetIndexCommit() throws IOException {\n\n      Directory d = newDirectory();\n\n      // set up writer\n      IndexWriter writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      DirectoryReader r = DirectoryReader.open(d);\n      IndexCommit c = r.getIndexCommit();\n\n      assertEquals(sis.getSegmentsFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertFalse(c.equals(r2.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().getSegmentCount() == 1);\n      r2.close();\n\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setOpenMode(OpenMode.APPEND));\n      writer.forceMerge(1);\n      writer.close();\n\n      r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertNull(DirectoryReader.openIfChanged(r2));\n      assertEquals(1, r2.getIndexCommit().getSegmentCount());\n\n      r.close();\n      r2.close();\n      d.close();\n    }      \n\n","sourceOld":"    public void testGetIndexCommit() throws IOException {\n\n      Directory d = newDirectory();\n\n      // set up writer\n      IndexWriter writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      DirectoryReader r = DirectoryReader.open(d);\n      IndexCommit c = r.getIndexCommit();\n\n      assertEquals(sis.getCurrentSegmentFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertFalse(c.equals(r2.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().getSegmentCount() == 1);\n      r2.close();\n\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setOpenMode(OpenMode.APPEND));\n      writer.forceMerge(1);\n      writer.close();\n\n      r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertNull(DirectoryReader.openIfChanged(r2));\n      assertEquals(1, r2.getIndexCommit().getSegmentCount());\n\n      r.close();\n      r2.close();\n      d.close();\n    }      \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testGetIndexCommit().mjava","sourceNew":null,"sourceOld":"    public void testGetIndexCommit() throws IOException {\n\n      Directory d = newDirectory();\n\n      // set up writer\n      IndexWriter writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      DirectoryReader r = DirectoryReader.open(d);\n      IndexCommit c = r.getIndexCommit();\n\n      assertEquals(sis.getSegmentsFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(\n          d,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.APPEND).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertFalse(c.equals(r2.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().getSegmentCount() == 1);\n      r2.close();\n\n      writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random))\n        .setOpenMode(OpenMode.APPEND));\n      writer.forceMerge(1);\n      writer.close();\n\n      r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertNull(DirectoryReader.openIfChanged(r2));\n      assertEquals(1, r2.getIndexCommit().getSegmentCount());\n\n      r.close();\n      r2.close();\n      d.close();\n    }      \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["438e995b4e32916f631722aab36254146830fefb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"438e995b4e32916f631722aab36254146830fefb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"]},"commit2Childs":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["438e995b4e32916f631722aab36254146830fefb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"438e995b4e32916f631722aab36254146830fefb":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}