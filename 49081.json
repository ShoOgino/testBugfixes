{"path":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#add(FilterClause).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#add(FilterClause).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#add(FilterClause).mjava","sourceNew":"  /**\n  * Adds a new FilterClause to the Boolean Filter container\n  * @param filterClause A FilterClause object containing a Filter and an Occur parameter\n  */\n  \n  public void add(FilterClause filterClause)\n  {\n    if (filterClause.getOccur().equals(Occur.MUST)) {\n      if (mustFilters==null) {\n        mustFilters=new ArrayList<Filter>();\n      }\n      mustFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.SHOULD)) {\n      if (shouldFilters==null) {\n        shouldFilters=new ArrayList<Filter>();\n      }\n      shouldFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.MUST_NOT)) {\n      if (notFilters==null) {\n        notFilters=new ArrayList<Filter>();\n      }\n      notFilters.add(filterClause.getFilter());\n    }\n  }\n\n","sourceOld":"  /**\n  * Adds a new FilterClause to the Boolean Filter container\n  * @param filterClause A FilterClause object containing a Filter and an Occur parameter\n  */\n  \n  public void add(FilterClause filterClause)\n  {\n    if (filterClause.getOccur().equals(Occur.MUST)) {\n      if (mustFilters==null) {\n        mustFilters=new ArrayList<Filter>();\n      }\n      mustFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.SHOULD)) {\n      if (shouldFilters==null) {\n        shouldFilters=new ArrayList<Filter>();\n      }\n      shouldFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.MUST_NOT)) {\n      if (notFilters==null) {\n        notFilters=new ArrayList<Filter>();\n      }\n      notFilters.add(filterClause.getFilter());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#add(FilterClause).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#add(FilterClause).mjava","sourceNew":"  /**\n  * Adds a new FilterClause to the Boolean Filter container\n  * @param filterClause A FilterClause object containing a Filter and an Occur parameter\n  */\n  public void add(FilterClause filterClause)\n  {\n    if (filterClause.getOccur().equals(Occur.MUST)) {\n      if (mustFilters==null) {\n        mustFilters=new ArrayList<Filter>();\n      }\n      mustFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.SHOULD)) {\n      if (shouldFilters==null) {\n        shouldFilters=new ArrayList<Filter>();\n      }\n      shouldFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.MUST_NOT)) {\n      if (notFilters==null) {\n        notFilters=new ArrayList<Filter>();\n      }\n      notFilters.add(filterClause.getFilter());\n    }\n  }\n\n","sourceOld":"  /**\n  * Adds a new FilterClause to the Boolean Filter container\n  * @param filterClause A FilterClause object containing a Filter and an Occur parameter\n  */\n  \n  public void add(FilterClause filterClause)\n  {\n    if (filterClause.getOccur().equals(Occur.MUST)) {\n      if (mustFilters==null) {\n        mustFilters=new ArrayList<Filter>();\n      }\n      mustFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.SHOULD)) {\n      if (shouldFilters==null) {\n        shouldFilters=new ArrayList<Filter>();\n      }\n      shouldFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.MUST_NOT)) {\n      if (notFilters==null) {\n        notFilters=new ArrayList<Filter>();\n      }\n      notFilters.add(filterClause.getFilter());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#add(FilterClause).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#add(FilterClause).mjava","sourceNew":"  /**\n  * Adds a new FilterClause to the Boolean Filter container\n  * @param filterClause A FilterClause object containing a Filter and an Occur parameter\n  */\n  public void add(FilterClause filterClause)\n  {\n    if (filterClause.getOccur().equals(Occur.MUST)) {\n      if (mustFilters==null) {\n        mustFilters=new ArrayList<Filter>();\n      }\n      mustFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.SHOULD)) {\n      if (shouldFilters==null) {\n        shouldFilters=new ArrayList<Filter>();\n      }\n      shouldFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.MUST_NOT)) {\n      if (notFilters==null) {\n        notFilters=new ArrayList<Filter>();\n      }\n      notFilters.add(filterClause.getFilter());\n    }\n  }\n\n","sourceOld":"  /**\n  * Adds a new FilterClause to the Boolean Filter container\n  * @param filterClause A FilterClause object containing a Filter and an Occur parameter\n  */\n  \n  public void add(FilterClause filterClause)\n  {\n    if (filterClause.getOccur().equals(Occur.MUST)) {\n      if (mustFilters==null) {\n        mustFilters=new ArrayList<Filter>();\n      }\n      mustFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.SHOULD)) {\n      if (shouldFilters==null) {\n        shouldFilters=new ArrayList<Filter>();\n      }\n      shouldFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.MUST_NOT)) {\n      if (notFilters==null) {\n        notFilters=new ArrayList<Filter>();\n      }\n      notFilters.add(filterClause.getFilter());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#add(FilterClause).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#add(FilterClause).mjava","sourceNew":"  /**\n  * Adds a new FilterClause to the Boolean Filter container\n  * @param filterClause A FilterClause object containing a Filter and an Occur parameter\n  */\n  public void add(FilterClause filterClause)\n  {\n    if (filterClause.getOccur().equals(Occur.MUST)) {\n      if (mustFilters==null) {\n        mustFilters=new ArrayList<Filter>();\n      }\n      mustFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.SHOULD)) {\n      if (shouldFilters==null) {\n        shouldFilters=new ArrayList<Filter>();\n      }\n      shouldFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.MUST_NOT)) {\n      if (notFilters==null) {\n        notFilters=new ArrayList<Filter>();\n      }\n      notFilters.add(filterClause.getFilter());\n    }\n  }\n\n","sourceOld":"  /**\n  * Adds a new FilterClause to the Boolean Filter container\n  * @param filterClause A FilterClause object containing a Filter and an Occur parameter\n  */\n  \n  public void add(FilterClause filterClause)\n  {\n    if (filterClause.getOccur().equals(Occur.MUST)) {\n      if (mustFilters==null) {\n        mustFilters=new ArrayList<Filter>();\n      }\n      mustFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.SHOULD)) {\n      if (shouldFilters==null) {\n        shouldFilters=new ArrayList<Filter>();\n      }\n      shouldFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.MUST_NOT)) {\n      if (notFilters==null) {\n        notFilters=new ArrayList<Filter>();\n      }\n      notFilters.add(filterClause.getFilter());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e141595402370bee958745de8b1c9de1fa182581","date":1310547892,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#add(FilterClause).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#add(FilterClause).mjava","sourceNew":"  /**\n  * Adds a new FilterClause to the Boolean Filter container\n  * @param filterClause A FilterClause object containing a Filter and an Occur parameter\n  */\n  public void add(FilterClause filterClause) {\n    if (filterClause.getOccur().equals(Occur.MUST)) {\n      if (mustFilters == null) {\n        mustFilters = new ArrayList<Filter>();\n      }\n      mustFilters.add(filterClause.getFilter());\n    } else if (filterClause.getOccur().equals(Occur.SHOULD)) {\n      if (shouldFilters == null) {\n        shouldFilters = new ArrayList<Filter>();\n      }\n      shouldFilters.add(filterClause.getFilter());\n    } else if (filterClause.getOccur().equals(Occur.MUST_NOT)) {\n      if (notFilters == null) {\n        notFilters = new ArrayList<Filter>();\n      }\n      notFilters.add(filterClause.getFilter());\n    }\n  }\n\n","sourceOld":"  /**\n  * Adds a new FilterClause to the Boolean Filter container\n  * @param filterClause A FilterClause object containing a Filter and an Occur parameter\n  */\n  public void add(FilterClause filterClause)\n  {\n    if (filterClause.getOccur().equals(Occur.MUST)) {\n      if (mustFilters==null) {\n        mustFilters=new ArrayList<Filter>();\n      }\n      mustFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.SHOULD)) {\n      if (shouldFilters==null) {\n        shouldFilters=new ArrayList<Filter>();\n      }\n      shouldFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.MUST_NOT)) {\n      if (notFilters==null) {\n        notFilters=new ArrayList<Filter>();\n      }\n      notFilters.add(filterClause.getFilter());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f9f2355d68aab1348539f7a1603279405e566a4","date":1313634992,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/BooleanFilter#add(FilterClause).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#add(FilterClause).mjava","sourceNew":"  /**\n  * Adds a new FilterClause to the Boolean Filter container\n  * @param filterClause A FilterClause object containing a Filter and an Occur parameter\n  */\n  public void add(FilterClause filterClause) {\n    if (filterClause.getOccur().equals(Occur.MUST)) {\n      if (mustFilters == null) {\n        mustFilters = new ArrayList<Filter>();\n      }\n      mustFilters.add(filterClause.getFilter());\n    } else if (filterClause.getOccur().equals(Occur.SHOULD)) {\n      if (shouldFilters == null) {\n        shouldFilters = new ArrayList<Filter>();\n      }\n      shouldFilters.add(filterClause.getFilter());\n    } else if (filterClause.getOccur().equals(Occur.MUST_NOT)) {\n      if (notFilters == null) {\n        notFilters = new ArrayList<Filter>();\n      }\n      notFilters.add(filterClause.getFilter());\n    }\n  }\n\n","sourceOld":"  /**\n  * Adds a new FilterClause to the Boolean Filter container\n  * @param filterClause A FilterClause object containing a Filter and an Occur parameter\n  */\n  public void add(FilterClause filterClause) {\n    if (filterClause.getOccur().equals(Occur.MUST)) {\n      if (mustFilters == null) {\n        mustFilters = new ArrayList<Filter>();\n      }\n      mustFilters.add(filterClause.getFilter());\n    } else if (filterClause.getOccur().equals(Occur.SHOULD)) {\n      if (shouldFilters == null) {\n        shouldFilters = new ArrayList<Filter>();\n      }\n      shouldFilters.add(filterClause.getFilter());\n    } else if (filterClause.getOccur().equals(Occur.MUST_NOT)) {\n      if (notFilters == null) {\n        notFilters = new ArrayList<Filter>();\n      }\n      notFilters.add(filterClause.getFilter());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"e141595402370bee958745de8b1c9de1fa182581":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f9f2355d68aab1348539f7a1603279405e566a4"],"1f9f2355d68aab1348539f7a1603279405e566a4":["e141595402370bee958745de8b1c9de1fa182581"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"e141595402370bee958745de8b1c9de1fa182581":["1f9f2355d68aab1348539f7a1603279405e566a4"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e141595402370bee958745de8b1c9de1fa182581","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"1f9f2355d68aab1348539f7a1603279405e566a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}