{"path":"lucene/src/java/org/apache/lucene/search/CachingCollector#replay(Collector).mjava","commits":[{"id":"e77feb4ffb7321af961c838aeafdd07ef1f307d4","date":1305577750,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingCollector#replay(Collector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Replays the cached doc IDs (and scores) to the given Collector.\n   * \n   * @throws IllegalStateException\n   *           if this collector is not cached (i.e., if the RAM limits were too\n   *           low for the number of documents + scores to cache).\n   * @throws IllegalArgumentException\n   *           if the given Collect's does not support out-of-order collection,\n   *           while the collector passed to the ctor does.\n   */\n  public void replay(Collector other) throws IOException {\n    if (!isCached()) {\n      throw new IllegalStateException(\"cannot replay: cache was cleared because too much RAM was required\");\n    }\n    \n    if (!other.acceptsDocsOutOfOrder() && this.other.acceptsDocsOutOfOrder()) {\n      throw new IllegalArgumentException(\n          \"cannot replay: given collector does not support \"\n              + \"out-of-order collection, while the wrapped collector does. \"\n              + \"Therefore cached documents may be out-of-order.\");\n    }\n\n    //System.out.println(\"CC: replay totHits=\" + (upto + base));\n    if (lastReaderContext != null) {\n      cachedSegs.add(new SegStart(lastReaderContext, base+upto));\n      lastReaderContext = null;\n    }\n    \n    int curupto = 0;\n    int curbase = 0;\n    int chunkUpto = 0;\n    other.setScorer(cachedScorer);\n    curDocs = EMPTY_INT_ARRAY;\n    for(SegStart seg : cachedSegs) {\n      other.setNextReader(seg.readerContext);\n      while(curbase+curupto < seg.end) {\n        if (curupto == curDocs.length) {\n          curbase += curDocs.length;\n          curDocs = cachedDocs.get(chunkUpto);\n          if (cacheScores) {\n            curScores = cachedScores.get(chunkUpto);\n          }\n          chunkUpto++;\n          curupto = 0;\n        }\n        if (cacheScores) {\n          cachedScorer.score = curScores[curupto];\n        }\n        other.collect(curDocs[curupto++]);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6703e55954db440ab8a2bc2a615c4fa9f66b602b","date":1305691248,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingCollector#replay(Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingCollector#replay(Collector).mjava","sourceNew":"  /**\n   * Replays the cached doc IDs (and scores) to the given Collector. If this\n   * instance does not cache scores, then Scorer is not set on\n   * {@code other.setScorer} as well as scores are not replayed.\n   * \n   * @throws IllegalStateException\n   *           if this collector is not cached (i.e., if the RAM limits were too\n   *           low for the number of documents + scores to cache).\n   * @throws IllegalArgumentException\n   *           if the given Collect's does not support out-of-order collection,\n   *           while the collector passed to the ctor does.\n   */\n  public abstract void replay(Collector other) throws IOException;\n\n","sourceOld":"  /**\n   * Replays the cached doc IDs (and scores) to the given Collector.\n   * \n   * @throws IllegalStateException\n   *           if this collector is not cached (i.e., if the RAM limits were too\n   *           low for the number of documents + scores to cache).\n   * @throws IllegalArgumentException\n   *           if the given Collect's does not support out-of-order collection,\n   *           while the collector passed to the ctor does.\n   */\n  public void replay(Collector other) throws IOException {\n    if (!isCached()) {\n      throw new IllegalStateException(\"cannot replay: cache was cleared because too much RAM was required\");\n    }\n    \n    if (!other.acceptsDocsOutOfOrder() && this.other.acceptsDocsOutOfOrder()) {\n      throw new IllegalArgumentException(\n          \"cannot replay: given collector does not support \"\n              + \"out-of-order collection, while the wrapped collector does. \"\n              + \"Therefore cached documents may be out-of-order.\");\n    }\n\n    //System.out.println(\"CC: replay totHits=\" + (upto + base));\n    if (lastReaderContext != null) {\n      cachedSegs.add(new SegStart(lastReaderContext, base+upto));\n      lastReaderContext = null;\n    }\n    \n    int curupto = 0;\n    int curbase = 0;\n    int chunkUpto = 0;\n    other.setScorer(cachedScorer);\n    curDocs = EMPTY_INT_ARRAY;\n    for(SegStart seg : cachedSegs) {\n      other.setNextReader(seg.readerContext);\n      while(curbase+curupto < seg.end) {\n        if (curupto == curDocs.length) {\n          curbase += curDocs.length;\n          curDocs = cachedDocs.get(chunkUpto);\n          if (cacheScores) {\n            curScores = cachedScores.get(chunkUpto);\n          }\n          chunkUpto++;\n          curupto = 0;\n        }\n        if (cacheScores) {\n          cachedScorer.score = curScores[curupto];\n        }\n        other.collect(curDocs[curupto++]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingCollector#replay(Collector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Replays the cached doc IDs (and scores) to the given Collector. If this\n   * instance does not cache scores, then Scorer is not set on\n   * {@code other.setScorer} as well as scores are not replayed.\n   * \n   * @throws IllegalStateException\n   *           if this collector is not cached (i.e., if the RAM limits were too\n   *           low for the number of documents + scores to cache).\n   * @throws IllegalArgumentException\n   *           if the given Collect's does not support out-of-order collection,\n   *           while the collector passed to the ctor does.\n   */\n  public abstract void replay(Collector other) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingCollector#replay(Collector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Replays the cached doc IDs (and scores) to the given Collector. If this\n   * instance does not cache scores, then Scorer is not set on\n   * {@code other.setScorer} as well as scores are not replayed.\n   * \n   * @throws IllegalStateException\n   *           if this collector is not cached (i.e., if the RAM limits were too\n   *           low for the number of documents + scores to cache).\n   * @throws IllegalArgumentException\n   *           if the given Collect's does not support out-of-order collection,\n   *           while the collector passed to the ctor does.\n   */\n  public abstract void replay(Collector other) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector#replay(Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingCollector#replay(Collector).mjava","sourceNew":"  /**\n   * Replays the cached doc IDs (and scores) to the given Collector. If this\n   * instance does not cache scores, then Scorer is not set on\n   * {@code other.setScorer} as well as scores are not replayed.\n   * \n   * @throws IllegalStateException\n   *           if this collector is not cached (i.e., if the RAM limits were too\n   *           low for the number of documents + scores to cache).\n   * @throws IllegalArgumentException\n   *           if the given Collect's does not support out-of-order collection,\n   *           while the collector passed to the ctor does.\n   */\n  public abstract void replay(Collector other) throws IOException;\n\n","sourceOld":"  /**\n   * Replays the cached doc IDs (and scores) to the given Collector. If this\n   * instance does not cache scores, then Scorer is not set on\n   * {@code other.setScorer} as well as scores are not replayed.\n   * \n   * @throws IllegalStateException\n   *           if this collector is not cached (i.e., if the RAM limits were too\n   *           low for the number of documents + scores to cache).\n   * @throws IllegalArgumentException\n   *           if the given Collect's does not support out-of-order collection,\n   *           while the collector passed to the ctor does.\n   */\n  public abstract void replay(Collector other) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e77feb4ffb7321af961c838aeafdd07ef1f307d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6703e55954db440ab8a2bc2a615c4fa9f66b602b":["e77feb4ffb7321af961c838aeafdd07ef1f307d4"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6703e55954db440ab8a2bc2a615c4fa9f66b602b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6703e55954db440ab8a2bc2a615c4fa9f66b602b"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6703e55954db440ab8a2bc2a615c4fa9f66b602b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"e77feb4ffb7321af961c838aeafdd07ef1f307d4":["6703e55954db440ab8a2bc2a615c4fa9f66b602b"],"6703e55954db440ab8a2bc2a615c4fa9f66b602b":["c3a8a449466c1ff7ce2274fe73dab487256964b4","3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e77feb4ffb7321af961c838aeafdd07ef1f307d4","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}