{"path":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","commits":[{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      PostingsEnum docs = termsEnum.postings(null, needsScores ? PostingsEnum.FREQS : PostingsEnum.NONE);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.simScorer(stats, context));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      PostingsEnum docs = termsEnum.postings(acceptDocs, null, needsScores ? PostingsEnum.FREQS : PostingsEnum.NONE);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.simScorer(stats, context));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ce8de354eb40085752030725cb2bee2b0ae536c","date":1469029371,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termStates == null || termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);;\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      PostingsEnum docs = termsEnum.postings(null, needsScores ? PostingsEnum.FREQS : PostingsEnum.NONE);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.simScorer(stats, context));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      PostingsEnum docs = termsEnum.postings(null, needsScores ? PostingsEnum.FREQS : PostingsEnum.NONE);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.simScorer(stats, context));\n    }\n\n","bugFix":null,"bugIntro":["3bd3db3e8f35bef1d4d3f0411933b3190297302a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"35d7ed691d627802acc5be44a639b67b1360467b","date":1469032270,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termStates == null || termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);;\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      PostingsEnum docs = termsEnum.postings(null, needsScores ? PostingsEnum.FREQS : PostingsEnum.NONE);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.simScorer(stats, context));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      PostingsEnum docs = termsEnum.postings(null, needsScores ? PostingsEnum.FREQS : PostingsEnum.NONE);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.simScorer(stats, context));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termStates == null || termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);;\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      PostingsEnum docs = termsEnum.postings(null, needsScores ? PostingsEnum.FREQS : PostingsEnum.NONE);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.simScorer(stats, context));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      PostingsEnum docs = termsEnum.postings(null, needsScores ? PostingsEnum.FREQS : PostingsEnum.NONE);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.simScorer(stats, context));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bd3db3e8f35bef1d4d3f0411933b3190297302a","date":1485357107,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termStates == null || termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);;\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      PostingsEnum docs = termsEnum.postings(null, needsScores ? PostingsEnum.FREQS : PostingsEnum.NONE);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.simScorer(stats, context));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termStates == null || termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);;\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      PostingsEnum docs = termsEnum.postings(null, needsScores ? PostingsEnum.FREQS : PostingsEnum.NONE);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.simScorer(stats, context));\n    }\n\n","bugFix":["0ce8de354eb40085752030725cb2bee2b0ae536c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termStates == null || termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);;\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      PostingsEnum docs = termsEnum.postings(null, needsScores ? PostingsEnum.FREQS : PostingsEnum.NONE);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.simScorer(stats, context));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termStates == null || termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);;\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      PostingsEnum docs = termsEnum.postings(null, needsScores ? PostingsEnum.FREQS : PostingsEnum.NONE);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.simScorer(stats, context));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termStates == null || termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);;\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      IndexOptions indexOptions = context.reader()\n          .getFieldInfos()\n          .fieldInfo(getTerm().field())\n          .getIndexOptions();\n      PostingsEnum docs = termsEnum.postings(null, needsScores ? PostingsEnum.FREQS : PostingsEnum.NONE);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.simScorer(stats, context),\n          getMaxFreq(indexOptions, termsEnum.totalTermFreq(), termsEnum.docFreq()));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termStates == null || termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);;\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      PostingsEnum docs = termsEnum.postings(null, needsScores ? PostingsEnum.FREQS : PostingsEnum.NONE);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.simScorer(stats, context));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termStates == null || termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);;\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      IndexOptions indexOptions = context.reader()\n          .getFieldInfos()\n          .fieldInfo(getTerm().field())\n          .getIndexOptions();\n      PostingsEnum docs = termsEnum.postings(null, needsScores ? PostingsEnum.FREQS : PostingsEnum.NONE);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.simScorer(stats, context),\n          getMaxFreq(indexOptions, termsEnum.totalTermFreq(), termsEnum.docFreq()));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termStates == null || termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);;\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      PostingsEnum docs = termsEnum.postings(null, needsScores ? PostingsEnum.FREQS : PostingsEnum.NONE);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.simScorer(stats, context));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termStates == null || termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);;\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      IndexOptions indexOptions = context.reader()\n          .getFieldInfos()\n          .fieldInfo(getTerm().field())\n          .getIndexOptions();\n      PostingsEnum docs = termsEnum.postings(null, needsScores ? PostingsEnum.FREQS : PostingsEnum.NONE);\n      assert docs != null;\n      float maxFreq = getMaxFreq(indexOptions, termsEnum.totalTermFreq(), termsEnum.docFreq());\n      return new TermScorer(this, docs, new LeafSimScorer(simScorer, context.reader(), needsScores, maxFreq));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termStates == null || termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);;\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      IndexOptions indexOptions = context.reader()\n          .getFieldInfos()\n          .fieldInfo(getTerm().field())\n          .getIndexOptions();\n      PostingsEnum docs = termsEnum.postings(null, needsScores ? PostingsEnum.FREQS : PostingsEnum.NONE);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.simScorer(stats, context),\n          getMaxFreq(indexOptions, termsEnum.totalTermFreq(), termsEnum.docFreq()));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termStates == null || termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);;\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      IndexOptions indexOptions = context.reader()\n          .getFieldInfos()\n          .fieldInfo(getTerm().field())\n          .getIndexOptions();\n      PostingsEnum docs = termsEnum.postings(null, needsScores ? PostingsEnum.FREQS : PostingsEnum.NONE);\n      assert docs != null;\n      float maxFreq = getMaxFreq(indexOptions, termsEnum.totalTermFreq(), termsEnum.docFreq());\n      return new TermScorer(this, docs, new LeafSimScorer(simScorer, context.reader(), needsScores, maxFreq));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termStates == null || termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);;\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      IndexOptions indexOptions = context.reader()\n          .getFieldInfos()\n          .fieldInfo(getTerm().field())\n          .getIndexOptions();\n      PostingsEnum docs = termsEnum.postings(null, needsScores ? PostingsEnum.FREQS : PostingsEnum.NONE);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.simScorer(stats, context),\n          getMaxFreq(indexOptions, termsEnum.totalTermFreq(), termsEnum.docFreq()));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termStates == null || termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);;\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      IndexOptions indexOptions = context.reader()\n          .getFieldInfos()\n          .fieldInfo(getTerm().field())\n          .getIndexOptions();\n      float maxFreq = getMaxFreq(indexOptions, termsEnum.totalTermFreq(), termsEnum.docFreq());\n      LeafSimScorer scorer = new LeafSimScorer(simScorer, context.reader(), scoreMode.needsScores(), maxFreq);\n      return new TermScorer(this, termsEnum, scoreMode, scorer);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termStates == null || termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);;\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      IndexOptions indexOptions = context.reader()\n          .getFieldInfos()\n          .fieldInfo(getTerm().field())\n          .getIndexOptions();\n      PostingsEnum docs = termsEnum.postings(null, needsScores ? PostingsEnum.FREQS : PostingsEnum.NONE);\n      assert docs != null;\n      float maxFreq = getMaxFreq(indexOptions, termsEnum.totalTermFreq(), termsEnum.docFreq());\n      return new TermScorer(this, docs, new LeafSimScorer(simScorer, context.reader(), needsScores, maxFreq));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ea90bc076fbe82be472db33fc80b00eb0bff44f","date":1526486036,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termStates == null || termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);;\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      LeafSimScorer scorer = new LeafSimScorer(simScorer, context.reader(), term.field(), scoreMode.needsScores());\n      return new TermScorer(this, termsEnum, scoreMode, scorer);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termStates == null || termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);;\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      IndexOptions indexOptions = context.reader()\n          .getFieldInfos()\n          .fieldInfo(getTerm().field())\n          .getIndexOptions();\n      float maxFreq = getMaxFreq(indexOptions, termsEnum.totalTermFreq(), termsEnum.docFreq());\n      LeafSimScorer scorer = new LeafSimScorer(simScorer, context.reader(), scoreMode.needsScores(), maxFreq);\n      return new TermScorer(this, termsEnum, scoreMode, scorer);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f2c13220a828a78007cedb364e22dd8986ed650","date":1527233410,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termStates == null || termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);;\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      LeafSimScorer scorer = new LeafSimScorer(simScorer, context.reader(), term.field(), scoreMode.needsScores());\n      if (scoreMode == ScoreMode.TOP_SCORES) {\n        return new TermScorer(this, termsEnum.impacts(PostingsEnum.FREQS), scorer);\n      } else {\n        return new TermScorer(this, termsEnum.postings(null, PostingsEnum.FREQS), scorer);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termStates == null || termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);;\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      LeafSimScorer scorer = new LeafSimScorer(simScorer, context.reader(), term.field(), scoreMode.needsScores());\n      return new TermScorer(this, termsEnum, scoreMode, scorer);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de64cbf9e5d0d7654496d8d3d8ba8c8c8fa9a4e3","date":1533152395,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termStates == null || termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);;\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      LeafSimScorer scorer = new LeafSimScorer(simScorer, context.reader(), term.field(), scoreMode.needsScores());\n      if (scoreMode == ScoreMode.TOP_SCORES) {\n        return new TermScorer(this, termsEnum.impacts(PostingsEnum.FREQS), scorer);\n      } else {\n        return new TermScorer(this, termsEnum.postings(null, scoreMode.needsScores() ? PostingsEnum.FREQS : PostingsEnum.NONE), scorer);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      assert termStates == null || termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);;\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      LeafSimScorer scorer = new LeafSimScorer(simScorer, context.reader(), term.field(), scoreMode.needsScores());\n      if (scoreMode == ScoreMode.TOP_SCORES) {\n        return new TermScorer(this, termsEnum.impacts(PostingsEnum.FREQS), scorer);\n      } else {\n        return new TermScorer(this, termsEnum.postings(null, PostingsEnum.FREQS), scorer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["417142ff08fda9cf0b72d5133e63097a166c6458","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3bd3db3e8f35bef1d4d3f0411933b3190297302a"],"0ce8de354eb40085752030725cb2bee2b0ae536c":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"2f2c13220a828a78007cedb364e22dd8986ed650":["6ea90bc076fbe82be472db33fc80b00eb0bff44f"],"3bd3db3e8f35bef1d4d3f0411933b3190297302a":["35d7ed691d627802acc5be44a639b67b1360467b"],"35d7ed691d627802acc5be44a639b67b1360467b":["0f4464508ee83288c8c4585b533f9faaa93aa314","0ce8de354eb40085752030725cb2bee2b0ae536c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0f4464508ee83288c8c4585b533f9faaa93aa314","35d7ed691d627802acc5be44a639b67b1360467b"],"417142ff08fda9cf0b72d5133e63097a166c6458":["3bd3db3e8f35bef1d4d3f0411933b3190297302a","9fc47cb7b4346802411bb432f501ed0673d7119e"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["417142ff08fda9cf0b72d5133e63097a166c6458"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["b94236357aaa22b76c10629851fe4e376e0cea82"],"de64cbf9e5d0d7654496d8d3d8ba8c8c8fa9a4e3":["2f2c13220a828a78007cedb364e22dd8986ed650"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["3bd3db3e8f35bef1d4d3f0411933b3190297302a"],"6ea90bc076fbe82be472db33fc80b00eb0bff44f":["622a708571e534680618b3c5e0c28ac539a47776"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["de64cbf9e5d0d7654496d8d3d8ba8c8c8fa9a4e3"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["622a708571e534680618b3c5e0c28ac539a47776"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"0ce8de354eb40085752030725cb2bee2b0ae536c":["35d7ed691d627802acc5be44a639b67b1360467b"],"3bd3db3e8f35bef1d4d3f0411933b3190297302a":["598b5d23aa7c9732bf473c21a9cd309c44599394","417142ff08fda9cf0b72d5133e63097a166c6458","9fc47cb7b4346802411bb432f501ed0673d7119e"],"2f2c13220a828a78007cedb364e22dd8986ed650":["de64cbf9e5d0d7654496d8d3d8ba8c8c8fa9a4e3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["598b5d23aa7c9732bf473c21a9cd309c44599394"],"35d7ed691d627802acc5be44a639b67b1360467b":["3bd3db3e8f35bef1d4d3f0411933b3190297302a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"417142ff08fda9cf0b72d5133e63097a166c6458":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0ce8de354eb40085752030725cb2bee2b0ae536c","35d7ed691d627802acc5be44a639b67b1360467b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"622a708571e534680618b3c5e0c28ac539a47776":["6ea90bc076fbe82be472db33fc80b00eb0bff44f"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"de64cbf9e5d0d7654496d8d3d8ba8c8c8fa9a4e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6ea90bc076fbe82be472db33fc80b00eb0bff44f":["2f2c13220a828a78007cedb364e22dd8986ed650"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}