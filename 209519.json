{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int,String).mjava","commits":[{"id":"99a533edf1b9ea2c1b85e012d6e826545389e9c8","date":1329256696,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int,String).mjava","pathOld":"/dev/null","sourceNew":"  private void createCollection(String collection,\n      List<SolrServer> collectionClients, String baseUrl, int num, String shardId)\n      throws MalformedURLException, SolrServerException, IOException {\n    CommonsHttpSolrServer server = new CommonsHttpSolrServer(\n        baseUrl);\n    Create createCmd = new Create();\n    createCmd.setCoreName(collection + num);\n    createCmd.setCollection(collection);\n    createCmd.setNumShards(2);\n    createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n        + collection + num);\n    createCmd.setShardId(shardId);\n    server.request(createCmd);\n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7ea7454b4afcb5dc9f7504f83d77b134df2b7c57","7ea7454b4afcb5dc9f7504f83d77b134df2b7c57","7ea7454b4afcb5dc9f7504f83d77b134df2b7c57"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ea4018996a4853ecfb1c797beede737c90da6c3b","date":1329429759,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int,String).mjava","sourceNew":"  private void createCollection(String collection,\n      List<SolrServer> collectionClients, String baseUrl, int num, String shardId)\n      throws MalformedURLException, SolrServerException, IOException {\n    CommonsHttpSolrServer server = new CommonsHttpSolrServer(\n        baseUrl);\n    Create createCmd = new Create();\n    createCmd.setRoles(\"none\");\n    createCmd.setCoreName(collection + num);\n    createCmd.setCollection(collection);\n    createCmd.setNumShards(2);\n    createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n        + collection + num);\n    createCmd.setShardId(shardId);\n    server.request(createCmd);\n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","sourceOld":"  private void createCollection(String collection,\n      List<SolrServer> collectionClients, String baseUrl, int num, String shardId)\n      throws MalformedURLException, SolrServerException, IOException {\n    CommonsHttpSolrServer server = new CommonsHttpSolrServer(\n        baseUrl);\n    Create createCmd = new Create();\n    createCmd.setCoreName(collection + num);\n    createCmd.setCollection(collection);\n    createCmd.setNumShards(2);\n    createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n        + collection + num);\n    createCmd.setShardId(shardId);\n    server.request(createCmd);\n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8","date":1329853856,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int,String).mjava","sourceNew":"  private void createCollection(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) throws MalformedURLException, SolrServerException,\n      IOException, InterruptedException {\n    Callable call = new Callable() {\n      public Object call() {\n        CommonsHttpSolrServer server;\n        try {\n          server = new CommonsHttpSolrServer(baseUrl);\n          \n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","sourceOld":"  private void createCollection(String collection,\n      List<SolrServer> collectionClients, String baseUrl, int num, String shardId)\n      throws MalformedURLException, SolrServerException, IOException {\n    CommonsHttpSolrServer server = new CommonsHttpSolrServer(\n        baseUrl);\n    Create createCmd = new Create();\n    createCmd.setRoles(\"none\");\n    createCmd.setCoreName(collection + num);\n    createCmd.setCollection(collection);\n    createCmd.setNumShards(2);\n    createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n        + collection + num);\n    createCmd.setShardId(shardId);\n    server.request(createCmd);\n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int,String).mjava","sourceNew":"  private void createCollection(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) throws MalformedURLException, SolrServerException,\n      IOException, InterruptedException {\n    Callable call = new Callable() {\n      public Object call() {\n        CommonsHttpSolrServer server;\n        try {\n          server = new CommonsHttpSolrServer(baseUrl);\n          \n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","sourceOld":"  private void createCollection(String collection,\n      List<SolrServer> collectionClients, String baseUrl, int num, String shardId)\n      throws MalformedURLException, SolrServerException, IOException {\n    CommonsHttpSolrServer server = new CommonsHttpSolrServer(\n        baseUrl);\n    Create createCmd = new Create();\n    createCmd.setRoles(\"none\");\n    createCmd.setCoreName(collection + num);\n    createCmd.setCollection(collection);\n    createCmd.setNumShards(2);\n    createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n        + collection + num);\n    createCmd.setShardId(shardId);\n    server.request(createCmd);\n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int,String).mjava","sourceNew":"  private void createCollection(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) throws MalformedURLException, SolrServerException,\n      IOException, InterruptedException {\n    Callable call = new Callable() {\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          \n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","sourceOld":"  private void createCollection(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) throws MalformedURLException, SolrServerException,\n      IOException, InterruptedException {\n    Callable call = new Callable() {\n      public Object call() {\n        CommonsHttpSolrServer server;\n        try {\n          server = new CommonsHttpSolrServer(baseUrl);\n          \n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int,String).mjava","sourceNew":"  private void createCollection(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          \n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","sourceOld":"  private void createCollection(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) throws MalformedURLException, SolrServerException,\n      IOException, InterruptedException {\n    Callable call = new Callable() {\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          \n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","bugFix":["d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int,String).mjava","sourceNew":"  private void createCollection(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          \n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","sourceOld":"  private void createCollection(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) throws MalformedURLException, SolrServerException,\n      IOException, InterruptedException {\n    Callable call = new Callable() {\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          \n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88f39c3b3a16aebc5a91335341c7ad5b560e2277","date":1350066344,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int,String).mjava","sourceNew":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          \n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","sourceOld":"  private void createCollection(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          \n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d82832af39f94dbb58a3130fd216ff1d49435589","date":1350147242,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int,String).mjava","sourceNew":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          \n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","sourceOld":"  private void createCollection(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          \n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(String,List[SolrServer],String,int,String).mjava","sourceNew":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          \n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","sourceOld":"  private void createCollection(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      public Object call() {\n        HttpSolrServer server;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          \n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n              + collection + num);\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99a533edf1b9ea2c1b85e012d6e826545389e9c8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ea4018996a4853ecfb1c797beede737c90da6c3b":["99a533edf1b9ea2c1b85e012d6e826545389e9c8"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["ea4018996a4853ecfb1c797beede737c90da6c3b","d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8"],"d82832af39f94dbb58a3130fd216ff1d49435589":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"88f39c3b3a16aebc5a91335341c7ad5b560e2277":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8":["ea4018996a4853ecfb1c797beede737c90da6c3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["88f39c3b3a16aebc5a91335341c7ad5b560e2277"]},"commit2Childs":{"99a533edf1b9ea2c1b85e012d6e826545389e9c8":["ea4018996a4853ecfb1c797beede737c90da6c3b"],"ea4018996a4853ecfb1c797beede737c90da6c3b":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"d82832af39f94dbb58a3130fd216ff1d49435589":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99a533edf1b9ea2c1b85e012d6e826545389e9c8"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"88f39c3b3a16aebc5a91335341c7ad5b560e2277":["d82832af39f94dbb58a3130fd216ff1d49435589","db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d82832af39f94dbb58a3130fd216ff1d49435589","fe33227f6805edab2036cbb80645cc4e2d1fa424","db4fdbf3d262768eabc027cd8321edca0cd11fa8","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d82832af39f94dbb58a3130fd216ff1d49435589","fe33227f6805edab2036cbb80645cc4e2d1fa424","db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}