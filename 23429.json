{"path":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","commits":[{"id":"433777d1eaf9998136cd16515dc0e1eb26f5d535","date":1273839120,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRegularMerges() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    populateDocs(dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, getConfig());\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.optimize();\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","sourceNew":"  @Test\n  public void testRegularMerges() throws Exception {\n    Random random = newRandom();\n    Directory dir = new MockRAMDirectory();\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, getConfig(random));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.optimize();\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n  }\n\n","sourceOld":"  @Test\n  public void testRegularMerges() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    populateDocs(dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, getConfig());\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.optimize();\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","sourceNew":"  @Test\n  public void testRegularMerges() throws Exception {\n    Random random = newRandom();\n    Directory dir = newDirectory(random);\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, getConfig(random));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.optimize();\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRegularMerges() throws Exception {\n    Random random = newRandom();\n    Directory dir = new MockRAMDirectory();\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, getConfig(random));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.optimize();\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","sourceNew":"  @Test\n  public void testRegularMerges() throws Exception {\n    Directory dir = newDirectory();\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, getConfig(random));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.optimize();\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRegularMerges() throws Exception {\n    Random random = newRandom();\n    Directory dir = newDirectory(random);\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, getConfig(random));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.optimize();\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","sourceNew":"  @Test\n  public void testRegularMerges() throws Exception {\n    Directory dir = newDirectory();\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.optimize();\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRegularMerges() throws Exception {\n    Directory dir = newDirectory();\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, getConfig(random));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.optimize();\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","sourceNew":"  @Test\n  public void testRegularMerges() throws Exception {\n    Directory dir = newDirectory();\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.optimize();\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRegularMerges() throws Exception {\n    Directory dir = newDirectory();\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, getConfig(random));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.optimize();\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","sourceNew":"  @Test\n  public void testRegularMerges() throws Exception {\n    Directory dir = newDirectory();\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.optimize();\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRegularMerges() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    populateDocs(dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, getConfig());\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.optimize();\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","sourceNew":"  @Test\n  public void testRegularMerges() throws Exception {\n    Directory dir = newDirectory();\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.optimize();\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRegularMerges() throws Exception {\n    Directory dir = newDirectory();\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.optimize();\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","sourceNew":"  @Test\n  public void testRegularMerges() throws Exception {\n    Directory dir = newDirectory();\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.optimize();\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRegularMerges() throws Exception {\n    Directory dir = newDirectory();\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.optimize();\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","sourceNew":"  @Test\n  public void testRegularMerges() throws Exception {\n    Directory dir = newDirectory();\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.optimize();\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRegularMerges() throws Exception {\n    Directory dir = newDirectory();\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.optimize();\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","sourceNew":"  @Test\n  public void testRegularMerges() throws Exception {\n    Directory dir = newDirectory();\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.optimize();\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRegularMerges() throws Exception {\n    Directory dir = newDirectory();\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.optimize();\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","sourceNew":"  @Test\n  public void testRegularMerges() throws Exception {\n    Directory dir = newDirectory();\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.forceMerge(1);\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRegularMerges() throws Exception {\n    Directory dir = newDirectory();\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.optimize();\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04ecceea775208973388bb5bcc129d661ca1f9b6","date":1327925961,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","sourceNew":"  @Ignore(\"This test does not work, as PerDirPayloadProcessor is currently broken (see nocommit in SegmentMerger): \"+\n      \"SegmentReader/AtomicReader does not know its directory. This is broken, it should be a PayLoadProcessorProvider per AtomicReader!\")\n  @Test\n  public void testRegularMerges() throws Exception {\n    Directory dir = newDirectory();\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.forceMerge(1);\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRegularMerges() throws Exception {\n    Directory dir = newDirectory();\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.forceMerge(1);\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb4f1343ffbdd2b940c3cbcaa20c36c4c293e157","date":1327935362,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","sourceNew":"  @Test\n  public void testRegularMerges() throws Exception {\n    Directory dir = newDirectory();\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.forceMerge(1);\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    dir.close();\n  }\n\n","sourceOld":"  @Ignore(\"This test does not work, as PerDirPayloadProcessor is currently broken (see nocommit in SegmentMerger): \"+\n      \"SegmentReader/AtomicReader does not know its directory. This is broken, it should be a PayLoadProcessorProvider per AtomicReader!\")\n  @Test\n  public void testRegularMerges() throws Exception {\n    Directory dir = newDirectory();\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.forceMerge(1);\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f25edd3dc1b39b51d0fe10053586711547ccce1d","date":1328093500,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","sourceNew":"  @Test\n  public void testRegularMerges() throws Exception {\n    Directory dir = newDirectory();\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, ReaderPayloadProcessor> processors = new HashMap<Directory, ReaderPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.forceMerge(1);\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRegularMerges() throws Exception {\n    Directory dir = newDirectory();\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.forceMerge(1);\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#testRegularMerges().mjava","sourceNew":"  @Test\n  public void testRegularMerges() throws Exception {\n    Directory dir = newDirectory();\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, ReaderPayloadProcessor> processors = new HashMap<Directory, ReaderPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.forceMerge(1);\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRegularMerges() throws Exception {\n    Directory dir = newDirectory();\n    populateDocs(random, dir, true);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), NUM_DOCS);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n\n    // Add two source dirs. By not adding the dest dir, we ensure its payloads\n    // won't get processed.\n    Map<Directory, ReaderPayloadProcessor> processors = new HashMap<Directory, ReaderPayloadProcessor>();\n    processors.put(dir, new PerTermPayloadProcessor());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));\n    writer.forceMerge(1);\n    writer.close();\n\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p1\"), 0);\n    verifyPayloadExists(dir, \"p\", new BytesRef(\"p2\"), NUM_DOCS);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f25edd3dc1b39b51d0fe10053586711547ccce1d"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3bb13258feba31ab676502787ab2e1779f129b7a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"f25edd3dc1b39b51d0fe10053586711547ccce1d":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"04ecceea775208973388bb5bcc129d661ca1f9b6":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["433777d1eaf9998136cd16515dc0e1eb26f5d535","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"fb4f1343ffbdd2b940c3cbcaa20c36c4c293e157":["04ecceea775208973388bb5bcc129d661ca1f9b6"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"433777d1eaf9998136cd16515dc0e1eb26f5d535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["433777d1eaf9998136cd16515dc0e1eb26f5d535"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1f653cfcf159baeaafe5d01682a911e95bba4012","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["1f653cfcf159baeaafe5d01682a911e95bba4012"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"f25edd3dc1b39b51d0fe10053586711547ccce1d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["f25edd3dc1b39b51d0fe10053586711547ccce1d","04ecceea775208973388bb5bcc129d661ca1f9b6"],"04ecceea775208973388bb5bcc129d661ca1f9b6":["fb4f1343ffbdd2b940c3cbcaa20c36c4c293e157"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"fb4f1343ffbdd2b940c3cbcaa20c36c4c293e157":[],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d14e8d18c0e3970c20354dbeeb49da11bd587fbd","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["433777d1eaf9998136cd16515dc0e1eb26f5d535"],"433777d1eaf9998136cd16515dc0e1eb26f5d535":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"3bb13258feba31ab676502787ab2e1779f129b7a":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","fb4f1343ffbdd2b940c3cbcaa20c36c4c293e157","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}