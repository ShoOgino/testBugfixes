{"path":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocumentList(String,SolrDocumentList,Set[String],Map).mjava","commits":[{"id":"c72bf2bc3472b7a18bcd6b95f91ccd4056a11774","date":1295386233,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocumentList(String,SolrDocumentList,Set[String],Map).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeSolrDocumentList(String name, SolrDocumentList docs, Set<String> fields, Map otherFields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz = docs.size();\n\n    writeMapOpener(includeScore ? 4 : 3);\n\n    writeKey(\"numFound\",false);\n    writeLong(null,docs.getNumFound());\n\n    writeKey(\"start\",false);\n    writeLong(null,docs.getStart());\n\n    if (includeScore && docs.getMaxScore() != null) {\n      writeKey(\"maxScore\",false);\n      writeFloat(null,docs.getMaxScore());\n    }\n\n    writeKey(\"docs\",false);\n\n    writeArrayOpener(sz);\n    for (int i=0; i<sz; i++) {\n      writeKey(i, false);\n      writeSolrDocument(null, docs.get(i), fields, otherFields);\n    }\n    writeArrayCloser();\n\n    if (otherFields !=null) {\n      writeMap(null, otherFields, true, false);\n    }\n    writeMapCloser();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocumentList(String,SolrDocumentList,Set[String],Map).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeSolrDocumentList(String name, SolrDocumentList docs, Set<String> fields, Map otherFields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz = docs.size();\n\n    writeMapOpener(includeScore ? 4 : 3);\n\n    writeKey(\"numFound\",false);\n    writeLong(null,docs.getNumFound());\n\n    writeKey(\"start\",false);\n    writeLong(null,docs.getStart());\n\n    if (includeScore && docs.getMaxScore() != null) {\n      writeKey(\"maxScore\",false);\n      writeFloat(null,docs.getMaxScore());\n    }\n\n    writeKey(\"docs\",false);\n\n    writeArrayOpener(sz);\n    for (int i=0; i<sz; i++) {\n      writeKey(i, false);\n      writeSolrDocument(null, docs.get(i), fields, otherFields);\n    }\n    writeArrayCloser();\n\n    if (otherFields !=null) {\n      writeMap(null, otherFields, true, false);\n    }\n    writeMapCloser();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocumentList(String,SolrDocumentList,Set[String],Map).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeSolrDocumentList(String name, SolrDocumentList docs, Set<String> fields, Map otherFields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz = docs.size();\n\n    writeMapOpener(includeScore ? 4 : 3);\n\n    writeKey(\"numFound\",false);\n    writeLong(null,docs.getNumFound());\n\n    writeKey(\"start\",false);\n    writeLong(null,docs.getStart());\n\n    if (includeScore && docs.getMaxScore() != null) {\n      writeKey(\"maxScore\",false);\n      writeFloat(null,docs.getMaxScore());\n    }\n\n    writeKey(\"docs\",false);\n\n    writeArrayOpener(sz);\n    for (int i=0; i<sz; i++) {\n      writeKey(i, false);\n      writeSolrDocument(null, docs.get(i), fields, otherFields);\n    }\n    writeArrayCloser();\n\n    if (otherFields !=null) {\n      writeMap(null, otherFields, true, false);\n    }\n    writeMapCloser();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aedf81f068e430dec27d94310415cc6ff52731c","date":1301070261,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocumentList(String,SolrDocumentList,Set[String],Map).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeSolrDocumentList(String name, SolrDocumentList docs, Set<String> fields, Map otherFields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz = docs.size();\n\n    writeMapOpener(includeScore ? 4 : 3);\n\n    writeKey(\"numFound\",false);\n    writeLong(null,docs.getNumFound());\n\n    writeKey(\"start\",false);\n    writeLong(null,docs.getStart());\n\n    if (includeScore && docs.getMaxScore() != null) {\n      writeKey(\"maxScore\",false);\n      writeFloat(null,docs.getMaxScore());\n    }\n\n    writeKey(\"docs\",false);\n\n    writeArrayOpener(sz);\n    for (int i=0; i<sz; i++) {\n      writeKey(i, false);\n      writeSolrDocument(null, docs.get(i), fields, otherFields);\n    }\n    writeArrayCloser();\n\n    if (otherFields !=null) {\n      writeMap(null, otherFields, true, false);\n    }\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocumentList(String,SolrDocumentList,Set[String],Map).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeSolrDocumentList(String name, SolrDocumentList docs, Set<String> fields, Map otherFields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz = docs.size();\n\n    writeMapOpener(includeScore ? 4 : 3);\n\n    writeKey(\"numFound\",false);\n    writeLong(null,docs.getNumFound());\n\n    writeKey(\"start\",false);\n    writeLong(null,docs.getStart());\n\n    if (includeScore && docs.getMaxScore() != null) {\n      writeKey(\"maxScore\",false);\n      writeFloat(null,docs.getMaxScore());\n    }\n\n    writeKey(\"docs\",false);\n\n    writeArrayOpener(sz);\n    for (int i=0; i<sz; i++) {\n      writeKey(i, false);\n      writeSolrDocument(null, docs.get(i), fields, otherFields);\n    }\n    writeArrayCloser();\n\n    if (otherFields !=null) {\n      writeMap(null, otherFields, true, false);\n    }\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocumentList(String,SolrDocumentList,Set[String],Map).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeSolrDocumentList(String name, SolrDocumentList docs, Set<String> fields, Map otherFields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz = docs.size();\n\n    writeMapOpener(includeScore ? 4 : 3);\n\n    writeKey(\"numFound\",false);\n    writeLong(null,docs.getNumFound());\n\n    writeKey(\"start\",false);\n    writeLong(null,docs.getStart());\n\n    if (includeScore && docs.getMaxScore() != null) {\n      writeKey(\"maxScore\",false);\n      writeFloat(null,docs.getMaxScore());\n    }\n\n    writeKey(\"docs\",false);\n\n    writeArrayOpener(sz);\n    for (int i=0; i<sz; i++) {\n      writeKey(i, false);\n      writeSolrDocument(null, docs.get(i), fields, otherFields);\n    }\n    writeArrayCloser();\n\n    if (otherFields !=null) {\n      writeMap(null, otherFields, true, false);\n    }\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["e79a6d080bdd5b2a8f56342cf571b5476de04180","6aedf81f068e430dec27d94310415cc6ff52731c"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","6aedf81f068e430dec27d94310415cc6ff52731c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c72bf2bc3472b7a18bcd6b95f91ccd4056a11774"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c72bf2bc3472b7a18bcd6b95f91ccd4056a11774"],"6aedf81f068e430dec27d94310415cc6ff52731c":["c72bf2bc3472b7a18bcd6b95f91ccd4056a11774"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6aedf81f068e430dec27d94310415cc6ff52731c"],"c72bf2bc3472b7a18bcd6b95f91ccd4056a11774":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","c72bf2bc3472b7a18bcd6b95f91ccd4056a11774"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"6aedf81f068e430dec27d94310415cc6ff52731c":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c72bf2bc3472b7a18bcd6b95f91ccd4056a11774":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","6aedf81f068e430dec27d94310415cc6ff52731c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}