{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(ZkSolrResourceLoader,int,String,byte[],boolean).mjava","commits":[{"id":"45a5f13e4e6b3c60912dc0911227739fe2f371c2","date":1420449490,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(ZkSolrResourceLoader,int,String,byte[],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(SolrResourceLoader,int,String,byte[],boolean).mjava","sourceNew":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static boolean persistConfigResourceToZooKeeper( ZkSolrResourceLoader zkLoader, int znodeVersion ,\n                                                          String resourceName, byte[] content,\n                                                          boolean createIfNotExists) {\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - old {1}\";\n    try {\n      try {\n        zkClient.setData(resourceLocation , content,znodeVersion, true);\n        touchConfDir(zkLoader);\n      } catch (NoNodeException e) {\n        if(createIfNotExists){\n          try {\n            zkClient.create(resourceLocation,content, CreateMode.PERSISTENT,true);\n            touchConfDir(zkLoader);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              log.info(\"failed to set data version in zk is {0} and expected version is {1} \", stat.getVersion(),znodeVersion);\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            log.info(MessageFormat.format(errMsg,resourceLocation,znodeVersion));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg,resourceLocation,znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve){\n      int v = -1;\n      try {\n        Stat stat = zkClient.exists(resourceLocation, null, true);\n        v = stat.getVersion();\n      } catch (Exception e) {\n        log.error(e.getMessage());\n\n      }\n      log.info(MessageFormat.format(errMsg+ \" zkVersion= \"+v,resourceLocation,znodeVersion));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg,resourceLocation,znodeVersion) + \", retry.\");\n    }catch (ResourceModifiedInZkException e){\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static boolean persistConfigResourceToZooKeeper( SolrResourceLoader loader, int znodeVersion ,\n                                                          String resourceName, byte[] content,\n                                                          boolean createIfNotExists) {\n    final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - old {1}\";\n    try {\n      try {\n        zkClient.setData(resourceLocation , content,znodeVersion, true);\n        zkClient.setData(zkLoader.getConfigSetZkPath(),new byte[]{0},true);\n      } catch (NoNodeException e) {\n        if(createIfNotExists){\n          try {\n            zkClient.create(resourceLocation,content, CreateMode.PERSISTENT,true);\n            zkClient.setData(zkLoader.getConfigSetZkPath(), new byte[]{0}, true);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              log.info(\"failed to set data version in zk is {0} and expected version is {1} \", stat.getVersion(),znodeVersion);\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            log.info(MessageFormat.format(errMsg,resourceLocation,znodeVersion));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg,resourceLocation,znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve){\n      int v = -1;\n      try {\n        Stat stat = zkClient.exists(resourceLocation, null, true);\n        v = stat.getVersion();\n      } catch (Exception e) {\n        log.error(e.getMessage());\n\n      }\n      log.info(MessageFormat.format(errMsg+ \" zkVersion= \"+v,resourceLocation,znodeVersion));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg,resourceLocation,znodeVersion) + \", retry.\");\n    }catch (ResourceModifiedInZkException e){\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be214850f18c80408bcfafd463ec155ab0515aee","date":1423651203,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(ZkSolrResourceLoader,int,String,byte[],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(ZkSolrResourceLoader,int,String,byte[],boolean).mjava","sourceNew":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static boolean persistConfigResourceToZooKeeper(ZkSolrResourceLoader zkLoader, int znodeVersion,\n                                                         String resourceName, byte[] content,\n                                                         boolean createIfNotExists) {\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - old {1}\";\n    try {\n      try {\n        zkClient.setData(resourceLocation, content, znodeVersion, true);\n        log.info(\"Persisted config data to node {} \", resourceLocation);\n        touchConfDir(zkLoader);\n      } catch (NoNodeException e) {\n        if (createIfNotExists) {\n          try {\n            zkClient.create(resourceLocation, content, CreateMode.PERSISTENT, true);\n            touchConfDir(zkLoader);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              log.info(\"failed to set data version in zk is {0} and expected version is {1} \", stat.getVersion(), znodeVersion);\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            log.info(MessageFormat.format(errMsg, resourceLocation, znodeVersion));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve) {\n      int v = -1;\n      try {\n        Stat stat = zkClient.exists(resourceLocation, null, true);\n        v = stat.getVersion();\n      } catch (Exception e) {\n        log.error(e.getMessage());\n\n      }\n      log.info(MessageFormat.format(errMsg + \" zkVersion= \" + v, resourceLocation, znodeVersion));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n    } catch (ResourceModifiedInZkException e) {\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static boolean persistConfigResourceToZooKeeper( ZkSolrResourceLoader zkLoader, int znodeVersion ,\n                                                          String resourceName, byte[] content,\n                                                          boolean createIfNotExists) {\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - old {1}\";\n    try {\n      try {\n        zkClient.setData(resourceLocation , content,znodeVersion, true);\n        touchConfDir(zkLoader);\n      } catch (NoNodeException e) {\n        if(createIfNotExists){\n          try {\n            zkClient.create(resourceLocation,content, CreateMode.PERSISTENT,true);\n            touchConfDir(zkLoader);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              log.info(\"failed to set data version in zk is {0} and expected version is {1} \", stat.getVersion(),znodeVersion);\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            log.info(MessageFormat.format(errMsg,resourceLocation,znodeVersion));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg,resourceLocation,znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve){\n      int v = -1;\n      try {\n        Stat stat = zkClient.exists(resourceLocation, null, true);\n        v = stat.getVersion();\n      } catch (Exception e) {\n        log.error(e.getMessage());\n\n      }\n      log.info(MessageFormat.format(errMsg+ \" zkVersion= \"+v,resourceLocation,znodeVersion));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg,resourceLocation,znodeVersion) + \", retry.\");\n    }catch (ResourceModifiedInZkException e){\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bdb19206b4aeab66b9fb393c53969f44bdd48be","date":1426629125,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(ZkSolrResourceLoader,int,String,byte[],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(ZkSolrResourceLoader,int,String,byte[],boolean).mjava","sourceNew":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static boolean persistConfigResourceToZooKeeper(ZkSolrResourceLoader zkLoader, int znodeVersion,\n                                                         String resourceName, byte[] content,\n                                                         boolean createIfNotExists) {\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - old {1}\";\n    try {\n      try {\n        zkClient.setData(resourceLocation, content, znodeVersion, true);\n        log.info(\"Persisted config data to node {} \", resourceLocation);\n        touchConfDir(zkLoader);\n      } catch (NoNodeException e) {\n        if (createIfNotExists) {\n          try {\n            zkClient.create(resourceLocation, content, CreateMode.PERSISTENT, true);\n            touchConfDir(zkLoader);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              log.info(\"failed to set data version in zk is {0} and expected version is {1} \", stat.getVersion(), znodeVersion);\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            log.info(StrUtils.formatString(errMsg, resourceLocation, znodeVersion));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve) {\n      int v = -1;\n      try {\n        Stat stat = zkClient.exists(resourceLocation, null, true);\n        v = stat.getVersion();\n      } catch (Exception e) {\n        log.error(e.getMessage());\n\n      }\n      log.info(StrUtils.formatString(errMsg + \" zkVersion= \" + v, resourceLocation, znodeVersion));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n    } catch (ResourceModifiedInZkException e) {\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static boolean persistConfigResourceToZooKeeper(ZkSolrResourceLoader zkLoader, int znodeVersion,\n                                                         String resourceName, byte[] content,\n                                                         boolean createIfNotExists) {\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - old {1}\";\n    try {\n      try {\n        zkClient.setData(resourceLocation, content, znodeVersion, true);\n        log.info(\"Persisted config data to node {} \", resourceLocation);\n        touchConfDir(zkLoader);\n      } catch (NoNodeException e) {\n        if (createIfNotExists) {\n          try {\n            zkClient.create(resourceLocation, content, CreateMode.PERSISTENT, true);\n            touchConfDir(zkLoader);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              log.info(\"failed to set data version in zk is {0} and expected version is {1} \", stat.getVersion(), znodeVersion);\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            log.info(MessageFormat.format(errMsg, resourceLocation, znodeVersion));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve) {\n      int v = -1;\n      try {\n        Stat stat = zkClient.exists(resourceLocation, null, true);\n        v = stat.getVersion();\n      } catch (Exception e) {\n        log.error(e.getMessage());\n\n      }\n      log.info(MessageFormat.format(errMsg + \" zkVersion= \" + v, resourceLocation, znodeVersion));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n    } catch (ResourceModifiedInZkException e) {\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(ZkSolrResourceLoader,int,String,byte[],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(ZkSolrResourceLoader,int,String,byte[],boolean).mjava","sourceNew":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static boolean persistConfigResourceToZooKeeper(ZkSolrResourceLoader zkLoader, int znodeVersion,\n                                                         String resourceName, byte[] content,\n                                                         boolean createIfNotExists) {\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - old {1}\";\n    try {\n      try {\n        zkClient.setData(resourceLocation, content, znodeVersion, true);\n        log.info(\"Persisted config data to node {} \", resourceLocation);\n        touchConfDir(zkLoader);\n      } catch (NoNodeException e) {\n        if (createIfNotExists) {\n          try {\n            zkClient.create(resourceLocation, content, CreateMode.PERSISTENT, true);\n            touchConfDir(zkLoader);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              log.info(\"failed to set data version in zk is {0} and expected version is {1} \", stat.getVersion(), znodeVersion);\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            log.info(StrUtils.formatString(errMsg, resourceLocation, znodeVersion));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve) {\n      int v = -1;\n      try {\n        Stat stat = zkClient.exists(resourceLocation, null, true);\n        v = stat.getVersion();\n      } catch (Exception e) {\n        log.error(e.getMessage());\n\n      }\n      log.info(StrUtils.formatString(errMsg + \" zkVersion= \" + v, resourceLocation, znodeVersion));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n    } catch (ResourceModifiedInZkException e) {\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static boolean persistConfigResourceToZooKeeper(ZkSolrResourceLoader zkLoader, int znodeVersion,\n                                                         String resourceName, byte[] content,\n                                                         boolean createIfNotExists) {\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - old {1}\";\n    try {\n      try {\n        zkClient.setData(resourceLocation, content, znodeVersion, true);\n        log.info(\"Persisted config data to node {} \", resourceLocation);\n        touchConfDir(zkLoader);\n      } catch (NoNodeException e) {\n        if (createIfNotExists) {\n          try {\n            zkClient.create(resourceLocation, content, CreateMode.PERSISTENT, true);\n            touchConfDir(zkLoader);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              log.info(\"failed to set data version in zk is {0} and expected version is {1} \", stat.getVersion(), znodeVersion);\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            log.info(MessageFormat.format(errMsg, resourceLocation, znodeVersion));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve) {\n      int v = -1;\n      try {\n        Stat stat = zkClient.exists(resourceLocation, null, true);\n        v = stat.getVersion();\n      } catch (Exception e) {\n        log.error(e.getMessage());\n\n      }\n      log.info(MessageFormat.format(errMsg + \" zkVersion= \" + v, resourceLocation, znodeVersion));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, MessageFormat.format(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n    } catch (ResourceModifiedInZkException e) {\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"389d072b64597cdcf75c2d536aaec3e8afe3393f","date":1427818698,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(ZkSolrResourceLoader,int,String,byte[],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(ZkSolrResourceLoader,int,String,byte[],boolean).mjava","sourceNew":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static int persistConfigResourceToZooKeeper(ZkSolrResourceLoader zkLoader, int znodeVersion,\n                                                         String resourceName, byte[] content,\n                                                         boolean createIfNotExists) {\n    int latestVersion = znodeVersion;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - old {1}\";\n    try {\n      try {\n        zkClient.setData(resourceLocation, content, znodeVersion, true);\n        latestVersion = znodeVersion + 1;// if the set succeeded , it should have incremented the version by one always\n        log.info(\"Persisted config data to node {} \", resourceLocation);\n        touchConfDir(zkLoader);\n      } catch (NoNodeException e) {\n        if (createIfNotExists) {\n          try {\n            zkClient.create(resourceLocation, content, CreateMode.PERSISTENT, true);\n            latestVersion = 0;//just created so version must be zero\n            touchConfDir(zkLoader);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              log.info(\"failed to set data version in zk is {} and expected version is {} \", stat.getVersion(), znodeVersion);\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            log.info(StrUtils.formatString(errMsg, resourceLocation, znodeVersion));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve) {\n      int v = -1;\n      try {\n        Stat stat = zkClient.exists(resourceLocation, null, true);\n        v = stat.getVersion();\n      } catch (Exception e) {\n        log.error(e.getMessage());\n\n      }\n      log.info(StrUtils.formatString(errMsg + \" zkVersion= \" + v, resourceLocation, znodeVersion));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n    } catch (ResourceModifiedInZkException e) {\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return latestVersion;\n  }\n\n","sourceOld":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static boolean persistConfigResourceToZooKeeper(ZkSolrResourceLoader zkLoader, int znodeVersion,\n                                                         String resourceName, byte[] content,\n                                                         boolean createIfNotExists) {\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - old {1}\";\n    try {\n      try {\n        zkClient.setData(resourceLocation, content, znodeVersion, true);\n        log.info(\"Persisted config data to node {} \", resourceLocation);\n        touchConfDir(zkLoader);\n      } catch (NoNodeException e) {\n        if (createIfNotExists) {\n          try {\n            zkClient.create(resourceLocation, content, CreateMode.PERSISTENT, true);\n            touchConfDir(zkLoader);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              log.info(\"failed to set data version in zk is {0} and expected version is {1} \", stat.getVersion(), znodeVersion);\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            log.info(StrUtils.formatString(errMsg, resourceLocation, znodeVersion));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve) {\n      int v = -1;\n      try {\n        Stat stat = zkClient.exists(resourceLocation, null, true);\n        v = stat.getVersion();\n      } catch (Exception e) {\n        log.error(e.getMessage());\n\n      }\n      log.info(StrUtils.formatString(errMsg + \" zkVersion= \" + v, resourceLocation, znodeVersion));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n    } catch (ResourceModifiedInZkException e) {\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(ZkSolrResourceLoader,int,String,byte[],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(ZkSolrResourceLoader,int,String,byte[],boolean).mjava","sourceNew":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static int persistConfigResourceToZooKeeper(ZkSolrResourceLoader zkLoader, int znodeVersion,\n                                                         String resourceName, byte[] content,\n                                                         boolean createIfNotExists) {\n    int latestVersion = znodeVersion;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - old {1}\";\n    try {\n      try {\n        zkClient.setData(resourceLocation, content, znodeVersion, true);\n        latestVersion = znodeVersion + 1;// if the set succeeded , it should have incremented the version by one always\n        log.info(\"Persisted config data to node {} \", resourceLocation);\n        touchConfDir(zkLoader);\n      } catch (NoNodeException e) {\n        if (createIfNotExists) {\n          try {\n            zkClient.create(resourceLocation, content, CreateMode.PERSISTENT, true);\n            latestVersion = 0;//just created so version must be zero\n            touchConfDir(zkLoader);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              log.info(\"failed to set data version in zk is {} and expected version is {} \", stat.getVersion(), znodeVersion);\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            log.info(StrUtils.formatString(errMsg, resourceLocation, znodeVersion));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve) {\n      int v = -1;\n      try {\n        Stat stat = zkClient.exists(resourceLocation, null, true);\n        v = stat.getVersion();\n      } catch (Exception e) {\n        log.error(e.getMessage());\n\n      }\n      log.info(StrUtils.formatString(errMsg + \" zkVersion= \" + v, resourceLocation, znodeVersion));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n    } catch (ResourceModifiedInZkException e) {\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return latestVersion;\n  }\n\n","sourceOld":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static boolean persistConfigResourceToZooKeeper(ZkSolrResourceLoader zkLoader, int znodeVersion,\n                                                         String resourceName, byte[] content,\n                                                         boolean createIfNotExists) {\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - old {1}\";\n    try {\n      try {\n        zkClient.setData(resourceLocation, content, znodeVersion, true);\n        log.info(\"Persisted config data to node {} \", resourceLocation);\n        touchConfDir(zkLoader);\n      } catch (NoNodeException e) {\n        if (createIfNotExists) {\n          try {\n            zkClient.create(resourceLocation, content, CreateMode.PERSISTENT, true);\n            touchConfDir(zkLoader);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              log.info(\"failed to set data version in zk is {0} and expected version is {1} \", stat.getVersion(), znodeVersion);\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            log.info(StrUtils.formatString(errMsg, resourceLocation, znodeVersion));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve) {\n      int v = -1;\n      try {\n        Stat stat = zkClient.exists(resourceLocation, null, true);\n        v = stat.getVersion();\n      } catch (Exception e) {\n        log.error(e.getMessage());\n\n      }\n      log.info(StrUtils.formatString(errMsg + \" zkVersion= \" + v, resourceLocation, znodeVersion));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n    } catch (ResourceModifiedInZkException e) {\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"734d38d5abe4f98cce936b31450702d597f6fc69","date":1467794285,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(ZkSolrResourceLoader,int,String,byte[],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(ZkSolrResourceLoader,int,String,byte[],boolean).mjava","sourceNew":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static int persistConfigResourceToZooKeeper(ZkSolrResourceLoader zkLoader, int znodeVersion,\n                                                         String resourceName, byte[] content,\n                                                         boolean createIfNotExists) {\n    int latestVersion = znodeVersion;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - old {1}\";\n    try {\n      try {\n        Stat stat = zkClient.setData(resourceLocation, content, znodeVersion, true);\n        latestVersion = stat.getVersion();// if the set succeeded , it should have incremented the version by one always\n        log.info(\"Persisted config data to node {} \", resourceLocation);\n        touchConfDir(zkLoader);\n      } catch (NoNodeException e) {\n        if (createIfNotExists) {\n          try {\n            zkClient.create(resourceLocation, content, CreateMode.PERSISTENT, true);\n            latestVersion = 0;//just created so version must be zero\n            touchConfDir(zkLoader);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              log.info(\"failed to set data version in zk is {} and expected version is {} \", stat.getVersion(), znodeVersion);\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            log.info(StrUtils.formatString(errMsg, resourceLocation, znodeVersion));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve) {\n      int v = -1;\n      try {\n        Stat stat = zkClient.exists(resourceLocation, null, true);\n        v = stat.getVersion();\n      } catch (Exception e) {\n        log.error(e.getMessage());\n\n      }\n      log.info(StrUtils.formatString(errMsg + \" zkVersion= \" + v, resourceLocation, znodeVersion));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n    } catch (ResourceModifiedInZkException e) {\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return latestVersion;\n  }\n\n","sourceOld":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static int persistConfigResourceToZooKeeper(ZkSolrResourceLoader zkLoader, int znodeVersion,\n                                                         String resourceName, byte[] content,\n                                                         boolean createIfNotExists) {\n    int latestVersion = znodeVersion;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - old {1}\";\n    try {\n      try {\n        zkClient.setData(resourceLocation, content, znodeVersion, true);\n        latestVersion = znodeVersion + 1;// if the set succeeded , it should have incremented the version by one always\n        log.info(\"Persisted config data to node {} \", resourceLocation);\n        touchConfDir(zkLoader);\n      } catch (NoNodeException e) {\n        if (createIfNotExists) {\n          try {\n            zkClient.create(resourceLocation, content, CreateMode.PERSISTENT, true);\n            latestVersion = 0;//just created so version must be zero\n            touchConfDir(zkLoader);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              log.info(\"failed to set data version in zk is {} and expected version is {} \", stat.getVersion(), znodeVersion);\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            log.info(StrUtils.formatString(errMsg, resourceLocation, znodeVersion));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve) {\n      int v = -1;\n      try {\n        Stat stat = zkClient.exists(resourceLocation, null, true);\n        v = stat.getVersion();\n      } catch (Exception e) {\n        log.error(e.getMessage());\n\n      }\n      log.info(StrUtils.formatString(errMsg + \" zkVersion= \" + v, resourceLocation, znodeVersion));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n    } catch (ResourceModifiedInZkException e) {\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return latestVersion;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(ZkSolrResourceLoader,int,String,byte[],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(ZkSolrResourceLoader,int,String,byte[],boolean).mjava","sourceNew":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static int persistConfigResourceToZooKeeper(ZkSolrResourceLoader zkLoader, int znodeVersion,\n                                                         String resourceName, byte[] content,\n                                                         boolean createIfNotExists) {\n    int latestVersion = znodeVersion;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - old {1}\";\n    try {\n      try {\n        Stat stat = zkClient.setData(resourceLocation, content, znodeVersion, true);\n        latestVersion = stat.getVersion();// if the set succeeded , it should have incremented the version by one always\n        log.info(\"Persisted config data to node {} \", resourceLocation);\n        touchConfDir(zkLoader);\n      } catch (NoNodeException e) {\n        if (createIfNotExists) {\n          try {\n            zkClient.create(resourceLocation, content, CreateMode.PERSISTENT, true);\n            latestVersion = 0;//just created so version must be zero\n            touchConfDir(zkLoader);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              log.debug(\"failed to set data version in zk is {} and expected version is {} \", stat.getVersion(), znodeVersion);\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            log.info(StrUtils.formatString(errMsg, resourceLocation, znodeVersion));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve) {\n      int v = -1;\n      try {\n        Stat stat = zkClient.exists(resourceLocation, null, true);\n        v = stat.getVersion();\n      } catch (Exception e) {\n        log.error(e.getMessage());\n\n      }\n      log.info(StrUtils.formatString(errMsg + \" zkVersion= \" + v, resourceLocation, znodeVersion));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n    } catch (ResourceModifiedInZkException e) {\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return latestVersion;\n  }\n\n","sourceOld":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static int persistConfigResourceToZooKeeper(ZkSolrResourceLoader zkLoader, int znodeVersion,\n                                                         String resourceName, byte[] content,\n                                                         boolean createIfNotExists) {\n    int latestVersion = znodeVersion;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - old {1}\";\n    try {\n      try {\n        Stat stat = zkClient.setData(resourceLocation, content, znodeVersion, true);\n        latestVersion = stat.getVersion();// if the set succeeded , it should have incremented the version by one always\n        log.info(\"Persisted config data to node {} \", resourceLocation);\n        touchConfDir(zkLoader);\n      } catch (NoNodeException e) {\n        if (createIfNotExists) {\n          try {\n            zkClient.create(resourceLocation, content, CreateMode.PERSISTENT, true);\n            latestVersion = 0;//just created so version must be zero\n            touchConfDir(zkLoader);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              log.info(\"failed to set data version in zk is {} and expected version is {} \", stat.getVersion(), znodeVersion);\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            log.info(StrUtils.formatString(errMsg, resourceLocation, znodeVersion));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve) {\n      int v = -1;\n      try {\n        Stat stat = zkClient.exists(resourceLocation, null, true);\n        v = stat.getVersion();\n      } catch (Exception e) {\n        log.error(e.getMessage());\n\n      }\n      log.info(StrUtils.formatString(errMsg + \" zkVersion= \" + v, resourceLocation, znodeVersion));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n    } catch (ResourceModifiedInZkException e) {\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return latestVersion;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(ZkSolrResourceLoader,int,String,byte[],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(ZkSolrResourceLoader,int,String,byte[],boolean).mjava","sourceNew":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static int persistConfigResourceToZooKeeper(ZkSolrResourceLoader zkLoader, int znodeVersion,\n                                                         String resourceName, byte[] content,\n                                                         boolean createIfNotExists) {\n    int latestVersion = znodeVersion;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - old {1}\";\n    try {\n      try {\n        Stat stat = zkClient.setData(resourceLocation, content, znodeVersion, true);\n        latestVersion = stat.getVersion();// if the set succeeded , it should have incremented the version by one always\n        log.info(\"Persisted config data to node {} \", resourceLocation);\n        touchConfDir(zkLoader);\n      } catch (NoNodeException e) {\n        if (createIfNotExists) {\n          try {\n            zkClient.create(resourceLocation, content, CreateMode.PERSISTENT, true);\n            latestVersion = 0;//just created so version must be zero\n            touchConfDir(zkLoader);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              log.debug(\"failed to set data version in zk is {} and expected version is {} \", stat.getVersion(), znodeVersion);\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            log.info(StrUtils.formatString(errMsg, resourceLocation, znodeVersion));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve) {\n      int v = -1;\n      try {\n        Stat stat = zkClient.exists(resourceLocation, null, true);\n        v = stat.getVersion();\n      } catch (Exception e) {\n        log.error(e.getMessage());\n\n      }\n      log.info(StrUtils.formatString(errMsg + \" zkVersion= \" + v, resourceLocation, znodeVersion));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n    } catch (ResourceModifiedInZkException e) {\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return latestVersion;\n  }\n\n","sourceOld":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static int persistConfigResourceToZooKeeper(ZkSolrResourceLoader zkLoader, int znodeVersion,\n                                                         String resourceName, byte[] content,\n                                                         boolean createIfNotExists) {\n    int latestVersion = znodeVersion;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - old {1}\";\n    try {\n      try {\n        Stat stat = zkClient.setData(resourceLocation, content, znodeVersion, true);\n        latestVersion = stat.getVersion();// if the set succeeded , it should have incremented the version by one always\n        log.info(\"Persisted config data to node {} \", resourceLocation);\n        touchConfDir(zkLoader);\n      } catch (NoNodeException e) {\n        if (createIfNotExists) {\n          try {\n            zkClient.create(resourceLocation, content, CreateMode.PERSISTENT, true);\n            latestVersion = 0;//just created so version must be zero\n            touchConfDir(zkLoader);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              log.info(\"failed to set data version in zk is {} and expected version is {} \", stat.getVersion(), znodeVersion);\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            log.info(StrUtils.formatString(errMsg, resourceLocation, znodeVersion));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve) {\n      int v = -1;\n      try {\n        Stat stat = zkClient.exists(resourceLocation, null, true);\n        v = stat.getVersion();\n      } catch (Exception e) {\n        log.error(e.getMessage());\n\n      }\n      log.info(StrUtils.formatString(errMsg + \" zkVersion= \" + v, resourceLocation, znodeVersion));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n    } catch (ResourceModifiedInZkException e) {\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return latestVersion;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(ZkSolrResourceLoader,int,String,byte[],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(ZkSolrResourceLoader,int,String,byte[],boolean).mjava","sourceNew":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static int persistConfigResourceToZooKeeper(ZkSolrResourceLoader zkLoader, int znodeVersion,\n                                                         String resourceName, byte[] content,\n                                                         boolean createIfNotExists) {\n    int latestVersion = znodeVersion;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - old {1}\";\n    try {\n      try {\n        Stat stat = zkClient.setData(resourceLocation, content, znodeVersion, true);\n        latestVersion = stat.getVersion();// if the set succeeded , it should have incremented the version by one always\n        log.info(\"Persisted config data to node {} \", resourceLocation);\n        touchConfDir(zkLoader);\n      } catch (NoNodeException e) {\n        if (createIfNotExists) {\n          try {\n            zkClient.create(resourceLocation, content, CreateMode.PERSISTENT, true);\n            latestVersion = 0;//just created so version must be zero\n            touchConfDir(zkLoader);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              log.debug(\"failed to set data version in zk is {} and expected version is {} \", stat.getVersion(), znodeVersion);\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            log.info(StrUtils.formatString(errMsg, resourceLocation, znodeVersion));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve) {\n      int v = -1;\n      try {\n        Stat stat = zkClient.exists(resourceLocation, null, true);\n        v = stat.getVersion();\n      } catch (Exception e) {\n        log.error(e.getMessage());\n\n      }\n      log.info(StrUtils.formatString(errMsg + \" zkVersion= \" + v, resourceLocation, znodeVersion));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n    } catch (ResourceModifiedInZkException e) {\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return latestVersion;\n  }\n\n","sourceOld":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static int persistConfigResourceToZooKeeper(ZkSolrResourceLoader zkLoader, int znodeVersion,\n                                                         String resourceName, byte[] content,\n                                                         boolean createIfNotExists) {\n    int latestVersion = znodeVersion;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - old {1}\";\n    try {\n      try {\n        zkClient.setData(resourceLocation, content, znodeVersion, true);\n        latestVersion = znodeVersion + 1;// if the set succeeded , it should have incremented the version by one always\n        log.info(\"Persisted config data to node {} \", resourceLocation);\n        touchConfDir(zkLoader);\n      } catch (NoNodeException e) {\n        if (createIfNotExists) {\n          try {\n            zkClient.create(resourceLocation, content, CreateMode.PERSISTENT, true);\n            latestVersion = 0;//just created so version must be zero\n            touchConfDir(zkLoader);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              log.info(\"failed to set data version in zk is {} and expected version is {} \", stat.getVersion(), znodeVersion);\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            log.info(StrUtils.formatString(errMsg, resourceLocation, znodeVersion));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve) {\n      int v = -1;\n      try {\n        Stat stat = zkClient.exists(resourceLocation, null, true);\n        v = stat.getVersion();\n      } catch (Exception e) {\n        log.error(e.getMessage());\n\n      }\n      log.info(StrUtils.formatString(errMsg + \" zkVersion= \" + v, resourceLocation, znodeVersion));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n    } catch (ResourceModifiedInZkException e) {\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return latestVersion;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(ZkSolrResourceLoader,int,String,byte[],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(ZkSolrResourceLoader,int,String,byte[],boolean).mjava","sourceNew":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static int persistConfigResourceToZooKeeper(ZkSolrResourceLoader zkLoader, int znodeVersion,\n                                                         String resourceName, byte[] content,\n                                                         boolean createIfNotExists) {\n    int latestVersion = znodeVersion;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - old {1}\";\n    try {\n      try {\n        Stat stat = zkClient.setData(resourceLocation, content, znodeVersion, true);\n        latestVersion = stat.getVersion();// if the set succeeded , it should have incremented the version by one always\n        log.info(\"Persisted config data to node {} \", resourceLocation);\n        touchConfDir(zkLoader);\n      } catch (NoNodeException e) {\n        if (createIfNotExists) {\n          try {\n            zkClient.create(resourceLocation, content, CreateMode.PERSISTENT, true);\n            latestVersion = 0;//just created so version must be zero\n            touchConfDir(zkLoader);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              if (log.isDebugEnabled()) {\n                log.debug(\"failed to set data version in zk is {} and expected version is {} \", stat.getVersion(), znodeVersion);\n              }\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            if (log.isInfoEnabled()) {\n              log.info(StrUtils.formatString(errMsg, resourceLocation, znodeVersion));\n            }\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve) {\n      int v = -1;\n      try {\n        Stat stat = zkClient.exists(resourceLocation, null, true);\n        v = stat.getVersion();\n      } catch (Exception e) {\n        log.error(e.getMessage());\n\n      }\n      if (log.isInfoEnabled()) {\n        log.info(StrUtils.formatString(\"%s zkVersion= %d %s %d\", errMsg, resourceLocation, znodeVersion));\n      }\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n    } catch (ResourceModifiedInZkException e) {\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return latestVersion;\n  }\n\n","sourceOld":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static int persistConfigResourceToZooKeeper(ZkSolrResourceLoader zkLoader, int znodeVersion,\n                                                         String resourceName, byte[] content,\n                                                         boolean createIfNotExists) {\n    int latestVersion = znodeVersion;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - old {1}\";\n    try {\n      try {\n        Stat stat = zkClient.setData(resourceLocation, content, znodeVersion, true);\n        latestVersion = stat.getVersion();// if the set succeeded , it should have incremented the version by one always\n        log.info(\"Persisted config data to node {} \", resourceLocation);\n        touchConfDir(zkLoader);\n      } catch (NoNodeException e) {\n        if (createIfNotExists) {\n          try {\n            zkClient.create(resourceLocation, content, CreateMode.PERSISTENT, true);\n            latestVersion = 0;//just created so version must be zero\n            touchConfDir(zkLoader);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              log.debug(\"failed to set data version in zk is {} and expected version is {} \", stat.getVersion(), znodeVersion);\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            log.info(StrUtils.formatString(errMsg, resourceLocation, znodeVersion));\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve) {\n      int v = -1;\n      try {\n        Stat stat = zkClient.exists(resourceLocation, null, true);\n        v = stat.getVersion();\n      } catch (Exception e) {\n        log.error(e.getMessage());\n\n      }\n      log.info(StrUtils.formatString(errMsg + \" zkVersion= \" + v, resourceLocation, znodeVersion));\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n    } catch (ResourceModifiedInZkException e) {\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return latestVersion;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c238f5fb83803b49b37b3a1a12224a64d47542","date":1593655679,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(ZkSolrResourceLoader,int,String,byte[],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#persistConfigResourceToZooKeeper(ZkSolrResourceLoader,int,String,byte[],boolean).mjava","sourceNew":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static int persistConfigResourceToZooKeeper(ZkSolrResourceLoader zkLoader, int znodeVersion,\n                                                         String resourceName, byte[] content,\n                                                         boolean createIfNotExists) {\n    int latestVersion = znodeVersion;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - old {1}\";\n    try {\n      try {\n        Stat stat = zkClient.setData(resourceLocation, content, znodeVersion, true);\n        latestVersion = stat.getVersion();// if the set succeeded , it should have incremented the version by one always\n        log.info(\"Persisted config data to node {} \", resourceLocation);\n        touchConfDir(zkLoader);\n      } catch (NoNodeException e) {\n        if (createIfNotExists) {\n          try {\n            zkClient.create(resourceLocation, content, CreateMode.PERSISTENT, true);\n            latestVersion = 0;//just created so version must be zero\n            touchConfDir(zkLoader);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              if (log.isDebugEnabled()) {\n                log.debug(\"failed to set data version in zk is {} and expected version is {} \", stat.getVersion(), znodeVersion);\n              }\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            if (log.isInfoEnabled()) {\n              log.info(StrUtils.formatString(errMsg, resourceLocation, znodeVersion));\n            }\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve) {\n      int v = -1;\n      try {\n        Stat stat = zkClient.exists(resourceLocation, null, true);\n        v = stat.getVersion();\n      } catch (Exception e) {\n        log.error(\"Exception during ZooKeeper node checking \", e);\n      }\n      if (log.isInfoEnabled()) {\n        log.info(StrUtils.formatString(\"%s zkVersion= %d %s %d\", errMsg, resourceLocation, znodeVersion));\n      }\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n    } catch (ResourceModifiedInZkException e) {\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return latestVersion;\n  }\n\n","sourceOld":"  /**\n   * Persists a config file to ZooKeeper using optimistic concurrency.\n   *\n   * @return true on success\n   */\n  public static int persistConfigResourceToZooKeeper(ZkSolrResourceLoader zkLoader, int znodeVersion,\n                                                         String resourceName, byte[] content,\n                                                         boolean createIfNotExists) {\n    int latestVersion = znodeVersion;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String resourceLocation = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n    String errMsg = \"Failed to persist resource at {0} - old {1}\";\n    try {\n      try {\n        Stat stat = zkClient.setData(resourceLocation, content, znodeVersion, true);\n        latestVersion = stat.getVersion();// if the set succeeded , it should have incremented the version by one always\n        log.info(\"Persisted config data to node {} \", resourceLocation);\n        touchConfDir(zkLoader);\n      } catch (NoNodeException e) {\n        if (createIfNotExists) {\n          try {\n            zkClient.create(resourceLocation, content, CreateMode.PERSISTENT, true);\n            latestVersion = 0;//just created so version must be zero\n            touchConfDir(zkLoader);\n          } catch (KeeperException.NodeExistsException nee) {\n            try {\n              Stat stat = zkClient.exists(resourceLocation, null, true);\n              if (log.isDebugEnabled()) {\n                log.debug(\"failed to set data version in zk is {} and expected version is {} \", stat.getVersion(), znodeVersion);\n              }\n            } catch (Exception e1) {\n              log.warn(\"could not get stat\");\n            }\n\n            if (log.isInfoEnabled()) {\n              log.info(StrUtils.formatString(errMsg, resourceLocation, znodeVersion));\n            }\n            throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n          }\n        }\n      }\n\n    } catch (KeeperException.BadVersionException bve) {\n      int v = -1;\n      try {\n        Stat stat = zkClient.exists(resourceLocation, null, true);\n        v = stat.getVersion();\n      } catch (Exception e) {\n        log.error(e.getMessage());\n\n      }\n      if (log.isInfoEnabled()) {\n        log.info(StrUtils.formatString(\"%s zkVersion= %d %s %d\", errMsg, resourceLocation, znodeVersion));\n      }\n      throw new ResourceModifiedInZkException(ErrorCode.CONFLICT, StrUtils.formatString(errMsg, resourceLocation, znodeVersion) + \", retry.\");\n    } catch (ResourceModifiedInZkException e) {\n      throw e;\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting resource at \" + resourceLocation;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return latestVersion;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"962cd4f5e313777f35da8f521265323e84184929":["734d38d5abe4f98cce936b31450702d597f6fc69"],"389d072b64597cdcf75c2d536aaec3e8afe3393f":["9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["ad4957cde742defe6db19689abdc267c5d948066"],"ad4957cde742defe6db19689abdc267c5d948066":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"be214850f18c80408bcfafd463ec155ab0515aee":["45a5f13e4e6b3c60912dc0911227739fe2f371c2"],"45a5f13e4e6b3c60912dc0911227739fe2f371c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["389d072b64597cdcf75c2d536aaec3e8afe3393f","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["be214850f18c80408bcfafd463ec155ab0515aee","9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["734d38d5abe4f98cce936b31450702d597f6fc69","962cd4f5e313777f35da8f521265323e84184929"],"734d38d5abe4f98cce936b31450702d597f6fc69":["389d072b64597cdcf75c2d536aaec3e8afe3393f"],"9bdb19206b4aeab66b9fb393c53969f44bdd48be":["be214850f18c80408bcfafd463ec155ab0515aee"],"fab172655716b96f7e42376116235017a922de3a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","389d072b64597cdcf75c2d536aaec3e8afe3393f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c238f5fb83803b49b37b3a1a12224a64d47542"]},"commit2Childs":{"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"389d072b64597cdcf75c2d536aaec3e8afe3393f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","734d38d5abe4f98cce936b31450702d597f6fc69","fab172655716b96f7e42376116235017a922de3a"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad4957cde742defe6db19689abdc267c5d948066":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"be214850f18c80408bcfafd463ec155ab0515aee":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"45a5f13e4e6b3c60912dc0911227739fe2f371c2":["be214850f18c80408bcfafd463ec155ab0515aee"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["fab172655716b96f7e42376116235017a922de3a"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ad4957cde742defe6db19689abdc267c5d948066","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45a5f13e4e6b3c60912dc0911227739fe2f371c2"],"734d38d5abe4f98cce936b31450702d597f6fc69":["962cd4f5e313777f35da8f521265323e84184929","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"9bdb19206b4aeab66b9fb393c53969f44bdd48be":["389d072b64597cdcf75c2d536aaec3e8afe3393f","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}