{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n  }\n\n","sourceOld":"  private void modifyCollection(ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n  }\n\n","sourceOld":"  private void modifyCollection(ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b4a0745c88f26fb0cb08db12df3db00e49df3b8","date":1473917688,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      Thread.sleep(100);\n    }\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n  }\n\n","bugFix":null,"bugIntro":["24ff7c4fec127d952f886cbfc13dbd18d1e77f6f","24ff7c4fec127d952f886cbfc13dbd18d1e77f6f","24ff7c4fec127d952f886cbfc13dbd18d1e77f6f","24ff7c4fec127d952f886cbfc13dbd18d1e77f6f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      Thread.sleep(100);\n    }\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      Thread.sleep(100);\n    }\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"114b665752b215f36836a7c5411f7c433b4d1352","date":1497007372,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      Thread.sleep(100);\n    }\n\n    if (message.getBool(ZkStateReader.AUTO_ADD_REPLICAS, false)) {\n      forwardToAutoScaling(AutoScaling.AUTO_ADD_REPLICAS_TRIGGER_DSL);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      Thread.sleep(100);\n    }\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"717e5ceb2acae36d422ec75e5a4ce9fac40506e1","date":1501239603,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      Thread.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      Thread.sleep(100);\n    }\n\n    if (message.getBool(ZkStateReader.AUTO_ADD_REPLICAS, false)) {\n      forwardToAutoScaling(AutoScaling.AUTO_ADD_REPLICAS_TRIGGER_DSL);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      Thread.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      Thread.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      Thread.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      Thread.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      Thread.sleep(100);\n    }\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      Thread.sleep(100);\n    }\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      Thread.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      Thread.sleep(100);\n    }\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      Thread.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      Thread.sleep(100);\n    }\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      Thread.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      Thread.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      Thread.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","5ad9c35f926b4bf8da0336d1300efc709c8d5a56","5ad9c35f926b4bf8da0336d1300efc709c8d5a56","5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws Exception {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && !collection.get(updateKey).equals(updateEntry.getValue())){\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4b4a0745c88f26fb0cb08db12df3db00e49df3b8":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"b94236357aaa22b76c10629851fe4e376e0cea82":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","b869898f50ca80263bac2e3ae0949f7700e5c977"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["114b665752b215f36836a7c5411f7c433b4d1352"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"114b665752b215f36836a7c5411f7c433b4d1352":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["403d05f7f8d69b65659157eff1bc1d2717f04c66","4b4a0745c88f26fb0cb08db12df3db00e49df3b8"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"560c18d71dad43d675158783c3840f8c80d6d39c":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"4b4a0745c88f26fb0cb08db12df3db00e49df3b8":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4b4a0745c88f26fb0cb08db12df3db00e49df3b8","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"114b665752b215f36836a7c5411f7c433b4d1352":["717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["114b665752b215f36836a7c5411f7c433b4d1352","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}