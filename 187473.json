{"path":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      RAMDirectory indexStore = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore, true);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length);\n      searcher.close();\n  }\n\n","sourceOld":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      RAMDirectory indexStore = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore, true);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length);\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      MockRAMDirectory indexStore = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore, true);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length);\n      searcher.close();\n      indexStore.close();\n  }\n\n","sourceOld":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      RAMDirectory indexStore = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore, true);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length);\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      MockRAMDirectory indexStore = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore, true);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length);\n      searcher.close();\n      indexStore.close();\n  }\n\n","sourceOld":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      MockRAMDirectory indexStore = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore, true);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length);\n      searcher.close();\n      indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"953de31d76c9d58f1e3f4e41ff8a48a1529226de","date":1277371072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      MockRAMDirectory indexStore = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore, true);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length);\n\n      // just make sure no exc:\n      searcher.explain(q, 0);\n\n      searcher.close();\n      indexStore.close();\n  }\n\n","sourceOld":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      MockRAMDirectory indexStore = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore, true);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length);\n      searcher.close();\n      indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    \n    MockRAMDirectory indexStore = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), indexStore,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      MockRAMDirectory indexStore = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore, true);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length);\n\n      // just make sure no exc:\n      searcher.explain(q, 0);\n\n      searcher.close();\n      indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    \n    MockRAMDirectory indexStore = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), indexStore,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      MockRAMDirectory indexStore = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore, true);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length);\n      searcher.close();\n      indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    \n    MockRAMDirectory indexStore = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    \n    MockRAMDirectory indexStore = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), indexStore,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    \n    MockRAMDirectory indexStore = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    \n    MockRAMDirectory indexStore = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), indexStore,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    \n    MockRAMDirectory indexStore = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    \n    MockRAMDirectory indexStore = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), indexStore,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    Random random = newRandom();\n    MockRAMDirectory indexStore = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    \n    MockRAMDirectory indexStore = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    Random random = newRandom();\n    Directory indexStore = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    Random random = newRandom();\n    MockRAMDirectory indexStore = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    Random random = newRandom();\n    Directory indexStore = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    \n    MockRAMDirectory indexStore = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testBooleanQueryContainingSingleTermPrefixQuery()\n      throws IOException {\n    // this tests against bug 33161 (now fixed)\n    // In order to cause the bug, the outer query must have more than one term\n    // and all terms required.\n    // The contained PhraseMultiQuery must contain exactly one term array.\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry pie\", writer);\n    add(\"blueberry chewing gum\", writer);\n    add(\"blue raspberry pie\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    // This query will be equivalent to +body:pie +body:\"blue*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term[] {new Term(\"body\", \"blueberry\"),\n        new Term(\"body\", \"blue\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    \n    assertEquals(\"Wrong number of hits\", 2, hits.length);\n    \n    // just make sure no exc:\n    searcher.explain(q, 0);\n    \n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["790e1fde4caa765b3faaad3fbcd25c6973450336","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"d572389229127c297dd1fa5ce4758e1cec41e799":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","c084e47df29de3330311d69dabf515ceaa989512"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","1f653cfcf159baeaafe5d01682a911e95bba4012"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"c084e47df29de3330311d69dabf515ceaa989512":["953de31d76c9d58f1e3f4e41ff8a48a1529226de"],"953de31d76c9d58f1e3f4e41ff8a48a1529226de":["d572389229127c297dd1fa5ce4758e1cec41e799"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1f653cfcf159baeaafe5d01682a911e95bba4012","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"d572389229127c297dd1fa5ce4758e1cec41e799":["5f4e87790277826a2aea119328600dfb07761f32","953de31d76c9d58f1e3f4e41ff8a48a1529226de"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["d572389229127c297dd1fa5ce4758e1cec41e799"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c084e47df29de3330311d69dabf515ceaa989512":["4b103252dee6afa1b6d7a622c773d178788eb85a","15bbd254c1506df5299c4df8c148262c7bd6301e","5f4e87790277826a2aea119328600dfb07761f32"],"953de31d76c9d58f1e3f4e41ff8a48a1529226de":["c084e47df29de3330311d69dabf515ceaa989512"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336","29ef99d61cda9641b6250bf9567329a6e65f901d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}