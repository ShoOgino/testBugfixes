{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHJdbcTestCase#refreshDatabase().mjava","commits":[{"id":"baf341ad3a1a8fb73fb37091af85f8aef0398367","date":1352222680,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHJdbcTestCase#refreshDatabase().mjava","pathOld":"/dev/null","sourceNew":"  public void refreshDatabase() throws Exception\n  {    \n    underlyingDataModified = false;\n    Connection conn = null;\n    Statement s = null;\n    PreparedStatement ps = null;\n    Timestamp theTime = new Timestamp(System.currentTimeMillis() - 10000); //10 seconds ago\n    try {    \n      conn = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");    \n      s = conn.createStatement();\n      try {\n        s.executeUpdate(\"drop table countries\");\n        s.executeUpdate(\"drop table people\");\n        s.executeUpdate(\"drop table people_sports\"); \n      } catch(Exception e) {\n        //ignore.  dbs complain when tables do no exist.\n      }\n      s.executeUpdate(\"create table countries(code varchar(3) not null primary key, country_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people(id int not null primary key, name varchar(50), country_code char(2), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people_sports(id int not null primary key, person_id int, sport_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      \n      ps = conn.prepareStatement(\"insert into countries (code, country_name, last_modified) values (?,?,?)\");\n      for(String[] country : countries) {\n        ps.setString(1, country[0]);\n        ps.setString(2, country[1]);\n        ps.setTimestamp(3, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n            \n      ps = conn.prepareStatement(\"insert into people (id, name, country_code, last_modified) values (?,?,?,?)\");\n      for(Object[] person : people) {\n        ps.setInt(1, (Integer) person[0]);\n        ps.setString(2, (String) person[1]);\n        ps.setString(3, (String) person[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close(); \n      \n      ps = conn.prepareStatement(\"insert into people_sports (id, person_id, sport_name, last_modified) values (?,?,?,?)\");\n      for(Object[] sport : people_sports) {\n        ps.setInt(1, (Integer) sport[0]);\n        ps.setInt(2, (Integer) sport[1]);\n        ps.setString(3, (String) sport[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      conn.commit();\n      conn.close();    \n    } catch(Exception e) {\n      throw e;\n    } finally {\n      try { ps.close(); } catch(Exception ex) { }\n      try { s.close(); } catch(Exception ex) { }\n      try { conn.close(); } catch(Exception ex) { }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["98b88586d26d783d091b15ef29416c1d2c321a78"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78bba2225c30df6990ac27a75743069e928ef81d","date":1352741580,"type":5,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHJdbcTestCase#buildDatabase().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHJdbcTestCase#refreshDatabase().mjava","sourceNew":"  public void buildDatabase() throws Exception\n  {    \n    underlyingDataModified = false;\n    Connection conn = null;\n    Statement s = null;\n    PreparedStatement ps = null;\n    Timestamp theTime = new Timestamp(System.currentTimeMillis() - 10000); //10 seconds ago\n    try { \n      if(dbToUse==Database.DERBY) {\n        String oldProp = System.getProperty(\"derby.stream.error.field\");\n        System.setProperty(\"derby.stream.error.field\", \"DerbyUtil.DEV_NULL\");\n        conn = DriverManager.getConnection(\"jdbc:derby:memory:derbyDB;create=true\");\n        if(oldProp!=null) {\n          System.setProperty(\"derby.stream.error.field\", oldProp);    \n        }\n      } else if(dbToUse==Database.HSQLDB) {\n        conn = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");            \n      } else {\n        throw new AssertionError(\"Invalid database to use: \" + dbToUse);\n      }\n      s = conn.createStatement();\n      s.executeUpdate(\"create table countries(code varchar(3) not null primary key, country_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people(id int not null primary key, name varchar(50), country_code char(2), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people_sports(id int not null primary key, person_id int, sport_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      \n      ps = conn.prepareStatement(\"insert into countries (code, country_name, last_modified) values (?,?,?)\");\n      for(String[] country : countries) {\n        ps.setString(1, country[0]);\n        ps.setString(2, country[1]);\n        ps.setTimestamp(3, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n            \n      ps = conn.prepareStatement(\"insert into people (id, name, country_code, last_modified) values (?,?,?,?)\");\n      for(Object[] person : people) {\n        ps.setInt(1, (Integer) person[0]);\n        ps.setString(2, (String) person[1]);\n        ps.setString(3, (String) person[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close(); \n      \n      ps = conn.prepareStatement(\"insert into people_sports (id, person_id, sport_name, last_modified) values (?,?,?,?)\");\n      for(Object[] sport : people_sports) {\n        ps.setInt(1, (Integer) sport[0]);\n        ps.setInt(2, (Integer) sport[1]);\n        ps.setString(3, (String) sport[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      conn.commit();\n      conn.close();    \n    } catch(Exception e) {\n      throw e;\n    } finally {\n      try { ps.close(); } catch(Exception ex) { }\n      try { s.close(); } catch(Exception ex) { }\n      try { conn.close(); } catch(Exception ex) { }\n    }\n  }\n\n","sourceOld":"  public void refreshDatabase() throws Exception\n  {    \n    underlyingDataModified = false;\n    Connection conn = null;\n    Statement s = null;\n    PreparedStatement ps = null;\n    Timestamp theTime = new Timestamp(System.currentTimeMillis() - 10000); //10 seconds ago\n    try {    \n      conn = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");    \n      s = conn.createStatement();\n      try {\n        s.executeUpdate(\"drop table countries\");\n        s.executeUpdate(\"drop table people\");\n        s.executeUpdate(\"drop table people_sports\"); \n      } catch(Exception e) {\n        //ignore.  dbs complain when tables do no exist.\n      }\n      s.executeUpdate(\"create table countries(code varchar(3) not null primary key, country_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people(id int not null primary key, name varchar(50), country_code char(2), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people_sports(id int not null primary key, person_id int, sport_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      \n      ps = conn.prepareStatement(\"insert into countries (code, country_name, last_modified) values (?,?,?)\");\n      for(String[] country : countries) {\n        ps.setString(1, country[0]);\n        ps.setString(2, country[1]);\n        ps.setTimestamp(3, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n            \n      ps = conn.prepareStatement(\"insert into people (id, name, country_code, last_modified) values (?,?,?,?)\");\n      for(Object[] person : people) {\n        ps.setInt(1, (Integer) person[0]);\n        ps.setString(2, (String) person[1]);\n        ps.setString(3, (String) person[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close(); \n      \n      ps = conn.prepareStatement(\"insert into people_sports (id, person_id, sport_name, last_modified) values (?,?,?,?)\");\n      for(Object[] sport : people_sports) {\n        ps.setInt(1, (Integer) sport[0]);\n        ps.setInt(2, (Integer) sport[1]);\n        ps.setString(3, (String) sport[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      conn.commit();\n      conn.close();    \n    } catch(Exception e) {\n      throw e;\n    } finally {\n      try { ps.close(); } catch(Exception ex) { }\n      try { s.close(); } catch(Exception ex) { }\n      try { conn.close(); } catch(Exception ex) { }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHJdbcTestCase#refreshDatabase().mjava","sourceNew":null,"sourceOld":"  public void refreshDatabase() throws Exception\n  {    \n    underlyingDataModified = false;\n    Connection conn = null;\n    Statement s = null;\n    PreparedStatement ps = null;\n    Timestamp theTime = new Timestamp(System.currentTimeMillis() - 10000); //10 seconds ago\n    try {    \n      conn = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");    \n      s = conn.createStatement();\n      try {\n        s.executeUpdate(\"drop table countries\");\n        s.executeUpdate(\"drop table people\");\n        s.executeUpdate(\"drop table people_sports\"); \n      } catch(Exception e) {\n        //ignore.  dbs complain when tables do no exist.\n      }\n      s.executeUpdate(\"create table countries(code varchar(3) not null primary key, country_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people(id int not null primary key, name varchar(50), country_code char(2), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people_sports(id int not null primary key, person_id int, sport_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      \n      ps = conn.prepareStatement(\"insert into countries (code, country_name, last_modified) values (?,?,?)\");\n      for(String[] country : countries) {\n        ps.setString(1, country[0]);\n        ps.setString(2, country[1]);\n        ps.setTimestamp(3, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n            \n      ps = conn.prepareStatement(\"insert into people (id, name, country_code, last_modified) values (?,?,?,?)\");\n      for(Object[] person : people) {\n        ps.setInt(1, (Integer) person[0]);\n        ps.setString(2, (String) person[1]);\n        ps.setString(3, (String) person[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close(); \n      \n      ps = conn.prepareStatement(\"insert into people_sports (id, person_id, sport_name, last_modified) values (?,?,?,?)\");\n      for(Object[] sport : people_sports) {\n        ps.setInt(1, (Integer) sport[0]);\n        ps.setInt(2, (Integer) sport[1]);\n        ps.setString(3, (String) sport[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      conn.commit();\n      conn.close();    \n    } catch(Exception e) {\n      throw e;\n    } finally {\n      try { ps.close(); } catch(Exception ex) { }\n      try { s.close(); } catch(Exception ex) { }\n      try { conn.close(); } catch(Exception ex) { }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"78bba2225c30df6990ac27a75743069e928ef81d":["baf341ad3a1a8fb73fb37091af85f8aef0398367"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["baf341ad3a1a8fb73fb37091af85f8aef0398367","78bba2225c30df6990ac27a75743069e928ef81d"],"baf341ad3a1a8fb73fb37091af85f8aef0398367":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["78bba2225c30df6990ac27a75743069e928ef81d"]},"commit2Childs":{"78bba2225c30df6990ac27a75743069e928ef81d":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["baf341ad3a1a8fb73fb37091af85f8aef0398367"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"baf341ad3a1a8fb73fb37091af85f8aef0398367":["78bba2225c30df6990ac27a75743069e928ef81d","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}