{"path":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteCopyField(String,String).mjava","commits":[{"id":"eeeea2295d6355a29e259130a5c48ace73022d7c","date":1426569216,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteCopyField(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void deleteCopyField(String source, String dest) {\n    // Assumption: a copy field directive will exist only if the source & destination (dynamic) fields exist\n    SchemaField destSchemaField = fields.get(dest);\n    SchemaField sourceSchemaField = fields.get(source);\n\n    final String invalidGlobMessage = \"is an invalid glob: either it contains more than one asterisk,\"\n        + \" or the asterisk occurs neither at the start nor at the end.\";\n    if (source.contains(\"*\") && ! isValidFieldGlob(source)) {\n      String msg = \"copyField source '\" + source + \"' \" + invalidGlobMessage;\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n    if (dest.contains(\"*\") && ! isValidFieldGlob(dest)) {\n      String msg = \"copyField dest '\" + dest + \"' \" + invalidGlobMessage;\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n\n    boolean found = false;\n\n    if (null == destSchemaField || null == sourceSchemaField) { // Must be dynamic copy field\n      if (dynamicCopyFields != null) {\n        for (int i = 0 ; i < dynamicCopyFields.length ; ++i) {\n          DynamicCopy dynamicCopy = dynamicCopyFields[i];\n          if (source.equals(dynamicCopy.getRegex()) && dest.equals(dynamicCopy.getDestFieldName())) {\n            found = true;\n            decrementCopyFieldTargetCount(dynamicCopy.getDestination().getPrototype());\n            if (dynamicCopyFields.length > 1) {\n              DynamicCopy[] temp = new DynamicCopy[dynamicCopyFields.length - 1];\n              System.arraycopy(dynamicCopyFields, 0, temp, 0, i);\n              // skip over the dynamic copy field to be deleted\n              System.arraycopy(dynamicCopyFields, i + 1, temp, i, dynamicCopyFields.length - i - 1);\n              dynamicCopyFields = temp;\n            } else {\n              dynamicCopyFields = null;\n            }\n            break;\n          }\n        }\n      }\n    } else { // non-dynamic copy field directive\n      List<CopyField> copyFieldList = copyFieldsMap.get(source);\n      if (copyFieldList != null) {\n        for (Iterator<CopyField> iter = copyFieldList.iterator() ; iter.hasNext() ; ) {\n          CopyField copyField = iter.next();\n          if (dest.equals(copyField.getDestination().getName())) {\n            found = true;\n            decrementCopyFieldTargetCount(copyField.getDestination());\n            iter.remove();\n            if (copyFieldList.isEmpty()) {\n              copyFieldsMap.remove(source);\n            }\n            break;\n          }\n        }\n      }\n    }\n    if ( ! found) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Copy field directive not found: '\" + source + \"' -> '\" + dest + \"'\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1aa4053d832bb1d5950f8e19afa8aedb2bcdf215","43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7a7509102c58cf4f57c425a621aaa20575804b2","date":1427264724,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteCopyField(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteCopyField(String,String).mjava","sourceNew":"  private void deleteCopyField(String source, String dest) {\n    // Assumption: a copy field directive will exist only if the source & destination (dynamic) fields exist\n    SchemaField destSchemaField = fields.get(dest);\n    SchemaField sourceSchemaField = fields.get(source);\n\n    final String invalidGlobMessage = \"is an invalid glob: either it contains more than one asterisk,\"\n        + \" or the asterisk occurs neither at the start nor at the end.\";\n    if (source.contains(\"*\") && ! isValidFieldGlob(source)) {\n      String msg = \"copyField source '\" + source + \"' \" + invalidGlobMessage;\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n    if (dest.contains(\"*\") && ! isValidFieldGlob(dest)) {\n      String msg = \"copyField dest '\" + dest + \"' \" + invalidGlobMessage;\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n\n    boolean found = false;\n\n    if (null == destSchemaField || null == sourceSchemaField) { // Must be dynamic copy field\n      if (dynamicCopyFields != null) {\n        for (int i = 0 ; i < dynamicCopyFields.length ; ++i) {\n          DynamicCopy dynamicCopy = dynamicCopyFields[i];\n          if (source.equals(dynamicCopy.getRegex()) && dest.equals(dynamicCopy.getDestFieldName())) {\n            found = true;\n            SchemaField destinationPrototype = dynamicCopy.getDestination().getPrototype();\n            if (copyFieldTargetCounts.containsKey(destinationPrototype)) {\n              decrementCopyFieldTargetCount(destinationPrototype);\n            }\n            if (dynamicCopyFields.length > 1) {\n              DynamicCopy[] temp = new DynamicCopy[dynamicCopyFields.length - 1];\n              System.arraycopy(dynamicCopyFields, 0, temp, 0, i);\n              // skip over the dynamic copy field to be deleted\n              System.arraycopy(dynamicCopyFields, i + 1, temp, i, dynamicCopyFields.length - i - 1);\n              dynamicCopyFields = temp;\n            } else {\n              dynamicCopyFields = null;\n            }\n            break;\n          }\n        }\n      }\n    } else { // non-dynamic copy field directive\n      List<CopyField> copyFieldList = copyFieldsMap.get(source);\n      if (copyFieldList != null) {\n        for (Iterator<CopyField> iter = copyFieldList.iterator() ; iter.hasNext() ; ) {\n          CopyField copyField = iter.next();\n          if (dest.equals(copyField.getDestination().getName())) {\n            found = true;\n            decrementCopyFieldTargetCount(copyField.getDestination());\n            iter.remove();\n            if (copyFieldList.isEmpty()) {\n              copyFieldsMap.remove(source);\n            }\n            break;\n          }\n        }\n      }\n    }\n    if ( ! found) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Copy field directive not found: '\" + source + \"' -> '\" + dest + \"'\");\n    }\n  }\n\n","sourceOld":"  private void deleteCopyField(String source, String dest) {\n    // Assumption: a copy field directive will exist only if the source & destination (dynamic) fields exist\n    SchemaField destSchemaField = fields.get(dest);\n    SchemaField sourceSchemaField = fields.get(source);\n\n    final String invalidGlobMessage = \"is an invalid glob: either it contains more than one asterisk,\"\n        + \" or the asterisk occurs neither at the start nor at the end.\";\n    if (source.contains(\"*\") && ! isValidFieldGlob(source)) {\n      String msg = \"copyField source '\" + source + \"' \" + invalidGlobMessage;\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n    if (dest.contains(\"*\") && ! isValidFieldGlob(dest)) {\n      String msg = \"copyField dest '\" + dest + \"' \" + invalidGlobMessage;\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n\n    boolean found = false;\n\n    if (null == destSchemaField || null == sourceSchemaField) { // Must be dynamic copy field\n      if (dynamicCopyFields != null) {\n        for (int i = 0 ; i < dynamicCopyFields.length ; ++i) {\n          DynamicCopy dynamicCopy = dynamicCopyFields[i];\n          if (source.equals(dynamicCopy.getRegex()) && dest.equals(dynamicCopy.getDestFieldName())) {\n            found = true;\n            decrementCopyFieldTargetCount(dynamicCopy.getDestination().getPrototype());\n            if (dynamicCopyFields.length > 1) {\n              DynamicCopy[] temp = new DynamicCopy[dynamicCopyFields.length - 1];\n              System.arraycopy(dynamicCopyFields, 0, temp, 0, i);\n              // skip over the dynamic copy field to be deleted\n              System.arraycopy(dynamicCopyFields, i + 1, temp, i, dynamicCopyFields.length - i - 1);\n              dynamicCopyFields = temp;\n            } else {\n              dynamicCopyFields = null;\n            }\n            break;\n          }\n        }\n      }\n    } else { // non-dynamic copy field directive\n      List<CopyField> copyFieldList = copyFieldsMap.get(source);\n      if (copyFieldList != null) {\n        for (Iterator<CopyField> iter = copyFieldList.iterator() ; iter.hasNext() ; ) {\n          CopyField copyField = iter.next();\n          if (dest.equals(copyField.getDestination().getName())) {\n            found = true;\n            decrementCopyFieldTargetCount(copyField.getDestination());\n            iter.remove();\n            if (copyFieldList.isEmpty()) {\n              copyFieldsMap.remove(source);\n            }\n            break;\n          }\n        }\n      }\n    }\n    if ( ! found) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Copy field directive not found: '\" + source + \"' -> '\" + dest + \"'\");\n    }\n  }\n\n","bugFix":null,"bugIntro":["43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteCopyField(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void deleteCopyField(String source, String dest) {\n    // Assumption: a copy field directive will exist only if the source & destination (dynamic) fields exist\n    SchemaField destSchemaField = fields.get(dest);\n    SchemaField sourceSchemaField = fields.get(source);\n\n    final String invalidGlobMessage = \"is an invalid glob: either it contains more than one asterisk,\"\n        + \" or the asterisk occurs neither at the start nor at the end.\";\n    if (source.contains(\"*\") && ! isValidFieldGlob(source)) {\n      String msg = \"copyField source '\" + source + \"' \" + invalidGlobMessage;\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n    if (dest.contains(\"*\") && ! isValidFieldGlob(dest)) {\n      String msg = \"copyField dest '\" + dest + \"' \" + invalidGlobMessage;\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n\n    boolean found = false;\n\n    if (null == destSchemaField || null == sourceSchemaField) { // Must be dynamic copy field\n      if (dynamicCopyFields != null) {\n        for (int i = 0 ; i < dynamicCopyFields.length ; ++i) {\n          DynamicCopy dynamicCopy = dynamicCopyFields[i];\n          if (source.equals(dynamicCopy.getRegex()) && dest.equals(dynamicCopy.getDestFieldName())) {\n            found = true;\n            SchemaField destinationPrototype = dynamicCopy.getDestination().getPrototype();\n            if (copyFieldTargetCounts.containsKey(destinationPrototype)) {\n              decrementCopyFieldTargetCount(destinationPrototype);\n            }\n            if (dynamicCopyFields.length > 1) {\n              DynamicCopy[] temp = new DynamicCopy[dynamicCopyFields.length - 1];\n              System.arraycopy(dynamicCopyFields, 0, temp, 0, i);\n              // skip over the dynamic copy field to be deleted\n              System.arraycopy(dynamicCopyFields, i + 1, temp, i, dynamicCopyFields.length - i - 1);\n              dynamicCopyFields = temp;\n            } else {\n              dynamicCopyFields = null;\n            }\n            break;\n          }\n        }\n      }\n    } else { // non-dynamic copy field directive\n      List<CopyField> copyFieldList = copyFieldsMap.get(source);\n      if (copyFieldList != null) {\n        for (Iterator<CopyField> iter = copyFieldList.iterator() ; iter.hasNext() ; ) {\n          CopyField copyField = iter.next();\n          if (dest.equals(copyField.getDestination().getName())) {\n            found = true;\n            decrementCopyFieldTargetCount(copyField.getDestination());\n            iter.remove();\n            if (copyFieldList.isEmpty()) {\n              copyFieldsMap.remove(source);\n            }\n            break;\n          }\n        }\n      }\n    }\n    if ( ! found) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Copy field directive not found: '\" + source + \"' -> '\" + dest + \"'\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3","date":1570208701,"type":3,"author":"Thomas Wöckinger","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteCopyField(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteCopyField(String,String).mjava","sourceNew":"  private void deleteCopyField(String source, String dest) {\n    // Assumption: a copy field directive will exist only if the source & destination (dynamic) fields exist\n    SchemaField destSchemaField = fields.get(dest);\n    SchemaField sourceSchemaField = fields.get(source);\n\n    final String invalidGlobMessage = \"is an invalid glob: either it contains more than one asterisk,\"\n        + \" or the asterisk occurs neither at the start nor at the end.\";\n    if (source.contains(\"*\") && ! isValidFieldGlob(source)) {\n      String msg = \"copyField source '\" + source + \"' \" + invalidGlobMessage;\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n    if (dest.contains(\"*\") && ! isValidFieldGlob(dest)) {\n      String msg = \"copyField dest '\" + dest + \"' \" + invalidGlobMessage;\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n\n    boolean found = false;\n\n    if (null == destSchemaField || null == sourceSchemaField) { // Must be dynamic copy field\n      for (int i = 0; i < dynamicCopyFields.length; ++i) {\n        DynamicCopy dynamicCopy = dynamicCopyFields[i];\n        if (source.equals(dynamicCopy.getRegex()) && dest.equals(dynamicCopy.getDestFieldName())) {\n          found = true;\n          SchemaField destinationPrototype = dynamicCopy.getDestination().getPrototype();\n          if (copyFieldTargetCounts.containsKey(destinationPrototype)) {\n            decrementCopyFieldTargetCount(destinationPrototype);\n          }\n          if (dynamicCopyFields.length > 1) {\n            DynamicCopy[] temp = new DynamicCopy[dynamicCopyFields.length - 1];\n            System.arraycopy(dynamicCopyFields, 0, temp, 0, i);\n            // skip over the dynamic copy field to be deleted\n            System.arraycopy(dynamicCopyFields, i + 1, temp, i, dynamicCopyFields.length - i - 1);\n            dynamicCopyFields = temp;\n          } else {\n            dynamicCopyFields = new DynamicCopy[] {};\n          }\n          break;\n        }\n      }\n    } else { // non-dynamic copy field directive\n      List<CopyField> copyFieldList = copyFieldsMap.get(source);\n      if (copyFieldList != null) {\n        for (Iterator<CopyField> iter = copyFieldList.iterator() ; iter.hasNext() ; ) {\n          CopyField copyField = iter.next();\n          if (dest.equals(copyField.getDestination().getName())) {\n            found = true;\n            decrementCopyFieldTargetCount(copyField.getDestination());\n            iter.remove();\n            if (copyFieldList.isEmpty()) {\n              copyFieldsMap.remove(source);\n            }\n            break;\n          }\n        }\n      }\n    }\n    if ( ! found) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Copy field directive not found: '\" + source + \"' -> '\" + dest + \"'\");\n    }\n  }\n\n","sourceOld":"  private void deleteCopyField(String source, String dest) {\n    // Assumption: a copy field directive will exist only if the source & destination (dynamic) fields exist\n    SchemaField destSchemaField = fields.get(dest);\n    SchemaField sourceSchemaField = fields.get(source);\n\n    final String invalidGlobMessage = \"is an invalid glob: either it contains more than one asterisk,\"\n        + \" or the asterisk occurs neither at the start nor at the end.\";\n    if (source.contains(\"*\") && ! isValidFieldGlob(source)) {\n      String msg = \"copyField source '\" + source + \"' \" + invalidGlobMessage;\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n    if (dest.contains(\"*\") && ! isValidFieldGlob(dest)) {\n      String msg = \"copyField dest '\" + dest + \"' \" + invalidGlobMessage;\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n\n    boolean found = false;\n\n    if (null == destSchemaField || null == sourceSchemaField) { // Must be dynamic copy field\n      if (dynamicCopyFields != null) {\n        for (int i = 0 ; i < dynamicCopyFields.length ; ++i) {\n          DynamicCopy dynamicCopy = dynamicCopyFields[i];\n          if (source.equals(dynamicCopy.getRegex()) && dest.equals(dynamicCopy.getDestFieldName())) {\n            found = true;\n            SchemaField destinationPrototype = dynamicCopy.getDestination().getPrototype();\n            if (copyFieldTargetCounts.containsKey(destinationPrototype)) {\n              decrementCopyFieldTargetCount(destinationPrototype);\n            }\n            if (dynamicCopyFields.length > 1) {\n              DynamicCopy[] temp = new DynamicCopy[dynamicCopyFields.length - 1];\n              System.arraycopy(dynamicCopyFields, 0, temp, 0, i);\n              // skip over the dynamic copy field to be deleted\n              System.arraycopy(dynamicCopyFields, i + 1, temp, i, dynamicCopyFields.length - i - 1);\n              dynamicCopyFields = temp;\n            } else {\n              dynamicCopyFields = null;\n            }\n            break;\n          }\n        }\n      }\n    } else { // non-dynamic copy field directive\n      List<CopyField> copyFieldList = copyFieldsMap.get(source);\n      if (copyFieldList != null) {\n        for (Iterator<CopyField> iter = copyFieldList.iterator() ; iter.hasNext() ; ) {\n          CopyField copyField = iter.next();\n          if (dest.equals(copyField.getDestination().getName())) {\n            found = true;\n            decrementCopyFieldTargetCount(copyField.getDestination());\n            iter.remove();\n            if (copyFieldList.isEmpty()) {\n              copyFieldsMap.remove(source);\n            }\n            break;\n          }\n        }\n      }\n    }\n    if ( ! found) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Copy field directive not found: '\" + source + \"' -> '\" + dest + \"'\");\n    }\n  }\n\n","bugFix":["eeeea2295d6355a29e259130a5c48ace73022d7c","a7a7509102c58cf4f57c425a621aaa20575804b2"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteCopyField(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteCopyField(String,String).mjava","sourceNew":"  private void deleteCopyField(String source, String dest) {\n    // Assumption: a copy field directive will exist only if the source & destination (dynamic) fields exist\n    SchemaField destSchemaField = fields.get(dest);\n    SchemaField sourceSchemaField = fields.get(source);\n\n    final String invalidGlobMessage = \"is an invalid glob: either it contains more than one asterisk,\"\n        + \" or the asterisk occurs neither at the start nor at the end.\";\n    if (source.contains(\"*\") && ! isValidFieldGlob(source)) {\n      String msg = \"copyField source '\" + source + \"' \" + invalidGlobMessage;\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n    if (dest.contains(\"*\") && ! isValidFieldGlob(dest)) {\n      String msg = \"copyField dest '\" + dest + \"' \" + invalidGlobMessage;\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n\n    boolean found = false;\n\n    if (null == destSchemaField || null == sourceSchemaField) { // Must be dynamic copy field\n      for (int i = 0; i < dynamicCopyFields.length; ++i) {\n        DynamicCopy dynamicCopy = dynamicCopyFields[i];\n        if (source.equals(dynamicCopy.getRegex()) && dest.equals(dynamicCopy.getDestFieldName())) {\n          found = true;\n          SchemaField destinationPrototype = dynamicCopy.getDestination().getPrototype();\n          if (copyFieldTargetCounts.containsKey(destinationPrototype)) {\n            decrementCopyFieldTargetCount(destinationPrototype);\n          }\n          if (dynamicCopyFields.length > 1) {\n            DynamicCopy[] temp = new DynamicCopy[dynamicCopyFields.length - 1];\n            System.arraycopy(dynamicCopyFields, 0, temp, 0, i);\n            // skip over the dynamic copy field to be deleted\n            System.arraycopy(dynamicCopyFields, i + 1, temp, i, dynamicCopyFields.length - i - 1);\n            dynamicCopyFields = temp;\n          } else {\n            dynamicCopyFields = new DynamicCopy[] {};\n          }\n          break;\n        }\n      }\n    } else { // non-dynamic copy field directive\n      List<CopyField> copyFieldList = copyFieldsMap.get(source);\n      if (copyFieldList != null) {\n        for (Iterator<CopyField> iter = copyFieldList.iterator() ; iter.hasNext() ; ) {\n          CopyField copyField = iter.next();\n          if (dest.equals(copyField.getDestination().getName())) {\n            found = true;\n            decrementCopyFieldTargetCount(copyField.getDestination());\n            iter.remove();\n            if (copyFieldList.isEmpty()) {\n              copyFieldsMap.remove(source);\n            }\n            break;\n          }\n        }\n      }\n    }\n    if ( ! found) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Copy field directive not found: '\" + source + \"' -> '\" + dest + \"'\");\n    }\n  }\n\n","sourceOld":"  private void deleteCopyField(String source, String dest) {\n    // Assumption: a copy field directive will exist only if the source & destination (dynamic) fields exist\n    SchemaField destSchemaField = fields.get(dest);\n    SchemaField sourceSchemaField = fields.get(source);\n\n    final String invalidGlobMessage = \"is an invalid glob: either it contains more than one asterisk,\"\n        + \" or the asterisk occurs neither at the start nor at the end.\";\n    if (source.contains(\"*\") && ! isValidFieldGlob(source)) {\n      String msg = \"copyField source '\" + source + \"' \" + invalidGlobMessage;\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n    if (dest.contains(\"*\") && ! isValidFieldGlob(dest)) {\n      String msg = \"copyField dest '\" + dest + \"' \" + invalidGlobMessage;\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n\n    boolean found = false;\n\n    if (null == destSchemaField || null == sourceSchemaField) { // Must be dynamic copy field\n      if (dynamicCopyFields != null) {\n        for (int i = 0 ; i < dynamicCopyFields.length ; ++i) {\n          DynamicCopy dynamicCopy = dynamicCopyFields[i];\n          if (source.equals(dynamicCopy.getRegex()) && dest.equals(dynamicCopy.getDestFieldName())) {\n            found = true;\n            SchemaField destinationPrototype = dynamicCopy.getDestination().getPrototype();\n            if (copyFieldTargetCounts.containsKey(destinationPrototype)) {\n              decrementCopyFieldTargetCount(destinationPrototype);\n            }\n            if (dynamicCopyFields.length > 1) {\n              DynamicCopy[] temp = new DynamicCopy[dynamicCopyFields.length - 1];\n              System.arraycopy(dynamicCopyFields, 0, temp, 0, i);\n              // skip over the dynamic copy field to be deleted\n              System.arraycopy(dynamicCopyFields, i + 1, temp, i, dynamicCopyFields.length - i - 1);\n              dynamicCopyFields = temp;\n            } else {\n              dynamicCopyFields = null;\n            }\n            break;\n          }\n        }\n      }\n    } else { // non-dynamic copy field directive\n      List<CopyField> copyFieldList = copyFieldsMap.get(source);\n      if (copyFieldList != null) {\n        for (Iterator<CopyField> iter = copyFieldList.iterator() ; iter.hasNext() ; ) {\n          CopyField copyField = iter.next();\n          if (dest.equals(copyField.getDestination().getName())) {\n            found = true;\n            decrementCopyFieldTargetCount(copyField.getDestination());\n            iter.remove();\n            if (copyFieldList.isEmpty()) {\n              copyFieldsMap.remove(source);\n            }\n            break;\n          }\n        }\n      }\n    }\n    if ( ! found) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Copy field directive not found: '\" + source + \"' -> '\" + dest + \"'\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aa4053d832bb1d5950f8e19afa8aedb2bcdf215","date":1580832211,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteCopyField(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteCopyField(String,String).mjava","sourceNew":"  private void deleteCopyField(String source, String dest) {\n    // Assumption: a copy field directive will exist only if the source & destination (dynamic) fields exist\n    SchemaField destSchemaField = fields.get(dest);\n    SchemaField sourceSchemaField = fields.get(source);\n\n    final String invalidGlobMessage = \"is an invalid glob: either it contains more than one asterisk,\"\n        + \" or the asterisk occurs neither at the start nor at the end.\";\n    if (source.contains(\"*\") && ! isValidFieldGlob(source)) {\n      String msg = \"copyField source '\" + source + \"' \" + invalidGlobMessage;\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n    if (dest.contains(\"*\") && ! isValidFieldGlob(dest)) {\n      String msg = \"copyField dest '\" + dest + \"' \" + invalidGlobMessage;\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n\n    boolean found = false;\n\n    if (null == destSchemaField || null == sourceSchemaField) { // Must be dynamic copy field\n      for (int i = 0; i < dynamicCopyFields.length; ++i) {\n        DynamicCopy dynamicCopy = dynamicCopyFields[i];\n        if (source.equals(dynamicCopy.getRegex()) && dest.equals(dynamicCopy.getDestFieldName())) {\n          found = true;\n          SchemaField destinationPrototype = dynamicCopy.getDestination().getPrototype();\n          if (copyFieldTargetCounts.containsKey(destinationPrototype)) {\n            decrementCopyFieldTargetCount(destinationPrototype);\n          }\n          if (dynamicCopyFields.length > 1) {\n            DynamicCopy[] temp = new DynamicCopy[dynamicCopyFields.length - 1];\n            System.arraycopy(dynamicCopyFields, 0, temp, 0, i);\n            // skip over the dynamic copy field to be deleted\n            System.arraycopy(dynamicCopyFields, i + 1, temp, i, dynamicCopyFields.length - i - 1);\n            dynamicCopyFields = temp;\n          } else {\n            dynamicCopyFields = new DynamicCopy[] {};\n          }\n          break;\n        }\n      }\n    }\n\n    if (!found) {\n      // non-dynamic copy field directive.\n      // Here, source field could either exists in schema or match a dynamic rule\n      List<CopyField> copyFieldList = copyFieldsMap.get(source);\n      if (copyFieldList != null) {\n        for (Iterator<CopyField> iter = copyFieldList.iterator() ; iter.hasNext() ; ) {\n          CopyField copyField = iter.next();\n          if (dest.equals(copyField.getDestination().getName())) {\n            found = true;\n            decrementCopyFieldTargetCount(copyField.getDestination());\n            iter.remove();\n            if (copyFieldList.isEmpty()) {\n              copyFieldsMap.remove(source);\n            }\n            break;\n          }\n        }\n      }\n    }\n    if ( ! found) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Copy field directive not found: '\" + source + \"' -> '\" + dest + \"'\");\n    }\n  }\n\n","sourceOld":"  private void deleteCopyField(String source, String dest) {\n    // Assumption: a copy field directive will exist only if the source & destination (dynamic) fields exist\n    SchemaField destSchemaField = fields.get(dest);\n    SchemaField sourceSchemaField = fields.get(source);\n\n    final String invalidGlobMessage = \"is an invalid glob: either it contains more than one asterisk,\"\n        + \" or the asterisk occurs neither at the start nor at the end.\";\n    if (source.contains(\"*\") && ! isValidFieldGlob(source)) {\n      String msg = \"copyField source '\" + source + \"' \" + invalidGlobMessage;\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n    if (dest.contains(\"*\") && ! isValidFieldGlob(dest)) {\n      String msg = \"copyField dest '\" + dest + \"' \" + invalidGlobMessage;\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n\n    boolean found = false;\n\n    if (null == destSchemaField || null == sourceSchemaField) { // Must be dynamic copy field\n      for (int i = 0; i < dynamicCopyFields.length; ++i) {\n        DynamicCopy dynamicCopy = dynamicCopyFields[i];\n        if (source.equals(dynamicCopy.getRegex()) && dest.equals(dynamicCopy.getDestFieldName())) {\n          found = true;\n          SchemaField destinationPrototype = dynamicCopy.getDestination().getPrototype();\n          if (copyFieldTargetCounts.containsKey(destinationPrototype)) {\n            decrementCopyFieldTargetCount(destinationPrototype);\n          }\n          if (dynamicCopyFields.length > 1) {\n            DynamicCopy[] temp = new DynamicCopy[dynamicCopyFields.length - 1];\n            System.arraycopy(dynamicCopyFields, 0, temp, 0, i);\n            // skip over the dynamic copy field to be deleted\n            System.arraycopy(dynamicCopyFields, i + 1, temp, i, dynamicCopyFields.length - i - 1);\n            dynamicCopyFields = temp;\n          } else {\n            dynamicCopyFields = new DynamicCopy[] {};\n          }\n          break;\n        }\n      }\n    } else { // non-dynamic copy field directive\n      List<CopyField> copyFieldList = copyFieldsMap.get(source);\n      if (copyFieldList != null) {\n        for (Iterator<CopyField> iter = copyFieldList.iterator() ; iter.hasNext() ; ) {\n          CopyField copyField = iter.next();\n          if (dest.equals(copyField.getDestination().getName())) {\n            found = true;\n            decrementCopyFieldTargetCount(copyField.getDestination());\n            iter.remove();\n            if (copyFieldList.isEmpty()) {\n              copyFieldsMap.remove(source);\n            }\n            break;\n          }\n        }\n      }\n    }\n    if ( ! found) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Copy field directive not found: '\" + source + \"' -> '\" + dest + \"'\");\n    }\n  }\n\n","bugFix":["eeeea2295d6355a29e259130a5c48ace73022d7c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1aa4053d832bb1d5950f8e19afa8aedb2bcdf215":["43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a7a7509102c58cf4f57c425a621aaa20575804b2"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3":["a7a7509102c58cf4f57c425a621aaa20575804b2"],"a7a7509102c58cf4f57c425a621aaa20575804b2":["eeeea2295d6355a29e259130a5c48ace73022d7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1aa4053d832bb1d5950f8e19afa8aedb2bcdf215"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a7a7509102c58cf4f57c425a621aaa20575804b2","43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3"]},"commit2Childs":{"1aa4053d832bb1d5950f8e19afa8aedb2bcdf215":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"eeeea2295d6355a29e259130a5c48ace73022d7c":["a7a7509102c58cf4f57c425a621aaa20575804b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","eeeea2295d6355a29e259130a5c48ace73022d7c"],"43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3":["1aa4053d832bb1d5950f8e19afa8aedb2bcdf215","b0b597c65628ca9e73913a07e81691f8229bae35"],"a7a7509102c58cf4f57c425a621aaa20575804b2":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}