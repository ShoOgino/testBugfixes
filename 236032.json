{"path":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","commits":[{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  // called from parser\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws SyntaxError {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // called from parser\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws SyntaxError {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82387c09d589bad6a23aabfc649893c771748599","date":1483047809,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  // called from parser\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws SyntaxError {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n\n    if (part1 == null) {\n      ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(sf.getType());\n      if (factory != null) {\n        // There will be reversed tokens starting with u0001 that we want to exclude, so\n        // lets start at u0002 inclusive instead.\n        char[] buf = new char[1];\n        buf[0] = ReverseStringFilter.START_OF_HEADING_MARKER + 1;\n        part1 = new String(buf);\n        startInclusive = true;\n      }\n    }\n\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  // called from parser\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws SyntaxError {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de0b5d8cac74be1676bcc2f805bc0d0630176659","date":1483048659,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  // called from parser\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws SyntaxError {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n\n    if (part1 == null) {\n      ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(sf.getType());\n      if (factory != null) {\n        // There will be reversed tokens starting with u0001 that we want to exclude, so\n        // lets start at u0002 inclusive instead.\n        char[] buf = new char[1];\n        buf[0] = ReverseStringFilter.START_OF_HEADING_MARKER + 1;\n        part1 = new String(buf);\n        startInclusive = true;\n      }\n    }\n\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  // called from parser\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws SyntaxError {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  // called from parser\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws SyntaxError {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n\n    if (part1 == null) {\n      ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(sf.getType());\n      if (factory != null) {\n        // There will be reversed tokens starting with u0001 that we want to exclude, so\n        // lets start at u0002 inclusive instead.\n        char[] buf = new char[1];\n        buf[0] = ReverseStringFilter.START_OF_HEADING_MARKER + 1;\n        part1 = new String(buf);\n        startInclusive = true;\n      }\n    }\n\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  // called from parser\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws SyntaxError {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ccff665065c8b73e2b143bd5d0277fdb3c8e7f0b","date":1483542662,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  // called from parser\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws SyntaxError {\n    boolean reverse = isRangeShouldBeProtectedFromReverse(field, part1);\n    return getRangeQueryImpl(field, reverse ? REVERSE_WILDCARD_LOWER_BOUND : part1, part2, startInclusive || reverse, endInclusive);\n  }\n\n","sourceOld":"  // called from parser\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws SyntaxError {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n\n    if (part1 == null) {\n      ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(sf.getType());\n      if (factory != null) {\n        // There will be reversed tokens starting with u0001 that we want to exclude, so\n        // lets start at u0002 inclusive instead.\n        char[] buf = new char[1];\n        buf[0] = ReverseStringFilter.START_OF_HEADING_MARKER + 1;\n        part1 = new String(buf);\n        startInclusive = true;\n      }\n    }\n\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"491c9672ec42582fe43960452dbd37f1c80fe0f0","date":1483739222,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  // called from parser\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws SyntaxError {\n    boolean reverse = isRangeShouldBeProtectedFromReverse(field, part1);\n    return getRangeQueryImpl(field, reverse ? REVERSE_WILDCARD_LOWER_BOUND : part1, part2, startInclusive || reverse, endInclusive);\n  }\n\n","sourceOld":"  // called from parser\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws SyntaxError {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n\n    if (part1 == null) {\n      ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(sf.getType());\n      if (factory != null) {\n        // There will be reversed tokens starting with u0001 that we want to exclude, so\n        // lets start at u0002 inclusive instead.\n        char[] buf = new char[1];\n        buf[0] = ReverseStringFilter.START_OF_HEADING_MARKER + 1;\n        part1 = new String(buf);\n        startInclusive = true;\n      }\n    }\n\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"82387c09d589bad6a23aabfc649893c771748599":["3cdb67100dc016748799a77218aa409478372d79"],"de0b5d8cac74be1676bcc2f805bc0d0630176659":["3cdb67100dc016748799a77218aa409478372d79","82387c09d589bad6a23aabfc649893c771748599"],"3cdb67100dc016748799a77218aa409478372d79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb67100dc016748799a77218aa409478372d79"],"ccff665065c8b73e2b143bd5d0277fdb3c8e7f0b":["de0b5d8cac74be1676bcc2f805bc0d0630176659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ccff665065c8b73e2b143bd5d0277fdb3c8e7f0b"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["3cdb67100dc016748799a77218aa409478372d79","de0b5d8cac74be1676bcc2f805bc0d0630176659"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["f03e4bed5023ec3ef93a771b8888cae991cf448d","ccff665065c8b73e2b143bd5d0277fdb3c8e7f0b"]},"commit2Childs":{"82387c09d589bad6a23aabfc649893c771748599":["de0b5d8cac74be1676bcc2f805bc0d0630176659"],"de0b5d8cac74be1676bcc2f805bc0d0630176659":["ccff665065c8b73e2b143bd5d0277fdb3c8e7f0b","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"3cdb67100dc016748799a77218aa409478372d79":["82387c09d589bad6a23aabfc649893c771748599","de0b5d8cac74be1676bcc2f805bc0d0630176659","407687e67faf6e1f02a211ca078d8e3eed631027","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"ccff665065c8b73e2b143bd5d0277fdb3c8e7f0b":["cd5edd1f2b162a5cfa08efd17851a07373a96817","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["491c9672ec42582fe43960452dbd37f1c80fe0f0"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}