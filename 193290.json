{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#testAugmentersGlobsExplicitAndScoreOhMy().mjava","commits":[{"id":"934e1c7ca2823f3ec2758cc0f0912eac404856f2","date":1467837741,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#testAugmentersGlobsExplicitAndScoreOhMy().mjava","pathOld":"/dev/null","sourceNew":"  public void testAugmentersGlobsExplicitAndScoreOhMy() throws Exception {\n    Random random = random();\n\n    // NOTE: 'ssto' is the missing one\n    final List<String> fl = Arrays.asList\n      (\"id\",\"[docid]\",\"[explain]\",\"score\",\"val_*\",\"subj*\");\n    \n    final int iters = atLeast(random, 10);\n    for (int i = 0; i< iters; i++) {\n      \n      Collections.shuffle(fl, random);\n\n      final SolrParams singleFl = params(\"q\",\"*:*\", \"rows\", \"1\",\"fl\",StringUtils.join(fl.toArray(),','));\n      final ModifiableSolrParams multiFl = params(\"q\",\"*:*\", \"rows\", \"1\");\n      for (String item : fl) {\n        multiFl.add(\"fl\",item);\n      }\n      for (SolrParams params : Arrays.asList(singleFl, multiFl)) {\n        SolrDocumentList docs = assertSearch(params);\n        assertEquals(params + \" => \" + docs, 5, docs.getNumFound());\n        // shouldn't matter what doc we pick...\n        for (SolrDocument doc : docs) {\n          String msg = params + \" => \" + doc;\n          assertEquals(msg, 6, doc.size());\n          assertTrue(msg, doc.getFieldValue(\"id\") instanceof String);\n          assertTrue(msg, doc.getFieldValue(\"[docid]\") instanceof Integer);\n          assertTrue(msg, doc.getFieldValue(\"[explain]\") instanceof String);\n          assertTrue(msg, doc.getFieldValue(\"score\") instanceof Float);\n          assertTrue(msg, doc.getFieldValue(\"val_i\") instanceof Integer);\n          assertTrue(msg, doc.getFieldValue(\"subject\") instanceof String);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#testAugmentersGlobsExplicitAndScoreOhMy().mjava","pathOld":"/dev/null","sourceNew":"  public void testAugmentersGlobsExplicitAndScoreOhMy() throws Exception {\n    Random random = random();\n\n    // NOTE: 'ssto' is the missing one\n    final List<String> fl = Arrays.asList\n      (\"id\",\"[docid]\",\"[explain]\",\"score\",\"val_*\",\"subj*\");\n    \n    final int iters = atLeast(random, 10);\n    for (int i = 0; i< iters; i++) {\n      \n      Collections.shuffle(fl, random);\n\n      final SolrParams singleFl = params(\"q\",\"*:*\", \"rows\", \"1\",\"fl\",StringUtils.join(fl.toArray(),','));\n      final ModifiableSolrParams multiFl = params(\"q\",\"*:*\", \"rows\", \"1\");\n      for (String item : fl) {\n        multiFl.add(\"fl\",item);\n      }\n      for (SolrParams params : Arrays.asList(singleFl, multiFl)) {\n        SolrDocumentList docs = assertSearch(params);\n        assertEquals(params + \" => \" + docs, 5, docs.getNumFound());\n        // shouldn't matter what doc we pick...\n        for (SolrDocument doc : docs) {\n          String msg = params + \" => \" + doc;\n          assertEquals(msg, 6, doc.size());\n          assertTrue(msg, doc.getFieldValue(\"id\") instanceof String);\n          assertTrue(msg, doc.getFieldValue(\"[docid]\") instanceof Integer);\n          assertTrue(msg, doc.getFieldValue(\"[explain]\") instanceof String);\n          assertTrue(msg, doc.getFieldValue(\"score\") instanceof Float);\n          assertTrue(msg, doc.getFieldValue(\"val_i\") instanceof Integer);\n          assertTrue(msg, doc.getFieldValue(\"subject\") instanceof String);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ac6494315d04f68950d2f00f5436b4861bcd467","date":1553125039,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#testAugmentersGlobsExplicitAndScoreOhMy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#testAugmentersGlobsExplicitAndScoreOhMy().mjava","sourceNew":"  public void testAugmentersGlobsExplicitAndScoreOhMy() throws Exception {\n    Random random = random();\n\n    // NOTE: 'ssto' is the missing one\n    final List<String> fl = Arrays.asList\n      (\"id\",\"[docid]\",\"[explain]\",\"score\",\"val_*\",\"subj*\");\n    \n    final int iters = atLeast(random, 10);\n    for (int i = 0; i< iters; i++) {\n      \n      Collections.shuffle(fl, random);\n\n      final SolrParams singleFl = params(\"q\",\"*:*\", \"rows\", \"1\",\"fl\",String.join(\",\", fl));\n      final ModifiableSolrParams multiFl = params(\"q\",\"*:*\", \"rows\", \"1\");\n      for (String item : fl) {\n        multiFl.add(\"fl\",item);\n      }\n      for (SolrParams params : Arrays.asList(singleFl, multiFl)) {\n        SolrDocumentList docs = assertSearch(params);\n        assertEquals(params + \" => \" + docs, 5, docs.getNumFound());\n        // shouldn't matter what doc we pick...\n        for (SolrDocument doc : docs) {\n          String msg = params + \" => \" + doc;\n          assertEquals(msg, 6, doc.size());\n          assertTrue(msg, doc.getFieldValue(\"id\") instanceof String);\n          assertTrue(msg, doc.getFieldValue(\"[docid]\") instanceof Integer);\n          assertTrue(msg, doc.getFieldValue(\"[explain]\") instanceof String);\n          assertTrue(msg, doc.getFieldValue(\"score\") instanceof Float);\n          assertTrue(msg, doc.getFieldValue(\"val_i\") instanceof Integer);\n          assertTrue(msg, doc.getFieldValue(\"subject\") instanceof String);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testAugmentersGlobsExplicitAndScoreOhMy() throws Exception {\n    Random random = random();\n\n    // NOTE: 'ssto' is the missing one\n    final List<String> fl = Arrays.asList\n      (\"id\",\"[docid]\",\"[explain]\",\"score\",\"val_*\",\"subj*\");\n    \n    final int iters = atLeast(random, 10);\n    for (int i = 0; i< iters; i++) {\n      \n      Collections.shuffle(fl, random);\n\n      final SolrParams singleFl = params(\"q\",\"*:*\", \"rows\", \"1\",\"fl\",StringUtils.join(fl.toArray(),','));\n      final ModifiableSolrParams multiFl = params(\"q\",\"*:*\", \"rows\", \"1\");\n      for (String item : fl) {\n        multiFl.add(\"fl\",item);\n      }\n      for (SolrParams params : Arrays.asList(singleFl, multiFl)) {\n        SolrDocumentList docs = assertSearch(params);\n        assertEquals(params + \" => \" + docs, 5, docs.getNumFound());\n        // shouldn't matter what doc we pick...\n        for (SolrDocument doc : docs) {\n          String msg = params + \" => \" + doc;\n          assertEquals(msg, 6, doc.size());\n          assertTrue(msg, doc.getFieldValue(\"id\") instanceof String);\n          assertTrue(msg, doc.getFieldValue(\"[docid]\") instanceof Integer);\n          assertTrue(msg, doc.getFieldValue(\"[explain]\") instanceof String);\n          assertTrue(msg, doc.getFieldValue(\"score\") instanceof Float);\n          assertTrue(msg, doc.getFieldValue(\"val_i\") instanceof Integer);\n          assertTrue(msg, doc.getFieldValue(\"subject\") instanceof String);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"934e1c7ca2823f3ec2758cc0f0912eac404856f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0ac6494315d04f68950d2f00f5436b4861bcd467":["934e1c7ca2823f3ec2758cc0f0912eac404856f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","934e1c7ca2823f3ec2758cc0f0912eac404856f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0ac6494315d04f68950d2f00f5436b4861bcd467"]},"commit2Childs":{"934e1c7ca2823f3ec2758cc0f0912eac404856f2":["0ac6494315d04f68950d2f00f5436b4861bcd467","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"0ac6494315d04f68950d2f00f5436b4861bcd467":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["934e1c7ca2823f3ec2758cc0f0912eac404856f2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}