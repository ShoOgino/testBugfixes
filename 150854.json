{"path":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil#assertShardInSync(String,String,CloudSolrClient).mjava","commits":[{"id":"6ee2533508e7cceb7551bb7deaeaf89dfa3767b9","date":1523659106,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil#assertShardInSync(String,String,CloudSolrClient).mjava","pathOld":"/dev/null","sourceNew":"  protected static boolean assertShardInSync(String collection, String shard, CloudSolrClient client) throws IOException, SolrServerException {\n    TimeOut waitTimeOut = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    DocCollection docCollection = client.getZkStateReader().getClusterState().getCollection(collection);\n    Slice correctSlice = null;\n    for (Slice slice : docCollection.getSlices()) {\n      if (shard.equals(slice.getName())) {\n        correctSlice = slice;\n        break;\n      }\n    }\n    assertNotNull(correctSlice);\n\n    long leaderDocCount;\n    try (HttpSolrClient leaderClient = new HttpSolrClient.Builder(correctSlice.getLeader().getCoreUrl()).withHttpClient(client.getHttpClient()).build()) {\n      leaderDocCount = leaderClient.query(new SolrQuery(\"*:*\").setParam(\"distrib\", \"false\")).getResults().getNumFound();\n    }\n\n    while (!waitTimeOut.hasTimedOut()) {\n      int replicasInSync = 0;\n      for (Replica replica : correctSlice.getReplicas()) {\n        try (HttpSolrClient leaderClient = new HttpSolrClient.Builder(replica.getCoreUrl()).withHttpClient(client.getHttpClient()).build()) {\n          long replicaDocCount = leaderClient.query(new SolrQuery(\"*:*\").setParam(\"distrib\", \"false\")).getResults().getNumFound();\n          if (replicaDocCount == leaderDocCount) replicasInSync++;\n        }\n      }\n      if (replicasInSync == correctSlice.getReplicas().size()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil#assertShardInSync(String,String,CloudSolrClient).mjava","sourceNew":null,"sourceOld":"  protected static boolean assertShardInSync(String collection, String shard, CloudSolrClient client) throws IOException, SolrServerException {\n    TimeOut waitTimeOut = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    DocCollection docCollection = client.getZkStateReader().getClusterState().getCollection(collection);\n    Slice correctSlice = null;\n    for (Slice slice : docCollection.getSlices()) {\n      if (shard.equals(slice.getName())) {\n        correctSlice = slice;\n        break;\n      }\n    }\n    assertNotNull(correctSlice);\n\n    long leaderDocCount;\n    try (HttpSolrClient leaderClient = new HttpSolrClient.Builder(correctSlice.getLeader().getCoreUrl()).withHttpClient(client.getHttpClient()).build()) {\n      leaderDocCount = leaderClient.query(new SolrQuery(\"*:*\").setParam(\"distrib\", \"false\")).getResults().getNumFound();\n    }\n\n    while (!waitTimeOut.hasTimedOut()) {\n      int replicasInSync = 0;\n      for (Replica replica : correctSlice.getReplicas()) {\n        try (HttpSolrClient leaderClient = new HttpSolrClient.Builder(replica.getCoreUrl()).withHttpClient(client.getHttpClient()).build()) {\n          long replicaDocCount = leaderClient.query(new SolrQuery(\"*:*\").setParam(\"distrib\", \"false\")).getResults().getNumFound();\n          if (replicaDocCount == leaderDocCount) replicasInSync++;\n        }\n      }\n      if (replicasInSync == correctSlice.getReplicas().size()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6ee2533508e7cceb7551bb7deaeaf89dfa3767b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["6ee2533508e7cceb7551bb7deaeaf89dfa3767b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"6ee2533508e7cceb7551bb7deaeaf89dfa3767b9":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ee2533508e7cceb7551bb7deaeaf89dfa3767b9"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}