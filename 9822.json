{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseFacetOrStat(String,Object).mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseFacetOrStat(String,Object).mjava","pathOld":"/dev/null","sourceNew":"  public Object parseFacetOrStat(String key, Object o) throws SyntaxError {\n   if (o instanceof String) {\n     return parseStringFacetOrStat(key, (String)o);\n   }\n\n   if (!(o instanceof Map)) {\n     throw err(\"expected Map but got \" + o);\n   }\n\n   // { \"range\" : { \"field\":...\n  Map<String,Object> m = (Map<String,Object>)o;\n  if (m.size() != 1) {\n    throw err(\"expected facet/stat type name, like {range:{... but got \" + m);\n  }\n\n    // Is this most efficient way?\n    Map.Entry<String,Object> entry = m.entrySet().iterator().next();\n    String type = entry.getKey();\n    Object args = entry.getValue();\n    return parseFacetOrStat(key, type, args);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseFacetOrStat(String,Object).mjava","pathOld":"/dev/null","sourceNew":"  public Object parseFacetOrStat(String key, Object o) throws SyntaxError {\n   if (o instanceof String) {\n     return parseStringFacetOrStat(key, (String)o);\n   }\n\n   if (!(o instanceof Map)) {\n     throw err(\"expected Map but got \" + o);\n   }\n\n   // { \"range\" : { \"field\":...\n  Map<String,Object> m = (Map<String,Object>)o;\n  if (m.size() != 1) {\n    throw err(\"expected facet/stat type name, like {range:{... but got \" + m);\n  }\n\n    // Is this most efficient way?\n    Map.Entry<String,Object> entry = m.entrySet().iterator().next();\n    String type = entry.getKey();\n    Object args = entry.getValue();\n    return parseFacetOrStat(key, type, args);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6cd895cde6129001dd80a6ac66430e57b1e8186f","date":1429367246,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseFacetOrStat(String,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseFacetOrStat(String,Object).mjava","sourceNew":"  public Object parseFacetOrStat(String key, Object o) throws SyntaxError {\n\n    if (o instanceof String) {\n      return parseStringFacetOrStat(key, (String)o);\n    }\n\n    if (!(o instanceof Map)) {\n      throw err(\"expected Map but got \" + o);\n    }\n\n    // The type can be in a one element map, or inside the args as the \"type\" field\n    // { \"query\" : \"foo:bar\" }\n    // { \"range\" : { \"field\":... } }\n    // { \"type\"  : range, field : myfield, ... }\n    Map<String,Object> m = (Map<String,Object>)o;\n    String type;\n    Object args;\n\n    if (m.size() == 1) {\n      Map.Entry<String,Object> entry = m.entrySet().iterator().next();\n      type = entry.getKey();\n      args = entry.getValue();\n      // throw err(\"expected facet/stat type name, like {range:{... but got \" + m);\n    } else {\n      // type should be inside the map as a parameter\n      Object typeObj = m.get(\"type\");\n      if (!(typeObj instanceof String)) {\n          throw err(\"expected facet/stat type name, like {type:range, field:price, ...} but got \" + typeObj);\n      }\n      type = (String)typeObj;\n      args = m;\n    }\n\n    return parseFacetOrStat(key, type, args);\n  }\n\n","sourceOld":"  public Object parseFacetOrStat(String key, Object o) throws SyntaxError {\n   if (o instanceof String) {\n     return parseStringFacetOrStat(key, (String)o);\n   }\n\n   if (!(o instanceof Map)) {\n     throw err(\"expected Map but got \" + o);\n   }\n\n   // { \"range\" : { \"field\":...\n  Map<String,Object> m = (Map<String,Object>)o;\n  if (m.size() != 1) {\n    throw err(\"expected facet/stat type name, like {range:{... but got \" + m);\n  }\n\n    // Is this most efficient way?\n    Map.Entry<String,Object> entry = m.entrySet().iterator().next();\n    String type = entry.getKey();\n    Object args = entry.getValue();\n    return parseFacetOrStat(key, type, args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"248f6ecc900c3a5633fd5ca6f564ea8b717720da","date":1588863846,"type":4,"author":"Mike Drob","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseFacetOrStat(String,Object).mjava","sourceNew":null,"sourceOld":"  public Object parseFacetOrStat(String key, Object o) throws SyntaxError {\n\n    if (o instanceof String) {\n      return parseStringFacetOrStat(key, (String)o);\n    }\n\n    if (!(o instanceof Map)) {\n      throw err(\"expected Map but got \" + o);\n    }\n\n    // The type can be in a one element map, or inside the args as the \"type\" field\n    // { \"query\" : \"foo:bar\" }\n    // { \"range\" : { \"field\":... } }\n    // { \"type\"  : range, field : myfield, ... }\n    Map<String,Object> m = (Map<String,Object>)o;\n    String type;\n    Object args;\n\n    if (m.size() == 1) {\n      Map.Entry<String,Object> entry = m.entrySet().iterator().next();\n      type = entry.getKey();\n      args = entry.getValue();\n      // throw err(\"expected facet/stat type name, like {range:{... but got \" + m);\n    } else {\n      // type should be inside the map as a parameter\n      Object typeObj = m.get(\"type\");\n      if (!(typeObj instanceof String)) {\n          throw err(\"expected facet/stat type name, like {type:range, field:price, ...} but got \" + typeObj);\n      }\n      type = (String)typeObj;\n      args = m;\n    }\n\n    return parseFacetOrStat(key, type, args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["6cd895cde6129001dd80a6ac66430e57b1e8186f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"6cd895cde6129001dd80a6ac66430e57b1e8186f":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","6cd895cde6129001dd80a6ac66430e57b1e8186f"],"6cd895cde6129001dd80a6ac66430e57b1e8186f":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}