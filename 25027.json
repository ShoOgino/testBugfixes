{"path":"solr/contrib/analysis-extras/src/java/org/apache/solr/update/processor/OpenNLPExtractNamedEntitiesUpdateProcessorFactory#init(NamedList).mjava","commits":[{"id":"afc5b4b2446e392448f36ae4f5a164540f2ccb65","date":1513355058,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/java/org/apache/solr/update/processor/OpenNLPExtractNamedEntitiesUpdateProcessorFactory#init(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n\n    // high level (loose) check for which type of config we have.\n    //\n    // individual init methods do more strict syntax checking\n    if (0 <= args.indexOf(SOURCE_PARAM, 0) && 0 <= args.indexOf(DEST_PARAM, 0) ) {\n      initSourceSelectorSyntax(args);\n    } else if (0 <= args.indexOf(PATTERN_PARAM, 0) && 0 <= args.indexOf(REPLACEMENT_PARAM, 0)) {\n      initSimpleRegexReplacement(args);\n    } else {\n      throw new SolrException(SERVER_ERROR, \"A combination of either '\" + SOURCE_PARAM + \"' + '\"+\n          DEST_PARAM + \"', or '\" + REPLACEMENT_PARAM + \"' + '\" +\n          PATTERN_PARAM + \"' init params are mandatory\");\n    }\n\n    Object modelParam = args.remove(MODEL_PARAM);\n    if (null == modelParam) {\n      throw new SolrException(SERVER_ERROR, \"Missing required init param '\" + MODEL_PARAM + \"'\");\n    }\n    if ( ! (modelParam instanceof CharSequence)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + MODEL_PARAM + \"' must be a <str>\");\n    }\n    modelFile = modelParam.toString();\n\n    Object analyzerFieldTypeParam = args.remove(ANALYZER_FIELD_TYPE_PARAM);\n    if (null == analyzerFieldTypeParam) {\n      throw new SolrException(SERVER_ERROR, \"Missing required init param '\" + ANALYZER_FIELD_TYPE_PARAM + \"'\");\n    }\n    if ( ! (analyzerFieldTypeParam instanceof CharSequence)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + ANALYZER_FIELD_TYPE_PARAM + \"' must be a <str>\");\n    }\n    analyzerFieldType = analyzerFieldTypeParam.toString();\n\n    if (0 < args.size()) {\n      throw new SolrException(SERVER_ERROR, \"Unexpected init param(s): '\" + args.getName(0) + \"'\");\n    }\n\n    super.init(args);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc","date":1591973782,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/java/org/apache/solr/update/processor/OpenNLPExtractNamedEntitiesUpdateProcessorFactory#init(NamedList).mjava","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/update/processor/OpenNLPExtractNamedEntitiesUpdateProcessorFactory#init(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n\n    // high level (loose) check for which type of config we have.\n    //\n    // individual init methods do more strict syntax checking\n    if (0 <= args.indexOf(SOURCE_PARAM, 0) && 0 <= args.indexOf(DEST_PARAM, 0) ) {\n      initSourceSelectorSyntax(args);\n    } else if (0 <= args.indexOf(PATTERN_PARAM, 0) && 0 <= args.indexOf(REPLACEMENT_PARAM, 0)) {\n      initSimpleRegexReplacement(args);\n    } else {\n      throw new SolrException(SERVER_ERROR, \"A combination of either '\" + SOURCE_PARAM + \"' + '\"+\n          DEST_PARAM + \"', or '\" + REPLACEMENT_PARAM + \"' + '\" +\n          PATTERN_PARAM + \"' init params are mandatory\");\n    }\n\n    Object modelParam = args.remove(MODEL_PARAM);\n    if (null == modelParam) {\n      throw new SolrException(SERVER_ERROR, \"Missing required init param '\" + MODEL_PARAM + \"'\");\n    }\n    if ( ! (modelParam instanceof CharSequence)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + MODEL_PARAM + \"' must be a <str>\");\n    }\n    modelFile = modelParam.toString();\n\n    Object analyzerFieldTypeParam = args.remove(ANALYZER_FIELD_TYPE_PARAM);\n    if (null == analyzerFieldTypeParam) {\n      throw new SolrException(SERVER_ERROR, \"Missing required init param '\" + ANALYZER_FIELD_TYPE_PARAM + \"'\");\n    }\n    if ( ! (analyzerFieldTypeParam instanceof CharSequence)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + ANALYZER_FIELD_TYPE_PARAM + \"' must be a <str>\");\n    }\n    analyzerFieldType = analyzerFieldTypeParam.toString();\n\n    if (0 < args.size()) {\n      throw new SolrException(SERVER_ERROR, \"Unexpected init param(s): '\" + args.getName(0) + \"'\");\n    }\n\n    super.init(args);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n\n    // high level (loose) check for which type of config we have.\n    //\n    // individual init methods do more strict syntax checking\n    if (0 <= args.indexOf(SOURCE_PARAM, 0) && 0 <= args.indexOf(DEST_PARAM, 0) ) {\n      initSourceSelectorSyntax(args);\n    } else if (0 <= args.indexOf(PATTERN_PARAM, 0) && 0 <= args.indexOf(REPLACEMENT_PARAM, 0)) {\n      initSimpleRegexReplacement(args);\n    } else {\n      throw new SolrException(SERVER_ERROR, \"A combination of either '\" + SOURCE_PARAM + \"' + '\"+\n          DEST_PARAM + \"', or '\" + REPLACEMENT_PARAM + \"' + '\" +\n          PATTERN_PARAM + \"' init params are mandatory\");\n    }\n\n    Object modelParam = args.remove(MODEL_PARAM);\n    if (null == modelParam) {\n      throw new SolrException(SERVER_ERROR, \"Missing required init param '\" + MODEL_PARAM + \"'\");\n    }\n    if ( ! (modelParam instanceof CharSequence)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + MODEL_PARAM + \"' must be a <str>\");\n    }\n    modelFile = modelParam.toString();\n\n    Object analyzerFieldTypeParam = args.remove(ANALYZER_FIELD_TYPE_PARAM);\n    if (null == analyzerFieldTypeParam) {\n      throw new SolrException(SERVER_ERROR, \"Missing required init param '\" + ANALYZER_FIELD_TYPE_PARAM + \"'\");\n    }\n    if ( ! (analyzerFieldTypeParam instanceof CharSequence)) {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + ANALYZER_FIELD_TYPE_PARAM + \"' must be a <str>\");\n    }\n    analyzerFieldType = analyzerFieldTypeParam.toString();\n\n    if (0 < args.size()) {\n      throw new SolrException(SERVER_ERROR, \"Unexpected init param(s): '\" + args.getName(0) + \"'\");\n    }\n\n    super.init(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc":["afc5b4b2446e392448f36ae4f5a164540f2ccb65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc"],"afc5b4b2446e392448f36ae4f5a164540f2ccb65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["afc5b4b2446e392448f36ae4f5a164540f2ccb65"],"c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"afc5b4b2446e392448f36ae4f5a164540f2ccb65":["c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}