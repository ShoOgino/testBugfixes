{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCount().mjava","commits":[{"id":"073a74201a21520f4fc543c9f6d1d87c19a467b2","date":1472788663,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCount().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void deleteReplicaByCount() throws Exception {\n    String collectionName = \"deleteByCount\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(collectionName, 1, 3, 5);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      DocCollection testcoll = getCommonCloudSolrClient().getZkStateReader()\n              .getClusterState().getCollection(collectionName);\n      Collection<Slice> slices = testcoll.getActiveSlices();\n      assertEquals(slices.size(), 1);\n      for (Slice individualShard:  slices) {\n        assertEquals(individualShard.getReplicas().size(),3);\n      }\n\n\n      try {\n        // Should not be able to delete 2 replicas (non leader ones for a given shard\n        tryRemoveReplicaByCountAndShard(collectionName, client, 2, \"shard1\");\n        testcoll = getCommonCloudSolrClient().getZkStateReader()\n                .getClusterState().getCollection(collectionName);\n        slices = testcoll.getActiveSlices();\n        assertEquals(slices.size(), 1);\n        for (Slice individualShard:  slices) {\n          assertEquals(individualShard.getReplicas().size(),1);\n        }\n\n      } catch (SolrException se) {\n        fail(\"Should have been able to remove the replica successfully\");\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCount().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void deleteReplicaByCount() throws Exception {\n    String collectionName = \"deleteByCount\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(collectionName, 1, 3, 5);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      DocCollection testcoll = getCommonCloudSolrClient().getZkStateReader()\n              .getClusterState().getCollection(collectionName);\n      Collection<Slice> slices = testcoll.getActiveSlices();\n      assertEquals(slices.size(), 1);\n      for (Slice individualShard:  slices) {\n        assertEquals(individualShard.getReplicas().size(),3);\n      }\n\n\n      try {\n        // Should not be able to delete 2 replicas (non leader ones for a given shard\n        tryRemoveReplicaByCountAndShard(collectionName, client, 2, \"shard1\");\n        testcoll = getCommonCloudSolrClient().getZkStateReader()\n                .getClusterState().getCollection(collectionName);\n        slices = testcoll.getActiveSlices();\n        assertEquals(slices.size(), 1);\n        for (Slice individualShard:  slices) {\n          assertEquals(individualShard.getReplicas().size(),1);\n        }\n\n      } catch (SolrException se) {\n        fail(\"Should have been able to remove the replica successfully\");\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"609b19bb8de96c4e5e338d1d4a0349957522b601","date":1474892114,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCount().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCount().mjava","sourceNew":"  @Test\n  public void deleteReplicaByCount() throws Exception {\n\n    final String collectionName = \"deleteByCount\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 3).process(cluster.getSolrClient());\n    waitForState(\"Expected a single shard with three replicas\", collectionName, clusterShape(1, 3));\n\n    CollectionAdminRequest.deleteReplicasFromShard(collectionName, \"shard1\", 2).process(cluster.getSolrClient());\n    waitForState(\"Expected a single shard with a single replica\", collectionName, clusterShape(1, 1));\n\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 4)\n  public void deleteReplicaByCount() throws Exception {\n    String collectionName = \"deleteByCount\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(collectionName, 1, 3, 5);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      DocCollection testcoll = getCommonCloudSolrClient().getZkStateReader()\n              .getClusterState().getCollection(collectionName);\n      Collection<Slice> slices = testcoll.getActiveSlices();\n      assertEquals(slices.size(), 1);\n      for (Slice individualShard:  slices) {\n        assertEquals(individualShard.getReplicas().size(),3);\n      }\n\n\n      try {\n        // Should not be able to delete 2 replicas (non leader ones for a given shard\n        tryRemoveReplicaByCountAndShard(collectionName, client, 2, \"shard1\");\n        testcoll = getCommonCloudSolrClient().getZkStateReader()\n                .getClusterState().getCollection(collectionName);\n        slices = testcoll.getActiveSlices();\n        assertEquals(slices.size(), 1);\n        for (Slice individualShard:  slices) {\n          assertEquals(individualShard.getReplicas().size(),1);\n        }\n\n      } catch (SolrException se) {\n        fail(\"Should have been able to remove the replica successfully\");\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCount().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void deleteReplicaByCount() throws Exception {\n\n    final String collectionName = \"deleteByCount\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 3).process(cluster.getSolrClient());\n    waitForState(\"Expected a single shard with three replicas\", collectionName, clusterShape(1, 3));\n\n    CollectionAdminRequest.deleteReplicasFromShard(collectionName, \"shard1\", 2).process(cluster.getSolrClient());\n    waitForState(\"Expected a single shard with a single replica\", collectionName, clusterShape(1, 1));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCount().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void deleteReplicaByCount() throws Exception {\n\n    final String collectionName = \"deleteByCount\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 3).process(cluster.getSolrClient());\n    waitForState(\"Expected a single shard with three replicas\", collectionName, clusterShape(1, 3));\n\n    CollectionAdminRequest.deleteReplicasFromShard(collectionName, \"shard1\", 2).process(cluster.getSolrClient());\n    waitForState(\"Expected a single shard with a single replica\", collectionName, clusterShape(1, 1));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCount().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCount().mjava","sourceNew":"  @Test\n  public void deleteReplicaByCount() throws Exception {\n\n    final String collectionName = \"deleteByCount\";\n    pickRandom(\n        CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 3),\n        CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 1, 1),\n        CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, 2),\n        CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 0, 1, 2))\n    .process(cluster.getSolrClient());\n    waitForState(\"Expected a single shard with three replicas\", collectionName, clusterShape(1, 3));\n\n    CollectionAdminRequest.deleteReplicasFromShard(collectionName, \"shard1\", 2).process(cluster.getSolrClient());\n    waitForState(\"Expected a single shard with a single replica\", collectionName, clusterShape(1, 1));\n    \n    try {\n      CollectionAdminRequest.deleteReplicasFromShard(collectionName, \"shard1\", 1).process(cluster.getSolrClient());\n      fail(\"Expected Exception, Can't delete the last replica by count\");\n    } catch (SolrException e) {\n      // expected\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"There is only one replica available\"));\n    }\n    DocCollection docCollection = getCollectionState(collectionName);\n    // We know that since leaders are preserved, PULL replicas should not be left alone in the shard\n    assertEquals(0, docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void deleteReplicaByCount() throws Exception {\n\n    final String collectionName = \"deleteByCount\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 3).process(cluster.getSolrClient());\n    waitForState(\"Expected a single shard with three replicas\", collectionName, clusterShape(1, 3));\n\n    CollectionAdminRequest.deleteReplicasFromShard(collectionName, \"shard1\", 2).process(cluster.getSolrClient());\n    waitForState(\"Expected a single shard with a single replica\", collectionName, clusterShape(1, 1));\n\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCount().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCount().mjava","sourceNew":"  @Test\n  public void deleteReplicaByCount() throws Exception {\n\n    final String collectionName = \"deleteByCount\";\n    pickRandom(\n        CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 3),\n        CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 1, 1),\n        CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, 2),\n        CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 0, 1, 2))\n    .process(cluster.getSolrClient());\n    waitForState(\"Expected a single shard with three replicas\", collectionName, clusterShape(1, 3));\n\n    CollectionAdminRequest.deleteReplicasFromShard(collectionName, \"shard1\", 2).process(cluster.getSolrClient());\n    waitForState(\"Expected a single shard with a single replica\", collectionName, clusterShape(1, 1));\n    \n    try {\n      CollectionAdminRequest.deleteReplicasFromShard(collectionName, \"shard1\", 1).process(cluster.getSolrClient());\n      fail(\"Expected Exception, Can't delete the last replica by count\");\n    } catch (SolrException e) {\n      // expected\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"There is only one replica available\"));\n    }\n    DocCollection docCollection = getCollectionState(collectionName);\n    // We know that since leaders are preserved, PULL replicas should not be left alone in the shard\n    assertEquals(0, docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void deleteReplicaByCount() throws Exception {\n\n    final String collectionName = \"deleteByCount\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 3).process(cluster.getSolrClient());\n    waitForState(\"Expected a single shard with three replicas\", collectionName, clusterShape(1, 3));\n\n    CollectionAdminRequest.deleteReplicasFromShard(collectionName, \"shard1\", 2).process(cluster.getSolrClient());\n    waitForState(\"Expected a single shard with a single replica\", collectionName, clusterShape(1, 1));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92f789dbd1886e4b468e61b0def88b29a3f55228","date":1533844010,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCount().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCount().mjava","sourceNew":"  @Test\n  public void deleteReplicaByCount() throws Exception {\n\n    final String collectionName = \"deleteByCount\";\n    pickRandom(\n        CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 3),\n        CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 1, 1),\n        CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, 2),\n        CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 0, 1, 2))\n    .process(cluster.getSolrClient());\n    waitForState(\"Expected a single shard with three replicas\", collectionName, clusterShape(1, 3));\n\n    CollectionAdminRequest.deleteReplicasFromShard(collectionName, \"shard1\", 2).process(cluster.getSolrClient());\n    waitForState(\"Expected a single shard with a single replica\", collectionName, clusterShape(1, 1));\n\n    SolrException e = expectThrows(SolrException.class,\n        \"Can't delete the last replica by count\",\n        () -> CollectionAdminRequest.deleteReplicasFromShard(collectionName, \"shard1\", 1).process(cluster.getSolrClient())\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n    assertTrue(e.getMessage().contains(\"There is only one replica available\"));\n    DocCollection docCollection = getCollectionState(collectionName);\n    // We know that since leaders are preserved, PULL replicas should not be left alone in the shard\n    assertEquals(0, docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n  }\n\n","sourceOld":"  @Test\n  public void deleteReplicaByCount() throws Exception {\n\n    final String collectionName = \"deleteByCount\";\n    pickRandom(\n        CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 3),\n        CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 1, 1),\n        CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, 2),\n        CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 0, 1, 2))\n    .process(cluster.getSolrClient());\n    waitForState(\"Expected a single shard with three replicas\", collectionName, clusterShape(1, 3));\n\n    CollectionAdminRequest.deleteReplicasFromShard(collectionName, \"shard1\", 2).process(cluster.getSolrClient());\n    waitForState(\"Expected a single shard with a single replica\", collectionName, clusterShape(1, 1));\n    \n    try {\n      CollectionAdminRequest.deleteReplicasFromShard(collectionName, \"shard1\", 1).process(cluster.getSolrClient());\n      fail(\"Expected Exception, Can't delete the last replica by count\");\n    } catch (SolrException e) {\n      // expected\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"There is only one replica available\"));\n    }\n    DocCollection docCollection = getCollectionState(collectionName);\n    // We know that since leaders are preserved, PULL replicas should not be left alone in the shard\n    assertEquals(0, docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCount().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCount().mjava","sourceNew":"  @Test\n  public void deleteReplicaByCount() throws Exception {\n\n    final String collectionName = \"deleteByCount\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 3).process(cluster.getSolrClient());\n    waitForState(\"Expected a single shard with three replicas\", collectionName, clusterShape(1, 3));\n\n    CollectionAdminRequest.deleteReplicasFromShard(collectionName, \"shard1\", 2).process(cluster.getSolrClient());\n    waitForState(\"Expected a single shard with a single replica\", collectionName, clusterShape(1, 1));\n\n    SolrException e = expectThrows(SolrException.class,\n        \"Can't delete the last replica by count\",\n        () -> CollectionAdminRequest.deleteReplicasFromShard(collectionName, \"shard1\", 1).process(cluster.getSolrClient())\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n    assertTrue(e.getMessage().contains(\"There is only one replica available\"));\n    DocCollection docCollection = getCollectionState(collectionName);\n    // We know that since leaders are preserved, PULL replicas should not be left alone in the shard\n    assertEquals(0, docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n  }\n\n","sourceOld":"  @Test\n  public void deleteReplicaByCount() throws Exception {\n\n    final String collectionName = \"deleteByCount\";\n    pickRandom(\n        CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 3),\n        CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 1, 1),\n        CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, 2),\n        CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 0, 1, 2))\n    .process(cluster.getSolrClient());\n    waitForState(\"Expected a single shard with three replicas\", collectionName, clusterShape(1, 3));\n\n    CollectionAdminRequest.deleteReplicasFromShard(collectionName, \"shard1\", 2).process(cluster.getSolrClient());\n    waitForState(\"Expected a single shard with a single replica\", collectionName, clusterShape(1, 1));\n\n    SolrException e = expectThrows(SolrException.class,\n        \"Can't delete the last replica by count\",\n        () -> CollectionAdminRequest.deleteReplicasFromShard(collectionName, \"shard1\", 1).process(cluster.getSolrClient())\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n    assertTrue(e.getMessage().contains(\"There is only one replica available\"));\n    DocCollection docCollection = getCollectionState(collectionName);\n    // We know that since leaders are preserved, PULL replicas should not be left alone in the shard\n    assertEquals(0, docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n  }\n\n","bugFix":["61c45e99cf6676da48f19d7511c73712ad39402b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"073a74201a21520f4fc543c9f6d1d87c19a467b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["92f789dbd1886e4b468e61b0def88b29a3f55228"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","609b19bb8de96c4e5e338d1d4a0349957522b601"],"609b19bb8de96c4e5e338d1d4a0349957522b601":["073a74201a21520f4fc543c9f6d1d87c19a467b2"],"92f789dbd1886e4b468e61b0def88b29a3f55228":["61c45e99cf6676da48f19d7511c73712ad39402b"],"bc8f206328a706450934717bec7ccc22ad166fc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","073a74201a21520f4fc543c9f6d1d87c19a467b2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"073a74201a21520f4fc543c9f6d1d87c19a467b2":["609b19bb8de96c4e5e338d1d4a0349957522b601","bc8f206328a706450934717bec7ccc22ad166fc0"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","92f789dbd1886e4b468e61b0def88b29a3f55228"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["073a74201a21520f4fc543c9f6d1d87c19a467b2","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"609b19bb8de96c4e5e338d1d4a0349957522b601":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"92f789dbd1886e4b468e61b0def88b29a3f55228":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}