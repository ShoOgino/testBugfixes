{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testSubPath().mjava","commits":[{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testSubPath().mjava","pathOld":"/dev/null","sourceNew":"  @Test \n  public void testSubPath() {\n    final CategoryPath p = new CategoryPath(\"hi\", \"there\", \"man\");\n    assertEquals(p.length, 3);\n    \n    CategoryPath p1 = p.subpath(2);\n    assertEquals(2, p1.length);\n    assertEquals(\"hi/there\", p1.toString('/'));\n\n    p1 = p.subpath(1);\n    assertEquals(1, p1.length);\n    assertEquals(\"hi\", p1.toString('/'));\n\n    p1 = p.subpath(0);\n    assertEquals(0, p1.length);\n    assertEquals(\"\", p1.toString('/'));\n\n    // with all the following lengths, the prefix should be the whole path \n    int[] lengths = { 3, -1, 4 };\n    for (int i = 0; i < lengths.length; i++) {\n      p1 = p.subpath(lengths[i]);\n      assertEquals(3, p1.length);\n      assertEquals(\"hi/there/man\", p1.toString('/'));\n      assertEquals(p, p1);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testSubPath().mjava","pathOld":"/dev/null","sourceNew":"  @Test \n  public void testSubPath() {\n    final CategoryPath p = new CategoryPath(\"hi\", \"there\", \"man\");\n    assertEquals(p.length, 3);\n    \n    CategoryPath p1 = p.subpath(2);\n    assertEquals(2, p1.length);\n    assertEquals(\"hi/there\", p1.toString('/'));\n\n    p1 = p.subpath(1);\n    assertEquals(1, p1.length);\n    assertEquals(\"hi\", p1.toString('/'));\n\n    p1 = p.subpath(0);\n    assertEquals(0, p1.length);\n    assertEquals(\"\", p1.toString('/'));\n\n    // with all the following lengths, the prefix should be the whole path \n    int[] lengths = { 3, -1, 4 };\n    for (int i = 0; i < lengths.length; i++) {\n      p1 = p.subpath(lengths[i]);\n      assertEquals(3, p1.length);\n      assertEquals(\"hi/there/man\", p1.toString('/'));\n      assertEquals(p, p1);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testSubPath().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testSubPath().mjava","sourceNew":"  @Test \n  public void testSubPath() {\n    final FacetLabel p = new FacetLabel(\"hi\", \"there\", \"man\");\n    assertEquals(p.length, 3);\n    \n    FacetLabel p1 = p.subpath(2);\n    assertEquals(2, p1.length);\n    assertEquals(\"hi/there\", p1.toString('/'));\n\n    p1 = p.subpath(1);\n    assertEquals(1, p1.length);\n    assertEquals(\"hi\", p1.toString('/'));\n\n    p1 = p.subpath(0);\n    assertEquals(0, p1.length);\n    assertEquals(\"\", p1.toString('/'));\n\n    // with all the following lengths, the prefix should be the whole path \n    int[] lengths = { 3, -1, 4 };\n    for (int i = 0; i < lengths.length; i++) {\n      p1 = p.subpath(lengths[i]);\n      assertEquals(3, p1.length);\n      assertEquals(\"hi/there/man\", p1.toString('/'));\n      assertEquals(p, p1);\n    }\n  }\n\n","sourceOld":"  @Test \n  public void testSubPath() {\n    final CategoryPath p = new CategoryPath(\"hi\", \"there\", \"man\");\n    assertEquals(p.length, 3);\n    \n    CategoryPath p1 = p.subpath(2);\n    assertEquals(2, p1.length);\n    assertEquals(\"hi/there\", p1.toString('/'));\n\n    p1 = p.subpath(1);\n    assertEquals(1, p1.length);\n    assertEquals(\"hi\", p1.toString('/'));\n\n    p1 = p.subpath(0);\n    assertEquals(0, p1.length);\n    assertEquals(\"\", p1.toString('/'));\n\n    // with all the following lengths, the prefix should be the whole path \n    int[] lengths = { 3, -1, 4 };\n    for (int i = 0; i < lengths.length; i++) {\n      p1 = p.subpath(lengths[i]);\n      assertEquals(3, p1.length);\n      assertEquals(\"hi/there/man\", p1.toString('/'));\n      assertEquals(p, p1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78522aad83283ca58fae08fd89406b65429d0229","date":1385573562,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestFacetLabel#testSubPath().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testSubPath().mjava","sourceNew":"  @Test \n  public void testSubPath() {\n    final FacetLabel p = new FacetLabel(\"hi\", \"there\", \"man\");\n    assertEquals(p.length, 3);\n    \n    FacetLabel p1 = p.subpath(2);\n    assertEquals(2, p1.length);\n    assertEquals(\"hi/there\", p1.toString('/'));\n\n    p1 = p.subpath(1);\n    assertEquals(1, p1.length);\n    assertEquals(\"hi\", p1.toString('/'));\n\n    p1 = p.subpath(0);\n    assertEquals(0, p1.length);\n    assertEquals(\"\", p1.toString('/'));\n\n    // with all the following lengths, the prefix should be the whole path \n    int[] lengths = { 3, -1, 4 };\n    for (int i = 0; i < lengths.length; i++) {\n      p1 = p.subpath(lengths[i]);\n      assertEquals(3, p1.length);\n      assertEquals(\"hi/there/man\", p1.toString('/'));\n      assertEquals(p, p1);\n    }\n  }\n\n","sourceOld":"  @Test \n  public void testSubPath() {\n    final FacetLabel p = new FacetLabel(\"hi\", \"there\", \"man\");\n    assertEquals(p.length, 3);\n    \n    FacetLabel p1 = p.subpath(2);\n    assertEquals(2, p1.length);\n    assertEquals(\"hi/there\", p1.toString('/'));\n\n    p1 = p.subpath(1);\n    assertEquals(1, p1.length);\n    assertEquals(\"hi\", p1.toString('/'));\n\n    p1 = p.subpath(0);\n    assertEquals(0, p1.length);\n    assertEquals(\"\", p1.toString('/'));\n\n    // with all the following lengths, the prefix should be the whole path \n    int[] lengths = { 3, -1, 4 };\n    for (int i = 0; i < lengths.length; i++) {\n      p1 = p.subpath(lengths[i]);\n      assertEquals(3, p1.length);\n      assertEquals(\"hi/there/man\", p1.toString('/'));\n      assertEquals(p, p1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testSubPath().mjava","sourceNew":null,"sourceOld":"  @Test \n  public void testSubPath() {\n    final CategoryPath p = new CategoryPath(\"hi\", \"there\", \"man\");\n    assertEquals(p.length, 3);\n    \n    CategoryPath p1 = p.subpath(2);\n    assertEquals(2, p1.length);\n    assertEquals(\"hi/there\", p1.toString('/'));\n\n    p1 = p.subpath(1);\n    assertEquals(1, p1.length);\n    assertEquals(\"hi\", p1.toString('/'));\n\n    p1 = p.subpath(0);\n    assertEquals(0, p1.length);\n    assertEquals(\"\", p1.toString('/'));\n\n    // with all the following lengths, the prefix should be the whole path \n    int[] lengths = { 3, -1, 4 };\n    for (int i = 0; i < lengths.length; i++) {\n      p1 = p.subpath(lengths[i]);\n      assertEquals(3, p1.length);\n      assertEquals(\"hi/there/man\", p1.toString('/'));\n      assertEquals(p, p1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78522aad83283ca58fae08fd89406b65429d0229":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","78522aad83283ca58fae08fd89406b65429d0229"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"78522aad83283ca58fae08fd89406b65429d0229":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["78522aad83283ca58fae08fd89406b65429d0229"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}