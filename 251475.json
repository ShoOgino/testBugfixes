{"path":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testCurrencyFieldType().mjava","commits":[{"id":"c2635332d49f7c5a0b484950462a01775512628e","date":1331332806,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testCurrencyFieldType().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCurrencyFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField amount = schema.getField(\"amount\");\n    assertNotNull(amount);\n    assertTrue(\"amount is not a poly field\", amount.isPolyField());\n    FieldType tmp = amount.getType();\n    assertTrue(tmp instanceof CurrencyField);\n    String currencyValue = \"1.50,EUR\";\n    IndexableField[] fields = amount.createFields(currencyValue, 2);\n    assertEquals(fields.length, 3);\n\n    // First field is currency code, second is value, third is stored.\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[i].readerValue() != null\n              || fields[i].numericValue() != null\n              || fields[i].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[i], hasValue);\n    }\n\n    assertEquals(schema.getFieldTypeByName(\"string\").toExternal(fields[2]), \"1.50,EUR\");\n    \n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField) tmp).getProvider();\n    String[] available = p.listAvailableCurrencies();\n    assert(available.length == 5);\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 2.5);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testCurrencyFieldType().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCurrencyFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField amount = schema.getField(\"amount\");\n    assertNotNull(amount);\n    assertTrue(\"amount is not a poly field\", amount.isPolyField());\n    FieldType tmp = amount.getType();\n    assertTrue(tmp instanceof CurrencyField);\n    String currencyValue = \"1.50,EUR\";\n    IndexableField[] fields = amount.createFields(currencyValue, 2);\n    assertEquals(fields.length, 3);\n\n    // First field is currency code, second is value, third is stored.\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[i].readerValue() != null\n              || fields[i].numericValue() != null\n              || fields[i].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[i], hasValue);\n    }\n\n    assertEquals(schema.getFieldTypeByName(\"string\").toExternal(fields[2]), \"1.50,EUR\");\n    \n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField) tmp).getProvider();\n    String[] available = p.listAvailableCurrencies();\n    assert(available.length == 5);\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 2.5);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a62481aacca928b5c069e6f825ef49c7b6586d8","date":1333048447,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testCurrencyFieldType().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testCurrencyFieldType().mjava","sourceNew":"  @Test\n  public void testCurrencyFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField amount = schema.getField(\"amount\");\n    assertNotNull(amount);\n    assertTrue(\"amount is not a poly field\", amount.isPolyField());\n    FieldType tmp = amount.getType();\n    assertTrue(tmp instanceof CurrencyField);\n    String currencyValue = \"1.50,EUR\";\n    IndexableField[] fields = amount.createFields(currencyValue, 2);\n    assertEquals(fields.length, 3);\n\n    // First field is currency code, second is value, third is stored.\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[i].readerValue() != null\n              || fields[i].numericValue() != null\n              || fields[i].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[i], hasValue);\n    }\n\n    assertEquals(schema.getFieldTypeByName(\"string\").toExternal(fields[2]), \"1.50,EUR\");\n    \n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField) tmp).getProvider();\n    Set<String> availableCurrencies = p.listAvailableCurrencies();\n    assert(availableCurrencies.size() == 4);\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 2.5);\n  }\n\n","sourceOld":"  @Test\n  public void testCurrencyFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField amount = schema.getField(\"amount\");\n    assertNotNull(amount);\n    assertTrue(\"amount is not a poly field\", amount.isPolyField());\n    FieldType tmp = amount.getType();\n    assertTrue(tmp instanceof CurrencyField);\n    String currencyValue = \"1.50,EUR\";\n    IndexableField[] fields = amount.createFields(currencyValue, 2);\n    assertEquals(fields.length, 3);\n\n    // First field is currency code, second is value, third is stored.\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[i].readerValue() != null\n              || fields[i].numericValue() != null\n              || fields[i].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[i], hasValue);\n    }\n\n    assertEquals(schema.getFieldTypeByName(\"string\").toExternal(fields[2]), \"1.50,EUR\");\n    \n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField) tmp).getProvider();\n    String[] available = p.listAvailableCurrencies();\n    assert(available.length == 5);\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 2.5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409324b31a1419d7c05a38211168cf317e39be77","date":1344866765,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testCurrencyFieldType().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testCurrencyFieldType().mjava","sourceNew":"  @Test\n  public void testCurrencyFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField amount = schema.getField(\"amount\");\n    assertNotNull(amount);\n    assertTrue(\"amount is not a poly field\", amount.isPolyField());\n    FieldType tmp = amount.getType();\n    assertTrue(tmp instanceof CurrencyField);\n    String currencyValue = \"1.50,EUR\";\n    StorableField[] fields = amount.createFields(currencyValue, 2);\n    assertEquals(fields.length, 3);\n\n    // First field is currency code, second is value, third is stored.\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[i].readerValue() != null\n              || fields[i].numericValue() != null\n              || fields[i].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[i], hasValue);\n    }\n\n    assertEquals(schema.getFieldTypeByName(\"string\").toExternal(fields[2]), \"1.50,EUR\");\n    \n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField) tmp).getProvider();\n    Set<String> availableCurrencies = p.listAvailableCurrencies();\n    assert(availableCurrencies.size() == 4);\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 2.5);\n  }\n\n","sourceOld":"  @Test\n  public void testCurrencyFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField amount = schema.getField(\"amount\");\n    assertNotNull(amount);\n    assertTrue(\"amount is not a poly field\", amount.isPolyField());\n    FieldType tmp = amount.getType();\n    assertTrue(tmp instanceof CurrencyField);\n    String currencyValue = \"1.50,EUR\";\n    IndexableField[] fields = amount.createFields(currencyValue, 2);\n    assertEquals(fields.length, 3);\n\n    // First field is currency code, second is value, third is stored.\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[i].readerValue() != null\n              || fields[i].numericValue() != null\n              || fields[i].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[i], hasValue);\n    }\n\n    assertEquals(schema.getFieldTypeByName(\"string\").toExternal(fields[2]), \"1.50,EUR\");\n    \n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField) tmp).getProvider();\n    Set<String> availableCurrencies = p.listAvailableCurrencies();\n    assert(availableCurrencies.size() == 4);\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 2.5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testCurrencyFieldType().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testCurrencyFieldType().mjava","sourceNew":"  @Test\n  public void testCurrencyFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField amount = schema.getField(\"amount\");\n    assertNotNull(amount);\n    assertTrue(\"amount is not a poly field\", amount.isPolyField());\n    FieldType tmp = amount.getType();\n    assertTrue(tmp instanceof CurrencyField);\n    String currencyValue = \"1.50,EUR\";\n    StorableField[] fields = amount.createFields(currencyValue, 2);\n    assertEquals(fields.length, 3);\n\n    // First field is currency code, second is value, third is stored.\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[i].readerValue() != null\n              || fields[i].numericValue() != null\n              || fields[i].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[i], hasValue);\n    }\n\n    assertEquals(schema.getFieldTypeByName(\"string\").toExternal(fields[2]), \"1.50,EUR\");\n    \n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField) tmp).getProvider();\n    Set<String> availableCurrencies = p.listAvailableCurrencies();\n    assert(availableCurrencies.size() == 4);\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 2.5);\n  }\n\n","sourceOld":"  @Test\n  public void testCurrencyFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField amount = schema.getField(\"amount\");\n    assertNotNull(amount);\n    assertTrue(\"amount is not a poly field\", amount.isPolyField());\n    FieldType tmp = amount.getType();\n    assertTrue(tmp instanceof CurrencyField);\n    String currencyValue = \"1.50,EUR\";\n    IndexableField[] fields = amount.createFields(currencyValue, 2);\n    assertEquals(fields.length, 3);\n\n    // First field is currency code, second is value, third is stored.\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[i].readerValue() != null\n              || fields[i].numericValue() != null\n              || fields[i].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[i], hasValue);\n    }\n\n    assertEquals(schema.getFieldTypeByName(\"string\").toExternal(fields[2]), \"1.50,EUR\");\n    \n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField) tmp).getProvider();\n    Set<String> availableCurrencies = p.listAvailableCurrencies();\n    assert(availableCurrencies.size() == 4);\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 2.5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73bb5a57dc75b54a39494f99986599cae7dff417","date":1361040620,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testCurrencyFieldType().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testCurrencyFieldType().mjava","sourceNew":"  @Test\n  public void testCurrencyFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField amount = schema.getField(\"amount\");\n    assertNotNull(amount);\n    assertTrue(\"amount is not a poly field\", amount.isPolyField());\n    FieldType tmp = amount.getType();\n    assertTrue(tmp instanceof CurrencyField);\n    String currencyValue = \"1.50,EUR\";\n    List<StorableField> fields = amount.createFields(currencyValue, 2);\n    assertEquals(fields.size(), 3);\n\n    // First field is currency code, second is value, third is stored.\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).readerValue() != null\n              || fields.get(i).numericValue() != null\n              || fields.get(i).stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n\n    assertEquals(schema.getFieldTypeByName(\"string\").toExternal(fields.get(2)), \"1.50,EUR\");\n    \n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField) tmp).getProvider();\n    Set<String> availableCurrencies = p.listAvailableCurrencies();\n    assert(availableCurrencies.size() == 4);\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 2.5);\n  }\n\n","sourceOld":"  @Test\n  public void testCurrencyFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField amount = schema.getField(\"amount\");\n    assertNotNull(amount);\n    assertTrue(\"amount is not a poly field\", amount.isPolyField());\n    FieldType tmp = amount.getType();\n    assertTrue(tmp instanceof CurrencyField);\n    String currencyValue = \"1.50,EUR\";\n    StorableField[] fields = amount.createFields(currencyValue, 2);\n    assertEquals(fields.length, 3);\n\n    // First field is currency code, second is value, third is stored.\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[i].readerValue() != null\n              || fields[i].numericValue() != null\n              || fields[i].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[i], hasValue);\n    }\n\n    assertEquals(schema.getFieldTypeByName(\"string\").toExternal(fields[2]), \"1.50,EUR\");\n    \n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField) tmp).getProvider();\n    Set<String> availableCurrencies = p.listAvailableCurrencies();\n    assert(availableCurrencies.size() == 4);\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 2.5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testCurrencyFieldType().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testCurrencyFieldType().mjava","sourceNew":"  @Test\n  public void testCurrencyFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField amount = schema.getField(\"amount\");\n    assertNotNull(amount);\n    assertTrue(\"amount is not a poly field\", amount.isPolyField());\n    FieldType tmp = amount.getType();\n    assertTrue(tmp instanceof CurrencyField);\n    String currencyValue = \"1.50,EUR\";\n    List<StorableField> fields = amount.createFields(currencyValue, 2);\n    assertEquals(fields.size(), 3);\n\n    // First field is currency code, second is value, third is stored.\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).readerValue() != null\n              || fields.get(i).numericValue() != null\n              || fields.get(i).stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n\n    assertEquals(schema.getFieldTypeByName(\"string\").toExternal(fields.get(2)), \"1.50,EUR\");\n    \n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField) tmp).getProvider();\n    Set<String> availableCurrencies = p.listAvailableCurrencies();\n    assert(availableCurrencies.size() == 4);\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 2.5);\n  }\n\n","sourceOld":"  @Test\n  public void testCurrencyFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField amount = schema.getField(\"amount\");\n    assertNotNull(amount);\n    assertTrue(\"amount is not a poly field\", amount.isPolyField());\n    FieldType tmp = amount.getType();\n    assertTrue(tmp instanceof CurrencyField);\n    String currencyValue = \"1.50,EUR\";\n    StorableField[] fields = amount.createFields(currencyValue, 2);\n    assertEquals(fields.length, 3);\n\n    // First field is currency code, second is value, third is stored.\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields[i].readerValue() != null\n              || fields[i].numericValue() != null\n              || fields[i].stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields[i], hasValue);\n    }\n\n    assertEquals(schema.getFieldTypeByName(\"string\").toExternal(fields[2]), \"1.50,EUR\");\n    \n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField) tmp).getProvider();\n    Set<String> availableCurrencies = p.listAvailableCurrencies();\n    assert(availableCurrencies.size() == 4);\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 2.5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ce5a0276b8637186ae6adfa516e332132d197ad","date":1362165863,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testCurrencyFieldType().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testCurrencyFieldType().mjava","sourceNew":"  @Test\n  public void testCurrencyFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField amount = schema.getField(field());\n    assertNotNull(amount);\n    assertTrue(field() + \" is not a poly field\", amount.isPolyField());\n    FieldType tmp = amount.getType();\n    assertTrue(tmp instanceof CurrencyField);\n    String currencyValue = \"1.50,EUR\";\n    List<StorableField> fields = amount.createFields(currencyValue, 2);\n    assertEquals(fields.size(), 3);\n\n    // First field is currency code, second is value, third is stored.\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).readerValue() != null\n              || fields.get(i).numericValue() != null\n              || fields.get(i).stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n\n    assertEquals(schema.getFieldTypeByName(\"string\").toExternal(fields.get(2)), \"1.50,EUR\");\n    \n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField) tmp).getProvider();\n    Set<String> availableCurrencies = p.listAvailableCurrencies();\n    assertEquals(5, availableCurrencies.size());\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 2.5);\n  }\n\n","sourceOld":"  @Test\n  public void testCurrencyFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField amount = schema.getField(\"amount\");\n    assertNotNull(amount);\n    assertTrue(\"amount is not a poly field\", amount.isPolyField());\n    FieldType tmp = amount.getType();\n    assertTrue(tmp instanceof CurrencyField);\n    String currencyValue = \"1.50,EUR\";\n    List<StorableField> fields = amount.createFields(currencyValue, 2);\n    assertEquals(fields.size(), 3);\n\n    // First field is currency code, second is value, third is stored.\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).readerValue() != null\n              || fields.get(i).numericValue() != null\n              || fields.get(i).stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n\n    assertEquals(schema.getFieldTypeByName(\"string\").toExternal(fields.get(2)), \"1.50,EUR\");\n    \n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField) tmp).getProvider();\n    Set<String> availableCurrencies = p.listAvailableCurrencies();\n    assert(availableCurrencies.size() == 4);\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 2.5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409324b31a1419d7c05a38211168cf317e39be77":["7a62481aacca928b5c069e6f825ef49c7b6586d8"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2635332d49f7c5a0b484950462a01775512628e"],"1d028314cced5858683a1bb4741423d0f934257b":["7a62481aacca928b5c069e6f825ef49c7b6586d8","409324b31a1419d7c05a38211168cf317e39be77"],"4ce5a0276b8637186ae6adfa516e332132d197ad":["73bb5a57dc75b54a39494f99986599cae7dff417"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["1d028314cced5858683a1bb4741423d0f934257b","73bb5a57dc75b54a39494f99986599cae7dff417"],"7a62481aacca928b5c069e6f825ef49c7b6586d8":["c2635332d49f7c5a0b484950462a01775512628e"],"c2635332d49f7c5a0b484950462a01775512628e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ce5a0276b8637186ae6adfa516e332132d197ad"],"73bb5a57dc75b54a39494f99986599cae7dff417":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"409324b31a1419d7c05a38211168cf317e39be77":["1d028314cced5858683a1bb4741423d0f934257b"],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"1d028314cced5858683a1bb4741423d0f934257b":["95303ff3749680c743b9425f9cf99e6e4065e8a8","73bb5a57dc75b54a39494f99986599cae7dff417"],"4ce5a0276b8637186ae6adfa516e332132d197ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"7a62481aacca928b5c069e6f825ef49c7b6586d8":["409324b31a1419d7c05a38211168cf317e39be77","1d028314cced5858683a1bb4741423d0f934257b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","c2635332d49f7c5a0b484950462a01775512628e"],"c2635332d49f7c5a0b484950462a01775512628e":["38e3b736c7ca086d61b7dbb841c905ee115490da","7a62481aacca928b5c069e6f825ef49c7b6586d8"],"73bb5a57dc75b54a39494f99986599cae7dff417":["4ce5a0276b8637186ae6adfa516e332132d197ad","95303ff3749680c743b9425f9cf99e6e4065e8a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","95303ff3749680c743b9425f9cf99e6e4065e8a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}