{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#countMatches(int).mjava","commits":[{"id":"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","date":1342645458,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#countMatches(int).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: this currently scores, but so did the previous impl\n  // TODO: remove recursion.\n  // TODO: if we separate scoring, out of here, modify this\n  // and afterNext() to terminate when nrMatchers == minimumNrMatchers\n  // then also change freq() to just always compute it from scratch\n  private void countMatches(int root) throws IOException {\n    if (root < numScorers && subScorers[root].docID() == doc) {\n      nrMatchers++;\n      score += subScorers[root].score();\n      countMatches((root<<1)+1);\n      countMatches((root<<1)+2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#countMatches(int).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: this currently scores, but so did the previous impl\n  // TODO: remove recursion.\n  // TODO: if we separate scoring, out of here, modify this\n  // and afterNext() to terminate when nrMatchers == minimumNrMatchers\n  // then also change freq() to just always compute it from scratch\n  private void countMatches(int root) throws IOException {\n    if (root < numScorers && subScorers[root].docID() == doc) {\n      nrMatchers++;\n      score += subScorers[root].score();\n      countMatches((root<<1)+1);\n      countMatches((root<<1)+2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#countMatches(int).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: this currently scores, but so did the previous impl\n  // TODO: remove recursion.\n  // TODO: if we separate scoring, out of here, modify this\n  // and afterNext() to terminate when nrMatchers == minimumNrMatchers\n  // then also change freq() to just always compute it from scratch\n  private void countMatches(int root) throws IOException {\n    if (root < numScorers && subScorers[root].docID() == doc) {\n      nrMatchers++;\n      score += subScorers[root].score();\n      countMatches((root<<1)+1);\n      countMatches((root<<1)+2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7","date":1365610867,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#countMatches(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#countMatches(int).mjava","sourceNew":"  // TODO: this currently scores, but so did the previous impl\n  // TODO: remove recursion.\n  // TODO: if we separate scoring, out of here, \n  // then change freq() to just always compute it from scratch\n  private void countMatches(int root) throws IOException {\n    if (root < numScorers && subScorers[root].docID() == doc) {\n      nrMatchers++;\n      score += subScorers[root].score();\n      countMatches((root<<1)+1);\n      countMatches((root<<1)+2);\n    }\n  }\n\n","sourceOld":"  // TODO: this currently scores, but so did the previous impl\n  // TODO: remove recursion.\n  // TODO: if we separate scoring, out of here, modify this\n  // and afterNext() to terminate when nrMatchers == minimumNrMatchers\n  // then also change freq() to just always compute it from scratch\n  private void countMatches(int root) throws IOException {\n    if (root < numScorers && subScorers[root].docID() == doc) {\n      nrMatchers++;\n      score += subScorers[root].score();\n      countMatches((root<<1)+1);\n      countMatches((root<<1)+2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a74e723ad6f1491f36039f9fe6af13a530f8135d","date":1400774466,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#countMatches(int).mjava","sourceNew":null,"sourceOld":"  // TODO: this currently scores, but so did the previous impl\n  // TODO: remove recursion.\n  // TODO: if we separate scoring, out of here, \n  // then change freq() to just always compute it from scratch\n  private void countMatches(int root) throws IOException {\n    if (root < numScorers && subScorers[root].docID() == doc) {\n      nrMatchers++;\n      score += subScorers[root].score();\n      countMatches((root<<1)+1);\n      countMatches((root<<1)+2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"a74e723ad6f1491f36039f9fe6af13a530f8135d":["2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7"],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a74e723ad6f1491f36039f9fe6af13a530f8135d"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a74e723ad6f1491f36039f9fe6af13a530f8135d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7":["a74e723ad6f1491f36039f9fe6af13a530f8135d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}