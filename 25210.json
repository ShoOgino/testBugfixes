{"path":"solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/FunctionRangeQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      ValueSource vs;\n      String funcStr;\n\n      @Override\n      public Query parse() throws ParseException {\n        funcStr = localParams.get(QueryParsing.V, null);\n        Query funcQ = subQuery(funcStr, FunctionQParserPlugin.NAME).getQuery();\n        if (funcQ instanceof FunctionQuery) {\n          vs = ((FunctionQuery)funcQ).getValueSource();\n        } else {\n          vs = new QueryValueSource(funcQ, 0.0f);\n        }\n\n        String l = localParams.get(\"l\");\n        String u = localParams.get(\"u\");\n        boolean includeLower = localParams.getBool(\"incl\",true);\n        boolean includeUpper = localParams.getBool(\"incu\",true);\n\n        // TODO: add a score=val option to allow score to be the value\n        ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, l, u, includeLower, includeUpper);\n        FunctionRangeQuery frq = new FunctionRangeQuery(rf);\n        return frq;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      ValueSource vs;\n      String funcStr;\n\n      @Override\n      public Query parse() throws ParseException {\n        funcStr = localParams.get(QueryParsing.V, null);\n        Query funcQ = subQuery(funcStr, FunctionQParserPlugin.NAME).getQuery();\n        if (funcQ instanceof FunctionQuery) {\n          vs = ((FunctionQuery)funcQ).getValueSource();\n        } else {\n          vs = new QueryValueSource(funcQ, 0.0f);\n        }\n\n        String l = localParams.get(\"l\");\n        String u = localParams.get(\"u\");\n        boolean includeLower = localParams.getBool(\"incl\",true);\n        boolean includeUpper = localParams.getBool(\"incu\",true);\n\n        // TODO: add a score=val option to allow score to be the value\n        ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, l, u, includeLower, includeUpper);\n        FunctionRangeQuery frq = new FunctionRangeQuery(rf);\n        return frq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/FunctionRangeQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      ValueSource vs;\n      String funcStr;\n\n      @Override\n      public Query parse() throws ParseException {\n        funcStr = localParams.get(QueryParsing.V, null);\n        Query funcQ = subQuery(funcStr, FunctionQParserPlugin.NAME).getQuery();\n        if (funcQ instanceof FunctionQuery) {\n          vs = ((FunctionQuery)funcQ).getValueSource();\n        } else {\n          vs = new QueryValueSource(funcQ, 0.0f);\n        }\n\n        String l = localParams.get(\"l\");\n        String u = localParams.get(\"u\");\n        boolean includeLower = localParams.getBool(\"incl\",true);\n        boolean includeUpper = localParams.getBool(\"incu\",true);\n\n        // TODO: add a score=val option to allow score to be the value\n        ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, l, u, includeLower, includeUpper);\n        FunctionRangeQuery frq = new FunctionRangeQuery(rf);\n        return frq;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      ValueSource vs;\n      String funcStr;\n\n      @Override\n      public Query parse() throws ParseException {\n        funcStr = localParams.get(QueryParsing.V, null);\n        Query funcQ = subQuery(funcStr, FunctionQParserPlugin.NAME).getQuery();\n        if (funcQ instanceof FunctionQuery) {\n          vs = ((FunctionQuery)funcQ).getValueSource();\n        } else {\n          vs = new QueryValueSource(funcQ, 0.0f);\n        }\n\n        String l = localParams.get(\"l\");\n        String u = localParams.get(\"u\");\n        boolean includeLower = localParams.getBool(\"incl\",true);\n        boolean includeUpper = localParams.getBool(\"incu\",true);\n\n        // TODO: add a score=val option to allow score to be the value\n        ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, l, u, includeLower, includeUpper);\n        FunctionRangeQuery frq = new FunctionRangeQuery(rf);\n        return frq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/FunctionRangeQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      ValueSource vs;\n      String funcStr;\n\n      @Override\n      public Query parse() throws ParseException {\n        funcStr = localParams.get(QueryParsing.V, null);\n        Query funcQ = subQuery(funcStr, FunctionQParserPlugin.NAME).getQuery();\n        if (funcQ instanceof FunctionQuery) {\n          vs = ((FunctionQuery)funcQ).getValueSource();\n        } else {\n          vs = new QueryValueSource(funcQ, 0.0f);\n        }\n\n        String l = localParams.get(\"l\");\n        String u = localParams.get(\"u\");\n        boolean includeLower = localParams.getBool(\"incl\",true);\n        boolean includeUpper = localParams.getBool(\"incu\",true);\n\n        // TODO: add a score=val option to allow score to be the value\n        ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, l, u, includeLower, includeUpper);\n        FunctionRangeQuery frq = new FunctionRangeQuery(rf);\n        return frq;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      ValueSource vs;\n      String funcStr;\n\n      @Override\n      public Query parse() throws ParseException {\n        funcStr = localParams.get(QueryParsing.V, null);\n        Query funcQ = subQuery(funcStr, FunctionQParserPlugin.NAME).getQuery();\n        if (funcQ instanceof FunctionQuery) {\n          vs = ((FunctionQuery)funcQ).getValueSource();\n        } else {\n          vs = new QueryValueSource(funcQ, 0.0f);\n        }\n\n        String l = localParams.get(\"l\");\n        String u = localParams.get(\"u\");\n        boolean includeLower = localParams.getBool(\"incl\",true);\n        boolean includeUpper = localParams.getBool(\"incu\",true);\n\n        // TODO: add a score=val option to allow score to be the value\n        ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, l, u, includeLower, includeUpper);\n        FunctionRangeQuery frq = new FunctionRangeQuery(rf);\n        return frq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      ValueSource vs;\n      String funcStr;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        funcStr = localParams.get(QueryParsing.V, null);\n        Query funcQ = subQuery(funcStr, FunctionQParserPlugin.NAME).getQuery();\n        if (funcQ instanceof FunctionQuery) {\n          vs = ((FunctionQuery)funcQ).getValueSource();\n        } else {\n          vs = new QueryValueSource(funcQ, 0.0f);\n        }\n\n        String l = localParams.get(\"l\");\n        String u = localParams.get(\"u\");\n        boolean includeLower = localParams.getBool(\"incl\",true);\n        boolean includeUpper = localParams.getBool(\"incu\",true);\n\n        // TODO: add a score=val option to allow score to be the value\n        ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, l, u, includeLower, includeUpper);\n        FunctionRangeQuery frq = new FunctionRangeQuery(rf);\n        return frq;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      ValueSource vs;\n      String funcStr;\n\n      @Override\n      public Query parse() throws ParseException {\n        funcStr = localParams.get(QueryParsing.V, null);\n        Query funcQ = subQuery(funcStr, FunctionQParserPlugin.NAME).getQuery();\n        if (funcQ instanceof FunctionQuery) {\n          vs = ((FunctionQuery)funcQ).getValueSource();\n        } else {\n          vs = new QueryValueSource(funcQ, 0.0f);\n        }\n\n        String l = localParams.get(\"l\");\n        String u = localParams.get(\"u\");\n        boolean includeLower = localParams.getBool(\"incl\",true);\n        boolean includeUpper = localParams.getBool(\"incu\",true);\n\n        // TODO: add a score=val option to allow score to be the value\n        ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, l, u, includeLower, includeUpper);\n        FunctionRangeQuery frq = new FunctionRangeQuery(rf);\n        return frq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      ValueSource vs;\n      String funcStr;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        funcStr = localParams.get(QueryParsing.V, null);\n        Query funcQ = subQuery(funcStr, FunctionQParserPlugin.NAME).getQuery();\n        if (funcQ instanceof FunctionQuery) {\n          vs = ((FunctionQuery)funcQ).getValueSource();\n        } else {\n          vs = new QueryValueSource(funcQ, 0.0f);\n        }\n\n        String l = localParams.get(\"l\");\n        String u = localParams.get(\"u\");\n        boolean includeLower = localParams.getBool(\"incl\",true);\n        boolean includeUpper = localParams.getBool(\"incu\",true);\n\n        // TODO: add a score=val option to allow score to be the value\n        ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, l, u, includeLower, includeUpper);\n        FunctionRangeQuery frq = new FunctionRangeQuery(rf);\n        return frq;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      ValueSource vs;\n      String funcStr;\n\n      @Override\n      public Query parse() throws ParseException {\n        funcStr = localParams.get(QueryParsing.V, null);\n        Query funcQ = subQuery(funcStr, FunctionQParserPlugin.NAME).getQuery();\n        if (funcQ instanceof FunctionQuery) {\n          vs = ((FunctionQuery)funcQ).getValueSource();\n        } else {\n          vs = new QueryValueSource(funcQ, 0.0f);\n        }\n\n        String l = localParams.get(\"l\");\n        String u = localParams.get(\"u\");\n        boolean includeLower = localParams.getBool(\"incl\",true);\n        boolean includeUpper = localParams.getBool(\"incu\",true);\n\n        // TODO: add a score=val option to allow score to be the value\n        ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, l, u, includeLower, includeUpper);\n        FunctionRangeQuery frq = new FunctionRangeQuery(rf);\n        return frq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      ValueSource vs;\n      String funcStr;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        funcStr = localParams.get(QueryParsing.V, null);\n        Query funcQ = subQuery(funcStr, FunctionQParserPlugin.NAME).getQuery();\n        if (funcQ instanceof FunctionQuery) {\n          vs = ((FunctionQuery)funcQ).getValueSource();\n        } else {\n          vs = new QueryValueSource(funcQ, 0.0f);\n        }\n\n        String l = localParams.get(\"l\");\n        String u = localParams.get(\"u\");\n        boolean includeLower = localParams.getBool(\"incl\",true);\n        boolean includeUpper = localParams.getBool(\"incu\",true);\n\n        // TODO: add a score=val option to allow score to be the value\n        ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, l, u, includeLower, includeUpper);\n        FunctionRangeQuery frq = new FunctionRangeQuery(rf);\n        return frq;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      ValueSource vs;\n      String funcStr;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        funcStr = localParams.get(QueryParsing.V, null);\n        Query funcQ = subQuery(funcStr, FunctionQParserPlugin.NAME).getQuery();\n        if (funcQ instanceof FunctionQuery) {\n          vs = ((FunctionQuery)funcQ).getValueSource();\n        } else {\n          vs = new QueryValueSource(funcQ, 0.0f);\n        }\n\n        String l = localParams.get(\"l\");\n        String u = localParams.get(\"u\");\n        boolean includeLower = localParams.getBool(\"incl\",true);\n        boolean includeUpper = localParams.getBool(\"incu\",true);\n\n        // TODO: add a score=val option to allow score to be the value\n        ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, l, u, includeLower, includeUpper);\n        FunctionRangeQuery frq = new FunctionRangeQuery(rf);\n        return frq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      ValueSource vs;\n      String funcStr;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        funcStr = localParams.get(QueryParsing.V, null);\n        Query funcQ = subQuery(funcStr, FunctionQParserPlugin.NAME).getQuery();\n        if (funcQ instanceof FunctionQuery) {\n          vs = ((FunctionQuery)funcQ).getValueSource();\n        } else {\n          vs = new QueryValueSource(funcQ, 0.0f);\n        }\n\n        String l = localParams.get(\"l\");\n        String u = localParams.get(\"u\");\n        boolean includeLower = localParams.getBool(\"incl\",true);\n        boolean includeUpper = localParams.getBool(\"incu\",true);\n\n        // TODO: add a score=val option to allow score to be the value\n        ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, l, u, includeLower, includeUpper);\n        FunctionRangeQuery frq = new FunctionRangeQuery(rf);\n        return frq;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      ValueSource vs;\n      String funcStr;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        funcStr = localParams.get(QueryParsing.V, null);\n        Query funcQ = subQuery(funcStr, FunctionQParserPlugin.NAME).getQuery();\n        if (funcQ instanceof FunctionQuery) {\n          vs = ((FunctionQuery)funcQ).getValueSource();\n        } else {\n          vs = new QueryValueSource(funcQ, 0.0f);\n        }\n\n        String l = localParams.get(\"l\");\n        String u = localParams.get(\"u\");\n        boolean includeLower = localParams.getBool(\"incl\",true);\n        boolean includeUpper = localParams.getBool(\"incu\",true);\n\n        // TODO: add a score=val option to allow score to be the value\n        ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, l, u, includeLower, includeUpper);\n        FunctionRangeQuery frq = new FunctionRangeQuery(rf);\n        return frq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68c354ba50abc8ed5c5fe98901e61d68f93952bb","date":1479836000,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      ValueSource vs;\n      String funcStr;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        funcStr = localParams.get(QueryParsing.V, null);\n        QParser subParser = subQuery(funcStr, FunctionQParserPlugin.NAME);\n        subParser.setIsFilter(false);  // the range can be based on the relevancy score of embedded queries.\n        Query funcQ = subParser.getQuery();\n        if (funcQ instanceof FunctionQuery) {\n          vs = ((FunctionQuery)funcQ).getValueSource();\n        } else {\n          vs = new QueryValueSource(funcQ, 0.0f);\n        }\n\n        String l = localParams.get(\"l\");\n        String u = localParams.get(\"u\");\n        boolean includeLower = localParams.getBool(\"incl\",true);\n        boolean includeUpper = localParams.getBool(\"incu\",true);\n\n        // TODO: add a score=val option to allow score to be the value\n        ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, l, u, includeLower, includeUpper);\n        FunctionRangeQuery frq = new FunctionRangeQuery(rf);\n        return frq;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      ValueSource vs;\n      String funcStr;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        funcStr = localParams.get(QueryParsing.V, null);\n        Query funcQ = subQuery(funcStr, FunctionQParserPlugin.NAME).getQuery();\n        if (funcQ instanceof FunctionQuery) {\n          vs = ((FunctionQuery)funcQ).getValueSource();\n        } else {\n          vs = new QueryValueSource(funcQ, 0.0f);\n        }\n\n        String l = localParams.get(\"l\");\n        String u = localParams.get(\"u\");\n        boolean includeLower = localParams.getBool(\"incl\",true);\n        boolean includeUpper = localParams.getBool(\"incu\",true);\n\n        // TODO: add a score=val option to allow score to be the value\n        ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, l, u, includeLower, includeUpper);\n        FunctionRangeQuery frq = new FunctionRangeQuery(rf);\n        return frq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FunctionRangeQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      ValueSource vs;\n      String funcStr;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        funcStr = localParams.get(QueryParsing.V, null);\n        QParser subParser = subQuery(funcStr, FunctionQParserPlugin.NAME);\n        subParser.setIsFilter(false);  // the range can be based on the relevancy score of embedded queries.\n        Query funcQ = subParser.getQuery();\n        if (funcQ instanceof FunctionQuery) {\n          vs = ((FunctionQuery)funcQ).getValueSource();\n        } else {\n          vs = new QueryValueSource(funcQ, 0.0f);\n        }\n\n        String l = localParams.get(\"l\");\n        String u = localParams.get(\"u\");\n        boolean includeLower = localParams.getBool(\"incl\",true);\n        boolean includeUpper = localParams.getBool(\"incu\",true);\n\n        // TODO: add a score=val option to allow score to be the value\n        ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, l, u, includeLower, includeUpper);\n        FunctionRangeQuery frq = new FunctionRangeQuery(rf);\n        return frq;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      ValueSource vs;\n      String funcStr;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        funcStr = localParams.get(QueryParsing.V, null);\n        Query funcQ = subQuery(funcStr, FunctionQParserPlugin.NAME).getQuery();\n        if (funcQ instanceof FunctionQuery) {\n          vs = ((FunctionQuery)funcQ).getValueSource();\n        } else {\n          vs = new QueryValueSource(funcQ, 0.0f);\n        }\n\n        String l = localParams.get(\"l\");\n        String u = localParams.get(\"u\");\n        boolean includeLower = localParams.getBool(\"incl\",true);\n        boolean includeUpper = localParams.getBool(\"incu\",true);\n\n        // TODO: add a score=val option to allow score to be the value\n        ValueSourceRangeFilter rf = new ValueSourceRangeFilter(vs, l, u, includeLower, includeUpper);\n        FunctionRangeQuery frq = new FunctionRangeQuery(rf);\n        return frq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["3cdb67100dc016748799a77218aa409478372d79","19275ba31e621f6da1b83bf13af75233876fd3d4"],"727bb765ff2542275f6d31f67be18d7104bae148":["19275ba31e621f6da1b83bf13af75233876fd3d4","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"3cdb67100dc016748799a77218aa409478372d79":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","3cdb67100dc016748799a77218aa409478372d79"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["3cdb67100dc016748799a77218aa409478372d79"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68c354ba50abc8ed5c5fe98901e61d68f93952bb"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"727bb765ff2542275f6d31f67be18d7104bae148":[],"3cdb67100dc016748799a77218aa409478372d79":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","727bb765ff2542275f6d31f67be18d7104bae148","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","727bb765ff2542275f6d31f67be18d7104bae148","407687e67faf6e1f02a211ca078d8e3eed631027","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}