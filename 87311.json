{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#clean(String).mjava","commits":[{"id":"33d0ed80b7b47e34ad3ff033a77544563aba3085","date":1341244632,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#clean(String).mjava","pathOld":"/dev/null","sourceNew":"  // yeah, it's recursive :(\n  public void clean(String path) throws InterruptedException, KeeperException {\n    List<String> children;\n    try {\n      children = getChildren(path, null, true);\n    } catch (NoNodeException r) {\n      return;\n    }\n    for (String string : children) {\n      clean(path + \"/\" + string);\n    }\n    try {\n      delete(path, -1, true);\n    } catch (NoNodeException r) {\n      return;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf4e43a4d7a969632d4bec76fd5bba149cb81487","date":1342043143,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#clean(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#clean(String).mjava","sourceNew":"  // yeah, it's recursive :(\n  public void clean(String path) throws InterruptedException, KeeperException {\n    List<String> children;\n    try {\n      children = getChildren(path, null, true);\n    } catch (NoNodeException r) {\n      return;\n    }\n    for (String string : children) {\n      if (path.equals(\"/\")) {\n        clean(path + string);\n      } else {\n        clean(path + \"/\" + string);\n      }\n    }\n    try {\n      if (!path.equals(\"/\")) {\n        delete(path, -1, true);\n      }\n    } catch (NoNodeException r) {\n      return;\n    }\n  }\n\n","sourceOld":"  // yeah, it's recursive :(\n  public void clean(String path) throws InterruptedException, KeeperException {\n    List<String> children;\n    try {\n      children = getChildren(path, null, true);\n    } catch (NoNodeException r) {\n      return;\n    }\n    for (String string : children) {\n      clean(path + \"/\" + string);\n    }\n    try {\n      delete(path, -1, true);\n    } catch (NoNodeException r) {\n      return;\n    }\n  }\n\n","bugFix":null,"bugIntro":["bfcc72c4e6e35712eddbbe6a4fb08f140f1b3e30"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#clean(String).mjava","pathOld":"/dev/null","sourceNew":"  // yeah, it's recursive :(\n  public void clean(String path) throws InterruptedException, KeeperException {\n    List<String> children;\n    try {\n      children = getChildren(path, null, true);\n    } catch (NoNodeException r) {\n      return;\n    }\n    for (String string : children) {\n      if (path.equals(\"/\")) {\n        clean(path + string);\n      } else {\n        clean(path + \"/\" + string);\n      }\n    }\n    try {\n      if (!path.equals(\"/\")) {\n        delete(path, -1, true);\n      }\n    } catch (NoNodeException r) {\n      return;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#clean(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#clean(String).mjava","sourceNew":"  // yeah, it's recursive :(\n  public void clean(String path) throws InterruptedException, KeeperException {\n    List<String> children;\n    try {\n      children = getChildren(path, null, true);\n    } catch (NoNodeException r) {\n      return;\n    }\n    for (String string : children) {\n      if (path.equals(\"/\")) {\n        clean(path + string);\n      } else {\n        clean(path + \"/\" + string);\n      }\n    }\n    try {\n      if (!path.equals(\"/\")) {\n        delete(path, -1, true);\n      }\n    } catch (NoNodeException r) {\n      return;\n    }\n  }\n\n","sourceOld":"  // yeah, it's recursive :(\n  public void clean(String path) throws InterruptedException, KeeperException {\n    List<String> children;\n    try {\n      children = getChildren(path, null, true);\n    } catch (NoNodeException r) {\n      return;\n    }\n    for (String string : children) {\n      clean(path + \"/\" + string);\n    }\n    try {\n      delete(path, -1, true);\n    } catch (NoNodeException r) {\n      return;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"658b4708302d03c7c4956029f78f65d74a660655","date":1352825787,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#clean(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#clean(String).mjava","sourceNew":"  // yeah, it's recursive :(\n  public void clean(String path) throws InterruptedException, KeeperException {\n    List<String> children;\n    try {\n      children = getChildren(path, null, true);\n    } catch (NoNodeException r) {\n      return;\n    }\n    for (String string : children) {\n      // we can't clean the built-in zookeeper node\n      if (path.equals(\"/\") && string.equals(\"zookeeper\")) continue;\n      if (path.equals(\"/\")) {\n        clean(path + string);\n      } else {\n        clean(path + \"/\" + string);\n      }\n    }\n    try {\n      if (!path.equals(\"/\")) {\n        delete(path, -1, true);\n      }\n    } catch (NoNodeException r) {\n      return;\n    }\n  }\n\n","sourceOld":"  // yeah, it's recursive :(\n  public void clean(String path) throws InterruptedException, KeeperException {\n    List<String> children;\n    try {\n      children = getChildren(path, null, true);\n    } catch (NoNodeException r) {\n      return;\n    }\n    for (String string : children) {\n      if (path.equals(\"/\")) {\n        clean(path + string);\n      } else {\n        clean(path + \"/\" + string);\n      }\n    }\n    try {\n      if (!path.equals(\"/\")) {\n        delete(path, -1, true);\n      }\n    } catch (NoNodeException r) {\n      return;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#clean(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#clean(String).mjava","sourceNew":"  // yeah, it's recursive :(\n  public void clean(String path) throws InterruptedException, KeeperException {\n    List<String> children;\n    try {\n      children = getChildren(path, null, true);\n    } catch (NoNodeException r) {\n      return;\n    }\n    for (String string : children) {\n      // we can't clean the built-in zookeeper node\n      if (path.equals(\"/\") && string.equals(\"zookeeper\")) continue;\n      if (path.equals(\"/\")) {\n        clean(path + string);\n      } else {\n        clean(path + \"/\" + string);\n      }\n    }\n    try {\n      if (!path.equals(\"/\")) {\n        delete(path, -1, true);\n      }\n    } catch (NoNodeException r) {\n      return;\n    }\n  }\n\n","sourceOld":"  // yeah, it's recursive :(\n  public void clean(String path) throws InterruptedException, KeeperException {\n    List<String> children;\n    try {\n      children = getChildren(path, null, true);\n    } catch (NoNodeException r) {\n      return;\n    }\n    for (String string : children) {\n      if (path.equals(\"/\")) {\n        clean(path + string);\n      } else {\n        clean(path + \"/\" + string);\n      }\n    }\n    try {\n      if (!path.equals(\"/\")) {\n        delete(path, -1, true);\n      }\n    } catch (NoNodeException r) {\n      return;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfcc72c4e6e35712eddbbe6a4fb08f140f1b3e30","date":1408925007,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#clean(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#clean(String).mjava","sourceNew":"  // yeah, it's recursive :(\n  public void clean(String path) throws InterruptedException, KeeperException {\n    List<String> children;\n    try {\n      children = getChildren(path, null, true);\n    } catch (NoNodeException r) {\n      return;\n    }\n    for (String string : children) {\n      // we can't clean the built-in zookeeper node\n      if (path.equals(\"/\") && string.equals(\"zookeeper\")) continue;\n      if (path.equals(\"/\")) {\n        clean(path + string);\n      } else {\n        clean(path + \"/\" + string);\n      }\n    }\n    try {\n      if (!path.equals(\"/\")) {\n        try {\n          delete(path, -1, true);\n        } catch (NotEmptyException e) {\n          clean(path);\n        }\n      }\n    } catch (NoNodeException r) {\n      return;\n    }\n  }\n\n","sourceOld":"  // yeah, it's recursive :(\n  public void clean(String path) throws InterruptedException, KeeperException {\n    List<String> children;\n    try {\n      children = getChildren(path, null, true);\n    } catch (NoNodeException r) {\n      return;\n    }\n    for (String string : children) {\n      // we can't clean the built-in zookeeper node\n      if (path.equals(\"/\") && string.equals(\"zookeeper\")) continue;\n      if (path.equals(\"/\")) {\n        clean(path + string);\n      } else {\n        clean(path + \"/\" + string);\n      }\n    }\n    try {\n      if (!path.equals(\"/\")) {\n        delete(path, -1, true);\n      }\n    } catch (NoNodeException r) {\n      return;\n    }\n  }\n\n","bugFix":["cf4e43a4d7a969632d4bec76fd5bba149cb81487"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67cf727e72c71906ffd390c61b50a1c60f2ebd49","date":1452731614,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#clean(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#clean(String).mjava","sourceNew":"  // yeah, it's recursive :(\n  public void clean(String path) throws InterruptedException, KeeperException {\n    traverseZkTree(path, znode -> {\n      try {\n        if (!znode.equals(\"/\")) {\n          try {\n            delete(znode, -1, true);\n          } catch (NotEmptyException e) {\n            clean(znode);\n          }\n        }\n      } catch (NoNodeException r) {\n        return;\n      }\n    });\n  }\n\n","sourceOld":"  // yeah, it's recursive :(\n  public void clean(String path) throws InterruptedException, KeeperException {\n    List<String> children;\n    try {\n      children = getChildren(path, null, true);\n    } catch (NoNodeException r) {\n      return;\n    }\n    for (String string : children) {\n      // we can't clean the built-in zookeeper node\n      if (path.equals(\"/\") && string.equals(\"zookeeper\")) continue;\n      if (path.equals(\"/\")) {\n        clean(path + string);\n      } else {\n        clean(path + \"/\" + string);\n      }\n    }\n    try {\n      if (!path.equals(\"/\")) {\n        try {\n          delete(path, -1, true);\n        } catch (NotEmptyException e) {\n          clean(path);\n        }\n      }\n    } catch (NoNodeException r) {\n      return;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9272a617a9cbebf86be127014bbbacd7cf8f8e83","date":1467480344,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#clean(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#clean(String).mjava","sourceNew":"  // Some pass-throughs to allow less code disruption to other classes that use SolrZkClient.\n  public void clean(String path) throws InterruptedException, KeeperException {\n    ZkMaintenanceUtils.clean(this, path);\n  }\n\n","sourceOld":"  // yeah, it's recursive :(\n  public void clean(String path) throws InterruptedException, KeeperException {\n    traverseZkTree(path, znode -> {\n      try {\n        if (!znode.equals(\"/\")) {\n          try {\n            delete(znode, -1, true);\n          } catch (NotEmptyException e) {\n            clean(znode);\n          }\n        }\n      } catch (NoNodeException r) {\n        return;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#clean(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#clean(String).mjava","sourceNew":"  // Some pass-throughs to allow less code disruption to other classes that use SolrZkClient.\n  public void clean(String path) throws InterruptedException, KeeperException {\n    ZkMaintenanceUtils.clean(this, path);\n  }\n\n","sourceOld":"  // yeah, it's recursive :(\n  public void clean(String path) throws InterruptedException, KeeperException {\n    traverseZkTree(path, znode -> {\n      try {\n        if (!znode.equals(\"/\")) {\n          try {\n            delete(znode, -1, true);\n          } catch (NotEmptyException e) {\n            clean(znode);\n          }\n        }\n      } catch (NoNodeException r) {\n        return;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"658b4708302d03c7c4956029f78f65d74a660655":["cf4e43a4d7a969632d4bec76fd5bba149cb81487"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["33d0ed80b7b47e34ad3ff033a77544563aba3085","cf4e43a4d7a969632d4bec76fd5bba149cb81487"],"cf4e43a4d7a969632d4bec76fd5bba149cb81487":["33d0ed80b7b47e34ad3ff033a77544563aba3085"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf4e43a4d7a969632d4bec76fd5bba149cb81487"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["67cf727e72c71906ffd390c61b50a1c60f2ebd49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["cf4e43a4d7a969632d4bec76fd5bba149cb81487","658b4708302d03c7c4956029f78f65d74a660655"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["67cf727e72c71906ffd390c61b50a1c60f2ebd49","9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"67cf727e72c71906ffd390c61b50a1c60f2ebd49":["bfcc72c4e6e35712eddbbe6a4fb08f140f1b3e30"],"bfcc72c4e6e35712eddbbe6a4fb08f140f1b3e30":["658b4708302d03c7c4956029f78f65d74a660655"]},"commit2Childs":{"658b4708302d03c7c4956029f78f65d74a660655":["407687e67faf6e1f02a211ca078d8e3eed631027","bfcc72c4e6e35712eddbbe6a4fb08f140f1b3e30"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["aba371508186796cc6151d8223a5b4e16d02e26e","cf4e43a4d7a969632d4bec76fd5bba149cb81487"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"cf4e43a4d7a969632d4bec76fd5bba149cb81487":["658b4708302d03c7c4956029f78f65d74a660655","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","407687e67faf6e1f02a211ca078d8e3eed631027"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33d0ed80b7b47e34ad3ff033a77544563aba3085","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"67cf727e72c71906ffd390c61b50a1c60f2ebd49":["9272a617a9cbebf86be127014bbbacd7cf8f8e83","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bfcc72c4e6e35712eddbbe6a4fb08f140f1b3e30":["67cf727e72c71906ffd390c61b50a1c60f2ebd49"]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","407687e67faf6e1f02a211ca078d8e3eed631027","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}