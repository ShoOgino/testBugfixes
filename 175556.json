{"path":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","commits":[{"id":"ccfb40e1834cac1619556a0becf198bb7bad5d63","date":1438887805,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n    NamedList<Object> rsp = cloudSolrClient.request(new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/authentication\", new ModifiableSolrParams()));\n    assertNotNull(rsp.get(CommandOperation.ERR_MSGS));\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    HttpClient cl = cloudSolrClient.getLbClient().getHttpClient();\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, \"/admin/authentication\", new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + \"/admin/authentication\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\", \"x-update\",\n            \"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/permissions/x-update/collection\", \"x\", 20);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["51f7b7f45b8207ac13e4274c75d82ef57c0c4c1e","c0372f459e6b4348374eb3fbdbde69ee47840b71"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c609b959cb2dad7c9d9b3237fa2b806629e9206d","date":1439303330,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","sourceNew":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n    NamedList<Object> rsp = cloudSolrClient.request(new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/authentication\", new ModifiableSolrParams()));\n    assertNotNull(rsp.get(CommandOperation.ERR_MSGS));\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    HttpClient cl = cloudSolrClient.getLbClient().getHttpClient();\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, \"/admin/authentication\", new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + \"/admin/authentication\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\", \"x-update\",\n            \"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/permissions[1]/collection\", \"x\", 20);\n\n  }\n\n","sourceOld":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n    NamedList<Object> rsp = cloudSolrClient.request(new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/authentication\", new ModifiableSolrParams()));\n    assertNotNull(rsp.get(CommandOperation.ERR_MSGS));\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    HttpClient cl = cloudSolrClient.getLbClient().getHttpClient();\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, \"/admin/authentication\", new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + \"/admin/authentication\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\", \"x-update\",\n            \"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/permissions/x-update/collection\", \"x\", 20);\n\n  }\n\n","bugFix":null,"bugIntro":["51f7b7f45b8207ac13e4274c75d82ef57c0c4c1e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0372f459e6b4348374eb3fbdbde69ee47840b71","date":1441188918,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","sourceNew":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n    NamedList<Object> rsp = cloudSolrClient.request(new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/authentication\", new ModifiableSolrParams()));\n    assertNotNull(rsp.get(CommandOperation.ERR_MSGS));\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    HttpClient cl = cloudSolrClient.getLbClient().getHttpClient();\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, \"/admin/authentication\", new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + \"/admin/authentication\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\", \"x-update\",\n            \"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/permissions[1]/collection\", \"x\", 20);\n\n  }\n\n","sourceOld":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n    NamedList<Object> rsp = cloudSolrClient.request(new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/authentication\", new ModifiableSolrParams()));\n    assertNotNull(rsp.get(CommandOperation.ERR_MSGS));\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    HttpClient cl = cloudSolrClient.getLbClient().getHttpClient();\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, \"/admin/authentication\", new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + \"/admin/authentication\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\", \"x-update\",\n            \"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/permissions[1]/collection\", \"x\", 20);\n\n  }\n\n","bugFix":["ccfb40e1834cac1619556a0becf198bb7bad5d63"],"bugIntro":["51f7b7f45b8207ac13e4274c75d82ef57c0c4c1e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0db6b07ace5f92f85e46b06168f1a2f8ebc5ef76","date":1441196471,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","sourceNew":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n    NamedList<Object> rsp = cloudSolrClient.request(new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/authentication\", new ModifiableSolrParams()));\n    assertNotNull(rsp.get(CommandOperation.ERR_MSGS));\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    HttpClient cl = cloudSolrClient.getLbClient().getHttpClient();\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, \"/admin/authentication\", new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + \"/admin/authentication\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\", \"x-update\",\n            \"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\",\"collection-admin-edit\", \"role\", \"admin\" )))));\n    r = cl.execute(httpPost);\n\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(cloudSolrClient.getDefaultCollection());\n\n    HttpSolrClient solrClient = new HttpSolrClient(baseUrl);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"delete-permission\", \"collection-admin-edit\"))));\n    r = cl.execute(httpPost);//cleanup so that the super class does not need to pass on credentials\n\n  }\n\n","sourceOld":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n    NamedList<Object> rsp = cloudSolrClient.request(new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/authentication\", new ModifiableSolrParams()));\n    assertNotNull(rsp.get(CommandOperation.ERR_MSGS));\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    HttpClient cl = cloudSolrClient.getLbClient().getHttpClient();\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, \"/admin/authentication\", new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + \"/admin/authentication\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\", \"x-update\",\n            \"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/permissions[1]/collection\", \"x\", 20);\n\n  }\n\n","bugFix":null,"bugIntro":["51f7b7f45b8207ac13e4274c75d82ef57c0c4c1e","77aad0f26236c97028aecb0fcc76de2b13edf1a0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77aad0f26236c97028aecb0fcc76de2b13edf1a0","date":1441298393,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","sourceNew":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n    NamedList<Object> rsp = cloudSolrClient.request(new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/authentication\", new ModifiableSolrParams()));\n    assertNotNull(rsp.get(CommandOperation.ERR_MSGS));\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    HttpClient cl = cloudSolrClient.getLbClient().getHttpClient();\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, \"/admin/authentication\", new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + \"/admin/authentication\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\", \"x-update\",\n            \"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\",\"collection-admin-edit\", \"role\", \"admin\" )))));\n    r = cl.execute(httpPost);\n\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(cloudSolrClient.getDefaultCollection());\n\n    HttpSolrClient solrClient = new HttpSolrClient(baseUrl);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n   /* httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"delete-permission\", \"collection-admin-edit\"))));\n    r = cl.execute(httpPost); //cleanup so that the super class does not need to pass on credentials\n\n    for (Slice  slice : zkStateReader.getClusterState().getCollection(defaultCollName).getSlices()) {\n      //ensure that all nodes have removed the collection-admin-edit permission\n      for (Replica replica : slice.getReplicas()) {\n        baseUrl = replica.getStr(BASE_URL_PROP);\n        verifySecurityStatus(cl, baseUrl + \"/admin/authorization\", \"authorization/permissions[2]/name\", null, 20);\n      }\n    }*/\n  }\n\n","sourceOld":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n    NamedList<Object> rsp = cloudSolrClient.request(new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/authentication\", new ModifiableSolrParams()));\n    assertNotNull(rsp.get(CommandOperation.ERR_MSGS));\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    HttpClient cl = cloudSolrClient.getLbClient().getHttpClient();\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, \"/admin/authentication\", new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + \"/admin/authentication\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\", \"x-update\",\n            \"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\",\"collection-admin-edit\", \"role\", \"admin\" )))));\n    r = cl.execute(httpPost);\n\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(cloudSolrClient.getDefaultCollection());\n\n    HttpSolrClient solrClient = new HttpSolrClient(baseUrl);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"delete-permission\", \"collection-admin-edit\"))));\n    r = cl.execute(httpPost);//cleanup so that the super class does not need to pass on credentials\n\n  }\n\n","bugFix":["0db6b07ace5f92f85e46b06168f1a2f8ebc5ef76"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e39c4a00751908441a407ce8d531a436658d9fd6","date":1442313930,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","sourceNew":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n    NamedList<Object> rsp = cloudSolrClient.request(new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/authentication\", new ModifiableSolrParams()));\n    assertNotNull(rsp.get(CommandOperation.ERR_MSGS));\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    HttpClient cl = cloudSolrClient.getLbClient().getHttpClient();\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, \"/admin/authentication\", new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + \"/admin/authentication\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\", \"x-update\",\n            \"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\",\"collection-admin-edit\", \"role\", \"admin\" )))));\n    r = cl.execute(httpPost);\n\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(cloudSolrClient.getDefaultCollection());\n\n    HttpSolrClient solrClient = new HttpSolrClient(baseUrl);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    cloudSolrClient.request(new CollectionAdminRequest.Reload()\n        .setCollectionName(defaultCollName)\n        .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n    try {\n      cloudSolrClient.request(new CollectionAdminRequest.Reload()\n          .setCollectionName(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      fail(\"This should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n  }\n\n","sourceOld":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n    NamedList<Object> rsp = cloudSolrClient.request(new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/authentication\", new ModifiableSolrParams()));\n    assertNotNull(rsp.get(CommandOperation.ERR_MSGS));\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    HttpClient cl = cloudSolrClient.getLbClient().getHttpClient();\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, \"/admin/authentication\", new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + \"/admin/authentication\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\", \"x-update\",\n            \"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\",\"collection-admin-edit\", \"role\", \"admin\" )))));\n    r = cl.execute(httpPost);\n\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(cloudSolrClient.getDefaultCollection());\n\n    HttpSolrClient solrClient = new HttpSolrClient(baseUrl);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n   /* httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"delete-permission\", \"collection-admin-edit\"))));\n    r = cl.execute(httpPost); //cleanup so that the super class does not need to pass on credentials\n\n    for (Slice  slice : zkStateReader.getClusterState().getCollection(defaultCollName).getSlices()) {\n      //ensure that all nodes have removed the collection-admin-edit permission\n      for (Replica replica : slice.getReplicas()) {\n        baseUrl = replica.getStr(BASE_URL_PROP);\n        verifySecurityStatus(cl, baseUrl + \"/admin/authorization\", \"authorization/permissions[2]/name\", null, 20);\n      }\n    }*/\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad9908836000c5ea3bdea96886dac2a72235053f","date":1445014625,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","sourceNew":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n    NamedList<Object> rsp = cloudSolrClient.request(new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/authentication\", new ModifiableSolrParams()));\n    assertNotNull(rsp.get(CommandOperation.ERR_MSGS));\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    HttpClient cl = cloudSolrClient.getLbClient().getHttpClient();\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, \"/admin/authentication\", new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + \"/admin/authentication\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\", \"x-update\",\n            \"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\",\"collection-admin-edit\", \"role\", \"admin\" )))));\n    r = cl.execute(httpPost);\n\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(cloudSolrClient.getDefaultCollection());\n\n    HttpSolrClient solrClient = new HttpSolrClient(baseUrl);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    reload.setMethod(SolrRequest.METHOD.POST);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    cloudSolrClient.request(new CollectionAdminRequest.Reload()\n        .setCollectionName(defaultCollName)\n        .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n    try {\n      cloudSolrClient.request(new CollectionAdminRequest.Reload()\n          .setCollectionName(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      fail(\"This should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n  }\n\n","sourceOld":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n    NamedList<Object> rsp = cloudSolrClient.request(new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/authentication\", new ModifiableSolrParams()));\n    assertNotNull(rsp.get(CommandOperation.ERR_MSGS));\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    HttpClient cl = cloudSolrClient.getLbClient().getHttpClient();\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, \"/admin/authentication\", new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + \"/admin/authentication\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\", \"x-update\",\n            \"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\",\"collection-admin-edit\", \"role\", \"admin\" )))));\n    r = cl.execute(httpPost);\n\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(cloudSolrClient.getDefaultCollection());\n\n    HttpSolrClient solrClient = new HttpSolrClient(baseUrl);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    cloudSolrClient.request(new CollectionAdminRequest.Reload()\n        .setCollectionName(defaultCollName)\n        .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n    try {\n      cloudSolrClient.request(new CollectionAdminRequest.Reload()\n          .setCollectionName(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      fail(\"This should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"51f7b7f45b8207ac13e4274c75d82ef57c0c4c1e","date":1454592543,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","sourceNew":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = cloudSolrClient.getLbClient().getHttpClient();\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\", \"x-update\",\n            \"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\",\"collection-admin-edit\", \"role\", \"admin\" )))));\n    r = cl.execute(httpPost);\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(cloudSolrClient.getDefaultCollection());\n\n    HttpSolrClient solrClient = new HttpSolrClient(baseUrl);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    reload.setMethod(SolrRequest.METHOD.POST);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    cloudSolrClient.request(new CollectionAdminRequest.Reload()\n        .setCollectionName(defaultCollName)\n        .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n    try {\n      cloudSolrClient.request(new CollectionAdminRequest.Reload()\n          .setCollectionName(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      fail(\"This should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n    cloudSolrClient.setDefaultCollection(old);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(\"{set-permission : { name : update , role : admin}}\".getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200,r.getStatusLine().getStatusCode());\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\",\"4\");\n    UpdateRequest update = new UpdateRequest();\n    update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n    update.add(doc);\n    update.setCommitWithin(100);\n    cloudSolrClient.request(update);\n  }\n\n","sourceOld":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n    NamedList<Object> rsp = cloudSolrClient.request(new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/authentication\", new ModifiableSolrParams()));\n    assertNotNull(rsp.get(CommandOperation.ERR_MSGS));\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    HttpClient cl = cloudSolrClient.getLbClient().getHttpClient();\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, \"/admin/authentication\", new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + \"/admin/authentication\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\", \"x-update\",\n            \"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\",\"collection-admin-edit\", \"role\", \"admin\" )))));\n    r = cl.execute(httpPost);\n\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(cloudSolrClient.getDefaultCollection());\n\n    HttpSolrClient solrClient = new HttpSolrClient(baseUrl);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    reload.setMethod(SolrRequest.METHOD.POST);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    cloudSolrClient.request(new CollectionAdminRequest.Reload()\n        .setCollectionName(defaultCollName)\n        .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n    try {\n      cloudSolrClient.request(new CollectionAdminRequest.Reload()\n          .setCollectionName(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      fail(\"This should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n  }\n\n","bugFix":["c609b959cb2dad7c9d9b3237fa2b806629e9206d","c0372f459e6b4348374eb3fbdbde69ee47840b71","0db6b07ace5f92f85e46b06168f1a2f8ebc5ef76","ccfb40e1834cac1619556a0becf198bb7bad5d63"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1704c078ec59838c9d95d5bf5738b393b537494","date":1454693901,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","sourceNew":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = cloudSolrClient.getLbClient().getHttpClient();\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\", \"x-update\",\n            \"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\",\"collection-admin-edit\", \"role\", \"admin\" )))));\n    r = cl.execute(httpPost);\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(cloudSolrClient.getDefaultCollection());\n\n    HttpSolrClient solrClient = new HttpSolrClient(baseUrl);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    reload.setMethod(SolrRequest.METHOD.POST);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    cloudSolrClient.request(new CollectionAdminRequest.Reload()\n        .setCollectionName(defaultCollName)\n        .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n    try {\n      cloudSolrClient.request(new CollectionAdminRequest.Reload()\n          .setCollectionName(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      fail(\"This should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n    cloudSolrClient.setDefaultCollection(old);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(\"{set-permission : { name : update , role : admin}}\".getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200,r.getStatusLine().getStatusCode());\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\",\"4\");\n    UpdateRequest update = new UpdateRequest();\n    update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n    update.add(doc);\n    update.setCommitWithin(100);\n    cloudSolrClient.request(update);\n  }\n\n","sourceOld":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n    NamedList<Object> rsp = cloudSolrClient.request(new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/authentication\", new ModifiableSolrParams()));\n    assertNotNull(rsp.get(CommandOperation.ERR_MSGS));\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    HttpClient cl = cloudSolrClient.getLbClient().getHttpClient();\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, \"/admin/authentication\", new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + \"/admin/authentication\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\", \"x-update\",\n            \"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\",\"collection-admin-edit\", \"role\", \"admin\" )))));\n    r = cl.execute(httpPost);\n\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(cloudSolrClient.getDefaultCollection());\n\n    HttpSolrClient solrClient = new HttpSolrClient(baseUrl);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    reload.setMethod(SolrRequest.METHOD.POST);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    cloudSolrClient.request(new CollectionAdminRequest.Reload()\n        .setCollectionName(defaultCollName)\n        .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n    try {\n      cloudSolrClient.request(new CollectionAdminRequest.Reload()\n          .setCollectionName(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      fail(\"This should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","sourceNew":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = cloudSolrClient.getLbClient().getHttpClient();\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\", \"x-update\",\n            \"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\",\"collection-admin-edit\", \"role\", \"admin\" )))));\n    r = cl.execute(httpPost);\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(cloudSolrClient.getDefaultCollection());\n\n    HttpSolrClient solrClient = new HttpSolrClient(baseUrl);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    reload.setMethod(SolrRequest.METHOD.POST);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    cloudSolrClient.request(new CollectionAdminRequest.Reload()\n        .setCollectionName(defaultCollName)\n        .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n    try {\n      cloudSolrClient.request(new CollectionAdminRequest.Reload()\n          .setCollectionName(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      fail(\"This should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n    cloudSolrClient.setDefaultCollection(old);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(\"{set-permission : { name : update , role : admin}}\".getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200,r.getStatusLine().getStatusCode());\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\",\"4\");\n    UpdateRequest update = new UpdateRequest();\n    update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n    update.add(doc);\n    update.setCommitWithin(100);\n    cloudSolrClient.request(update);\n  }\n\n","sourceOld":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n    NamedList<Object> rsp = cloudSolrClient.request(new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/authentication\", new ModifiableSolrParams()));\n    assertNotNull(rsp.get(CommandOperation.ERR_MSGS));\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    HttpClient cl = cloudSolrClient.getLbClient().getHttpClient();\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, \"/admin/authentication\", new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + \"/admin/authentication\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + \"/admin/authentication\", \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\", \"x-update\",\n            \"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + \"/admin/authorization\", \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    httpPost = new HttpPost(baseUrl + \"/admin/authorization\");\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\",\"collection-admin-edit\", \"role\", \"admin\" )))));\n    r = cl.execute(httpPost);\n\n    verifySecurityStatus(cl, baseUrl+\"/admin/authorization\", \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(cloudSolrClient.getDefaultCollection());\n\n    HttpSolrClient solrClient = new HttpSolrClient(baseUrl);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    reload.setMethod(SolrRequest.METHOD.POST);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    cloudSolrClient.request(new CollectionAdminRequest.Reload()\n        .setCollectionName(defaultCollName)\n        .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n    try {\n      cloudSolrClient.request(new CollectionAdminRequest.Reload()\n          .setCollectionName(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      fail(\"This should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"861a8940601b61a2fd5427f7187314d516ef1586","date":1457434409,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","sourceNew":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = cloudSolrClient.getLbClient().getHttpClient();\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\", \"x-update\",\n            \"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\",\"collection-admin-edit\", \"role\", \"admin\" )))));\n    r = cl.execute(httpPost);\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(defaultCollName);\n\n    HttpSolrClient solrClient = new HttpSolrClient(baseUrl);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    reload.setMethod(SolrRequest.METHOD.POST);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    cloudSolrClient.request(new CollectionAdminRequest.Reload()\n        .setCollectionName(defaultCollName)\n        .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n    try {\n      cloudSolrClient.request(new CollectionAdminRequest.Reload()\n          .setCollectionName(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      fail(\"This should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n    cloudSolrClient.setDefaultCollection(old);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(\"{set-permission : { name : update , role : admin}}\".getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200,r.getStatusLine().getStatusCode());\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\",\"4\");\n    UpdateRequest update = new UpdateRequest();\n    update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n    update.add(doc);\n    update.setCommitWithin(100);\n    cloudSolrClient.request(update);\n  }\n\n","sourceOld":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = cloudSolrClient.getLbClient().getHttpClient();\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\", \"x-update\",\n            \"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\",\"collection-admin-edit\", \"role\", \"admin\" )))));\n    r = cl.execute(httpPost);\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(cloudSolrClient.getDefaultCollection());\n\n    HttpSolrClient solrClient = new HttpSolrClient(baseUrl);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    reload.setMethod(SolrRequest.METHOD.POST);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    cloudSolrClient.request(new CollectionAdminRequest.Reload()\n        .setCollectionName(defaultCollName)\n        .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n    try {\n      cloudSolrClient.request(new CollectionAdminRequest.Reload()\n          .setCollectionName(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      fail(\"This should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n    cloudSolrClient.setDefaultCollection(old);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(\"{set-permission : { name : update , role : admin}}\".getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200,r.getStatusLine().getStatusCode());\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\",\"4\");\n    UpdateRequest update = new UpdateRequest();\n    update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n    update.add(doc);\n    update.setCommitWithin(100);\n    cloudSolrClient.request(update);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1dce8d293bb23a3bc9acca2dbdf8329ec48517d","date":1457434419,"type":3,"author":"Alan Woodward","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","sourceNew":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = cloudSolrClient.getLbClient().getHttpClient();\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\", \"x-update\",\n            \"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\",\"collection-admin-edit\", \"role\", \"admin\" )))));\n    r = cl.execute(httpPost);\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(defaultCollName);\n\n    HttpSolrClient solrClient = new HttpSolrClient(baseUrl);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    reload.setMethod(SolrRequest.METHOD.POST);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    cloudSolrClient.request(new CollectionAdminRequest.Reload()\n        .setCollectionName(defaultCollName)\n        .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n    try {\n      cloudSolrClient.request(new CollectionAdminRequest.Reload()\n          .setCollectionName(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      fail(\"This should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n    cloudSolrClient.setDefaultCollection(old);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(\"{set-permission : { name : update , role : admin}}\".getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200,r.getStatusLine().getStatusCode());\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\",\"4\");\n    UpdateRequest update = new UpdateRequest();\n    update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n    update.add(doc);\n    update.setCommitWithin(100);\n    cloudSolrClient.request(update);\n  }\n\n","sourceOld":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = cloudSolrClient.getLbClient().getHttpClient();\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\", \"x-update\",\n            \"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\",\"collection-admin-edit\", \"role\", \"admin\" )))));\n    r = cl.execute(httpPost);\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(cloudSolrClient.getDefaultCollection());\n\n    HttpSolrClient solrClient = new HttpSolrClient(baseUrl);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    reload.setMethod(SolrRequest.METHOD.POST);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    cloudSolrClient.request(new CollectionAdminRequest.Reload()\n        .setCollectionName(defaultCollName)\n        .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n    try {\n      cloudSolrClient.request(new CollectionAdminRequest.Reload()\n          .setCollectionName(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      fail(\"This should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n    cloudSolrClient.setDefaultCollection(old);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(\"{set-permission : { name : update , role : admin}}\".getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200,r.getStatusLine().getStatusCode());\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\",\"4\");\n    UpdateRequest update = new UpdateRequest();\n    update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n    update.add(doc);\n    update.setCommitWithin(100);\n    cloudSolrClient.request(update);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85784a21c6101aadd8d5b3d9dfed51279fbd43d9","date":1458237890,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","sourceNew":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = cloudSolrClient.getLbClient().getHttpClient();\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\",\"collection-admin-edit\", \"role\", \"admin\" )))));\n    r = cl.execute(httpPost);\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(defaultCollName);\n\n    HttpSolrClient solrClient = new HttpSolrClient(baseUrl);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    reload.setMethod(SolrRequest.METHOD.POST);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    cloudSolrClient.request(new CollectionAdminRequest.Reload()\n        .setCollectionName(defaultCollName)\n        .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n    try {\n      cloudSolrClient.request(new CollectionAdminRequest.Reload()\n          .setCollectionName(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      fail(\"This should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n    cloudSolrClient.setDefaultCollection(old);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(\"{set-permission : { name : update , role : admin}}\".getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200,r.getStatusLine().getStatusCode());\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\",\"4\");\n    UpdateRequest update = new UpdateRequest();\n    update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n    update.add(doc);\n    update.setCommitWithin(100);\n    cloudSolrClient.request(update);\n  }\n\n","sourceOld":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = cloudSolrClient.getLbClient().getHttpClient();\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\", \"x-update\",\n            \"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\",\"collection-admin-edit\", \"role\", \"admin\" )))));\n    r = cl.execute(httpPost);\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(defaultCollName);\n\n    HttpSolrClient solrClient = new HttpSolrClient(baseUrl);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    reload.setMethod(SolrRequest.METHOD.POST);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    cloudSolrClient.request(new CollectionAdminRequest.Reload()\n        .setCollectionName(defaultCollName)\n        .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n    try {\n      cloudSolrClient.request(new CollectionAdminRequest.Reload()\n          .setCollectionName(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      fail(\"This should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n    cloudSolrClient.setDefaultCollection(old);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(\"{set-permission : { name : update , role : admin}}\".getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200,r.getStatusLine().getStatusCode());\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\",\"4\");\n    UpdateRequest update = new UpdateRequest();\n    update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n    update.add(doc);\n    update.setCommitWithin(100);\n    cloudSolrClient.request(update);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","sourceNew":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = HttpClientUtil.createClient(null);\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    Utils.consumeFully(r.getEntity());\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\",\"collection-admin-edit\", \"role\", \"admin\" )))));\n    r = cl.execute(httpPost);\n    Utils.consumeFully(r.getEntity());\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(defaultCollName);\n\n    try (HttpSolrClient solrClient = new HttpSolrClient(baseUrl)) {\n      try {\n        rsp = solrClient.request(reload);\n        fail(\"must have failed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n      reload.setMethod(SolrRequest.METHOD.POST);\n      try {\n        rsp = solrClient.request(reload);\n        fail(\"must have failed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n    }\n    cloudSolrClient.request(new CollectionAdminRequest.Reload()\n        .setCollectionName(defaultCollName)\n        .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n    try {\n      cloudSolrClient.request(new CollectionAdminRequest.Reload()\n          .setCollectionName(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      fail(\"This should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n    cloudSolrClient.setDefaultCollection(old);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(\"{set-permission : { name : update , role : admin}}\".getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200,r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\",\"4\");\n    UpdateRequest update = new UpdateRequest();\n    update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n    update.add(doc);\n    update.setCommitWithin(100);\n    cloudSolrClient.request(update);\n    \n    HttpClientUtil.close(cl);\n  }\n\n","sourceOld":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = cloudSolrClient.getLbClient().getHttpClient();\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\",\"collection-admin-edit\", \"role\", \"admin\" )))));\n    r = cl.execute(httpPost);\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(defaultCollName);\n\n    HttpSolrClient solrClient = new HttpSolrClient(baseUrl);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    reload.setMethod(SolrRequest.METHOD.POST);\n    try {\n      rsp = solrClient.request(reload);\n      fail(\"must have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n    cloudSolrClient.request(new CollectionAdminRequest.Reload()\n        .setCollectionName(defaultCollName)\n        .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n    try {\n      cloudSolrClient.request(new CollectionAdminRequest.Reload()\n          .setCollectionName(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      fail(\"This should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n    cloudSolrClient.setDefaultCollection(old);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(\"{set-permission : { name : update , role : admin}}\".getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200,r.getStatusLine().getStatusCode());\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\",\"4\");\n    UpdateRequest update = new UpdateRequest();\n    update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n    update.add(doc);\n    update.setCommitWithin(100);\n    cloudSolrClient.request(update);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","sourceNew":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = HttpClientUtil.createClient(null);\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    Utils.consumeFully(r.getEntity());\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\",\"collection-admin-edit\", \"role\", \"admin\" )))));\n    r = cl.execute(httpPost);\n    Utils.consumeFully(r.getEntity());\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(defaultCollName);\n\n    try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n      try {\n        rsp = solrClient.request(reload);\n        fail(\"must have failed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n      reload.setMethod(SolrRequest.METHOD.POST);\n      try {\n        rsp = solrClient.request(reload);\n        fail(\"must have failed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n    }\n    cloudSolrClient.request(new CollectionAdminRequest.Reload()\n        .setCollectionName(defaultCollName)\n        .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n    try {\n      cloudSolrClient.request(new CollectionAdminRequest.Reload()\n          .setCollectionName(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      fail(\"This should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n    cloudSolrClient.setDefaultCollection(old);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(\"{set-permission : { name : update , role : admin}}\".getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200,r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\",\"4\");\n    UpdateRequest update = new UpdateRequest();\n    update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n    update.add(doc);\n    update.setCommitWithin(100);\n    cloudSolrClient.request(update);\n    \n    HttpClientUtil.close(cl);\n  }\n\n","sourceOld":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = HttpClientUtil.createClient(null);\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    Utils.consumeFully(r.getEntity());\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\",\"collection-admin-edit\", \"role\", \"admin\" )))));\n    r = cl.execute(httpPost);\n    Utils.consumeFully(r.getEntity());\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(defaultCollName);\n\n    try (HttpSolrClient solrClient = new HttpSolrClient(baseUrl)) {\n      try {\n        rsp = solrClient.request(reload);\n        fail(\"must have failed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n      reload.setMethod(SolrRequest.METHOD.POST);\n      try {\n        rsp = solrClient.request(reload);\n        fail(\"must have failed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n    }\n    cloudSolrClient.request(new CollectionAdminRequest.Reload()\n        .setCollectionName(defaultCollName)\n        .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n    try {\n      cloudSolrClient.request(new CollectionAdminRequest.Reload()\n          .setCollectionName(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      fail(\"This should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n    cloudSolrClient.setDefaultCollection(old);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(\"{set-permission : { name : update , role : admin}}\".getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200,r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\",\"4\");\n    UpdateRequest update = new UpdateRequest();\n    update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n    update.add(doc);\n    update.setCommitWithin(100);\n    cloudSolrClient.request(update);\n    \n    HttpClientUtil.close(cl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","sourceNew":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = HttpClientUtil.createClient(null);\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    Utils.consumeFully(r.getEntity());\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\",\"collection-admin-edit\", \"role\", \"admin\" )))));\n    r = cl.execute(httpPost);\n    Utils.consumeFully(r.getEntity());\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(defaultCollName);\n\n    try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n      try {\n        rsp = solrClient.request(reload);\n        fail(\"must have failed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n      reload.setMethod(SolrRequest.METHOD.POST);\n      try {\n        rsp = solrClient.request(reload);\n        fail(\"must have failed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n    }\n    cloudSolrClient.request(new CollectionAdminRequest.Reload()\n        .setCollectionName(defaultCollName)\n        .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n    try {\n      cloudSolrClient.request(new CollectionAdminRequest.Reload()\n          .setCollectionName(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      fail(\"This should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n    cloudSolrClient.setDefaultCollection(old);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(\"{set-permission : { name : update , role : admin}}\".getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200,r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\",\"4\");\n    UpdateRequest update = new UpdateRequest();\n    update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n    update.add(doc);\n    update.setCommitWithin(100);\n    cloudSolrClient.request(update);\n    \n    HttpClientUtil.close(cl);\n  }\n\n","sourceOld":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = HttpClientUtil.createClient(null);\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    Utils.consumeFully(r.getEntity());\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\",\"collection-admin-edit\", \"role\", \"admin\" )))));\n    r = cl.execute(httpPost);\n    Utils.consumeFully(r.getEntity());\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(defaultCollName);\n\n    try (HttpSolrClient solrClient = new HttpSolrClient(baseUrl)) {\n      try {\n        rsp = solrClient.request(reload);\n        fail(\"must have failed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n      reload.setMethod(SolrRequest.METHOD.POST);\n      try {\n        rsp = solrClient.request(reload);\n        fail(\"must have failed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n    }\n    cloudSolrClient.request(new CollectionAdminRequest.Reload()\n        .setCollectionName(defaultCollName)\n        .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n    try {\n      cloudSolrClient.request(new CollectionAdminRequest.Reload()\n          .setCollectionName(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      fail(\"This should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n    cloudSolrClient.setDefaultCollection(old);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(\"{set-permission : { name : update , role : admin}}\".getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200,r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\",\"4\");\n    UpdateRequest update = new UpdateRequest();\n    update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n    update.add(doc);\n    update.setCommitWithin(100);\n    cloudSolrClient.request(update);\n    \n    HttpClientUtil.close(cl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4a9106065a4a11ef25c33e0e1eabd34bfbec38","date":1465913265,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","sourceNew":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = HttpClientUtil.createClient(null);\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    Utils.consumeFully(r.getEntity());\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n    executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n        (\"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(defaultCollName);\n\n    try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n      try {\n        rsp = solrClient.request(reload);\n        fail(\"must have failed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n      reload.setMethod(SolrRequest.METHOD.POST);\n      try {\n        rsp = solrClient.request(reload);\n        fail(\"must have failed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n    }\n    cloudSolrClient.request(new CollectionAdminRequest.Reload()\n        .setCollectionName(defaultCollName)\n        .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n    try {\n      cloudSolrClient.request(new CollectionAdminRequest.Reload()\n          .setCollectionName(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      fail(\"This should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n    cloudSolrClient.setDefaultCollection(old);\n    executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\",\"4\");\n    UpdateRequest update = new UpdateRequest();\n    update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n    update.add(doc);\n    update.setCommitWithin(100);\n    cloudSolrClient.request(update);\n\n\n    executeCommand(baseUrl + authzPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n    String[] toolArgs = new String[]{\n        \"status\", \"-solr\", baseUrl};\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n    SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n    try {\n      System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n      Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n      assertTrue(obj.containsKey(\"version\"));\n      assertTrue(obj.containsKey(\"startTime\"));\n      assertTrue(obj.containsKey(\"uptime\"));\n      assertTrue(obj.containsKey(\"memory\"));\n    } catch (Exception e) {\n      log.error(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n    }\n    executeCommand(baseUrl + authzPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    HttpClientUtil.close(cl);\n  }\n\n","sourceOld":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = HttpClientUtil.createClient(null);\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    Utils.consumeFully(r.getEntity());\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\",\"collection-admin-edit\", \"role\", \"admin\" )))));\n    r = cl.execute(httpPost);\n    Utils.consumeFully(r.getEntity());\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(defaultCollName);\n\n    try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n      try {\n        rsp = solrClient.request(reload);\n        fail(\"must have failed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n      reload.setMethod(SolrRequest.METHOD.POST);\n      try {\n        rsp = solrClient.request(reload);\n        fail(\"must have failed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n    }\n    cloudSolrClient.request(new CollectionAdminRequest.Reload()\n        .setCollectionName(defaultCollName)\n        .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n    try {\n      cloudSolrClient.request(new CollectionAdminRequest.Reload()\n          .setCollectionName(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      fail(\"This should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n    cloudSolrClient.setDefaultCollection(old);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(\"{set-permission : { name : update , role : admin}}\".getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200,r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\",\"4\");\n    UpdateRequest update = new UpdateRequest();\n    update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n    update.add(doc);\n    update.setCommitWithin(100);\n    cloudSolrClient.request(update);\n    \n    HttpClientUtil.close(cl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd1681476145fe6f084e5acaafbed99f5f6f3448","date":1467703084,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","sourceNew":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n      String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      boolean found = false;\n      for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n        if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n          found = true;\n          jettySolrRunner.stop();\n          jettySolrRunner.start();\n          verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n          break;\n        }\n      }\n\n      assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n      try {\n        cloudSolrClient.request(genericReq);\n        fail(\"Should have failed with a 401\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n      }\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n      reload.setCollectionName(defaultCollName);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cloudSolrClient.request(new CollectionAdminRequest.Reload()\n          .setCollectionName(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cloudSolrClient.request(new CollectionAdminRequest.Reload()\n            .setCollectionName(defaultCollName)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      cloudSolrClient.setDefaultCollection(old);\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cloudSolrClient.request(update);\n\n\n      executeCommand(baseUrl + authzPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authzPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = HttpClientUtil.createClient(null);\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    Utils.consumeFully(r.getEntity());\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n    executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n        (\"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(defaultCollName);\n\n    try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n      try {\n        rsp = solrClient.request(reload);\n        fail(\"must have failed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n      reload.setMethod(SolrRequest.METHOD.POST);\n      try {\n        rsp = solrClient.request(reload);\n        fail(\"must have failed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n    }\n    cloudSolrClient.request(new CollectionAdminRequest.Reload()\n        .setCollectionName(defaultCollName)\n        .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n    try {\n      cloudSolrClient.request(new CollectionAdminRequest.Reload()\n          .setCollectionName(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      fail(\"This should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n    cloudSolrClient.setDefaultCollection(old);\n    executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\",\"4\");\n    UpdateRequest update = new UpdateRequest();\n    update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n    update.add(doc);\n    update.setCommitWithin(100);\n    cloudSolrClient.request(update);\n\n\n    executeCommand(baseUrl + authzPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n    String[] toolArgs = new String[]{\n        \"status\", \"-solr\", baseUrl};\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n    SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n    try {\n      System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n      Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n      assertTrue(obj.containsKey(\"version\"));\n      assertTrue(obj.containsKey(\"startTime\"));\n      assertTrue(obj.containsKey(\"uptime\"));\n      assertTrue(obj.containsKey(\"memory\"));\n    } catch (Exception e) {\n      log.error(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n    }\n    executeCommand(baseUrl + authzPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    HttpClientUtil.close(cl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b2aee2c2f0da4e56c7d0c692ec37c6496a2a567","date":1467703415,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","sourceNew":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n      String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      boolean found = false;\n      for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n        if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n          found = true;\n          jettySolrRunner.stop();\n          jettySolrRunner.start();\n          verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n          break;\n        }\n      }\n\n      assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n      try {\n        cloudSolrClient.request(genericReq);\n        fail(\"Should have failed with a 401\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n      }\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(defaultCollName);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cloudSolrClient.request(CollectionAdminRequest.reloadCollection(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cloudSolrClient.request(CollectionAdminRequest.reloadCollection(defaultCollName)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      cloudSolrClient.setDefaultCollection(old);\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cloudSolrClient.request(update);\n\n\n      executeCommand(baseUrl + authzPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authzPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n      String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      boolean found = false;\n      for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n        if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n          found = true;\n          jettySolrRunner.stop();\n          jettySolrRunner.start();\n          verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n          break;\n        }\n      }\n\n      assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n      try {\n        cloudSolrClient.request(genericReq);\n        fail(\"Should have failed with a 401\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n      }\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n      reload.setCollectionName(defaultCollName);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cloudSolrClient.request(new CollectionAdminRequest.Reload()\n          .setCollectionName(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cloudSolrClient.request(new CollectionAdminRequest.Reload()\n            .setCollectionName(defaultCollName)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      cloudSolrClient.setDefaultCollection(old);\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cloudSolrClient.request(update);\n\n\n      executeCommand(baseUrl + authzPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authzPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b6b27adfd0ae23a874c905f6003b09606641f5f","date":1472324778,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","sourceNew":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n      String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      boolean found = false;\n      for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n        if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n          found = true;\n          jettySolrRunner.stop();\n          jettySolrRunner.start();\n          verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n          break;\n        }\n      }\n\n      assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n      try {\n        cloudSolrClient.request(genericReq);\n        fail(\"Should have failed with a 401\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n      }\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(defaultCollName);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cloudSolrClient.request(CollectionAdminRequest.reloadCollection(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cloudSolrClient.request(CollectionAdminRequest.reloadCollection(defaultCollName)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      cloudSolrClient.setDefaultCollection(old);\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cloudSolrClient.request(update);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + PKIAuthenticationPlugin.PATH + \"?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n      String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      boolean found = false;\n      for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n        if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n          found = true;\n          jettySolrRunner.stop();\n          jettySolrRunner.start();\n          verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n          break;\n        }\n      }\n\n      assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n      try {\n        cloudSolrClient.request(genericReq);\n        fail(\"Should have failed with a 401\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n      }\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(defaultCollName);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cloudSolrClient.request(CollectionAdminRequest.reloadCollection(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cloudSolrClient.request(CollectionAdminRequest.reloadCollection(defaultCollName)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      cloudSolrClient.setDefaultCollection(old);\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cloudSolrClient.request(update);\n\n\n      executeCommand(baseUrl + authzPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authzPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bf3bb51868790b9ae23c224583047716308a017","date":1473233468,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","sourceNew":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + PKIAuthenticationPlugin.PATH + \"?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n      String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      boolean found = false;\n      for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n        if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n          found = true;\n          jettySolrRunner.stop();\n          jettySolrRunner.start();\n          verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n          break;\n        }\n      }\n\n      assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n      try {\n        cloudSolrClient.request(genericReq);\n        fail(\"Should have failed with a 401\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n      }\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(defaultCollName);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cloudSolrClient.request(CollectionAdminRequest.reloadCollection(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cloudSolrClient.request(CollectionAdminRequest.reloadCollection(defaultCollName)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      cloudSolrClient.setDefaultCollection(old);\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cloudSolrClient.request(update);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + PKIAuthenticationPlugin.PATH + \"?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["5797edf204835cbec74c0ff24f0b9ebc8aa5441b","5797edf204835cbec74c0ff24f0b9ebc8aa5441b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","sourceNew":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + PKIAuthenticationPlugin.PATH + \"?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n      String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      boolean found = false;\n      for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n        if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n          found = true;\n          jettySolrRunner.stop();\n          jettySolrRunner.start();\n          verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n          break;\n        }\n      }\n\n      assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n      try {\n        cloudSolrClient.request(genericReq);\n        fail(\"Should have failed with a 401\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n      }\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(defaultCollName);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cloudSolrClient.request(CollectionAdminRequest.reloadCollection(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cloudSolrClient.request(CollectionAdminRequest.reloadCollection(defaultCollName)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      cloudSolrClient.setDefaultCollection(old);\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cloudSolrClient.request(update);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + PKIAuthenticationPlugin.PATH + \"?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n      String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      boolean found = false;\n      for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n        if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n          found = true;\n          jettySolrRunner.stop();\n          jettySolrRunner.start();\n          verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n          break;\n        }\n      }\n\n      assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n      try {\n        cloudSolrClient.request(genericReq);\n        fail(\"Should have failed with a 401\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n      }\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(defaultCollName);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cloudSolrClient.request(CollectionAdminRequest.reloadCollection(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cloudSolrClient.request(CollectionAdminRequest.reloadCollection(defaultCollName)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      cloudSolrClient.setDefaultCollection(old);\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cloudSolrClient.request(update);\n\n\n      executeCommand(baseUrl + authzPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authzPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = HttpClientUtil.createClient(null);\n    String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n    zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n    boolean found = false;\n    for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n      if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n        found = true;\n        jettySolrRunner.stop();\n        jettySolrRunner.start();\n        verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n        break;\n      }\n    }\n\n    assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n    String command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n        \"}\";\n\n    GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n    genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n    try {\n      cloudSolrClient.request(genericReq);\n      fail(\"Should have failed with a 401\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n    }\n    command = \"{\\n\" +\n        \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n        \"}\";\n\n    HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n    HttpResponse r = cl.execute(httpPost);\n    int statusCode = r.getStatusLine().getStatusCode();\n    Utils.consumeFully(r.getEntity());\n    assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n    verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n    command = \"{\\n\" +\n        \"'set-user-role': {'harry':'admin'}\\n\" +\n        \"}\";\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n    httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n\n    baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"collection\", \"x\",\n            \"path\", \"/update/*\",\n            \"role\", \"dev\")))));\n\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n    r = cl.execute(httpPost);\n    assertEquals(200, r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(Utils.toJSON(singletonMap(\"set-permission\", Utils.makeMap\n        (\"name\",\"collection-admin-edit\", \"role\", \"admin\" )))));\n    r = cl.execute(httpPost);\n    Utils.consumeFully(r.getEntity());\n    verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n    CollectionAdminRequest.Reload reload = new CollectionAdminRequest.Reload();\n    reload.setCollectionName(defaultCollName);\n\n    try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n      try {\n        rsp = solrClient.request(reload);\n        fail(\"must have failed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n      reload.setMethod(SolrRequest.METHOD.POST);\n      try {\n        rsp = solrClient.request(reload);\n        fail(\"must have failed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n    }\n    cloudSolrClient.request(new CollectionAdminRequest.Reload()\n        .setCollectionName(defaultCollName)\n        .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n    try {\n      cloudSolrClient.request(new CollectionAdminRequest.Reload()\n          .setCollectionName(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      fail(\"This should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n\n    }\n\n    cloudSolrClient.setDefaultCollection(old);\n\n    httpPost = new HttpPost(baseUrl + authzPrefix);\n    setBasicAuthHeader(httpPost, \"harry\", \"HarryIsUberCool\");\n    httpPost.setEntity(new ByteArrayEntity(\"{set-permission : { name : update , role : admin}}\".getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    assertEquals(200,r.getStatusLine().getStatusCode());\n    Utils.consumeFully(r.getEntity());\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\",\"4\");\n    UpdateRequest update = new UpdateRequest();\n    update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n    update.add(doc);\n    update.setCommitWithin(100);\n    cloudSolrClient.request(update);\n    \n    HttpClientUtil.close(cl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad9908836000c5ea3bdea96886dac2a72235053f":["e39c4a00751908441a407ce8d531a436658d9fd6"],"0db6b07ace5f92f85e46b06168f1a2f8ebc5ef76":["c0372f459e6b4348374eb3fbdbde69ee47840b71"],"3bf3bb51868790b9ae23c224583047716308a017":["7b6b27adfd0ae23a874c905f6003b09606641f5f"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["859081acf00749f5dd462772c571d611d4a4d2db"],"7b6b27adfd0ae23a874c905f6003b09606641f5f":["7b2aee2c2f0da4e56c7d0c692ec37c6496a2a567"],"ccfb40e1834cac1619556a0becf198bb7bad5d63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"89424def13674ea17829b41c5883c54ecc31a132":["7b6b27adfd0ae23a874c905f6003b09606641f5f","3bf3bb51868790b9ae23c224583047716308a017"],"e39c4a00751908441a407ce8d531a436658d9fd6":["77aad0f26236c97028aecb0fcc76de2b13edf1a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7b2aee2c2f0da4e56c7d0c692ec37c6496a2a567","89424def13674ea17829b41c5883c54ecc31a132"],"7b2aee2c2f0da4e56c7d0c692ec37c6496a2a567":["cd1681476145fe6f084e5acaafbed99f5f6f3448"],"c609b959cb2dad7c9d9b3237fa2b806629e9206d":["ccfb40e1834cac1619556a0becf198bb7bad5d63"],"77aad0f26236c97028aecb0fcc76de2b13edf1a0":["0db6b07ace5f92f85e46b06168f1a2f8ebc5ef76"],"b1704c078ec59838c9d95d5bf5738b393b537494":["ad9908836000c5ea3bdea96886dac2a72235053f","51f7b7f45b8207ac13e4274c75d82ef57c0c4c1e"],"861a8940601b61a2fd5427f7187314d516ef1586":["51f7b7f45b8207ac13e4274c75d82ef57c0c4c1e"],"85784a21c6101aadd8d5b3d9dfed51279fbd43d9":["d1dce8d293bb23a3bc9acca2dbdf8329ec48517d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["ad9908836000c5ea3bdea96886dac2a72235053f","51f7b7f45b8207ac13e4274c75d82ef57c0c4c1e"],"cd1681476145fe6f084e5acaafbed99f5f6f3448":["3e4a9106065a4a11ef25c33e0e1eabd34bfbec38"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"51f7b7f45b8207ac13e4274c75d82ef57c0c4c1e":["ad9908836000c5ea3bdea96886dac2a72235053f"],"859081acf00749f5dd462772c571d611d4a4d2db":["85784a21c6101aadd8d5b3d9dfed51279fbd43d9"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["859081acf00749f5dd462772c571d611d4a4d2db","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"c0372f459e6b4348374eb3fbdbde69ee47840b71":["c609b959cb2dad7c9d9b3237fa2b806629e9206d"],"3e4a9106065a4a11ef25c33e0e1eabd34bfbec38":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"d1dce8d293bb23a3bc9acca2dbdf8329ec48517d":["51f7b7f45b8207ac13e4274c75d82ef57c0c4c1e","861a8940601b61a2fd5427f7187314d516ef1586"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"ad9908836000c5ea3bdea96886dac2a72235053f":["b1704c078ec59838c9d95d5bf5738b393b537494","1e6acbaae7af722f17204ceccf0f7db5753eccf3","51f7b7f45b8207ac13e4274c75d82ef57c0c4c1e"],"0db6b07ace5f92f85e46b06168f1a2f8ebc5ef76":["77aad0f26236c97028aecb0fcc76de2b13edf1a0"],"3bf3bb51868790b9ae23c224583047716308a017":["89424def13674ea17829b41c5883c54ecc31a132"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"7b6b27adfd0ae23a874c905f6003b09606641f5f":["3bf3bb51868790b9ae23c224583047716308a017","89424def13674ea17829b41c5883c54ecc31a132"],"ccfb40e1834cac1619556a0becf198bb7bad5d63":["c609b959cb2dad7c9d9b3237fa2b806629e9206d"],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e39c4a00751908441a407ce8d531a436658d9fd6":["ad9908836000c5ea3bdea96886dac2a72235053f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ccfb40e1834cac1619556a0becf198bb7bad5d63"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7b2aee2c2f0da4e56c7d0c692ec37c6496a2a567":["7b6b27adfd0ae23a874c905f6003b09606641f5f","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c609b959cb2dad7c9d9b3237fa2b806629e9206d":["c0372f459e6b4348374eb3fbdbde69ee47840b71"],"77aad0f26236c97028aecb0fcc76de2b13edf1a0":["e39c4a00751908441a407ce8d531a436658d9fd6"],"b1704c078ec59838c9d95d5bf5738b393b537494":[],"861a8940601b61a2fd5427f7187314d516ef1586":["d1dce8d293bb23a3bc9acca2dbdf8329ec48517d"],"85784a21c6101aadd8d5b3d9dfed51279fbd43d9":["859081acf00749f5dd462772c571d611d4a4d2db"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"cd1681476145fe6f084e5acaafbed99f5f6f3448":["7b2aee2c2f0da4e56c7d0c692ec37c6496a2a567"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"51f7b7f45b8207ac13e4274c75d82ef57c0c4c1e":["b1704c078ec59838c9d95d5bf5738b393b537494","861a8940601b61a2fd5427f7187314d516ef1586","1e6acbaae7af722f17204ceccf0f7db5753eccf3","d1dce8d293bb23a3bc9acca2dbdf8329ec48517d"],"859081acf00749f5dd462772c571d611d4a4d2db":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3e4a9106065a4a11ef25c33e0e1eabd34bfbec38"],"c0372f459e6b4348374eb3fbdbde69ee47840b71":["0db6b07ace5f92f85e46b06168f1a2f8ebc5ef76"],"d1dce8d293bb23a3bc9acca2dbdf8329ec48517d":["85784a21c6101aadd8d5b3d9dfed51279fbd43d9"],"3e4a9106065a4a11ef25c33e0e1eabd34bfbec38":["cd1681476145fe6f084e5acaafbed99f5f6f3448"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b1704c078ec59838c9d95d5bf5738b393b537494","1e6acbaae7af722f17204ceccf0f7db5753eccf3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}