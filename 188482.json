{"path":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","sourceNew":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req);\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req);\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","sourceNew":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req);\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req);\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","sourceNew":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req);\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req);\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","sourceNew":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req);\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req);\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","sourceNew":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req);\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req);\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02453e8d9fe1bde22dc7676145ad809cb1dbfcad","date":1386084179,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","sourceNew":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSortSpec(commands.get(1), req).getSort();\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req);\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","sourceNew":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSortSpec(commands.get(1), req).getSort();\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req);\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c8dc56dbae186505066de8a78986cba31525ef0","date":1447876120,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","sourceNew":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = SortSpecParsing.parseSortSpec(commands.get(1), req).getSort();\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSortSpec(commands.get(1), req).getSort();\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","date":1470751445,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","sourceNew":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = SortSpecParsing.parseSortSpec(commands.get(1), req).getSort();\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = SortSpecParsing.parseSortSpec(commands.get(1), req).getSort();\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bca25eefa1f2205e2b0ef713701dc3a0fecd702","date":1470810578,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","sourceNew":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = SortSpecParsing.parseSortSpec(commands.get(1), req).getSort();\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = SortSpecParsing.parseSortSpec(commands.get(1), req).getSort();\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","sourceNew":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = SortSpecParsing.parseSortSpec(commands.get(1), req).getSort();\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = SortSpecParsing.parseSortSpec(commands.get(1), req).getSort();\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","sourceNew":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = SortSpecParsing.parseSortSpec(commands.get(1), req).getSort();\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = SortSpecParsing.parseSortSpec(commands.get(1), req).getSort();\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cdb67100dc016748799a77218aa409478372d79":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","3cdb67100dc016748799a77218aa409478372d79"],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["6c8dc56dbae186505066de8a78986cba31525ef0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6c8dc56dbae186505066de8a78986cba31525ef0","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["6c8dc56dbae186505066de8a78986cba31525ef0","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f"],"6c8dc56dbae186505066de8a78986cba31525ef0":["02453e8d9fe1bde22dc7676145ad809cb1dbfcad"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"02453e8d9fe1bde22dc7676145ad809cb1dbfcad":["3cdb67100dc016748799a77218aa409478372d79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["3cdb67100dc016748799a77218aa409478372d79","02453e8d9fe1bde22dc7676145ad809cb1dbfcad"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["6c8dc56dbae186505066de8a78986cba31525ef0","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"]},"commit2Childs":{"3cdb67100dc016748799a77218aa409478372d79":["407687e67faf6e1f02a211ca078d8e3eed631027","02453e8d9fe1bde22dc7676145ad809cb1dbfcad","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"c26f00b574427b55127e869b935845554afde1fa":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6c8dc56dbae186505066de8a78986cba31525ef0":["cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8bca25eefa1f2205e2b0ef713701dc3a0fecd702","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"02453e8d9fe1bde22dc7676145ad809cb1dbfcad":["6c8dc56dbae186505066de8a78986cba31525ef0","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","a258fbb26824fd104ed795e5d9033d2d040049ee","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}