{"path":"src/java/org/apache/solr/common/util/ContentStream#getStream().mjava","commits":[{"id":"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb","date":1181791578,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/ContentStream#getStream().mjava","pathOld":"src/java/org/apache/solr/util/ContentStream#getStream().mjava","sourceNew":"  /**\n   * Get an open stream.  You are responsible for closing it.  Consider using \n   * something like:\n   * <pre>\n   *   InputStream stream = stream.getStream();\n   *   try {\n   *     // use the stream...\n   *   }\n   *   finally {\n   *     IOUtils.closeQuietly(reader);\n   *   }\n   *  </pre>\n   *  \n   * Only the first call to <code>getStream()</code> or <code>getReader()</code>\n   * is gaurenteed to work.  The runtime behavior for aditional calls is undefined.\n   */\n  InputStream getStream() throws IOException;\n\n","sourceOld":"  /**\n   * Get an open stream.  You are responsible for closing it.  Consider using \n   * something like:\n   * <pre>\n   *   InputStream stream = stream.getStream();\n   *   try {\n   *     // use the stream...\n   *   }\n   *   finally {\n   *     IOUtils.closeQuietly(reader);\n   *   }\n   *  </pre>\n   *  \n   * Only the first call to <code>getStream()</code> or <code>getReader()</code>\n   * is gaurenteed to work.  The runtime behavior for aditional calls is undefined.\n   */\n  InputStream getStream() throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07b5a4df544043572e7677b4529d98cbae80db36","date":1181794217,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/ContentStream#getStream().mjava","pathOld":"src/java/org/apache/solr/common/util/ContentStream#getStream().mjava","sourceNew":"  /**\n   * Get an open stream.  You are responsible for closing it.  Consider using \n   * something like:\n   * <pre>\n   *   InputStream stream = stream.getStream();\n   *   try {\n   *     // use the stream...\n   *   }\n   *   finally {\n   *     IOUtils.closeQuietly(reader);\n   *   }\n   *  </pre>\n   *  \n   * Only the first call to <code>getStream()</code> or <code>getReader()</code>\n   * is guaranteed to work.  The runtime behavior for additional calls is undefined.\n   */\n  InputStream getStream() throws IOException;\n\n","sourceOld":"  /**\n   * Get an open stream.  You are responsible for closing it.  Consider using \n   * something like:\n   * <pre>\n   *   InputStream stream = stream.getStream();\n   *   try {\n   *     // use the stream...\n   *   }\n   *   finally {\n   *     IOUtils.closeQuietly(reader);\n   *   }\n   *  </pre>\n   *  \n   * Only the first call to <code>getStream()</code> or <code>getReader()</code>\n   * is gaurenteed to work.  The runtime behavior for aditional calls is undefined.\n   */\n  InputStream getStream() throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1ad9c638bb1b4dd2974767cae345bb043817367","date":1222460291,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/ContentStream#getStream().mjava","pathOld":"src/java/org/apache/solr/common/util/ContentStream#getStream().mjava","sourceNew":"  /**\n   * Get an open stream.  You are responsible for closing it.  Consider using \n   * something like:\n   * <pre>\n   *   InputStream stream = stream.getStream();\n   *   try {\n   *     // use the stream...\n   *   }\n   *   finally {\n   *     IOUtils.closeQuietly(stream);\n   *   }\n   *  </pre>\n   *  \n   * Only the first call to <code>getStream()</code> or <code>getReader()</code>\n   * is guaranteed to work.  The runtime behavior for additional calls is undefined.\n   */\n  InputStream getStream() throws IOException;\n\n","sourceOld":"  /**\n   * Get an open stream.  You are responsible for closing it.  Consider using \n   * something like:\n   * <pre>\n   *   InputStream stream = stream.getStream();\n   *   try {\n   *     // use the stream...\n   *   }\n   *   finally {\n   *     IOUtils.closeQuietly(reader);\n   *   }\n   *  </pre>\n   *  \n   * Only the first call to <code>getStream()</code> or <code>getReader()</code>\n   * is guaranteed to work.  The runtime behavior for additional calls is undefined.\n   */\n  InputStream getStream() throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/ContentStream#getStream().mjava","pathOld":"src/java/org/apache/solr/common/util/ContentStream#getStream().mjava","sourceNew":"  /**\n   * Get an open stream.  You are responsible for closing it.  Consider using \n   * something like:\n   * <pre>\n   *   InputStream stream = stream.getStream();\n   *   try {\n   *     // use the stream...\n   *   }\n   *   finally {\n   *     IOUtils.closeQuietly(stream);\n   *   }\n   *  </pre>\n   *  \n   * Only the first call to <code>getStream()</code> or <code>getReader()</code>\n   * is guaranteed to work.  The runtime behavior for additional calls is undefined.\n   */\n  InputStream getStream() throws IOException;\n\n","sourceOld":"  /**\n   * Get an open stream.  You are responsible for closing it.  Consider using \n   * something like:\n   * <pre>\n   *   InputStream stream = stream.getStream();\n   *   try {\n   *     // use the stream...\n   *   }\n   *   finally {\n   *     IOUtils.closeQuietly(stream);\n   *   }\n   *  </pre>\n   *  \n   * Only the first call to <code>getStream()</code> or <code>getReader()</code>\n   * is guaranteed to work.  The runtime behavior for additional calls is undefined.\n   */\n  InputStream getStream() throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["e1ad9c638bb1b4dd2974767cae345bb043817367"],"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"07b5a4df544043572e7677b4529d98cbae80db36":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"e1ad9c638bb1b4dd2974767cae345bb043817367":["07b5a4df544043572e7677b4529d98cbae80db36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["07b5a4df544043572e7677b4529d98cbae80db36"],"07b5a4df544043572e7677b4529d98cbae80db36":["e1ad9c638bb1b4dd2974767cae345bb043817367"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e1ad9c638bb1b4dd2974767cae345bb043817367":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}