{"path":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],BytesRef,int).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],BytesRef,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],BytesRef,int).mjava","sourceNew":"      // Pushes a frame we seek'd to\n      Frame pushFrame(FST.Arc<BytesRef> arc, BytesRef frameData, int length) throws IOException {\n        scratchReader.reset(frameData.bytes, frameData.offset, frameData.length);\n        final long code = scratchReader.readVLong();\n        final long fpSeek = code >>> BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n        final Frame f = getFrame(1+currentFrame.ord);\n        f.hasTerms = (code & BlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS) != 0;\n        f.hasTermsOrig = f.hasTerms;\n        f.isFloor = (code & BlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR) != 0;\n        if (f.isFloor) {\n          f.setFloorData(scratchReader, frameData);\n        }\n        pushFrame(arc, fpSeek, length);\n\n        return f;\n      }\n\n","sourceOld":"      // Pushes a frame we seek'd to\n      Frame pushFrame(FST.Arc<BytesRef> arc, BytesRef frameData, int length) throws IOException {\n        scratchReader.reset(frameData.bytes, frameData.offset, frameData.length);\n        final long code = scratchReader.readVLong();\n        final long fpSeek = code >>> BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n        final Frame f = getFrame(1+currentFrame.ord);\n        f.hasTerms = (code & BlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS) != 0;\n        f.hasTermsOrig = f.hasTerms;\n        f.isFloor = (code & BlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR) != 0;\n        if (f.isFloor) {\n          f.setFloorData(scratchReader, frameData);\n        }\n        pushFrame(arc, fpSeek, length);\n\n        return f;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],BytesRef,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],BytesRef,int).mjava","sourceNew":"      // Pushes a frame we seek'd to\n      Frame pushFrame(FST.Arc<BytesRef> arc, BytesRef frameData, int length) throws IOException {\n        scratchReader.reset(frameData.bytes, frameData.offset, frameData.length);\n        final long code = scratchReader.readVLong();\n        final long fpSeek = code >>> BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n        final Frame f = getFrame(1+currentFrame.ord);\n        f.hasTerms = (code & BlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS) != 0;\n        f.hasTermsOrig = f.hasTerms;\n        f.isFloor = (code & BlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR) != 0;\n        if (f.isFloor) {\n          f.setFloorData(scratchReader, frameData);\n        }\n        pushFrame(arc, fpSeek, length);\n\n        return f;\n      }\n\n","sourceOld":"      // Pushes a frame we seek'd to\n      Frame pushFrame(FST.Arc<BytesRef> arc, BytesRef frameData, int length) throws IOException {\n        scratchReader.reset(frameData.bytes, frameData.offset, frameData.length);\n        final long code = scratchReader.readVLong();\n        final long fpSeek = code >>> BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n        final Frame f = getFrame(1+currentFrame.ord);\n        f.hasTerms = (code & BlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS) != 0;\n        f.hasTermsOrig = f.hasTerms;\n        f.isFloor = (code & BlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR) != 0;\n        if (f.isFloor) {\n          f.setFloorData(scratchReader, frameData);\n        }\n        pushFrame(arc, fpSeek, length);\n\n        return f;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}