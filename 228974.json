{"path":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeResponse().mjava","commits":[{"id":"434ff4225627b937a533128f8746eb1e9009fc95","date":1153247240,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeResponse().mjava","pathOld":"/dev/null","sourceNew":"  public void writeResponse() throws IOException {\r\n    int qtime=(int)(rsp.getEndTime() - req.getStartTime());\r\n    NamedList nl = new NamedList();\r\n    HashMap header = new HashMap(1);\r\n    header.put(\"qtime\",qtime);\r\n    nl.add(\"header\", header);\r\n    nl.addAll(rsp.getValues());\r\n    // give the main response a name it it doesn't have one\r\n    if (nl.size()>1 && nl.getVal(1) instanceof DocList && nl.getName(1)==null) {\r\n      nl.setName(1,\"response\");\r\n    }\r\n    writeNamedList(null, nl);\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c0e301b711811c6aaee90440cc1a7925fdd1a1e","date":1153259525,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeResponse().mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    int qtime=(int)(rsp.getEndTime() - req.getStartTime());\n    NamedList nl = new NamedList();\n    HashMap header = new HashMap(1);\n    header.put(\"qtime\",qtime);\n    nl.add(\"header\", header);\n    nl.addAll(rsp.getValues());\n    // give the main response a name it it doesn't have one\n    if (nl.size()>1 && nl.getVal(1) instanceof DocList && nl.getName(1)==null) {\n      nl.setName(1,\"response\");\n    }\n    writeNamedList(null, nl);\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\r\n    int qtime=(int)(rsp.getEndTime() - req.getStartTime());\r\n    NamedList nl = new NamedList();\r\n    HashMap header = new HashMap(1);\r\n    header.put(\"qtime\",qtime);\r\n    nl.add(\"header\", header);\r\n    nl.addAll(rsp.getValues());\r\n    // give the main response a name it it doesn't have one\r\n    if (nl.size()>1 && nl.getVal(1) instanceof DocList && nl.getName(1)==null) {\r\n      nl.setName(1,\"response\");\r\n    }\r\n    writeNamedList(null, nl);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38be57bdef64b9556475a33ff0f67cd07a1789cb","date":1161205107,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeResponse().mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    int qtime=(int)(rsp.getEndTime() - req.getStartTime());\n    NamedList nl = new NamedList();\n    HashMap header = new HashMap(1);\n    header.put(\"qtime\",qtime);\n    nl.add(\"header\", header);\n    nl.addAll(rsp.getValues());\n    // give the main response a name it it doesn't have one\n    if (nl.size()>1 && nl.getVal(1) instanceof DocList && nl.getName(1)==null) {\n      nl.setName(1,\"response\");\n    }\n    if(wrapperFunction!=null) {\n        writer.write(wrapperFunction + \"(\");\n    }\n    writeNamedList(null, nl);\n    if(wrapperFunction!=null) {\n        writer.write(\")\");\n    }\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    int qtime=(int)(rsp.getEndTime() - req.getStartTime());\n    NamedList nl = new NamedList();\n    HashMap header = new HashMap(1);\n    header.put(\"qtime\",qtime);\n    nl.add(\"header\", header);\n    nl.addAll(rsp.getValues());\n    // give the main response a name it it doesn't have one\n    if (nl.size()>1 && nl.getVal(1) instanceof DocList && nl.getName(1)==null) {\n      nl.setName(1,\"response\");\n    }\n    writeNamedList(null, nl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7aef5adbca53f7820aa6289dda74f595ed816ac7","date":1166101420,"type":3,"author":"Bertrand Delacretaz","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeResponse().mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    NamedList nl = new NamedList();\n    nl.addAll(rsp.getValues());\n    // give the main response a name it it doesn't have one\n    if(wrapperFunction!=null) {\n        writer.write(wrapperFunction + \"(\");\n    }\n    writeNamedList(null, nl);\n    if(wrapperFunction!=null) {\n        writer.write(\")\");\n    }\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    int qtime=(int)(rsp.getEndTime() - req.getStartTime());\n    NamedList nl = new NamedList();\n    HashMap header = new HashMap(1);\n    header.put(\"qtime\",qtime);\n    nl.add(\"header\", header);\n    nl.addAll(rsp.getValues());\n    // give the main response a name it it doesn't have one\n    if (nl.size()>1 && nl.getVal(1) instanceof DocList && nl.getName(1)==null) {\n      nl.setName(1,\"response\");\n    }\n    if(wrapperFunction!=null) {\n        writer.write(wrapperFunction + \"(\");\n    }\n    writeNamedList(null, nl);\n    if(wrapperFunction!=null) {\n        writer.write(\")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4145b7b13874de95211223a6edb648da8794a688","date":1170182192,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeResponse().mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    if(wrapperFunction!=null) {\n        writer.write(wrapperFunction + \"(\");\n    }\n    writeNamedList(null, rsp.getValues());\n    if(wrapperFunction!=null) {\n        writer.write(\")\");\n    }\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    NamedList nl = new NamedList();\n    nl.addAll(rsp.getValues());\n    // give the main response a name it it doesn't have one\n    if(wrapperFunction!=null) {\n        writer.write(wrapperFunction + \"(\");\n    }\n    writeNamedList(null, nl);\n    if(wrapperFunction!=null) {\n        writer.write(\")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c355d9286f784cff62d09cae2d0752fdacb156e","date":1192387134,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeResponse().mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    if(wrapperFunction!=null) {\n        writer.write(wrapperFunction + \"(\");\n    }\n    writeNamedList(null, rsp.getValues());\n    if(wrapperFunction!=null) {\n        writer.write(')');\n    }\n    writer.flushBuffer();\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    if(wrapperFunction!=null) {\n        writer.write(wrapperFunction + \"(\");\n    }\n    writeNamedList(null, rsp.getValues());\n    if(wrapperFunction!=null) {\n        writer.write(\")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a4448d83dfaeb6f97ff61f9e1e9b61f550afc39","date":1192829165,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeResponse().mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    if(wrapperFunction!=null) {\n        writer.write(wrapperFunction + \"(\");\n    }\n    writeNamedList(null, rsp.getValues());\n    if(wrapperFunction!=null) {\n        writer.write(')');\n    }\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    if(wrapperFunction!=null) {\n        writer.write(wrapperFunction + \"(\");\n    }\n    writeNamedList(null, rsp.getValues());\n    if(wrapperFunction!=null) {\n        writer.write(')');\n    }\n    writer.flushBuffer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe2cae244107da19ba84a7482bbbdf98eea79c92","date":1224588086,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeResponse().mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    if(wrapperFunction!=null) {\n        writer.write(wrapperFunction + \"(\");\n    }\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) rsp.getValues().remove(\"responseHeader\");\n    writeNamedList(null, rsp.getValues());\n    if(wrapperFunction!=null) {\n        writer.write(')');\n    }\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    if(wrapperFunction!=null) {\n        writer.write(wrapperFunction + \"(\");\n    }\n    writeNamedList(null, rsp.getValues());\n    if(wrapperFunction!=null) {\n        writer.write(')');\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10b17ff7ad534c3b34a34944d80a87d217011d9c","date":1263262796,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeResponse().mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    if(wrapperFunction!=null) {\n        writer.write(wrapperFunction + \"(\");\n    }\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) rsp.getValues().remove(\"responseHeader\");\n    writeNamedList(null, rsp.getValues());\n    if(wrapperFunction!=null) {\n        writer.write(')');\n    }\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    if(wrapperFunction!=null) {\n        writer.write(wrapperFunction + \"(\");\n    }\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) rsp.getValues().remove(\"responseHeader\");\n    writeNamedList(null, rsp.getValues());\n    if(wrapperFunction!=null) {\n        writer.write(')');\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c0e301b711811c6aaee90440cc1a7925fdd1a1e":["434ff4225627b937a533128f8746eb1e9009fc95"],"434ff4225627b937a533128f8746eb1e9009fc95":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"fe2cae244107da19ba84a7482bbbdf98eea79c92":["6a4448d83dfaeb6f97ff61f9e1e9b61f550afc39"],"1c355d9286f784cff62d09cae2d0752fdacb156e":["4145b7b13874de95211223a6edb648da8794a688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["fe2cae244107da19ba84a7482bbbdf98eea79c92"],"4145b7b13874de95211223a6edb648da8794a688":["7aef5adbca53f7820aa6289dda74f595ed816ac7"],"38be57bdef64b9556475a33ff0f67cd07a1789cb":["0c0e301b711811c6aaee90440cc1a7925fdd1a1e"],"6a4448d83dfaeb6f97ff61f9e1e9b61f550afc39":["1c355d9286f784cff62d09cae2d0752fdacb156e"],"7aef5adbca53f7820aa6289dda74f595ed816ac7":["38be57bdef64b9556475a33ff0f67cd07a1789cb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c0e301b711811c6aaee90440cc1a7925fdd1a1e":["38be57bdef64b9556475a33ff0f67cd07a1789cb"],"434ff4225627b937a533128f8746eb1e9009fc95":["0c0e301b711811c6aaee90440cc1a7925fdd1a1e"],"fe2cae244107da19ba84a7482bbbdf98eea79c92":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"1c355d9286f784cff62d09cae2d0752fdacb156e":["6a4448d83dfaeb6f97ff61f9e1e9b61f550afc39"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["434ff4225627b937a533128f8746eb1e9009fc95"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":[],"4145b7b13874de95211223a6edb648da8794a688":["1c355d9286f784cff62d09cae2d0752fdacb156e"],"38be57bdef64b9556475a33ff0f67cd07a1789cb":["7aef5adbca53f7820aa6289dda74f595ed816ac7"],"6a4448d83dfaeb6f97ff61f9e1e9b61f550afc39":["fe2cae244107da19ba84a7482bbbdf98eea79c92"],"7aef5adbca53f7820aa6289dda74f595ed816ac7":["4145b7b13874de95211223a6edb648da8794a688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["10b17ff7ad534c3b34a34944d80a87d217011d9c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}