{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#expungeDeletes().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#expungeDeletes().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#expungeDeletes().mjava","sourceNew":"  /** Expunges all deletes from the index.  When an index\n   *  has many document deletions (or updates to existing\n   *  documents), it's best to either call optimize or\n   *  expungeDeletes to remove all unused data in the index\n   *  associated with the deleted documents.  To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}\n   *  This saves disk space and memory usage while\n   *  searching.  expungeDeletes should be somewhat faster\n   *  than optimize since it does not insist on reducing the\n   *  index to a single segment (though, this depends on the\n   *  {@link MergePolicy}; see {@link\n   *  MergePolicy#findMergesToExpungeDeletes}.). Note that\n   *  this call does not first commit any buffered\n   *  documents, so you must do so yourself if necessary.\n   *  See also {@link #expungeDeletes(boolean)}\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void expungeDeletes() throws CorruptIndexException, IOException {\n    expungeDeletes(true);\n  }\n\n","sourceOld":"  /** Expunges all deletes from the index.  When an index\n   *  has many document deletions (or updates to existing\n   *  documents), it's best to either call optimize or\n   *  expungeDeletes to remove all unused data in the index\n   *  associated with the deleted documents.  To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}\n   *  This saves disk space and memory usage while\n   *  searching.  expungeDeletes should be somewhat faster\n   *  than optimize since it does not insist on reducing the\n   *  index to a single segment (though, this depends on the\n   *  {@link MergePolicy}; see {@link\n   *  MergePolicy#findMergesToExpungeDeletes}.). Note that\n   *  this call does not first commit any buffered\n   *  documents, so you must do so yourself if necessary.\n   *  See also {@link #expungeDeletes(boolean)}\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void expungeDeletes() throws CorruptIndexException, IOException {\n    expungeDeletes(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#expungeDeletes().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#expungeDeletes().mjava","sourceNew":"  /** Expunges all deletes from the index.  When an index\n   *  has many document deletions (or updates to existing\n   *  documents), it's best to either call optimize or\n   *  expungeDeletes to remove all unused data in the index\n   *  associated with the deleted documents.  To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}\n   *  This saves disk space and memory usage while\n   *  searching.  expungeDeletes should be somewhat faster\n   *  than optimize since it does not insist on reducing the\n   *  index to a single segment (though, this depends on the\n   *  {@link MergePolicy}; see {@link\n   *  MergePolicy#findMergesToExpungeDeletes}.). Note that\n   *  this call does not first commit any buffered\n   *  documents, so you must do so yourself if necessary.\n   *  See also {@link #expungeDeletes(boolean)}\n   *\n   *  <p><b>NOTE</b>: this method first flushes a new\n   *  segment (if there are indexed documents), and applies\n   *  all buffered deletes.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void expungeDeletes() throws CorruptIndexException, IOException {\n    expungeDeletes(true);\n  }\n\n","sourceOld":"  /** Expunges all deletes from the index.  When an index\n   *  has many document deletions (or updates to existing\n   *  documents), it's best to either call optimize or\n   *  expungeDeletes to remove all unused data in the index\n   *  associated with the deleted documents.  To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}\n   *  This saves disk space and memory usage while\n   *  searching.  expungeDeletes should be somewhat faster\n   *  than optimize since it does not insist on reducing the\n   *  index to a single segment (though, this depends on the\n   *  {@link MergePolicy}; see {@link\n   *  MergePolicy#findMergesToExpungeDeletes}.). Note that\n   *  this call does not first commit any buffered\n   *  documents, so you must do so yourself if necessary.\n   *  See also {@link #expungeDeletes(boolean)}\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void expungeDeletes() throws CorruptIndexException, IOException {\n    expungeDeletes(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#expungeDeletes().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#expungeDeletes().mjava","sourceNew":"  /** Expunges all deletes from the index.  When an index\n   *  has many document deletions (or updates to existing\n   *  documents), it's best to either call optimize or\n   *  expungeDeletes to remove all unused data in the index\n   *  associated with the deleted documents.  To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}\n   *  This saves disk space and memory usage while\n   *  searching.  expungeDeletes should be somewhat faster\n   *  than optimize since it does not insist on reducing the\n   *  index to a single segment (though, this depends on the\n   *  {@link MergePolicy}; see {@link\n   *  MergePolicy#findMergesToExpungeDeletes}.). Note that\n   *  this call does not first commit any buffered\n   *  documents, so you must do so yourself if necessary.\n   *  See also {@link #expungeDeletes(boolean)}\n   *\n   *  <p><b>NOTE</b>: this method first flushes a new\n   *  segment (if there are indexed documents), and applies\n   *  all buffered deletes.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void expungeDeletes() throws CorruptIndexException, IOException {\n    expungeDeletes(true);\n  }\n\n","sourceOld":"  /** Expunges all deletes from the index.  When an index\n   *  has many document deletions (or updates to existing\n   *  documents), it's best to either call optimize or\n   *  expungeDeletes to remove all unused data in the index\n   *  associated with the deleted documents.  To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}\n   *  This saves disk space and memory usage while\n   *  searching.  expungeDeletes should be somewhat faster\n   *  than optimize since it does not insist on reducing the\n   *  index to a single segment (though, this depends on the\n   *  {@link MergePolicy}; see {@link\n   *  MergePolicy#findMergesToExpungeDeletes}.). Note that\n   *  this call does not first commit any buffered\n   *  documents, so you must do so yourself if necessary.\n   *  See also {@link #expungeDeletes(boolean)}\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void expungeDeletes() throws CorruptIndexException, IOException {\n    expungeDeletes(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#expungeDeletes().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#expungeDeletes().mjava","sourceNew":"  /** Expunges all deletes from the index.  When an index\n   *  has many document deletions (or updates to existing\n   *  documents), it's best to either call optimize or\n   *  expungeDeletes to remove all unused data in the index\n   *  associated with the deleted documents.  To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}\n   *  This saves disk space and memory usage while\n   *  searching.  expungeDeletes should be somewhat faster\n   *  than optimize since it does not insist on reducing the\n   *  index to a single segment (though, this depends on the\n   *  {@link MergePolicy}; see {@link\n   *  MergePolicy#findMergesToExpungeDeletes}.). Note that\n   *  this call does not first commit any buffered\n   *  documents, so you must do so yourself if necessary.\n   *  See also {@link #expungeDeletes(boolean)}\n   *\n   *  <p><b>NOTE</b>: this method first flushes a new\n   *  segment (if there are indexed documents), and applies\n   *  all buffered deletes.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void expungeDeletes() throws CorruptIndexException, IOException {\n    expungeDeletes(true);\n  }\n\n","sourceOld":"  /** Expunges all deletes from the index.  When an index\n   *  has many document deletions (or updates to existing\n   *  documents), it's best to either call optimize or\n   *  expungeDeletes to remove all unused data in the index\n   *  associated with the deleted documents.  To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}\n   *  This saves disk space and memory usage while\n   *  searching.  expungeDeletes should be somewhat faster\n   *  than optimize since it does not insist on reducing the\n   *  index to a single segment (though, this depends on the\n   *  {@link MergePolicy}; see {@link\n   *  MergePolicy#findMergesToExpungeDeletes}.). Note that\n   *  this call does not first commit any buffered\n   *  documents, so you must do so yourself if necessary.\n   *  See also {@link #expungeDeletes(boolean)}\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void expungeDeletes() throws CorruptIndexException, IOException {\n    expungeDeletes(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#expungeDeletes().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#expungeDeletes().mjava","sourceNew":"  /** Expunges all deletes from the index.  When an index\n   *  has many document deletions (or updates to existing\n   *  documents), it's best to either call optimize or\n   *  expungeDeletes to remove all unused data in the index\n   *  associated with the deleted documents.  To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}\n   *  This saves disk space and memory usage while\n   *  searching.  expungeDeletes should be somewhat faster\n   *  than optimize since it does not insist on reducing the\n   *  index to a single segment (though, this depends on the\n   *  {@link MergePolicy}; see {@link\n   *  MergePolicy#findMergesToExpungeDeletes}.). Note that\n   *  this call does not first commit any buffered\n   *  documents, so you must do so yourself if necessary.\n   *  See also {@link #expungeDeletes(boolean)}\n   *\n   *  <p><b>NOTE</b>: this method first flushes a new\n   *  segment (if there are indexed documents), and applies\n   *  all buffered deletes.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void expungeDeletes() throws CorruptIndexException, IOException {\n    expungeDeletes(true);\n  }\n\n","sourceOld":"  /** Expunges all deletes from the index.  When an index\n   *  has many document deletions (or updates to existing\n   *  documents), it's best to either call optimize or\n   *  expungeDeletes to remove all unused data in the index\n   *  associated with the deleted documents.  To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}\n   *  This saves disk space and memory usage while\n   *  searching.  expungeDeletes should be somewhat faster\n   *  than optimize since it does not insist on reducing the\n   *  index to a single segment (though, this depends on the\n   *  {@link MergePolicy}; see {@link\n   *  MergePolicy#findMergesToExpungeDeletes}.). Note that\n   *  this call does not first commit any buffered\n   *  documents, so you must do so yourself if necessary.\n   *  See also {@link #expungeDeletes(boolean)}\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void expungeDeletes() throws CorruptIndexException, IOException {\n    expungeDeletes(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c9431c15a9f480299308037ceabf8a24f1d6003","date":1315844178,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#expungeDeletes().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#expungeDeletes().mjava","sourceNew":"  /** Requests an expungeDeletes operation, by invoking\n   *  {@link MergePolicy#findMergesToExpungeDeletes}.\n   *  The MergePolicy determines what merges should be done.\n   *  For example, the default {@link TieredMergePolicy}\n   *  will only expunage deletes from a segment if the\n   *  percentage of deleted docs is over 10%.\n   *\n   *  <p>When an index\n   *  has many document deletions (or updates to existing\n   *  documents), it's best to either call optimize or\n   *  expungeDeletes to remove all unused data in the index\n   *  associated with the deleted documents.  To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}\n   *  This saves disk space and memory usage while\n   *  searching.  expungeDeletes should be somewhat faster\n   *  than optimize since it does not insist on reducing the\n   *  index to a single segment (though, this depends on the\n   *  {@link MergePolicy}; see {@link\n   *  MergePolicy#findMergesToExpungeDeletes}.). Note that\n   *  this call does not first commit any buffered\n   *  documents, so you must do so yourself if necessary.\n   *  See also {@link #expungeDeletes(boolean)}\n   *\n   *  <p><b>NOTE</b>: this method first flushes a new\n   *  segment (if there are indexed documents), and applies\n   *  all buffered deletes.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void expungeDeletes() throws CorruptIndexException, IOException {\n    expungeDeletes(true);\n  }\n\n","sourceOld":"  /** Expunges all deletes from the index.  When an index\n   *  has many document deletions (or updates to existing\n   *  documents), it's best to either call optimize or\n   *  expungeDeletes to remove all unused data in the index\n   *  associated with the deleted documents.  To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}\n   *  This saves disk space and memory usage while\n   *  searching.  expungeDeletes should be somewhat faster\n   *  than optimize since it does not insist on reducing the\n   *  index to a single segment (though, this depends on the\n   *  {@link MergePolicy}; see {@link\n   *  MergePolicy#findMergesToExpungeDeletes}.). Note that\n   *  this call does not first commit any buffered\n   *  documents, so you must do so yourself if necessary.\n   *  See also {@link #expungeDeletes(boolean)}\n   *\n   *  <p><b>NOTE</b>: this method first flushes a new\n   *  segment (if there are indexed documents), and applies\n   *  all buffered deletes.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void expungeDeletes() throws CorruptIndexException, IOException {\n    expungeDeletes(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b502d4b10067e5790f98b046b9a87d5ed71ecf4b","date":1315845239,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#expungeDeletes().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#expungeDeletes().mjava","sourceNew":"  /** Requests an expungeDeletes operation, by invoking\n   *  {@link MergePolicy#findMergesToExpungeDeletes}.\n   *  The MergePolicy determines what merges should be done.\n   *  For example, the default {@link TieredMergePolicy}\n   *  will only expunge deletes from a segment if the\n   *  percentage of deleted docs is over 10%.\n   *\n   *  <p>When an index\n   *  has many document deletions (or updates to existing\n   *  documents), it's best to either call optimize or\n   *  expungeDeletes to remove all unused data in the index\n   *  associated with the deleted documents.  To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}\n   *  This saves disk space and memory usage while\n   *  searching.  expungeDeletes should be somewhat faster\n   *  than optimize since it does not insist on reducing the\n   *  index to a single segment (though, this depends on the\n   *  {@link MergePolicy}; see {@link\n   *  MergePolicy#findMergesToExpungeDeletes}.). Note that\n   *  this call does not first commit any buffered\n   *  documents, so you must do so yourself if necessary.\n   *  See also {@link #expungeDeletes(boolean)}\n   *\n   *  <p><b>NOTE</b>: this method first flushes a new\n   *  segment (if there are indexed documents), and applies\n   *  all buffered deletes.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void expungeDeletes() throws CorruptIndexException, IOException {\n    expungeDeletes(true);\n  }\n\n","sourceOld":"  /** Requests an expungeDeletes operation, by invoking\n   *  {@link MergePolicy#findMergesToExpungeDeletes}.\n   *  The MergePolicy determines what merges should be done.\n   *  For example, the default {@link TieredMergePolicy}\n   *  will only expunage deletes from a segment if the\n   *  percentage of deleted docs is over 10%.\n   *\n   *  <p>When an index\n   *  has many document deletions (or updates to existing\n   *  documents), it's best to either call optimize or\n   *  expungeDeletes to remove all unused data in the index\n   *  associated with the deleted documents.  To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}\n   *  This saves disk space and memory usage while\n   *  searching.  expungeDeletes should be somewhat faster\n   *  than optimize since it does not insist on reducing the\n   *  index to a single segment (though, this depends on the\n   *  {@link MergePolicy}; see {@link\n   *  MergePolicy#findMergesToExpungeDeletes}.). Note that\n   *  this call does not first commit any buffered\n   *  documents, so you must do so yourself if necessary.\n   *  See also {@link #expungeDeletes(boolean)}\n   *\n   *  <p><b>NOTE</b>: this method first flushes a new\n   *  segment (if there are indexed documents), and applies\n   *  all buffered deletes.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void expungeDeletes() throws CorruptIndexException, IOException {\n    expungeDeletes(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#expungeDeletes().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#expungeDeletes().mjava","sourceNew":"  /** Requests an expungeDeletes operation, by invoking\n   *  {@link MergePolicy#findMergesToExpungeDeletes}.\n   *  The MergePolicy determines what merges should be done.\n   *  For example, the default {@link TieredMergePolicy}\n   *  will only expunge deletes from a segment if the\n   *  percentage of deleted docs is over 10%.\n   *\n   *  <p>When an index\n   *  has many document deletions (or updates to existing\n   *  documents), it's best to either call forceMerge or\n   *  expungeDeletes to remove all unused data in the index\n   *  associated with the deleted documents.  To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}\n   *  This saves disk space and memory usage while\n   *  searching.  expungeDeletes should be somewhat faster\n   *  than forceMerge since it does not insist on reducing the\n   *  index to a single segment (though, this depends on the\n   *  {@link MergePolicy}; see {@link\n   *  MergePolicy#findMergesToExpungeDeletes}.). Note that\n   *  this call does not first commit any buffered\n   *  documents, so you must do so yourself if necessary.\n   *  See also {@link #expungeDeletes(boolean)}\n   *\n   *  <p><b>NOTE</b>: this method first flushes a new\n   *  segment (if there are indexed documents), and applies\n   *  all buffered deletes.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void expungeDeletes() throws CorruptIndexException, IOException {\n    expungeDeletes(true);\n  }\n\n","sourceOld":"  /** Requests an expungeDeletes operation, by invoking\n   *  {@link MergePolicy#findMergesToExpungeDeletes}.\n   *  The MergePolicy determines what merges should be done.\n   *  For example, the default {@link TieredMergePolicy}\n   *  will only expunge deletes from a segment if the\n   *  percentage of deleted docs is over 10%.\n   *\n   *  <p>When an index\n   *  has many document deletions (or updates to existing\n   *  documents), it's best to either call optimize or\n   *  expungeDeletes to remove all unused data in the index\n   *  associated with the deleted documents.  To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}\n   *  This saves disk space and memory usage while\n   *  searching.  expungeDeletes should be somewhat faster\n   *  than optimize since it does not insist on reducing the\n   *  index to a single segment (though, this depends on the\n   *  {@link MergePolicy}; see {@link\n   *  MergePolicy#findMergesToExpungeDeletes}.). Note that\n   *  this call does not first commit any buffered\n   *  documents, so you must do so yourself if necessary.\n   *  See also {@link #expungeDeletes(boolean)}\n   *\n   *  <p><b>NOTE</b>: this method first flushes a new\n   *  segment (if there are indexed documents), and applies\n   *  all buffered deletes.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void expungeDeletes() throws CorruptIndexException, IOException {\n    expungeDeletes(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34ce7c842452c79b12c45a8feb64e4597c7110e8","date":1321637224,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#expungeDeletes().mjava","sourceNew":null,"sourceOld":"  /** Requests an expungeDeletes operation, by invoking\n   *  {@link MergePolicy#findMergesToExpungeDeletes}.\n   *  The MergePolicy determines what merges should be done.\n   *  For example, the default {@link TieredMergePolicy}\n   *  will only expunge deletes from a segment if the\n   *  percentage of deleted docs is over 10%.\n   *\n   *  <p>When an index\n   *  has many document deletions (or updates to existing\n   *  documents), it's best to either call forceMerge or\n   *  expungeDeletes to remove all unused data in the index\n   *  associated with the deleted documents.  To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}\n   *  This saves disk space and memory usage while\n   *  searching.  expungeDeletes should be somewhat faster\n   *  than forceMerge since it does not insist on reducing the\n   *  index to a single segment (though, this depends on the\n   *  {@link MergePolicy}; see {@link\n   *  MergePolicy#findMergesToExpungeDeletes}.). Note that\n   *  this call does not first commit any buffered\n   *  documents, so you must do so yourself if necessary.\n   *  See also {@link #expungeDeletes(boolean)}\n   *\n   *  <p><b>NOTE</b>: this method first flushes a new\n   *  segment (if there are indexed documents), and applies\n   *  all buffered deletes.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void expungeDeletes() throws CorruptIndexException, IOException {\n    expungeDeletes(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"01e5948db9a07144112d2f08f28ca2e3cd880348":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b502d4b10067e5790f98b046b9a87d5ed71ecf4b":["0c9431c15a9f480299308037ceabf8a24f1d6003"],"a3776dccca01c11e7046323cfad46a3b4a471233":["9454a6510e2db155fb01faa5c049b06ece95fab9","01e5948db9a07144112d2f08f28ca2e3cd880348"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["9454a6510e2db155fb01faa5c049b06ece95fab9","01e5948db9a07144112d2f08f28ca2e3cd880348"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["b502d4b10067e5790f98b046b9a87d5ed71ecf4b"],"45669a651c970812a680841b97a77cce06af559f":["9454a6510e2db155fb01faa5c049b06ece95fab9","01e5948db9a07144112d2f08f28ca2e3cd880348"],"34ce7c842452c79b12c45a8feb64e4597c7110e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"0c9431c15a9f480299308037ceabf8a24f1d6003":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["34ce7c842452c79b12c45a8feb64e4597c7110e8"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"01e5948db9a07144112d2f08f28ca2e3cd880348":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","0c9431c15a9f480299308037ceabf8a24f1d6003"],"b502d4b10067e5790f98b046b9a87d5ed71ecf4b":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["34ce7c842452c79b12c45a8feb64e4597c7110e8"],"45669a651c970812a680841b97a77cce06af559f":[],"0c9431c15a9f480299308037ceabf8a24f1d6003":["b502d4b10067e5790f98b046b9a87d5ed71ecf4b"],"34ce7c842452c79b12c45a8feb64e4597c7110e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["01e5948db9a07144112d2f08f28ca2e3cd880348","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}