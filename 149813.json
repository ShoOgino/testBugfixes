{"path":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#fetchFileFromNodeAndPersist(String).mjava","commits":[{"id":"8476949555f799dff381770c01cfad051a264487","date":1570505073,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#fetchFileFromNodeAndPersist(String).mjava","pathOld":"/dev/null","sourceNew":"    private boolean fetchFileFromNodeAndPersist(String fromNode) {\n      log.info(\"fetching a file {} from {} \", path, fromNode);\n      String url = coreContainer.getZkController().getZkStateReader().getBaseUrlForNodeName(fromNode);\n      if (url == null) throw new SolrException(BAD_REQUEST, \"No such node\");\n      String baseUrl = url.replace(\"/solr\", \"/api\");\n\n      ByteBuffer metadata = null;\n      Map m = null;\n      try {\n        metadata = Utils.executeGET(coreContainer.getUpdateShardHandler().getDefaultHttpClient(),\n            baseUrl + \"/node/files\" + getMetaPath(),\n            Utils.newBytesConsumer((int) MAX_PKG_SIZE));\n        m = (Map) Utils.fromJSON(metadata.array());\n      } catch (SolrException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error fetching metadata\", e);\n      }\n\n      try {\n        ByteBuffer filedata = Utils.executeGET(coreContainer.getUpdateShardHandler().getDefaultHttpClient(),\n            baseUrl + \"/node/files\" + path,\n            Utils.newBytesConsumer((int) MAX_PKG_SIZE));\n        String sha512 = DigestUtils.sha512Hex(new ByteBufferInputStream(filedata));\n        String expected = (String) m.get(\"sha512\");\n        if (!sha512.equals(expected)) {\n          throw new SolrException(SERVER_ERROR, \"sha512 mismatch downloading : \" + path + \" from node : \" + fromNode);\n        }\n        persistToFile(filedata, metadata);\n        return true;\n      } catch (SolrException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error fetching data\", e);\n      } catch (IOException ioe) {\n        throw new SolrException(SERVER_ERROR, \"Error persisting file\", ioe);\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#fetchFileFromNodeAndPersist(String).mjava","pathOld":"/dev/null","sourceNew":"    private boolean fetchFileFromNodeAndPersist(String fromNode) {\n      log.info(\"fetching a file {} from {} \", path, fromNode);\n      String url = coreContainer.getZkController().getZkStateReader().getBaseUrlForNodeName(fromNode);\n      if (url == null) throw new SolrException(BAD_REQUEST, \"No such node\");\n      String baseUrl = url.replace(\"/solr\", \"/api\");\n\n      ByteBuffer metadata = null;\n      Map m = null;\n      try {\n        metadata = Utils.executeGET(coreContainer.getUpdateShardHandler().getDefaultHttpClient(),\n            baseUrl + \"/node/files\" + getMetaPath(),\n            Utils.newBytesConsumer((int) MAX_PKG_SIZE));\n        m = (Map) Utils.fromJSON(metadata.array());\n      } catch (SolrException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error fetching metadata\", e);\n      }\n\n      try {\n        ByteBuffer filedata = Utils.executeGET(coreContainer.getUpdateShardHandler().getDefaultHttpClient(),\n            baseUrl + \"/node/files\" + path,\n            Utils.newBytesConsumer((int) MAX_PKG_SIZE));\n        String sha512 = DigestUtils.sha512Hex(new ByteBufferInputStream(filedata));\n        String expected = (String) m.get(\"sha512\");\n        if (!sha512.equals(expected)) {\n          throw new SolrException(SERVER_ERROR, \"sha512 mismatch downloading : \" + path + \" from node : \" + fromNode);\n        }\n        persistToFile(filedata, metadata);\n        return true;\n      } catch (SolrException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error fetching data\", e);\n      } catch (IOException ioe) {\n        throw new SolrException(SERVER_ERROR, \"Error persisting file\", ioe);\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61f55b4999c3f858f4f4acc9c6dc57af2c1acf99","date":1571689506,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#fetchFileFromNodeAndPersist(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#fetchFileFromNodeAndPersist(String).mjava","sourceNew":"    private boolean fetchFileFromNodeAndPersist(String fromNode) {\n      log.info(\"fetching a file {} from {} \", path, fromNode);\n      String url = coreContainer.getZkController().getZkStateReader().getBaseUrlForNodeName(fromNode);\n      if (url == null) throw new SolrException(BAD_REQUEST, \"No such node\");\n      String baseUrl = url.replace(\"/solr\", \"/api\");\n\n      ByteBuffer metadata = null;\n      Map m = null;\n      try {\n        metadata = Utils.executeGET(coreContainer.getUpdateShardHandler().getDefaultHttpClient(),\n            baseUrl + \"/node/files\" + getMetaPath(),\n            Utils.newBytesConsumer((int) MAX_PKG_SIZE));\n        m = (Map) Utils.fromJSON(metadata.array(), metadata.arrayOffset(), metadata.limit());\n      } catch (SolrException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error fetching metadata\", e);\n      }\n\n      try {\n        ByteBuffer filedata = Utils.executeGET(coreContainer.getUpdateShardHandler().getDefaultHttpClient(),\n            baseUrl + \"/node/files\" + path,\n            Utils.newBytesConsumer((int) MAX_PKG_SIZE));\n        String sha512 = DigestUtils.sha512Hex(new ByteBufferInputStream(filedata));\n        String expected = (String) m.get(\"sha512\");\n        if (!sha512.equals(expected)) {\n          throw new SolrException(SERVER_ERROR, \"sha512 mismatch downloading : \" + path + \" from node : \" + fromNode);\n        }\n        persistToFile(filedata, metadata);\n        return true;\n      } catch (SolrException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error fetching data\", e);\n      } catch (IOException ioe) {\n        throw new SolrException(SERVER_ERROR, \"Error persisting file\", ioe);\n      }\n\n    }\n\n","sourceOld":"    private boolean fetchFileFromNodeAndPersist(String fromNode) {\n      log.info(\"fetching a file {} from {} \", path, fromNode);\n      String url = coreContainer.getZkController().getZkStateReader().getBaseUrlForNodeName(fromNode);\n      if (url == null) throw new SolrException(BAD_REQUEST, \"No such node\");\n      String baseUrl = url.replace(\"/solr\", \"/api\");\n\n      ByteBuffer metadata = null;\n      Map m = null;\n      try {\n        metadata = Utils.executeGET(coreContainer.getUpdateShardHandler().getDefaultHttpClient(),\n            baseUrl + \"/node/files\" + getMetaPath(),\n            Utils.newBytesConsumer((int) MAX_PKG_SIZE));\n        m = (Map) Utils.fromJSON(metadata.array());\n      } catch (SolrException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error fetching metadata\", e);\n      }\n\n      try {\n        ByteBuffer filedata = Utils.executeGET(coreContainer.getUpdateShardHandler().getDefaultHttpClient(),\n            baseUrl + \"/node/files\" + path,\n            Utils.newBytesConsumer((int) MAX_PKG_SIZE));\n        String sha512 = DigestUtils.sha512Hex(new ByteBufferInputStream(filedata));\n        String expected = (String) m.get(\"sha512\");\n        if (!sha512.equals(expected)) {\n          throw new SolrException(SERVER_ERROR, \"sha512 mismatch downloading : \" + path + \" from node : \" + fromNode);\n        }\n        persistToFile(filedata, metadata);\n        return true;\n      } catch (SolrException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error fetching data\", e);\n      } catch (IOException ioe) {\n        throw new SolrException(SERVER_ERROR, \"Error persisting file\", ioe);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#fetchFileFromNodeAndPersist(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#fetchFileFromNodeAndPersist(String).mjava","sourceNew":"    private boolean fetchFileFromNodeAndPersist(String fromNode) {\n      log.info(\"fetching a file {} from {} \", path, fromNode);\n      String url = coreContainer.getZkController().getZkStateReader().getBaseUrlForNodeName(fromNode);\n      if (url == null) throw new SolrException(BAD_REQUEST, \"No such node\");\n      String baseUrl = url.replace(\"/solr\", \"/api\");\n\n      ByteBuffer metadata = null;\n      @SuppressWarnings({\"rawtypes\"})\n      Map m = null;\n      try {\n        metadata = Utils.executeGET(coreContainer.getUpdateShardHandler().getDefaultHttpClient(),\n            baseUrl + \"/node/files\" + getMetaPath(),\n            Utils.newBytesConsumer((int) MAX_PKG_SIZE));\n        m = (Map) Utils.fromJSON(metadata.array(), metadata.arrayOffset(), metadata.limit());\n      } catch (SolrException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error fetching metadata\", e);\n      }\n\n      try {\n        ByteBuffer filedata = Utils.executeGET(coreContainer.getUpdateShardHandler().getDefaultHttpClient(),\n            baseUrl + \"/node/files\" + path,\n            Utils.newBytesConsumer((int) MAX_PKG_SIZE));\n        String sha512 = DigestUtils.sha512Hex(new ByteBufferInputStream(filedata));\n        String expected = (String) m.get(\"sha512\");\n        if (!sha512.equals(expected)) {\n          throw new SolrException(SERVER_ERROR, \"sha512 mismatch downloading : \" + path + \" from node : \" + fromNode);\n        }\n        persistToFile(filedata, metadata);\n        return true;\n      } catch (SolrException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error fetching data\", e);\n      } catch (IOException ioe) {\n        throw new SolrException(SERVER_ERROR, \"Error persisting file\", ioe);\n      }\n\n    }\n\n","sourceOld":"    private boolean fetchFileFromNodeAndPersist(String fromNode) {\n      log.info(\"fetching a file {} from {} \", path, fromNode);\n      String url = coreContainer.getZkController().getZkStateReader().getBaseUrlForNodeName(fromNode);\n      if (url == null) throw new SolrException(BAD_REQUEST, \"No such node\");\n      String baseUrl = url.replace(\"/solr\", \"/api\");\n\n      ByteBuffer metadata = null;\n      Map m = null;\n      try {\n        metadata = Utils.executeGET(coreContainer.getUpdateShardHandler().getDefaultHttpClient(),\n            baseUrl + \"/node/files\" + getMetaPath(),\n            Utils.newBytesConsumer((int) MAX_PKG_SIZE));\n        m = (Map) Utils.fromJSON(metadata.array(), metadata.arrayOffset(), metadata.limit());\n      } catch (SolrException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error fetching metadata\", e);\n      }\n\n      try {\n        ByteBuffer filedata = Utils.executeGET(coreContainer.getUpdateShardHandler().getDefaultHttpClient(),\n            baseUrl + \"/node/files\" + path,\n            Utils.newBytesConsumer((int) MAX_PKG_SIZE));\n        String sha512 = DigestUtils.sha512Hex(new ByteBufferInputStream(filedata));\n        String expected = (String) m.get(\"sha512\");\n        if (!sha512.equals(expected)) {\n          throw new SolrException(SERVER_ERROR, \"sha512 mismatch downloading : \" + path + \" from node : \" + fromNode);\n        }\n        persistToFile(filedata, metadata);\n        return true;\n      } catch (SolrException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error fetching data\", e);\n      } catch (IOException ioe) {\n        throw new SolrException(SERVER_ERROR, \"Error persisting file\", ioe);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64ec73f19361ec6354e55c878a349735fa8bc52e","date":1596183798,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#fetchFileFromNodeAndPersist(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.FileInfo#fetchFileFromNodeAndPersist(String).mjava","sourceNew":"    private boolean fetchFileFromNodeAndPersist(String fromNode) {\n      log.info(\"fetching a file {} from {} \", path, fromNode);\n      String url = coreContainer.getZkController().getZkStateReader().getBaseUrlForNodeName(fromNode);\n      if (url == null) throw new SolrException(BAD_REQUEST, \"No such node\");\n      String baseUrl = url.replace(\"/solr\", \"/api\");\n\n      ByteBuffer metadata = null;\n      @SuppressWarnings({\"rawtypes\"})\n      Map m = null;\n      try {\n        metadata = Utils.executeGET(coreContainer.getUpdateShardHandler().getDefaultHttpClient(),\n                baseUrl + \"/node/files\" + getMetaPath(),\n                Utils.newBytesConsumer((int) MAX_PKG_SIZE));\n        m = (Map) Utils.fromJSON(metadata.array(), metadata.arrayOffset(), metadata.limit());\n      } catch (SolrException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error fetching metadata\", e);\n      }\n\n      try {\n        ByteBuffer filedata = Utils.executeGET(coreContainer.getUpdateShardHandler().getDefaultHttpClient(),\n                baseUrl + \"/node/files\" + path,\n                Utils.newBytesConsumer((int) MAX_PKG_SIZE));\n        String sha512 = DigestUtils.sha512Hex(new ByteBufferInputStream(filedata));\n        String expected = (String) m.get(\"sha512\");\n        if (!sha512.equals(expected)) {\n          throw new SolrException(SERVER_ERROR, \"sha512 mismatch downloading : \" + path + \" from node : \" + fromNode);\n        }\n        persistToFile(filedata, metadata);\n        return true;\n      } catch (SolrException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error fetching data\", e);\n      } catch (IOException ioe) {\n        throw new SolrException(SERVER_ERROR, \"Error persisting file\", ioe);\n      }\n\n    }\n\n","sourceOld":"    private boolean fetchFileFromNodeAndPersist(String fromNode) {\n      log.info(\"fetching a file {} from {} \", path, fromNode);\n      String url = coreContainer.getZkController().getZkStateReader().getBaseUrlForNodeName(fromNode);\n      if (url == null) throw new SolrException(BAD_REQUEST, \"No such node\");\n      String baseUrl = url.replace(\"/solr\", \"/api\");\n\n      ByteBuffer metadata = null;\n      @SuppressWarnings({\"rawtypes\"})\n      Map m = null;\n      try {\n        metadata = Utils.executeGET(coreContainer.getUpdateShardHandler().getDefaultHttpClient(),\n            baseUrl + \"/node/files\" + getMetaPath(),\n            Utils.newBytesConsumer((int) MAX_PKG_SIZE));\n        m = (Map) Utils.fromJSON(metadata.array(), metadata.arrayOffset(), metadata.limit());\n      } catch (SolrException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error fetching metadata\", e);\n      }\n\n      try {\n        ByteBuffer filedata = Utils.executeGET(coreContainer.getUpdateShardHandler().getDefaultHttpClient(),\n            baseUrl + \"/node/files\" + path,\n            Utils.newBytesConsumer((int) MAX_PKG_SIZE));\n        String sha512 = DigestUtils.sha512Hex(new ByteBufferInputStream(filedata));\n        String expected = (String) m.get(\"sha512\");\n        if (!sha512.equals(expected)) {\n          throw new SolrException(SERVER_ERROR, \"sha512 mismatch downloading : \" + path + \" from node : \" + fromNode);\n        }\n        persistToFile(filedata, metadata);\n        return true;\n      } catch (SolrException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error fetching data\", e);\n      } catch (IOException ioe) {\n        throw new SolrException(SERVER_ERROR, \"Error persisting file\", ioe);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64ec73f19361ec6354e55c878a349735fa8bc52e":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"61f55b4999c3f858f4f4acc9c6dc57af2c1acf99":["8476949555f799dff381770c01cfad051a264487"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8476949555f799dff381770c01cfad051a264487":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["61f55b4999c3f858f4f4acc9c6dc57af2c1acf99"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["64ec73f19361ec6354e55c878a349735fa8bc52e"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8476949555f799dff381770c01cfad051a264487"]},"commit2Childs":{"64ec73f19361ec6354e55c878a349735fa8bc52e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"61f55b4999c3f858f4f4acc9c6dc57af2c1acf99":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8476949555f799dff381770c01cfad051a264487","b0b597c65628ca9e73913a07e81691f8229bae35"],"8476949555f799dff381770c01cfad051a264487":["61f55b4999c3f858f4f4acc9c6dc57af2c1acf99","b0b597c65628ca9e73913a07e81691f8229bae35"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["64ec73f19361ec6354e55c878a349735fa8bc52e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}