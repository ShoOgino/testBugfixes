{"path":"lucene/test-framework/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testRandomRegexps().mjava","commits":[{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testRandomRegexps().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testRandomRegexps().mjava","sourceNew":"  /** blast some random strings through differently configured tokenizers */\n  public void testRandomRegexps() throws Exception {\n    int iters = TEST_NIGHTLY ? atLeast(30) : atLeast(1);\n    for (int i = 0; i < iters; i++) {\n      final CharacterRunAutomaton dfa = new CharacterRunAutomaton(AutomatonTestUtil.randomAutomaton(random()), Integer.MAX_VALUE);\n      final boolean lowercase = random().nextBoolean();\n      final int limit = TestUtil.nextInt(random(), 0, 500);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer t = new MockTokenizer(dfa, lowercase, limit);\n          return new TokenStreamComponents(t, t);\n        }\n      };\n      checkRandomData(random(), a, 100);\n      a.close();\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through differently configured tokenizers */\n  public void testRandomRegexps() throws Exception {\n    int iters = TEST_NIGHTLY ? atLeast(30) : atLeast(1);\n    for (int i = 0; i < iters; i++) {\n      final CharacterRunAutomaton dfa = new CharacterRunAutomaton(AutomatonTestUtil.randomAutomaton(random()), Integer.MAX_VALUE);\n      final boolean lowercase = random().nextBoolean();\n      final int limit = TestUtil.nextInt(random(), 0, 500);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer t = new MockTokenizer(dfa, lowercase, limit);\n          return new TokenStreamComponents(t, t);\n        }\n      };\n      checkRandomData(random(), a, 100);\n      a.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}