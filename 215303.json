{"path":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts2#testAllCounts().mjava","commits":[{"id":"ca39562b2d7687143fdb601d5de1b8f7b778f1db","date":1385299806,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts2#testAllCounts().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAllCounts() throws Exception {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = newSearcher(indexReader);\n    \n    SimpleFacetsCollector sfc = new SimpleFacetsCollector();\n    searcher.search(new MatchAllDocsQuery(), sfc);\n\n    Facets facets = getTaxonomyFacetCounts(taxoReader, getConfig(), sfc);\n    \n    SimpleFacetResult result = facets.getTopChildren(NUM_CHILDREN_CP_A, CP_A);\n    assertEquals(-1, result.value.intValue());\n    int prevValue = Integer.MAX_VALUE;\n    for(LabelAndValue labelValue : result.labelValues) {\n      assertEquals(allExpectedCounts.get(CP_A + \"/\" + labelValue.label), labelValue.value.intValue());\n      assertTrue(\"wrong sort order of sub results: labelValue.value=\" + labelValue.value + \" prevValue=\" + prevValue, labelValue.value.intValue() <= prevValue);\n      prevValue = labelValue.value.intValue();\n    }\n\n    result = facets.getTopChildren(NUM_CHILDREN_CP_B, CP_B);\n    assertEquals(allExpectedCounts.get(CP_B), result.value.intValue());\n    prevValue = Integer.MAX_VALUE;\n    for(LabelAndValue labelValue : result.labelValues) {\n      assertEquals(allExpectedCounts.get(CP_B + \"/\" + labelValue.label), labelValue.value.intValue());\n      assertTrue(\"wrong sort order of sub results: labelValue.value=\" + labelValue.value + \" prevValue=\" + prevValue, labelValue.value.intValue() <= prevValue);\n      prevValue = labelValue.value.intValue();\n    }\n\n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts2#testAllCounts().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts2#testAllCounts().mjava","sourceNew":"  @Test\n  public void testAllCounts() throws Exception {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = newSearcher(indexReader);\n    \n    SimpleFacetsCollector sfc = new SimpleFacetsCollector();\n    searcher.search(new MatchAllDocsQuery(), sfc);\n\n    Facets facets = getTaxonomyFacetCounts(taxoReader, getConfig(), sfc);\n    \n    SimpleFacetResult result = facets.getTopChildren(NUM_CHILDREN_CP_A, CP_A);\n    assertEquals(-1, result.value.intValue());\n    int prevValue = Integer.MAX_VALUE;\n    for(LabelAndValue labelValue : result.labelValues) {\n      assertEquals(allExpectedCounts.get(CP_A + \"/\" + labelValue.label), labelValue.value);\n      assertTrue(\"wrong sort order of sub results: labelValue.value=\" + labelValue.value + \" prevValue=\" + prevValue, labelValue.value.intValue() <= prevValue);\n      prevValue = labelValue.value.intValue();\n    }\n\n    result = facets.getTopChildren(NUM_CHILDREN_CP_B, CP_B);\n    assertEquals(allExpectedCounts.get(CP_B), result.value);\n    prevValue = Integer.MAX_VALUE;\n    for(LabelAndValue labelValue : result.labelValues) {\n      assertEquals(allExpectedCounts.get(CP_B + \"/\" + labelValue.label), labelValue.value);\n      assertTrue(\"wrong sort order of sub results: labelValue.value=\" + labelValue.value + \" prevValue=\" + prevValue, labelValue.value.intValue() <= prevValue);\n      prevValue = labelValue.value.intValue();\n    }\n\n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","sourceOld":"  @Test\n  public void testAllCounts() throws Exception {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = newSearcher(indexReader);\n    \n    SimpleFacetsCollector sfc = new SimpleFacetsCollector();\n    searcher.search(new MatchAllDocsQuery(), sfc);\n\n    Facets facets = getTaxonomyFacetCounts(taxoReader, getConfig(), sfc);\n    \n    SimpleFacetResult result = facets.getTopChildren(NUM_CHILDREN_CP_A, CP_A);\n    assertEquals(-1, result.value.intValue());\n    int prevValue = Integer.MAX_VALUE;\n    for(LabelAndValue labelValue : result.labelValues) {\n      assertEquals(allExpectedCounts.get(CP_A + \"/\" + labelValue.label), labelValue.value.intValue());\n      assertTrue(\"wrong sort order of sub results: labelValue.value=\" + labelValue.value + \" prevValue=\" + prevValue, labelValue.value.intValue() <= prevValue);\n      prevValue = labelValue.value.intValue();\n    }\n\n    result = facets.getTopChildren(NUM_CHILDREN_CP_B, CP_B);\n    assertEquals(allExpectedCounts.get(CP_B), result.value.intValue());\n    prevValue = Integer.MAX_VALUE;\n    for(LabelAndValue labelValue : result.labelValues) {\n      assertEquals(allExpectedCounts.get(CP_B + \"/\" + labelValue.label), labelValue.value.intValue());\n      assertTrue(\"wrong sort order of sub results: labelValue.value=\" + labelValue.value + \" prevValue=\" + prevValue, labelValue.value.intValue() <= prevValue);\n      prevValue = labelValue.value.intValue();\n    }\n\n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetCounts2#testAllCounts().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts2#testAllCounts().mjava","sourceNew":"  @Test\n  public void testAllCounts() throws Exception {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = newSearcher(indexReader);\n    \n    FacetsCollector sfc = new FacetsCollector();\n    searcher.search(new MatchAllDocsQuery(), sfc);\n\n    Facets facets = getTaxonomyFacetCounts(taxoReader, getConfig(), sfc);\n    \n    FacetResult result = facets.getTopChildren(NUM_CHILDREN_CP_A, CP_A);\n    assertEquals(-1, result.value.intValue());\n    int prevValue = Integer.MAX_VALUE;\n    for(LabelAndValue labelValue : result.labelValues) {\n      assertEquals(allExpectedCounts.get(CP_A + \"/\" + labelValue.label), labelValue.value);\n      assertTrue(\"wrong sort order of sub results: labelValue.value=\" + labelValue.value + \" prevValue=\" + prevValue, labelValue.value.intValue() <= prevValue);\n      prevValue = labelValue.value.intValue();\n    }\n\n    result = facets.getTopChildren(NUM_CHILDREN_CP_B, CP_B);\n    assertEquals(allExpectedCounts.get(CP_B), result.value);\n    prevValue = Integer.MAX_VALUE;\n    for(LabelAndValue labelValue : result.labelValues) {\n      assertEquals(allExpectedCounts.get(CP_B + \"/\" + labelValue.label), labelValue.value);\n      assertTrue(\"wrong sort order of sub results: labelValue.value=\" + labelValue.value + \" prevValue=\" + prevValue, labelValue.value.intValue() <= prevValue);\n      prevValue = labelValue.value.intValue();\n    }\n\n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","sourceOld":"  @Test\n  public void testAllCounts() throws Exception {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = newSearcher(indexReader);\n    \n    SimpleFacetsCollector sfc = new SimpleFacetsCollector();\n    searcher.search(new MatchAllDocsQuery(), sfc);\n\n    Facets facets = getTaxonomyFacetCounts(taxoReader, getConfig(), sfc);\n    \n    SimpleFacetResult result = facets.getTopChildren(NUM_CHILDREN_CP_A, CP_A);\n    assertEquals(-1, result.value.intValue());\n    int prevValue = Integer.MAX_VALUE;\n    for(LabelAndValue labelValue : result.labelValues) {\n      assertEquals(allExpectedCounts.get(CP_A + \"/\" + labelValue.label), labelValue.value);\n      assertTrue(\"wrong sort order of sub results: labelValue.value=\" + labelValue.value + \" prevValue=\" + prevValue, labelValue.value.intValue() <= prevValue);\n      prevValue = labelValue.value.intValue();\n    }\n\n    result = facets.getTopChildren(NUM_CHILDREN_CP_B, CP_B);\n    assertEquals(allExpectedCounts.get(CP_B), result.value);\n    prevValue = Integer.MAX_VALUE;\n    for(LabelAndValue labelValue : result.labelValues) {\n      assertEquals(allExpectedCounts.get(CP_B + \"/\" + labelValue.label), labelValue.value);\n      assertTrue(\"wrong sort order of sub results: labelValue.value=\" + labelValue.value + \" prevValue=\" + prevValue, labelValue.value.intValue() <= prevValue);\n      prevValue = labelValue.value.intValue();\n    }\n\n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d33e19a97046248623a7591aeaa6547233fd15e2":["ca39562b2d7687143fdb601d5de1b8f7b778f1db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ca39562b2d7687143fdb601d5de1b8f7b778f1db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d33e19a97046248623a7591aeaa6547233fd15e2":["21d36d0db865f7b84026b447bec653469a6e66df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","ca39562b2d7687143fdb601d5de1b8f7b778f1db"],"21d36d0db865f7b84026b447bec653469a6e66df":[],"ca39562b2d7687143fdb601d5de1b8f7b778f1db":["d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}