{"path":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadSpans#testSpanNot().mjava","commits":[{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadSpans#testSpanNot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans#testSpanNot().mjava","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    checkSpans(MultiSpansWrapper.wrap(reader, snq, SpanWeight.Postings.PAYLOADS), 1, new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    checkSpans(MultiSpansWrapper.wrap(reader, snq, SpanWeight.Postings.PAYLOADS), collector, 1, new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadSpans#testSpanNot().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadSpans#testSpanNot().mjava","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = getOnlyLeafReader(writer.getReader());\n    writer.close();\n\n    checkSpans(snq.createWeight(newSearcher(reader), false).getSpans(reader.leaves().get(0), SpanWeight.Postings.PAYLOADS), 1, new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    checkSpans(MultiSpansWrapper.wrap(reader, snq, SpanWeight.Postings.PAYLOADS), 1, new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":["0d302ba328993a5b449c2e0b3b5e15ae53e45879","eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecdeda0f97b09b83f431ef8c6e8a2ae4695270a1","date":1457861702,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadSpans#testSpanNot().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadSpans#testSpanNot().mjava","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = getOnlyLeafReader(writer.getReader());\n    writer.close();\n\n    checkSpans(snq.createWeight(newSearcher(reader, false), false).getSpans(reader.leaves().get(0), SpanWeight.Postings.PAYLOADS), 1, new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = getOnlyLeafReader(writer.getReader());\n    writer.close();\n\n    checkSpans(snq.createWeight(newSearcher(reader), false).getSpans(reader.leaves().get(0), SpanWeight.Postings.PAYLOADS), 1, new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadSpans#testSpanNot().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadSpans#testSpanNot().mjava","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = getOnlyLeafReader(writer.getReader());\n    writer.close();\n\n    checkSpans(snq.createWeight(newSearcher(reader, false), false, 1f).getSpans(reader.leaves().get(0), SpanWeight.Postings.PAYLOADS), 1, new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = getOnlyLeafReader(writer.getReader());\n    writer.close();\n\n    checkSpans(snq.createWeight(newSearcher(reader, false), false).getSpans(reader.leaves().get(0), SpanWeight.Postings.PAYLOADS), 1, new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadSpans#testSpanNot().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadSpans#testSpanNot().mjava","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = getOnlyLeafReader(writer.getReader());\n    writer.close();\n\n    checkSpans(snq.createWeight(newSearcher(reader, false), false, 1f).getSpans(reader.leaves().get(0), SpanWeight.Postings.PAYLOADS), 1, new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = getOnlyLeafReader(writer.getReader());\n    writer.close();\n\n    checkSpans(snq.createWeight(newSearcher(reader, false), false).getSpans(reader.leaves().get(0), SpanWeight.Postings.PAYLOADS), 1, new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadSpans#testSpanNot().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadSpans#testSpanNot().mjava","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = getOnlyLeafReader(writer.getReader());\n    writer.close();\n\n    checkSpans(snq.createWeight(newSearcher(reader, false), ScoreMode.COMPLETE_NO_SCORES, 1f).getSpans(reader.leaves().get(0), SpanWeight.Postings.PAYLOADS), 1, new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = getOnlyLeafReader(writer.getReader());\n    writer.close();\n\n    checkSpans(snq.createWeight(newSearcher(reader, false), false, 1f).getSpans(reader.leaves().get(0), SpanWeight.Postings.PAYLOADS), 1, new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadSpans#testSpanNot().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadSpans#testSpanNot().mjava","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = getOnlyLeafReader(writer.getReader());\n    writer.close();\n\n    checkSpans(snq.createWeight(newSearcher(reader, false), ScoreMode.COMPLETE_NO_SCORES, 1f).getSpans(reader.leaves().get(0), SpanWeight.Postings.PAYLOADS), 1, new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = getOnlyLeafReader(writer.getReader());\n    writer.close();\n\n    checkSpans(snq.createWeight(newSearcher(reader, false), false, 1f).getSpans(reader.leaves().get(0), SpanWeight.Postings.PAYLOADS), 1, new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["ecdeda0f97b09b83f431ef8c6e8a2ae4695270a1"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"ecdeda0f97b09b83f431ef8c6e8a2ae4695270a1":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ecdeda0f97b09b83f431ef8c6e8a2ae4695270a1","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["ecdeda0f97b09b83f431ef8c6e8a2ae4695270a1"],"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["9fc47cb7b4346802411bb432f501ed0673d7119e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"ecdeda0f97b09b83f431ef8c6e8a2ae4695270a1":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}