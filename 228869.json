{"path":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testPersistTrue().mjava","commits":[{"id":"9818efa55563ddfecdecafbdd43f4bee9f252e7d","date":1364853872,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testPersistTrue().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrDiscoveryProperties#testPersistTrue().mjava","sourceNew":"  // Check that the various flavors of persistence work, including saving the state of a core when it's being swapped\n  // out. Added a test in here to insure that files that have config variables are saved with the config vars not the\n  // substitutions.\n  @Test\n  public void testPersistTrue() throws Exception {\n    setMeUp();\n    addSolrXml();\n    System.setProperty(\"solr.persistent\", \"true\");\n\n    Properties special = makeCorePropFile(\"core1\", false, true);\n    special.put(CoreDescriptor.CORE_INSTDIR, \"${core1inst:anothersillypath}\");\n    addCoreWithProps(special);\n    addCoreWithProps(makeCorePropFile(\"core2\", false, false));\n    addCoreWithProps(makeCorePropFile(\"lazy1\", true, true));\n    addCoreWithProps(makeCorePropFile(\"lazy2\", true, true));\n    addCoreWithProps(makeCorePropFile(\"lazy3\", true, false));\n\n    System.setProperty(\"core1inst\", \"core1\");\n    CoreContainer cc = init();\n    SolrCore coreC1 = cc.getCore(\"core1\");\n    addCoreProps(coreC1, \"addedPropC1=addedC1\", \"addedPropC1B=foo\", \"addedPropC1C=bar\");\n\n    SolrCore coreC2 = cc.getCore(\"core2\");\n    addCoreProps(coreC2, \"addedPropC2=addedC2\", \"addedPropC2B=foo\", \"addedPropC2C=bar\");\n\n    SolrCore coreL1 = cc.getCore(\"lazy1\");\n    addCoreProps(coreL1, \"addedPropL1=addedL1\", \"addedPropL1B=foo\", \"addedPropL1C=bar\");\n\n    SolrCore coreL2 = cc.getCore(\"lazy2\");\n    addCoreProps(coreL2, \"addedPropL2=addedL2\", \"addedPropL2B=foo\", \"addedPropL2C=bar\");\n\n    SolrCore coreL3 = cc.getCore(\"lazy3\");\n    addCoreProps(coreL3, \"addedPropL3=addedL3\", \"addedPropL3B=foo\", \"addedPropL3C=bar\");\n\n    try {\n      cc.persist();\n\n      // Insure that one of the loaded cores was swapped out, with a cache size of 2 lazy1 should be gone.\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy2\", \"lazy3\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\");\n\n      Properties orig = makeCorePropFile(\"core1\", false, true);\n      orig.put(CoreDescriptor.CORE_INSTDIR, \"${core1inst:anothersillypath}\");\n      checkCoreProps(orig, \"addedPropC1=addedC1\", \"addedPropC1B=foo\", \"addedPropC1C=bar\");\n\n      orig = makeCorePropFile(\"core2\", false, false);\n      checkCoreProps(orig, \"addedPropC2=addedC2\", \"addedPropC2B=foo\", \"addedPropC2C=bar\");\n\n      // This test insures that a core that was swapped out has its properties file persisted. Currently this happens\n      // as the file is removed from the cache.\n      orig = makeCorePropFile(\"lazy1\", true, true);\n      checkCoreProps(orig, \"addedPropL1=addedL1\", \"addedPropL1B=foo\", \"addedPropL1C=bar\");\n\n      orig = makeCorePropFile(\"lazy2\", true, true);\n      checkCoreProps(orig, \"addedPropL2=addedL2\", \"addedPropL2B=foo\", \"addedPropL2C=bar\");\n\n      orig = makeCorePropFile(\"lazy3\", true, false);\n      checkCoreProps(orig, \"addedPropL3=addedL3\", \"addedPropL3B=foo\", \"addedPropL3C=bar\");\n\n      coreC1.close();\n      coreC2.close();\n      coreL1.close();\n      coreL2.close();\n      coreL3.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Check that the various flavors of persistence work, including saving the state of a core when it's being swapped\n  // out. Added a test in here to insure that files that have config variables are saved with the config vars not the\n  // substitutions.\n  @Test\n  public void testPersistTrue() throws Exception {\n    setMeUp();\n    addSolrPropertiesFile();\n    System.setProperty(\"solr.persistent\", \"true\");\n\n    Properties special = makeCorePropFile(\"core1\", false, true);\n    special.put(CoreDescriptor.CORE_INSTDIR, \"${core1inst:anothersillypath}\");\n    addCoreWithProps(special);\n    addCoreWithProps(makeCorePropFile(\"core2\", false, false));\n    addCoreWithProps(makeCorePropFile(\"lazy1\", true, true));\n    addCoreWithProps(makeCorePropFile(\"lazy2\", true, true));\n    addCoreWithProps(makeCorePropFile(\"lazy3\", true, false));\n\n    System.setProperty(\"core1inst\", \"core1\");\n    CoreContainer cc = init();\n    SolrCore coreC1 = cc.getCore(\"core1\");\n    addCoreProps(coreC1, \"addedPropC1=addedC1\", \"addedPropC1B=foo\", \"addedPropC1C=bar\");\n\n    SolrCore coreC2 = cc.getCore(\"core2\");\n    addCoreProps(coreC2, \"addedPropC2=addedC2\", \"addedPropC2B=foo\", \"addedPropC2C=bar\");\n\n    SolrCore coreL1 = cc.getCore(\"lazy1\");\n    addCoreProps(coreL1, \"addedPropL1=addedL1\", \"addedPropL1B=foo\", \"addedPropL1C=bar\");\n\n    SolrCore coreL2 = cc.getCore(\"lazy2\");\n    addCoreProps(coreL2, \"addedPropL2=addedL2\", \"addedPropL2B=foo\", \"addedPropL2C=bar\");\n\n    SolrCore coreL3 = cc.getCore(\"lazy3\");\n    addCoreProps(coreL3, \"addedPropL3=addedL3\", \"addedPropL3B=foo\", \"addedPropL3C=bar\");\n\n    try {\n      cc.persist();\n\n      // Insure that one of the loaded cores was swapped out, with a cache size of 2 lazy1 should be gone.\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy2\", \"lazy3\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\");\n\n      checkSolrProperties(cc);\n\n      File xmlFile = new File(solrHomeDirectory, \"solr.xml\");\n      assertFalse(\"Solr.xml should NOT exist\", xmlFile.exists());\n\n      Properties orig = makeCorePropFile(\"core1\", false, true);\n      orig.put(CoreDescriptor.CORE_INSTDIR, \"${core1inst:anothersillypath}\");\n      checkCoreProps(orig, \"addedPropC1=addedC1\", \"addedPropC1B=foo\", \"addedPropC1C=bar\");\n\n      orig = makeCorePropFile(\"core2\", false, false);\n      checkCoreProps(orig, \"addedPropC2=addedC2\", \"addedPropC2B=foo\", \"addedPropC2C=bar\");\n\n      // This test insures that a core that was swapped out has its properties file persisted. Currently this happens\n      // as the file is removed from the cache.\n      orig = makeCorePropFile(\"lazy1\", true, true);\n      checkCoreProps(orig, \"addedPropL1=addedL1\", \"addedPropL1B=foo\", \"addedPropL1C=bar\");\n\n      orig = makeCorePropFile(\"lazy2\", true, true);\n      checkCoreProps(orig, \"addedPropL2=addedL2\", \"addedPropL2B=foo\", \"addedPropL2C=bar\");\n\n      orig = makeCorePropFile(\"lazy3\", true, false);\n      checkCoreProps(orig, \"addedPropL3=addedL3\", \"addedPropL3B=foo\", \"addedPropL3C=bar\");\n\n      coreC1.close();\n      coreC2.close();\n      coreL1.close();\n      coreL2.close();\n      coreL3.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e475642767c688ede5728d7918326f70b4e0bf3a","date":1366072489,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testPersistTrue().mjava","sourceNew":null,"sourceOld":"  // Check that the various flavors of persistence work, including saving the state of a core when it's being swapped\n  // out. Added a test in here to insure that files that have config variables are saved with the config vars not the\n  // substitutions.\n  @Test\n  public void testPersistTrue() throws Exception {\n    setMeUp();\n    addSolrXml();\n    System.setProperty(\"solr.persistent\", \"true\");\n\n    Properties special = makeCorePropFile(\"core1\", false, true);\n    special.put(CoreDescriptor.CORE_INSTDIR, \"${core1inst:anothersillypath}\");\n    addCoreWithProps(special);\n    addCoreWithProps(makeCorePropFile(\"core2\", false, false));\n    addCoreWithProps(makeCorePropFile(\"lazy1\", true, true));\n    addCoreWithProps(makeCorePropFile(\"lazy2\", true, true));\n    addCoreWithProps(makeCorePropFile(\"lazy3\", true, false));\n\n    System.setProperty(\"core1inst\", \"core1\");\n    CoreContainer cc = init();\n    SolrCore coreC1 = cc.getCore(\"core1\");\n    addCoreProps(coreC1, \"addedPropC1=addedC1\", \"addedPropC1B=foo\", \"addedPropC1C=bar\");\n\n    SolrCore coreC2 = cc.getCore(\"core2\");\n    addCoreProps(coreC2, \"addedPropC2=addedC2\", \"addedPropC2B=foo\", \"addedPropC2C=bar\");\n\n    SolrCore coreL1 = cc.getCore(\"lazy1\");\n    addCoreProps(coreL1, \"addedPropL1=addedL1\", \"addedPropL1B=foo\", \"addedPropL1C=bar\");\n\n    SolrCore coreL2 = cc.getCore(\"lazy2\");\n    addCoreProps(coreL2, \"addedPropL2=addedL2\", \"addedPropL2B=foo\", \"addedPropL2C=bar\");\n\n    SolrCore coreL3 = cc.getCore(\"lazy3\");\n    addCoreProps(coreL3, \"addedPropL3=addedL3\", \"addedPropL3B=foo\", \"addedPropL3C=bar\");\n\n    try {\n      cc.persist();\n\n      // Insure that one of the loaded cores was swapped out, with a cache size of 2 lazy1 should be gone.\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy2\", \"lazy3\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\");\n\n      Properties orig = makeCorePropFile(\"core1\", false, true);\n      orig.put(CoreDescriptor.CORE_INSTDIR, \"${core1inst:anothersillypath}\");\n      checkCoreProps(orig, \"addedPropC1=addedC1\", \"addedPropC1B=foo\", \"addedPropC1C=bar\");\n\n      orig = makeCorePropFile(\"core2\", false, false);\n      checkCoreProps(orig, \"addedPropC2=addedC2\", \"addedPropC2B=foo\", \"addedPropC2C=bar\");\n\n      // This test insures that a core that was swapped out has its properties file persisted. Currently this happens\n      // as the file is removed from the cache.\n      orig = makeCorePropFile(\"lazy1\", true, true);\n      checkCoreProps(orig, \"addedPropL1=addedL1\", \"addedPropL1B=foo\", \"addedPropL1C=bar\");\n\n      orig = makeCorePropFile(\"lazy2\", true, true);\n      checkCoreProps(orig, \"addedPropL2=addedL2\", \"addedPropL2B=foo\", \"addedPropL2C=bar\");\n\n      orig = makeCorePropFile(\"lazy3\", true, false);\n      checkCoreProps(orig, \"addedPropL3=addedL3\", \"addedPropL3B=foo\", \"addedPropL3C=bar\");\n\n      coreC1.close();\n      coreC2.close();\n      coreL1.close();\n      coreL2.close();\n      coreL3.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e475642767c688ede5728d7918326f70b4e0bf3a":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e475642767c688ede5728d7918326f70b4e0bf3a"]},"commit2Childs":{"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["e475642767c688ede5728d7918326f70b4e0bf3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"e475642767c688ede5728d7918326f70b4e0bf3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}