{"path":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#nextDown(InetAddress).mjava","commits":[{"id":"3f8f94df09ef39794abdae8ec5bffc9def9c4eb5","date":1461159938,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#nextDown(InetAddress).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the {@link InetAddress} that compares immediately less than\n   * {@code address}.\n   * @throws ArithmeticException if the provided address is the\n   *              {@link #MIN_VALUE minimum ip address}\n   */\n  public static InetAddress nextDown(InetAddress address) {\n    if (address.equals(MIN_VALUE)) {\n      throw new ArithmeticException(\"Underflow: there is no smaller InetAddress than \"\n          + address.getHostAddress());\n    }\n    byte[] delta = new byte[BYTES];\n    delta[BYTES-1] = 1;\n    byte[] nextDownBytes = new byte[InetAddressPoint.BYTES];\n    NumericUtils.subtract(InetAddressPoint.BYTES, 0, encode(address), delta, nextDownBytes);\n    return decode(nextDownBytes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b701e0fcef214f86bab1daf107adce0b0131212","date":1461241874,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#nextDown(InetAddress).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the {@link InetAddress} that compares immediately less than\n   * {@code address}.\n   * @throws ArithmeticException if the provided address is the\n   *              {@link #MIN_VALUE minimum ip address}\n   */\n  public static InetAddress nextDown(InetAddress address) {\n    if (address.equals(MIN_VALUE)) {\n      throw new ArithmeticException(\"Underflow: there is no smaller InetAddress than \"\n          + address.getHostAddress());\n    }\n    byte[] delta = new byte[BYTES];\n    delta[BYTES-1] = 1;\n    byte[] nextDownBytes = new byte[InetAddressPoint.BYTES];\n    NumericUtils.subtract(InetAddressPoint.BYTES, 0, encode(address), delta, nextDownBytes);\n    return decode(nextDownBytes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a52b01a73cacbd2d360240e72d64c0ba353618f","date":1489389749,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/document/InetAddressPoint#nextDown(InetAddress).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/InetAddressPoint#nextDown(InetAddress).mjava","sourceNew":"  /**\n   * Return the {@link InetAddress} that compares immediately less than\n   * {@code address}.\n   * @throws ArithmeticException if the provided address is the\n   *              {@link #MIN_VALUE minimum ip address}\n   */\n  public static InetAddress nextDown(InetAddress address) {\n    if (address.equals(MIN_VALUE)) {\n      throw new ArithmeticException(\"Underflow: there is no smaller InetAddress than \"\n          + address.getHostAddress());\n    }\n    byte[] delta = new byte[BYTES];\n    delta[BYTES-1] = 1;\n    byte[] nextDownBytes = new byte[InetAddressPoint.BYTES];\n    NumericUtils.subtract(InetAddressPoint.BYTES, 0, encode(address), delta, nextDownBytes);\n    return decode(nextDownBytes);\n  }\n\n","sourceOld":"  /**\n   * Return the {@link InetAddress} that compares immediately less than\n   * {@code address}.\n   * @throws ArithmeticException if the provided address is the\n   *              {@link #MIN_VALUE minimum ip address}\n   */\n  public static InetAddress nextDown(InetAddress address) {\n    if (address.equals(MIN_VALUE)) {\n      throw new ArithmeticException(\"Underflow: there is no smaller InetAddress than \"\n          + address.getHostAddress());\n    }\n    byte[] delta = new byte[BYTES];\n    delta[BYTES-1] = 1;\n    byte[] nextDownBytes = new byte[InetAddressPoint.BYTES];\n    NumericUtils.subtract(InetAddressPoint.BYTES, 0, encode(address), delta, nextDownBytes);\n    return decode(nextDownBytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9b701e0fcef214f86bab1daf107adce0b0131212":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f8f94df09ef39794abdae8ec5bffc9def9c4eb5"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["9b701e0fcef214f86bab1daf107adce0b0131212"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f8f94df09ef39794abdae8ec5bffc9def9c4eb5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a52b01a73cacbd2d360240e72d64c0ba353618f"]},"commit2Childs":{"9b701e0fcef214f86bab1daf107adce0b0131212":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b701e0fcef214f86bab1daf107adce0b0131212","3f8f94df09ef39794abdae8ec5bffc9def9c4eb5"],"3f8f94df09ef39794abdae8ec5bffc9def9c4eb5":["9b701e0fcef214f86bab1daf107adce0b0131212"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}