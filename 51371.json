{"path":"lucene/facet/src/java/org/apache/lucene/facet/associations/MultiAssociationsFacetsAggregator#MultiAssociationsFacetsAggregator(Map[CategoryPath,FacetsAggregator]).mjava","commits":[{"id":"2d37ef5db468b4f3ae89b17062b0b56b20dd2e78","date":1360669163,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/associations/MultiAssociationsFacetsAggregator#MultiAssociationsFacetsAggregator(Map[CategoryPath,FacetsAggregator]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new {@link MultiAssociationsFacetsAggregator} over the given\n   * aggregators. The mapping is used by\n   * {@link #rollupValues(FacetRequest, int, int[], int[], FacetArrays)} to\n   * rollup the values of the speicfic category by the corresponding\n   * {@link FacetsAggregator}. However, since each {@link FacetsAggregator}\n   * handles the associations of a specific type, which could cover multiple\n   * categories, the aggregation is done on the unique set of aggregators, which\n   * are identified by their class.\n   */\n  public MultiAssociationsFacetsAggregator(Map<CategoryPath,FacetsAggregator> aggregators) {\n    this.categoryAggregators = aggregators;\n    \n    // make sure that each FacetsAggregator class is invoked only once, or\n    // otherwise categories may be aggregated multiple times.\n    Map<Class<? extends FacetsAggregator>, FacetsAggregator> aggsClasses = \n        new HashMap<Class<? extends FacetsAggregator>,FacetsAggregator>();\n    for (FacetsAggregator fa : aggregators.values()) {\n      aggsClasses.put(fa.getClass(), fa);\n    }\n    this.aggregators = new ArrayList<FacetsAggregator>(aggsClasses.values());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["416910ae9ffe752ba5b6334f75d6c36e019626cc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","date":1360780178,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/associations/MultiAssociationsFacetsAggregator#MultiAssociationsFacetsAggregator(Map[CategoryPath,FacetsAggregator]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new {@link MultiAssociationsFacetsAggregator} over the given\n   * aggregators. The mapping is used by\n   * {@link #rollupValues(FacetRequest, int, int[], int[], FacetArrays)} to\n   * rollup the values of the speicfic category by the corresponding\n   * {@link FacetsAggregator}. However, since each {@link FacetsAggregator}\n   * handles the associations of a specific type, which could cover multiple\n   * categories, the aggregation is done on the unique set of aggregators, which\n   * are identified by their class.\n   */\n  public MultiAssociationsFacetsAggregator(Map<CategoryPath,FacetsAggregator> aggregators) {\n    this.categoryAggregators = aggregators;\n    \n    // make sure that each FacetsAggregator class is invoked only once, or\n    // otherwise categories may be aggregated multiple times.\n    Map<Class<? extends FacetsAggregator>, FacetsAggregator> aggsClasses = \n        new HashMap<Class<? extends FacetsAggregator>,FacetsAggregator>();\n    for (FacetsAggregator fa : aggregators.values()) {\n      aggsClasses.put(fa.getClass(), fa);\n    }\n    this.aggregators = new ArrayList<FacetsAggregator>(aggsClasses.values());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"416910ae9ffe752ba5b6334f75d6c36e019626cc","date":1367953778,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/associations/MultiAssociationsFacetsAggregator#MultiAssociationsFacetsAggregator(Map[CategoryPath,FacetsAggregator]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/MultiAssociationsFacetsAggregator#MultiAssociationsFacetsAggregator(Map[CategoryPath,FacetsAggregator]).mjava","sourceNew":"  /**\n   * Creates a new {@link MultiAssociationsFacetsAggregator} over the given\n   * aggregators. The mapping is used by\n   * {@link #rollupValues(FacetRequest, int, int[], int[], FacetArrays)} to\n   * rollup the values of the specific category by the corresponding\n   * {@link FacetsAggregator}. However, since each {@link FacetsAggregator}\n   * handles the associations of a specific type, which could cover multiple\n   * categories, the aggregation is done on the unique set of aggregators, which\n   * are identified by their class.\n   */\n  public MultiAssociationsFacetsAggregator(Map<CategoryPath,FacetsAggregator> aggregators) {\n    this.categoryAggregators = aggregators;\n    \n    // make sure that each FacetsAggregator class is invoked only once, or\n    // otherwise categories may be aggregated multiple times.\n    Map<Class<? extends FacetsAggregator>, FacetsAggregator> aggsClasses = \n        new HashMap<Class<? extends FacetsAggregator>,FacetsAggregator>();\n    for (FacetsAggregator fa : aggregators.values()) {\n      aggsClasses.put(fa.getClass(), fa);\n    }\n    this.aggregators = new ArrayList<FacetsAggregator>(aggsClasses.values());\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link MultiAssociationsFacetsAggregator} over the given\n   * aggregators. The mapping is used by\n   * {@link #rollupValues(FacetRequest, int, int[], int[], FacetArrays)} to\n   * rollup the values of the speicfic category by the corresponding\n   * {@link FacetsAggregator}. However, since each {@link FacetsAggregator}\n   * handles the associations of a specific type, which could cover multiple\n   * categories, the aggregation is done on the unique set of aggregators, which\n   * are identified by their class.\n   */\n  public MultiAssociationsFacetsAggregator(Map<CategoryPath,FacetsAggregator> aggregators) {\n    this.categoryAggregators = aggregators;\n    \n    // make sure that each FacetsAggregator class is invoked only once, or\n    // otherwise categories may be aggregated multiple times.\n    Map<Class<? extends FacetsAggregator>, FacetsAggregator> aggsClasses = \n        new HashMap<Class<? extends FacetsAggregator>,FacetsAggregator>();\n    for (FacetsAggregator fa : aggregators.values()) {\n      aggsClasses.put(fa.getClass(), fa);\n    }\n    this.aggregators = new ArrayList<FacetsAggregator>(aggsClasses.values());\n  }\n\n","bugFix":["2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","date":1375103250,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/MultiFacetsAggregator#MultiFacetsAggregator(Map[CategoryPath,FacetsAggregator]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/MultiAssociationsFacetsAggregator#MultiAssociationsFacetsAggregator(Map[CategoryPath,FacetsAggregator]).mjava","sourceNew":"  /**\n   * Constructor.\n   * <p>\n   * The mapping is used to rollup the values of the specific category by the\n   * corresponding {@link FacetsAggregator}. It is ok to pass differnet\n   * {@link FacetsAggregator} instances for each {@link CategoryPath} - the\n   * constructor ensures that each aggregator <u>type</u> (determined by its\n   * class) is invoked only once.\n   */\n  public MultiFacetsAggregator(Map<CategoryPath,FacetsAggregator> aggregators) {\n    this.categoryAggregators = aggregators;\n    \n    // make sure that each FacetsAggregator class is invoked only once, or\n    // otherwise categories may be aggregated multiple times.\n    Map<Class<? extends FacetsAggregator>, FacetsAggregator> aggsClasses = \n        new HashMap<Class<? extends FacetsAggregator>,FacetsAggregator>();\n    for (FacetsAggregator fa : aggregators.values()) {\n      aggsClasses.put(fa.getClass(), fa);\n    }\n    this.aggregators = new ArrayList<FacetsAggregator>(aggsClasses.values());\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link MultiAssociationsFacetsAggregator} over the given\n   * aggregators. The mapping is used by\n   * {@link #rollupValues(FacetRequest, int, int[], int[], FacetArrays)} to\n   * rollup the values of the specific category by the corresponding\n   * {@link FacetsAggregator}. However, since each {@link FacetsAggregator}\n   * handles the associations of a specific type, which could cover multiple\n   * categories, the aggregation is done on the unique set of aggregators, which\n   * are identified by their class.\n   */\n  public MultiAssociationsFacetsAggregator(Map<CategoryPath,FacetsAggregator> aggregators) {\n    this.categoryAggregators = aggregators;\n    \n    // make sure that each FacetsAggregator class is invoked only once, or\n    // otherwise categories may be aggregated multiple times.\n    Map<Class<? extends FacetsAggregator>, FacetsAggregator> aggsClasses = \n        new HashMap<Class<? extends FacetsAggregator>,FacetsAggregator>();\n    for (FacetsAggregator fa : aggregators.values()) {\n      aggsClasses.put(fa.getClass(), fa);\n    }\n    this.aggregators = new ArrayList<FacetsAggregator>(aggsClasses.values());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/MultiFacetsAggregator#MultiFacetsAggregator(Map[CategoryPath,FacetsAggregator]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/MultiAssociationsFacetsAggregator#MultiAssociationsFacetsAggregator(Map[CategoryPath,FacetsAggregator]).mjava","sourceNew":"  /**\n   * Constructor.\n   * <p>\n   * The mapping is used to rollup the values of the specific category by the\n   * corresponding {@link FacetsAggregator}. It is ok to pass differnet\n   * {@link FacetsAggregator} instances for each {@link CategoryPath} - the\n   * constructor ensures that each aggregator <u>type</u> (determined by its\n   * class) is invoked only once.\n   */\n  public MultiFacetsAggregator(Map<CategoryPath,FacetsAggregator> aggregators) {\n    this.categoryAggregators = aggregators;\n    \n    // make sure that each FacetsAggregator class is invoked only once, or\n    // otherwise categories may be aggregated multiple times.\n    Map<Class<? extends FacetsAggregator>, FacetsAggregator> aggsClasses = \n        new HashMap<Class<? extends FacetsAggregator>,FacetsAggregator>();\n    for (FacetsAggregator fa : aggregators.values()) {\n      aggsClasses.put(fa.getClass(), fa);\n    }\n    this.aggregators = new ArrayList<FacetsAggregator>(aggsClasses.values());\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link MultiAssociationsFacetsAggregator} over the given\n   * aggregators. The mapping is used by\n   * {@link #rollupValues(FacetRequest, int, int[], int[], FacetArrays)} to\n   * rollup the values of the specific category by the corresponding\n   * {@link FacetsAggregator}. However, since each {@link FacetsAggregator}\n   * handles the associations of a specific type, which could cover multiple\n   * categories, the aggregation is done on the unique set of aggregators, which\n   * are identified by their class.\n   */\n  public MultiAssociationsFacetsAggregator(Map<CategoryPath,FacetsAggregator> aggregators) {\n    this.categoryAggregators = aggregators;\n    \n    // make sure that each FacetsAggregator class is invoked only once, or\n    // otherwise categories may be aggregated multiple times.\n    Map<Class<? extends FacetsAggregator>, FacetsAggregator> aggsClasses = \n        new HashMap<Class<? extends FacetsAggregator>,FacetsAggregator>();\n    for (FacetsAggregator fa : aggregators.values()) {\n      aggsClasses.put(fa.getClass(), fa);\n    }\n    this.aggregators = new ArrayList<FacetsAggregator>(aggsClasses.values());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"416910ae9ffe752ba5b6334f75d6c36e019626cc":["2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["416910ae9ffe752ba5b6334f75d6c36e019626cc"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["416910ae9ffe752ba5b6334f75d6c36e019626cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"2d37ef5db468b4f3ae89b17062b0b56b20dd2e78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"416910ae9ffe752ba5b6334f75d6c36e019626cc":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2d37ef5db468b4f3ae89b17062b0b56b20dd2e78":["416910ae9ffe752ba5b6334f75d6c36e019626cc","6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}