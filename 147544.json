{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","sourceNew":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format > FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      if (format < FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n\n      size = input.readLong();                    // read the size\n      \n      indexInterval = input.readInt();\n      skipInterval = input.readInt();\n      maxSkipLevels = input.readInt();\n      assert indexInterval > 0: \"indexInterval=\" + indexInterval + \" is negative; must be > 0\";\n      assert skipInterval > 0: \"skipInterval=\" + skipInterval + \" is negative; must be > 0\";\n    }\n  }\n\n","sourceOld":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format > FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      if (format < FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n\n      size = input.readLong();                    // read the size\n      \n      indexInterval = input.readInt();\n      skipInterval = input.readInt();\n      maxSkipLevels = input.readInt();\n      assert indexInterval > 0: \"indexInterval=\" + indexInterval + \" is negative; must be > 0\";\n      assert skipInterval > 0: \"skipInterval=\" + skipInterval + \" is negative; must be > 0\";\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","sourceNew":null,"sourceOld":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format > FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      if (format < FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n\n      size = input.readLong();                    // read the size\n      \n      indexInterval = input.readInt();\n      skipInterval = input.readInt();\n      maxSkipLevels = input.readInt();\n      assert indexInterval > 0: \"indexInterval=\" + indexInterval + \" is negative; must be > 0\";\n      assert skipInterval > 0: \"skipInterval=\" + skipInterval + \" is negative; must be > 0\";\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"]},"commit2Childs":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}