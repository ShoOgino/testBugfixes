{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveEvaluator#normalizeOutputType(Object).mjava","commits":[{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveEvaluator#normalizeOutputType(Object).mjava","pathOld":"/dev/null","sourceNew":"  protected Object normalizeOutputType(Object value) {\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof BigDecimal){\n      BigDecimal bd = (BigDecimal)value;\n      if(bd.signum() == 0 || bd.scale() <= 0 || bd.stripTrailingZeros().scale() <= 0){\n        try{\n          return bd.longValueExact();\n        }\n        catch(ArithmeticException e){\n          // value was too big for a long, so use a double which can handle scientific notation\n        }\n      }\n      \n      return bd.doubleValue();\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return value;\n      }\n      \n      // could be a long so recurse back in as a BigDecimal\n      return normalizeOutputType(new BigDecimal((Double)value));\n    }\n    else if(value instanceof Number){\n      return normalizeOutputType(new BigDecimal(((Number)value).toString()));\n    }\n    else if(value instanceof List){\n      // normalize each value in the list\n      return ((List<?>)value).stream().map(innerValue -> normalizeOutputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      // anything else can just be returned as is\n      return value;\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveEvaluator#normalizeOutputType(Object).mjava","pathOld":"/dev/null","sourceNew":"  protected Object normalizeOutputType(Object value) {\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof BigDecimal){\n      BigDecimal bd = (BigDecimal)value;\n      if(bd.signum() == 0 || bd.scale() <= 0 || bd.stripTrailingZeros().scale() <= 0){\n        try{\n          return bd.longValueExact();\n        }\n        catch(ArithmeticException e){\n          // value was too big for a long, so use a double which can handle scientific notation\n        }\n      }\n      \n      return bd.doubleValue();\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return value;\n      }\n      \n      // could be a long so recurse back in as a BigDecimal\n      return normalizeOutputType(new BigDecimal((Double)value));\n    }\n    else if(value instanceof Number){\n      return normalizeOutputType(new BigDecimal(((Number)value).toString()));\n    }\n    else if(value instanceof List){\n      // normalize each value in the list\n      return ((List<?>)value).stream().map(innerValue -> normalizeOutputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      // anything else can just be returned as is\n      return value;\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveEvaluator#normalizeOutputType(Object).mjava","pathOld":"/dev/null","sourceNew":"  protected Object normalizeOutputType(Object value) {\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof BigDecimal){\n      BigDecimal bd = (BigDecimal)value;\n      if(bd.signum() == 0 || bd.scale() <= 0 || bd.stripTrailingZeros().scale() <= 0){\n        try{\n          return bd.longValueExact();\n        }\n        catch(ArithmeticException e){\n          // value was too big for a long, so use a double which can handle scientific notation\n        }\n      }\n      \n      return bd.doubleValue();\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return value;\n      }\n      \n      // could be a long so recurse back in as a BigDecimal\n      return normalizeOutputType(new BigDecimal((Double)value));\n    }\n    else if(value instanceof Number){\n      return normalizeOutputType(new BigDecimal(((Number)value).toString()));\n    }\n    else if(value instanceof List){\n      // normalize each value in the list\n      return ((List<?>)value).stream().map(innerValue -> normalizeOutputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      // anything else can just be returned as is\n      return value;\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","date":1512439781,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveEvaluator#normalizeOutputType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveEvaluator#normalizeOutputType(Object).mjava","sourceNew":"  protected Object normalizeOutputType(Object value) {\n    if(null == value){\n      return null;\n    } else if (value instanceof VectorFunction) {\n      return value;\n    } else if(value instanceof BigDecimal){\n      BigDecimal bd = (BigDecimal)value;\n      if(bd.signum() == 0 || bd.scale() <= 0 || bd.stripTrailingZeros().scale() <= 0){\n        try{\n          return bd.longValueExact();\n        }\n        catch(ArithmeticException e){\n          // value was too big for a long, so use a double which can handle scientific notation\n        }\n      }\n      \n      return bd.doubleValue();\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return value;\n      }\n      \n      // could be a long so recurse back in as a BigDecimal\n      return normalizeOutputType(new BigDecimal((Double)value));\n    }\n    else if(value instanceof Number){\n      return normalizeOutputType(new BigDecimal(((Number)value).toString()));\n    }\n    else if(value instanceof List){\n      // normalize each value in the list\n      return ((List<?>)value).stream().map(innerValue -> normalizeOutputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      // anything else can just be returned as is\n      return value;\n    }\n\n  }\n\n","sourceOld":"  protected Object normalizeOutputType(Object value) {\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof BigDecimal){\n      BigDecimal bd = (BigDecimal)value;\n      if(bd.signum() == 0 || bd.scale() <= 0 || bd.stripTrailingZeros().scale() <= 0){\n        try{\n          return bd.longValueExact();\n        }\n        catch(ArithmeticException e){\n          // value was too big for a long, so use a double which can handle scientific notation\n        }\n      }\n      \n      return bd.doubleValue();\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return value;\n      }\n      \n      // could be a long so recurse back in as a BigDecimal\n      return normalizeOutputType(new BigDecimal((Double)value));\n    }\n    else if(value instanceof Number){\n      return normalizeOutputType(new BigDecimal(((Number)value).toString()));\n    }\n    else if(value instanceof List){\n      // normalize each value in the list\n      return ((List<?>)value).stream().map(innerValue -> normalizeOutputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      // anything else can just be returned as is\n      return value;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c342c287203eb8daa79003afd740654bc7baa7f9","date":1527528566,"type":3,"author":"Joel","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveEvaluator#normalizeOutputType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveEvaluator#normalizeOutputType(Object).mjava","sourceNew":"  protected Object normalizeOutputType(Object value) {\n    if(null == value){\n      return null;\n    } else if (value instanceof VectorFunction) {\n      return value;\n    } else if(value instanceof BigDecimal){\n      BigDecimal bd = (BigDecimal)value;\n      if(bd.signum() == 0 || bd.scale() <= 0 || bd.stripTrailingZeros().scale() <= 0){\n        try{\n          return bd.longValueExact();\n        }\n        catch(ArithmeticException e){\n          // value was too big for a long, so use a double which can handle scientific notation\n        }\n      }\n      \n      return bd.doubleValue();\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return value;\n      }\n      \n      // could be a long so recurse back in as a BigDecimal\n      return normalizeOutputType(new BigDecimal((Double)value));\n    }\n    else if(value instanceof Number){\n      return normalizeOutputType(new BigDecimal(((Number)value).toString()));\n    }\n    else if(value instanceof List){\n      // normalize each value in the list\n      return ((List<?>)value).stream().map(innerValue -> normalizeOutputType(innerValue)).collect(Collectors.toList());\n    } else if(value instanceof Tuple && value.getClass().getEnclosingClass() == null) {\n      //If its a tuple and not a inner class that has extended tuple, which is done in a number of cases so that mathematical models\n      //can be contained within a tuple.\n\n      Tuple tuple = (Tuple)value;\n      Map map = new HashMap();\n      for(Object o : tuple.fields.keySet()) {\n        Object v = tuple.fields.get(o);\n        map.put(o, normalizeOutputType(v));\n      }\n      return new Tuple(map);\n    }\n    else{\n      // anything else can just be returned as is\n      return value;\n    }\n\n  }\n\n","sourceOld":"  protected Object normalizeOutputType(Object value) {\n    if(null == value){\n      return null;\n    } else if (value instanceof VectorFunction) {\n      return value;\n    } else if(value instanceof BigDecimal){\n      BigDecimal bd = (BigDecimal)value;\n      if(bd.signum() == 0 || bd.scale() <= 0 || bd.stripTrailingZeros().scale() <= 0){\n        try{\n          return bd.longValueExact();\n        }\n        catch(ArithmeticException e){\n          // value was too big for a long, so use a double which can handle scientific notation\n        }\n      }\n      \n      return bd.doubleValue();\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return value;\n      }\n      \n      // could be a long so recurse back in as a BigDecimal\n      return normalizeOutputType(new BigDecimal((Double)value));\n    }\n    else if(value instanceof Number){\n      return normalizeOutputType(new BigDecimal(((Number)value).toString()));\n    }\n    else if(value instanceof List){\n      // normalize each value in the list\n      return ((List<?>)value).stream().map(innerValue -> normalizeOutputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      // anything else can just be returned as is\n      return value;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3eb251dab40cb8cabcea8ed646a2c060d423f18","date":1570756765,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveEvaluator#normalizeOutputType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveEvaluator#normalizeOutputType(Object).mjava","sourceNew":"  protected Object normalizeOutputType(Object value) {\n    if(null == value){\n      return null;\n    } else if (value instanceof VectorFunction) {\n      return value;\n    } else if(value instanceof BigDecimal){\n      BigDecimal bd = (BigDecimal)value;\n      return bd.doubleValue();\n    }\n    else if(value instanceof Long || value instanceof Integer) {\n      return ((Number) value).longValue();\n    }\n    else if(value instanceof Double){\n      return value;\n    }\n    else if(value instanceof Number){\n      return ((Number) value).doubleValue();\n    }\n    else if(value instanceof List){\n      // normalize each value in the list\n      return ((List<?>)value).stream().map(innerValue -> normalizeOutputType(innerValue)).collect(Collectors.toList());\n    } else if(value instanceof Tuple && value.getClass().getEnclosingClass() == null) {\n      //If its a tuple and not a inner class that has extended tuple, which is done in a number of cases so that mathematical models\n      //can be contained within a tuple.\n\n      Tuple tuple = (Tuple)value;\n      Map map = new HashMap();\n      for(Object o : tuple.fields.keySet()) {\n        Object v = tuple.fields.get(o);\n        map.put(o, normalizeOutputType(v));\n      }\n      return new Tuple(map);\n    }\n    else{\n      // anything else can just be returned as is\n      return value;\n    }\n\n  }\n\n","sourceOld":"  protected Object normalizeOutputType(Object value) {\n    if(null == value){\n      return null;\n    } else if (value instanceof VectorFunction) {\n      return value;\n    } else if(value instanceof BigDecimal){\n      BigDecimal bd = (BigDecimal)value;\n      if(bd.signum() == 0 || bd.scale() <= 0 || bd.stripTrailingZeros().scale() <= 0){\n        try{\n          return bd.longValueExact();\n        }\n        catch(ArithmeticException e){\n          // value was too big for a long, so use a double which can handle scientific notation\n        }\n      }\n      \n      return bd.doubleValue();\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return value;\n      }\n      \n      // could be a long so recurse back in as a BigDecimal\n      return normalizeOutputType(new BigDecimal((Double)value));\n    }\n    else if(value instanceof Number){\n      return normalizeOutputType(new BigDecimal(((Number)value).toString()));\n    }\n    else if(value instanceof List){\n      // normalize each value in the list\n      return ((List<?>)value).stream().map(innerValue -> normalizeOutputType(innerValue)).collect(Collectors.toList());\n    } else if(value instanceof Tuple && value.getClass().getEnclosingClass() == null) {\n      //If its a tuple and not a inner class that has extended tuple, which is done in a number of cases so that mathematical models\n      //can be contained within a tuple.\n\n      Tuple tuple = (Tuple)value;\n      Map map = new HashMap();\n      for(Object o : tuple.fields.keySet()) {\n        Object v = tuple.fields.get(o);\n        map.put(o, normalizeOutputType(v));\n      }\n      return new Tuple(map);\n    }\n    else{\n      // anything else can just be returned as is\n      return value;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveEvaluator#normalizeOutputType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveEvaluator#normalizeOutputType(Object).mjava","sourceNew":"  protected Object normalizeOutputType(Object value) {\n    if(null == value){\n      return null;\n    } else if (value instanceof VectorFunction) {\n      return value;\n    } else if(value instanceof BigDecimal){\n      BigDecimal bd = (BigDecimal)value;\n      return bd.doubleValue();\n    }\n    else if(value instanceof Long || value instanceof Integer) {\n      return ((Number) value).longValue();\n    }\n    else if(value instanceof Double){\n      return value;\n    }\n    else if(value instanceof Number){\n      return ((Number) value).doubleValue();\n    }\n    else if(value instanceof List){\n      // normalize each value in the list\n      return ((List<?>)value).stream().map(innerValue -> normalizeOutputType(innerValue)).collect(Collectors.toList());\n    } else if(value instanceof Tuple && value.getClass().getEnclosingClass() == null) {\n      //If its a tuple and not a inner class that has extended tuple, which is done in a number of cases so that mathematical models\n      //can be contained within a tuple.\n\n      Tuple tuple = (Tuple)value;\n      Map map = new HashMap();\n      for(Object o : tuple.fields.keySet()) {\n        Object v = tuple.fields.get(o);\n        map.put(o, normalizeOutputType(v));\n      }\n      return new Tuple(map);\n    }\n    else{\n      // anything else can just be returned as is\n      return value;\n    }\n\n  }\n\n","sourceOld":"  protected Object normalizeOutputType(Object value) {\n    if(null == value){\n      return null;\n    } else if (value instanceof VectorFunction) {\n      return value;\n    } else if(value instanceof BigDecimal){\n      BigDecimal bd = (BigDecimal)value;\n      if(bd.signum() == 0 || bd.scale() <= 0 || bd.stripTrailingZeros().scale() <= 0){\n        try{\n          return bd.longValueExact();\n        }\n        catch(ArithmeticException e){\n          // value was too big for a long, so use a double which can handle scientific notation\n        }\n      }\n      \n      return bd.doubleValue();\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return value;\n      }\n      \n      // could be a long so recurse back in as a BigDecimal\n      return normalizeOutputType(new BigDecimal((Double)value));\n    }\n    else if(value instanceof Number){\n      return normalizeOutputType(new BigDecimal(((Number)value).toString()));\n    }\n    else if(value instanceof List){\n      // normalize each value in the list\n      return ((List<?>)value).stream().map(innerValue -> normalizeOutputType(innerValue)).collect(Collectors.toList());\n    } else if(value instanceof Tuple && value.getClass().getEnclosingClass() == null) {\n      //If its a tuple and not a inner class that has extended tuple, which is done in a number of cases so that mathematical models\n      //can be contained within a tuple.\n\n      Tuple tuple = (Tuple)value;\n      Map map = new HashMap();\n      for(Object o : tuple.fields.keySet()) {\n        Object v = tuple.fields.get(o);\n        map.put(o, normalizeOutputType(v));\n      }\n      return new Tuple(map);\n    }\n    else{\n      // anything else can just be returned as is\n      return value;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveEvaluator#normalizeOutputType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveEvaluator#normalizeOutputType(Object).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  protected Object normalizeOutputType(Object value) {\n    if(null == value){\n      return null;\n    } else if (value instanceof VectorFunction) {\n      return value;\n    } else if(value instanceof BigDecimal){\n      BigDecimal bd = (BigDecimal)value;\n      return bd.doubleValue();\n    }\n    else if(value instanceof Long || value instanceof Integer) {\n      return ((Number) value).longValue();\n    }\n    else if(value instanceof Double){\n      return value;\n    }\n    else if(value instanceof Number){\n      return ((Number) value).doubleValue();\n    }\n    else if(value instanceof List){\n      // normalize each value in the list\n      return ((List<?>)value).stream().map(innerValue -> normalizeOutputType(innerValue)).collect(Collectors.toList());\n    } else if(value instanceof Tuple && value.getClass().getEnclosingClass() == null) {\n      //If its a tuple and not a inner class that has extended tuple, which is done in a number of cases so that mathematical models\n      //can be contained within a tuple.\n\n      @SuppressWarnings({\"rawtypes\"})\n      Tuple tuple = (Tuple)value;\n      @SuppressWarnings({\"rawtypes\"})\n      Map map = new HashMap();\n      for(Object o : tuple.fields.keySet()) {\n        Object v = tuple.fields.get(o);\n        map.put(o, normalizeOutputType(v));\n      }\n      return new Tuple(map);\n    }\n    else{\n      // anything else can just be returned as is\n      return value;\n    }\n\n  }\n\n","sourceOld":"  protected Object normalizeOutputType(Object value) {\n    if(null == value){\n      return null;\n    } else if (value instanceof VectorFunction) {\n      return value;\n    } else if(value instanceof BigDecimal){\n      BigDecimal bd = (BigDecimal)value;\n      return bd.doubleValue();\n    }\n    else if(value instanceof Long || value instanceof Integer) {\n      return ((Number) value).longValue();\n    }\n    else if(value instanceof Double){\n      return value;\n    }\n    else if(value instanceof Number){\n      return ((Number) value).doubleValue();\n    }\n    else if(value instanceof List){\n      // normalize each value in the list\n      return ((List<?>)value).stream().map(innerValue -> normalizeOutputType(innerValue)).collect(Collectors.toList());\n    } else if(value instanceof Tuple && value.getClass().getEnclosingClass() == null) {\n      //If its a tuple and not a inner class that has extended tuple, which is done in a number of cases so that mathematical models\n      //can be contained within a tuple.\n\n      Tuple tuple = (Tuple)value;\n      Map map = new HashMap();\n      for(Object o : tuple.fields.keySet()) {\n        Object v = tuple.fields.get(o);\n        map.put(o, normalizeOutputType(v));\n      }\n      return new Tuple(map);\n    }\n    else{\n      // anything else can just be returned as is\n      return value;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveEvaluator#normalizeOutputType(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveEvaluator#normalizeOutputType(Object).mjava","sourceNew":"  protected Object normalizeOutputType(Object value) {\n    if(null == value){\n      return null;\n    } else if (value instanceof VectorFunction) {\n      return value;\n    } else if(value instanceof BigDecimal){\n      BigDecimal bd = (BigDecimal)value;\n      return bd.doubleValue();\n    }\n    else if(value instanceof Long || value instanceof Integer) {\n      return ((Number) value).longValue();\n    }\n    else if(value instanceof Double){\n      return value;\n    }\n    else if(value instanceof Number){\n      return ((Number) value).doubleValue();\n    }\n    else if(value instanceof List){\n      // normalize each value in the list\n      return ((List<?>)value).stream().map(innerValue -> normalizeOutputType(innerValue)).collect(Collectors.toList());\n    } else if(value instanceof Tuple && value.getClass().getEnclosingClass() == null) {\n      //If its a tuple and not a inner class that has extended tuple, which is done in a number of cases so that mathematical models\n      //can be contained within a tuple.\n\n      Tuple tuple = (Tuple)value;\n      Tuple newTuple = new Tuple();\n      for(Object o : tuple.getFields().keySet()) {\n        Object v = tuple.get(o);\n        newTuple.put(o, normalizeOutputType(v));\n      }\n      return newTuple;\n    }\n    else{\n      // anything else can just be returned as is\n      return value;\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  protected Object normalizeOutputType(Object value) {\n    if(null == value){\n      return null;\n    } else if (value instanceof VectorFunction) {\n      return value;\n    } else if(value instanceof BigDecimal){\n      BigDecimal bd = (BigDecimal)value;\n      return bd.doubleValue();\n    }\n    else if(value instanceof Long || value instanceof Integer) {\n      return ((Number) value).longValue();\n    }\n    else if(value instanceof Double){\n      return value;\n    }\n    else if(value instanceof Number){\n      return ((Number) value).doubleValue();\n    }\n    else if(value instanceof List){\n      // normalize each value in the list\n      return ((List<?>)value).stream().map(innerValue -> normalizeOutputType(innerValue)).collect(Collectors.toList());\n    } else if(value instanceof Tuple && value.getClass().getEnclosingClass() == null) {\n      //If its a tuple and not a inner class that has extended tuple, which is done in a number of cases so that mathematical models\n      //can be contained within a tuple.\n\n      @SuppressWarnings({\"rawtypes\"})\n      Tuple tuple = (Tuple)value;\n      @SuppressWarnings({\"rawtypes\"})\n      Map map = new HashMap();\n      for(Object o : tuple.fields.keySet()) {\n        Object v = tuple.fields.get(o);\n        map.put(o, normalizeOutputType(v));\n      }\n      return new Tuple(map);\n    }\n    else{\n      // anything else can just be returned as is\n      return value;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["c3eb251dab40cb8cabcea8ed646a2c060d423f18"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3eb251dab40cb8cabcea8ed646a2c060d423f18":["c342c287203eb8daa79003afd740654bc7baa7f9"],"c342c287203eb8daa79003afd740654bc7baa7f9":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"804a8d5358fe7b7563b85ee7838714d720b89272":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["804a8d5358fe7b7563b85ee7838714d720b89272"],"b0b597c65628ca9e73913a07e81691f8229bae35":["c342c287203eb8daa79003afd740654bc7baa7f9","c3eb251dab40cb8cabcea8ed646a2c060d423f18"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["804a8d5358fe7b7563b85ee7838714d720b89272"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["c342c287203eb8daa79003afd740654bc7baa7f9"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"c3eb251dab40cb8cabcea8ed646a2c060d423f18":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","b0b597c65628ca9e73913a07e81691f8229bae35"],"c342c287203eb8daa79003afd740654bc7baa7f9":["c3eb251dab40cb8cabcea8ed646a2c060d423f18","b0b597c65628ca9e73913a07e81691f8229bae35"],"804a8d5358fe7b7563b85ee7838714d720b89272":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}