{"path":"solr/core/src/java/org/apache/solr/search/facet/HLLAgg.BaseNumericAcc#getShardValue(int).mjava","commits":[{"id":"0138536655ed6adafa2e07c09cd3c9572112922f","date":1497930179,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/HLLAgg.BaseNumericAcc#getShardValue(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/HLLAgg.NumericAcc#getShardValue(int).mjava","sourceNew":"    public Object getShardValue(int slot) throws IOException {\n      HLL hll = sets[slot];\n      if (hll == null) return NO_VALUES;\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      map.add(\"hll\", hll.toBytes());\n      // optionally use explicit values\n      return map;\n    }\n\n","sourceOld":"    public Object getShardValue(int slot) throws IOException {\n      HLL hll = sets[slot];\n      if (hll == null) return NO_VALUES;\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      map.add(\"hll\", hll.toBytes());\n      // optionally use explicit values\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/HLLAgg.BaseNumericAcc#getShardValue(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/HLLAgg.NumericAcc#getShardValue(int).mjava","sourceNew":"    public Object getShardValue(int slot) throws IOException {\n      HLL hll = sets[slot];\n      if (hll == null) return NO_VALUES;\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      map.add(\"hll\", hll.toBytes());\n      // optionally use explicit values\n      return map;\n    }\n\n","sourceOld":"    public Object getShardValue(int slot) throws IOException {\n      HLL hll = sets[slot];\n      if (hll == null) return NO_VALUES;\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      map.add(\"hll\", hll.toBytes());\n      // optionally use explicit values\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/HLLAgg.BaseNumericAcc#getShardValue(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/HLLAgg.NumericAcc#getShardValue(int).mjava","sourceNew":"    public Object getShardValue(int slot) throws IOException {\n      HLL hll = sets[slot];\n      if (hll == null) return NO_VALUES;\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      map.add(\"hll\", hll.toBytes());\n      // optionally use explicit values\n      return map;\n    }\n\n","sourceOld":"    public Object getShardValue(int slot) throws IOException {\n      HLL hll = sets[slot];\n      if (hll == null) return NO_VALUES;\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      map.add(\"hll\", hll.toBytes());\n      // optionally use explicit values\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/HLLAgg.BaseNumericAcc#getShardValue(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/HLLAgg.BaseNumericAcc#getShardValue(int).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    public Object getShardValue(int slot) throws IOException {\n      HLL hll = sets[slot];\n      if (hll == null) return NO_VALUES;\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      map.add(\"hll\", hll.toBytes());\n      // optionally use explicit values\n      return map;\n    }\n\n","sourceOld":"    public Object getShardValue(int slot) throws IOException {\n      HLL hll = sets[slot];\n      if (hll == null) return NO_VALUES;\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      map.add(\"hll\", hll.toBytes());\n      // optionally use explicit values\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0138536655ed6adafa2e07c09cd3c9572112922f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0138536655ed6adafa2e07c09cd3c9572112922f"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0138536655ed6adafa2e07c09cd3c9572112922f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"]},"commit2Childs":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0138536655ed6adafa2e07c09cd3c9572112922f","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"0138536655ed6adafa2e07c09cd3c9572112922f":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}