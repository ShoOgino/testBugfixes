{"path":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#contains(int,byte[],byte[],byte[],byte[]).mjava","commits":[{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#contains(int,byte[],byte[],byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDUtil#contains(int,byte[],byte[],byte[],byte[]).mjava","sourceNew":"  /** Returns true if N-dim rect A contains N-dim rect B */\n  public static boolean contains(int bytesPerDim,\n                                 byte[] minPackedA, byte[] maxPackedA,\n                                 byte[] minPackedB, byte[] maxPackedB) {\n    int dims = minPackedA.length / bytesPerDim;\n    for(int dim=0;dim<dims;dim++) {\n      if (compare(bytesPerDim, minPackedA, dim, minPackedB, dim) > 0) {\n        return false;\n      }\n      if (compare(bytesPerDim, maxPackedA, dim, maxPackedB, dim) < 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /** Returns true if N-dim rect A contains N-dim rect B */\n  public static boolean contains(int bytesPerDim,\n                                 byte[] minPackedA, byte[] maxPackedA,\n                                 byte[] minPackedB, byte[] maxPackedB) {\n    int dims = minPackedA.length / bytesPerDim;\n    for(int dim=0;dim<dims;dim++) {\n      if (compare(bytesPerDim, minPackedA, dim, minPackedB, dim) > 0) {\n        return false;\n      }\n      if (compare(bytesPerDim, maxPackedA, dim, maxPackedB, dim) < 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12bfdc932307442b651432f92845942f9041ace8","date":1456860728,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#contains(int,byte[],byte[],byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#contains(int,byte[],byte[],byte[],byte[]).mjava","sourceNew":"  /** Returns true if N-dim rect A contains N-dim rect B */\n  public static boolean contains(int bytesPerDim,\n                                 byte[] minPackedA, byte[] maxPackedA,\n                                 byte[] minPackedB, byte[] maxPackedB) {\n    int dims = minPackedA.length / bytesPerDim;\n    for(int dim=0;dim<dims;dim++) {\n      int offset = dim * bytesPerDim;\n      if (StringHelper.compare(bytesPerDim, minPackedA, offset, minPackedB, offset) > 0) {\n        return false;\n      }\n      if (StringHelper.compare(bytesPerDim, maxPackedA, offset, maxPackedB, offset) < 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /** Returns true if N-dim rect A contains N-dim rect B */\n  public static boolean contains(int bytesPerDim,\n                                 byte[] minPackedA, byte[] maxPackedA,\n                                 byte[] minPackedB, byte[] maxPackedB) {\n    int dims = minPackedA.length / bytesPerDim;\n    for(int dim=0;dim<dims;dim++) {\n      if (compare(bytesPerDim, minPackedA, dim, minPackedB, dim) > 0) {\n        return false;\n      }\n      if (compare(bytesPerDim, maxPackedA, dim, maxPackedB, dim) < 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb","date":1457059932,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#contains(int,byte[],byte[],byte[],byte[]).mjava","sourceNew":null,"sourceOld":"  /** Returns true if N-dim rect A contains N-dim rect B */\n  public static boolean contains(int bytesPerDim,\n                                 byte[] minPackedA, byte[] maxPackedA,\n                                 byte[] minPackedB, byte[] maxPackedB) {\n    int dims = minPackedA.length / bytesPerDim;\n    for(int dim=0;dim<dims;dim++) {\n      int offset = dim * bytesPerDim;\n      if (StringHelper.compare(bytesPerDim, minPackedA, offset, minPackedB, offset) > 0) {\n        return false;\n      }\n      if (StringHelper.compare(bytesPerDim, maxPackedA, offset, maxPackedB, offset) < 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#contains(int,byte[],byte[],byte[],byte[]).mjava","sourceNew":null,"sourceOld":"  /** Returns true if N-dim rect A contains N-dim rect B */\n  public static boolean contains(int bytesPerDim,\n                                 byte[] minPackedA, byte[] maxPackedA,\n                                 byte[] minPackedB, byte[] maxPackedB) {\n    int dims = minPackedA.length / bytesPerDim;\n    for(int dim=0;dim<dims;dim++) {\n      if (compare(bytesPerDim, minPackedA, dim, minPackedB, dim) > 0) {\n        return false;\n      }\n      if (compare(bytesPerDim, maxPackedA, dim, maxPackedB, dim) < 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12bfdc932307442b651432f92845942f9041ace8":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["770342641f7b505eaa8dccdc666158bff2419109","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"770342641f7b505eaa8dccdc666158bff2419109":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["12bfdc932307442b651432f92845942f9041ace8"]},"commit2Childs":{"12bfdc932307442b651432f92845942f9041ace8":["a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770342641f7b505eaa8dccdc666158bff2419109"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"770342641f7b505eaa8dccdc666158bff2419109":["12bfdc932307442b651432f92845942f9041ace8","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}