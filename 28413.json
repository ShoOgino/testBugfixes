{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#visitFromCached(StoredDocument,StoredFieldVisitor).mjava","commits":[{"id":"4b3d16cba9355e2e97962eb1c441bbd0b6735c15","date":1357426290,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#visitFromCached(StoredDocument,StoredFieldVisitor).mjava","pathOld":"/dev/null","sourceNew":"  /** Executes a stored field visitor against a hit from the document cache */\n  private void visitFromCached(StoredDocument document, StoredFieldVisitor visitor) throws IOException {\n    for (StorableField f : document) {\n      FieldInfo info = fieldInfos.fieldInfo(f.name());\n      switch(visitor.needsField(info)) {\n        case YES:\n          if (f.binaryValue() != null) {\n            BytesRef binaryValue = f.binaryValue();\n            byte copy[] = new byte[binaryValue.length];\n            System.arraycopy(binaryValue.bytes, binaryValue.offset, copy, 0, copy.length);\n            visitor.binaryField(info, copy);\n          } else if (f.numericValue() != null) {\n            Number numericValue = f.numericValue();\n            if (numericValue instanceof Double) {\n              visitor.doubleField(info, numericValue.doubleValue());\n            } else if (numericValue instanceof Integer) {\n              visitor.intField(info, numericValue.intValue());\n            } else if (numericValue instanceof Float) {\n              visitor.floatField(info, numericValue.floatValue());\n            } else if (numericValue instanceof Long) {\n              visitor.longField(info, numericValue.longValue());\n            } else {\n              throw new AssertionError();\n            }\n          } else {\n            visitor.stringField(info, f.stringValue());\n          }\n          break;\n        case NO:\n          break;\n        case STOP:\n          return;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#visitFromCached(StoredDocument,StoredFieldVisitor).mjava","pathOld":"/dev/null","sourceNew":"  /** Executes a stored field visitor against a hit from the document cache */\n  private void visitFromCached(StoredDocument document, StoredFieldVisitor visitor) throws IOException {\n    for (StorableField f : document) {\n      FieldInfo info = fieldInfos.fieldInfo(f.name());\n      switch(visitor.needsField(info)) {\n        case YES:\n          if (f.binaryValue() != null) {\n            BytesRef binaryValue = f.binaryValue();\n            byte copy[] = new byte[binaryValue.length];\n            System.arraycopy(binaryValue.bytes, binaryValue.offset, copy, 0, copy.length);\n            visitor.binaryField(info, copy);\n          } else if (f.numericValue() != null) {\n            Number numericValue = f.numericValue();\n            if (numericValue instanceof Double) {\n              visitor.doubleField(info, numericValue.doubleValue());\n            } else if (numericValue instanceof Integer) {\n              visitor.intField(info, numericValue.intValue());\n            } else if (numericValue instanceof Float) {\n              visitor.floatField(info, numericValue.floatValue());\n            } else if (numericValue instanceof Long) {\n              visitor.longField(info, numericValue.longValue());\n            } else {\n              throw new AssertionError();\n            }\n          } else {\n            visitor.stringField(info, f.stringValue());\n          }\n          break;\n        case NO:\n          break;\n        case STOP:\n          return;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d127639ae13222a8545b50e0ac545a6bcd2d7","date":1428704686,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#visitFromCached(StoredDocument,StoredFieldVisitor).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#visitFromCached(StoredDocument,StoredFieldVisitor).mjava","sourceNew":"  /** Executes a stored field visitor against a hit from the document cache */\n  private void visitFromCached(StoredDocument document, StoredFieldVisitor visitor) throws IOException {\n    for (StorableField f : document) {\n      FieldInfo info = fieldInfos.fieldInfo(f.name());\n      switch(visitor.needsField(info)) {\n        case YES:\n          if (f.binaryValue() != null) {\n            BytesRef binaryValue = f.binaryValue();\n            byte copy[] = new byte[binaryValue.length];\n            System.arraycopy(binaryValue.bytes, binaryValue.offset, copy, 0, copy.length);\n            visitor.binaryField(info, copy);\n          } else if (f.numericValue() != null) {\n            Number numericValue = f.numericValue();\n            if (numericValue instanceof Double) {\n              visitor.doubleField(info, numericValue.doubleValue());\n            } else if (numericValue instanceof Integer) {\n              visitor.intField(info, numericValue.intValue());\n            } else if (numericValue instanceof Float) {\n              visitor.floatField(info, numericValue.floatValue());\n            } else if (numericValue instanceof Long) {\n              visitor.longField(info, numericValue.longValue());\n            } else {\n              throw new AssertionError();\n            }\n          } else {\n            visitor.stringField(info, f.stringValue().getBytes(StandardCharsets.UTF_8));\n          }\n          break;\n        case NO:\n          break;\n        case STOP:\n          return;\n      }\n    }\n  }\n\n","sourceOld":"  /** Executes a stored field visitor against a hit from the document cache */\n  private void visitFromCached(StoredDocument document, StoredFieldVisitor visitor) throws IOException {\n    for (StorableField f : document) {\n      FieldInfo info = fieldInfos.fieldInfo(f.name());\n      switch(visitor.needsField(info)) {\n        case YES:\n          if (f.binaryValue() != null) {\n            BytesRef binaryValue = f.binaryValue();\n            byte copy[] = new byte[binaryValue.length];\n            System.arraycopy(binaryValue.bytes, binaryValue.offset, copy, 0, copy.length);\n            visitor.binaryField(info, copy);\n          } else if (f.numericValue() != null) {\n            Number numericValue = f.numericValue();\n            if (numericValue instanceof Double) {\n              visitor.doubleField(info, numericValue.doubleValue());\n            } else if (numericValue instanceof Integer) {\n              visitor.intField(info, numericValue.intValue());\n            } else if (numericValue instanceof Float) {\n              visitor.floatField(info, numericValue.floatValue());\n            } else if (numericValue instanceof Long) {\n              visitor.longField(info, numericValue.longValue());\n            } else {\n              throw new AssertionError();\n            }\n          } else {\n            visitor.stringField(info, f.stringValue());\n          }\n          break;\n        case NO:\n          break;\n        case STOP:\n          return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#visitFromCached(StoredDocument,StoredFieldVisitor).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#visitFromCached(StoredDocument,StoredFieldVisitor).mjava","sourceNew":"  /** Executes a stored field visitor against a hit from the document cache */\n  private void visitFromCached(StoredDocument document, StoredFieldVisitor visitor) throws IOException {\n    for (StorableField f : document) {\n      final FieldInfo info = fieldInfos.fieldInfo(f.name());\n      final Status needsField = visitor.needsField(info);\n      if (needsField == Status.STOP) return;\n      if (needsField == Status.NO) continue;\n      if (f.binaryValue() != null) {\n        final BytesRef binaryValue = f.binaryValue();\n        final byte copy[] = new byte[binaryValue.length];\n        System.arraycopy(binaryValue.bytes, binaryValue.offset, copy, 0, copy.length);\n        visitor.binaryField(info, copy);\n      } else if (f.numericValue() != null) {\n        final Number numericValue = f.numericValue();\n        if (numericValue instanceof Double) {\n          visitor.doubleField(info, numericValue.doubleValue());\n        } else if (numericValue instanceof Integer) {\n          visitor.intField(info, numericValue.intValue());\n        } else if (numericValue instanceof Float) {\n          visitor.floatField(info, numericValue.floatValue());\n        } else if (numericValue instanceof Long) {\n          visitor.longField(info, numericValue.longValue());\n        } else {\n          throw new AssertionError();\n        }\n      } else {\n        visitor.stringField(info, f.stringValue().getBytes(StandardCharsets.UTF_8));\n      }\n    }\n  }\n\n","sourceOld":"  /** Executes a stored field visitor against a hit from the document cache */\n  private void visitFromCached(StoredDocument document, StoredFieldVisitor visitor) throws IOException {\n    for (StorableField f : document) {\n      FieldInfo info = fieldInfos.fieldInfo(f.name());\n      switch(visitor.needsField(info)) {\n        case YES:\n          if (f.binaryValue() != null) {\n            BytesRef binaryValue = f.binaryValue();\n            byte copy[] = new byte[binaryValue.length];\n            System.arraycopy(binaryValue.bytes, binaryValue.offset, copy, 0, copy.length);\n            visitor.binaryField(info, copy);\n          } else if (f.numericValue() != null) {\n            Number numericValue = f.numericValue();\n            if (numericValue instanceof Double) {\n              visitor.doubleField(info, numericValue.doubleValue());\n            } else if (numericValue instanceof Integer) {\n              visitor.intField(info, numericValue.intValue());\n            } else if (numericValue instanceof Float) {\n              visitor.floatField(info, numericValue.floatValue());\n            } else if (numericValue instanceof Long) {\n              visitor.longField(info, numericValue.longValue());\n            } else {\n              throw new AssertionError();\n            }\n          } else {\n            visitor.stringField(info, f.stringValue().getBytes(StandardCharsets.UTF_8));\n          }\n          break;\n        case NO:\n          break;\n        case STOP:\n          return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#visitFromCached(Document,StoredFieldVisitor).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#visitFromCached(StoredDocument,StoredFieldVisitor).mjava","sourceNew":"  /** Executes a stored field visitor against a hit from the document cache */\n  private void visitFromCached(Document document, StoredFieldVisitor visitor) throws IOException {\n    for (IndexableField f : document) {\n      final FieldInfo info = fieldInfos.fieldInfo(f.name());\n      final Status needsField = visitor.needsField(info);\n      if (needsField == Status.STOP) return;\n      if (needsField == Status.NO) continue;\n      if (f.binaryValue() != null) {\n        final BytesRef binaryValue = f.binaryValue();\n        final byte copy[] = new byte[binaryValue.length];\n        System.arraycopy(binaryValue.bytes, binaryValue.offset, copy, 0, copy.length);\n        visitor.binaryField(info, copy);\n      } else if (f.numericValue() != null) {\n        final Number numericValue = f.numericValue();\n        if (numericValue instanceof Double) {\n          visitor.doubleField(info, numericValue.doubleValue());\n        } else if (numericValue instanceof Integer) {\n          visitor.intField(info, numericValue.intValue());\n        } else if (numericValue instanceof Float) {\n          visitor.floatField(info, numericValue.floatValue());\n        } else if (numericValue instanceof Long) {\n          visitor.longField(info, numericValue.longValue());\n        } else {\n          throw new AssertionError();\n        }\n      } else {\n        visitor.stringField(info, f.stringValue().getBytes(StandardCharsets.UTF_8));\n      }\n    }\n  }\n\n","sourceOld":"  /** Executes a stored field visitor against a hit from the document cache */\n  private void visitFromCached(StoredDocument document, StoredFieldVisitor visitor) throws IOException {\n    for (StorableField f : document) {\n      final FieldInfo info = fieldInfos.fieldInfo(f.name());\n      final Status needsField = visitor.needsField(info);\n      if (needsField == Status.STOP) return;\n      if (needsField == Status.NO) continue;\n      if (f.binaryValue() != null) {\n        final BytesRef binaryValue = f.binaryValue();\n        final byte copy[] = new byte[binaryValue.length];\n        System.arraycopy(binaryValue.bytes, binaryValue.offset, copy, 0, copy.length);\n        visitor.binaryField(info, copy);\n      } else if (f.numericValue() != null) {\n        final Number numericValue = f.numericValue();\n        if (numericValue instanceof Double) {\n          visitor.doubleField(info, numericValue.doubleValue());\n        } else if (numericValue instanceof Integer) {\n          visitor.intField(info, numericValue.intValue());\n        } else if (numericValue instanceof Float) {\n          visitor.floatField(info, numericValue.floatValue());\n        } else if (numericValue instanceof Long) {\n          visitor.longField(info, numericValue.longValue());\n        } else {\n          throw new AssertionError();\n        }\n      } else {\n        visitor.stringField(info, f.stringValue().getBytes(StandardCharsets.UTF_8));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"399d127639ae13222a8545b50e0ac545a6bcd2d7":["4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["399d127639ae13222a8545b50e0ac545a6bcd2d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","399d127639ae13222a8545b50e0ac545a6bcd2d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"399d127639ae13222a8545b50e0ac545a6bcd2d7":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}