{"path":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#assertPatternHits(String,int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#assertPatternHits(String,int).mjava","pathOld":"/dev/null","sourceNew":"  private void assertPatternHits(String pattern, int numHits) throws Exception {\n    Query wq = new WildcardQuery(new Term(\"field\", fillPattern(pattern)));\n    TopDocs docs = searcher.search(wq, 25);\n    assertEquals(\"Incorrect hits for pattern: \" + pattern, numHits, docs.totalHits);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#assertPatternHits(String,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#assertPatternHits(String,int).mjava","sourceNew":"  private void assertPatternHits(String pattern, int numHits) throws Exception {\n    // TODO: run with different rewrites\n    Query wq = new WildcardQuery(new Term(\"field\", fillPattern(pattern)));\n    TopDocs docs = searcher.search(wq, 25);\n    assertEquals(\"Incorrect hits for pattern: \" + pattern, numHits, docs.totalHits);\n  }\n\n","sourceOld":"  private void assertPatternHits(String pattern, int numHits) throws Exception {\n    Query wq = new WildcardQuery(new Term(\"field\", fillPattern(pattern)));\n    TopDocs docs = searcher.search(wq, 25);\n    assertEquals(\"Incorrect hits for pattern: \" + pattern, numHits, docs.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#assertPatternHits(String,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#assertPatternHits(String,int).mjava","sourceNew":"  private void assertPatternHits(String pattern, int numHits) throws Exception {\n    // TODO: run with different rewrites\n    Query wq = new WildcardQuery(new Term(\"field\", fillPattern(pattern)));\n    TopDocs docs = searcher.search(wq, 25);\n    assertEquals(\"Incorrect hits for pattern: \" + pattern, numHits, docs.totalHits);\n  }\n\n","sourceOld":"  private void assertPatternHits(String pattern, int numHits) throws Exception {\n    Query wq = new WildcardQuery(new Term(\"field\", fillPattern(pattern)));\n    TopDocs docs = searcher.search(wq, 25);\n    assertEquals(\"Incorrect hits for pattern: \" + pattern, numHits, docs.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#assertPatternHits(String,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#assertPatternHits(String,int).mjava","sourceNew":"  private void assertPatternHits(String pattern, int numHits) throws Exception {\n    // TODO: run with different rewrites\n    final String filledPattern = fillPattern(pattern);\n    if (VERBOSE) {\n      System.out.println(\"TEST: run wildcard pattern=\" + pattern + \" filled=\" + filledPattern);\n    }\n    Query wq = new WildcardQuery(new Term(\"field\", filledPattern));\n    TopDocs docs = searcher.search(wq, 25);\n    assertEquals(\"Incorrect hits for pattern: \" + pattern, numHits, docs.totalHits);\n  }\n\n","sourceOld":"  private void assertPatternHits(String pattern, int numHits) throws Exception {\n    // TODO: run with different rewrites\n    Query wq = new WildcardQuery(new Term(\"field\", fillPattern(pattern)));\n    TopDocs docs = searcher.search(wq, 25);\n    assertEquals(\"Incorrect hits for pattern: \" + pattern, numHits, docs.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcardRandom#assertPatternHits(String,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcardRandom#assertPatternHits(String,int).mjava","sourceNew":"  private void assertPatternHits(String pattern, int numHits) throws Exception {\n    // TODO: run with different rewrites\n    final String filledPattern = fillPattern(pattern);\n    if (VERBOSE) {\n      System.out.println(\"TEST: run wildcard pattern=\" + pattern + \" filled=\" + filledPattern);\n    }\n    Query wq = new WildcardQuery(new Term(\"field\", filledPattern));\n    TopDocs docs = searcher.search(wq, 25);\n    assertEquals(\"Incorrect hits for pattern: \" + pattern, numHits, docs.totalHits);\n  }\n\n","sourceOld":"  private void assertPatternHits(String pattern, int numHits) throws Exception {\n    // TODO: run with different rewrites\n    final String filledPattern = fillPattern(pattern);\n    if (VERBOSE) {\n      System.out.println(\"TEST: run wildcard pattern=\" + pattern + \" filled=\" + filledPattern);\n    }\n    Query wq = new WildcardQuery(new Term(\"field\", filledPattern));\n    TopDocs docs = searcher.search(wq, 25);\n    assertEquals(\"Incorrect hits for pattern: \" + pattern, numHits, docs.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["c084e47df29de3330311d69dabf515ceaa989512"],"c084e47df29de3330311d69dabf515ceaa989512":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","c084e47df29de3330311d69dabf515ceaa989512"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c084e47df29de3330311d69dabf515ceaa989512":["60ba444201d2570214b6fcf1d15600dc1a01f548","5f4e87790277826a2aea119328600dfb07761f32"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}