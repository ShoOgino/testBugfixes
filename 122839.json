{"path":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked39#decode(byte[],int,long[],int,int).mjava","commits":[{"id":"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f","date":1345677220,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked39#decode(byte[],int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 31) | (byte1 << 23) | (byte2 << 15) | (byte3 << 7) | (byte4 >>> 1);\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte4 & 1) << 38) | (byte5 << 30) | (byte6 << 22) | (byte7 << 14) | (byte8 << 6) | (byte9 >>> 2);\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte9 & 3) << 37) | (byte10 << 29) | (byte11 << 21) | (byte12 << 13) | (byte13 << 5) | (byte14 >>> 3);\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte14 & 7) << 36) | (byte15 << 28) | (byte16 << 20) | (byte17 << 12) | (byte18 << 4) | (byte19 >>> 4);\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 15) << 35) | (byte20 << 27) | (byte21 << 19) | (byte22 << 11) | (byte23 << 3) | (byte24 >>> 5);\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte24 & 31) << 34) | (byte25 << 26) | (byte26 << 18) | (byte27 << 10) | (byte28 << 2) | (byte29 >>> 6);\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte29 & 63) << 33) | (byte30 << 25) | (byte31 << 17) | (byte32 << 9) | (byte33 << 1) | (byte34 >>> 7);\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte34 & 127) << 32) | (byte35 << 24) | (byte36 << 16) | (byte37 << 8) | byte38;\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte39 << 31) | (byte40 << 23) | (byte41 << 15) | (byte42 << 7) | (byte43 >>> 1);\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte43 & 1) << 38) | (byte44 << 30) | (byte45 << 22) | (byte46 << 14) | (byte47 << 6) | (byte48 >>> 2);\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte48 & 3) << 37) | (byte49 << 29) | (byte50 << 21) | (byte51 << 13) | (byte52 << 5) | (byte53 >>> 3);\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        final long byte56 = blocks[blocksOffset++] & 0xFF;\n        final long byte57 = blocks[blocksOffset++] & 0xFF;\n        final long byte58 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte53 & 7) << 36) | (byte54 << 28) | (byte55 << 20) | (byte56 << 12) | (byte57 << 4) | (byte58 >>> 4);\n        final long byte59 = blocks[blocksOffset++] & 0xFF;\n        final long byte60 = blocks[blocksOffset++] & 0xFF;\n        final long byte61 = blocks[blocksOffset++] & 0xFF;\n        final long byte62 = blocks[blocksOffset++] & 0xFF;\n        final long byte63 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte58 & 15) << 35) | (byte59 << 27) | (byte60 << 19) | (byte61 << 11) | (byte62 << 3) | (byte63 >>> 5);\n        final long byte64 = blocks[blocksOffset++] & 0xFF;\n        final long byte65 = blocks[blocksOffset++] & 0xFF;\n        final long byte66 = blocks[blocksOffset++] & 0xFF;\n        final long byte67 = blocks[blocksOffset++] & 0xFF;\n        final long byte68 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte63 & 31) << 34) | (byte64 << 26) | (byte65 << 18) | (byte66 << 10) | (byte67 << 2) | (byte68 >>> 6);\n        final long byte69 = blocks[blocksOffset++] & 0xFF;\n        final long byte70 = blocks[blocksOffset++] & 0xFF;\n        final long byte71 = blocks[blocksOffset++] & 0xFF;\n        final long byte72 = blocks[blocksOffset++] & 0xFF;\n        final long byte73 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte68 & 63) << 33) | (byte69 << 25) | (byte70 << 17) | (byte71 << 9) | (byte72 << 1) | (byte73 >>> 7);\n        final long byte74 = blocks[blocksOffset++] & 0xFF;\n        final long byte75 = blocks[blocksOffset++] & 0xFF;\n        final long byte76 = blocks[blocksOffset++] & 0xFF;\n        final long byte77 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte73 & 127) << 32) | (byte74 << 24) | (byte75 << 16) | (byte76 << 8) | byte77;\n        final long byte78 = blocks[blocksOffset++] & 0xFF;\n        final long byte79 = blocks[blocksOffset++] & 0xFF;\n        final long byte80 = blocks[blocksOffset++] & 0xFF;\n        final long byte81 = blocks[blocksOffset++] & 0xFF;\n        final long byte82 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte78 << 31) | (byte79 << 23) | (byte80 << 15) | (byte81 << 7) | (byte82 >>> 1);\n        final long byte83 = blocks[blocksOffset++] & 0xFF;\n        final long byte84 = blocks[blocksOffset++] & 0xFF;\n        final long byte85 = blocks[blocksOffset++] & 0xFF;\n        final long byte86 = blocks[blocksOffset++] & 0xFF;\n        final long byte87 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte82 & 1) << 38) | (byte83 << 30) | (byte84 << 22) | (byte85 << 14) | (byte86 << 6) | (byte87 >>> 2);\n        final long byte88 = blocks[blocksOffset++] & 0xFF;\n        final long byte89 = blocks[blocksOffset++] & 0xFF;\n        final long byte90 = blocks[blocksOffset++] & 0xFF;\n        final long byte91 = blocks[blocksOffset++] & 0xFF;\n        final long byte92 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte87 & 3) << 37) | (byte88 << 29) | (byte89 << 21) | (byte90 << 13) | (byte91 << 5) | (byte92 >>> 3);\n        final long byte93 = blocks[blocksOffset++] & 0xFF;\n        final long byte94 = blocks[blocksOffset++] & 0xFF;\n        final long byte95 = blocks[blocksOffset++] & 0xFF;\n        final long byte96 = blocks[blocksOffset++] & 0xFF;\n        final long byte97 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte92 & 7) << 36) | (byte93 << 28) | (byte94 << 20) | (byte95 << 12) | (byte96 << 4) | (byte97 >>> 4);\n        final long byte98 = blocks[blocksOffset++] & 0xFF;\n        final long byte99 = blocks[blocksOffset++] & 0xFF;\n        final long byte100 = blocks[blocksOffset++] & 0xFF;\n        final long byte101 = blocks[blocksOffset++] & 0xFF;\n        final long byte102 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte97 & 15) << 35) | (byte98 << 27) | (byte99 << 19) | (byte100 << 11) | (byte101 << 3) | (byte102 >>> 5);\n        final long byte103 = blocks[blocksOffset++] & 0xFF;\n        final long byte104 = blocks[blocksOffset++] & 0xFF;\n        final long byte105 = blocks[blocksOffset++] & 0xFF;\n        final long byte106 = blocks[blocksOffset++] & 0xFF;\n        final long byte107 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte102 & 31) << 34) | (byte103 << 26) | (byte104 << 18) | (byte105 << 10) | (byte106 << 2) | (byte107 >>> 6);\n        final long byte108 = blocks[blocksOffset++] & 0xFF;\n        final long byte109 = blocks[blocksOffset++] & 0xFF;\n        final long byte110 = blocks[blocksOffset++] & 0xFF;\n        final long byte111 = blocks[blocksOffset++] & 0xFF;\n        final long byte112 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte107 & 63) << 33) | (byte108 << 25) | (byte109 << 17) | (byte110 << 9) | (byte111 << 1) | (byte112 >>> 7);\n        final long byte113 = blocks[blocksOffset++] & 0xFF;\n        final long byte114 = blocks[blocksOffset++] & 0xFF;\n        final long byte115 = blocks[blocksOffset++] & 0xFF;\n        final long byte116 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte112 & 127) << 32) | (byte113 << 24) | (byte114 << 16) | (byte115 << 8) | byte116;\n        final long byte117 = blocks[blocksOffset++] & 0xFF;\n        final long byte118 = blocks[blocksOffset++] & 0xFF;\n        final long byte119 = blocks[blocksOffset++] & 0xFF;\n        final long byte120 = blocks[blocksOffset++] & 0xFF;\n        final long byte121 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte117 << 31) | (byte118 << 23) | (byte119 << 15) | (byte120 << 7) | (byte121 >>> 1);\n        final long byte122 = blocks[blocksOffset++] & 0xFF;\n        final long byte123 = blocks[blocksOffset++] & 0xFF;\n        final long byte124 = blocks[blocksOffset++] & 0xFF;\n        final long byte125 = blocks[blocksOffset++] & 0xFF;\n        final long byte126 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte121 & 1) << 38) | (byte122 << 30) | (byte123 << 22) | (byte124 << 14) | (byte125 << 6) | (byte126 >>> 2);\n        final long byte127 = blocks[blocksOffset++] & 0xFF;\n        final long byte128 = blocks[blocksOffset++] & 0xFF;\n        final long byte129 = blocks[blocksOffset++] & 0xFF;\n        final long byte130 = blocks[blocksOffset++] & 0xFF;\n        final long byte131 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte126 & 3) << 37) | (byte127 << 29) | (byte128 << 21) | (byte129 << 13) | (byte130 << 5) | (byte131 >>> 3);\n        final long byte132 = blocks[blocksOffset++] & 0xFF;\n        final long byte133 = blocks[blocksOffset++] & 0xFF;\n        final long byte134 = blocks[blocksOffset++] & 0xFF;\n        final long byte135 = blocks[blocksOffset++] & 0xFF;\n        final long byte136 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte131 & 7) << 36) | (byte132 << 28) | (byte133 << 20) | (byte134 << 12) | (byte135 << 4) | (byte136 >>> 4);\n        final long byte137 = blocks[blocksOffset++] & 0xFF;\n        final long byte138 = blocks[blocksOffset++] & 0xFF;\n        final long byte139 = blocks[blocksOffset++] & 0xFF;\n        final long byte140 = blocks[blocksOffset++] & 0xFF;\n        final long byte141 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte136 & 15) << 35) | (byte137 << 27) | (byte138 << 19) | (byte139 << 11) | (byte140 << 3) | (byte141 >>> 5);\n        final long byte142 = blocks[blocksOffset++] & 0xFF;\n        final long byte143 = blocks[blocksOffset++] & 0xFF;\n        final long byte144 = blocks[blocksOffset++] & 0xFF;\n        final long byte145 = blocks[blocksOffset++] & 0xFF;\n        final long byte146 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte141 & 31) << 34) | (byte142 << 26) | (byte143 << 18) | (byte144 << 10) | (byte145 << 2) | (byte146 >>> 6);\n        final long byte147 = blocks[blocksOffset++] & 0xFF;\n        final long byte148 = blocks[blocksOffset++] & 0xFF;\n        final long byte149 = blocks[blocksOffset++] & 0xFF;\n        final long byte150 = blocks[blocksOffset++] & 0xFF;\n        final long byte151 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte146 & 63) << 33) | (byte147 << 25) | (byte148 << 17) | (byte149 << 9) | (byte150 << 1) | (byte151 >>> 7);\n        final long byte152 = blocks[blocksOffset++] & 0xFF;\n        final long byte153 = blocks[blocksOffset++] & 0xFF;\n        final long byte154 = blocks[blocksOffset++] & 0xFF;\n        final long byte155 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte151 & 127) << 32) | (byte152 << 24) | (byte153 << 16) | (byte154 << 8) | byte155;\n        final long byte156 = blocks[blocksOffset++] & 0xFF;\n        final long byte157 = blocks[blocksOffset++] & 0xFF;\n        final long byte158 = blocks[blocksOffset++] & 0xFF;\n        final long byte159 = blocks[blocksOffset++] & 0xFF;\n        final long byte160 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte156 << 31) | (byte157 << 23) | (byte158 << 15) | (byte159 << 7) | (byte160 >>> 1);\n        final long byte161 = blocks[blocksOffset++] & 0xFF;\n        final long byte162 = blocks[blocksOffset++] & 0xFF;\n        final long byte163 = blocks[blocksOffset++] & 0xFF;\n        final long byte164 = blocks[blocksOffset++] & 0xFF;\n        final long byte165 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte160 & 1) << 38) | (byte161 << 30) | (byte162 << 22) | (byte163 << 14) | (byte164 << 6) | (byte165 >>> 2);\n        final long byte166 = blocks[blocksOffset++] & 0xFF;\n        final long byte167 = blocks[blocksOffset++] & 0xFF;\n        final long byte168 = blocks[blocksOffset++] & 0xFF;\n        final long byte169 = blocks[blocksOffset++] & 0xFF;\n        final long byte170 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte165 & 3) << 37) | (byte166 << 29) | (byte167 << 21) | (byte168 << 13) | (byte169 << 5) | (byte170 >>> 3);\n        final long byte171 = blocks[blocksOffset++] & 0xFF;\n        final long byte172 = blocks[blocksOffset++] & 0xFF;\n        final long byte173 = blocks[blocksOffset++] & 0xFF;\n        final long byte174 = blocks[blocksOffset++] & 0xFF;\n        final long byte175 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte170 & 7) << 36) | (byte171 << 28) | (byte172 << 20) | (byte173 << 12) | (byte174 << 4) | (byte175 >>> 4);\n        final long byte176 = blocks[blocksOffset++] & 0xFF;\n        final long byte177 = blocks[blocksOffset++] & 0xFF;\n        final long byte178 = blocks[blocksOffset++] & 0xFF;\n        final long byte179 = blocks[blocksOffset++] & 0xFF;\n        final long byte180 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte175 & 15) << 35) | (byte176 << 27) | (byte177 << 19) | (byte178 << 11) | (byte179 << 3) | (byte180 >>> 5);\n        final long byte181 = blocks[blocksOffset++] & 0xFF;\n        final long byte182 = blocks[blocksOffset++] & 0xFF;\n        final long byte183 = blocks[blocksOffset++] & 0xFF;\n        final long byte184 = blocks[blocksOffset++] & 0xFF;\n        final long byte185 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte180 & 31) << 34) | (byte181 << 26) | (byte182 << 18) | (byte183 << 10) | (byte184 << 2) | (byte185 >>> 6);\n        final long byte186 = blocks[blocksOffset++] & 0xFF;\n        final long byte187 = blocks[blocksOffset++] & 0xFF;\n        final long byte188 = blocks[blocksOffset++] & 0xFF;\n        final long byte189 = blocks[blocksOffset++] & 0xFF;\n        final long byte190 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte185 & 63) << 33) | (byte186 << 25) | (byte187 << 17) | (byte188 << 9) | (byte189 << 1) | (byte190 >>> 7);\n        final long byte191 = blocks[blocksOffset++] & 0xFF;\n        final long byte192 = blocks[blocksOffset++] & 0xFF;\n        final long byte193 = blocks[blocksOffset++] & 0xFF;\n        final long byte194 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte190 & 127) << 32) | (byte191 << 24) | (byte192 << 16) | (byte193 << 8) | byte194;\n        final long byte195 = blocks[blocksOffset++] & 0xFF;\n        final long byte196 = blocks[blocksOffset++] & 0xFF;\n        final long byte197 = blocks[blocksOffset++] & 0xFF;\n        final long byte198 = blocks[blocksOffset++] & 0xFF;\n        final long byte199 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte195 << 31) | (byte196 << 23) | (byte197 << 15) | (byte198 << 7) | (byte199 >>> 1);\n        final long byte200 = blocks[blocksOffset++] & 0xFF;\n        final long byte201 = blocks[blocksOffset++] & 0xFF;\n        final long byte202 = blocks[blocksOffset++] & 0xFF;\n        final long byte203 = blocks[blocksOffset++] & 0xFF;\n        final long byte204 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte199 & 1) << 38) | (byte200 << 30) | (byte201 << 22) | (byte202 << 14) | (byte203 << 6) | (byte204 >>> 2);\n        final long byte205 = blocks[blocksOffset++] & 0xFF;\n        final long byte206 = blocks[blocksOffset++] & 0xFF;\n        final long byte207 = blocks[blocksOffset++] & 0xFF;\n        final long byte208 = blocks[blocksOffset++] & 0xFF;\n        final long byte209 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte204 & 3) << 37) | (byte205 << 29) | (byte206 << 21) | (byte207 << 13) | (byte208 << 5) | (byte209 >>> 3);\n        final long byte210 = blocks[blocksOffset++] & 0xFF;\n        final long byte211 = blocks[blocksOffset++] & 0xFF;\n        final long byte212 = blocks[blocksOffset++] & 0xFF;\n        final long byte213 = blocks[blocksOffset++] & 0xFF;\n        final long byte214 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte209 & 7) << 36) | (byte210 << 28) | (byte211 << 20) | (byte212 << 12) | (byte213 << 4) | (byte214 >>> 4);\n        final long byte215 = blocks[blocksOffset++] & 0xFF;\n        final long byte216 = blocks[blocksOffset++] & 0xFF;\n        final long byte217 = blocks[blocksOffset++] & 0xFF;\n        final long byte218 = blocks[blocksOffset++] & 0xFF;\n        final long byte219 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte214 & 15) << 35) | (byte215 << 27) | (byte216 << 19) | (byte217 << 11) | (byte218 << 3) | (byte219 >>> 5);\n        final long byte220 = blocks[blocksOffset++] & 0xFF;\n        final long byte221 = blocks[blocksOffset++] & 0xFF;\n        final long byte222 = blocks[blocksOffset++] & 0xFF;\n        final long byte223 = blocks[blocksOffset++] & 0xFF;\n        final long byte224 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte219 & 31) << 34) | (byte220 << 26) | (byte221 << 18) | (byte222 << 10) | (byte223 << 2) | (byte224 >>> 6);\n        final long byte225 = blocks[blocksOffset++] & 0xFF;\n        final long byte226 = blocks[blocksOffset++] & 0xFF;\n        final long byte227 = blocks[blocksOffset++] & 0xFF;\n        final long byte228 = blocks[blocksOffset++] & 0xFF;\n        final long byte229 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte224 & 63) << 33) | (byte225 << 25) | (byte226 << 17) | (byte227 << 9) | (byte228 << 1) | (byte229 >>> 7);\n        final long byte230 = blocks[blocksOffset++] & 0xFF;\n        final long byte231 = blocks[blocksOffset++] & 0xFF;\n        final long byte232 = blocks[blocksOffset++] & 0xFF;\n        final long byte233 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte229 & 127) << 32) | (byte230 << 24) | (byte231 << 16) | (byte232 << 8) | byte233;\n        final long byte234 = blocks[blocksOffset++] & 0xFF;\n        final long byte235 = blocks[blocksOffset++] & 0xFF;\n        final long byte236 = blocks[blocksOffset++] & 0xFF;\n        final long byte237 = blocks[blocksOffset++] & 0xFF;\n        final long byte238 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte234 << 31) | (byte235 << 23) | (byte236 << 15) | (byte237 << 7) | (byte238 >>> 1);\n        final long byte239 = blocks[blocksOffset++] & 0xFF;\n        final long byte240 = blocks[blocksOffset++] & 0xFF;\n        final long byte241 = blocks[blocksOffset++] & 0xFF;\n        final long byte242 = blocks[blocksOffset++] & 0xFF;\n        final long byte243 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte238 & 1) << 38) | (byte239 << 30) | (byte240 << 22) | (byte241 << 14) | (byte242 << 6) | (byte243 >>> 2);\n        final long byte244 = blocks[blocksOffset++] & 0xFF;\n        final long byte245 = blocks[blocksOffset++] & 0xFF;\n        final long byte246 = blocks[blocksOffset++] & 0xFF;\n        final long byte247 = blocks[blocksOffset++] & 0xFF;\n        final long byte248 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte243 & 3) << 37) | (byte244 << 29) | (byte245 << 21) | (byte246 << 13) | (byte247 << 5) | (byte248 >>> 3);\n        final long byte249 = blocks[blocksOffset++] & 0xFF;\n        final long byte250 = blocks[blocksOffset++] & 0xFF;\n        final long byte251 = blocks[blocksOffset++] & 0xFF;\n        final long byte252 = blocks[blocksOffset++] & 0xFF;\n        final long byte253 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte248 & 7) << 36) | (byte249 << 28) | (byte250 << 20) | (byte251 << 12) | (byte252 << 4) | (byte253 >>> 4);\n        final long byte254 = blocks[blocksOffset++] & 0xFF;\n        final long byte255 = blocks[blocksOffset++] & 0xFF;\n        final long byte256 = blocks[blocksOffset++] & 0xFF;\n        final long byte257 = blocks[blocksOffset++] & 0xFF;\n        final long byte258 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte253 & 15) << 35) | (byte254 << 27) | (byte255 << 19) | (byte256 << 11) | (byte257 << 3) | (byte258 >>> 5);\n        final long byte259 = blocks[blocksOffset++] & 0xFF;\n        final long byte260 = blocks[blocksOffset++] & 0xFF;\n        final long byte261 = blocks[blocksOffset++] & 0xFF;\n        final long byte262 = blocks[blocksOffset++] & 0xFF;\n        final long byte263 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte258 & 31) << 34) | (byte259 << 26) | (byte260 << 18) | (byte261 << 10) | (byte262 << 2) | (byte263 >>> 6);\n        final long byte264 = blocks[blocksOffset++] & 0xFF;\n        final long byte265 = blocks[blocksOffset++] & 0xFF;\n        final long byte266 = blocks[blocksOffset++] & 0xFF;\n        final long byte267 = blocks[blocksOffset++] & 0xFF;\n        final long byte268 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte263 & 63) << 33) | (byte264 << 25) | (byte265 << 17) | (byte266 << 9) | (byte267 << 1) | (byte268 >>> 7);\n        final long byte269 = blocks[blocksOffset++] & 0xFF;\n        final long byte270 = blocks[blocksOffset++] & 0xFF;\n        final long byte271 = blocks[blocksOffset++] & 0xFF;\n        final long byte272 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte268 & 127) << 32) | (byte269 << 24) | (byte270 << 16) | (byte271 << 8) | byte272;\n        final long byte273 = blocks[blocksOffset++] & 0xFF;\n        final long byte274 = blocks[blocksOffset++] & 0xFF;\n        final long byte275 = blocks[blocksOffset++] & 0xFF;\n        final long byte276 = blocks[blocksOffset++] & 0xFF;\n        final long byte277 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte273 << 31) | (byte274 << 23) | (byte275 << 15) | (byte276 << 7) | (byte277 >>> 1);\n        final long byte278 = blocks[blocksOffset++] & 0xFF;\n        final long byte279 = blocks[blocksOffset++] & 0xFF;\n        final long byte280 = blocks[blocksOffset++] & 0xFF;\n        final long byte281 = blocks[blocksOffset++] & 0xFF;\n        final long byte282 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte277 & 1) << 38) | (byte278 << 30) | (byte279 << 22) | (byte280 << 14) | (byte281 << 6) | (byte282 >>> 2);\n        final long byte283 = blocks[blocksOffset++] & 0xFF;\n        final long byte284 = blocks[blocksOffset++] & 0xFF;\n        final long byte285 = blocks[blocksOffset++] & 0xFF;\n        final long byte286 = blocks[blocksOffset++] & 0xFF;\n        final long byte287 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte282 & 3) << 37) | (byte283 << 29) | (byte284 << 21) | (byte285 << 13) | (byte286 << 5) | (byte287 >>> 3);\n        final long byte288 = blocks[blocksOffset++] & 0xFF;\n        final long byte289 = blocks[blocksOffset++] & 0xFF;\n        final long byte290 = blocks[blocksOffset++] & 0xFF;\n        final long byte291 = blocks[blocksOffset++] & 0xFF;\n        final long byte292 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte287 & 7) << 36) | (byte288 << 28) | (byte289 << 20) | (byte290 << 12) | (byte291 << 4) | (byte292 >>> 4);\n        final long byte293 = blocks[blocksOffset++] & 0xFF;\n        final long byte294 = blocks[blocksOffset++] & 0xFF;\n        final long byte295 = blocks[blocksOffset++] & 0xFF;\n        final long byte296 = blocks[blocksOffset++] & 0xFF;\n        final long byte297 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte292 & 15) << 35) | (byte293 << 27) | (byte294 << 19) | (byte295 << 11) | (byte296 << 3) | (byte297 >>> 5);\n        final long byte298 = blocks[blocksOffset++] & 0xFF;\n        final long byte299 = blocks[blocksOffset++] & 0xFF;\n        final long byte300 = blocks[blocksOffset++] & 0xFF;\n        final long byte301 = blocks[blocksOffset++] & 0xFF;\n        final long byte302 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte297 & 31) << 34) | (byte298 << 26) | (byte299 << 18) | (byte300 << 10) | (byte301 << 2) | (byte302 >>> 6);\n        final long byte303 = blocks[blocksOffset++] & 0xFF;\n        final long byte304 = blocks[blocksOffset++] & 0xFF;\n        final long byte305 = blocks[blocksOffset++] & 0xFF;\n        final long byte306 = blocks[blocksOffset++] & 0xFF;\n        final long byte307 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte302 & 63) << 33) | (byte303 << 25) | (byte304 << 17) | (byte305 << 9) | (byte306 << 1) | (byte307 >>> 7);\n        final long byte308 = blocks[blocksOffset++] & 0xFF;\n        final long byte309 = blocks[blocksOffset++] & 0xFF;\n        final long byte310 = blocks[blocksOffset++] & 0xFF;\n        final long byte311 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte307 & 127) << 32) | (byte308 << 24) | (byte309 << 16) | (byte310 << 8) | byte311;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353f5909b00345d98d079a7db9a1bbe7485b1ea6","date":1345745476,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked39#decode(byte[],int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked39#decode(byte[],int,long[],int,int).mjava","sourceNew":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 31) | (byte1 << 23) | (byte2 << 15) | (byte3 << 7) | (byte4 >>> 1);\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte4 & 1) << 38) | (byte5 << 30) | (byte6 << 22) | (byte7 << 14) | (byte8 << 6) | (byte9 >>> 2);\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte9 & 3) << 37) | (byte10 << 29) | (byte11 << 21) | (byte12 << 13) | (byte13 << 5) | (byte14 >>> 3);\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte14 & 7) << 36) | (byte15 << 28) | (byte16 << 20) | (byte17 << 12) | (byte18 << 4) | (byte19 >>> 4);\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 15) << 35) | (byte20 << 27) | (byte21 << 19) | (byte22 << 11) | (byte23 << 3) | (byte24 >>> 5);\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte24 & 31) << 34) | (byte25 << 26) | (byte26 << 18) | (byte27 << 10) | (byte28 << 2) | (byte29 >>> 6);\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte29 & 63) << 33) | (byte30 << 25) | (byte31 << 17) | (byte32 << 9) | (byte33 << 1) | (byte34 >>> 7);\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte34 & 127) << 32) | (byte35 << 24) | (byte36 << 16) | (byte37 << 8) | byte38;\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte39 << 31) | (byte40 << 23) | (byte41 << 15) | (byte42 << 7) | (byte43 >>> 1);\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte43 & 1) << 38) | (byte44 << 30) | (byte45 << 22) | (byte46 << 14) | (byte47 << 6) | (byte48 >>> 2);\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte48 & 3) << 37) | (byte49 << 29) | (byte50 << 21) | (byte51 << 13) | (byte52 << 5) | (byte53 >>> 3);\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        final long byte56 = blocks[blocksOffset++] & 0xFF;\n        final long byte57 = blocks[blocksOffset++] & 0xFF;\n        final long byte58 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte53 & 7) << 36) | (byte54 << 28) | (byte55 << 20) | (byte56 << 12) | (byte57 << 4) | (byte58 >>> 4);\n        final long byte59 = blocks[blocksOffset++] & 0xFF;\n        final long byte60 = blocks[blocksOffset++] & 0xFF;\n        final long byte61 = blocks[blocksOffset++] & 0xFF;\n        final long byte62 = blocks[blocksOffset++] & 0xFF;\n        final long byte63 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte58 & 15) << 35) | (byte59 << 27) | (byte60 << 19) | (byte61 << 11) | (byte62 << 3) | (byte63 >>> 5);\n        final long byte64 = blocks[blocksOffset++] & 0xFF;\n        final long byte65 = blocks[blocksOffset++] & 0xFF;\n        final long byte66 = blocks[blocksOffset++] & 0xFF;\n        final long byte67 = blocks[blocksOffset++] & 0xFF;\n        final long byte68 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte63 & 31) << 34) | (byte64 << 26) | (byte65 << 18) | (byte66 << 10) | (byte67 << 2) | (byte68 >>> 6);\n        final long byte69 = blocks[blocksOffset++] & 0xFF;\n        final long byte70 = blocks[blocksOffset++] & 0xFF;\n        final long byte71 = blocks[blocksOffset++] & 0xFF;\n        final long byte72 = blocks[blocksOffset++] & 0xFF;\n        final long byte73 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte68 & 63) << 33) | (byte69 << 25) | (byte70 << 17) | (byte71 << 9) | (byte72 << 1) | (byte73 >>> 7);\n        final long byte74 = blocks[blocksOffset++] & 0xFF;\n        final long byte75 = blocks[blocksOffset++] & 0xFF;\n        final long byte76 = blocks[blocksOffset++] & 0xFF;\n        final long byte77 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte73 & 127) << 32) | (byte74 << 24) | (byte75 << 16) | (byte76 << 8) | byte77;\n        final long byte78 = blocks[blocksOffset++] & 0xFF;\n        final long byte79 = blocks[blocksOffset++] & 0xFF;\n        final long byte80 = blocks[blocksOffset++] & 0xFF;\n        final long byte81 = blocks[blocksOffset++] & 0xFF;\n        final long byte82 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte78 << 31) | (byte79 << 23) | (byte80 << 15) | (byte81 << 7) | (byte82 >>> 1);\n        final long byte83 = blocks[blocksOffset++] & 0xFF;\n        final long byte84 = blocks[blocksOffset++] & 0xFF;\n        final long byte85 = blocks[blocksOffset++] & 0xFF;\n        final long byte86 = blocks[blocksOffset++] & 0xFF;\n        final long byte87 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte82 & 1) << 38) | (byte83 << 30) | (byte84 << 22) | (byte85 << 14) | (byte86 << 6) | (byte87 >>> 2);\n        final long byte88 = blocks[blocksOffset++] & 0xFF;\n        final long byte89 = blocks[blocksOffset++] & 0xFF;\n        final long byte90 = blocks[blocksOffset++] & 0xFF;\n        final long byte91 = blocks[blocksOffset++] & 0xFF;\n        final long byte92 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte87 & 3) << 37) | (byte88 << 29) | (byte89 << 21) | (byte90 << 13) | (byte91 << 5) | (byte92 >>> 3);\n        final long byte93 = blocks[blocksOffset++] & 0xFF;\n        final long byte94 = blocks[blocksOffset++] & 0xFF;\n        final long byte95 = blocks[blocksOffset++] & 0xFF;\n        final long byte96 = blocks[blocksOffset++] & 0xFF;\n        final long byte97 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte92 & 7) << 36) | (byte93 << 28) | (byte94 << 20) | (byte95 << 12) | (byte96 << 4) | (byte97 >>> 4);\n        final long byte98 = blocks[blocksOffset++] & 0xFF;\n        final long byte99 = blocks[blocksOffset++] & 0xFF;\n        final long byte100 = blocks[blocksOffset++] & 0xFF;\n        final long byte101 = blocks[blocksOffset++] & 0xFF;\n        final long byte102 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte97 & 15) << 35) | (byte98 << 27) | (byte99 << 19) | (byte100 << 11) | (byte101 << 3) | (byte102 >>> 5);\n        final long byte103 = blocks[blocksOffset++] & 0xFF;\n        final long byte104 = blocks[blocksOffset++] & 0xFF;\n        final long byte105 = blocks[blocksOffset++] & 0xFF;\n        final long byte106 = blocks[blocksOffset++] & 0xFF;\n        final long byte107 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte102 & 31) << 34) | (byte103 << 26) | (byte104 << 18) | (byte105 << 10) | (byte106 << 2) | (byte107 >>> 6);\n        final long byte108 = blocks[blocksOffset++] & 0xFF;\n        final long byte109 = blocks[blocksOffset++] & 0xFF;\n        final long byte110 = blocks[blocksOffset++] & 0xFF;\n        final long byte111 = blocks[blocksOffset++] & 0xFF;\n        final long byte112 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte107 & 63) << 33) | (byte108 << 25) | (byte109 << 17) | (byte110 << 9) | (byte111 << 1) | (byte112 >>> 7);\n        final long byte113 = blocks[blocksOffset++] & 0xFF;\n        final long byte114 = blocks[blocksOffset++] & 0xFF;\n        final long byte115 = blocks[blocksOffset++] & 0xFF;\n        final long byte116 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte112 & 127) << 32) | (byte113 << 24) | (byte114 << 16) | (byte115 << 8) | byte116;\n        final long byte117 = blocks[blocksOffset++] & 0xFF;\n        final long byte118 = blocks[blocksOffset++] & 0xFF;\n        final long byte119 = blocks[blocksOffset++] & 0xFF;\n        final long byte120 = blocks[blocksOffset++] & 0xFF;\n        final long byte121 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte117 << 31) | (byte118 << 23) | (byte119 << 15) | (byte120 << 7) | (byte121 >>> 1);\n        final long byte122 = blocks[blocksOffset++] & 0xFF;\n        final long byte123 = blocks[blocksOffset++] & 0xFF;\n        final long byte124 = blocks[blocksOffset++] & 0xFF;\n        final long byte125 = blocks[blocksOffset++] & 0xFF;\n        final long byte126 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte121 & 1) << 38) | (byte122 << 30) | (byte123 << 22) | (byte124 << 14) | (byte125 << 6) | (byte126 >>> 2);\n        final long byte127 = blocks[blocksOffset++] & 0xFF;\n        final long byte128 = blocks[blocksOffset++] & 0xFF;\n        final long byte129 = blocks[blocksOffset++] & 0xFF;\n        final long byte130 = blocks[blocksOffset++] & 0xFF;\n        final long byte131 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte126 & 3) << 37) | (byte127 << 29) | (byte128 << 21) | (byte129 << 13) | (byte130 << 5) | (byte131 >>> 3);\n        final long byte132 = blocks[blocksOffset++] & 0xFF;\n        final long byte133 = blocks[blocksOffset++] & 0xFF;\n        final long byte134 = blocks[blocksOffset++] & 0xFF;\n        final long byte135 = blocks[blocksOffset++] & 0xFF;\n        final long byte136 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte131 & 7) << 36) | (byte132 << 28) | (byte133 << 20) | (byte134 << 12) | (byte135 << 4) | (byte136 >>> 4);\n        final long byte137 = blocks[blocksOffset++] & 0xFF;\n        final long byte138 = blocks[blocksOffset++] & 0xFF;\n        final long byte139 = blocks[blocksOffset++] & 0xFF;\n        final long byte140 = blocks[blocksOffset++] & 0xFF;\n        final long byte141 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte136 & 15) << 35) | (byte137 << 27) | (byte138 << 19) | (byte139 << 11) | (byte140 << 3) | (byte141 >>> 5);\n        final long byte142 = blocks[blocksOffset++] & 0xFF;\n        final long byte143 = blocks[blocksOffset++] & 0xFF;\n        final long byte144 = blocks[blocksOffset++] & 0xFF;\n        final long byte145 = blocks[blocksOffset++] & 0xFF;\n        final long byte146 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte141 & 31) << 34) | (byte142 << 26) | (byte143 << 18) | (byte144 << 10) | (byte145 << 2) | (byte146 >>> 6);\n        final long byte147 = blocks[blocksOffset++] & 0xFF;\n        final long byte148 = blocks[blocksOffset++] & 0xFF;\n        final long byte149 = blocks[blocksOffset++] & 0xFF;\n        final long byte150 = blocks[blocksOffset++] & 0xFF;\n        final long byte151 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte146 & 63) << 33) | (byte147 << 25) | (byte148 << 17) | (byte149 << 9) | (byte150 << 1) | (byte151 >>> 7);\n        final long byte152 = blocks[blocksOffset++] & 0xFF;\n        final long byte153 = blocks[blocksOffset++] & 0xFF;\n        final long byte154 = blocks[blocksOffset++] & 0xFF;\n        final long byte155 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte151 & 127) << 32) | (byte152 << 24) | (byte153 << 16) | (byte154 << 8) | byte155;\n        final long byte156 = blocks[blocksOffset++] & 0xFF;\n        final long byte157 = blocks[blocksOffset++] & 0xFF;\n        final long byte158 = blocks[blocksOffset++] & 0xFF;\n        final long byte159 = blocks[blocksOffset++] & 0xFF;\n        final long byte160 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte156 << 31) | (byte157 << 23) | (byte158 << 15) | (byte159 << 7) | (byte160 >>> 1);\n        final long byte161 = blocks[blocksOffset++] & 0xFF;\n        final long byte162 = blocks[blocksOffset++] & 0xFF;\n        final long byte163 = blocks[blocksOffset++] & 0xFF;\n        final long byte164 = blocks[blocksOffset++] & 0xFF;\n        final long byte165 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte160 & 1) << 38) | (byte161 << 30) | (byte162 << 22) | (byte163 << 14) | (byte164 << 6) | (byte165 >>> 2);\n        final long byte166 = blocks[blocksOffset++] & 0xFF;\n        final long byte167 = blocks[blocksOffset++] & 0xFF;\n        final long byte168 = blocks[blocksOffset++] & 0xFF;\n        final long byte169 = blocks[blocksOffset++] & 0xFF;\n        final long byte170 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte165 & 3) << 37) | (byte166 << 29) | (byte167 << 21) | (byte168 << 13) | (byte169 << 5) | (byte170 >>> 3);\n        final long byte171 = blocks[blocksOffset++] & 0xFF;\n        final long byte172 = blocks[blocksOffset++] & 0xFF;\n        final long byte173 = blocks[blocksOffset++] & 0xFF;\n        final long byte174 = blocks[blocksOffset++] & 0xFF;\n        final long byte175 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte170 & 7) << 36) | (byte171 << 28) | (byte172 << 20) | (byte173 << 12) | (byte174 << 4) | (byte175 >>> 4);\n        final long byte176 = blocks[blocksOffset++] & 0xFF;\n        final long byte177 = blocks[blocksOffset++] & 0xFF;\n        final long byte178 = blocks[blocksOffset++] & 0xFF;\n        final long byte179 = blocks[blocksOffset++] & 0xFF;\n        final long byte180 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte175 & 15) << 35) | (byte176 << 27) | (byte177 << 19) | (byte178 << 11) | (byte179 << 3) | (byte180 >>> 5);\n        final long byte181 = blocks[blocksOffset++] & 0xFF;\n        final long byte182 = blocks[blocksOffset++] & 0xFF;\n        final long byte183 = blocks[blocksOffset++] & 0xFF;\n        final long byte184 = blocks[blocksOffset++] & 0xFF;\n        final long byte185 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte180 & 31) << 34) | (byte181 << 26) | (byte182 << 18) | (byte183 << 10) | (byte184 << 2) | (byte185 >>> 6);\n        final long byte186 = blocks[blocksOffset++] & 0xFF;\n        final long byte187 = blocks[blocksOffset++] & 0xFF;\n        final long byte188 = blocks[blocksOffset++] & 0xFF;\n        final long byte189 = blocks[blocksOffset++] & 0xFF;\n        final long byte190 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte185 & 63) << 33) | (byte186 << 25) | (byte187 << 17) | (byte188 << 9) | (byte189 << 1) | (byte190 >>> 7);\n        final long byte191 = blocks[blocksOffset++] & 0xFF;\n        final long byte192 = blocks[blocksOffset++] & 0xFF;\n        final long byte193 = blocks[blocksOffset++] & 0xFF;\n        final long byte194 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte190 & 127) << 32) | (byte191 << 24) | (byte192 << 16) | (byte193 << 8) | byte194;\n        final long byte195 = blocks[blocksOffset++] & 0xFF;\n        final long byte196 = blocks[blocksOffset++] & 0xFF;\n        final long byte197 = blocks[blocksOffset++] & 0xFF;\n        final long byte198 = blocks[blocksOffset++] & 0xFF;\n        final long byte199 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte195 << 31) | (byte196 << 23) | (byte197 << 15) | (byte198 << 7) | (byte199 >>> 1);\n        final long byte200 = blocks[blocksOffset++] & 0xFF;\n        final long byte201 = blocks[blocksOffset++] & 0xFF;\n        final long byte202 = blocks[blocksOffset++] & 0xFF;\n        final long byte203 = blocks[blocksOffset++] & 0xFF;\n        final long byte204 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte199 & 1) << 38) | (byte200 << 30) | (byte201 << 22) | (byte202 << 14) | (byte203 << 6) | (byte204 >>> 2);\n        final long byte205 = blocks[blocksOffset++] & 0xFF;\n        final long byte206 = blocks[blocksOffset++] & 0xFF;\n        final long byte207 = blocks[blocksOffset++] & 0xFF;\n        final long byte208 = blocks[blocksOffset++] & 0xFF;\n        final long byte209 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte204 & 3) << 37) | (byte205 << 29) | (byte206 << 21) | (byte207 << 13) | (byte208 << 5) | (byte209 >>> 3);\n        final long byte210 = blocks[blocksOffset++] & 0xFF;\n        final long byte211 = blocks[blocksOffset++] & 0xFF;\n        final long byte212 = blocks[blocksOffset++] & 0xFF;\n        final long byte213 = blocks[blocksOffset++] & 0xFF;\n        final long byte214 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte209 & 7) << 36) | (byte210 << 28) | (byte211 << 20) | (byte212 << 12) | (byte213 << 4) | (byte214 >>> 4);\n        final long byte215 = blocks[blocksOffset++] & 0xFF;\n        final long byte216 = blocks[blocksOffset++] & 0xFF;\n        final long byte217 = blocks[blocksOffset++] & 0xFF;\n        final long byte218 = blocks[blocksOffset++] & 0xFF;\n        final long byte219 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte214 & 15) << 35) | (byte215 << 27) | (byte216 << 19) | (byte217 << 11) | (byte218 << 3) | (byte219 >>> 5);\n        final long byte220 = blocks[blocksOffset++] & 0xFF;\n        final long byte221 = blocks[blocksOffset++] & 0xFF;\n        final long byte222 = blocks[blocksOffset++] & 0xFF;\n        final long byte223 = blocks[blocksOffset++] & 0xFF;\n        final long byte224 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte219 & 31) << 34) | (byte220 << 26) | (byte221 << 18) | (byte222 << 10) | (byte223 << 2) | (byte224 >>> 6);\n        final long byte225 = blocks[blocksOffset++] & 0xFF;\n        final long byte226 = blocks[blocksOffset++] & 0xFF;\n        final long byte227 = blocks[blocksOffset++] & 0xFF;\n        final long byte228 = blocks[blocksOffset++] & 0xFF;\n        final long byte229 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte224 & 63) << 33) | (byte225 << 25) | (byte226 << 17) | (byte227 << 9) | (byte228 << 1) | (byte229 >>> 7);\n        final long byte230 = blocks[blocksOffset++] & 0xFF;\n        final long byte231 = blocks[blocksOffset++] & 0xFF;\n        final long byte232 = blocks[blocksOffset++] & 0xFF;\n        final long byte233 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte229 & 127) << 32) | (byte230 << 24) | (byte231 << 16) | (byte232 << 8) | byte233;\n        final long byte234 = blocks[blocksOffset++] & 0xFF;\n        final long byte235 = blocks[blocksOffset++] & 0xFF;\n        final long byte236 = blocks[blocksOffset++] & 0xFF;\n        final long byte237 = blocks[blocksOffset++] & 0xFF;\n        final long byte238 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte234 << 31) | (byte235 << 23) | (byte236 << 15) | (byte237 << 7) | (byte238 >>> 1);\n        final long byte239 = blocks[blocksOffset++] & 0xFF;\n        final long byte240 = blocks[blocksOffset++] & 0xFF;\n        final long byte241 = blocks[blocksOffset++] & 0xFF;\n        final long byte242 = blocks[blocksOffset++] & 0xFF;\n        final long byte243 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte238 & 1) << 38) | (byte239 << 30) | (byte240 << 22) | (byte241 << 14) | (byte242 << 6) | (byte243 >>> 2);\n        final long byte244 = blocks[blocksOffset++] & 0xFF;\n        final long byte245 = blocks[blocksOffset++] & 0xFF;\n        final long byte246 = blocks[blocksOffset++] & 0xFF;\n        final long byte247 = blocks[blocksOffset++] & 0xFF;\n        final long byte248 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte243 & 3) << 37) | (byte244 << 29) | (byte245 << 21) | (byte246 << 13) | (byte247 << 5) | (byte248 >>> 3);\n        final long byte249 = blocks[blocksOffset++] & 0xFF;\n        final long byte250 = blocks[blocksOffset++] & 0xFF;\n        final long byte251 = blocks[blocksOffset++] & 0xFF;\n        final long byte252 = blocks[blocksOffset++] & 0xFF;\n        final long byte253 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte248 & 7) << 36) | (byte249 << 28) | (byte250 << 20) | (byte251 << 12) | (byte252 << 4) | (byte253 >>> 4);\n        final long byte254 = blocks[blocksOffset++] & 0xFF;\n        final long byte255 = blocks[blocksOffset++] & 0xFF;\n        final long byte256 = blocks[blocksOffset++] & 0xFF;\n        final long byte257 = blocks[blocksOffset++] & 0xFF;\n        final long byte258 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte253 & 15) << 35) | (byte254 << 27) | (byte255 << 19) | (byte256 << 11) | (byte257 << 3) | (byte258 >>> 5);\n        final long byte259 = blocks[blocksOffset++] & 0xFF;\n        final long byte260 = blocks[blocksOffset++] & 0xFF;\n        final long byte261 = blocks[blocksOffset++] & 0xFF;\n        final long byte262 = blocks[blocksOffset++] & 0xFF;\n        final long byte263 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte258 & 31) << 34) | (byte259 << 26) | (byte260 << 18) | (byte261 << 10) | (byte262 << 2) | (byte263 >>> 6);\n        final long byte264 = blocks[blocksOffset++] & 0xFF;\n        final long byte265 = blocks[blocksOffset++] & 0xFF;\n        final long byte266 = blocks[blocksOffset++] & 0xFF;\n        final long byte267 = blocks[blocksOffset++] & 0xFF;\n        final long byte268 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte263 & 63) << 33) | (byte264 << 25) | (byte265 << 17) | (byte266 << 9) | (byte267 << 1) | (byte268 >>> 7);\n        final long byte269 = blocks[blocksOffset++] & 0xFF;\n        final long byte270 = blocks[blocksOffset++] & 0xFF;\n        final long byte271 = blocks[blocksOffset++] & 0xFF;\n        final long byte272 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte268 & 127) << 32) | (byte269 << 24) | (byte270 << 16) | (byte271 << 8) | byte272;\n        final long byte273 = blocks[blocksOffset++] & 0xFF;\n        final long byte274 = blocks[blocksOffset++] & 0xFF;\n        final long byte275 = blocks[blocksOffset++] & 0xFF;\n        final long byte276 = blocks[blocksOffset++] & 0xFF;\n        final long byte277 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte273 << 31) | (byte274 << 23) | (byte275 << 15) | (byte276 << 7) | (byte277 >>> 1);\n        final long byte278 = blocks[blocksOffset++] & 0xFF;\n        final long byte279 = blocks[blocksOffset++] & 0xFF;\n        final long byte280 = blocks[blocksOffset++] & 0xFF;\n        final long byte281 = blocks[blocksOffset++] & 0xFF;\n        final long byte282 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte277 & 1) << 38) | (byte278 << 30) | (byte279 << 22) | (byte280 << 14) | (byte281 << 6) | (byte282 >>> 2);\n        final long byte283 = blocks[blocksOffset++] & 0xFF;\n        final long byte284 = blocks[blocksOffset++] & 0xFF;\n        final long byte285 = blocks[blocksOffset++] & 0xFF;\n        final long byte286 = blocks[blocksOffset++] & 0xFF;\n        final long byte287 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte282 & 3) << 37) | (byte283 << 29) | (byte284 << 21) | (byte285 << 13) | (byte286 << 5) | (byte287 >>> 3);\n        final long byte288 = blocks[blocksOffset++] & 0xFF;\n        final long byte289 = blocks[blocksOffset++] & 0xFF;\n        final long byte290 = blocks[blocksOffset++] & 0xFF;\n        final long byte291 = blocks[blocksOffset++] & 0xFF;\n        final long byte292 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte287 & 7) << 36) | (byte288 << 28) | (byte289 << 20) | (byte290 << 12) | (byte291 << 4) | (byte292 >>> 4);\n        final long byte293 = blocks[blocksOffset++] & 0xFF;\n        final long byte294 = blocks[blocksOffset++] & 0xFF;\n        final long byte295 = blocks[blocksOffset++] & 0xFF;\n        final long byte296 = blocks[blocksOffset++] & 0xFF;\n        final long byte297 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte292 & 15) << 35) | (byte293 << 27) | (byte294 << 19) | (byte295 << 11) | (byte296 << 3) | (byte297 >>> 5);\n        final long byte298 = blocks[blocksOffset++] & 0xFF;\n        final long byte299 = blocks[blocksOffset++] & 0xFF;\n        final long byte300 = blocks[blocksOffset++] & 0xFF;\n        final long byte301 = blocks[blocksOffset++] & 0xFF;\n        final long byte302 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte297 & 31) << 34) | (byte298 << 26) | (byte299 << 18) | (byte300 << 10) | (byte301 << 2) | (byte302 >>> 6);\n        final long byte303 = blocks[blocksOffset++] & 0xFF;\n        final long byte304 = blocks[blocksOffset++] & 0xFF;\n        final long byte305 = blocks[blocksOffset++] & 0xFF;\n        final long byte306 = blocks[blocksOffset++] & 0xFF;\n        final long byte307 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte302 & 63) << 33) | (byte303 << 25) | (byte304 << 17) | (byte305 << 9) | (byte306 << 1) | (byte307 >>> 7);\n        final long byte308 = blocks[blocksOffset++] & 0xFF;\n        final long byte309 = blocks[blocksOffset++] & 0xFF;\n        final long byte310 = blocks[blocksOffset++] & 0xFF;\n        final long byte311 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte307 & 127) << 32) | (byte308 << 24) | (byte309 << 16) | (byte310 << 8) | byte311;\n      }\n    }\n\n","sourceOld":"    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 31) | (byte1 << 23) | (byte2 << 15) | (byte3 << 7) | (byte4 >>> 1);\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte4 & 1) << 38) | (byte5 << 30) | (byte6 << 22) | (byte7 << 14) | (byte8 << 6) | (byte9 >>> 2);\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte9 & 3) << 37) | (byte10 << 29) | (byte11 << 21) | (byte12 << 13) | (byte13 << 5) | (byte14 >>> 3);\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte14 & 7) << 36) | (byte15 << 28) | (byte16 << 20) | (byte17 << 12) | (byte18 << 4) | (byte19 >>> 4);\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 15) << 35) | (byte20 << 27) | (byte21 << 19) | (byte22 << 11) | (byte23 << 3) | (byte24 >>> 5);\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte24 & 31) << 34) | (byte25 << 26) | (byte26 << 18) | (byte27 << 10) | (byte28 << 2) | (byte29 >>> 6);\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte29 & 63) << 33) | (byte30 << 25) | (byte31 << 17) | (byte32 << 9) | (byte33 << 1) | (byte34 >>> 7);\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte34 & 127) << 32) | (byte35 << 24) | (byte36 << 16) | (byte37 << 8) | byte38;\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte39 << 31) | (byte40 << 23) | (byte41 << 15) | (byte42 << 7) | (byte43 >>> 1);\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte43 & 1) << 38) | (byte44 << 30) | (byte45 << 22) | (byte46 << 14) | (byte47 << 6) | (byte48 >>> 2);\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte48 & 3) << 37) | (byte49 << 29) | (byte50 << 21) | (byte51 << 13) | (byte52 << 5) | (byte53 >>> 3);\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        final long byte56 = blocks[blocksOffset++] & 0xFF;\n        final long byte57 = blocks[blocksOffset++] & 0xFF;\n        final long byte58 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte53 & 7) << 36) | (byte54 << 28) | (byte55 << 20) | (byte56 << 12) | (byte57 << 4) | (byte58 >>> 4);\n        final long byte59 = blocks[blocksOffset++] & 0xFF;\n        final long byte60 = blocks[blocksOffset++] & 0xFF;\n        final long byte61 = blocks[blocksOffset++] & 0xFF;\n        final long byte62 = blocks[blocksOffset++] & 0xFF;\n        final long byte63 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte58 & 15) << 35) | (byte59 << 27) | (byte60 << 19) | (byte61 << 11) | (byte62 << 3) | (byte63 >>> 5);\n        final long byte64 = blocks[blocksOffset++] & 0xFF;\n        final long byte65 = blocks[blocksOffset++] & 0xFF;\n        final long byte66 = blocks[blocksOffset++] & 0xFF;\n        final long byte67 = blocks[blocksOffset++] & 0xFF;\n        final long byte68 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte63 & 31) << 34) | (byte64 << 26) | (byte65 << 18) | (byte66 << 10) | (byte67 << 2) | (byte68 >>> 6);\n        final long byte69 = blocks[blocksOffset++] & 0xFF;\n        final long byte70 = blocks[blocksOffset++] & 0xFF;\n        final long byte71 = blocks[blocksOffset++] & 0xFF;\n        final long byte72 = blocks[blocksOffset++] & 0xFF;\n        final long byte73 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte68 & 63) << 33) | (byte69 << 25) | (byte70 << 17) | (byte71 << 9) | (byte72 << 1) | (byte73 >>> 7);\n        final long byte74 = blocks[blocksOffset++] & 0xFF;\n        final long byte75 = blocks[blocksOffset++] & 0xFF;\n        final long byte76 = blocks[blocksOffset++] & 0xFF;\n        final long byte77 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte73 & 127) << 32) | (byte74 << 24) | (byte75 << 16) | (byte76 << 8) | byte77;\n        final long byte78 = blocks[blocksOffset++] & 0xFF;\n        final long byte79 = blocks[blocksOffset++] & 0xFF;\n        final long byte80 = blocks[blocksOffset++] & 0xFF;\n        final long byte81 = blocks[blocksOffset++] & 0xFF;\n        final long byte82 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte78 << 31) | (byte79 << 23) | (byte80 << 15) | (byte81 << 7) | (byte82 >>> 1);\n        final long byte83 = blocks[blocksOffset++] & 0xFF;\n        final long byte84 = blocks[blocksOffset++] & 0xFF;\n        final long byte85 = blocks[blocksOffset++] & 0xFF;\n        final long byte86 = blocks[blocksOffset++] & 0xFF;\n        final long byte87 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte82 & 1) << 38) | (byte83 << 30) | (byte84 << 22) | (byte85 << 14) | (byte86 << 6) | (byte87 >>> 2);\n        final long byte88 = blocks[blocksOffset++] & 0xFF;\n        final long byte89 = blocks[blocksOffset++] & 0xFF;\n        final long byte90 = blocks[blocksOffset++] & 0xFF;\n        final long byte91 = blocks[blocksOffset++] & 0xFF;\n        final long byte92 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte87 & 3) << 37) | (byte88 << 29) | (byte89 << 21) | (byte90 << 13) | (byte91 << 5) | (byte92 >>> 3);\n        final long byte93 = blocks[blocksOffset++] & 0xFF;\n        final long byte94 = blocks[blocksOffset++] & 0xFF;\n        final long byte95 = blocks[blocksOffset++] & 0xFF;\n        final long byte96 = blocks[blocksOffset++] & 0xFF;\n        final long byte97 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte92 & 7) << 36) | (byte93 << 28) | (byte94 << 20) | (byte95 << 12) | (byte96 << 4) | (byte97 >>> 4);\n        final long byte98 = blocks[blocksOffset++] & 0xFF;\n        final long byte99 = blocks[blocksOffset++] & 0xFF;\n        final long byte100 = blocks[blocksOffset++] & 0xFF;\n        final long byte101 = blocks[blocksOffset++] & 0xFF;\n        final long byte102 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte97 & 15) << 35) | (byte98 << 27) | (byte99 << 19) | (byte100 << 11) | (byte101 << 3) | (byte102 >>> 5);\n        final long byte103 = blocks[blocksOffset++] & 0xFF;\n        final long byte104 = blocks[blocksOffset++] & 0xFF;\n        final long byte105 = blocks[blocksOffset++] & 0xFF;\n        final long byte106 = blocks[blocksOffset++] & 0xFF;\n        final long byte107 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte102 & 31) << 34) | (byte103 << 26) | (byte104 << 18) | (byte105 << 10) | (byte106 << 2) | (byte107 >>> 6);\n        final long byte108 = blocks[blocksOffset++] & 0xFF;\n        final long byte109 = blocks[blocksOffset++] & 0xFF;\n        final long byte110 = blocks[blocksOffset++] & 0xFF;\n        final long byte111 = blocks[blocksOffset++] & 0xFF;\n        final long byte112 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte107 & 63) << 33) | (byte108 << 25) | (byte109 << 17) | (byte110 << 9) | (byte111 << 1) | (byte112 >>> 7);\n        final long byte113 = blocks[blocksOffset++] & 0xFF;\n        final long byte114 = blocks[blocksOffset++] & 0xFF;\n        final long byte115 = blocks[blocksOffset++] & 0xFF;\n        final long byte116 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte112 & 127) << 32) | (byte113 << 24) | (byte114 << 16) | (byte115 << 8) | byte116;\n        final long byte117 = blocks[blocksOffset++] & 0xFF;\n        final long byte118 = blocks[blocksOffset++] & 0xFF;\n        final long byte119 = blocks[blocksOffset++] & 0xFF;\n        final long byte120 = blocks[blocksOffset++] & 0xFF;\n        final long byte121 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte117 << 31) | (byte118 << 23) | (byte119 << 15) | (byte120 << 7) | (byte121 >>> 1);\n        final long byte122 = blocks[blocksOffset++] & 0xFF;\n        final long byte123 = blocks[blocksOffset++] & 0xFF;\n        final long byte124 = blocks[blocksOffset++] & 0xFF;\n        final long byte125 = blocks[blocksOffset++] & 0xFF;\n        final long byte126 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte121 & 1) << 38) | (byte122 << 30) | (byte123 << 22) | (byte124 << 14) | (byte125 << 6) | (byte126 >>> 2);\n        final long byte127 = blocks[blocksOffset++] & 0xFF;\n        final long byte128 = blocks[blocksOffset++] & 0xFF;\n        final long byte129 = blocks[blocksOffset++] & 0xFF;\n        final long byte130 = blocks[blocksOffset++] & 0xFF;\n        final long byte131 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte126 & 3) << 37) | (byte127 << 29) | (byte128 << 21) | (byte129 << 13) | (byte130 << 5) | (byte131 >>> 3);\n        final long byte132 = blocks[blocksOffset++] & 0xFF;\n        final long byte133 = blocks[blocksOffset++] & 0xFF;\n        final long byte134 = blocks[blocksOffset++] & 0xFF;\n        final long byte135 = blocks[blocksOffset++] & 0xFF;\n        final long byte136 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte131 & 7) << 36) | (byte132 << 28) | (byte133 << 20) | (byte134 << 12) | (byte135 << 4) | (byte136 >>> 4);\n        final long byte137 = blocks[blocksOffset++] & 0xFF;\n        final long byte138 = blocks[blocksOffset++] & 0xFF;\n        final long byte139 = blocks[blocksOffset++] & 0xFF;\n        final long byte140 = blocks[blocksOffset++] & 0xFF;\n        final long byte141 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte136 & 15) << 35) | (byte137 << 27) | (byte138 << 19) | (byte139 << 11) | (byte140 << 3) | (byte141 >>> 5);\n        final long byte142 = blocks[blocksOffset++] & 0xFF;\n        final long byte143 = blocks[blocksOffset++] & 0xFF;\n        final long byte144 = blocks[blocksOffset++] & 0xFF;\n        final long byte145 = blocks[blocksOffset++] & 0xFF;\n        final long byte146 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte141 & 31) << 34) | (byte142 << 26) | (byte143 << 18) | (byte144 << 10) | (byte145 << 2) | (byte146 >>> 6);\n        final long byte147 = blocks[blocksOffset++] & 0xFF;\n        final long byte148 = blocks[blocksOffset++] & 0xFF;\n        final long byte149 = blocks[blocksOffset++] & 0xFF;\n        final long byte150 = blocks[blocksOffset++] & 0xFF;\n        final long byte151 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte146 & 63) << 33) | (byte147 << 25) | (byte148 << 17) | (byte149 << 9) | (byte150 << 1) | (byte151 >>> 7);\n        final long byte152 = blocks[blocksOffset++] & 0xFF;\n        final long byte153 = blocks[blocksOffset++] & 0xFF;\n        final long byte154 = blocks[blocksOffset++] & 0xFF;\n        final long byte155 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte151 & 127) << 32) | (byte152 << 24) | (byte153 << 16) | (byte154 << 8) | byte155;\n        final long byte156 = blocks[blocksOffset++] & 0xFF;\n        final long byte157 = blocks[blocksOffset++] & 0xFF;\n        final long byte158 = blocks[blocksOffset++] & 0xFF;\n        final long byte159 = blocks[blocksOffset++] & 0xFF;\n        final long byte160 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte156 << 31) | (byte157 << 23) | (byte158 << 15) | (byte159 << 7) | (byte160 >>> 1);\n        final long byte161 = blocks[blocksOffset++] & 0xFF;\n        final long byte162 = blocks[blocksOffset++] & 0xFF;\n        final long byte163 = blocks[blocksOffset++] & 0xFF;\n        final long byte164 = blocks[blocksOffset++] & 0xFF;\n        final long byte165 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte160 & 1) << 38) | (byte161 << 30) | (byte162 << 22) | (byte163 << 14) | (byte164 << 6) | (byte165 >>> 2);\n        final long byte166 = blocks[blocksOffset++] & 0xFF;\n        final long byte167 = blocks[blocksOffset++] & 0xFF;\n        final long byte168 = blocks[blocksOffset++] & 0xFF;\n        final long byte169 = blocks[blocksOffset++] & 0xFF;\n        final long byte170 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte165 & 3) << 37) | (byte166 << 29) | (byte167 << 21) | (byte168 << 13) | (byte169 << 5) | (byte170 >>> 3);\n        final long byte171 = blocks[blocksOffset++] & 0xFF;\n        final long byte172 = blocks[blocksOffset++] & 0xFF;\n        final long byte173 = blocks[blocksOffset++] & 0xFF;\n        final long byte174 = blocks[blocksOffset++] & 0xFF;\n        final long byte175 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte170 & 7) << 36) | (byte171 << 28) | (byte172 << 20) | (byte173 << 12) | (byte174 << 4) | (byte175 >>> 4);\n        final long byte176 = blocks[blocksOffset++] & 0xFF;\n        final long byte177 = blocks[blocksOffset++] & 0xFF;\n        final long byte178 = blocks[blocksOffset++] & 0xFF;\n        final long byte179 = blocks[blocksOffset++] & 0xFF;\n        final long byte180 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte175 & 15) << 35) | (byte176 << 27) | (byte177 << 19) | (byte178 << 11) | (byte179 << 3) | (byte180 >>> 5);\n        final long byte181 = blocks[blocksOffset++] & 0xFF;\n        final long byte182 = blocks[blocksOffset++] & 0xFF;\n        final long byte183 = blocks[blocksOffset++] & 0xFF;\n        final long byte184 = blocks[blocksOffset++] & 0xFF;\n        final long byte185 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte180 & 31) << 34) | (byte181 << 26) | (byte182 << 18) | (byte183 << 10) | (byte184 << 2) | (byte185 >>> 6);\n        final long byte186 = blocks[blocksOffset++] & 0xFF;\n        final long byte187 = blocks[blocksOffset++] & 0xFF;\n        final long byte188 = blocks[blocksOffset++] & 0xFF;\n        final long byte189 = blocks[blocksOffset++] & 0xFF;\n        final long byte190 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte185 & 63) << 33) | (byte186 << 25) | (byte187 << 17) | (byte188 << 9) | (byte189 << 1) | (byte190 >>> 7);\n        final long byte191 = blocks[blocksOffset++] & 0xFF;\n        final long byte192 = blocks[blocksOffset++] & 0xFF;\n        final long byte193 = blocks[blocksOffset++] & 0xFF;\n        final long byte194 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte190 & 127) << 32) | (byte191 << 24) | (byte192 << 16) | (byte193 << 8) | byte194;\n        final long byte195 = blocks[blocksOffset++] & 0xFF;\n        final long byte196 = blocks[blocksOffset++] & 0xFF;\n        final long byte197 = blocks[blocksOffset++] & 0xFF;\n        final long byte198 = blocks[blocksOffset++] & 0xFF;\n        final long byte199 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte195 << 31) | (byte196 << 23) | (byte197 << 15) | (byte198 << 7) | (byte199 >>> 1);\n        final long byte200 = blocks[blocksOffset++] & 0xFF;\n        final long byte201 = blocks[blocksOffset++] & 0xFF;\n        final long byte202 = blocks[blocksOffset++] & 0xFF;\n        final long byte203 = blocks[blocksOffset++] & 0xFF;\n        final long byte204 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte199 & 1) << 38) | (byte200 << 30) | (byte201 << 22) | (byte202 << 14) | (byte203 << 6) | (byte204 >>> 2);\n        final long byte205 = blocks[blocksOffset++] & 0xFF;\n        final long byte206 = blocks[blocksOffset++] & 0xFF;\n        final long byte207 = blocks[blocksOffset++] & 0xFF;\n        final long byte208 = blocks[blocksOffset++] & 0xFF;\n        final long byte209 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte204 & 3) << 37) | (byte205 << 29) | (byte206 << 21) | (byte207 << 13) | (byte208 << 5) | (byte209 >>> 3);\n        final long byte210 = blocks[blocksOffset++] & 0xFF;\n        final long byte211 = blocks[blocksOffset++] & 0xFF;\n        final long byte212 = blocks[blocksOffset++] & 0xFF;\n        final long byte213 = blocks[blocksOffset++] & 0xFF;\n        final long byte214 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte209 & 7) << 36) | (byte210 << 28) | (byte211 << 20) | (byte212 << 12) | (byte213 << 4) | (byte214 >>> 4);\n        final long byte215 = blocks[blocksOffset++] & 0xFF;\n        final long byte216 = blocks[blocksOffset++] & 0xFF;\n        final long byte217 = blocks[blocksOffset++] & 0xFF;\n        final long byte218 = blocks[blocksOffset++] & 0xFF;\n        final long byte219 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte214 & 15) << 35) | (byte215 << 27) | (byte216 << 19) | (byte217 << 11) | (byte218 << 3) | (byte219 >>> 5);\n        final long byte220 = blocks[blocksOffset++] & 0xFF;\n        final long byte221 = blocks[blocksOffset++] & 0xFF;\n        final long byte222 = blocks[blocksOffset++] & 0xFF;\n        final long byte223 = blocks[blocksOffset++] & 0xFF;\n        final long byte224 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte219 & 31) << 34) | (byte220 << 26) | (byte221 << 18) | (byte222 << 10) | (byte223 << 2) | (byte224 >>> 6);\n        final long byte225 = blocks[blocksOffset++] & 0xFF;\n        final long byte226 = blocks[blocksOffset++] & 0xFF;\n        final long byte227 = blocks[blocksOffset++] & 0xFF;\n        final long byte228 = blocks[blocksOffset++] & 0xFF;\n        final long byte229 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte224 & 63) << 33) | (byte225 << 25) | (byte226 << 17) | (byte227 << 9) | (byte228 << 1) | (byte229 >>> 7);\n        final long byte230 = blocks[blocksOffset++] & 0xFF;\n        final long byte231 = blocks[blocksOffset++] & 0xFF;\n        final long byte232 = blocks[blocksOffset++] & 0xFF;\n        final long byte233 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte229 & 127) << 32) | (byte230 << 24) | (byte231 << 16) | (byte232 << 8) | byte233;\n        final long byte234 = blocks[blocksOffset++] & 0xFF;\n        final long byte235 = blocks[blocksOffset++] & 0xFF;\n        final long byte236 = blocks[blocksOffset++] & 0xFF;\n        final long byte237 = blocks[blocksOffset++] & 0xFF;\n        final long byte238 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte234 << 31) | (byte235 << 23) | (byte236 << 15) | (byte237 << 7) | (byte238 >>> 1);\n        final long byte239 = blocks[blocksOffset++] & 0xFF;\n        final long byte240 = blocks[blocksOffset++] & 0xFF;\n        final long byte241 = blocks[blocksOffset++] & 0xFF;\n        final long byte242 = blocks[blocksOffset++] & 0xFF;\n        final long byte243 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte238 & 1) << 38) | (byte239 << 30) | (byte240 << 22) | (byte241 << 14) | (byte242 << 6) | (byte243 >>> 2);\n        final long byte244 = blocks[blocksOffset++] & 0xFF;\n        final long byte245 = blocks[blocksOffset++] & 0xFF;\n        final long byte246 = blocks[blocksOffset++] & 0xFF;\n        final long byte247 = blocks[blocksOffset++] & 0xFF;\n        final long byte248 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte243 & 3) << 37) | (byte244 << 29) | (byte245 << 21) | (byte246 << 13) | (byte247 << 5) | (byte248 >>> 3);\n        final long byte249 = blocks[blocksOffset++] & 0xFF;\n        final long byte250 = blocks[blocksOffset++] & 0xFF;\n        final long byte251 = blocks[blocksOffset++] & 0xFF;\n        final long byte252 = blocks[blocksOffset++] & 0xFF;\n        final long byte253 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte248 & 7) << 36) | (byte249 << 28) | (byte250 << 20) | (byte251 << 12) | (byte252 << 4) | (byte253 >>> 4);\n        final long byte254 = blocks[blocksOffset++] & 0xFF;\n        final long byte255 = blocks[blocksOffset++] & 0xFF;\n        final long byte256 = blocks[blocksOffset++] & 0xFF;\n        final long byte257 = blocks[blocksOffset++] & 0xFF;\n        final long byte258 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte253 & 15) << 35) | (byte254 << 27) | (byte255 << 19) | (byte256 << 11) | (byte257 << 3) | (byte258 >>> 5);\n        final long byte259 = blocks[blocksOffset++] & 0xFF;\n        final long byte260 = blocks[blocksOffset++] & 0xFF;\n        final long byte261 = blocks[blocksOffset++] & 0xFF;\n        final long byte262 = blocks[blocksOffset++] & 0xFF;\n        final long byte263 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte258 & 31) << 34) | (byte259 << 26) | (byte260 << 18) | (byte261 << 10) | (byte262 << 2) | (byte263 >>> 6);\n        final long byte264 = blocks[blocksOffset++] & 0xFF;\n        final long byte265 = blocks[blocksOffset++] & 0xFF;\n        final long byte266 = blocks[blocksOffset++] & 0xFF;\n        final long byte267 = blocks[blocksOffset++] & 0xFF;\n        final long byte268 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte263 & 63) << 33) | (byte264 << 25) | (byte265 << 17) | (byte266 << 9) | (byte267 << 1) | (byte268 >>> 7);\n        final long byte269 = blocks[blocksOffset++] & 0xFF;\n        final long byte270 = blocks[blocksOffset++] & 0xFF;\n        final long byte271 = blocks[blocksOffset++] & 0xFF;\n        final long byte272 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte268 & 127) << 32) | (byte269 << 24) | (byte270 << 16) | (byte271 << 8) | byte272;\n        final long byte273 = blocks[blocksOffset++] & 0xFF;\n        final long byte274 = blocks[blocksOffset++] & 0xFF;\n        final long byte275 = blocks[blocksOffset++] & 0xFF;\n        final long byte276 = blocks[blocksOffset++] & 0xFF;\n        final long byte277 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte273 << 31) | (byte274 << 23) | (byte275 << 15) | (byte276 << 7) | (byte277 >>> 1);\n        final long byte278 = blocks[blocksOffset++] & 0xFF;\n        final long byte279 = blocks[blocksOffset++] & 0xFF;\n        final long byte280 = blocks[blocksOffset++] & 0xFF;\n        final long byte281 = blocks[blocksOffset++] & 0xFF;\n        final long byte282 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte277 & 1) << 38) | (byte278 << 30) | (byte279 << 22) | (byte280 << 14) | (byte281 << 6) | (byte282 >>> 2);\n        final long byte283 = blocks[blocksOffset++] & 0xFF;\n        final long byte284 = blocks[blocksOffset++] & 0xFF;\n        final long byte285 = blocks[blocksOffset++] & 0xFF;\n        final long byte286 = blocks[blocksOffset++] & 0xFF;\n        final long byte287 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte282 & 3) << 37) | (byte283 << 29) | (byte284 << 21) | (byte285 << 13) | (byte286 << 5) | (byte287 >>> 3);\n        final long byte288 = blocks[blocksOffset++] & 0xFF;\n        final long byte289 = blocks[blocksOffset++] & 0xFF;\n        final long byte290 = blocks[blocksOffset++] & 0xFF;\n        final long byte291 = blocks[blocksOffset++] & 0xFF;\n        final long byte292 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte287 & 7) << 36) | (byte288 << 28) | (byte289 << 20) | (byte290 << 12) | (byte291 << 4) | (byte292 >>> 4);\n        final long byte293 = blocks[blocksOffset++] & 0xFF;\n        final long byte294 = blocks[blocksOffset++] & 0xFF;\n        final long byte295 = blocks[blocksOffset++] & 0xFF;\n        final long byte296 = blocks[blocksOffset++] & 0xFF;\n        final long byte297 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte292 & 15) << 35) | (byte293 << 27) | (byte294 << 19) | (byte295 << 11) | (byte296 << 3) | (byte297 >>> 5);\n        final long byte298 = blocks[blocksOffset++] & 0xFF;\n        final long byte299 = blocks[blocksOffset++] & 0xFF;\n        final long byte300 = blocks[blocksOffset++] & 0xFF;\n        final long byte301 = blocks[blocksOffset++] & 0xFF;\n        final long byte302 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte297 & 31) << 34) | (byte298 << 26) | (byte299 << 18) | (byte300 << 10) | (byte301 << 2) | (byte302 >>> 6);\n        final long byte303 = blocks[blocksOffset++] & 0xFF;\n        final long byte304 = blocks[blocksOffset++] & 0xFF;\n        final long byte305 = blocks[blocksOffset++] & 0xFF;\n        final long byte306 = blocks[blocksOffset++] & 0xFF;\n        final long byte307 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte302 & 63) << 33) | (byte303 << 25) | (byte304 << 17) | (byte305 << 9) | (byte306 << 1) | (byte307 >>> 7);\n        final long byte308 = blocks[blocksOffset++] & 0xFF;\n        final long byte309 = blocks[blocksOffset++] & 0xFF;\n        final long byte310 = blocks[blocksOffset++] & 0xFF;\n        final long byte311 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte307 & 127) << 32) | (byte308 << 24) | (byte309 << 16) | (byte310 << 8) | byte311;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked39#decode(byte[],int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 31) | (byte1 << 23) | (byte2 << 15) | (byte3 << 7) | (byte4 >>> 1);\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte4 & 1) << 38) | (byte5 << 30) | (byte6 << 22) | (byte7 << 14) | (byte8 << 6) | (byte9 >>> 2);\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte9 & 3) << 37) | (byte10 << 29) | (byte11 << 21) | (byte12 << 13) | (byte13 << 5) | (byte14 >>> 3);\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte14 & 7) << 36) | (byte15 << 28) | (byte16 << 20) | (byte17 << 12) | (byte18 << 4) | (byte19 >>> 4);\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 15) << 35) | (byte20 << 27) | (byte21 << 19) | (byte22 << 11) | (byte23 << 3) | (byte24 >>> 5);\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte24 & 31) << 34) | (byte25 << 26) | (byte26 << 18) | (byte27 << 10) | (byte28 << 2) | (byte29 >>> 6);\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte29 & 63) << 33) | (byte30 << 25) | (byte31 << 17) | (byte32 << 9) | (byte33 << 1) | (byte34 >>> 7);\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte34 & 127) << 32) | (byte35 << 24) | (byte36 << 16) | (byte37 << 8) | byte38;\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte39 << 31) | (byte40 << 23) | (byte41 << 15) | (byte42 << 7) | (byte43 >>> 1);\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte43 & 1) << 38) | (byte44 << 30) | (byte45 << 22) | (byte46 << 14) | (byte47 << 6) | (byte48 >>> 2);\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte48 & 3) << 37) | (byte49 << 29) | (byte50 << 21) | (byte51 << 13) | (byte52 << 5) | (byte53 >>> 3);\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        final long byte56 = blocks[blocksOffset++] & 0xFF;\n        final long byte57 = blocks[blocksOffset++] & 0xFF;\n        final long byte58 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte53 & 7) << 36) | (byte54 << 28) | (byte55 << 20) | (byte56 << 12) | (byte57 << 4) | (byte58 >>> 4);\n        final long byte59 = blocks[blocksOffset++] & 0xFF;\n        final long byte60 = blocks[blocksOffset++] & 0xFF;\n        final long byte61 = blocks[blocksOffset++] & 0xFF;\n        final long byte62 = blocks[blocksOffset++] & 0xFF;\n        final long byte63 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte58 & 15) << 35) | (byte59 << 27) | (byte60 << 19) | (byte61 << 11) | (byte62 << 3) | (byte63 >>> 5);\n        final long byte64 = blocks[blocksOffset++] & 0xFF;\n        final long byte65 = blocks[blocksOffset++] & 0xFF;\n        final long byte66 = blocks[blocksOffset++] & 0xFF;\n        final long byte67 = blocks[blocksOffset++] & 0xFF;\n        final long byte68 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte63 & 31) << 34) | (byte64 << 26) | (byte65 << 18) | (byte66 << 10) | (byte67 << 2) | (byte68 >>> 6);\n        final long byte69 = blocks[blocksOffset++] & 0xFF;\n        final long byte70 = blocks[blocksOffset++] & 0xFF;\n        final long byte71 = blocks[blocksOffset++] & 0xFF;\n        final long byte72 = blocks[blocksOffset++] & 0xFF;\n        final long byte73 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte68 & 63) << 33) | (byte69 << 25) | (byte70 << 17) | (byte71 << 9) | (byte72 << 1) | (byte73 >>> 7);\n        final long byte74 = blocks[blocksOffset++] & 0xFF;\n        final long byte75 = blocks[blocksOffset++] & 0xFF;\n        final long byte76 = blocks[blocksOffset++] & 0xFF;\n        final long byte77 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte73 & 127) << 32) | (byte74 << 24) | (byte75 << 16) | (byte76 << 8) | byte77;\n        final long byte78 = blocks[blocksOffset++] & 0xFF;\n        final long byte79 = blocks[blocksOffset++] & 0xFF;\n        final long byte80 = blocks[blocksOffset++] & 0xFF;\n        final long byte81 = blocks[blocksOffset++] & 0xFF;\n        final long byte82 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte78 << 31) | (byte79 << 23) | (byte80 << 15) | (byte81 << 7) | (byte82 >>> 1);\n        final long byte83 = blocks[blocksOffset++] & 0xFF;\n        final long byte84 = blocks[blocksOffset++] & 0xFF;\n        final long byte85 = blocks[blocksOffset++] & 0xFF;\n        final long byte86 = blocks[blocksOffset++] & 0xFF;\n        final long byte87 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte82 & 1) << 38) | (byte83 << 30) | (byte84 << 22) | (byte85 << 14) | (byte86 << 6) | (byte87 >>> 2);\n        final long byte88 = blocks[blocksOffset++] & 0xFF;\n        final long byte89 = blocks[blocksOffset++] & 0xFF;\n        final long byte90 = blocks[blocksOffset++] & 0xFF;\n        final long byte91 = blocks[blocksOffset++] & 0xFF;\n        final long byte92 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte87 & 3) << 37) | (byte88 << 29) | (byte89 << 21) | (byte90 << 13) | (byte91 << 5) | (byte92 >>> 3);\n        final long byte93 = blocks[blocksOffset++] & 0xFF;\n        final long byte94 = blocks[blocksOffset++] & 0xFF;\n        final long byte95 = blocks[blocksOffset++] & 0xFF;\n        final long byte96 = blocks[blocksOffset++] & 0xFF;\n        final long byte97 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte92 & 7) << 36) | (byte93 << 28) | (byte94 << 20) | (byte95 << 12) | (byte96 << 4) | (byte97 >>> 4);\n        final long byte98 = blocks[blocksOffset++] & 0xFF;\n        final long byte99 = blocks[blocksOffset++] & 0xFF;\n        final long byte100 = blocks[blocksOffset++] & 0xFF;\n        final long byte101 = blocks[blocksOffset++] & 0xFF;\n        final long byte102 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte97 & 15) << 35) | (byte98 << 27) | (byte99 << 19) | (byte100 << 11) | (byte101 << 3) | (byte102 >>> 5);\n        final long byte103 = blocks[blocksOffset++] & 0xFF;\n        final long byte104 = blocks[blocksOffset++] & 0xFF;\n        final long byte105 = blocks[blocksOffset++] & 0xFF;\n        final long byte106 = blocks[blocksOffset++] & 0xFF;\n        final long byte107 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte102 & 31) << 34) | (byte103 << 26) | (byte104 << 18) | (byte105 << 10) | (byte106 << 2) | (byte107 >>> 6);\n        final long byte108 = blocks[blocksOffset++] & 0xFF;\n        final long byte109 = blocks[blocksOffset++] & 0xFF;\n        final long byte110 = blocks[blocksOffset++] & 0xFF;\n        final long byte111 = blocks[blocksOffset++] & 0xFF;\n        final long byte112 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte107 & 63) << 33) | (byte108 << 25) | (byte109 << 17) | (byte110 << 9) | (byte111 << 1) | (byte112 >>> 7);\n        final long byte113 = blocks[blocksOffset++] & 0xFF;\n        final long byte114 = blocks[blocksOffset++] & 0xFF;\n        final long byte115 = blocks[blocksOffset++] & 0xFF;\n        final long byte116 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte112 & 127) << 32) | (byte113 << 24) | (byte114 << 16) | (byte115 << 8) | byte116;\n        final long byte117 = blocks[blocksOffset++] & 0xFF;\n        final long byte118 = blocks[blocksOffset++] & 0xFF;\n        final long byte119 = blocks[blocksOffset++] & 0xFF;\n        final long byte120 = blocks[blocksOffset++] & 0xFF;\n        final long byte121 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte117 << 31) | (byte118 << 23) | (byte119 << 15) | (byte120 << 7) | (byte121 >>> 1);\n        final long byte122 = blocks[blocksOffset++] & 0xFF;\n        final long byte123 = blocks[blocksOffset++] & 0xFF;\n        final long byte124 = blocks[blocksOffset++] & 0xFF;\n        final long byte125 = blocks[blocksOffset++] & 0xFF;\n        final long byte126 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte121 & 1) << 38) | (byte122 << 30) | (byte123 << 22) | (byte124 << 14) | (byte125 << 6) | (byte126 >>> 2);\n        final long byte127 = blocks[blocksOffset++] & 0xFF;\n        final long byte128 = blocks[blocksOffset++] & 0xFF;\n        final long byte129 = blocks[blocksOffset++] & 0xFF;\n        final long byte130 = blocks[blocksOffset++] & 0xFF;\n        final long byte131 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte126 & 3) << 37) | (byte127 << 29) | (byte128 << 21) | (byte129 << 13) | (byte130 << 5) | (byte131 >>> 3);\n        final long byte132 = blocks[blocksOffset++] & 0xFF;\n        final long byte133 = blocks[blocksOffset++] & 0xFF;\n        final long byte134 = blocks[blocksOffset++] & 0xFF;\n        final long byte135 = blocks[blocksOffset++] & 0xFF;\n        final long byte136 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte131 & 7) << 36) | (byte132 << 28) | (byte133 << 20) | (byte134 << 12) | (byte135 << 4) | (byte136 >>> 4);\n        final long byte137 = blocks[blocksOffset++] & 0xFF;\n        final long byte138 = blocks[blocksOffset++] & 0xFF;\n        final long byte139 = blocks[blocksOffset++] & 0xFF;\n        final long byte140 = blocks[blocksOffset++] & 0xFF;\n        final long byte141 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte136 & 15) << 35) | (byte137 << 27) | (byte138 << 19) | (byte139 << 11) | (byte140 << 3) | (byte141 >>> 5);\n        final long byte142 = blocks[blocksOffset++] & 0xFF;\n        final long byte143 = blocks[blocksOffset++] & 0xFF;\n        final long byte144 = blocks[blocksOffset++] & 0xFF;\n        final long byte145 = blocks[blocksOffset++] & 0xFF;\n        final long byte146 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte141 & 31) << 34) | (byte142 << 26) | (byte143 << 18) | (byte144 << 10) | (byte145 << 2) | (byte146 >>> 6);\n        final long byte147 = blocks[blocksOffset++] & 0xFF;\n        final long byte148 = blocks[blocksOffset++] & 0xFF;\n        final long byte149 = blocks[blocksOffset++] & 0xFF;\n        final long byte150 = blocks[blocksOffset++] & 0xFF;\n        final long byte151 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte146 & 63) << 33) | (byte147 << 25) | (byte148 << 17) | (byte149 << 9) | (byte150 << 1) | (byte151 >>> 7);\n        final long byte152 = blocks[blocksOffset++] & 0xFF;\n        final long byte153 = blocks[blocksOffset++] & 0xFF;\n        final long byte154 = blocks[blocksOffset++] & 0xFF;\n        final long byte155 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte151 & 127) << 32) | (byte152 << 24) | (byte153 << 16) | (byte154 << 8) | byte155;\n        final long byte156 = blocks[blocksOffset++] & 0xFF;\n        final long byte157 = blocks[blocksOffset++] & 0xFF;\n        final long byte158 = blocks[blocksOffset++] & 0xFF;\n        final long byte159 = blocks[blocksOffset++] & 0xFF;\n        final long byte160 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte156 << 31) | (byte157 << 23) | (byte158 << 15) | (byte159 << 7) | (byte160 >>> 1);\n        final long byte161 = blocks[blocksOffset++] & 0xFF;\n        final long byte162 = blocks[blocksOffset++] & 0xFF;\n        final long byte163 = blocks[blocksOffset++] & 0xFF;\n        final long byte164 = blocks[blocksOffset++] & 0xFF;\n        final long byte165 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte160 & 1) << 38) | (byte161 << 30) | (byte162 << 22) | (byte163 << 14) | (byte164 << 6) | (byte165 >>> 2);\n        final long byte166 = blocks[blocksOffset++] & 0xFF;\n        final long byte167 = blocks[blocksOffset++] & 0xFF;\n        final long byte168 = blocks[blocksOffset++] & 0xFF;\n        final long byte169 = blocks[blocksOffset++] & 0xFF;\n        final long byte170 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte165 & 3) << 37) | (byte166 << 29) | (byte167 << 21) | (byte168 << 13) | (byte169 << 5) | (byte170 >>> 3);\n        final long byte171 = blocks[blocksOffset++] & 0xFF;\n        final long byte172 = blocks[blocksOffset++] & 0xFF;\n        final long byte173 = blocks[blocksOffset++] & 0xFF;\n        final long byte174 = blocks[blocksOffset++] & 0xFF;\n        final long byte175 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte170 & 7) << 36) | (byte171 << 28) | (byte172 << 20) | (byte173 << 12) | (byte174 << 4) | (byte175 >>> 4);\n        final long byte176 = blocks[blocksOffset++] & 0xFF;\n        final long byte177 = blocks[blocksOffset++] & 0xFF;\n        final long byte178 = blocks[blocksOffset++] & 0xFF;\n        final long byte179 = blocks[blocksOffset++] & 0xFF;\n        final long byte180 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte175 & 15) << 35) | (byte176 << 27) | (byte177 << 19) | (byte178 << 11) | (byte179 << 3) | (byte180 >>> 5);\n        final long byte181 = blocks[blocksOffset++] & 0xFF;\n        final long byte182 = blocks[blocksOffset++] & 0xFF;\n        final long byte183 = blocks[blocksOffset++] & 0xFF;\n        final long byte184 = blocks[blocksOffset++] & 0xFF;\n        final long byte185 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte180 & 31) << 34) | (byte181 << 26) | (byte182 << 18) | (byte183 << 10) | (byte184 << 2) | (byte185 >>> 6);\n        final long byte186 = blocks[blocksOffset++] & 0xFF;\n        final long byte187 = blocks[blocksOffset++] & 0xFF;\n        final long byte188 = blocks[blocksOffset++] & 0xFF;\n        final long byte189 = blocks[blocksOffset++] & 0xFF;\n        final long byte190 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte185 & 63) << 33) | (byte186 << 25) | (byte187 << 17) | (byte188 << 9) | (byte189 << 1) | (byte190 >>> 7);\n        final long byte191 = blocks[blocksOffset++] & 0xFF;\n        final long byte192 = blocks[blocksOffset++] & 0xFF;\n        final long byte193 = blocks[blocksOffset++] & 0xFF;\n        final long byte194 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte190 & 127) << 32) | (byte191 << 24) | (byte192 << 16) | (byte193 << 8) | byte194;\n        final long byte195 = blocks[blocksOffset++] & 0xFF;\n        final long byte196 = blocks[blocksOffset++] & 0xFF;\n        final long byte197 = blocks[blocksOffset++] & 0xFF;\n        final long byte198 = blocks[blocksOffset++] & 0xFF;\n        final long byte199 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte195 << 31) | (byte196 << 23) | (byte197 << 15) | (byte198 << 7) | (byte199 >>> 1);\n        final long byte200 = blocks[blocksOffset++] & 0xFF;\n        final long byte201 = blocks[blocksOffset++] & 0xFF;\n        final long byte202 = blocks[blocksOffset++] & 0xFF;\n        final long byte203 = blocks[blocksOffset++] & 0xFF;\n        final long byte204 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte199 & 1) << 38) | (byte200 << 30) | (byte201 << 22) | (byte202 << 14) | (byte203 << 6) | (byte204 >>> 2);\n        final long byte205 = blocks[blocksOffset++] & 0xFF;\n        final long byte206 = blocks[blocksOffset++] & 0xFF;\n        final long byte207 = blocks[blocksOffset++] & 0xFF;\n        final long byte208 = blocks[blocksOffset++] & 0xFF;\n        final long byte209 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte204 & 3) << 37) | (byte205 << 29) | (byte206 << 21) | (byte207 << 13) | (byte208 << 5) | (byte209 >>> 3);\n        final long byte210 = blocks[blocksOffset++] & 0xFF;\n        final long byte211 = blocks[blocksOffset++] & 0xFF;\n        final long byte212 = blocks[blocksOffset++] & 0xFF;\n        final long byte213 = blocks[blocksOffset++] & 0xFF;\n        final long byte214 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte209 & 7) << 36) | (byte210 << 28) | (byte211 << 20) | (byte212 << 12) | (byte213 << 4) | (byte214 >>> 4);\n        final long byte215 = blocks[blocksOffset++] & 0xFF;\n        final long byte216 = blocks[blocksOffset++] & 0xFF;\n        final long byte217 = blocks[blocksOffset++] & 0xFF;\n        final long byte218 = blocks[blocksOffset++] & 0xFF;\n        final long byte219 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte214 & 15) << 35) | (byte215 << 27) | (byte216 << 19) | (byte217 << 11) | (byte218 << 3) | (byte219 >>> 5);\n        final long byte220 = blocks[blocksOffset++] & 0xFF;\n        final long byte221 = blocks[blocksOffset++] & 0xFF;\n        final long byte222 = blocks[blocksOffset++] & 0xFF;\n        final long byte223 = blocks[blocksOffset++] & 0xFF;\n        final long byte224 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte219 & 31) << 34) | (byte220 << 26) | (byte221 << 18) | (byte222 << 10) | (byte223 << 2) | (byte224 >>> 6);\n        final long byte225 = blocks[blocksOffset++] & 0xFF;\n        final long byte226 = blocks[blocksOffset++] & 0xFF;\n        final long byte227 = blocks[blocksOffset++] & 0xFF;\n        final long byte228 = blocks[blocksOffset++] & 0xFF;\n        final long byte229 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte224 & 63) << 33) | (byte225 << 25) | (byte226 << 17) | (byte227 << 9) | (byte228 << 1) | (byte229 >>> 7);\n        final long byte230 = blocks[blocksOffset++] & 0xFF;\n        final long byte231 = blocks[blocksOffset++] & 0xFF;\n        final long byte232 = blocks[blocksOffset++] & 0xFF;\n        final long byte233 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte229 & 127) << 32) | (byte230 << 24) | (byte231 << 16) | (byte232 << 8) | byte233;\n        final long byte234 = blocks[blocksOffset++] & 0xFF;\n        final long byte235 = blocks[blocksOffset++] & 0xFF;\n        final long byte236 = blocks[blocksOffset++] & 0xFF;\n        final long byte237 = blocks[blocksOffset++] & 0xFF;\n        final long byte238 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte234 << 31) | (byte235 << 23) | (byte236 << 15) | (byte237 << 7) | (byte238 >>> 1);\n        final long byte239 = blocks[blocksOffset++] & 0xFF;\n        final long byte240 = blocks[blocksOffset++] & 0xFF;\n        final long byte241 = blocks[blocksOffset++] & 0xFF;\n        final long byte242 = blocks[blocksOffset++] & 0xFF;\n        final long byte243 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte238 & 1) << 38) | (byte239 << 30) | (byte240 << 22) | (byte241 << 14) | (byte242 << 6) | (byte243 >>> 2);\n        final long byte244 = blocks[blocksOffset++] & 0xFF;\n        final long byte245 = blocks[blocksOffset++] & 0xFF;\n        final long byte246 = blocks[blocksOffset++] & 0xFF;\n        final long byte247 = blocks[blocksOffset++] & 0xFF;\n        final long byte248 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte243 & 3) << 37) | (byte244 << 29) | (byte245 << 21) | (byte246 << 13) | (byte247 << 5) | (byte248 >>> 3);\n        final long byte249 = blocks[blocksOffset++] & 0xFF;\n        final long byte250 = blocks[blocksOffset++] & 0xFF;\n        final long byte251 = blocks[blocksOffset++] & 0xFF;\n        final long byte252 = blocks[blocksOffset++] & 0xFF;\n        final long byte253 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte248 & 7) << 36) | (byte249 << 28) | (byte250 << 20) | (byte251 << 12) | (byte252 << 4) | (byte253 >>> 4);\n        final long byte254 = blocks[blocksOffset++] & 0xFF;\n        final long byte255 = blocks[blocksOffset++] & 0xFF;\n        final long byte256 = blocks[blocksOffset++] & 0xFF;\n        final long byte257 = blocks[blocksOffset++] & 0xFF;\n        final long byte258 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte253 & 15) << 35) | (byte254 << 27) | (byte255 << 19) | (byte256 << 11) | (byte257 << 3) | (byte258 >>> 5);\n        final long byte259 = blocks[blocksOffset++] & 0xFF;\n        final long byte260 = blocks[blocksOffset++] & 0xFF;\n        final long byte261 = blocks[blocksOffset++] & 0xFF;\n        final long byte262 = blocks[blocksOffset++] & 0xFF;\n        final long byte263 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte258 & 31) << 34) | (byte259 << 26) | (byte260 << 18) | (byte261 << 10) | (byte262 << 2) | (byte263 >>> 6);\n        final long byte264 = blocks[blocksOffset++] & 0xFF;\n        final long byte265 = blocks[blocksOffset++] & 0xFF;\n        final long byte266 = blocks[blocksOffset++] & 0xFF;\n        final long byte267 = blocks[blocksOffset++] & 0xFF;\n        final long byte268 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte263 & 63) << 33) | (byte264 << 25) | (byte265 << 17) | (byte266 << 9) | (byte267 << 1) | (byte268 >>> 7);\n        final long byte269 = blocks[blocksOffset++] & 0xFF;\n        final long byte270 = blocks[blocksOffset++] & 0xFF;\n        final long byte271 = blocks[blocksOffset++] & 0xFF;\n        final long byte272 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte268 & 127) << 32) | (byte269 << 24) | (byte270 << 16) | (byte271 << 8) | byte272;\n        final long byte273 = blocks[blocksOffset++] & 0xFF;\n        final long byte274 = blocks[blocksOffset++] & 0xFF;\n        final long byte275 = blocks[blocksOffset++] & 0xFF;\n        final long byte276 = blocks[blocksOffset++] & 0xFF;\n        final long byte277 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte273 << 31) | (byte274 << 23) | (byte275 << 15) | (byte276 << 7) | (byte277 >>> 1);\n        final long byte278 = blocks[blocksOffset++] & 0xFF;\n        final long byte279 = blocks[blocksOffset++] & 0xFF;\n        final long byte280 = blocks[blocksOffset++] & 0xFF;\n        final long byte281 = blocks[blocksOffset++] & 0xFF;\n        final long byte282 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte277 & 1) << 38) | (byte278 << 30) | (byte279 << 22) | (byte280 << 14) | (byte281 << 6) | (byte282 >>> 2);\n        final long byte283 = blocks[blocksOffset++] & 0xFF;\n        final long byte284 = blocks[blocksOffset++] & 0xFF;\n        final long byte285 = blocks[blocksOffset++] & 0xFF;\n        final long byte286 = blocks[blocksOffset++] & 0xFF;\n        final long byte287 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte282 & 3) << 37) | (byte283 << 29) | (byte284 << 21) | (byte285 << 13) | (byte286 << 5) | (byte287 >>> 3);\n        final long byte288 = blocks[blocksOffset++] & 0xFF;\n        final long byte289 = blocks[blocksOffset++] & 0xFF;\n        final long byte290 = blocks[blocksOffset++] & 0xFF;\n        final long byte291 = blocks[blocksOffset++] & 0xFF;\n        final long byte292 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte287 & 7) << 36) | (byte288 << 28) | (byte289 << 20) | (byte290 << 12) | (byte291 << 4) | (byte292 >>> 4);\n        final long byte293 = blocks[blocksOffset++] & 0xFF;\n        final long byte294 = blocks[blocksOffset++] & 0xFF;\n        final long byte295 = blocks[blocksOffset++] & 0xFF;\n        final long byte296 = blocks[blocksOffset++] & 0xFF;\n        final long byte297 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte292 & 15) << 35) | (byte293 << 27) | (byte294 << 19) | (byte295 << 11) | (byte296 << 3) | (byte297 >>> 5);\n        final long byte298 = blocks[blocksOffset++] & 0xFF;\n        final long byte299 = blocks[blocksOffset++] & 0xFF;\n        final long byte300 = blocks[blocksOffset++] & 0xFF;\n        final long byte301 = blocks[blocksOffset++] & 0xFF;\n        final long byte302 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte297 & 31) << 34) | (byte298 << 26) | (byte299 << 18) | (byte300 << 10) | (byte301 << 2) | (byte302 >>> 6);\n        final long byte303 = blocks[blocksOffset++] & 0xFF;\n        final long byte304 = blocks[blocksOffset++] & 0xFF;\n        final long byte305 = blocks[blocksOffset++] & 0xFF;\n        final long byte306 = blocks[blocksOffset++] & 0xFF;\n        final long byte307 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte302 & 63) << 33) | (byte303 << 25) | (byte304 << 17) | (byte305 << 9) | (byte306 << 1) | (byte307 >>> 7);\n        final long byte308 = blocks[blocksOffset++] & 0xFF;\n        final long byte309 = blocks[blocksOffset++] & 0xFF;\n        final long byte310 = blocks[blocksOffset++] & 0xFF;\n        final long byte311 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte307 & 127) << 32) | (byte308 << 24) | (byte309 << 16) | (byte310 << 8) | byte311;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58d488e3fd72dfc95fa76fcb24f58e90c343323c","date":1346235723,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked39#decode(byte[],int,long[],int,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 31) | (byte1 << 23) | (byte2 << 15) | (byte3 << 7) | (byte4 >>> 1);\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte4 & 1) << 38) | (byte5 << 30) | (byte6 << 22) | (byte7 << 14) | (byte8 << 6) | (byte9 >>> 2);\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte9 & 3) << 37) | (byte10 << 29) | (byte11 << 21) | (byte12 << 13) | (byte13 << 5) | (byte14 >>> 3);\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte14 & 7) << 36) | (byte15 << 28) | (byte16 << 20) | (byte17 << 12) | (byte18 << 4) | (byte19 >>> 4);\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 15) << 35) | (byte20 << 27) | (byte21 << 19) | (byte22 << 11) | (byte23 << 3) | (byte24 >>> 5);\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte24 & 31) << 34) | (byte25 << 26) | (byte26 << 18) | (byte27 << 10) | (byte28 << 2) | (byte29 >>> 6);\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte29 & 63) << 33) | (byte30 << 25) | (byte31 << 17) | (byte32 << 9) | (byte33 << 1) | (byte34 >>> 7);\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte34 & 127) << 32) | (byte35 << 24) | (byte36 << 16) | (byte37 << 8) | byte38;\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte39 << 31) | (byte40 << 23) | (byte41 << 15) | (byte42 << 7) | (byte43 >>> 1);\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte43 & 1) << 38) | (byte44 << 30) | (byte45 << 22) | (byte46 << 14) | (byte47 << 6) | (byte48 >>> 2);\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte48 & 3) << 37) | (byte49 << 29) | (byte50 << 21) | (byte51 << 13) | (byte52 << 5) | (byte53 >>> 3);\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        final long byte56 = blocks[blocksOffset++] & 0xFF;\n        final long byte57 = blocks[blocksOffset++] & 0xFF;\n        final long byte58 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte53 & 7) << 36) | (byte54 << 28) | (byte55 << 20) | (byte56 << 12) | (byte57 << 4) | (byte58 >>> 4);\n        final long byte59 = blocks[blocksOffset++] & 0xFF;\n        final long byte60 = blocks[blocksOffset++] & 0xFF;\n        final long byte61 = blocks[blocksOffset++] & 0xFF;\n        final long byte62 = blocks[blocksOffset++] & 0xFF;\n        final long byte63 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte58 & 15) << 35) | (byte59 << 27) | (byte60 << 19) | (byte61 << 11) | (byte62 << 3) | (byte63 >>> 5);\n        final long byte64 = blocks[blocksOffset++] & 0xFF;\n        final long byte65 = blocks[blocksOffset++] & 0xFF;\n        final long byte66 = blocks[blocksOffset++] & 0xFF;\n        final long byte67 = blocks[blocksOffset++] & 0xFF;\n        final long byte68 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte63 & 31) << 34) | (byte64 << 26) | (byte65 << 18) | (byte66 << 10) | (byte67 << 2) | (byte68 >>> 6);\n        final long byte69 = blocks[blocksOffset++] & 0xFF;\n        final long byte70 = blocks[blocksOffset++] & 0xFF;\n        final long byte71 = blocks[blocksOffset++] & 0xFF;\n        final long byte72 = blocks[blocksOffset++] & 0xFF;\n        final long byte73 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte68 & 63) << 33) | (byte69 << 25) | (byte70 << 17) | (byte71 << 9) | (byte72 << 1) | (byte73 >>> 7);\n        final long byte74 = blocks[blocksOffset++] & 0xFF;\n        final long byte75 = blocks[blocksOffset++] & 0xFF;\n        final long byte76 = blocks[blocksOffset++] & 0xFF;\n        final long byte77 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte73 & 127) << 32) | (byte74 << 24) | (byte75 << 16) | (byte76 << 8) | byte77;\n        final long byte78 = blocks[blocksOffset++] & 0xFF;\n        final long byte79 = blocks[blocksOffset++] & 0xFF;\n        final long byte80 = blocks[blocksOffset++] & 0xFF;\n        final long byte81 = blocks[blocksOffset++] & 0xFF;\n        final long byte82 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte78 << 31) | (byte79 << 23) | (byte80 << 15) | (byte81 << 7) | (byte82 >>> 1);\n        final long byte83 = blocks[blocksOffset++] & 0xFF;\n        final long byte84 = blocks[blocksOffset++] & 0xFF;\n        final long byte85 = blocks[blocksOffset++] & 0xFF;\n        final long byte86 = blocks[blocksOffset++] & 0xFF;\n        final long byte87 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte82 & 1) << 38) | (byte83 << 30) | (byte84 << 22) | (byte85 << 14) | (byte86 << 6) | (byte87 >>> 2);\n        final long byte88 = blocks[blocksOffset++] & 0xFF;\n        final long byte89 = blocks[blocksOffset++] & 0xFF;\n        final long byte90 = blocks[blocksOffset++] & 0xFF;\n        final long byte91 = blocks[blocksOffset++] & 0xFF;\n        final long byte92 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte87 & 3) << 37) | (byte88 << 29) | (byte89 << 21) | (byte90 << 13) | (byte91 << 5) | (byte92 >>> 3);\n        final long byte93 = blocks[blocksOffset++] & 0xFF;\n        final long byte94 = blocks[blocksOffset++] & 0xFF;\n        final long byte95 = blocks[blocksOffset++] & 0xFF;\n        final long byte96 = blocks[blocksOffset++] & 0xFF;\n        final long byte97 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte92 & 7) << 36) | (byte93 << 28) | (byte94 << 20) | (byte95 << 12) | (byte96 << 4) | (byte97 >>> 4);\n        final long byte98 = blocks[blocksOffset++] & 0xFF;\n        final long byte99 = blocks[blocksOffset++] & 0xFF;\n        final long byte100 = blocks[blocksOffset++] & 0xFF;\n        final long byte101 = blocks[blocksOffset++] & 0xFF;\n        final long byte102 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte97 & 15) << 35) | (byte98 << 27) | (byte99 << 19) | (byte100 << 11) | (byte101 << 3) | (byte102 >>> 5);\n        final long byte103 = blocks[blocksOffset++] & 0xFF;\n        final long byte104 = blocks[blocksOffset++] & 0xFF;\n        final long byte105 = blocks[blocksOffset++] & 0xFF;\n        final long byte106 = blocks[blocksOffset++] & 0xFF;\n        final long byte107 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte102 & 31) << 34) | (byte103 << 26) | (byte104 << 18) | (byte105 << 10) | (byte106 << 2) | (byte107 >>> 6);\n        final long byte108 = blocks[blocksOffset++] & 0xFF;\n        final long byte109 = blocks[blocksOffset++] & 0xFF;\n        final long byte110 = blocks[blocksOffset++] & 0xFF;\n        final long byte111 = blocks[blocksOffset++] & 0xFF;\n        final long byte112 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte107 & 63) << 33) | (byte108 << 25) | (byte109 << 17) | (byte110 << 9) | (byte111 << 1) | (byte112 >>> 7);\n        final long byte113 = blocks[blocksOffset++] & 0xFF;\n        final long byte114 = blocks[blocksOffset++] & 0xFF;\n        final long byte115 = blocks[blocksOffset++] & 0xFF;\n        final long byte116 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte112 & 127) << 32) | (byte113 << 24) | (byte114 << 16) | (byte115 << 8) | byte116;\n        final long byte117 = blocks[blocksOffset++] & 0xFF;\n        final long byte118 = blocks[blocksOffset++] & 0xFF;\n        final long byte119 = blocks[blocksOffset++] & 0xFF;\n        final long byte120 = blocks[blocksOffset++] & 0xFF;\n        final long byte121 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte117 << 31) | (byte118 << 23) | (byte119 << 15) | (byte120 << 7) | (byte121 >>> 1);\n        final long byte122 = blocks[blocksOffset++] & 0xFF;\n        final long byte123 = blocks[blocksOffset++] & 0xFF;\n        final long byte124 = blocks[blocksOffset++] & 0xFF;\n        final long byte125 = blocks[blocksOffset++] & 0xFF;\n        final long byte126 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte121 & 1) << 38) | (byte122 << 30) | (byte123 << 22) | (byte124 << 14) | (byte125 << 6) | (byte126 >>> 2);\n        final long byte127 = blocks[blocksOffset++] & 0xFF;\n        final long byte128 = blocks[blocksOffset++] & 0xFF;\n        final long byte129 = blocks[blocksOffset++] & 0xFF;\n        final long byte130 = blocks[blocksOffset++] & 0xFF;\n        final long byte131 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte126 & 3) << 37) | (byte127 << 29) | (byte128 << 21) | (byte129 << 13) | (byte130 << 5) | (byte131 >>> 3);\n        final long byte132 = blocks[blocksOffset++] & 0xFF;\n        final long byte133 = blocks[blocksOffset++] & 0xFF;\n        final long byte134 = blocks[blocksOffset++] & 0xFF;\n        final long byte135 = blocks[blocksOffset++] & 0xFF;\n        final long byte136 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte131 & 7) << 36) | (byte132 << 28) | (byte133 << 20) | (byte134 << 12) | (byte135 << 4) | (byte136 >>> 4);\n        final long byte137 = blocks[blocksOffset++] & 0xFF;\n        final long byte138 = blocks[blocksOffset++] & 0xFF;\n        final long byte139 = blocks[blocksOffset++] & 0xFF;\n        final long byte140 = blocks[blocksOffset++] & 0xFF;\n        final long byte141 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte136 & 15) << 35) | (byte137 << 27) | (byte138 << 19) | (byte139 << 11) | (byte140 << 3) | (byte141 >>> 5);\n        final long byte142 = blocks[blocksOffset++] & 0xFF;\n        final long byte143 = blocks[blocksOffset++] & 0xFF;\n        final long byte144 = blocks[blocksOffset++] & 0xFF;\n        final long byte145 = blocks[blocksOffset++] & 0xFF;\n        final long byte146 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte141 & 31) << 34) | (byte142 << 26) | (byte143 << 18) | (byte144 << 10) | (byte145 << 2) | (byte146 >>> 6);\n        final long byte147 = blocks[blocksOffset++] & 0xFF;\n        final long byte148 = blocks[blocksOffset++] & 0xFF;\n        final long byte149 = blocks[blocksOffset++] & 0xFF;\n        final long byte150 = blocks[blocksOffset++] & 0xFF;\n        final long byte151 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte146 & 63) << 33) | (byte147 << 25) | (byte148 << 17) | (byte149 << 9) | (byte150 << 1) | (byte151 >>> 7);\n        final long byte152 = blocks[blocksOffset++] & 0xFF;\n        final long byte153 = blocks[blocksOffset++] & 0xFF;\n        final long byte154 = blocks[blocksOffset++] & 0xFF;\n        final long byte155 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte151 & 127) << 32) | (byte152 << 24) | (byte153 << 16) | (byte154 << 8) | byte155;\n        final long byte156 = blocks[blocksOffset++] & 0xFF;\n        final long byte157 = blocks[blocksOffset++] & 0xFF;\n        final long byte158 = blocks[blocksOffset++] & 0xFF;\n        final long byte159 = blocks[blocksOffset++] & 0xFF;\n        final long byte160 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte156 << 31) | (byte157 << 23) | (byte158 << 15) | (byte159 << 7) | (byte160 >>> 1);\n        final long byte161 = blocks[blocksOffset++] & 0xFF;\n        final long byte162 = blocks[blocksOffset++] & 0xFF;\n        final long byte163 = blocks[blocksOffset++] & 0xFF;\n        final long byte164 = blocks[blocksOffset++] & 0xFF;\n        final long byte165 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte160 & 1) << 38) | (byte161 << 30) | (byte162 << 22) | (byte163 << 14) | (byte164 << 6) | (byte165 >>> 2);\n        final long byte166 = blocks[blocksOffset++] & 0xFF;\n        final long byte167 = blocks[blocksOffset++] & 0xFF;\n        final long byte168 = blocks[blocksOffset++] & 0xFF;\n        final long byte169 = blocks[blocksOffset++] & 0xFF;\n        final long byte170 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte165 & 3) << 37) | (byte166 << 29) | (byte167 << 21) | (byte168 << 13) | (byte169 << 5) | (byte170 >>> 3);\n        final long byte171 = blocks[blocksOffset++] & 0xFF;\n        final long byte172 = blocks[blocksOffset++] & 0xFF;\n        final long byte173 = blocks[blocksOffset++] & 0xFF;\n        final long byte174 = blocks[blocksOffset++] & 0xFF;\n        final long byte175 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte170 & 7) << 36) | (byte171 << 28) | (byte172 << 20) | (byte173 << 12) | (byte174 << 4) | (byte175 >>> 4);\n        final long byte176 = blocks[blocksOffset++] & 0xFF;\n        final long byte177 = blocks[blocksOffset++] & 0xFF;\n        final long byte178 = blocks[blocksOffset++] & 0xFF;\n        final long byte179 = blocks[blocksOffset++] & 0xFF;\n        final long byte180 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte175 & 15) << 35) | (byte176 << 27) | (byte177 << 19) | (byte178 << 11) | (byte179 << 3) | (byte180 >>> 5);\n        final long byte181 = blocks[blocksOffset++] & 0xFF;\n        final long byte182 = blocks[blocksOffset++] & 0xFF;\n        final long byte183 = blocks[blocksOffset++] & 0xFF;\n        final long byte184 = blocks[blocksOffset++] & 0xFF;\n        final long byte185 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte180 & 31) << 34) | (byte181 << 26) | (byte182 << 18) | (byte183 << 10) | (byte184 << 2) | (byte185 >>> 6);\n        final long byte186 = blocks[blocksOffset++] & 0xFF;\n        final long byte187 = blocks[blocksOffset++] & 0xFF;\n        final long byte188 = blocks[blocksOffset++] & 0xFF;\n        final long byte189 = blocks[blocksOffset++] & 0xFF;\n        final long byte190 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte185 & 63) << 33) | (byte186 << 25) | (byte187 << 17) | (byte188 << 9) | (byte189 << 1) | (byte190 >>> 7);\n        final long byte191 = blocks[blocksOffset++] & 0xFF;\n        final long byte192 = blocks[blocksOffset++] & 0xFF;\n        final long byte193 = blocks[blocksOffset++] & 0xFF;\n        final long byte194 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte190 & 127) << 32) | (byte191 << 24) | (byte192 << 16) | (byte193 << 8) | byte194;\n        final long byte195 = blocks[blocksOffset++] & 0xFF;\n        final long byte196 = blocks[blocksOffset++] & 0xFF;\n        final long byte197 = blocks[blocksOffset++] & 0xFF;\n        final long byte198 = blocks[blocksOffset++] & 0xFF;\n        final long byte199 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte195 << 31) | (byte196 << 23) | (byte197 << 15) | (byte198 << 7) | (byte199 >>> 1);\n        final long byte200 = blocks[blocksOffset++] & 0xFF;\n        final long byte201 = blocks[blocksOffset++] & 0xFF;\n        final long byte202 = blocks[blocksOffset++] & 0xFF;\n        final long byte203 = blocks[blocksOffset++] & 0xFF;\n        final long byte204 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte199 & 1) << 38) | (byte200 << 30) | (byte201 << 22) | (byte202 << 14) | (byte203 << 6) | (byte204 >>> 2);\n        final long byte205 = blocks[blocksOffset++] & 0xFF;\n        final long byte206 = blocks[blocksOffset++] & 0xFF;\n        final long byte207 = blocks[blocksOffset++] & 0xFF;\n        final long byte208 = blocks[blocksOffset++] & 0xFF;\n        final long byte209 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte204 & 3) << 37) | (byte205 << 29) | (byte206 << 21) | (byte207 << 13) | (byte208 << 5) | (byte209 >>> 3);\n        final long byte210 = blocks[blocksOffset++] & 0xFF;\n        final long byte211 = blocks[blocksOffset++] & 0xFF;\n        final long byte212 = blocks[blocksOffset++] & 0xFF;\n        final long byte213 = blocks[blocksOffset++] & 0xFF;\n        final long byte214 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte209 & 7) << 36) | (byte210 << 28) | (byte211 << 20) | (byte212 << 12) | (byte213 << 4) | (byte214 >>> 4);\n        final long byte215 = blocks[blocksOffset++] & 0xFF;\n        final long byte216 = blocks[blocksOffset++] & 0xFF;\n        final long byte217 = blocks[blocksOffset++] & 0xFF;\n        final long byte218 = blocks[blocksOffset++] & 0xFF;\n        final long byte219 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte214 & 15) << 35) | (byte215 << 27) | (byte216 << 19) | (byte217 << 11) | (byte218 << 3) | (byte219 >>> 5);\n        final long byte220 = blocks[blocksOffset++] & 0xFF;\n        final long byte221 = blocks[blocksOffset++] & 0xFF;\n        final long byte222 = blocks[blocksOffset++] & 0xFF;\n        final long byte223 = blocks[blocksOffset++] & 0xFF;\n        final long byte224 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte219 & 31) << 34) | (byte220 << 26) | (byte221 << 18) | (byte222 << 10) | (byte223 << 2) | (byte224 >>> 6);\n        final long byte225 = blocks[blocksOffset++] & 0xFF;\n        final long byte226 = blocks[blocksOffset++] & 0xFF;\n        final long byte227 = blocks[blocksOffset++] & 0xFF;\n        final long byte228 = blocks[blocksOffset++] & 0xFF;\n        final long byte229 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte224 & 63) << 33) | (byte225 << 25) | (byte226 << 17) | (byte227 << 9) | (byte228 << 1) | (byte229 >>> 7);\n        final long byte230 = blocks[blocksOffset++] & 0xFF;\n        final long byte231 = blocks[blocksOffset++] & 0xFF;\n        final long byte232 = blocks[blocksOffset++] & 0xFF;\n        final long byte233 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte229 & 127) << 32) | (byte230 << 24) | (byte231 << 16) | (byte232 << 8) | byte233;\n        final long byte234 = blocks[blocksOffset++] & 0xFF;\n        final long byte235 = blocks[blocksOffset++] & 0xFF;\n        final long byte236 = blocks[blocksOffset++] & 0xFF;\n        final long byte237 = blocks[blocksOffset++] & 0xFF;\n        final long byte238 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte234 << 31) | (byte235 << 23) | (byte236 << 15) | (byte237 << 7) | (byte238 >>> 1);\n        final long byte239 = blocks[blocksOffset++] & 0xFF;\n        final long byte240 = blocks[blocksOffset++] & 0xFF;\n        final long byte241 = blocks[blocksOffset++] & 0xFF;\n        final long byte242 = blocks[blocksOffset++] & 0xFF;\n        final long byte243 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte238 & 1) << 38) | (byte239 << 30) | (byte240 << 22) | (byte241 << 14) | (byte242 << 6) | (byte243 >>> 2);\n        final long byte244 = blocks[blocksOffset++] & 0xFF;\n        final long byte245 = blocks[blocksOffset++] & 0xFF;\n        final long byte246 = blocks[blocksOffset++] & 0xFF;\n        final long byte247 = blocks[blocksOffset++] & 0xFF;\n        final long byte248 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte243 & 3) << 37) | (byte244 << 29) | (byte245 << 21) | (byte246 << 13) | (byte247 << 5) | (byte248 >>> 3);\n        final long byte249 = blocks[blocksOffset++] & 0xFF;\n        final long byte250 = blocks[blocksOffset++] & 0xFF;\n        final long byte251 = blocks[blocksOffset++] & 0xFF;\n        final long byte252 = blocks[blocksOffset++] & 0xFF;\n        final long byte253 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte248 & 7) << 36) | (byte249 << 28) | (byte250 << 20) | (byte251 << 12) | (byte252 << 4) | (byte253 >>> 4);\n        final long byte254 = blocks[blocksOffset++] & 0xFF;\n        final long byte255 = blocks[blocksOffset++] & 0xFF;\n        final long byte256 = blocks[blocksOffset++] & 0xFF;\n        final long byte257 = blocks[blocksOffset++] & 0xFF;\n        final long byte258 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte253 & 15) << 35) | (byte254 << 27) | (byte255 << 19) | (byte256 << 11) | (byte257 << 3) | (byte258 >>> 5);\n        final long byte259 = blocks[blocksOffset++] & 0xFF;\n        final long byte260 = blocks[blocksOffset++] & 0xFF;\n        final long byte261 = blocks[blocksOffset++] & 0xFF;\n        final long byte262 = blocks[blocksOffset++] & 0xFF;\n        final long byte263 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte258 & 31) << 34) | (byte259 << 26) | (byte260 << 18) | (byte261 << 10) | (byte262 << 2) | (byte263 >>> 6);\n        final long byte264 = blocks[blocksOffset++] & 0xFF;\n        final long byte265 = blocks[blocksOffset++] & 0xFF;\n        final long byte266 = blocks[blocksOffset++] & 0xFF;\n        final long byte267 = blocks[blocksOffset++] & 0xFF;\n        final long byte268 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte263 & 63) << 33) | (byte264 << 25) | (byte265 << 17) | (byte266 << 9) | (byte267 << 1) | (byte268 >>> 7);\n        final long byte269 = blocks[blocksOffset++] & 0xFF;\n        final long byte270 = blocks[blocksOffset++] & 0xFF;\n        final long byte271 = blocks[blocksOffset++] & 0xFF;\n        final long byte272 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte268 & 127) << 32) | (byte269 << 24) | (byte270 << 16) | (byte271 << 8) | byte272;\n        final long byte273 = blocks[blocksOffset++] & 0xFF;\n        final long byte274 = blocks[blocksOffset++] & 0xFF;\n        final long byte275 = blocks[blocksOffset++] & 0xFF;\n        final long byte276 = blocks[blocksOffset++] & 0xFF;\n        final long byte277 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte273 << 31) | (byte274 << 23) | (byte275 << 15) | (byte276 << 7) | (byte277 >>> 1);\n        final long byte278 = blocks[blocksOffset++] & 0xFF;\n        final long byte279 = blocks[blocksOffset++] & 0xFF;\n        final long byte280 = blocks[blocksOffset++] & 0xFF;\n        final long byte281 = blocks[blocksOffset++] & 0xFF;\n        final long byte282 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte277 & 1) << 38) | (byte278 << 30) | (byte279 << 22) | (byte280 << 14) | (byte281 << 6) | (byte282 >>> 2);\n        final long byte283 = blocks[blocksOffset++] & 0xFF;\n        final long byte284 = blocks[blocksOffset++] & 0xFF;\n        final long byte285 = blocks[blocksOffset++] & 0xFF;\n        final long byte286 = blocks[blocksOffset++] & 0xFF;\n        final long byte287 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte282 & 3) << 37) | (byte283 << 29) | (byte284 << 21) | (byte285 << 13) | (byte286 << 5) | (byte287 >>> 3);\n        final long byte288 = blocks[blocksOffset++] & 0xFF;\n        final long byte289 = blocks[blocksOffset++] & 0xFF;\n        final long byte290 = blocks[blocksOffset++] & 0xFF;\n        final long byte291 = blocks[blocksOffset++] & 0xFF;\n        final long byte292 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte287 & 7) << 36) | (byte288 << 28) | (byte289 << 20) | (byte290 << 12) | (byte291 << 4) | (byte292 >>> 4);\n        final long byte293 = blocks[blocksOffset++] & 0xFF;\n        final long byte294 = blocks[blocksOffset++] & 0xFF;\n        final long byte295 = blocks[blocksOffset++] & 0xFF;\n        final long byte296 = blocks[blocksOffset++] & 0xFF;\n        final long byte297 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte292 & 15) << 35) | (byte293 << 27) | (byte294 << 19) | (byte295 << 11) | (byte296 << 3) | (byte297 >>> 5);\n        final long byte298 = blocks[blocksOffset++] & 0xFF;\n        final long byte299 = blocks[blocksOffset++] & 0xFF;\n        final long byte300 = blocks[blocksOffset++] & 0xFF;\n        final long byte301 = blocks[blocksOffset++] & 0xFF;\n        final long byte302 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte297 & 31) << 34) | (byte298 << 26) | (byte299 << 18) | (byte300 << 10) | (byte301 << 2) | (byte302 >>> 6);\n        final long byte303 = blocks[blocksOffset++] & 0xFF;\n        final long byte304 = blocks[blocksOffset++] & 0xFF;\n        final long byte305 = blocks[blocksOffset++] & 0xFF;\n        final long byte306 = blocks[blocksOffset++] & 0xFF;\n        final long byte307 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte302 & 63) << 33) | (byte303 << 25) | (byte304 << 17) | (byte305 << 9) | (byte306 << 1) | (byte307 >>> 7);\n        final long byte308 = blocks[blocksOffset++] & 0xFF;\n        final long byte309 = blocks[blocksOffset++] & 0xFF;\n        final long byte310 = blocks[blocksOffset++] & 0xFF;\n        final long byte311 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte307 & 127) << 32) | (byte308 << 24) | (byte309 << 16) | (byte310 << 8) | byte311;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked39#decode(byte[],int,long[],int,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 31) | (byte1 << 23) | (byte2 << 15) | (byte3 << 7) | (byte4 >>> 1);\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte4 & 1) << 38) | (byte5 << 30) | (byte6 << 22) | (byte7 << 14) | (byte8 << 6) | (byte9 >>> 2);\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte9 & 3) << 37) | (byte10 << 29) | (byte11 << 21) | (byte12 << 13) | (byte13 << 5) | (byte14 >>> 3);\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte14 & 7) << 36) | (byte15 << 28) | (byte16 << 20) | (byte17 << 12) | (byte18 << 4) | (byte19 >>> 4);\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte19 & 15) << 35) | (byte20 << 27) | (byte21 << 19) | (byte22 << 11) | (byte23 << 3) | (byte24 >>> 5);\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte24 & 31) << 34) | (byte25 << 26) | (byte26 << 18) | (byte27 << 10) | (byte28 << 2) | (byte29 >>> 6);\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte29 & 63) << 33) | (byte30 << 25) | (byte31 << 17) | (byte32 << 9) | (byte33 << 1) | (byte34 >>> 7);\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte34 & 127) << 32) | (byte35 << 24) | (byte36 << 16) | (byte37 << 8) | byte38;\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte39 << 31) | (byte40 << 23) | (byte41 << 15) | (byte42 << 7) | (byte43 >>> 1);\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte43 & 1) << 38) | (byte44 << 30) | (byte45 << 22) | (byte46 << 14) | (byte47 << 6) | (byte48 >>> 2);\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte48 & 3) << 37) | (byte49 << 29) | (byte50 << 21) | (byte51 << 13) | (byte52 << 5) | (byte53 >>> 3);\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        final long byte56 = blocks[blocksOffset++] & 0xFF;\n        final long byte57 = blocks[blocksOffset++] & 0xFF;\n        final long byte58 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte53 & 7) << 36) | (byte54 << 28) | (byte55 << 20) | (byte56 << 12) | (byte57 << 4) | (byte58 >>> 4);\n        final long byte59 = blocks[blocksOffset++] & 0xFF;\n        final long byte60 = blocks[blocksOffset++] & 0xFF;\n        final long byte61 = blocks[blocksOffset++] & 0xFF;\n        final long byte62 = blocks[blocksOffset++] & 0xFF;\n        final long byte63 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte58 & 15) << 35) | (byte59 << 27) | (byte60 << 19) | (byte61 << 11) | (byte62 << 3) | (byte63 >>> 5);\n        final long byte64 = blocks[blocksOffset++] & 0xFF;\n        final long byte65 = blocks[blocksOffset++] & 0xFF;\n        final long byte66 = blocks[blocksOffset++] & 0xFF;\n        final long byte67 = blocks[blocksOffset++] & 0xFF;\n        final long byte68 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte63 & 31) << 34) | (byte64 << 26) | (byte65 << 18) | (byte66 << 10) | (byte67 << 2) | (byte68 >>> 6);\n        final long byte69 = blocks[blocksOffset++] & 0xFF;\n        final long byte70 = blocks[blocksOffset++] & 0xFF;\n        final long byte71 = blocks[blocksOffset++] & 0xFF;\n        final long byte72 = blocks[blocksOffset++] & 0xFF;\n        final long byte73 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte68 & 63) << 33) | (byte69 << 25) | (byte70 << 17) | (byte71 << 9) | (byte72 << 1) | (byte73 >>> 7);\n        final long byte74 = blocks[blocksOffset++] & 0xFF;\n        final long byte75 = blocks[blocksOffset++] & 0xFF;\n        final long byte76 = blocks[blocksOffset++] & 0xFF;\n        final long byte77 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte73 & 127) << 32) | (byte74 << 24) | (byte75 << 16) | (byte76 << 8) | byte77;\n        final long byte78 = blocks[blocksOffset++] & 0xFF;\n        final long byte79 = blocks[blocksOffset++] & 0xFF;\n        final long byte80 = blocks[blocksOffset++] & 0xFF;\n        final long byte81 = blocks[blocksOffset++] & 0xFF;\n        final long byte82 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte78 << 31) | (byte79 << 23) | (byte80 << 15) | (byte81 << 7) | (byte82 >>> 1);\n        final long byte83 = blocks[blocksOffset++] & 0xFF;\n        final long byte84 = blocks[blocksOffset++] & 0xFF;\n        final long byte85 = blocks[blocksOffset++] & 0xFF;\n        final long byte86 = blocks[blocksOffset++] & 0xFF;\n        final long byte87 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte82 & 1) << 38) | (byte83 << 30) | (byte84 << 22) | (byte85 << 14) | (byte86 << 6) | (byte87 >>> 2);\n        final long byte88 = blocks[blocksOffset++] & 0xFF;\n        final long byte89 = blocks[blocksOffset++] & 0xFF;\n        final long byte90 = blocks[blocksOffset++] & 0xFF;\n        final long byte91 = blocks[blocksOffset++] & 0xFF;\n        final long byte92 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte87 & 3) << 37) | (byte88 << 29) | (byte89 << 21) | (byte90 << 13) | (byte91 << 5) | (byte92 >>> 3);\n        final long byte93 = blocks[blocksOffset++] & 0xFF;\n        final long byte94 = blocks[blocksOffset++] & 0xFF;\n        final long byte95 = blocks[blocksOffset++] & 0xFF;\n        final long byte96 = blocks[blocksOffset++] & 0xFF;\n        final long byte97 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte92 & 7) << 36) | (byte93 << 28) | (byte94 << 20) | (byte95 << 12) | (byte96 << 4) | (byte97 >>> 4);\n        final long byte98 = blocks[blocksOffset++] & 0xFF;\n        final long byte99 = blocks[blocksOffset++] & 0xFF;\n        final long byte100 = blocks[blocksOffset++] & 0xFF;\n        final long byte101 = blocks[blocksOffset++] & 0xFF;\n        final long byte102 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte97 & 15) << 35) | (byte98 << 27) | (byte99 << 19) | (byte100 << 11) | (byte101 << 3) | (byte102 >>> 5);\n        final long byte103 = blocks[blocksOffset++] & 0xFF;\n        final long byte104 = blocks[blocksOffset++] & 0xFF;\n        final long byte105 = blocks[blocksOffset++] & 0xFF;\n        final long byte106 = blocks[blocksOffset++] & 0xFF;\n        final long byte107 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte102 & 31) << 34) | (byte103 << 26) | (byte104 << 18) | (byte105 << 10) | (byte106 << 2) | (byte107 >>> 6);\n        final long byte108 = blocks[blocksOffset++] & 0xFF;\n        final long byte109 = blocks[blocksOffset++] & 0xFF;\n        final long byte110 = blocks[blocksOffset++] & 0xFF;\n        final long byte111 = blocks[blocksOffset++] & 0xFF;\n        final long byte112 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte107 & 63) << 33) | (byte108 << 25) | (byte109 << 17) | (byte110 << 9) | (byte111 << 1) | (byte112 >>> 7);\n        final long byte113 = blocks[blocksOffset++] & 0xFF;\n        final long byte114 = blocks[blocksOffset++] & 0xFF;\n        final long byte115 = blocks[blocksOffset++] & 0xFF;\n        final long byte116 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte112 & 127) << 32) | (byte113 << 24) | (byte114 << 16) | (byte115 << 8) | byte116;\n        final long byte117 = blocks[blocksOffset++] & 0xFF;\n        final long byte118 = blocks[blocksOffset++] & 0xFF;\n        final long byte119 = blocks[blocksOffset++] & 0xFF;\n        final long byte120 = blocks[blocksOffset++] & 0xFF;\n        final long byte121 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte117 << 31) | (byte118 << 23) | (byte119 << 15) | (byte120 << 7) | (byte121 >>> 1);\n        final long byte122 = blocks[blocksOffset++] & 0xFF;\n        final long byte123 = blocks[blocksOffset++] & 0xFF;\n        final long byte124 = blocks[blocksOffset++] & 0xFF;\n        final long byte125 = blocks[blocksOffset++] & 0xFF;\n        final long byte126 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte121 & 1) << 38) | (byte122 << 30) | (byte123 << 22) | (byte124 << 14) | (byte125 << 6) | (byte126 >>> 2);\n        final long byte127 = blocks[blocksOffset++] & 0xFF;\n        final long byte128 = blocks[blocksOffset++] & 0xFF;\n        final long byte129 = blocks[blocksOffset++] & 0xFF;\n        final long byte130 = blocks[blocksOffset++] & 0xFF;\n        final long byte131 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte126 & 3) << 37) | (byte127 << 29) | (byte128 << 21) | (byte129 << 13) | (byte130 << 5) | (byte131 >>> 3);\n        final long byte132 = blocks[blocksOffset++] & 0xFF;\n        final long byte133 = blocks[blocksOffset++] & 0xFF;\n        final long byte134 = blocks[blocksOffset++] & 0xFF;\n        final long byte135 = blocks[blocksOffset++] & 0xFF;\n        final long byte136 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte131 & 7) << 36) | (byte132 << 28) | (byte133 << 20) | (byte134 << 12) | (byte135 << 4) | (byte136 >>> 4);\n        final long byte137 = blocks[blocksOffset++] & 0xFF;\n        final long byte138 = blocks[blocksOffset++] & 0xFF;\n        final long byte139 = blocks[blocksOffset++] & 0xFF;\n        final long byte140 = blocks[blocksOffset++] & 0xFF;\n        final long byte141 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte136 & 15) << 35) | (byte137 << 27) | (byte138 << 19) | (byte139 << 11) | (byte140 << 3) | (byte141 >>> 5);\n        final long byte142 = blocks[blocksOffset++] & 0xFF;\n        final long byte143 = blocks[blocksOffset++] & 0xFF;\n        final long byte144 = blocks[blocksOffset++] & 0xFF;\n        final long byte145 = blocks[blocksOffset++] & 0xFF;\n        final long byte146 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte141 & 31) << 34) | (byte142 << 26) | (byte143 << 18) | (byte144 << 10) | (byte145 << 2) | (byte146 >>> 6);\n        final long byte147 = blocks[blocksOffset++] & 0xFF;\n        final long byte148 = blocks[blocksOffset++] & 0xFF;\n        final long byte149 = blocks[blocksOffset++] & 0xFF;\n        final long byte150 = blocks[blocksOffset++] & 0xFF;\n        final long byte151 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte146 & 63) << 33) | (byte147 << 25) | (byte148 << 17) | (byte149 << 9) | (byte150 << 1) | (byte151 >>> 7);\n        final long byte152 = blocks[blocksOffset++] & 0xFF;\n        final long byte153 = blocks[blocksOffset++] & 0xFF;\n        final long byte154 = blocks[blocksOffset++] & 0xFF;\n        final long byte155 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte151 & 127) << 32) | (byte152 << 24) | (byte153 << 16) | (byte154 << 8) | byte155;\n        final long byte156 = blocks[blocksOffset++] & 0xFF;\n        final long byte157 = blocks[blocksOffset++] & 0xFF;\n        final long byte158 = blocks[blocksOffset++] & 0xFF;\n        final long byte159 = blocks[blocksOffset++] & 0xFF;\n        final long byte160 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte156 << 31) | (byte157 << 23) | (byte158 << 15) | (byte159 << 7) | (byte160 >>> 1);\n        final long byte161 = blocks[blocksOffset++] & 0xFF;\n        final long byte162 = blocks[blocksOffset++] & 0xFF;\n        final long byte163 = blocks[blocksOffset++] & 0xFF;\n        final long byte164 = blocks[blocksOffset++] & 0xFF;\n        final long byte165 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte160 & 1) << 38) | (byte161 << 30) | (byte162 << 22) | (byte163 << 14) | (byte164 << 6) | (byte165 >>> 2);\n        final long byte166 = blocks[blocksOffset++] & 0xFF;\n        final long byte167 = blocks[blocksOffset++] & 0xFF;\n        final long byte168 = blocks[blocksOffset++] & 0xFF;\n        final long byte169 = blocks[blocksOffset++] & 0xFF;\n        final long byte170 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte165 & 3) << 37) | (byte166 << 29) | (byte167 << 21) | (byte168 << 13) | (byte169 << 5) | (byte170 >>> 3);\n        final long byte171 = blocks[blocksOffset++] & 0xFF;\n        final long byte172 = blocks[blocksOffset++] & 0xFF;\n        final long byte173 = blocks[blocksOffset++] & 0xFF;\n        final long byte174 = blocks[blocksOffset++] & 0xFF;\n        final long byte175 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte170 & 7) << 36) | (byte171 << 28) | (byte172 << 20) | (byte173 << 12) | (byte174 << 4) | (byte175 >>> 4);\n        final long byte176 = blocks[blocksOffset++] & 0xFF;\n        final long byte177 = blocks[blocksOffset++] & 0xFF;\n        final long byte178 = blocks[blocksOffset++] & 0xFF;\n        final long byte179 = blocks[blocksOffset++] & 0xFF;\n        final long byte180 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte175 & 15) << 35) | (byte176 << 27) | (byte177 << 19) | (byte178 << 11) | (byte179 << 3) | (byte180 >>> 5);\n        final long byte181 = blocks[blocksOffset++] & 0xFF;\n        final long byte182 = blocks[blocksOffset++] & 0xFF;\n        final long byte183 = blocks[blocksOffset++] & 0xFF;\n        final long byte184 = blocks[blocksOffset++] & 0xFF;\n        final long byte185 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte180 & 31) << 34) | (byte181 << 26) | (byte182 << 18) | (byte183 << 10) | (byte184 << 2) | (byte185 >>> 6);\n        final long byte186 = blocks[blocksOffset++] & 0xFF;\n        final long byte187 = blocks[blocksOffset++] & 0xFF;\n        final long byte188 = blocks[blocksOffset++] & 0xFF;\n        final long byte189 = blocks[blocksOffset++] & 0xFF;\n        final long byte190 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte185 & 63) << 33) | (byte186 << 25) | (byte187 << 17) | (byte188 << 9) | (byte189 << 1) | (byte190 >>> 7);\n        final long byte191 = blocks[blocksOffset++] & 0xFF;\n        final long byte192 = blocks[blocksOffset++] & 0xFF;\n        final long byte193 = blocks[blocksOffset++] & 0xFF;\n        final long byte194 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte190 & 127) << 32) | (byte191 << 24) | (byte192 << 16) | (byte193 << 8) | byte194;\n        final long byte195 = blocks[blocksOffset++] & 0xFF;\n        final long byte196 = blocks[blocksOffset++] & 0xFF;\n        final long byte197 = blocks[blocksOffset++] & 0xFF;\n        final long byte198 = blocks[blocksOffset++] & 0xFF;\n        final long byte199 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte195 << 31) | (byte196 << 23) | (byte197 << 15) | (byte198 << 7) | (byte199 >>> 1);\n        final long byte200 = blocks[blocksOffset++] & 0xFF;\n        final long byte201 = blocks[blocksOffset++] & 0xFF;\n        final long byte202 = blocks[blocksOffset++] & 0xFF;\n        final long byte203 = blocks[blocksOffset++] & 0xFF;\n        final long byte204 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte199 & 1) << 38) | (byte200 << 30) | (byte201 << 22) | (byte202 << 14) | (byte203 << 6) | (byte204 >>> 2);\n        final long byte205 = blocks[blocksOffset++] & 0xFF;\n        final long byte206 = blocks[blocksOffset++] & 0xFF;\n        final long byte207 = blocks[blocksOffset++] & 0xFF;\n        final long byte208 = blocks[blocksOffset++] & 0xFF;\n        final long byte209 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte204 & 3) << 37) | (byte205 << 29) | (byte206 << 21) | (byte207 << 13) | (byte208 << 5) | (byte209 >>> 3);\n        final long byte210 = blocks[blocksOffset++] & 0xFF;\n        final long byte211 = blocks[blocksOffset++] & 0xFF;\n        final long byte212 = blocks[blocksOffset++] & 0xFF;\n        final long byte213 = blocks[blocksOffset++] & 0xFF;\n        final long byte214 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte209 & 7) << 36) | (byte210 << 28) | (byte211 << 20) | (byte212 << 12) | (byte213 << 4) | (byte214 >>> 4);\n        final long byte215 = blocks[blocksOffset++] & 0xFF;\n        final long byte216 = blocks[blocksOffset++] & 0xFF;\n        final long byte217 = blocks[blocksOffset++] & 0xFF;\n        final long byte218 = blocks[blocksOffset++] & 0xFF;\n        final long byte219 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte214 & 15) << 35) | (byte215 << 27) | (byte216 << 19) | (byte217 << 11) | (byte218 << 3) | (byte219 >>> 5);\n        final long byte220 = blocks[blocksOffset++] & 0xFF;\n        final long byte221 = blocks[blocksOffset++] & 0xFF;\n        final long byte222 = blocks[blocksOffset++] & 0xFF;\n        final long byte223 = blocks[blocksOffset++] & 0xFF;\n        final long byte224 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte219 & 31) << 34) | (byte220 << 26) | (byte221 << 18) | (byte222 << 10) | (byte223 << 2) | (byte224 >>> 6);\n        final long byte225 = blocks[blocksOffset++] & 0xFF;\n        final long byte226 = blocks[blocksOffset++] & 0xFF;\n        final long byte227 = blocks[blocksOffset++] & 0xFF;\n        final long byte228 = blocks[blocksOffset++] & 0xFF;\n        final long byte229 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte224 & 63) << 33) | (byte225 << 25) | (byte226 << 17) | (byte227 << 9) | (byte228 << 1) | (byte229 >>> 7);\n        final long byte230 = blocks[blocksOffset++] & 0xFF;\n        final long byte231 = blocks[blocksOffset++] & 0xFF;\n        final long byte232 = blocks[blocksOffset++] & 0xFF;\n        final long byte233 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte229 & 127) << 32) | (byte230 << 24) | (byte231 << 16) | (byte232 << 8) | byte233;\n        final long byte234 = blocks[blocksOffset++] & 0xFF;\n        final long byte235 = blocks[blocksOffset++] & 0xFF;\n        final long byte236 = blocks[blocksOffset++] & 0xFF;\n        final long byte237 = blocks[blocksOffset++] & 0xFF;\n        final long byte238 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte234 << 31) | (byte235 << 23) | (byte236 << 15) | (byte237 << 7) | (byte238 >>> 1);\n        final long byte239 = blocks[blocksOffset++] & 0xFF;\n        final long byte240 = blocks[blocksOffset++] & 0xFF;\n        final long byte241 = blocks[blocksOffset++] & 0xFF;\n        final long byte242 = blocks[blocksOffset++] & 0xFF;\n        final long byte243 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte238 & 1) << 38) | (byte239 << 30) | (byte240 << 22) | (byte241 << 14) | (byte242 << 6) | (byte243 >>> 2);\n        final long byte244 = blocks[blocksOffset++] & 0xFF;\n        final long byte245 = blocks[blocksOffset++] & 0xFF;\n        final long byte246 = blocks[blocksOffset++] & 0xFF;\n        final long byte247 = blocks[blocksOffset++] & 0xFF;\n        final long byte248 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte243 & 3) << 37) | (byte244 << 29) | (byte245 << 21) | (byte246 << 13) | (byte247 << 5) | (byte248 >>> 3);\n        final long byte249 = blocks[blocksOffset++] & 0xFF;\n        final long byte250 = blocks[blocksOffset++] & 0xFF;\n        final long byte251 = blocks[blocksOffset++] & 0xFF;\n        final long byte252 = blocks[blocksOffset++] & 0xFF;\n        final long byte253 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte248 & 7) << 36) | (byte249 << 28) | (byte250 << 20) | (byte251 << 12) | (byte252 << 4) | (byte253 >>> 4);\n        final long byte254 = blocks[blocksOffset++] & 0xFF;\n        final long byte255 = blocks[blocksOffset++] & 0xFF;\n        final long byte256 = blocks[blocksOffset++] & 0xFF;\n        final long byte257 = blocks[blocksOffset++] & 0xFF;\n        final long byte258 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte253 & 15) << 35) | (byte254 << 27) | (byte255 << 19) | (byte256 << 11) | (byte257 << 3) | (byte258 >>> 5);\n        final long byte259 = blocks[blocksOffset++] & 0xFF;\n        final long byte260 = blocks[blocksOffset++] & 0xFF;\n        final long byte261 = blocks[blocksOffset++] & 0xFF;\n        final long byte262 = blocks[blocksOffset++] & 0xFF;\n        final long byte263 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte258 & 31) << 34) | (byte259 << 26) | (byte260 << 18) | (byte261 << 10) | (byte262 << 2) | (byte263 >>> 6);\n        final long byte264 = blocks[blocksOffset++] & 0xFF;\n        final long byte265 = blocks[blocksOffset++] & 0xFF;\n        final long byte266 = blocks[blocksOffset++] & 0xFF;\n        final long byte267 = blocks[blocksOffset++] & 0xFF;\n        final long byte268 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte263 & 63) << 33) | (byte264 << 25) | (byte265 << 17) | (byte266 << 9) | (byte267 << 1) | (byte268 >>> 7);\n        final long byte269 = blocks[blocksOffset++] & 0xFF;\n        final long byte270 = blocks[blocksOffset++] & 0xFF;\n        final long byte271 = blocks[blocksOffset++] & 0xFF;\n        final long byte272 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte268 & 127) << 32) | (byte269 << 24) | (byte270 << 16) | (byte271 << 8) | byte272;\n        final long byte273 = blocks[blocksOffset++] & 0xFF;\n        final long byte274 = blocks[blocksOffset++] & 0xFF;\n        final long byte275 = blocks[blocksOffset++] & 0xFF;\n        final long byte276 = blocks[blocksOffset++] & 0xFF;\n        final long byte277 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte273 << 31) | (byte274 << 23) | (byte275 << 15) | (byte276 << 7) | (byte277 >>> 1);\n        final long byte278 = blocks[blocksOffset++] & 0xFF;\n        final long byte279 = blocks[blocksOffset++] & 0xFF;\n        final long byte280 = blocks[blocksOffset++] & 0xFF;\n        final long byte281 = blocks[blocksOffset++] & 0xFF;\n        final long byte282 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte277 & 1) << 38) | (byte278 << 30) | (byte279 << 22) | (byte280 << 14) | (byte281 << 6) | (byte282 >>> 2);\n        final long byte283 = blocks[blocksOffset++] & 0xFF;\n        final long byte284 = blocks[blocksOffset++] & 0xFF;\n        final long byte285 = blocks[blocksOffset++] & 0xFF;\n        final long byte286 = blocks[blocksOffset++] & 0xFF;\n        final long byte287 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte282 & 3) << 37) | (byte283 << 29) | (byte284 << 21) | (byte285 << 13) | (byte286 << 5) | (byte287 >>> 3);\n        final long byte288 = blocks[blocksOffset++] & 0xFF;\n        final long byte289 = blocks[blocksOffset++] & 0xFF;\n        final long byte290 = blocks[blocksOffset++] & 0xFF;\n        final long byte291 = blocks[blocksOffset++] & 0xFF;\n        final long byte292 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte287 & 7) << 36) | (byte288 << 28) | (byte289 << 20) | (byte290 << 12) | (byte291 << 4) | (byte292 >>> 4);\n        final long byte293 = blocks[blocksOffset++] & 0xFF;\n        final long byte294 = blocks[blocksOffset++] & 0xFF;\n        final long byte295 = blocks[blocksOffset++] & 0xFF;\n        final long byte296 = blocks[blocksOffset++] & 0xFF;\n        final long byte297 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte292 & 15) << 35) | (byte293 << 27) | (byte294 << 19) | (byte295 << 11) | (byte296 << 3) | (byte297 >>> 5);\n        final long byte298 = blocks[blocksOffset++] & 0xFF;\n        final long byte299 = blocks[blocksOffset++] & 0xFF;\n        final long byte300 = blocks[blocksOffset++] & 0xFF;\n        final long byte301 = blocks[blocksOffset++] & 0xFF;\n        final long byte302 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte297 & 31) << 34) | (byte298 << 26) | (byte299 << 18) | (byte300 << 10) | (byte301 << 2) | (byte302 >>> 6);\n        final long byte303 = blocks[blocksOffset++] & 0xFF;\n        final long byte304 = blocks[blocksOffset++] & 0xFF;\n        final long byte305 = blocks[blocksOffset++] & 0xFF;\n        final long byte306 = blocks[blocksOffset++] & 0xFF;\n        final long byte307 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte302 & 63) << 33) | (byte303 << 25) | (byte304 << 17) | (byte305 << 9) | (byte306 << 1) | (byte307 >>> 7);\n        final long byte308 = blocks[blocksOffset++] & 0xFF;\n        final long byte309 = blocks[blocksOffset++] & 0xFF;\n        final long byte310 = blocks[blocksOffset++] & 0xFF;\n        final long byte311 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte307 & 127) << 32) | (byte308 << 24) | (byte309 << 16) | (byte310 << 8) | byte311;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"353f5909b00345d98d079a7db9a1bbe7485b1ea6":["3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"58d488e3fd72dfc95fa76fcb24f58e90c343323c":["353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":["001b25b42373b22a52f399dbf072f1224632e8e6","58d488e3fd72dfc95fa76fcb24f58e90c343323c"],"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["58d488e3fd72dfc95fa76fcb24f58e90c343323c"]},"commit2Childs":{"353f5909b00345d98d079a7db9a1bbe7485b1ea6":["001b25b42373b22a52f399dbf072f1224632e8e6","58d488e3fd72dfc95fa76fcb24f58e90c343323c"],"001b25b42373b22a52f399dbf072f1224632e8e6":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"58d488e3fd72dfc95fa76fcb24f58e90c343323c":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f":["353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}