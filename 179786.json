{"path":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getLexicalData(LanguageCode).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getLexicalData(LanguageCode).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getLexicalData(LanguageCode).mjava","sourceNew":"\t@Override\r\n\tpublic ILexicalData getLexicalData(LanguageCode languageCode) {\r\n\t\tfinal ILexicalData carrot2LexicalData = carrot2LexicalDataFactory\r\n\t\t\t\t.getLexicalData(languageCode);\r\n\r\n\t\treturn new ILexicalData() {\r\n\t\t\t@Override\r\n\t\t\tpublic boolean isStopLabel(CharSequence word) {\r\n\t\t\t\t// Nothing in Solr maps to the concept of a stop label,\r\n\t\t\t\t// so return Carrot2's default here.\r\n\t\t\t\treturn carrot2LexicalData.isStopLabel(word);\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic boolean isCommonWord(MutableCharArray word) {\r\n\t\t\t\t// Loop over the fields involved in clustering first\r\n\t\t\t\tfor (String fieldName : fieldNames) {\r\n\t\t\t\t\tfor (CharArraySet stopWords : getSolrStopWordsForField(fieldName)) {\r\n\t\t\t\t\t\tif (stopWords.contains(word)) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Check default Carrot2 stop words too\r\n\t\t\t\treturn carrot2LexicalData.isCommonWord(word);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\n","sourceOld":"\t@Override\r\n\tpublic ILexicalData getLexicalData(LanguageCode languageCode) {\r\n\t\tfinal ILexicalData carrot2LexicalData = carrot2LexicalDataFactory\r\n\t\t\t\t.getLexicalData(languageCode);\r\n\r\n\t\treturn new ILexicalData() {\r\n\t\t\t@Override\r\n\t\t\tpublic boolean isStopLabel(CharSequence word) {\r\n\t\t\t\t// Nothing in Solr maps to the concept of a stop label,\r\n\t\t\t\t// so return Carrot2's default here.\r\n\t\t\t\treturn carrot2LexicalData.isStopLabel(word);\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic boolean isCommonWord(MutableCharArray word) {\r\n\t\t\t\t// Loop over the fields involved in clustering first\r\n\t\t\t\tfor (String fieldName : fieldNames) {\r\n\t\t\t\t\tfor (CharArraySet stopWords : getSolrStopWordsForField(fieldName)) {\r\n\t\t\t\t\t\tif (stopWords.contains(word)) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Check default Carrot2 stop words too\r\n\t\t\t\treturn carrot2LexicalData.isCommonWord(word);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getLexicalData(LanguageCode).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getLexicalData(LanguageCode).mjava","sourceNew":"\t@Override\r\n\tpublic ILexicalData getLexicalData(LanguageCode languageCode) {\r\n\t\tfinal ILexicalData carrot2LexicalData = carrot2LexicalDataFactory\r\n\t\t\t\t.getLexicalData(languageCode);\r\n\r\n\t\treturn new ILexicalData() {\r\n\t\t\t@Override\r\n\t\t\tpublic boolean isStopLabel(CharSequence word) {\r\n\t\t\t\t// Nothing in Solr maps to the concept of a stop label,\r\n\t\t\t\t// so return Carrot2's default here.\r\n\t\t\t\treturn carrot2LexicalData.isStopLabel(word);\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic boolean isCommonWord(MutableCharArray word) {\r\n\t\t\t\t// Loop over the fields involved in clustering first\r\n\t\t\t\tfor (String fieldName : fieldNames) {\r\n\t\t\t\t\tfor (CharArraySet stopWords : getSolrStopWordsForField(fieldName)) {\r\n\t\t\t\t\t\tif (stopWords.contains(word)) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Check default Carrot2 stop words too\r\n\t\t\t\treturn carrot2LexicalData.isCommonWord(word);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\n","sourceOld":"\t@Override\r\n\tpublic ILexicalData getLexicalData(LanguageCode languageCode) {\r\n\t\tfinal ILexicalData carrot2LexicalData = carrot2LexicalDataFactory\r\n\t\t\t\t.getLexicalData(languageCode);\r\n\r\n\t\treturn new ILexicalData() {\r\n\t\t\t@Override\r\n\t\t\tpublic boolean isStopLabel(CharSequence word) {\r\n\t\t\t\t// Nothing in Solr maps to the concept of a stop label,\r\n\t\t\t\t// so return Carrot2's default here.\r\n\t\t\t\treturn carrot2LexicalData.isStopLabel(word);\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic boolean isCommonWord(MutableCharArray word) {\r\n\t\t\t\t// Loop over the fields involved in clustering first\r\n\t\t\t\tfor (String fieldName : fieldNames) {\r\n\t\t\t\t\tfor (CharArraySet stopWords : getSolrStopWordsForField(fieldName)) {\r\n\t\t\t\t\t\tif (stopWords.contains(word)) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Check default Carrot2 stop words too\r\n\t\t\t\treturn carrot2LexicalData.isCommonWord(word);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef9e7ba08c124ce913ef60415c21ae1ca833d211","date":1323446079,"type":3,"author":"Stanisław Osiński","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getLexicalData(LanguageCode).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getLexicalData(LanguageCode).mjava","sourceNew":"  @Override\r\n  public ILexicalData getLexicalData(LanguageCode languageCode) {\r\n    final ILexicalData carrot2LexicalData = carrot2LexicalDataFactory\r\n        .getLexicalData(languageCode);\r\n\r\n    return new ILexicalData() {\r\n      @Override\r\n      public boolean isStopLabel(CharSequence word) {\r\n        // Nothing in Solr maps to the concept of a stop label,\r\n        // so return Carrot2's default here.\r\n        return carrot2LexicalData.isStopLabel(word);\r\n      }\r\n\r\n      @Override\r\n      public boolean isCommonWord(MutableCharArray word) {\r\n        // Loop over the fields involved in clustering first\r\n        for (String fieldName : fieldNames) {\r\n          for (CharArraySet stopWords : getSolrStopWordsForField(fieldName)) {\r\n            if (stopWords.contains(word)) {\r\n              return true;\r\n            }\r\n          }\r\n        }\r\n        // Check default Carrot2 stop words too\r\n        return carrot2LexicalData.isCommonWord(word);\r\n      }\r\n    };\r\n  }\r\n\n","sourceOld":"\t@Override\r\n\tpublic ILexicalData getLexicalData(LanguageCode languageCode) {\r\n\t\tfinal ILexicalData carrot2LexicalData = carrot2LexicalDataFactory\r\n\t\t\t\t.getLexicalData(languageCode);\r\n\r\n\t\treturn new ILexicalData() {\r\n\t\t\t@Override\r\n\t\t\tpublic boolean isStopLabel(CharSequence word) {\r\n\t\t\t\t// Nothing in Solr maps to the concept of a stop label,\r\n\t\t\t\t// so return Carrot2's default here.\r\n\t\t\t\treturn carrot2LexicalData.isStopLabel(word);\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic boolean isCommonWord(MutableCharArray word) {\r\n\t\t\t\t// Loop over the fields involved in clustering first\r\n\t\t\t\tfor (String fieldName : fieldNames) {\r\n\t\t\t\t\tfor (CharArraySet stopWords : getSolrStopWordsForField(fieldName)) {\r\n\t\t\t\t\t\tif (stopWords.contains(word)) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Check default Carrot2 stop words too\r\n\t\t\t\treturn carrot2LexicalData.isCommonWord(word);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","date":1323540308,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getLexicalData(LanguageCode).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getLexicalData(LanguageCode).mjava","sourceNew":"  @Override\r\n  public ILexicalData getLexicalData(LanguageCode languageCode) {\r\n    final ILexicalData carrot2LexicalData = carrot2LexicalDataFactory\r\n        .getLexicalData(languageCode);\r\n\r\n    return new ILexicalData() {\r\n      @Override\r\n      public boolean isStopLabel(CharSequence word) {\r\n        // Nothing in Solr maps to the concept of a stop label,\r\n        // so return Carrot2's default here.\r\n        return carrot2LexicalData.isStopLabel(word);\r\n      }\r\n\r\n      @Override\r\n      public boolean isCommonWord(MutableCharArray word) {\r\n        // Loop over the fields involved in clustering first\r\n        for (String fieldName : fieldNames) {\r\n          for (CharArraySet stopWords : getSolrStopWordsForField(fieldName)) {\r\n            if (stopWords.contains(word)) {\r\n              return true;\r\n            }\r\n          }\r\n        }\r\n        // Check default Carrot2 stop words too\r\n        return carrot2LexicalData.isCommonWord(word);\r\n      }\r\n    };\r\n  }\r\n\n","sourceOld":"\t@Override\r\n\tpublic ILexicalData getLexicalData(LanguageCode languageCode) {\r\n\t\tfinal ILexicalData carrot2LexicalData = carrot2LexicalDataFactory\r\n\t\t\t\t.getLexicalData(languageCode);\r\n\r\n\t\treturn new ILexicalData() {\r\n\t\t\t@Override\r\n\t\t\tpublic boolean isStopLabel(CharSequence word) {\r\n\t\t\t\t// Nothing in Solr maps to the concept of a stop label,\r\n\t\t\t\t// so return Carrot2's default here.\r\n\t\t\t\treturn carrot2LexicalData.isStopLabel(word);\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic boolean isCommonWord(MutableCharArray word) {\r\n\t\t\t\t// Loop over the fields involved in clustering first\r\n\t\t\t\tfor (String fieldName : fieldNames) {\r\n\t\t\t\t\tfor (CharArraySet stopWords : getSolrStopWordsForField(fieldName)) {\r\n\t\t\t\t\t\tif (stopWords.contains(word)) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Check default Carrot2 stop words too\r\n\t\t\t\treturn carrot2LexicalData.isCommonWord(word);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23","date":1332766738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getLexicalData(LanguageCode).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/SolrStopwordsCarrot2LexicalDataFactory#getLexicalData(LanguageCode).mjava","sourceNew":"  @Override\n  public ILexicalData getLexicalData(LanguageCode languageCode) {\n    final ILexicalData carrot2LexicalData = carrot2LexicalDataFactory\n        .getLexicalData(languageCode);\n\n    return new ILexicalData() {\n      @Override\n      public boolean isStopLabel(CharSequence word) {\n        // Nothing in Solr maps to the concept of a stop label,\n        // so return Carrot2's default here.\n        return carrot2LexicalData.isStopLabel(word);\n      }\n\n      @Override\n      public boolean isCommonWord(MutableCharArray word) {\n        // Loop over the fields involved in clustering first\n        for (String fieldName : fieldNames) {\n          for (CharArraySet stopWords : getSolrStopWordsForField(fieldName)) {\n            if (stopWords.contains(word)) {\n              return true;\n            }\n          }\n        }\n        // Check default Carrot2 stop words too\n        return carrot2LexicalData.isCommonWord(word);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\r\n  public ILexicalData getLexicalData(LanguageCode languageCode) {\r\n    final ILexicalData carrot2LexicalData = carrot2LexicalDataFactory\r\n        .getLexicalData(languageCode);\r\n\r\n    return new ILexicalData() {\r\n      @Override\r\n      public boolean isStopLabel(CharSequence word) {\r\n        // Nothing in Solr maps to the concept of a stop label,\r\n        // so return Carrot2's default here.\r\n        return carrot2LexicalData.isStopLabel(word);\r\n      }\r\n\r\n      @Override\r\n      public boolean isCommonWord(MutableCharArray word) {\r\n        // Loop over the fields involved in clustering first\r\n        for (String fieldName : fieldNames) {\r\n          for (CharArraySet stopWords : getSolrStopWordsForField(fieldName)) {\r\n            if (stopWords.contains(word)) {\r\n              return true;\r\n            }\r\n          }\r\n        }\r\n        // Check default Carrot2 stop words too\r\n        return carrot2LexicalData.isCommonWord(word);\r\n      }\r\n    };\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23":["ef9e7ba08c124ce913ef60415c21ae1ca833d211"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":["c26f00b574427b55127e869b935845554afde1fa","ef9e7ba08c124ce913ef60415c21ae1ca833d211"],"ef9e7ba08c124ce913ef60415c21ae1ca833d211":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23"]},"commit2Childs":{"5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","ef9e7ba08c124ce913ef60415c21ae1ca833d211"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":[],"ef9e7ba08c124ce913ef60415c21ae1ca833d211":["5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}