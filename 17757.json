{"path":"lucene/src/java/org/apache/lucene/index/MergeDocIDRemapper#remap(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MergeDocIDRemapper#remap(int).mjava","pathOld":"src/java/org/apache/lucene/index/MergeDocIDRemapper#remap(int).mjava","sourceNew":"  public int remap(int oldDocID) {\n    if (oldDocID < minDocID)\n      // Unaffected by merge\n      return oldDocID;\n    else if (oldDocID >= maxDocID)\n      // This doc was \"after\" the merge, so simple shift\n      return oldDocID - docShift;\n    else {\n      // Binary search to locate this document & find its new docID\n      int lo = 0;                                      // search starts array\n      int hi = docMaps.length - 1;                  // for first element less\n\n      while (hi >= lo) {\n        int mid = (lo + hi) >>> 1;\n        int midValue = starts[mid];\n        if (oldDocID < midValue)\n          hi = mid - 1;\n        else if (oldDocID > midValue)\n          lo = mid + 1;\n        else {                                      // found a match\n          while (mid+1 < docMaps.length && starts[mid+1] == midValue) {\n            mid++;                                  // scan to last match\n          }\n          if (docMaps[mid] != null)\n            return newStarts[mid] + docMaps[mid][oldDocID-starts[mid]];\n          else\n            return newStarts[mid] + oldDocID-starts[mid];\n        }\n      }\n      if (docMaps[hi] != null)\n        return newStarts[hi] + docMaps[hi][oldDocID-starts[hi]];\n      else\n        return newStarts[hi] + oldDocID-starts[hi];\n    }\n  }\n\n","sourceOld":"  public int remap(int oldDocID) {\n    if (oldDocID < minDocID)\n      // Unaffected by merge\n      return oldDocID;\n    else if (oldDocID >= maxDocID)\n      // This doc was \"after\" the merge, so simple shift\n      return oldDocID - docShift;\n    else {\n      // Binary search to locate this document & find its new docID\n      int lo = 0;                                      // search starts array\n      int hi = docMaps.length - 1;                  // for first element less\n\n      while (hi >= lo) {\n        int mid = (lo + hi) >>> 1;\n        int midValue = starts[mid];\n        if (oldDocID < midValue)\n          hi = mid - 1;\n        else if (oldDocID > midValue)\n          lo = mid + 1;\n        else {                                      // found a match\n          while (mid+1 < docMaps.length && starts[mid+1] == midValue) {\n            mid++;                                  // scan to last match\n          }\n          if (docMaps[mid] != null)\n            return newStarts[mid] + docMaps[mid][oldDocID-starts[mid]];\n          else\n            return newStarts[mid] + oldDocID-starts[mid];\n        }\n      }\n      if (docMaps[hi] != null)\n        return newStarts[hi] + docMaps[hi][oldDocID-starts[hi]];\n      else\n        return newStarts[hi] + oldDocID-starts[hi];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d53e0e0de54796610619b32f911e89d9fb752c4c","date":1310918942,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/MergeDocIDRemapper#remap(int).mjava","sourceNew":null,"sourceOld":"  public int remap(int oldDocID) {\n    if (oldDocID < minDocID)\n      // Unaffected by merge\n      return oldDocID;\n    else if (oldDocID >= maxDocID)\n      // This doc was \"after\" the merge, so simple shift\n      return oldDocID - docShift;\n    else {\n      // Binary search to locate this document & find its new docID\n      int lo = 0;                                      // search starts array\n      int hi = docMaps.length - 1;                  // for first element less\n\n      while (hi >= lo) {\n        int mid = (lo + hi) >>> 1;\n        int midValue = starts[mid];\n        if (oldDocID < midValue)\n          hi = mid - 1;\n        else if (oldDocID > midValue)\n          lo = mid + 1;\n        else {                                      // found a match\n          while (mid+1 < docMaps.length && starts[mid+1] == midValue) {\n            mid++;                                  // scan to last match\n          }\n          if (docMaps[mid] != null)\n            return newStarts[mid] + docMaps[mid][oldDocID-starts[mid]];\n          else\n            return newStarts[mid] + oldDocID-starts[mid];\n        }\n      }\n      if (docMaps[hi] != null)\n        return newStarts[hi] + docMaps[hi][oldDocID-starts[hi]];\n      else\n        return newStarts[hi] + oldDocID-starts[hi];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d53e0e0de54796610619b32f911e89d9fb752c4c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d53e0e0de54796610619b32f911e89d9fb752c4c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d53e0e0de54796610619b32f911e89d9fb752c4c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d53e0e0de54796610619b32f911e89d9fb752c4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}