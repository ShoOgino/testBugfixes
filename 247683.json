{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader.IntersectEnum.Frame#decodeMetaData().mjava","commits":[{"id":"d289450fa5030c34b5e378c04bcb03a026aad9f4","date":1400178141,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader.IntersectEnum.Frame#decodeMetaData().mjava","pathOld":"/dev/null","sourceNew":"      public void decodeMetaData() throws IOException {\n\n        // lazily catch up on metadata decode:\n        final int limit = getTermBlockOrd();\n        boolean absolute = metaDataUpto == 0;\n        assert limit > 0;\n\n        // TODO: better API would be \"jump straight to term=N\"???\n        while (metaDataUpto < limit) {\n\n          // TODO: we could make \"tiers\" of metadata, ie,\n          // decode docFreq/totalTF but don't decode postings\n          // metadata; this way caller could get\n          // docFreq/totalTF w/o paying decode cost for\n          // postings\n\n          // TODO: if docFreq were bulk decoded we could\n          // just skipN here:\n\n          // stats\n          termState.docFreq = statsReader.readVInt();\n          //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n          if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n            termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n            //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n          }\n          // metadata \n          for (int i = 0; i < longsSize; i++) {\n            longs[i] = bytesReader.readVLong();\n          }\n          parent.postingsReader.decodeTerm(longs, bytesReader, fieldInfo, termState, absolute);\n\n          metaDataUpto++;\n          absolute = false;\n        }\n        termState.termBlockOrd = metaDataUpto;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8e28215c157245fd00f3954f8f0d4f45c2b0fd3","date":1400179494,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader.IntersectEnum.Frame#decodeMetaData().mjava","sourceNew":null,"sourceOld":"      public void decodeMetaData() throws IOException {\n\n        // lazily catch up on metadata decode:\n        final int limit = getTermBlockOrd();\n        boolean absolute = metaDataUpto == 0;\n        assert limit > 0;\n\n        // TODO: better API would be \"jump straight to term=N\"???\n        while (metaDataUpto < limit) {\n\n          // TODO: we could make \"tiers\" of metadata, ie,\n          // decode docFreq/totalTF but don't decode postings\n          // metadata; this way caller could get\n          // docFreq/totalTF w/o paying decode cost for\n          // postings\n\n          // TODO: if docFreq were bulk decoded we could\n          // just skipN here:\n\n          // stats\n          termState.docFreq = statsReader.readVInt();\n          //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n          if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n            termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n            //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n          }\n          // metadata \n          for (int i = 0; i < longsSize; i++) {\n            longs[i] = bytesReader.readVLong();\n          }\n          parent.postingsReader.decodeTerm(longs, bytesReader, fieldInfo, termState, absolute);\n\n          metaDataUpto++;\n          absolute = false;\n        }\n        termState.termBlockOrd = metaDataUpto;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d289450fa5030c34b5e378c04bcb03a026aad9f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8e28215c157245fd00f3954f8f0d4f45c2b0fd3":["d289450fa5030c34b5e378c04bcb03a026aad9f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d289450fa5030c34b5e378c04bcb03a026aad9f4":["c8e28215c157245fd00f3954f8f0d4f45c2b0fd3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d289450fa5030c34b5e378c04bcb03a026aad9f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c8e28215c157245fd00f3954f8f0d4f45c2b0fd3":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c8e28215c157245fd00f3954f8f0d4f45c2b0fd3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}