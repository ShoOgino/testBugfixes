{"path":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createJetty(File,String,String,String,String).mjava","commits":[{"id":"14d5815ecbef89580f5c48990bcd433f04f8563a","date":1399564106,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createJetty(File,String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Overrides the parent implementation so that we can configure a socket proxy\n   * to sit infront of each Jetty server, which gives us the ability to simulate\n   * network partitions without having to fuss with IPTables (which is not very\n   * cross platform friendly).\n   */\n  @Override\n  public JettySolrRunner createJetty(File solrHome, String dataDir,\n      String shardList, String solrConfigOverride, String schemaOverride)\n      throws Exception {\n    \n    int jettyPort = basePort + portCounter.incrementAndGet();\n    \n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), context,\n        jettyPort, solrConfigOverride, schemaOverride, false,\n        getExtraServlets(), sslConfig, getExtraRequestFilters());\n    jetty.setShards(shardList);\n    jetty.setDataDir(getDataDir(dataDir));\n    \n    // setup to proxy Http requests to this server unless it is the control\n    // server\n    int proxyPort = basePort + portCounter.incrementAndGet();\n    jetty.setProxyPort(proxyPort);\n    \n    jetty.start();\n    \n    // create a socket proxy for the jetty server ...\n    SocketProxy proxy = new SocketProxy(proxyPort, jetty.getBaseUrl().toURI());\n    proxies.put(proxy.getUrl(), proxy);\n    \n    return jetty;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c8bd58e5d03b0aca47c420ac22c9ae4f4bd0d2b","date":1399816269,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createJetty(File,String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createJetty(File,String,String,String,String).mjava","sourceNew":"  /**\n   * Overrides the parent implementation so that we can configure a socket proxy\n   * to sit infront of each Jetty server, which gives us the ability to simulate\n   * network partitions without having to fuss with IPTables (which is not very\n   * cross platform friendly).\n   */\n  @Override\n  public JettySolrRunner createJetty(File solrHome, String dataDir,\n      String shardList, String solrConfigOverride, String schemaOverride)\n      throws Exception {\n    \n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), context,\n        0, solrConfigOverride, schemaOverride, false,\n        getExtraServlets(), sslConfig, getExtraRequestFilters());\n    jetty.setShards(shardList);\n    jetty.setDataDir(getDataDir(dataDir));      \n    \n    // setup to proxy Http requests to this server unless it is the control\n    // server\n    int proxyPort = getNextAvailablePort();\n    jetty.setProxyPort(proxyPort);        \n    jetty.start();        \n    \n    // create a socket proxy for the jetty server ...\n    SocketProxy proxy = new SocketProxy(proxyPort, jetty.getBaseUrl().toURI());\n    proxies.put(proxy.getUrl(), proxy);\n    \n    return jetty;\n  }\n\n","sourceOld":"  /**\n   * Overrides the parent implementation so that we can configure a socket proxy\n   * to sit infront of each Jetty server, which gives us the ability to simulate\n   * network partitions without having to fuss with IPTables (which is not very\n   * cross platform friendly).\n   */\n  @Override\n  public JettySolrRunner createJetty(File solrHome, String dataDir,\n      String shardList, String solrConfigOverride, String schemaOverride)\n      throws Exception {\n    \n    int jettyPort = basePort + portCounter.incrementAndGet();\n    \n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), context,\n        jettyPort, solrConfigOverride, schemaOverride, false,\n        getExtraServlets(), sslConfig, getExtraRequestFilters());\n    jetty.setShards(shardList);\n    jetty.setDataDir(getDataDir(dataDir));\n    \n    // setup to proxy Http requests to this server unless it is the control\n    // server\n    int proxyPort = basePort + portCounter.incrementAndGet();\n    jetty.setProxyPort(proxyPort);\n    \n    jetty.start();\n    \n    // create a socket proxy for the jetty server ...\n    SocketProxy proxy = new SocketProxy(proxyPort, jetty.getBaseUrl().toURI());\n    proxies.put(proxy.getUrl(), proxy);\n    \n    return jetty;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a957bf27202eab1c9ddabc5aa30c7a0db04bbf36","date":1400053604,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createJetty(File,String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createJetty(File,String,String,String,String).mjava","sourceNew":"  /**\n   * Overrides the parent implementation so that we can configure a socket proxy\n   * to sit infront of each Jetty server, which gives us the ability to simulate\n   * network partitions without having to fuss with IPTables (which is not very\n   * cross platform friendly).\n   */\n  @Override\n  public JettySolrRunner createJetty(File solrHome, String dataDir,\n      String shardList, String solrConfigOverride, String schemaOverride)\n      throws Exception {\n    \n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), context,\n        0, solrConfigOverride, schemaOverride, false,\n        getExtraServlets(), sslConfig, getExtraRequestFilters());\n    jetty.setShards(shardList);\n    jetty.setDataDir(getDataDir(dataDir));      \n    \n    // setup to proxy Http requests to this server unless it is the control\n    // server\n    int proxyPort = getNextAvailablePort();\n    jetty.setProxyPort(proxyPort);        \n    jetty.start();        \n    \n    // create a socket proxy for the jetty server ...\n    SocketProxy proxy = new SocketProxy(proxyPort, jetty.getBaseUrl().toURI());\n    proxies.put(proxy.getUrl(), proxy);\n    \n    return jetty;\n  }\n\n","sourceOld":"  /**\n   * Overrides the parent implementation so that we can configure a socket proxy\n   * to sit infront of each Jetty server, which gives us the ability to simulate\n   * network partitions without having to fuss with IPTables (which is not very\n   * cross platform friendly).\n   */\n  @Override\n  public JettySolrRunner createJetty(File solrHome, String dataDir,\n      String shardList, String solrConfigOverride, String schemaOverride)\n      throws Exception {\n    \n    int jettyPort = basePort + portCounter.incrementAndGet();\n    \n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), context,\n        jettyPort, solrConfigOverride, schemaOverride, false,\n        getExtraServlets(), sslConfig, getExtraRequestFilters());\n    jetty.setShards(shardList);\n    jetty.setDataDir(getDataDir(dataDir));\n    \n    // setup to proxy Http requests to this server unless it is the control\n    // server\n    int proxyPort = basePort + portCounter.incrementAndGet();\n    jetty.setProxyPort(proxyPort);\n    \n    jetty.start();\n    \n    // create a socket proxy for the jetty server ...\n    SocketProxy proxy = new SocketProxy(proxyPort, jetty.getBaseUrl().toURI());\n    proxies.put(proxy.getUrl(), proxy);\n    \n    return jetty;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e36353d7461af8d2329a78a71457cf8e3c1e88f","date":1411572107,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createJetty(File,String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createJetty(File,String,String,String,String).mjava","sourceNew":"  /**\n   * Overrides the parent implementation to install a SocketProxy in-front of the Jetty server.\n   */\n  @Override\n  public JettySolrRunner createJetty(File solrHome, String dataDir,\n      String shardList, String solrConfigOverride, String schemaOverride)\n      throws Exception\n  {\n    return createProxiedJetty(solrHome, dataDir, shardList, solrConfigOverride, schemaOverride);\n  }\n\n","sourceOld":"  /**\n   * Overrides the parent implementation so that we can configure a socket proxy\n   * to sit infront of each Jetty server, which gives us the ability to simulate\n   * network partitions without having to fuss with IPTables (which is not very\n   * cross platform friendly).\n   */\n  @Override\n  public JettySolrRunner createJetty(File solrHome, String dataDir,\n      String shardList, String solrConfigOverride, String schemaOverride)\n      throws Exception {\n    \n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), context,\n        0, solrConfigOverride, schemaOverride, false,\n        getExtraServlets(), sslConfig, getExtraRequestFilters());\n    jetty.setShards(shardList);\n    jetty.setDataDir(getDataDir(dataDir));      \n    \n    // setup to proxy Http requests to this server unless it is the control\n    // server\n    int proxyPort = getNextAvailablePort();\n    jetty.setProxyPort(proxyPort);        \n    jetty.start();        \n    \n    // create a socket proxy for the jetty server ...\n    SocketProxy proxy = new SocketProxy(proxyPort, jetty.getBaseUrl().toURI());\n    proxies.put(proxy.getUrl(), proxy);\n    \n    return jetty;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":5,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createJetty(File,String,String,String,String,Replica.Type).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createJetty(File,String,String,String,String).mjava","sourceNew":"  /**\n   * Overrides the parent implementation to install a SocketProxy in-front of the Jetty server.\n   */\n  @Override\n  public JettySolrRunner createJetty(File solrHome, String dataDir,\n      String shardList, String solrConfigOverride, String schemaOverride, Replica.Type replicaType)\n      throws Exception\n  {\n    return createProxiedJetty(solrHome, dataDir, shardList, solrConfigOverride, schemaOverride, replicaType);\n  }\n\n","sourceOld":"  /**\n   * Overrides the parent implementation to install a SocketProxy in-front of the Jetty server.\n   */\n  @Override\n  public JettySolrRunner createJetty(File solrHome, String dataDir,\n      String shardList, String solrConfigOverride, String schemaOverride)\n      throws Exception\n  {\n    return createProxiedJetty(solrHome, dataDir, shardList, solrConfigOverride, schemaOverride);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#createJetty(File,String,String,String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Overrides the parent implementation to install a SocketProxy in-front of the Jetty server.\n   */\n  @Override\n  public JettySolrRunner createJetty(File solrHome, String dataDir,\n      String shardList, String solrConfigOverride, String schemaOverride)\n      throws Exception\n  {\n    return createProxiedJetty(solrHome, dataDir, shardList, solrConfigOverride, schemaOverride);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["6e36353d7461af8d2329a78a71457cf8e3c1e88f","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["6e36353d7461af8d2329a78a71457cf8e3c1e88f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"14d5815ecbef89580f5c48990bcd433f04f8563a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a957bf27202eab1c9ddabc5aa30c7a0db04bbf36":["14d5815ecbef89580f5c48990bcd433f04f8563a","9c8bd58e5d03b0aca47c420ac22c9ae4f4bd0d2b"],"9c8bd58e5d03b0aca47c420ac22c9ae4f4bd0d2b":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"6e36353d7461af8d2329a78a71457cf8e3c1e88f":["9c8bd58e5d03b0aca47c420ac22c9ae4f4bd0d2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61c45e99cf6676da48f19d7511c73712ad39402b"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"14d5815ecbef89580f5c48990bcd433f04f8563a":["a957bf27202eab1c9ddabc5aa30c7a0db04bbf36","9c8bd58e5d03b0aca47c420ac22c9ae4f4bd0d2b"],"a957bf27202eab1c9ddabc5aa30c7a0db04bbf36":[],"9c8bd58e5d03b0aca47c420ac22c9ae4f4bd0d2b":["a957bf27202eab1c9ddabc5aa30c7a0db04bbf36","6e36353d7461af8d2329a78a71457cf8e3c1e88f"],"6e36353d7461af8d2329a78a71457cf8e3c1e88f":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","a957bf27202eab1c9ddabc5aa30c7a0db04bbf36","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}