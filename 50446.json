{"path":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#matches(LeafReaderContext,int).mjava","commits":[{"id":"657704b225b01c6ff4bada5b6667f1f60aaaad0f","date":1523436207,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#matches(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Matches matches(LeafReaderContext context, int doc) throws IOException {\n      String field = terms[0].field();\n      Terms terms = context.reader().terms(field);\n      if (terms == null || terms.hasPositions() == false) {\n        return super.matches(context, doc);\n      }\n      return Matches.forField(field, () -> DisjunctionMatchesIterator.fromTerms(context, doc, field, Arrays.asList(SynonymQuery.this.terms)));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#matches(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Matches matches(LeafReaderContext context, int doc) throws IOException {\n      String field = terms[0].field();\n      Terms terms = context.reader().terms(field);\n      if (terms == null || terms.hasPositions() == false) {\n        return super.matches(context, doc);\n      }\n      return Matches.forField(field, () -> DisjunctionMatchesIterator.fromTerms(context, doc, field, Arrays.asList(SynonymQuery.this.terms)));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41ebc07bccf12a902ca6a0077910d18ee38b695f","date":1532336521,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#matches(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#matches(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Matches matches(LeafReaderContext context, int doc) throws IOException {\n      String field = terms[0].field();\n      Terms terms = context.reader().terms(field);\n      if (terms == null || terms.hasPositions() == false) {\n        return super.matches(context, doc);\n      }\n      return Matches.forField(field, () -> DisjunctionMatchesIterator.fromTerms(context, doc, getQuery(), field, Arrays.asList(SynonymQuery.this.terms)));\n    }\n\n","sourceOld":"    @Override\n    public Matches matches(LeafReaderContext context, int doc) throws IOException {\n      String field = terms[0].field();\n      Terms terms = context.reader().terms(field);\n      if (terms == null || terms.hasPositions() == false) {\n        return super.matches(context, doc);\n      }\n      return Matches.forField(field, () -> DisjunctionMatchesIterator.fromTerms(context, doc, field, Arrays.asList(SynonymQuery.this.terms)));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2375622520a4e480775e3104a2f9a423536755b4","date":1536005521,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#matches(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#matches(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Matches matches(LeafReaderContext context, int doc) throws IOException {\n      String field = terms[0].field();\n      Terms terms = context.reader().terms(field);\n      if (terms == null || terms.hasPositions() == false) {\n        return super.matches(context, doc);\n      }\n      return MatchesUtils.forField(field, () -> DisjunctionMatchesIterator.fromTerms(context, doc, getQuery(), field, Arrays.asList(SynonymQuery.this.terms)));\n    }\n\n","sourceOld":"    @Override\n    public Matches matches(LeafReaderContext context, int doc) throws IOException {\n      String field = terms[0].field();\n      Terms terms = context.reader().terms(field);\n      if (terms == null || terms.hasPositions() == false) {\n        return super.matches(context, doc);\n      }\n      return Matches.forField(field, () -> DisjunctionMatchesIterator.fromTerms(context, doc, getQuery(), field, Arrays.asList(SynonymQuery.this.terms)));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df25592b82060bc1c800e87bf019444bf0ddf9d4","date":1552296011,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#matches(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#matches(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Matches matches(LeafReaderContext context, int doc) throws IOException {\n      String field = terms[0].term.field();\n      Terms indexTerms = context.reader().terms(field);\n      if (indexTerms == null || indexTerms.hasPositions() == false) {\n        return super.matches(context, doc);\n      }\n      List<Term> termList = Arrays.stream(terms)\n          .map(TermAndBoost::getTerm)\n          .collect(Collectors.toList());\n      return MatchesUtils.forField(field, () -> DisjunctionMatchesIterator.fromTerms(context, doc, getQuery(), field, termList));\n    }\n\n","sourceOld":"    @Override\n    public Matches matches(LeafReaderContext context, int doc) throws IOException {\n      String field = terms[0].field();\n      Terms terms = context.reader().terms(field);\n      if (terms == null || terms.hasPositions() == false) {\n        return super.matches(context, doc);\n      }\n      return MatchesUtils.forField(field, () -> DisjunctionMatchesIterator.fromTerms(context, doc, getQuery(), field, Arrays.asList(SynonymQuery.this.terms)));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3760938294331a3fa865f76b09abc9de951da271","date":1597398332,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#matches(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#matches(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Matches matches(LeafReaderContext context, int doc) throws IOException {\n      String field = terms[0].term.field();\n      Terms indexTerms = context.reader().terms(field);\n      if (indexTerms == null) {\n        return super.matches(context, doc);\n      }\n      List<Term> termList = Arrays.stream(terms)\n          .map(TermAndBoost::getTerm)\n          .collect(Collectors.toList());\n      return MatchesUtils.forField(field, () -> DisjunctionMatchesIterator.fromTerms(context, doc, getQuery(), field, termList));\n    }\n\n","sourceOld":"    @Override\n    public Matches matches(LeafReaderContext context, int doc) throws IOException {\n      String field = terms[0].term.field();\n      Terms indexTerms = context.reader().terms(field);\n      if (indexTerms == null || indexTerms.hasPositions() == false) {\n        return super.matches(context, doc);\n      }\n      List<Term> termList = Arrays.stream(terms)\n          .map(TermAndBoost::getTerm)\n          .collect(Collectors.toList());\n      return MatchesUtils.forField(field, () -> DisjunctionMatchesIterator.fromTerms(context, doc, getQuery(), field, termList));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["2375622520a4e480775e3104a2f9a423536755b4"],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3760938294331a3fa865f76b09abc9de951da271":["df25592b82060bc1c800e87bf019444bf0ddf9d4"],"2375622520a4e480775e3104a2f9a423536755b4":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","657704b225b01c6ff4bada5b6667f1f60aaaad0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3760938294331a3fa865f76b09abc9de951da271"],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["43345f1452f9510f8aaadae6156fe0c834e7d957"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["657704b225b01c6ff4bada5b6667f1f60aaaad0f","43345f1452f9510f8aaadae6156fe0c834e7d957"],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["3760938294331a3fa865f76b09abc9de951da271"],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"2375622520a4e480775e3104a2f9a423536755b4":["df25592b82060bc1c800e87bf019444bf0ddf9d4"],"3760938294331a3fa865f76b09abc9de951da271":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["2375622520a4e480775e3104a2f9a423536755b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}