{"path":"contrib/analyzers/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testOversizedNgrams().mjava","commits":[{"id":"962b2790491d84618a387a768d018c54e9809f91","date":1166830997,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testOversizedNgrams().mjava","pathOld":"/dev/null","sourceNew":"    public void testOversizedNgrams() throws Exception {\n        NGramTokenizer tokenizer = new NGramTokenizer(input, 6, 7);\n        \n        Token token = null;\n        do { \n            token = tokenizer.next();\n            if (token != null) {\n                tokens.add(token.toString());\n//                System.out.println(token.termText());\n//                System.out.println(token);\n//                Thread.sleep(1000);\n            }\n        } while (token != null);\n\n        assertTrue(tokens.isEmpty());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testOversizedNgrams().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testOversizedNgrams().mjava","sourceNew":"    public void testOversizedNgrams() throws Exception {\n        NGramTokenizer tokenizer = new NGramTokenizer(input, 6, 7);\n\n        final Token reusableToken = new Token();\n        for (Token nextToken = tokenizer.next(reusableToken); nextToken != null; nextToken = tokenizer.next(reusableToken)) {\n          tokens.add(nextToken.toString());\n//        System.out.println(token.term());\n//        System.out.println(token);\n//        Thread.sleep(1000);\n      }\n\n        assertTrue(tokens.isEmpty());\n    }\n\n","sourceOld":"    public void testOversizedNgrams() throws Exception {\n        NGramTokenizer tokenizer = new NGramTokenizer(input, 6, 7);\n        \n        Token token = null;\n        do { \n            token = tokenizer.next();\n            if (token != null) {\n                tokens.add(token.toString());\n//                System.out.println(token.termText());\n//                System.out.println(token);\n//                Thread.sleep(1000);\n            }\n        } while (token != null);\n\n        assertTrue(tokens.isEmpty());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testOversizedNgrams().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testOversizedNgrams().mjava","sourceNew":"    public void testOversizedNgrams() throws Exception {\n        NGramTokenizer tokenizer = new NGramTokenizer(input, 6, 7);\n\n        final Token reusableToken = new Token();\n        for (Token nextToken = tokenizer.next(reusableToken); nextToken != null; nextToken = tokenizer.next(reusableToken)) {\n          tokens.add(nextToken.toString());\n//        System.out.println(token.term());\n//        System.out.println(token);\n//        Thread.sleep(1000);\n      }\n\n        assertTrue(tokens.isEmpty());\n    }\n\n","sourceOld":"    public void testOversizedNgrams() throws Exception {\n        NGramTokenizer tokenizer = new NGramTokenizer(input, 6, 7);\n\n        final Token reusableToken = new Token();\n        for (Token nextToken = tokenizer.next(reusableToken); nextToken != null; nextToken = tokenizer.next(reusableToken)) {\n          tokens.add(nextToken.toString());\n//        System.out.println(token.term());\n//        System.out.println(token);\n//        Thread.sleep(1000);\n      }\n\n        assertTrue(tokens.isEmpty());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["962b2790491d84618a387a768d018c54e9809f91"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"962b2790491d84618a387a768d018c54e9809f91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"962b2790491d84618a387a768d018c54e9809f91":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["962b2790491d84618a387a768d018c54e9809f91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}