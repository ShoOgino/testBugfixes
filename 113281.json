{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false;\n    int builtGramSize = 0;\n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n      gramBuilder.setLength(0);\n    } else {\n      builtGramSize = gramSize.getPreviousValue();\n    }\n    if (inputWindow.size() >= gramSize.getValue()) {\n      boolean isAllFiller = true;\n      InputWindowToken nextToken = null;\n      Iterator<InputWindowToken> iter = inputWindow.iterator();\n      for (int gramNum = 1 ;\n           iter.hasNext() && builtGramSize < gramSize.getValue() ;\n           ++gramNum) {\n        nextToken = iter.next();\n        if (builtGramSize < gramNum) {\n          if (builtGramSize > 0) {\n            gramBuilder.append(tokenSeparator);\n          }\n          gramBuilder.append(nextToken.termAtt.buffer(), 0, \n                             nextToken.termAtt.length());\n          ++builtGramSize;\n        }\n        if (isAllFiller && nextToken.isFiller) {\n          if (gramNum == gramSize.getValue()) {\n            gramSize.advance();\n          }\n        } else { \n          isAllFiller = false;\n        }\n      }\n      if ( ! isAllFiller && builtGramSize == gramSize.getValue()) {\n        inputWindow.getFirst().attSource.copyTo(this);\n        posIncrAtt.setPositionIncrement(isOutputHere ? 0 : 1);\n        termAtt.setEmpty().append(gramBuilder);\n        if (gramSize.getValue() > 1) {\n          typeAtt.setType(tokenType);\n          noShingleOutput = false;\n        }\n        offsetAtt.setOffset(offsetAtt.startOffset(), nextToken.offsetAtt.endOffset());\n        posLenAtt.setPositionLength(builtGramSize);\n        isOutputHere = true;\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false;\n    int builtGramSize = 0;\n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n      gramBuilder.setLength(0);\n    } else {\n      builtGramSize = gramSize.getPreviousValue();\n    }\n    if (inputWindow.size() >= gramSize.getValue()) {\n      boolean isAllFiller = true;\n      InputWindowToken nextToken = null;\n      Iterator<InputWindowToken> iter = inputWindow.iterator();\n      for (int gramNum = 1 ;\n           iter.hasNext() && builtGramSize < gramSize.getValue() ;\n           ++gramNum) {\n        nextToken = iter.next();\n        if (builtGramSize < gramNum) {\n          if (builtGramSize > 0) {\n            gramBuilder.append(tokenSeparator);\n          }\n          gramBuilder.append(nextToken.termAtt.buffer(), 0, \n                             nextToken.termAtt.length());\n          ++builtGramSize;\n        }\n        if (isAllFiller && nextToken.isFiller) {\n          if (gramNum == gramSize.getValue()) {\n            gramSize.advance();\n          }\n        } else { \n          isAllFiller = false;\n        }\n      }\n      if ( ! isAllFiller && builtGramSize == gramSize.getValue()) {\n        inputWindow.getFirst().attSource.copyTo(this);\n        posIncrAtt.setPositionIncrement(isOutputHere ? 0 : 1);\n        termAtt.setEmpty().append(gramBuilder);\n        if (gramSize.getValue() > 1) {\n          typeAtt.setType(tokenType);\n          noShingleOutput = false;\n        }\n        offsetAtt.setOffset(offsetAtt.startOffset(), nextToken.offsetAtt.endOffset());\n        posLenAtt.setPositionLength(builtGramSize);\n        isOutputHere = true;\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fec40a4bb4fb8565560f443818a3ae4c42b8b2f","date":1379435196,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false;\n    int builtGramSize = 0;\n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n      gramBuilder.setLength(0);\n    } else {\n      builtGramSize = gramSize.getPreviousValue();\n    }\n    if (inputWindow.size() >= gramSize.getValue()) {\n      boolean isAllFiller = true;\n      InputWindowToken nextToken = null;\n      Iterator<InputWindowToken> iter = inputWindow.iterator();\n      for (int gramNum = 1 ;\n           iter.hasNext() && builtGramSize < gramSize.getValue() ;\n           ++gramNum) {\n        nextToken = iter.next();\n        if (builtGramSize < gramNum) {\n          if (builtGramSize > 0) {\n            gramBuilder.append(tokenSeparator);\n          }\n          gramBuilder.append(nextToken.termAtt.buffer(), 0, \n                             nextToken.termAtt.length());\n          ++builtGramSize;\n        }\n        if (isAllFiller && nextToken.isFiller) {\n          if (gramNum == gramSize.getValue()) {\n            gramSize.advance();\n          }\n        } else { \n          isAllFiller = false;\n        }\n      }\n      if ( ! isAllFiller && builtGramSize == gramSize.getValue()) {\n        inputWindow.getFirst().attSource.copyTo(this);\n        posIncrAtt.setPositionIncrement(isOutputHere ? 0 : 1);\n        termAtt.setEmpty().append(gramBuilder);\n        if (gramSize.getValue() > 1) {\n          typeAtt.setType(tokenType);\n          noShingleOutput = false;\n        }\n        offsetAtt.setOffset(offsetAtt.startOffset(), nextToken.offsetAtt.endOffset());\n        posLenAtt.setPositionLength(builtGramSize);\n        isOutputHere = true;\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false;\n    int builtGramSize = 0;\n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n      gramBuilder.setLength(0);\n    } else {\n      builtGramSize = gramSize.getPreviousValue();\n    }\n    if (inputWindow.size() >= gramSize.getValue()) {\n      boolean isAllFiller = true;\n      InputWindowToken nextToken = null;\n      Iterator<InputWindowToken> iter = inputWindow.iterator();\n      for (int gramNum = 1 ;\n           iter.hasNext() && builtGramSize < gramSize.getValue() ;\n           ++gramNum) {\n        nextToken = iter.next();\n        if (builtGramSize < gramNum) {\n          if (builtGramSize > 0) {\n            gramBuilder.append(tokenSeparator);\n          }\n          gramBuilder.append(nextToken.termAtt.buffer(), 0, \n                             nextToken.termAtt.length());\n          ++builtGramSize;\n        }\n        if (isAllFiller && nextToken.isFiller) {\n          if (gramNum == gramSize.getValue()) {\n            gramSize.advance();\n          }\n        } else { \n          isAllFiller = false;\n        }\n      }\n      if ( ! isAllFiller && builtGramSize == gramSize.getValue()) {\n        inputWindow.getFirst().attSource.copyTo(this);\n        posIncrAtt.setPositionIncrement(isOutputHere ? 0 : 1);\n        termAtt.setEmpty().append(gramBuilder);\n        if (gramSize.getValue() > 1) {\n          typeAtt.setType(tokenType);\n          noShingleOutput = false;\n        }\n        offsetAtt.setOffset(offsetAtt.startOffset(), nextToken.offsetAtt.endOffset());\n        posLenAtt.setPositionLength(builtGramSize);\n        isOutputHere = true;\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bce5c9637fdd284e5990e2e810bc9faafa336bc5","date":1487975857,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false;\n    int builtGramSize = 0;\n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n      gramBuilder.setLength(0);\n    } else {\n      builtGramSize = gramSize.getPreviousValue();\n    }\n    if (inputWindow.size() >= gramSize.getValue()) {\n      boolean isAllFiller = true;\n      InputWindowToken nextToken = null;\n      Iterator<InputWindowToken> iter = inputWindow.iterator();\n      for (int gramNum = 1 ;\n           iter.hasNext() && builtGramSize < gramSize.getValue() ;\n           ++gramNum) {\n        nextToken = iter.next();\n        if (builtGramSize < gramNum) {\n          if (builtGramSize > 0) {\n            gramBuilder.append(tokenSeparator);\n          }\n          gramBuilder.append(nextToken.termAtt.buffer(), 0, \n                             nextToken.termAtt.length());\n          ++builtGramSize;\n        }\n        if (isAllFiller && nextToken.isFiller) {\n          if (gramNum == gramSize.getValue()) {\n            gramSize.advance();\n          }\n        } else { \n          isAllFiller = false;\n        }\n      }\n      if ( ! isAllFiller && builtGramSize == gramSize.getValue()) {\n        inputWindow.getFirst().attSource.copyTo(this);\n        posIncrAtt.setPositionIncrement(isOutputHere ? 0 : 1);\n        termAtt.setEmpty().append(gramBuilder);\n        if (gramSize.getValue() > 1) {\n          typeAtt.setType(tokenType);\n          noShingleOutput = false;\n        }\n        offsetAtt.setOffset(offsetAtt.startOffset(), nextToken.offsetAtt.endOffset());\n        if (outputUnigrams) {\n          posLenAtt.setPositionLength(builtGramSize);\n        } else {\n          // position length for this token is the number of position created by shingles of smaller size.\n          posLenAtt.setPositionLength(Math.max(1, (builtGramSize - minShingleSize) + 1));\n        }\n        isOutputHere = true;\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false;\n    int builtGramSize = 0;\n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n      gramBuilder.setLength(0);\n    } else {\n      builtGramSize = gramSize.getPreviousValue();\n    }\n    if (inputWindow.size() >= gramSize.getValue()) {\n      boolean isAllFiller = true;\n      InputWindowToken nextToken = null;\n      Iterator<InputWindowToken> iter = inputWindow.iterator();\n      for (int gramNum = 1 ;\n           iter.hasNext() && builtGramSize < gramSize.getValue() ;\n           ++gramNum) {\n        nextToken = iter.next();\n        if (builtGramSize < gramNum) {\n          if (builtGramSize > 0) {\n            gramBuilder.append(tokenSeparator);\n          }\n          gramBuilder.append(nextToken.termAtt.buffer(), 0, \n                             nextToken.termAtt.length());\n          ++builtGramSize;\n        }\n        if (isAllFiller && nextToken.isFiller) {\n          if (gramNum == gramSize.getValue()) {\n            gramSize.advance();\n          }\n        } else { \n          isAllFiller = false;\n        }\n      }\n      if ( ! isAllFiller && builtGramSize == gramSize.getValue()) {\n        inputWindow.getFirst().attSource.copyTo(this);\n        posIncrAtt.setPositionIncrement(isOutputHere ? 0 : 1);\n        termAtt.setEmpty().append(gramBuilder);\n        if (gramSize.getValue() > 1) {\n          typeAtt.setType(tokenType);\n          noShingleOutput = false;\n        }\n        offsetAtt.setOffset(offsetAtt.startOffset(), nextToken.offsetAtt.endOffset());\n        posLenAtt.setPositionLength(builtGramSize);\n        isOutputHere = true;\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","bugFix":["aa380b0ac7fa6c578259afbb8eaa19927570010d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1fec40a4bb4fb8565560f443818a3ae4c42b8b2f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bce5c9637fdd284e5990e2e810bc9faafa336bc5":["1fec40a4bb4fb8565560f443818a3ae4c42b8b2f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bce5c9637fdd284e5990e2e810bc9faafa336bc5"]},"commit2Childs":{"1fec40a4bb4fb8565560f443818a3ae4c42b8b2f":["bce5c9637fdd284e5990e2e810bc9faafa336bc5"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1fec40a4bb4fb8565560f443818a3ae4c42b8b2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"bce5c9637fdd284e5990e2e810bc9faafa336bc5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}