{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestExecutePlanAction#testIntegration().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestExecutePlanAction#testIntegration().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    waitForState(\"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, clusterShape(1, 2));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c6c0dad4932399aec99b4818086cb1772773916","date":1520515900,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestExecutePlanAction#testIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestExecutePlanAction#testIntegration().mjava","sourceNew":"  @Test\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        collectionName, CloudTestUtils.clusterShape(1, 2));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, CloudTestUtils.clusterShape(1, 2));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","sourceOld":"  @Test\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    waitForState(\"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, clusterShape(1, 2));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","bugFix":null,"bugIntro":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestExecutePlanAction#testIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestExecutePlanAction#testIntegration().mjava","sourceNew":"  @Test\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    cluster.getTimeSource().sleep(3000);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","sourceOld":"  @Test\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        collectionName, CloudTestUtils.clusterShape(1, 2));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, CloudTestUtils.clusterShape(1, 2));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","bugFix":["9c6c0dad4932399aec99b4818086cb1772773916"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimExecutePlanAction#testIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestExecutePlanAction#testIntegration().mjava","sourceNew":"  @Test\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    cluster.getTimeSource().sleep(3000);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","sourceOld":"  @Test\n  public void testIntegration() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testIntegration\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    String sourceNodeName = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicas = docCollection.getReplicas(sourceNodeName);\n    assertNotNull(replicas);\n    assertFalse(replicas.isEmpty());\n\n    List<String> otherNodes = cluster.getClusterStateProvider().getLiveNodes().stream()\n        .filter(node -> !node.equals(sourceNodeName)).collect(Collectors.toList());\n    assertFalse(otherNodes.isEmpty());\n    String survivor = otherNodes.get(0);\n\n    cluster.simRemoveNode(sourceNodeName, false);\n\n    cluster.getTimeSource().sleep(3000);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of collection to be 2 again\",\n        collectionName, CloudTestUtils.clusterShape(1, 2, false, true));\n\n    clusterState = cluster.getClusterStateProvider().getClusterState();\n    docCollection = clusterState.getCollection(collectionName);\n    List<Replica> replicasOnSurvivor = docCollection.getReplicas(survivor);\n    assertNotNull(replicasOnSurvivor);\n    assertEquals(2, replicasOnSurvivor.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["9c6c0dad4932399aec99b4818086cb1772773916"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"9c6c0dad4932399aec99b4818086cb1772773916":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"]},"commit2Childs":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"9c6c0dad4932399aec99b4818086cb1772773916":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["9c6c0dad4932399aec99b4818086cb1772773916"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}