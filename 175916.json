{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#docs(Random,TermsEnum,Bits,DocsEnum,int).mjava","commits":[{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":1,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#docs(Random,TermsEnum,Bits,DocsEnum,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#docs(Random,TermsEnum,Bits,DocsEnum,int).mjava","sourceNew":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static DocsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        final int posFlags;\n        switch (random.nextInt(4)) {\n          case 0: posFlags = 0; break;\n          case 1: posFlags = DocsAndPositionsEnum.FLAG_OFFSETS; break;\n          case 2: posFlags = DocsAndPositionsEnum.FLAG_PAYLOADS; break;\n          default: posFlags = DocsAndPositionsEnum.FLAG_OFFSETS | DocsAndPositionsEnum.FLAG_PAYLOADS; break;\n        }\n        // TODO: cast to DocsAndPositionsEnum?\n        DocsAndPositionsEnum docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, posFlags);\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      flags |= DocsEnum.FLAG_FREQS;\n    }\n    return termsEnum.docs(liveDocs, reuse, flags);\n  }\n\n","sourceOld":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static DocsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        final int posFlags;\n        switch (random.nextInt(4)) {\n          case 0: posFlags = 0; break;\n          case 1: posFlags = DocsAndPositionsEnum.FLAG_OFFSETS; break;\n          case 2: posFlags = DocsAndPositionsEnum.FLAG_PAYLOADS; break;\n          default: posFlags = DocsAndPositionsEnum.FLAG_OFFSETS | DocsAndPositionsEnum.FLAG_PAYLOADS; break;\n        }\n        // TODO: cast to DocsAndPositionsEnum?\n        DocsAndPositionsEnum docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, posFlags);\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      flags |= DocsEnum.FLAG_FREQS;\n    }\n    return termsEnum.docs(liveDocs, reuse, flags);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#docs(Random,TermsEnum,Bits,PostingsEnum,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#docs(Random,TermsEnum,Bits,DocsEnum,int).mjava","sourceNew":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static PostingsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        final int posFlags;\n        switch (random.nextInt(4)) {\n          case 0: posFlags = PostingsEnum.FLAG_POSITIONS; break;\n          case 1: posFlags = PostingsEnum.FLAG_OFFSETS; break;\n          case 2: posFlags = PostingsEnum.FLAG_PAYLOADS; break;\n          default: posFlags = PostingsEnum.FLAG_OFFSETS | PostingsEnum.FLAG_PAYLOADS; break;\n        }\n        PostingsEnum docsAndPositions = termsEnum.postings(liveDocs, null, posFlags);\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      flags |= PostingsEnum.FLAG_FREQS;\n    }\n    return termsEnum.postings(liveDocs, reuse, flags);\n  }\n\n","sourceOld":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static DocsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        final int posFlags;\n        switch (random.nextInt(4)) {\n          case 0: posFlags = 0; break;\n          case 1: posFlags = DocsAndPositionsEnum.FLAG_OFFSETS; break;\n          case 2: posFlags = DocsAndPositionsEnum.FLAG_PAYLOADS; break;\n          default: posFlags = DocsAndPositionsEnum.FLAG_OFFSETS | DocsAndPositionsEnum.FLAG_PAYLOADS; break;\n        }\n        // TODO: cast to DocsAndPositionsEnum?\n        DocsAndPositionsEnum docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, posFlags);\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      flags |= DocsEnum.FLAG_FREQS;\n    }\n    return termsEnum.docs(liveDocs, reuse, flags);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51f5280f31484820499077f41fcdfe92d527d9dc"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6613659748fe4411a7dcf85266e55db1f95f7315"],"51f5280f31484820499077f41fcdfe92d527d9dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}