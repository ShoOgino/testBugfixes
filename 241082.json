{"path":"lucene/monitor/src/java/org/apache/lucene/monitor/SuffixingNGramTokenFilter#incrementToken().mjava","commits":[{"id":"7c529b189e09de25455d82ebd7260748cf11ee14","date":1560415257,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/monitor/src/java/org/apache/lucene/monitor/SuffixingNGramTokenFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the next token in the stream, or null at EOS.\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (curTermBuffer == null) {\n\n        if (!input.incrementToken()) {\n          return false;\n        }\n\n        if (keywordAtt.isKeyword())\n          return true;\n\n        curTermBuffer = termAtt.buffer().clone();\n        curTermLength = termAtt.length();\n        curCodePointCount = Character.codePointCount(termAtt, 0, termAtt.length());\n        curGramSize = curTermLength;\n        curPos = 0;\n        curPosInc = posIncAtt.getPositionIncrement();\n        curPosLen = posLenAtt.getPositionLength();\n        tokStart = offsetAtt.startOffset();\n        tokEnd = offsetAtt.endOffset();\n        //termAtt.setEmpty().append(suffix);\n        return true;\n\n      }\n\n      if (curTermLength > maxTokenLength) {\n        clearAttributes();\n        termAtt.append(anyToken);\n        curTermBuffer = null;\n        return true;\n      }\n\n      if (curGramSize == 0) {\n        ++curPos;\n        curGramSize = curTermLength - curPos;\n      }\n      if (curGramSize >= 0 && (curPos + curGramSize) <= curCodePointCount) {\n        clearAttributes();\n        final int start = Character.offsetByCodePoints(curTermBuffer, 0, curTermLength, 0, curPos);\n        final int end = Character.offsetByCodePoints(curTermBuffer, 0, curTermLength, start, curGramSize);\n        termAtt.copyBuffer(curTermBuffer, start, end - start);\n        termAtt.append(suffix);\n        if ((curGramSize == curTermLength - curPos) && !seenSuffixes.add(termAtt.subSequence(0, termAtt.length()))) {\n          curTermBuffer = null;\n          continue;\n        }\n        if (!seenInfixes.add(termAtt.subSequence(0, termAtt.length()))) {\n          curGramSize = 0;\n          continue;\n        }\n        posIncAtt.setPositionIncrement(curPosInc);\n        curPosInc = 0;\n        posLenAtt.setPositionLength(curPosLen);\n        offsetAtt.setOffset(tokStart, tokEnd);\n        curGramSize--;\n        return true;\n      }\n\n      curTermBuffer = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c529b189e09de25455d82ebd7260748cf11ee14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c529b189e09de25455d82ebd7260748cf11ee14"]},"commit2Childs":{"7c529b189e09de25455d82ebd7260748cf11ee14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c529b189e09de25455d82ebd7260748cf11ee14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}