{"path":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesDirectoryReaderWrapper#testForceMergeDeletes().mjava","commits":[{"id":"36d13f271b6649357e07f71f7e46559479f69b5b","date":1523888226,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesDirectoryReaderWrapper#testForceMergeDeletes().mjava","pathOld":"/dev/null","sourceNew":"  public void testForceMergeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\");\n    config.setMergePolicy(newMergePolicy(random(), false)); // no mock MP it might not select segments for force merge\n    if (random().nextBoolean()) {\n      config.setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n          () -> new MatchNoDocsQuery(), config.getMergePolicy()));\n    }\n    IndexWriter writer = new IndexWriter(dir, config);\n    // The first segment includes d1 and d2\n    for (int i = 0; i < 2; i++) {\n      Document d = new Document();\n      d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n      writer.addDocument(d);\n    }\n    writer.flush();\n    // The second segment includes only the tombstone\n    Document tombstone = new Document();\n    tombstone.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), tombstone, new NumericDocValuesField(\"soft_delete\", 1));\n    // Internally, forceMergeDeletes will call flush to flush pending updates\n    // Thus, we will have two segments - both having soft-deleted documents.\n    // We expect any MP to merge these segments into one segment\n    // when calling forceMergeDeletes.\n    writer.forceMergeDeletes(true);\n    assertEquals(1, writer.maxDoc());\n    assertEquals(1, writer.segmentInfos.asList().size());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f372764a5bd3ebacde5b99ee3303153eb5ec0d2f","631ea3d1607299c59f33edef140ffc19a81f07a0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15e716649e2bd79a98b5e68c464154ea4c44677a","date":1523975212,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testForceMergeDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesDirectoryReaderWrapper#testForceMergeDeletes().mjava","sourceNew":"  public void testForceMergeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\");\n    config.setMergePolicy(newMergePolicy(random(), false)); // no mock MP it might not select segments for force merge\n    if (random().nextBoolean()) {\n      config.setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n          () -> new MatchNoDocsQuery(), config.getMergePolicy()));\n    }\n    IndexWriter writer = new IndexWriter(dir, config);\n    // The first segment includes d1 and d2\n    for (int i = 0; i < 2; i++) {\n      Document d = new Document();\n      d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n      writer.addDocument(d);\n    }\n    writer.flush();\n    // The second segment includes only the tombstone\n    Document tombstone = new Document();\n    tombstone.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), tombstone, new NumericDocValuesField(\"soft_delete\", 1));\n    // Internally, forceMergeDeletes will call flush to flush pending updates\n    // Thus, we will have two segments - both having soft-deleted documents.\n    // We expect any MP to merge these segments into one segment\n    // when calling forceMergeDeletes.\n    writer.forceMergeDeletes(true);\n    assertEquals(1, writer.maxDoc());\n    assertEquals(1, writer.segmentInfos.asList().size());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testForceMergeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\");\n    config.setMergePolicy(newMergePolicy(random(), false)); // no mock MP it might not select segments for force merge\n    if (random().nextBoolean()) {\n      config.setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n          () -> new MatchNoDocsQuery(), config.getMergePolicy()));\n    }\n    IndexWriter writer = new IndexWriter(dir, config);\n    // The first segment includes d1 and d2\n    for (int i = 0; i < 2; i++) {\n      Document d = new Document();\n      d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n      writer.addDocument(d);\n    }\n    writer.flush();\n    // The second segment includes only the tombstone\n    Document tombstone = new Document();\n    tombstone.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), tombstone, new NumericDocValuesField(\"soft_delete\", 1));\n    // Internally, forceMergeDeletes will call flush to flush pending updates\n    // Thus, we will have two segments - both having soft-deleted documents.\n    // We expect any MP to merge these segments into one segment\n    // when calling forceMergeDeletes.\n    writer.forceMergeDeletes(true);\n    assertEquals(1, writer.maxDoc());\n    assertEquals(1, writer.segmentInfos.asList().size());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"36d13f271b6649357e07f71f7e46559479f69b5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15e716649e2bd79a98b5e68c464154ea4c44677a":["36d13f271b6649357e07f71f7e46559479f69b5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["15e716649e2bd79a98b5e68c464154ea4c44677a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36d13f271b6649357e07f71f7e46559479f69b5b"],"36d13f271b6649357e07f71f7e46559479f69b5b":["15e716649e2bd79a98b5e68c464154ea4c44677a"],"15e716649e2bd79a98b5e68c464154ea4c44677a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}