{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","commits":[{"id":"aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25","date":1315500470,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof TermRangeQueryNode) {\n      TermRangeQueryNode termRangeNode = (TermRangeQueryNode) node;\n      FieldQueryNode upper = termRangeNode.getUpperBound();\n      FieldQueryNode lower = termRangeNode.getLowerBound();\n      \n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n      Locale locale = getQueryConfigHandler().get(ConfigurationKeys.LOCALE);\n      \n      if (locale == null) {\n        locale = Locale.getDefault();\n      }\n      \n      CharSequence field = termRangeNode.getField();\n      String fieldStr = null;\n      \n      if (field != null) {\n        fieldStr = field.toString();\n      }\n      \n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n      \n      if (fieldConfig != null) {\n        dateRes = fieldConfig.get(ConfigurationKeys.DATE_RESOLUTION);\n      }\n      \n      if (termRangeNode.isUpperInclusive()) {\n        inclusive = true;\n      }\n      \n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n      \n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        \n        if (part1.length() > 0) {\n          Date d1 = df.parse(part1);\n          part1 = DateTools.dateToString(d1, dateRes);\n          lower.setText(part1);\n        }\n        \n        if (part2.length() > 0) {\n          Date d2 = df.parse(part2);\n          if (inclusive) {\n            // The user can only specify the date, not the time, so make sure\n            // the time is set to the latest possible time of that date to\n            // really\n            // include all documents:\n            Calendar cal = Calendar.getInstance(locale);\n            cal.setTime(d2);\n            cal.set(Calendar.HOUR_OF_DAY, 23);\n            cal.set(Calendar.MINUTE, 59);\n            cal.set(Calendar.SECOND, 59);\n            cal.set(Calendar.MILLISECOND, 999);\n            d2 = cal.getTime();\n          }\n          \n          part2 = DateTools.dateToString(d2, dateRes);\n          upper.setText(part2);\n          \n        }\n        \n      } catch (Exception e) {\n        // do nothing\n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      \n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n      Locale locale = getQueryConfigHandler().get(ConfigurationKeys.LOCALE);\n      \n      if (locale == null) {\n        locale = Locale.getDefault();\n      }\n      \n      CharSequence field = parametricRangeNode.getField();\n      String fieldStr = null;\n      \n      if (field != null) {\n        fieldStr = field.toString();\n      }\n      \n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n      \n      if (fieldConfig != null) {\n        dateRes = fieldConfig.get(ConfigurationKeys.DATE_RESOLUTION);\n      }\n      \n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n      }\n      \n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n      \n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        \n        if (part1.length() > 0) {\n          Date d1 = df.parse(part1);\n          part1 = DateTools.dateToString(d1, dateRes);\n          lower.setText(part1);\n        }\n        \n        if (part2.length() > 0) {\n          Date d2 = df.parse(part2);\n          if (inclusive) {\n            // The user can only specify the date, not the time, so make sure\n            // the time is set to the latest possible time of that date to\n            // really\n            // include all documents:\n            Calendar cal = Calendar.getInstance(locale);\n            cal.setTime(d2);\n            cal.set(Calendar.HOUR_OF_DAY, 23);\n            cal.set(Calendar.MINUTE, 59);\n            cal.set(Calendar.SECOND, 59);\n            cal.set(Calendar.MILLISECOND, 999);\n            d2 = cal.getTime();\n          }\n          \n          part2 = DateTools.dateToString(d2, dateRes);\n          upper.setText(part2);\n          \n        }\n        \n      } catch (Exception e) {\n        // do nothing\n      }\n      \n      return new TermRangeQueryNode(lower, upper, part1.length() == 0\n          | lower.getOperator() == CompareOperator.GE, part2.length() == 0\n          | upper.getOperator() == CompareOperator.LE);\n      \n    }\n    \n    return node;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof TermRangeQueryNode) {\n      TermRangeQueryNode termRangeNode = (TermRangeQueryNode) node;\n      FieldQueryNode upper = termRangeNode.getUpperBound();\n      FieldQueryNode lower = termRangeNode.getLowerBound();\n      \n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n      Locale locale = getQueryConfigHandler().get(ConfigurationKeys.LOCALE);\n      \n      if (locale == null) {\n        locale = Locale.getDefault();\n      }\n      \n      CharSequence field = termRangeNode.getField();\n      String fieldStr = null;\n      \n      if (field != null) {\n        fieldStr = field.toString();\n      }\n      \n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n      \n      if (fieldConfig != null) {\n        dateRes = fieldConfig.get(ConfigurationKeys.DATE_RESOLUTION);\n      }\n      \n      if (termRangeNode.isUpperInclusive()) {\n        inclusive = true;\n      }\n      \n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n      \n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        \n        if (part1.length() > 0) {\n          Date d1 = df.parse(part1);\n          part1 = DateTools.dateToString(d1, dateRes);\n          lower.setText(part1);\n        }\n        \n        if (part2.length() > 0) {\n          Date d2 = df.parse(part2);\n          if (inclusive) {\n            // The user can only specify the date, not the time, so make sure\n            // the time is set to the latest possible time of that date to\n            // really\n            // include all documents:\n            Calendar cal = Calendar.getInstance(locale);\n            cal.setTime(d2);\n            cal.set(Calendar.HOUR_OF_DAY, 23);\n            cal.set(Calendar.MINUTE, 59);\n            cal.set(Calendar.SECOND, 59);\n            cal.set(Calendar.MILLISECOND, 999);\n            d2 = cal.getTime();\n          }\n          \n          part2 = DateTools.dateToString(d2, dateRes);\n          upper.setText(part2);\n          \n        }\n        \n      } catch (Exception e) {\n        // do nothing\n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof TermRangeQueryNode) {\n      TermRangeQueryNode termRangeNode = (TermRangeQueryNode) node;\n      FieldQueryNode upper = termRangeNode.getUpperBound();\n      FieldQueryNode lower = termRangeNode.getLowerBound();\n      \n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n      Locale locale = getQueryConfigHandler().get(ConfigurationKeys.LOCALE);\n      \n      if (locale == null) {\n        locale = Locale.getDefault();\n      }\n      \n      CharSequence field = termRangeNode.getField();\n      String fieldStr = null;\n      \n      if (field != null) {\n        fieldStr = field.toString();\n      }\n      \n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n      \n      if (fieldConfig != null) {\n        dateRes = fieldConfig.get(ConfigurationKeys.DATE_RESOLUTION);\n      }\n      \n      if (termRangeNode.isUpperInclusive()) {\n        inclusive = true;\n      }\n      \n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n      \n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        \n        if (part1.length() > 0) {\n          Date d1 = df.parse(part1);\n          part1 = DateTools.dateToString(d1, dateRes);\n          lower.setText(part1);\n        }\n        \n        if (part2.length() > 0) {\n          Date d2 = df.parse(part2);\n          if (inclusive) {\n            // The user can only specify the date, not the time, so make sure\n            // the time is set to the latest possible time of that date to\n            // really\n            // include all documents:\n            Calendar cal = Calendar.getInstance(locale);\n            cal.setTime(d2);\n            cal.set(Calendar.HOUR_OF_DAY, 23);\n            cal.set(Calendar.MINUTE, 59);\n            cal.set(Calendar.SECOND, 59);\n            cal.set(Calendar.MILLISECOND, 999);\n            d2 = cal.getTime();\n          }\n          \n          part2 = DateTools.dateToString(d2, dateRes);\n          upper.setText(part2);\n          \n        }\n        \n      } catch (Exception e) {\n        // do nothing\n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25"],"aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}