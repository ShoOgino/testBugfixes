{"path":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#parsePointDouble(double[],String,int).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#parsePointDouble(double[],String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a string containing <i>dimension</i> values encoded in it, separated by commas, return a double array of length <i>dimension</i>\n   * containing the values.\n   *\n   * @param out         A preallocated array.  Must be size dimension.  If it is not it will be resized.\n   * @param externalVal The value to parse\n   * @param dimension   The expected number of values for the point\n   * @return An array of the values that make up the point (aka vector)\n   * @throws {@link SolrException} if the dimension specified does not match the number of values in the externalValue.\n   */\n  public static double[] parsePointDouble(double[] out, String externalVal, int dimension) {\n    if (out == null || out.length != dimension) out = new double[dimension];\n    int idx = externalVal.indexOf(',');\n    int end = idx;\n    int start = 0;\n    int i = 0;\n    if (idx == -1 && dimension == 1 && externalVal.length() > 0) {//we have a single point, dimension better be 1\n      out[0] = Double.parseDouble(externalVal.trim());\n      i = 1;\n    } else if (idx > 0) {//if it is zero, that is an error\n      //Parse out a comma separated list of point values, as in: 73.5,89.2,7773.4\n      for (; i < dimension; i++) {\n        //TODO: abstract common code with other parsePoint\n        while (start < end && externalVal.charAt(start) == ' ') start++;\n        while (end > start && externalVal.charAt(end - 1) == ' ') end--;\n\tif (start == end){\n\t    break;\n        }\n        out[i] = Double.parseDouble(externalVal.substring(start, end));\n        start = idx + 1;\n        end = externalVal.indexOf(',', start);\n\tidx = end;\n        if (end == -1) {\n          end = externalVal.length();\n        }\n      }\n    }\n    if (i != dimension) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"incompatible dimension (\" + dimension +\n              \") and values (\" + externalVal + \").  Only \" + i + \" values specified\");\n    }\n    return out;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#parsePointDouble(double[],String,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Given a string containing <i>dimension</i> values encoded in it, separated by commas, return a double array of length <i>dimension</i>\n   * containing the values.\n   *\n   * @param out         A preallocated array.  Must be size dimension.  If it is not it will be resized.\n   * @param externalVal The value to parse\n   * @param dimension   The expected number of values for the point\n   * @return An array of the values that make up the point (aka vector)\n   * @throws {@link SolrException} if the dimension specified does not match the number of values in the externalValue.\n   */\n  public static double[] parsePointDouble(double[] out, String externalVal, int dimension) {\n    if (out == null || out.length != dimension) out = new double[dimension];\n    int idx = externalVal.indexOf(',');\n    int end = idx;\n    int start = 0;\n    int i = 0;\n    if (idx == -1 && dimension == 1 && externalVal.length() > 0) {//we have a single point, dimension better be 1\n      out[0] = Double.parseDouble(externalVal.trim());\n      i = 1;\n    } else if (idx > 0) {//if it is zero, that is an error\n      //Parse out a comma separated list of point values, as in: 73.5,89.2,7773.4\n      for (; i < dimension; i++) {\n        //TODO: abstract common code with other parsePoint\n        while (start < end && externalVal.charAt(start) == ' ') start++;\n        while (end > start && externalVal.charAt(end - 1) == ' ') end--;\n\tif (start == end){\n\t    break;\n        }\n        out[i] = Double.parseDouble(externalVal.substring(start, end));\n        start = idx + 1;\n        end = externalVal.indexOf(',', start);\n\tidx = end;\n        if (end == -1) {\n          end = externalVal.length();\n        }\n      }\n    }\n    if (i != dimension) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"incompatible dimension (\" + dimension +\n              \") and values (\" + externalVal + \").  Only \" + i + \" values specified\");\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#parsePointDouble(double[],String,int).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/DistanceUtils#parsePointDouble(double[],String,int).mjava","sourceNew":"  /**\n   * Given a string containing <i>dimension</i> values encoded in it, separated by commas, return a double array of length <i>dimension</i>\n   * containing the values.\n   *\n   * @param out         A preallocated array.  Must be size dimension.  If it is not it will be resized.\n   * @param externalVal The value to parse\n   * @param dimension   The expected number of values for the point\n   * @return An array of the values that make up the point (aka vector)\n   * @throws {@link SolrException} if the dimension specified does not match the number of values in the externalValue.\n   */\n  public static double[] parsePointDouble(double[] out, String externalVal, int dimension) {\n    if (out == null || out.length != dimension) out = new double[dimension];\n    int idx = externalVal.indexOf(',');\n    int end = idx;\n    int start = 0;\n    int i = 0;\n    if (idx == -1 && dimension == 1 && externalVal.length() > 0) {//we have a single point, dimension better be 1\n      out[0] = Double.parseDouble(externalVal.trim());\n      i = 1;\n    } else if (idx > 0) {//if it is zero, that is an error\n      //Parse out a comma separated list of point values, as in: 73.5,89.2,7773.4\n      for (; i < dimension; i++) {\n        //TODO: abstract common code with other parsePoint\n        while (start < end && externalVal.charAt(start) == ' ') start++;\n        while (end > start && externalVal.charAt(end - 1) == ' ') end--;\n\tif (start == end){\n\t    break;\n        }\n        out[i] = Double.parseDouble(externalVal.substring(start, end));\n        start = idx + 1;\n        end = externalVal.indexOf(',', start);\n\tidx = end;\n        if (end == -1) {\n          end = externalVal.length();\n        }\n      }\n    }\n    if (i != dimension) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"incompatible dimension (\" + dimension +\n              \") and values (\" + externalVal + \").  Only \" + i + \" values specified\");\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given a string containing <i>dimension</i> values encoded in it, separated by commas, return a double array of length <i>dimension</i>\n   * containing the values.\n   *\n   * @param out         A preallocated array.  Must be size dimension.  If it is not it will be resized.\n   * @param externalVal The value to parse\n   * @param dimension   The expected number of values for the point\n   * @return An array of the values that make up the point (aka vector)\n   * @throws {@link SolrException} if the dimension specified does not match the number of values in the externalValue.\n   */\n  public static double[] parsePointDouble(double[] out, String externalVal, int dimension) {\n    if (out == null || out.length != dimension) out = new double[dimension];\n    int idx = externalVal.indexOf(',');\n    int end = idx;\n    int start = 0;\n    int i = 0;\n    if (idx == -1 && dimension == 1 && externalVal.length() > 0) {//we have a single point, dimension better be 1\n      out[0] = Double.parseDouble(externalVal.trim());\n      i = 1;\n    } else if (idx > 0) {//if it is zero, that is an error\n      //Parse out a comma separated list of point values, as in: 73.5,89.2,7773.4\n      for (; i < dimension; i++) {\n        //TODO: abstract common code with other parsePoint\n        while (start < end && externalVal.charAt(start) == ' ') start++;\n        while (end > start && externalVal.charAt(end - 1) == ' ') end--;\n\tif (start == end){\n\t    break;\n        }\n        out[i] = Double.parseDouble(externalVal.substring(start, end));\n        start = idx + 1;\n        end = externalVal.indexOf(',', start);\n\tidx = end;\n        if (end == -1) {\n          end = externalVal.length();\n        }\n      }\n    }\n    if (i != dimension) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"incompatible dimension (\" + dimension +\n              \") and values (\" + externalVal + \").  Only \" + i + \" values specified\");\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#parsePointDouble(double[],String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a string containing <i>dimension</i> values encoded in it, separated by commas, return a double array of length <i>dimension</i>\n   * containing the values.\n   *\n   * @param out         A preallocated array.  Must be size dimension.  If it is not it will be resized.\n   * @param externalVal The value to parse\n   * @param dimension   The expected number of values for the point\n   * @return An array of the values that make up the point (aka vector)\n   * @throws {@link SolrException} if the dimension specified does not match the number of values in the externalValue.\n   */\n  public static double[] parsePointDouble(double[] out, String externalVal, int dimension) {\n    if (out == null || out.length != dimension) out = new double[dimension];\n    int idx = externalVal.indexOf(',');\n    int end = idx;\n    int start = 0;\n    int i = 0;\n    if (idx == -1 && dimension == 1 && externalVal.length() > 0) {//we have a single point, dimension better be 1\n      out[0] = Double.parseDouble(externalVal.trim());\n      i = 1;\n    } else if (idx > 0) {//if it is zero, that is an error\n      //Parse out a comma separated list of point values, as in: 73.5,89.2,7773.4\n      for (; i < dimension; i++) {\n        //TODO: abstract common code with other parsePoint\n        while (start < end && externalVal.charAt(start) == ' ') start++;\n        while (end > start && externalVal.charAt(end - 1) == ' ') end--;\n\tif (start == end){\n\t    break;\n        }\n        out[i] = Double.parseDouble(externalVal.substring(start, end));\n        start = idx + 1;\n        end = externalVal.indexOf(',', start);\n\tidx = end;\n        if (end == -1) {\n          end = externalVal.length();\n        }\n      }\n    }\n    if (i != dimension) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"incompatible dimension (\" + dimension +\n              \") and values (\" + externalVal + \").  Only \" + i + \" values specified\");\n    }\n    return out;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f900d5ce814fc22ea498d3303d1f833f5bf320c","date":1278720761,"type":5,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceUtils#parsePointDouble(double[],String,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#parsePointDouble(double[],String,int).mjava","sourceNew":"  /**\n   * Given a string containing <i>dimension</i> values encoded in it, separated by commas, return a double array of length <i>dimension</i>\n   * containing the values.\n   *\n   * @param out         A preallocated array.  Must be size dimension.  If it is not it will be resized.\n   * @param externalVal The value to parse\n   * @param dimension   The expected number of values for the point\n   * @return An array of the values that make up the point (aka vector)\n   * @throws InvalidGeoException if the dimension specified does not match the number of values in the externalValue.\n   */\n  public static double[] parsePointDouble(double[] out, String externalVal, int dimension) throws InvalidGeoException{\n    if (out == null || out.length != dimension) out = new double[dimension];\n    int idx = externalVal.indexOf(',');\n    int end = idx;\n    int start = 0;\n    int i = 0;\n    if (idx == -1 && dimension == 1 && externalVal.length() > 0) {//we have a single point, dimension better be 1\n      out[0] = Double.parseDouble(externalVal.trim());\n      i = 1;\n    } else if (idx > 0) {//if it is zero, that is an error\n      //Parse out a comma separated list of point values, as in: 73.5,89.2,7773.4\n      for (; i < dimension; i++) {\n        //TODO: abstract common code with other parsePoint\n        while (start < end && externalVal.charAt(start) == ' ') start++;\n        while (end > start && externalVal.charAt(end - 1) == ' ') end--;\n        if (start == end) {\n          break;\n        }\n        out[i] = Double.parseDouble(externalVal.substring(start, end));\n        start = idx + 1;\n        end = externalVal.indexOf(',', start);\n        idx = end;\n        if (end == -1) {\n          end = externalVal.length();\n        }\n      }\n    }\n    if (i != dimension) {\n      throw new InvalidGeoException(\"incompatible dimension (\" + dimension +\n              \") and values (\" + externalVal + \").  Only \" + i + \" values specified\");\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given a string containing <i>dimension</i> values encoded in it, separated by commas, return a double array of length <i>dimension</i>\n   * containing the values.\n   *\n   * @param out         A preallocated array.  Must be size dimension.  If it is not it will be resized.\n   * @param externalVal The value to parse\n   * @param dimension   The expected number of values for the point\n   * @return An array of the values that make up the point (aka vector)\n   * @throws {@link SolrException} if the dimension specified does not match the number of values in the externalValue.\n   */\n  public static double[] parsePointDouble(double[] out, String externalVal, int dimension) {\n    if (out == null || out.length != dimension) out = new double[dimension];\n    int idx = externalVal.indexOf(',');\n    int end = idx;\n    int start = 0;\n    int i = 0;\n    if (idx == -1 && dimension == 1 && externalVal.length() > 0) {//we have a single point, dimension better be 1\n      out[0] = Double.parseDouble(externalVal.trim());\n      i = 1;\n    } else if (idx > 0) {//if it is zero, that is an error\n      //Parse out a comma separated list of point values, as in: 73.5,89.2,7773.4\n      for (; i < dimension; i++) {\n        //TODO: abstract common code with other parsePoint\n        while (start < end && externalVal.charAt(start) == ' ') start++;\n        while (end > start && externalVal.charAt(end - 1) == ' ') end--;\n\tif (start == end){\n\t    break;\n        }\n        out[i] = Double.parseDouble(externalVal.substring(start, end));\n        start = idx + 1;\n        end = externalVal.indexOf(',', start);\n\tidx = end;\n        if (end == -1) {\n          end = externalVal.length();\n        }\n      }\n    }\n    if (i != dimension) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"incompatible dimension (\" + dimension +\n              \") and values (\" + externalVal + \").  Only \" + i + \" values specified\");\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#parsePointDouble(double[],String,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Given a string containing <i>dimension</i> values encoded in it, separated by commas, return a double array of length <i>dimension</i>\n   * containing the values.\n   *\n   * @param out         A preallocated array.  Must be size dimension.  If it is not it will be resized.\n   * @param externalVal The value to parse\n   * @param dimension   The expected number of values for the point\n   * @return An array of the values that make up the point (aka vector)\n   * @throws {@link SolrException} if the dimension specified does not match the number of values in the externalValue.\n   */\n  public static double[] parsePointDouble(double[] out, String externalVal, int dimension) {\n    if (out == null || out.length != dimension) out = new double[dimension];\n    int idx = externalVal.indexOf(',');\n    int end = idx;\n    int start = 0;\n    int i = 0;\n    if (idx == -1 && dimension == 1 && externalVal.length() > 0) {//we have a single point, dimension better be 1\n      out[0] = Double.parseDouble(externalVal.trim());\n      i = 1;\n    } else if (idx > 0) {//if it is zero, that is an error\n      //Parse out a comma separated list of point values, as in: 73.5,89.2,7773.4\n      for (; i < dimension; i++) {\n        //TODO: abstract common code with other parsePoint\n        while (start < end && externalVal.charAt(start) == ' ') start++;\n        while (end > start && externalVal.charAt(end - 1) == ' ') end--;\n\tif (start == end){\n\t    break;\n        }\n        out[i] = Double.parseDouble(externalVal.substring(start, end));\n        start = idx + 1;\n        end = externalVal.indexOf(',', start);\n\tidx = end;\n        if (end == -1) {\n          end = externalVal.length();\n        }\n      }\n    }\n    if (i != dimension) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"incompatible dimension (\" + dimension +\n              \") and values (\" + externalVal + \").  Only \" + i + \" values specified\");\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f900d5ce814fc22ea498d3303d1f833f5bf320c"]},"commit2Childs":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1da8d55113b689b06716246649de6f62430f15c0":["5f900d5ce814fc22ea498d3303d1f833f5bf320c","5f4e87790277826a2aea119328600dfb07761f32"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}