{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       fail(msg);\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       fail(msg);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       fail(msg);\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       fail(msg);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       fail(msg);\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       fail(msg);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"558b125bbf6fa91eb5355da7e849d46edaf735bc","date":1314371299,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       testsFailed = true;\n       fail(msg);\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       fail(msg);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb1270ddd65fb426f866c5ca6b0bd5587158f1b","date":1316952281,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     \n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       testsFailed = true;\n       fail(msg);\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       testsFailed = true;\n       fail(msg);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 15) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n     \n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       testsFailed = true;\n       fail(msg);\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     \n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       testsFailed = true;\n       fail(msg);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 15) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n     \n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       testsFailed = true;\n       fail(msg);\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     \n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       testsFailed = true;\n       fail(msg);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 15) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n     \n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       testsFailed = true;\n       fail(msg);\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     \n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       testsFailed = true;\n       fail(msg);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeb73e0b9535ebfec6f4687c9055fb4c75e759dc","date":1327605368,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 15) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       testsFailed = true;\n       fail(msg);\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 15) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n     \n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       testsFailed = true;\n       fail(msg);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"238ecd4505d4427a9074c6acd463b113e80cf2ed","date":1327619031,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 30) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       testsFailed = true;\n       fail(msg);\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 15) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       testsFailed = true;\n       fail(msg);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78a55f24d9b493c2a1cecf79f1d78279062b545b","date":1327688152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 30) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       testsFailed = true;\n       fail(msg);\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 15) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n     \n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       testsFailed = true;\n       fail(msg);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ff3d1cbf6b2aa44ff81dc810423c23bcd3c3d48","date":1327710272,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 60) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       testsFailed = true;\n       fail(msg);\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 30) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       testsFailed = true;\n       fail(msg);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7","date":1327763052,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 60) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       testsFailed = true;\n       fail(msg);\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 30) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       testsFailed = true;\n       fail(msg);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fb386fd1f8a1213607aa95af85c25ca21c3e09","date":1327777359,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 60) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // TODO: re-enable this when we've nailed down why this happens on jenkins so often (and not other systems) - see SOLR-3066\n       // testsFailed = true;\n       // fail(msg);\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 60) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       testsFailed = true;\n       fail(msg);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4a0c306589f8607dc4b33f7abaf753db19f76e","date":1327836084,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 60) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // TODO: re-enable this when we've nailed down why this happens on jenkins so often (and not other systems) - see SOLR-3066\n       // testsFailed = true;\n       // fail(msg);\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 60) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       testsFailed = true;\n       fail(msg);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 60) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // TODO: re-enable this when we've nailed down why this happens on jenkins so often (and not other systems) - see SOLR-3066\n       // testsFailed = true;\n       // fail(msg);\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 15) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n     \n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       testsFailed = true;\n       fail(msg);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fc081592828d0d74716867a0e67f3380b4e6177","date":1327892262,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 120) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // TODO: re-enable this when we've nailed down why this happens on jenkins so often (and not other systems) - see SOLR-3066\n       // testsFailed = true;\n       // fail(msg);\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 60) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // TODO: re-enable this when we've nailed down why this happens on jenkins so often (and not other systems) - see SOLR-3066\n       // testsFailed = true;\n       // fail(msg);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ed537de0f5011f66d563092bca474c50e51135f","date":1327937245,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 120) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // TODO: re-enable this when we've nailed down why this happens on jenkins so often (and not other systems) - see SOLR-3066\n       // testsFailed = true;\n       // fail(msg);\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 60) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // TODO: re-enable this when we've nailed down why this happens on jenkins so often (and not other systems) - see SOLR-3066\n       // testsFailed = true;\n       // fail(msg);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 120) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // TODO: re-enable this when we've nailed down why this happens on jenkins so often (and not other systems) - see SOLR-3066\n       // testsFailed = true;\n       // fail(msg);\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 60) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // TODO: re-enable this when we've nailed down why this happens on jenkins so often (and not other systems) - see SOLR-3066\n       // testsFailed = true;\n       // fail(msg);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23c3b9762ceb02e8a891b6fcb9ef23edd5436cc6","date":1328239549,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 120) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n        testsFailed = true;\n        fail(msg);\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 120) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // TODO: re-enable this when we've nailed down why this happens on jenkins so often (and not other systems) - see SOLR-3066\n       // testsFailed = true;\n       // fail(msg);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"221ff19d62d5ff429ffecf8e7f3e01ff93754854","date":1329974551,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 120) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       testsFailed = true;\n\n       // For debugging\n//       Set<Entry<SolrCore,Exception>> coreEntries = SolrCore.openHandles.entrySet(); \n//       for (Entry<SolrCore,Exception> entry : coreEntries) {\n//         entry.getValue().printStackTrace();\n//       }\n        \n        fail(msg);\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 120) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n        testsFailed = true;\n        fail(msg);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 120) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       testsFailed = true;\n\n       // For debugging\n//       Set<Entry<SolrCore,Exception>> coreEntries = SolrCore.openHandles.entrySet(); \n//       for (Entry<SolrCore,Exception> entry : coreEntries) {\n//         entry.getValue().printStackTrace();\n//       }\n        \n        fail(msg);\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 120) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n        testsFailed = true;\n        fail(msg);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 120) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       fail(msg);\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 120) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       testsFailed = true;\n\n       // For debugging\n//       Set<Entry<SolrCore,Exception>> coreEntries = SolrCore.openHandles.entrySet(); \n//       for (Entry<SolrCore,Exception> entry : coreEntries) {\n//         entry.getValue().printStackTrace();\n//       }\n        \n        fail(msg);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41be21993b19ec49c1a0c6761ea20a9ce9a74f93","date":1347885926,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 120) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // if its TestReplicationHandler on freebsd, ignore it\n       if (\"FreeBSD\".equals(Constants.OS_NAME) && \"TestReplicationHandler\".equals(RandomizedContext.current().getTargetClass().getSimpleName())) {\n         log.warn(\"TestReplicationHandler wants to fail!: \" + msg);\n       } else {\n         fail(msg);\n       }\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 120) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       fail(msg);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63c89b1a7a87e9de1c0ac773e437ee61032570b2","date":1351347467,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 120) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // if its TestReplicationHandler, ignore it. the test is broken and gets no love\n       if (\"TestReplicationHandler\".equals(RandomizedContext.current().getTargetClass().getSimpleName())) {\n         log.warn(\"TestReplicationHandler wants to fail!: \" + msg);\n       } else {\n         fail(msg);\n       }\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 120) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // if its TestReplicationHandler on freebsd, ignore it\n       if (\"FreeBSD\".equals(Constants.OS_NAME) && \"TestReplicationHandler\".equals(RandomizedContext.current().getTargetClass().getSimpleName())) {\n         log.warn(\"TestReplicationHandler wants to fail!: \" + msg);\n       } else {\n         fail(msg);\n       }\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 120) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // if its TestReplicationHandler, ignore it. the test is broken and gets no love\n       if (\"TestReplicationHandler\".equals(RandomizedContext.current().getTargetClass().getSimpleName())) {\n         log.warn(\"TestReplicationHandler wants to fail!: \" + msg);\n       } else {\n         fail(msg);\n       }\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 120) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // if its TestReplicationHandler on freebsd, ignore it\n       if (\"FreeBSD\".equals(Constants.OS_NAME) && \"TestReplicationHandler\".equals(RandomizedContext.current().getTargetClass().getSimpleName())) {\n         log.warn(\"TestReplicationHandler wants to fail!: \" + msg);\n       } else {\n         fail(msg);\n       }\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 120) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // if its TestReplicationHandler, ignore it. the test is broken and gets no love\n       if (\"TestReplicationHandler\".equals(RandomizedContext.current().getTargetClass().getSimpleName())) {\n         log.warn(\"TestReplicationHandler wants to fail!: \" + msg);\n       } else {\n         fail(msg);\n       }\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 120) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // if its TestReplicationHandler, ignore it. the test is broken and gets no love\n       if (\"TestReplicationHandler\".equals(RandomizedContext.current().getTargetClass().getSimpleName())) {\n         log.warn(\"TestReplicationHandler wants to fail!: \" + msg);\n       } else {\n         fail(msg);\n       }\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 120) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // if its TestReplicationHandler, ignore it. the test is broken and gets no love\n       if (\"TestReplicationHandler\".equals(RandomizedContext.current().getTargetClass().getSimpleName())) {\n         log.warn(\"TestReplicationHandler wants to fail!: \" + msg);\n       } else {\n         fail(msg);\n       }\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 120) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // if its TestReplicationHandler, ignore it. the test is broken and gets no love\n       if (\"TestReplicationHandler\".equals(RandomizedContext.current().getTargetClass().getSimpleName())) {\n         log.warn(\"TestReplicationHandler wants to fail!: \" + msg);\n       } else {\n         fail(msg);\n       }\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 120) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // if it's TestReplicationHandler, ignore it. the test is broken and gets no love\n       if (\"TestReplicationHandler\".equals(RandomizedContext.current().getTargetClass().getSimpleName())) {\n         log.warn(\"TestReplicationHandler wants to fail!: \" + msg);\n       } else {\n         fail(msg);\n       }\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 120) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // if its TestReplicationHandler, ignore it. the test is broken and gets no love\n       if (\"TestReplicationHandler\".equals(RandomizedContext.current().getTargetClass().getSimpleName())) {\n         log.warn(\"TestReplicationHandler wants to fail!: \" + msg);\n       } else {\n         fail(msg);\n       }\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"536b47681314488eb94706248be6047a3f142841","date":1450372090,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers(int waitSeconds, boolean failTest) {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > waitSeconds) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // if it's TestReplicationHandler, ignore it. the test is broken and gets no love\n       if (\"TestReplicationHandler\".equals(RandomizedContext.current().getTargetClass().getSimpleName())) {\n         log.warn(\"TestReplicationHandler wants to fail!: \" + msg);\n       } else {\n         if (failTest) fail(msg);\n       }\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 120) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // if it's TestReplicationHandler, ignore it. the test is broken and gets no love\n       if (\"TestReplicationHandler\".equals(RandomizedContext.current().getTargetClass().getSimpleName())) {\n         log.warn(\"TestReplicationHandler wants to fail!: \" + msg);\n       } else {\n         fail(msg);\n       }\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"41be21993b19ec49c1a0c6761ea20a9ce9a74f93":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"221ff19d62d5ff429ffecf8e7f3e01ff93754854":["23c3b9762ceb02e8a891b6fcb9ef23edd5436cc6"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["23c3b9762ceb02e8a891b6fcb9ef23edd5436cc6","221ff19d62d5ff429ffecf8e7f3e01ff93754854"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","d3fb386fd1f8a1213607aa95af85c25ca21c3e09"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["63c89b1a7a87e9de1c0ac773e437ee61032570b2"],"d3fb386fd1f8a1213607aa95af85c25ca21c3e09":["4ff3d1cbf6b2aa44ff81dc810423c23bcd3c3d48"],"abb1270ddd65fb426f866c5ca6b0bd5587158f1b":["558b125bbf6fa91eb5355da7e849d46edaf735bc"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["abb1270ddd65fb426f866c5ca6b0bd5587158f1b","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["221ff19d62d5ff429ffecf8e7f3e01ff93754854"],"63c89b1a7a87e9de1c0ac773e437ee61032570b2":["41be21993b19ec49c1a0c6761ea20a9ce9a74f93"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["8f4a0c306589f8607dc4b33f7abaf753db19f76e","8fc081592828d0d74716867a0e67f3380b4e6177"],"23c3b9762ceb02e8a891b6fcb9ef23edd5436cc6":["8fc081592828d0d74716867a0e67f3380b4e6177"],"f2126b84bd093fa3d921582a109a0ee578c28126":["41be21993b19ec49c1a0c6761ea20a9ce9a74f93","63c89b1a7a87e9de1c0ac773e437ee61032570b2"],"238ecd4505d4427a9074c6acd463b113e80cf2ed":["eeb73e0b9535ebfec6f4687c9055fb4c75e759dc"],"78a55f24d9b493c2a1cecf79f1d78279062b545b":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","238ecd4505d4427a9074c6acd463b113e80cf2ed"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["63c89b1a7a87e9de1c0ac773e437ee61032570b2","19275ba31e621f6da1b83bf13af75233876fd3d4"],"536b47681314488eb94706248be6047a3f142841":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"8fc081592828d0d74716867a0e67f3380b4e6177":["d3fb386fd1f8a1213607aa95af85c25ca21c3e09"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["abb1270ddd65fb426f866c5ca6b0bd5587158f1b","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7":["78a55f24d9b493c2a1cecf79f1d78279062b545b","4ff3d1cbf6b2aa44ff81dc810423c23bcd3c3d48"],"4ff3d1cbf6b2aa44ff81dc810423c23bcd3c3d48":["238ecd4505d4427a9074c6acd463b113e80cf2ed"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"558b125bbf6fa91eb5355da7e849d46edaf735bc":["c26f00b574427b55127e869b935845554afde1fa"],"6ed537de0f5011f66d563092bca474c50e51135f":["fd92b8bcc88e969302510acf77bd6970da3994c4","8fc081592828d0d74716867a0e67f3380b4e6177"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["abb1270ddd65fb426f866c5ca6b0bd5587158f1b"],"8f4a0c306589f8607dc4b33f7abaf753db19f76e":["014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7","d3fb386fd1f8a1213607aa95af85c25ca21c3e09"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eeb73e0b9535ebfec6f4687c9055fb4c75e759dc":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["536b47681314488eb94706248be6047a3f142841"]},"commit2Childs":{"41be21993b19ec49c1a0c6761ea20a9ce9a74f93":["63c89b1a7a87e9de1c0ac773e437ee61032570b2","f2126b84bd093fa3d921582a109a0ee578c28126"],"221ff19d62d5ff429ffecf8e7f3e01ff93754854":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","5da0b42730b6b99b31389ef94cb97384e83b9ede"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c26f00b574427b55127e869b935845554afde1fa":["558b125bbf6fa91eb5355da7e849d46edaf735bc"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["6ed537de0f5011f66d563092bca474c50e51135f"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"d3fb386fd1f8a1213607aa95af85c25ca21c3e09":["fd92b8bcc88e969302510acf77bd6970da3994c4","8fc081592828d0d74716867a0e67f3380b4e6177","8f4a0c306589f8607dc4b33f7abaf753db19f76e"],"abb1270ddd65fb426f866c5ca6b0bd5587158f1b":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["536b47681314488eb94706248be6047a3f142841"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["41be21993b19ec49c1a0c6761ea20a9ce9a74f93"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"63c89b1a7a87e9de1c0ac773e437ee61032570b2":["19275ba31e621f6da1b83bf13af75233876fd3d4","f2126b84bd093fa3d921582a109a0ee578c28126","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"23c3b9762ceb02e8a891b6fcb9ef23edd5436cc6":["221ff19d62d5ff429ffecf8e7f3e01ff93754854","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"238ecd4505d4427a9074c6acd463b113e80cf2ed":["78a55f24d9b493c2a1cecf79f1d78279062b545b","4ff3d1cbf6b2aa44ff81dc810423c23bcd3c3d48"],"78a55f24d9b493c2a1cecf79f1d78279062b545b":["014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"536b47681314488eb94706248be6047a3f142841":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8fc081592828d0d74716867a0e67f3380b4e6177":["5b6fdfce35d0adb18836cf8711abe487a934df33","23c3b9762ceb02e8a891b6fcb9ef23edd5436cc6","6ed537de0f5011f66d563092bca474c50e51135f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["78a55f24d9b493c2a1cecf79f1d78279062b545b"],"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7":["8f4a0c306589f8607dc4b33f7abaf753db19f76e"],"4ff3d1cbf6b2aa44ff81dc810423c23bcd3c3d48":["d3fb386fd1f8a1213607aa95af85c25ca21c3e09","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"558b125bbf6fa91eb5355da7e849d46edaf735bc":["abb1270ddd65fb426f866c5ca6b0bd5587158f1b"],"6ed537de0f5011f66d563092bca474c50e51135f":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","eeb73e0b9535ebfec6f4687c9055fb4c75e759dc"],"8f4a0c306589f8607dc4b33f7abaf753db19f76e":["5b6fdfce35d0adb18836cf8711abe487a934df33"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"eeb73e0b9535ebfec6f4687c9055fb4c75e759dc":["238ecd4505d4427a9074c6acd463b113e80cf2ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","5b6fdfce35d0adb18836cf8711abe487a934df33","f2126b84bd093fa3d921582a109a0ee578c28126","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","6ed537de0f5011f66d563092bca474c50e51135f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}