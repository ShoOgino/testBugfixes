{"path":"solr/src/java/org/apache/solr/highlight/TokenOrderingFilter[DefaultSolrHighlighter]#incrementToken().mjava","commits":[{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/highlight/TokenOrderingFilter[DefaultSolrHighlighter]#incrementToken().mjava","pathOld":"src/java/org/apache/solr/highlight/TokenOrderingFilter[DefaultSolrHighlighter]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    while (!done && queue.size() < windowSize) {\n      if (!input.incrementToken()) {\n        done = true;\n        break;\n      }\n\n      // reverse iterating for better efficiency since we know the\n      // list is already sorted, and most token start offsets will be too.\n      ListIterator<OrderedToken> iter = queue.listIterator(queue.size());\n      while(iter.hasPrevious()) {\n        if (offsetAtt.startOffset() >= iter.previous().startOffset) {\n          // insertion will be before what next() would return (what\n          // we just compared against), so move back one so the insertion\n          // will be after.\n          iter.next();\n          break;\n        }\n      }\n      OrderedToken ot = new OrderedToken();\n      ot.state = captureState();\n      ot.startOffset = offsetAtt.startOffset();\n      iter.add(ot);\n    }\n\n    if (queue.isEmpty()) {\n      return false;\n    } else {\n      restoreState(queue.removeFirst().state);\n      return true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    while (!done && queue.size() < windowSize) {\n      if (!input.incrementToken()) {\n        done = true;\n        break;\n      }\n\n      // reverse iterating for better efficiency since we know the\n      // list is already sorted, and most token start offsets will be too.\n      ListIterator<OrderedToken> iter = queue.listIterator(queue.size());\n      while(iter.hasPrevious()) {\n        if (offsetAtt.startOffset() >= iter.previous().startOffset) {\n          // insertion will be before what next() would return (what\n          // we just compared against), so move back one so the insertion\n          // will be after.\n          iter.next();\n          break;\n        }\n      }\n      OrderedToken ot = new OrderedToken();\n      ot.state = captureState();\n      ot.startOffset = offsetAtt.startOffset();\n      iter.add(ot);\n    }\n\n    if (queue.isEmpty()) {\n      return false;\n    } else {\n      restoreState(queue.removeFirst().state);\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/highlight/TokenOrderingFilter[DefaultSolrHighlighter]#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    while (!done && queue.size() < windowSize) {\n      if (!input.incrementToken()) {\n        done = true;\n        break;\n      }\n\n      // reverse iterating for better efficiency since we know the\n      // list is already sorted, and most token start offsets will be too.\n      ListIterator<OrderedToken> iter = queue.listIterator(queue.size());\n      while(iter.hasPrevious()) {\n        if (offsetAtt.startOffset() >= iter.previous().startOffset) {\n          // insertion will be before what next() would return (what\n          // we just compared against), so move back one so the insertion\n          // will be after.\n          iter.next();\n          break;\n        }\n      }\n      OrderedToken ot = new OrderedToken();\n      ot.state = captureState();\n      ot.startOffset = offsetAtt.startOffset();\n      iter.add(ot);\n    }\n\n    if (queue.isEmpty()) {\n      return false;\n    } else {\n      restoreState(queue.removeFirst().state);\n      return true;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/TokenOrderingFilter[DefaultSolrHighlighter]#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/highlight/TokenOrderingFilter[DefaultSolrHighlighter]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    while (!done && queue.size() < windowSize) {\n      if (!input.incrementToken()) {\n        done = true;\n        break;\n      }\n\n      // reverse iterating for better efficiency since we know the\n      // list is already sorted, and most token start offsets will be too.\n      ListIterator<OrderedToken> iter = queue.listIterator(queue.size());\n      while(iter.hasPrevious()) {\n        if (offsetAtt.startOffset() >= iter.previous().startOffset) {\n          // insertion will be before what next() would return (what\n          // we just compared against), so move back one so the insertion\n          // will be after.\n          iter.next();\n          break;\n        }\n      }\n      OrderedToken ot = new OrderedToken();\n      ot.state = captureState();\n      ot.startOffset = offsetAtt.startOffset();\n      iter.add(ot);\n    }\n\n    if (queue.isEmpty()) {\n      return false;\n    } else {\n      restoreState(queue.removeFirst().state);\n      return true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    while (!done && queue.size() < windowSize) {\n      if (!input.incrementToken()) {\n        done = true;\n        break;\n      }\n\n      // reverse iterating for better efficiency since we know the\n      // list is already sorted, and most token start offsets will be too.\n      ListIterator<OrderedToken> iter = queue.listIterator(queue.size());\n      while(iter.hasPrevious()) {\n        if (offsetAtt.startOffset() >= iter.previous().startOffset) {\n          // insertion will be before what next() would return (what\n          // we just compared against), so move back one so the insertion\n          // will be after.\n          iter.next();\n          break;\n        }\n      }\n      OrderedToken ot = new OrderedToken();\n      ot.state = captureState();\n      ot.startOffset = offsetAtt.startOffset();\n      iter.add(ot);\n    }\n\n    if (queue.isEmpty()) {\n      return false;\n    } else {\n      restoreState(queue.removeFirst().state);\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/TokenOrderingFilter[DefaultSolrHighlighter]#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/highlight/TokenOrderingFilter[DefaultSolrHighlighter]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    while (!done && queue.size() < windowSize) {\n      if (!input.incrementToken()) {\n        done = true;\n        break;\n      }\n\n      // reverse iterating for better efficiency since we know the\n      // list is already sorted, and most token start offsets will be too.\n      ListIterator<OrderedToken> iter = queue.listIterator(queue.size());\n      while(iter.hasPrevious()) {\n        if (offsetAtt.startOffset() >= iter.previous().startOffset) {\n          // insertion will be before what next() would return (what\n          // we just compared against), so move back one so the insertion\n          // will be after.\n          iter.next();\n          break;\n        }\n      }\n      OrderedToken ot = new OrderedToken();\n      ot.state = captureState();\n      ot.startOffset = offsetAtt.startOffset();\n      iter.add(ot);\n    }\n\n    if (queue.isEmpty()) {\n      return false;\n    } else {\n      restoreState(queue.removeFirst().state);\n      return true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    while (!done && queue.size() < windowSize) {\n      if (!input.incrementToken()) {\n        done = true;\n        break;\n      }\n\n      // reverse iterating for better efficiency since we know the\n      // list is already sorted, and most token start offsets will be too.\n      ListIterator<OrderedToken> iter = queue.listIterator(queue.size());\n      while(iter.hasPrevious()) {\n        if (offsetAtt.startOffset() >= iter.previous().startOffset) {\n          // insertion will be before what next() would return (what\n          // we just compared against), so move back one so the insertion\n          // will be after.\n          iter.next();\n          break;\n        }\n      }\n      OrderedToken ot = new OrderedToken();\n      ot.state = captureState();\n      ot.startOffset = offsetAtt.startOffset();\n      iter.add(ot);\n    }\n\n    if (queue.isEmpty()) {\n      return false;\n    } else {\n      restoreState(queue.removeFirst().state);\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/TokenOrderingFilter[DefaultSolrHighlighter]#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/highlight/TokenOrderingFilter[DefaultSolrHighlighter]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    while (!done && queue.size() < windowSize) {\n      if (!input.incrementToken()) {\n        done = true;\n        break;\n      }\n\n      // reverse iterating for better efficiency since we know the\n      // list is already sorted, and most token start offsets will be too.\n      ListIterator<OrderedToken> iter = queue.listIterator(queue.size());\n      while(iter.hasPrevious()) {\n        if (offsetAtt.startOffset() >= iter.previous().startOffset) {\n          // insertion will be before what next() would return (what\n          // we just compared against), so move back one so the insertion\n          // will be after.\n          iter.next();\n          break;\n        }\n      }\n      OrderedToken ot = new OrderedToken();\n      ot.state = captureState();\n      ot.startOffset = offsetAtt.startOffset();\n      iter.add(ot);\n    }\n\n    if (queue.isEmpty()) {\n      return false;\n    } else {\n      restoreState(queue.removeFirst().state);\n      return true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    while (!done && queue.size() < windowSize) {\n      if (!input.incrementToken()) {\n        done = true;\n        break;\n      }\n\n      // reverse iterating for better efficiency since we know the\n      // list is already sorted, and most token start offsets will be too.\n      ListIterator<OrderedToken> iter = queue.listIterator(queue.size());\n      while(iter.hasPrevious()) {\n        if (offsetAtt.startOffset() >= iter.previous().startOffset) {\n          // insertion will be before what next() would return (what\n          // we just compared against), so move back one so the insertion\n          // will be after.\n          iter.next();\n          break;\n        }\n      }\n      OrderedToken ot = new OrderedToken();\n      ot.state = captureState();\n      ot.startOffset = offsetAtt.startOffset();\n      iter.add(ot);\n    }\n\n    if (queue.isEmpty()) {\n      return false;\n    } else {\n      restoreState(queue.removeFirst().state);\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}