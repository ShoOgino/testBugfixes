{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyJDKSet().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyJDKSet().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyJDKSet().mjava","sourceNew":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<String>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<String>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase());\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(TEST_VERSION_CURRENT, set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<String>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","sourceOld":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<String>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<String>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase());\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(TEST_VERSION_CURRENT, set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<String>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68f4ad0129ad3f60268f3df42c238366082da936","date":1341666620,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyJDKSet().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyJDKSet().mjava","sourceNew":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<String>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<String>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(TEST_VERSION_CURRENT, set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<String>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","sourceOld":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<String>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<String>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase());\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(TEST_VERSION_CURRENT, set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<String>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyJDKSet().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyJDKSet().mjava","sourceNew":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<String>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<String>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(TEST_VERSION_CURRENT, set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<String>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","sourceOld":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<String>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<String>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase());\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(TEST_VERSION_CURRENT, set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<String>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyJDKSet().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyJDKSet().mjava","sourceNew":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<String>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<String>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(TEST_VERSION_CURRENT, set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<String>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","sourceOld":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<String>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<String>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase());\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(TEST_VERSION_CURRENT, set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<String>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyJDKSet().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyJDKSet().mjava","sourceNew":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<String>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<String>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(TEST_VERSION_CURRENT, set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<String>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","sourceOld":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<String>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<String>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase());\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(TEST_VERSION_CURRENT, set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<String>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyJDKSet().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyJDKSet().mjava","sourceNew":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<String>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<String>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(TEST_VERSION_CURRENT, set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<String>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","sourceOld":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<String>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<String>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(TEST_VERSION_CURRENT, set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<String>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyJDKSet().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyJDKSet().mjava","sourceNew":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<String>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<String>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(TEST_VERSION_CURRENT, set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<String>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","sourceOld":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<String>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<String>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(TEST_VERSION_CURRENT, set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<String>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyJDKSet().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyJDKSet().mjava","sourceNew":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(TEST_VERSION_CURRENT, set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","sourceOld":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<String>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<String>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(TEST_VERSION_CURRENT, set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<String>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyJDKSet().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyJDKSet().mjava","sourceNew":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","sourceOld":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(TEST_VERSION_CURRENT, set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyJDKSet().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyJDKSet().mjava","sourceNew":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(TEST_VERSION_CURRENT, set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","sourceOld":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyJDKSet().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyJDKSet().mjava","sourceNew":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","sourceOld":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(TEST_VERSION_CURRENT, set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testCopyJDKSet().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyJDKSet().mjava","sourceNew":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","sourceOld":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testCopyJDKSet().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyJDKSet().mjava","sourceNew":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","sourceOld":"  /**\n   * Test the static #copy() function with a JDK {@link Set} as a source\n   */\n  public void testCopyJDKSet() {\n    Set<String> set = new HashSet<>();\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n\n    CharArraySet copy = CharArraySet.copy(set);\n\n    assertEquals(set.size(), copy.size());\n    assertEquals(set.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copy.contains(string));\n    }\n    \n    List<String> newWords = new ArrayList<>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(set.contains(string));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"68f4ad0129ad3f60268f3df42c238366082da936":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","68f4ad0129ad3f60268f3df42c238366082da936"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["379db3ad24c4f0214f30a122265a6d6be003a99d","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["2acf500f78aa12b92e371fd89c719291986b6b90"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"68f4ad0129ad3f60268f3df42c238366082da936":["2acf500f78aa12b92e371fd89c719291986b6b90"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"2acf500f78aa12b92e371fd89c719291986b6b90":["19275ba31e621f6da1b83bf13af75233876fd3d4","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"46d8ada1fff8d18cb197c38c7983225162599948":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["68f4ad0129ad3f60268f3df42c238366082da936","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"379db3ad24c4f0214f30a122265a6d6be003a99d":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}