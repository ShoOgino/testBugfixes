{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(MergeTrigger,int).mjava","commits":[{"id":"181b1aa5a99534972fbfd5595cdbb38bba5f39ee","date":1350576187,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(MergeTrigger,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int).mjava","sourceNew":"  private synchronized void updatePendingMerges(MergeTrigger trigger, int maxNumSegments)\n    throws IOException {\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n    assert trigger != null;\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != UNBOUNDED_MAX_MERGE_SEGMENTS) {\n      assert trigger == MergeTrigger.EXPLICIT || trigger == MergeTrigger.MERGE_FINISHED :\n        \"Expected EXPLICT or MERGE_FINISHED as trigger even with maxNumSegments set but was: \" + trigger.name();\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge));\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(trigger, segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegments)\n    throws IOException {\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != -1) {\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge));\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(MergeTrigger,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int).mjava","sourceNew":"  private synchronized void updatePendingMerges(MergeTrigger trigger, int maxNumSegments)\n    throws IOException {\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n    assert trigger != null;\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != UNBOUNDED_MAX_MERGE_SEGMENTS) {\n      assert trigger == MergeTrigger.EXPLICIT || trigger == MergeTrigger.MERGE_FINISHED :\n        \"Expected EXPLICT or MERGE_FINISHED as trigger even with maxNumSegments set but was: \" + trigger.name();\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge));\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(trigger, segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegments)\n    throws IOException {\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != -1) {\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge));\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e072d0b1fc19e0533d8ce432eed245196bca6fde","date":1379265112,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(MergeTrigger,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(MergeTrigger,int).mjava","sourceNew":"  private synchronized void updatePendingMerges(MergeTrigger trigger, int maxNumSegments)\n    throws IOException {\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n    assert trigger != null;\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != UNBOUNDED_MAX_MERGE_SEGMENTS) {\n      assert trigger == MergeTrigger.EXPLICIT || trigger == MergeTrigger.MERGE_FINISHED :\n        \"Expected EXPLICT or MERGE_FINISHED as trigger even with maxNumSegments set but was: \" + trigger.name();\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge));\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n    } else {\n      spec = mergePolicy.findMerges(trigger, segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(MergeTrigger trigger, int maxNumSegments)\n    throws IOException {\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n    assert trigger != null;\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != UNBOUNDED_MAX_MERGE_SEGMENTS) {\n      assert trigger == MergeTrigger.EXPLICIT || trigger == MergeTrigger.MERGE_FINISHED :\n        \"Expected EXPLICT or MERGE_FINISHED as trigger even with maxNumSegments set but was: \" + trigger.name();\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge));\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n\n    } else {\n      spec = mergePolicy.findMerges(trigger, segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4853751884e55469b8cc1abab8fa0788eab240c9","date":1394565067,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(MergeTrigger,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(MergeTrigger,int).mjava","sourceNew":"  private synchronized boolean updatePendingMerges(MergeTrigger trigger, int maxNumSegments)\n    throws IOException {\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n    assert trigger != null;\n    if (stopMerges) {\n      return false;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return false;\n    }\n    boolean newMergesFound = false;\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != UNBOUNDED_MAX_MERGE_SEGMENTS) {\n      assert trigger == MergeTrigger.EXPLICIT || trigger == MergeTrigger.MERGE_FINISHED :\n        \"Expected EXPLICT or MERGE_FINISHED as trigger even with maxNumSegments set but was: \" + trigger.name();\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge));\n      newMergesFound = spec != null;\n      if (newMergesFound) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n    } else {\n      spec = mergePolicy.findMerges(trigger, segmentInfos);\n    }\n    newMergesFound = spec != null;\n    if (newMergesFound) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n    return newMergesFound;\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(MergeTrigger trigger, int maxNumSegments)\n    throws IOException {\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n    assert trigger != null;\n    if (stopMerges) {\n      return;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != UNBOUNDED_MAX_MERGE_SEGMENTS) {\n      assert trigger == MergeTrigger.EXPLICIT || trigger == MergeTrigger.MERGE_FINISHED :\n        \"Expected EXPLICT or MERGE_FINISHED as trigger even with maxNumSegments set but was: \" + trigger.name();\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge));\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n    } else {\n      spec = mergePolicy.findMerges(trigger, segmentInfos);\n    }\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"027bee21e09164c9ee230395405076d1e0034b30","date":1401521821,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(MergeTrigger,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(MergeTrigger,int).mjava","sourceNew":"  private synchronized boolean updatePendingMerges(MergeTrigger trigger, int maxNumSegments)\n    throws IOException {\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n    assert trigger != null;\n    if (stopMerges) {\n      return false;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return false;\n    }\n    boolean newMergesFound = false;\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != UNBOUNDED_MAX_MERGE_SEGMENTS) {\n      assert trigger == MergeTrigger.EXPLICIT || trigger == MergeTrigger.MERGE_FINISHED :\n        \"Expected EXPLICT or MERGE_FINISHED as trigger even with maxNumSegments set but was: \" + trigger.name();\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge), this);\n      newMergesFound = spec != null;\n      if (newMergesFound) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n    } else {\n      spec = mergePolicy.findMerges(trigger, segmentInfos, this);\n    }\n    newMergesFound = spec != null;\n    if (newMergesFound) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n    return newMergesFound;\n  }\n\n","sourceOld":"  private synchronized boolean updatePendingMerges(MergeTrigger trigger, int maxNumSegments)\n    throws IOException {\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n    assert trigger != null;\n    if (stopMerges) {\n      return false;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return false;\n    }\n    boolean newMergesFound = false;\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != UNBOUNDED_MAX_MERGE_SEGMENTS) {\n      assert trigger == MergeTrigger.EXPLICIT || trigger == MergeTrigger.MERGE_FINISHED :\n        \"Expected EXPLICT or MERGE_FINISHED as trigger even with maxNumSegments set but was: \" + trigger.name();\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge));\n      newMergesFound = spec != null;\n      if (newMergesFound) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n    } else {\n      spec = mergePolicy.findMerges(trigger, segmentInfos);\n    }\n    newMergesFound = spec != null;\n    if (newMergesFound) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n    return newMergesFound;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e1e55b47fe417e794220e738ba7c93fdbb46fc8","date":1401731755,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(MergeTrigger,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(MergeTrigger,int).mjava","sourceNew":"  private synchronized boolean updatePendingMerges(MergeTrigger trigger, int maxNumSegments)\n    throws IOException {\n\n    // In case infoStream was disabled on init, but then enabled at some\n    // point, try again to log the config here:\n    messageState();\n\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n    assert trigger != null;\n    if (stopMerges) {\n      return false;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return false;\n    }\n    boolean newMergesFound = false;\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != UNBOUNDED_MAX_MERGE_SEGMENTS) {\n      assert trigger == MergeTrigger.EXPLICIT || trigger == MergeTrigger.MERGE_FINISHED :\n        \"Expected EXPLICT or MERGE_FINISHED as trigger even with maxNumSegments set but was: \" + trigger.name();\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge), this);\n      newMergesFound = spec != null;\n      if (newMergesFound) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n    } else {\n      spec = mergePolicy.findMerges(trigger, segmentInfos, this);\n    }\n    newMergesFound = spec != null;\n    if (newMergesFound) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n    return newMergesFound;\n  }\n\n","sourceOld":"  private synchronized boolean updatePendingMerges(MergeTrigger trigger, int maxNumSegments)\n    throws IOException {\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n    assert trigger != null;\n    if (stopMerges) {\n      return false;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return false;\n    }\n    boolean newMergesFound = false;\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != UNBOUNDED_MAX_MERGE_SEGMENTS) {\n      assert trigger == MergeTrigger.EXPLICIT || trigger == MergeTrigger.MERGE_FINISHED :\n        \"Expected EXPLICT or MERGE_FINISHED as trigger even with maxNumSegments set but was: \" + trigger.name();\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge), this);\n      newMergesFound = spec != null;\n      if (newMergesFound) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n    } else {\n      spec = mergePolicy.findMerges(trigger, segmentInfos, this);\n    }\n    newMergesFound = spec != null;\n    if (newMergesFound) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n    return newMergesFound;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee59f646cf24586a449cad77391a60a3ac8d8959","date":1408015131,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(MergePolicy,MergeTrigger,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(MergeTrigger,int).mjava","sourceNew":"  private synchronized boolean updatePendingMerges(MergePolicy mergePolicy, MergeTrigger trigger, int maxNumSegments)\n    throws IOException {\n\n    // In case infoStream was disabled on init, but then enabled at some\n    // point, try again to log the config here:\n    messageState();\n\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n    assert trigger != null;\n    if (stopMerges) {\n      return false;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return false;\n    }\n    boolean newMergesFound = false;\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != UNBOUNDED_MAX_MERGE_SEGMENTS) {\n      assert trigger == MergeTrigger.EXPLICIT || trigger == MergeTrigger.MERGE_FINISHED :\n        \"Expected EXPLICT or MERGE_FINISHED as trigger even with maxNumSegments set but was: \" + trigger.name();\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge), this);\n      newMergesFound = spec != null;\n      if (newMergesFound) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n    } else {\n      spec = mergePolicy.findMerges(trigger, segmentInfos, this);\n    }\n    newMergesFound = spec != null;\n    if (newMergesFound) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n    return newMergesFound;\n  }\n\n","sourceOld":"  private synchronized boolean updatePendingMerges(MergeTrigger trigger, int maxNumSegments)\n    throws IOException {\n\n    // In case infoStream was disabled on init, but then enabled at some\n    // point, try again to log the config here:\n    messageState();\n\n    assert maxNumSegments == -1 || maxNumSegments > 0;\n    assert trigger != null;\n    if (stopMerges) {\n      return false;\n    }\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return false;\n    }\n    boolean newMergesFound = false;\n    final MergePolicy.MergeSpecification spec;\n    if (maxNumSegments != UNBOUNDED_MAX_MERGE_SEGMENTS) {\n      assert trigger == MergeTrigger.EXPLICIT || trigger == MergeTrigger.MERGE_FINISHED :\n        \"Expected EXPLICT or MERGE_FINISHED as trigger even with maxNumSegments set but was: \" + trigger.name();\n      spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge), this);\n      newMergesFound = spec != null;\n      if (newMergesFound) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = spec.merges.get(i);\n          merge.maxNumSegments = maxNumSegments;\n        }\n      }\n    } else {\n      spec = mergePolicy.findMerges(trigger, segmentInfos, this);\n    }\n    newMergesFound = spec != null;\n    if (newMergesFound) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++) {\n        registerMerge(spec.merges.get(i));\n      }\n    }\n    return newMergesFound;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4853751884e55469b8cc1abab8fa0788eab240c9":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"e072d0b1fc19e0533d8ce432eed245196bca6fde":["181b1aa5a99534972fbfd5595cdbb38bba5f39ee"],"62e52115b56781006682fd92c6938efaf174304d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","181b1aa5a99534972fbfd5595cdbb38bba5f39ee"],"ee59f646cf24586a449cad77391a60a3ac8d8959":["2e1e55b47fe417e794220e738ba7c93fdbb46fc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"181b1aa5a99534972fbfd5595cdbb38bba5f39ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e1e55b47fe417e794220e738ba7c93fdbb46fc8":["027bee21e09164c9ee230395405076d1e0034b30"],"027bee21e09164c9ee230395405076d1e0034b30":["4853751884e55469b8cc1abab8fa0788eab240c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee59f646cf24586a449cad77391a60a3ac8d8959"]},"commit2Childs":{"4853751884e55469b8cc1abab8fa0788eab240c9":["027bee21e09164c9ee230395405076d1e0034b30"],"e072d0b1fc19e0533d8ce432eed245196bca6fde":["4853751884e55469b8cc1abab8fa0788eab240c9"],"62e52115b56781006682fd92c6938efaf174304d":[],"ee59f646cf24586a449cad77391a60a3ac8d8959":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["62e52115b56781006682fd92c6938efaf174304d","181b1aa5a99534972fbfd5595cdbb38bba5f39ee"],"181b1aa5a99534972fbfd5595cdbb38bba5f39ee":["e072d0b1fc19e0533d8ce432eed245196bca6fde","62e52115b56781006682fd92c6938efaf174304d"],"2e1e55b47fe417e794220e738ba7c93fdbb46fc8":["ee59f646cf24586a449cad77391a60a3ac8d8959"],"027bee21e09164c9ee230395405076d1e0034b30":["2e1e55b47fe417e794220e738ba7c93fdbb46fc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["62e52115b56781006682fd92c6938efaf174304d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}