{"path":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#writeError(int,String).mjava","commits":[{"id":"dd6ddd3da533988676f6ec21e7e4651a2b2e8345","date":1330043299,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#writeError(int,String).mjava","pathOld":"/dev/null","sourceNew":"    void writeError(int code, String msg) {\r\n      response.setStatus(code);\r\n\r\n      CharArr chars = new CharArr();\r\n      JSONWriter w = new JSONWriter(chars, 2);\r\n      w.startObject();\r\n      w.indent();\r\n      w.writeString(\"status\");\r\n      w.writeNameSeparator();\r\n      w.write(code);\r\n      w.writeValueSeparator();\r\n      w.indent();\r\n      w.writeString(\"error\");\r\n      w.writeNameSeparator();\r\n      w.writeString(msg);\r\n      w.endObject();\r\n\r\n      out.println(chars.toString());\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#writeError(int,String).mjava","pathOld":"/dev/null","sourceNew":"    void writeError(int code, String msg) {\r\n      response.setStatus(code);\r\n\r\n      CharArr chars = new CharArr();\r\n      JSONWriter w = new JSONWriter(chars, 2);\r\n      w.startObject();\r\n      w.indent();\r\n      w.writeString(\"status\");\r\n      w.writeNameSeparator();\r\n      w.write(code);\r\n      w.writeValueSeparator();\r\n      w.indent();\r\n      w.writeString(\"error\");\r\n      w.writeNameSeparator();\r\n      w.writeString(msg);\r\n      w.endObject();\r\n\r\n      out.println(chars.toString());\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23","date":1332766738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#writeError(int,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#writeError(int,String).mjava","sourceNew":"    void writeError(int code, String msg) {\n      response.setStatus(code);\n\n      CharArr chars = new CharArr();\n      JSONWriter w = new JSONWriter(chars, 2);\n      w.startObject();\n      w.indent();\n      w.writeString(\"status\");\n      w.writeNameSeparator();\n      w.write(code);\n      w.writeValueSeparator();\n      w.indent();\n      w.writeString(\"error\");\n      w.writeNameSeparator();\n      w.writeString(msg);\n      w.endObject();\n\n      out.println(chars.toString());\n    }\n\n","sourceOld":"    void writeError(int code, String msg) {\r\n      response.setStatus(code);\r\n\r\n      CharArr chars = new CharArr();\r\n      JSONWriter w = new JSONWriter(chars, 2);\r\n      w.startObject();\r\n      w.indent();\r\n      w.writeString(\"status\");\r\n      w.writeNameSeparator();\r\n      w.write(code);\r\n      w.writeValueSeparator();\r\n      w.indent();\r\n      w.writeString(\"error\");\r\n      w.writeNameSeparator();\r\n      w.writeString(msg);\r\n      w.endObject();\r\n\r\n      out.println(chars.toString());\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7d0565444d6381434fbff66cecf07da249f2bb4","date":1357484111,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#writeError(int,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#writeError(int,String).mjava","sourceNew":"    void writeError(int code, String msg) throws IOException {\n      response.setStatus(code);\n\n      CharArr chars = new CharArr();\n      JSONWriter w = new JSONWriter(chars, 2);\n      w.startObject();\n      w.indent();\n      w.writeString(\"status\");\n      w.writeNameSeparator();\n      w.write(code);\n      w.writeValueSeparator();\n      w.indent();\n      w.writeString(\"error\");\n      w.writeNameSeparator();\n      w.writeString(msg);\n      w.endObject();\n\n      out.write(chars.toString());\n    }\n\n","sourceOld":"    void writeError(int code, String msg) {\n      response.setStatus(code);\n\n      CharArr chars = new CharArr();\n      JSONWriter w = new JSONWriter(chars, 2);\n      w.startObject();\n      w.indent();\n      w.writeString(\"status\");\n      w.writeNameSeparator();\n      w.write(code);\n      w.writeValueSeparator();\n      w.indent();\n      w.writeString(\"error\");\n      w.writeNameSeparator();\n      w.writeString(msg);\n      w.endObject();\n\n      out.println(chars.toString());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#writeError(int,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#writeError(int,String).mjava","sourceNew":"    void writeError(int code, String msg) throws IOException {\n      response.setStatus(code);\n\n      CharArr chars = new CharArr();\n      JSONWriter w = new JSONWriter(chars, 2);\n      w.startObject();\n      w.indent();\n      w.writeString(\"status\");\n      w.writeNameSeparator();\n      w.write(code);\n      w.writeValueSeparator();\n      w.indent();\n      w.writeString(\"error\");\n      w.writeNameSeparator();\n      w.writeString(msg);\n      w.endObject();\n\n      out.write(chars.toString());\n    }\n\n","sourceOld":"    void writeError(int code, String msg) {\n      response.setStatus(code);\n\n      CharArr chars = new CharArr();\n      JSONWriter w = new JSONWriter(chars, 2);\n      w.startObject();\n      w.indent();\n      w.writeString(\"status\");\n      w.writeNameSeparator();\n      w.write(code);\n      w.writeValueSeparator();\n      w.indent();\n      w.writeString(\"error\");\n      w.writeNameSeparator();\n      w.writeString(msg);\n      w.endObject();\n\n      out.println(chars.toString());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80ebe5b1d946f7c2ed9c46206b0c7254dc21206a","date":1443442239,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperInfoHandler.ZKPrinter#writeError(int,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#writeError(int,String).mjava","sourceNew":"    void writeError(int code, String msg) throws IOException {\n      throw new SolrException(ErrorCode.getErrorCode(code), msg);\n      /*response.setStatus(code);\n\n      CharArr chars = new CharArr();\n      JSONWriter w = new JSONWriter(chars, 2);\n      w.startObject();\n      w.indent();\n      w.writeString(\"status\");\n      w.writeNameSeparator();\n      w.write(code);\n      w.writeValueSeparator();\n      w.indent();\n      w.writeString(\"error\");\n      w.writeNameSeparator();\n      w.writeString(msg);\n      w.endObject();\n\n      out.write(chars.toString());*/\n    }\n\n","sourceOld":"    void writeError(int code, String msg) throws IOException {\n      response.setStatus(code);\n\n      CharArr chars = new CharArr();\n      JSONWriter w = new JSONWriter(chars, 2);\n      w.startObject();\n      w.indent();\n      w.writeString(\"status\");\n      w.writeNameSeparator();\n      w.write(code);\n      w.writeValueSeparator();\n      w.indent();\n      w.writeString(\"error\");\n      w.writeNameSeparator();\n      w.writeString(msg);\n      w.endObject();\n\n      out.write(chars.toString());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23","c7d0565444d6381434fbff66cecf07da249f2bb4"],"c7d0565444d6381434fbff66cecf07da249f2bb4":["5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23"],"5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23":["dd6ddd3da533988676f6ec21e7e4651a2b2e8345"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dd6ddd3da533988676f6ec21e7e4651a2b2e8345"],"80ebe5b1d946f7c2ed9c46206b0c7254dc21206a":["c7d0565444d6381434fbff66cecf07da249f2bb4"],"dd6ddd3da533988676f6ec21e7e4651a2b2e8345":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["80ebe5b1d946f7c2ed9c46206b0c7254dc21206a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c7d0565444d6381434fbff66cecf07da249f2bb4":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","80ebe5b1d946f7c2ed9c46206b0c7254dc21206a"],"5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7d0565444d6381434fbff66cecf07da249f2bb4"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"80ebe5b1d946f7c2ed9c46206b0c7254dc21206a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd6ddd3da533988676f6ec21e7e4651a2b2e8345":["5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","dd6ddd3da533988676f6ec21e7e4651a2b2e8345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}