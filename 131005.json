{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#perhapsFillCache().mjava","commits":[{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#perhapsFillCache().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#perhapsFillCache().mjava","sourceNew":"  private boolean perhapsFillCache() throws IOException {\n    // Note: we assume that we're only called when cacheIsComplete==false.\n    // TODO (Facet): parametrize this criterion:\n    if (cacheMisses < cacheMissesUntilFill) {\n      return false;\n    }\n    // If the cache was already filled (or we decided not to fill it because\n    // there was no room), there is no sense in trying it again.\n    if (alreadyCalledFillCache) {\n      return false;\n    }\n    alreadyCalledFillCache = true;\n    // TODO (Facet): we should probably completely clear the cache before starting\n    // to read it?\n    if (reader == null) {\n      reader = openReader();\n    }\n\n    if (!cache.hasRoom(reader.numDocs())) {\n      return false;\n    }\n\n    CategoryPath cp = new CategoryPath();\n    Terms terms = MultiFields.getTerms(reader, Consts.FULL);\n    // The check is done here to avoid checking it on every iteration of the\n    // below loop. A null term wlil be returned if there are no terms in the\n    // lexicon, or after the Consts.FULL term. However while the loop is\n    // executed we're safe, because we only iterate as long as there are next()\n    // terms.\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator();\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      DocsEnum docsEnum = null;\n      while (termsEnum.next() != null) {\n        BytesRef t = termsEnum.term();\n        // Since we guarantee uniqueness of categories, each term has exactly\n        // one document. Also, since we do not allow removing categories (and\n        // hence documents), there are no deletions in the index. Therefore, it\n        // is sufficient to call next(), and then doc(), exactly once with no\n        // 'validation' checks.\n        docsEnum = termsEnum.docs(liveDocs, docsEnum);\n        docsEnum.nextDoc();\n        cp.clear();\n        // TODO (Facet): avoid String creation/use bytes?\n        cp.add(t.utf8ToString(), delimiter);\n        cache.put(cp, docsEnum.docID());\n      }\n    }\n\n    cacheIsComplete = true;\n    // No sense to keep the reader open - we will not need to read from it\n    // if everything is in the cache.\n    reader.close();\n    reader = null;\n    return true;\n  }\n\n","sourceOld":"  private boolean perhapsFillCache() throws IOException {\n    // Note: we assume that we're only called when cacheIsComplete==false.\n    // TODO (Facet): parametrize this criterion:\n    if (cacheMisses < cacheMissesUntilFill) {\n      return false;\n    }\n    // If the cache was already filled (or we decided not to fill it because\n    // there was no room), there is no sense in trying it again.\n    if (alreadyCalledFillCache) {\n      return false;\n    }\n    alreadyCalledFillCache = true;\n    // TODO (Facet): we should probably completely clear the cache before starting\n    // to read it?\n    if (reader == null) {\n      reader = openReader();\n    }\n\n    if (!cache.hasRoom(reader.numDocs())) {\n      return false;\n    }\n\n    CategoryPath cp = new CategoryPath();\n    Terms terms = MultiFields.getTerms(reader, Consts.FULL);\n    // The check is done here to avoid checking it on every iteration of the\n    // below loop. A null term wlil be returned if there are no terms in the\n    // lexicon, or after the Consts.FULL term. However while the loop is\n    // executed we're safe, because we only iterate as long as there are next()\n    // terms.\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator();\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      DocsEnum docsEnum = null;\n      while (termsEnum.next() != null) {\n        BytesRef t = termsEnum.term();\n        // Since we guarantee uniqueness of categories, each term has exactly\n        // one document. Also, since we do not allow removing categories (and\n        // hence documents), there are no deletions in the index. Therefore, it\n        // is sufficient to call next(), and then doc(), exactly once with no\n        // 'validation' checks.\n        docsEnum = termsEnum.docs(liveDocs, docsEnum);\n        docsEnum.nextDoc();\n        cp.clear();\n        // TODO (Facet): avoid String creation/use bytes?\n        cp.add(t.utf8ToString(), delimiter);\n        cache.put(cp, docsEnum.docID());\n      }\n    }\n\n    cacheIsComplete = true;\n    // No sense to keep the reader open - we will not need to read from it\n    // if everything is in the cache.\n    reader.close();\n    reader = null;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#perhapsFillCache().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#perhapsFillCache().mjava","sourceNew":"  private boolean perhapsFillCache() throws IOException {\n    // Note: we assume that we're only called when cacheIsComplete==false.\n    // TODO (Facet): parametrize this criterion:\n    if (cacheMisses < cacheMissesUntilFill) {\n      return false;\n    }\n    // If the cache was already filled (or we decided not to fill it because\n    // there was no room), there is no sense in trying it again.\n    if (alreadyCalledFillCache) {\n      return false;\n    }\n    alreadyCalledFillCache = true;\n    // TODO (Facet): we should probably completely clear the cache before starting\n    // to read it?\n    if (reader == null) {\n      reader = openReader();\n    }\n\n    if (!cache.hasRoom(reader.numDocs())) {\n      return false;\n    }\n\n    CategoryPath cp = new CategoryPath();\n    Terms terms = MultiFields.getTerms(reader, Consts.FULL);\n    // The check is done here to avoid checking it on every iteration of the\n    // below loop. A null term wlil be returned if there are no terms in the\n    // lexicon, or after the Consts.FULL term. However while the loop is\n    // executed we're safe, because we only iterate as long as there are next()\n    // terms.\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      DocsEnum docsEnum = null;\n      while (termsEnum.next() != null) {\n        BytesRef t = termsEnum.term();\n        // Since we guarantee uniqueness of categories, each term has exactly\n        // one document. Also, since we do not allow removing categories (and\n        // hence documents), there are no deletions in the index. Therefore, it\n        // is sufficient to call next(), and then doc(), exactly once with no\n        // 'validation' checks.\n        docsEnum = termsEnum.docs(liveDocs, docsEnum);\n        docsEnum.nextDoc();\n        cp.clear();\n        // TODO (Facet): avoid String creation/use bytes?\n        cp.add(t.utf8ToString(), delimiter);\n        cache.put(cp, docsEnum.docID());\n      }\n    }\n\n    cacheIsComplete = true;\n    // No sense to keep the reader open - we will not need to read from it\n    // if everything is in the cache.\n    reader.close();\n    reader = null;\n    return true;\n  }\n\n","sourceOld":"  private boolean perhapsFillCache() throws IOException {\n    // Note: we assume that we're only called when cacheIsComplete==false.\n    // TODO (Facet): parametrize this criterion:\n    if (cacheMisses < cacheMissesUntilFill) {\n      return false;\n    }\n    // If the cache was already filled (or we decided not to fill it because\n    // there was no room), there is no sense in trying it again.\n    if (alreadyCalledFillCache) {\n      return false;\n    }\n    alreadyCalledFillCache = true;\n    // TODO (Facet): we should probably completely clear the cache before starting\n    // to read it?\n    if (reader == null) {\n      reader = openReader();\n    }\n\n    if (!cache.hasRoom(reader.numDocs())) {\n      return false;\n    }\n\n    CategoryPath cp = new CategoryPath();\n    Terms terms = MultiFields.getTerms(reader, Consts.FULL);\n    // The check is done here to avoid checking it on every iteration of the\n    // below loop. A null term wlil be returned if there are no terms in the\n    // lexicon, or after the Consts.FULL term. However while the loop is\n    // executed we're safe, because we only iterate as long as there are next()\n    // terms.\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator();\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      DocsEnum docsEnum = null;\n      while (termsEnum.next() != null) {\n        BytesRef t = termsEnum.term();\n        // Since we guarantee uniqueness of categories, each term has exactly\n        // one document. Also, since we do not allow removing categories (and\n        // hence documents), there are no deletions in the index. Therefore, it\n        // is sufficient to call next(), and then doc(), exactly once with no\n        // 'validation' checks.\n        docsEnum = termsEnum.docs(liveDocs, docsEnum);\n        docsEnum.nextDoc();\n        cp.clear();\n        // TODO (Facet): avoid String creation/use bytes?\n        cp.add(t.utf8ToString(), delimiter);\n        cache.put(cp, docsEnum.docID());\n      }\n    }\n\n    cacheIsComplete = true;\n    // No sense to keep the reader open - we will not need to read from it\n    // if everything is in the cache.\n    reader.close();\n    reader = null;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#perhapsFillCache().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#perhapsFillCache().mjava","sourceNew":"  private boolean perhapsFillCache() throws IOException {\n    // Note: we assume that we're only called when cacheIsComplete==false.\n    // TODO (Facet): parametrize this criterion:\n    if (cacheMisses < cacheMissesUntilFill) {\n      return false;\n    }\n    // If the cache was already filled (or we decided not to fill it because\n    // there was no room), there is no sense in trying it again.\n    if (alreadyCalledFillCache) {\n      return false;\n    }\n    alreadyCalledFillCache = true;\n    // TODO (Facet): we should probably completely clear the cache before starting\n    // to read it?\n    if (reader == null) {\n      reader = openReader();\n    }\n\n    if (!cache.hasRoom(reader.numDocs())) {\n      return false;\n    }\n\n    CategoryPath cp = new CategoryPath();\n    Terms terms = MultiFields.getTerms(reader, Consts.FULL);\n    // The check is done here to avoid checking it on every iteration of the\n    // below loop. A null term wlil be returned if there are no terms in the\n    // lexicon, or after the Consts.FULL term. However while the loop is\n    // executed we're safe, because we only iterate as long as there are next()\n    // terms.\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      DocsEnum docsEnum = null;\n      while (termsEnum.next() != null) {\n        BytesRef t = termsEnum.term();\n        // Since we guarantee uniqueness of categories, each term has exactly\n        // one document. Also, since we do not allow removing categories (and\n        // hence documents), there are no deletions in the index. Therefore, it\n        // is sufficient to call next(), and then doc(), exactly once with no\n        // 'validation' checks.\n        docsEnum = termsEnum.docs(liveDocs, docsEnum, false);\n        docsEnum.nextDoc();\n        cp.clear();\n        // TODO (Facet): avoid String creation/use bytes?\n        cp.add(t.utf8ToString(), delimiter);\n        cache.put(cp, docsEnum.docID());\n      }\n    }\n\n    cacheIsComplete = true;\n    // No sense to keep the reader open - we will not need to read from it\n    // if everything is in the cache.\n    reader.close();\n    reader = null;\n    return true;\n  }\n\n","sourceOld":"  private boolean perhapsFillCache() throws IOException {\n    // Note: we assume that we're only called when cacheIsComplete==false.\n    // TODO (Facet): parametrize this criterion:\n    if (cacheMisses < cacheMissesUntilFill) {\n      return false;\n    }\n    // If the cache was already filled (or we decided not to fill it because\n    // there was no room), there is no sense in trying it again.\n    if (alreadyCalledFillCache) {\n      return false;\n    }\n    alreadyCalledFillCache = true;\n    // TODO (Facet): we should probably completely clear the cache before starting\n    // to read it?\n    if (reader == null) {\n      reader = openReader();\n    }\n\n    if (!cache.hasRoom(reader.numDocs())) {\n      return false;\n    }\n\n    CategoryPath cp = new CategoryPath();\n    Terms terms = MultiFields.getTerms(reader, Consts.FULL);\n    // The check is done here to avoid checking it on every iteration of the\n    // below loop. A null term wlil be returned if there are no terms in the\n    // lexicon, or after the Consts.FULL term. However while the loop is\n    // executed we're safe, because we only iterate as long as there are next()\n    // terms.\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      DocsEnum docsEnum = null;\n      while (termsEnum.next() != null) {\n        BytesRef t = termsEnum.term();\n        // Since we guarantee uniqueness of categories, each term has exactly\n        // one document. Also, since we do not allow removing categories (and\n        // hence documents), there are no deletions in the index. Therefore, it\n        // is sufficient to call next(), and then doc(), exactly once with no\n        // 'validation' checks.\n        docsEnum = termsEnum.docs(liveDocs, docsEnum);\n        docsEnum.nextDoc();\n        cp.clear();\n        // TODO (Facet): avoid String creation/use bytes?\n        cp.add(t.utf8ToString(), delimiter);\n        cache.put(cp, docsEnum.docID());\n      }\n    }\n\n    cacheIsComplete = true;\n    // No sense to keep the reader open - we will not need to read from it\n    // if everything is in the cache.\n    reader.close();\n    reader = null;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#perhapsFillCache().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#perhapsFillCache().mjava","sourceNew":"  private boolean perhapsFillCache() throws IOException {\n    // Note: we assume that we're only called when cacheIsComplete==false.\n    // TODO (Facet): parametrize this criterion:\n    if (cacheMisses < cacheMissesUntilFill) {\n      return false;\n    }\n    // If the cache was already filled (or we decided not to fill it because\n    // there was no room), there is no sense in trying it again.\n    if (alreadyCalledFillCache) {\n      return false;\n    }\n    alreadyCalledFillCache = true;\n    // TODO (Facet): we should probably completely clear the cache before starting\n    // to read it?\n    if (reader == null) {\n      reader = openReader();\n    }\n\n    if (!cache.hasRoom(reader.numDocs())) {\n      return false;\n    }\n\n    CategoryPath cp = new CategoryPath();\n    Terms terms = MultiFields.getTerms(reader, Consts.FULL);\n    // The check is done here to avoid checking it on every iteration of the\n    // below loop. A null term wlil be returned if there are no terms in the\n    // lexicon, or after the Consts.FULL term. However while the loop is\n    // executed we're safe, because we only iterate as long as there are next()\n    // terms.\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      DocsEnum docsEnum = null;\n      while (termsEnum.next() != null) {\n        BytesRef t = termsEnum.term();\n        // Since we guarantee uniqueness of categories, each term has exactly\n        // one document. Also, since we do not allow removing categories (and\n        // hence documents), there are no deletions in the index. Therefore, it\n        // is sufficient to call next(), and then doc(), exactly once with no\n        // 'validation' checks.\n        docsEnum = termsEnum.docs(liveDocs, docsEnum, false);\n        docsEnum.nextDoc();\n        cp.clear();\n        // TODO (Facet): avoid String creation/use bytes?\n        cp.add(t.utf8ToString(), delimiter);\n        cache.put(cp, docsEnum.docID());\n      }\n    }\n\n    cacheIsComplete = true;\n    // No sense to keep the reader open - we will not need to read from it\n    // if everything is in the cache.\n    reader.close();\n    reader = null;\n    return true;\n  }\n\n","sourceOld":"  private boolean perhapsFillCache() throws IOException {\n    // Note: we assume that we're only called when cacheIsComplete==false.\n    // TODO (Facet): parametrize this criterion:\n    if (cacheMisses < cacheMissesUntilFill) {\n      return false;\n    }\n    // If the cache was already filled (or we decided not to fill it because\n    // there was no room), there is no sense in trying it again.\n    if (alreadyCalledFillCache) {\n      return false;\n    }\n    alreadyCalledFillCache = true;\n    // TODO (Facet): we should probably completely clear the cache before starting\n    // to read it?\n    if (reader == null) {\n      reader = openReader();\n    }\n\n    if (!cache.hasRoom(reader.numDocs())) {\n      return false;\n    }\n\n    CategoryPath cp = new CategoryPath();\n    Terms terms = MultiFields.getTerms(reader, Consts.FULL);\n    // The check is done here to avoid checking it on every iteration of the\n    // below loop. A null term wlil be returned if there are no terms in the\n    // lexicon, or after the Consts.FULL term. However while the loop is\n    // executed we're safe, because we only iterate as long as there are next()\n    // terms.\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      DocsEnum docsEnum = null;\n      while (termsEnum.next() != null) {\n        BytesRef t = termsEnum.term();\n        // Since we guarantee uniqueness of categories, each term has exactly\n        // one document. Also, since we do not allow removing categories (and\n        // hence documents), there are no deletions in the index. Therefore, it\n        // is sufficient to call next(), and then doc(), exactly once with no\n        // 'validation' checks.\n        docsEnum = termsEnum.docs(liveDocs, docsEnum);\n        docsEnum.nextDoc();\n        cp.clear();\n        // TODO (Facet): avoid String creation/use bytes?\n        cp.add(t.utf8ToString(), delimiter);\n        cache.put(cp, docsEnum.docID());\n      }\n    }\n\n    cacheIsComplete = true;\n    // No sense to keep the reader open - we will not need to read from it\n    // if everything is in the cache.\n    reader.close();\n    reader = null;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#perhapsFillCache().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#perhapsFillCache().mjava","sourceNew":"  private boolean perhapsFillCache() throws IOException {\n    // Note: we assume that we're only called when cacheIsComplete==false.\n    // TODO (Facet): parametrize this criterion:\n    if (cacheMisses < cacheMissesUntilFill) {\n      return false;\n    }\n    // If the cache was already filled (or we decided not to fill it because\n    // there was no room), there is no sense in trying it again.\n    if (alreadyCalledFillCache) {\n      return false;\n    }\n    alreadyCalledFillCache = true;\n    // TODO (Facet): we should probably completely clear the cache before starting\n    // to read it?\n    if (reader == null) {\n      reader = openReader();\n    }\n\n    if (!cache.hasRoom(reader.numDocs())) {\n      return false;\n    }\n\n    CategoryPath cp = new CategoryPath();\n    Terms terms = MultiFields.getTerms(reader, Consts.FULL);\n    // The check is done here to avoid checking it on every iteration of the\n    // below loop. A null term wlil be returned if there are no terms in the\n    // lexicon, or after the Consts.FULL term. However while the loop is\n    // executed we're safe, because we only iterate as long as there are next()\n    // terms.\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      DocsEnum docsEnum = null;\n      while (termsEnum.next() != null) {\n        BytesRef t = termsEnum.term();\n        // Since we guarantee uniqueness of categories, each term has exactly\n        // one document. Also, since we do not allow removing categories (and\n        // hence documents), there are no deletions in the index. Therefore, it\n        // is sufficient to call next(), and then doc(), exactly once with no\n        // 'validation' checks.\n        docsEnum = termsEnum.docs(liveDocs, docsEnum, false);\n        docsEnum.nextDoc();\n        cp.clear();\n        // TODO (Facet): avoid String creation/use bytes?\n        cp.add(t.utf8ToString(), delimiter);\n        cache.put(cp, docsEnum.docID());\n      }\n    }\n\n    cacheIsComplete = true;\n    // No sense to keep the reader open - we will not need to read from it\n    // if everything is in the cache.\n    reader.close();\n    reader = null;\n    return true;\n  }\n\n","sourceOld":"  private boolean perhapsFillCache() throws IOException {\n    // Note: we assume that we're only called when cacheIsComplete==false.\n    // TODO (Facet): parametrize this criterion:\n    if (cacheMisses < cacheMissesUntilFill) {\n      return false;\n    }\n    // If the cache was already filled (or we decided not to fill it because\n    // there was no room), there is no sense in trying it again.\n    if (alreadyCalledFillCache) {\n      return false;\n    }\n    alreadyCalledFillCache = true;\n    // TODO (Facet): we should probably completely clear the cache before starting\n    // to read it?\n    if (reader == null) {\n      reader = openReader();\n    }\n\n    if (!cache.hasRoom(reader.numDocs())) {\n      return false;\n    }\n\n    CategoryPath cp = new CategoryPath();\n    Terms terms = MultiFields.getTerms(reader, Consts.FULL);\n    // The check is done here to avoid checking it on every iteration of the\n    // below loop. A null term wlil be returned if there are no terms in the\n    // lexicon, or after the Consts.FULL term. However while the loop is\n    // executed we're safe, because we only iterate as long as there are next()\n    // terms.\n    if (terms != null) {\n      TermsEnum termsEnum = terms.iterator(null);\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      DocsEnum docsEnum = null;\n      while (termsEnum.next() != null) {\n        BytesRef t = termsEnum.term();\n        // Since we guarantee uniqueness of categories, each term has exactly\n        // one document. Also, since we do not allow removing categories (and\n        // hence documents), there are no deletions in the index. Therefore, it\n        // is sufficient to call next(), and then doc(), exactly once with no\n        // 'validation' checks.\n        docsEnum = termsEnum.docs(liveDocs, docsEnum, false);\n        docsEnum.nextDoc();\n        cp.clear();\n        // TODO (Facet): avoid String creation/use bytes?\n        cp.add(t.utf8ToString(), delimiter);\n        cache.put(cp, docsEnum.docID());\n      }\n    }\n\n    cacheIsComplete = true;\n    // No sense to keep the reader open - we will not need to read from it\n    // if everything is in the cache.\n    reader.close();\n    reader = null;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["3cc749c053615f5871f3b95715fe292f34e70a53","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["3cc749c053615f5871f3b95715fe292f34e70a53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["3cc749c053615f5871f3b95715fe292f34e70a53"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"3cc749c053615f5871f3b95715fe292f34e70a53":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b89678825b68eccaf09e6ab71675fc0b0af1e099","b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}