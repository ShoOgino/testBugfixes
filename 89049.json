{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#getFiniteStrings(State,HashSet[State],HashSet[IntsRef],IntsRef,int).mjava","commits":[{"id":"6ce825e9276493231308229152c48f755ce1a0a5","date":1348871483,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#getFiniteStrings(State,HashSet[State],HashSet[IntsRef],IntsRef,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the strings that can be produced from the given state, or\n   * false if more than <code>limit</code> strings are found. \n   * <code>limit</code>&lt;0 means \"infinite\".\n   */\n  private static boolean getFiniteStrings(State s, HashSet<State> pathstates, \n      HashSet<IntsRef> strings, IntsRef path, int limit) {\n    pathstates.add(s);\n    for (Transition t : s.getTransitions()) {\n      if (pathstates.contains(t.to)) {\n        return false;\n      }\n      for (int n = t.min; n <= t.max; n++) {\n        path.grow(path.length+1);\n        path.ints[path.length] = n;\n        path.length++;\n        if (t.to.accept) {\n          strings.add(IntsRef.deepCopyOf(path));\n          if (limit >= 0 && strings.size() > limit) {\n            return false;\n          }\n        }\n        if (!getFiniteStrings(t.to, pathstates, strings, path, limit)) {\n          return false;\n        }\n        path.length--;\n      }\n    }\n    pathstates.remove(s);\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61ac0dce4a88019c61f1217b42753d505b9d9c84","date":1399218479,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#getFiniteStrings(State,HashSet[State],HashSet[IntsRef],IntsRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#getFiniteStrings(State,HashSet[State],HashSet[IntsRef],IntsRef,int).mjava","sourceNew":"  /**\n   * Returns the strings that can be produced from the given state, or\n   * false if more than <code>limit</code> strings are found. \n   * <code>limit</code>&lt;0 means \"infinite\".\n   */\n  private static boolean getFiniteStrings(State s, HashSet<State> pathstates, \n      HashSet<IntsRef> strings, IntsRef path, int limit) {\n    pathstates.add(s);\n    for (Transition t : s.getTransitions()) {\n      if (pathstates.contains(t.to)) {\n        return false;\n      }\n      for (int n = t.min; n <= t.max; n++) {\n        path.grow(path.length+1);\n        path.ints[path.length] = n;\n        path.length++;\n        if (t.to.accept) {\n          strings.add(IntsRef.deepCopyOf(path));\n          if (limit >= 0 && strings.size() > limit) {\n            return false;\n          }\n        }\n        if (!getFiniteStrings(t.to, pathstates, strings, path, limit)) {\n          return false;\n        }\n        path.length--;\n      }\n    }\n    pathstates.remove(s);\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Returns the strings that can be produced from the given state, or\n   * false if more than <code>limit</code> strings are found. \n   * <code>limit</code>&lt;0 means \"infinite\".\n   */\n  private static boolean getFiniteStrings(State s, HashSet<State> pathstates, \n      HashSet<IntsRef> strings, IntsRef path, int limit) {\n    pathstates.add(s);\n    for (Transition t : s.getTransitions()) {\n      if (pathstates.contains(t.to)) {\n        return false;\n      }\n      for (int n = t.min; n <= t.max; n++) {\n        path.grow(path.length+1);\n        path.ints[path.length] = n;\n        path.length++;\n        if (t.to.accept) {\n          strings.add(IntsRef.deepCopyOf(path));\n          if (limit >= 0 && strings.size() > limit) {\n            return false;\n          }\n        }\n        if (!getFiniteStrings(t.to, pathstates, strings, path, limit)) {\n          return false;\n        }\n        path.length--;\n      }\n    }\n    pathstates.remove(s);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"61ac0dce4a88019c61f1217b42753d505b9d9c84":["6ce825e9276493231308229152c48f755ce1a0a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ce825e9276493231308229152c48f755ce1a0a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61ac0dce4a88019c61f1217b42753d505b9d9c84"]},"commit2Childs":{"61ac0dce4a88019c61f1217b42753d505b9d9c84":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ce825e9276493231308229152c48f755ce1a0a5"],"6ce825e9276493231308229152c48f755ce1a0a5":["61ac0dce4a88019c61f1217b42753d505b9d9c84"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}