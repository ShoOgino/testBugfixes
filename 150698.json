{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#zkCheck().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#zkCheck().mjava","pathOld":"/dev/null","sourceNew":"  private void zkCheck() {\n    int retries = 10;\n    while (!zkController.isConnected()) {\n      \n      if (retries-- == 0) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Cannot talk to ZooKeeper - Updates are disabled.\");\n      }\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        break;\n      }\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#zkCheck().mjava","pathOld":"/dev/null","sourceNew":"  private void zkCheck() {\n    int retries = 10;\n    while (!zkController.isConnected()) {\n      \n      if (retries-- == 0) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Cannot talk to ZooKeeper - Updates are disabled.\");\n      }\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        break;\n      }\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#zkCheck().mjava","pathOld":"/dev/null","sourceNew":"  private void zkCheck() {\n    int retries = 10;\n    while (!zkController.isConnected()) {\n      \n      if (retries-- == 0) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Cannot talk to ZooKeeper - Updates are disabled.\");\n      }\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        break;\n      }\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#zkCheck().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#zkCheck().mjava","sourceNew":"  private void zkCheck() {\n    if (zkController.isConnected()) {\n      return;\n    }\n    \n    long timeoutAt = System.currentTimeMillis() + zkController.getClientTimeout();\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (zkController.isConnected()) {\n        return;\n      }\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        break;\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Cannot talk to ZooKeeper - Updates are disabled.\");\n  }\n\n","sourceOld":"  private void zkCheck() {\n    int retries = 10;\n    while (!zkController.isConnected()) {\n      \n      if (retries-- == 0) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Cannot talk to ZooKeeper - Updates are disabled.\");\n      }\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        break;\n      }\n    }\n    \n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d7c0c8a97beb56d2e168604f9928de17981eabe","date":1357257676,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#zkCheck().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#zkCheck().mjava","sourceNew":"  private void zkCheck() {\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      // for log reply or peer sync, we don't need to be connected to ZK\n      return;\n    }\n\n    if (zkController.isConnected()) {\n      return;\n    }\n    \n    long timeoutAt = System.currentTimeMillis() + zkController.getClientTimeout();\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (zkController.isConnected()) {\n        return;\n      }\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        break;\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Cannot talk to ZooKeeper - Updates are disabled.\");\n  }\n\n","sourceOld":"  private void zkCheck() {\n    if (zkController.isConnected()) {\n      return;\n    }\n    \n    long timeoutAt = System.currentTimeMillis() + zkController.getClientTimeout();\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (zkController.isConnected()) {\n        return;\n      }\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        break;\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Cannot talk to ZooKeeper - Updates are disabled.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#zkCheck().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#zkCheck().mjava","sourceNew":"  private void zkCheck() {\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      // for log reply or peer sync, we don't need to be connected to ZK\n      return;\n    }\n\n    if (zkController.isConnected()) {\n      return;\n    }\n    \n    long timeoutAt = System.currentTimeMillis() + zkController.getClientTimeout();\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (zkController.isConnected()) {\n        return;\n      }\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        break;\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Cannot talk to ZooKeeper - Updates are disabled.\");\n  }\n\n","sourceOld":"  private void zkCheck() {\n    if (zkController.isConnected()) {\n      return;\n    }\n    \n    long timeoutAt = System.currentTimeMillis() + zkController.getClientTimeout();\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (zkController.isConnected()) {\n        return;\n      }\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        break;\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Cannot talk to ZooKeeper - Updates are disabled.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b85d2aa862c6ff17c9930e80591ab781c0b87579","date":1388263753,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#zkCheck().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#zkCheck().mjava","sourceNew":"  private void zkCheck() {\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      // for log reply or peer sync, we don't need to be connected to ZK\n      return;\n    }\n\n    if (!zkController.getZkClient().getConnectionManager().isLikelyExpired()) {\n      return;\n    }\n    \n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Cannot talk to ZooKeeper - Updates are disabled.\");\n  }\n\n","sourceOld":"  private void zkCheck() {\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      // for log reply or peer sync, we don't need to be connected to ZK\n      return;\n    }\n\n    if (zkController.isConnected()) {\n      return;\n    }\n    \n    long timeoutAt = System.currentTimeMillis() + zkController.getClientTimeout();\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (zkController.isConnected()) {\n        return;\n      }\n      try {\n        Thread.sleep(100);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        break;\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Cannot talk to ZooKeeper - Updates are disabled.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75e4c2b895f324dbfe1aeb68d79faf6095fb3619","date":1446476308,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#zkCheck().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#zkCheck().mjava","sourceNew":"  private void zkCheck() {\n\n    // Streaming updates can delay shutdown and cause big update reorderings (new streams can't be\n    // initiated, but existing streams carry on).  This is why we check if the CC is shutdown.\n    // See SOLR-8203 and loop HdfsChaosMonkeyNothingIsSafeTest (and check for inconsistent shards) to test.\n    if (req.getCore().getCoreDescriptor().getCoreContainer().isShutDown()) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is shutting down.\");\n    }\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      // for log reply or peer sync, we don't need to be connected to ZK\n      return;\n    }\n\n    if (!zkController.getZkClient().getConnectionManager().isLikelyExpired()) {\n      return;\n    }\n    \n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Cannot talk to ZooKeeper - Updates are disabled.\");\n  }\n\n","sourceOld":"  private void zkCheck() {\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      // for log reply or peer sync, we don't need to be connected to ZK\n      return;\n    }\n\n    if (!zkController.getZkClient().getConnectionManager().isLikelyExpired()) {\n      return;\n    }\n    \n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Cannot talk to ZooKeeper - Updates are disabled.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#zkCheck().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#zkCheck().mjava","sourceNew":"  private void zkCheck() {\n\n    // Streaming updates can delay shutdown and cause big update reorderings (new streams can't be\n    // initiated, but existing streams carry on).  This is why we check if the CC is shutdown.\n    // See SOLR-8203 and loop HdfsChaosMonkeyNothingIsSafeTest (and check for inconsistent shards) to test.\n    if (req.getCore().getCoreContainer().isShutDown()) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is shutting down.\");\n    }\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      // for log reply or peer sync, we don't need to be connected to ZK\n      return;\n    }\n\n    if (!zkController.getZkClient().getConnectionManager().isLikelyExpired()) {\n      return;\n    }\n    \n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Cannot talk to ZooKeeper - Updates are disabled.\");\n  }\n\n","sourceOld":"  private void zkCheck() {\n\n    // Streaming updates can delay shutdown and cause big update reorderings (new streams can't be\n    // initiated, but existing streams carry on).  This is why we check if the CC is shutdown.\n    // See SOLR-8203 and loop HdfsChaosMonkeyNothingIsSafeTest (and check for inconsistent shards) to test.\n    if (req.getCore().getCoreDescriptor().getCoreContainer().isShutDown()) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is shutting down.\");\n    }\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      // for log reply or peer sync, we don't need to be connected to ZK\n      return;\n    }\n\n    if (!zkController.getZkClient().getConnectionManager().isLikelyExpired()) {\n      return;\n    }\n    \n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Cannot talk to ZooKeeper - Updates are disabled.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#zkCheck().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#zkCheck().mjava","sourceNew":"  private void zkCheck() {\n\n    // Streaming updates can delay shutdown and cause big update reorderings (new streams can't be\n    // initiated, but existing streams carry on).  This is why we check if the CC is shutdown.\n    // See SOLR-8203 and loop HdfsChaosMonkeyNothingIsSafeTest (and check for inconsistent shards) to test.\n    if (req.getCore().getCoreContainer().isShutDown()) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is shutting down.\");\n    }\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      // for log reply or peer sync, we don't need to be connected to ZK\n      return;\n    }\n\n    if (!zkController.getZkClient().getConnectionManager().isLikelyExpired()) {\n      return;\n    }\n    \n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Cannot talk to ZooKeeper - Updates are disabled.\");\n  }\n\n","sourceOld":"  private void zkCheck() {\n\n    // Streaming updates can delay shutdown and cause big update reorderings (new streams can't be\n    // initiated, but existing streams carry on).  This is why we check if the CC is shutdown.\n    // See SOLR-8203 and loop HdfsChaosMonkeyNothingIsSafeTest (and check for inconsistent shards) to test.\n    if (req.getCore().getCoreDescriptor().getCoreContainer().isShutDown()) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is shutting down.\");\n    }\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      // for log reply or peer sync, we don't need to be connected to ZK\n      return;\n    }\n\n    if (!zkController.getZkClient().getConnectionManager().isLikelyExpired()) {\n      return;\n    }\n    \n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Cannot talk to ZooKeeper - Updates are disabled.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d70e774cb25c8a8d2c3e5e84200f235f9168d87","date":1553016391,"type":5,"author":"Bar Rotstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#zkCheck().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#zkCheck().mjava","sourceNew":"  private void zkCheck() {\n\n    // Streaming updates can delay shutdown and cause big update reorderings (new streams can't be\n    // initiated, but existing streams carry on).  This is why we check if the CC is shutdown.\n    // See SOLR-8203 and loop HdfsChaosMonkeyNothingIsSafeTest (and check for inconsistent shards) to test.\n    if (req.getCore().getCoreContainer().isShutDown()) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is shutting down.\");\n    }\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      // for log reply or peer sync, we don't need to be connected to ZK\n      return;\n    }\n\n    if (!zkController.getZkClient().getConnectionManager().isLikelyExpired()) {\n      return;\n    }\n\n    throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Cannot talk to ZooKeeper - Updates are disabled.\");\n  }\n\n","sourceOld":"  private void zkCheck() {\n\n    // Streaming updates can delay shutdown and cause big update reorderings (new streams can't be\n    // initiated, but existing streams carry on).  This is why we check if the CC is shutdown.\n    // See SOLR-8203 and loop HdfsChaosMonkeyNothingIsSafeTest (and check for inconsistent shards) to test.\n    if (req.getCore().getCoreContainer().isShutDown()) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is shutting down.\");\n    }\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      // for log reply or peer sync, we don't need to be connected to ZK\n      return;\n    }\n\n    if (!zkController.getZkClient().getConnectionManager().isLikelyExpired()) {\n      return;\n    }\n    \n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Cannot talk to ZooKeeper - Updates are disabled.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["75e4c2b895f324dbfe1aeb68d79faf6095fb3619"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a6378064655e76cd7b908b1cab4ce425b384b508","3d7c0c8a97beb56d2e168604f9928de17981eabe"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"3d7c0c8a97beb56d2e168604f9928de17981eabe":["a6378064655e76cd7b908b1cab4ce425b384b508"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["75e4c2b895f324dbfe1aeb68d79faf6095fb3619"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a6378064655e76cd7b908b1cab4ce425b384b508":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b85d2aa862c6ff17c9930e80591ab781c0b87579":["3d7c0c8a97beb56d2e168604f9928de17981eabe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"75e4c2b895f324dbfe1aeb68d79faf6095fb3619":["b85d2aa862c6ff17c9930e80591ab781c0b87579"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"3d7c0c8a97beb56d2e168604f9928de17981eabe":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b85d2aa862c6ff17c9930e80591ab781c0b87579"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a6378064655e76cd7b908b1cab4ce425b384b508":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3d7c0c8a97beb56d2e168604f9928de17981eabe"],"b85d2aa862c6ff17c9930e80591ab781c0b87579":["75e4c2b895f324dbfe1aeb68d79faf6095fb3619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","a6378064655e76cd7b908b1cab4ce425b384b508"],"75e4c2b895f324dbfe1aeb68d79faf6095fb3619":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}