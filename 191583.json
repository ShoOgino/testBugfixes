{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4.HashTable#reset(int).mjava","commits":[{"id":"12ce9a95ee9b66c59103cc6016c0758c792d1b78","date":1359122086,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4.HashTable#reset(int).mjava","pathOld":"/dev/null","sourceNew":"    void reset(int len) {\n      final int bitsPerOffset = PackedInts.bitsRequired(len - LAST_LITERALS);\n      final int bitsPerOffsetLog = 32 - Integer.numberOfLeadingZeros(bitsPerOffset - 1);\n      hashLog = MEMORY_USAGE + 3 - bitsPerOffsetLog;\n      if (hashTable == null || hashTable.size() < 1 << hashLog || hashTable.getBitsPerValue() < bitsPerOffset) {\n        hashTable = PackedInts.getMutable(1 << hashLog, bitsPerOffset, PackedInts.DEFAULT);\n      } else {\n        hashTable.clear();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4.HashTable#reset(int).mjava","pathOld":"/dev/null","sourceNew":"    void reset(int len) {\n      final int bitsPerOffset = PackedInts.bitsRequired(len - LAST_LITERALS);\n      final int bitsPerOffsetLog = 32 - Integer.numberOfLeadingZeros(bitsPerOffset - 1);\n      hashLog = MEMORY_USAGE + 3 - bitsPerOffsetLog;\n      if (hashTable == null || hashTable.size() < 1 << hashLog || hashTable.getBitsPerValue() < bitsPerOffset) {\n        hashTable = PackedInts.getMutable(1 << hashLog, bitsPerOffset, PackedInts.DEFAULT);\n      } else {\n        hashTable.clear();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9407318969e8504257b4c5764c65755a043e5404","date":1579873617,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/compress/LZ4.FastCompressionHashTable#reset(byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4.HashTable#reset(int).mjava","sourceNew":"    @Override\n    void reset(byte[] bytes, int off, int len) {\n      Objects.checkFromIndexSize(off, len, bytes.length);\n      this.bytes = bytes;\n      this.base = off;\n      this.lastOff = off - 1;\n      this.end = off + len;\n      final int bitsPerOffset = PackedInts.bitsRequired(len - LAST_LITERALS);\n      final int bitsPerOffsetLog = 32 - Integer.numberOfLeadingZeros(bitsPerOffset - 1);\n      hashLog = MEMORY_USAGE + 3 - bitsPerOffsetLog;\n      if (hashTable == null || hashTable.size() < 1 << hashLog || hashTable.getBitsPerValue() < bitsPerOffset) {\n        hashTable = PackedInts.getMutable(1 << hashLog, bitsPerOffset, PackedInts.DEFAULT);\n      } else {\n        // Avoid calling hashTable.clear(), this makes it costly to compress many short sequences otherwise.\n        // Instead, get() checks that references are less than the current offset.\n        get(off); // this sets the hashTable for the first 4 bytes as a side-effect\n      }\n    }\n\n","sourceOld":"    void reset(int len) {\n      final int bitsPerOffset = PackedInts.bitsRequired(len - LAST_LITERALS);\n      final int bitsPerOffsetLog = 32 - Integer.numberOfLeadingZeros(bitsPerOffset - 1);\n      hashLog = MEMORY_USAGE + 3 - bitsPerOffsetLog;\n      if (hashTable == null || hashTable.size() < 1 << hashLog || hashTable.getBitsPerValue() < bitsPerOffset) {\n        hashTable = PackedInts.getMutable(1 << hashLog, bitsPerOffset, PackedInts.DEFAULT);\n      } else {\n        hashTable.clear();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12ce9a95ee9b66c59103cc6016c0758c792d1b78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9407318969e8504257b4c5764c65755a043e5404":["12ce9a95ee9b66c59103cc6016c0758c792d1b78"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","12ce9a95ee9b66c59103cc6016c0758c792d1b78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9407318969e8504257b4c5764c65755a043e5404"]},"commit2Childs":{"12ce9a95ee9b66c59103cc6016c0758c792d1b78":["9407318969e8504257b4c5764c65755a043e5404","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12ce9a95ee9b66c59103cc6016c0758c792d1b78","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"9407318969e8504257b4c5764c65755a043e5404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}