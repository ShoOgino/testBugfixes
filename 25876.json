{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.DefaultSocketFactoryRegistryProvider#getSocketFactoryRegistry().mjava","commits":[{"id":"9e856e5ac973044540959acff90fa900278d2692","date":1585275350,"type":1,"author":"Andy Throgmorton","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.DefaultSocketFactoryRegistryProvider#getSocketFactoryRegistry().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.DefaultSchemaRegistryProvider#getSchemaRegistry().mjava","sourceNew":"    @Override\n    public Registry<ConnectionSocketFactory> getSocketFactoryRegistry() {\n      // this mimics PoolingHttpClientConnectionManager's default behavior,\n      // except that we explicitly use SSLConnectionSocketFactory.getSystemSocketFactory()\n      // to pick up the system level default SSLContext (where javax.net.ssl.* properties\n      // related to keystore & truststore are specified)\n      RegistryBuilder<ConnectionSocketFactory> builder = RegistryBuilder.<ConnectionSocketFactory> create();\n      builder.register(\"http\", PlainConnectionSocketFactory.getSocketFactory());\n\n      // logic to turn off peer host check\n      SSLConnectionSocketFactory sslConnectionSocketFactory = null;\n      boolean sslCheckPeerName = toBooleanDefaultIfNull(\n          toBooleanObject(System.getProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME)), true);\n      if (sslCheckPeerName) {\n        sslConnectionSocketFactory = SSLConnectionSocketFactory.getSystemSocketFactory();\n      } else {\n        sslConnectionSocketFactory = new SSLConnectionSocketFactory(SSLContexts.createSystemDefault(),\n                                                                    NoopHostnameVerifier.INSTANCE);\n        log.debug(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME + \"is false, hostname checks disabled.\");\n      }\n      builder.register(\"https\", sslConnectionSocketFactory);\n\n      return builder.build();\n    }\n\n","sourceOld":"    @Override\n    public Registry<ConnectionSocketFactory> getSchemaRegistry() {\n      // this mimics PoolingHttpClientConnectionManager's default behavior,\n      // except that we explicitly use SSLConnectionSocketFactory.getSystemSocketFactory()\n      // to pick up the system level default SSLContext (where javax.net.ssl.* properties\n      // related to keystore & truststore are specified)\n      RegistryBuilder<ConnectionSocketFactory> builder = RegistryBuilder.<ConnectionSocketFactory> create();\n      builder.register(\"http\", PlainConnectionSocketFactory.getSocketFactory());\n\n      // logic to turn off peer host check\n      SSLConnectionSocketFactory sslConnectionSocketFactory = null;\n      boolean sslCheckPeerName = toBooleanDefaultIfNull(\n          toBooleanObject(System.getProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME)), true);\n      if (sslCheckPeerName) {\n        sslConnectionSocketFactory = SSLConnectionSocketFactory.getSystemSocketFactory();\n      } else {\n        sslConnectionSocketFactory = new SSLConnectionSocketFactory(SSLContexts.createSystemDefault(),\n                                                                    NoopHostnameVerifier.INSTANCE);\n        log.debug(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME + \"is false, hostname checks disabled.\");\n      }\n      builder.register(\"https\", sslConnectionSocketFactory);\n\n      return builder.build();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.DefaultSocketFactoryRegistryProvider#getSocketFactoryRegistry().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.DefaultSocketFactoryRegistryProvider#getSocketFactoryRegistry().mjava","sourceNew":"    @Override\n    public Registry<ConnectionSocketFactory> getSocketFactoryRegistry() {\n      // this mimics PoolingHttpClientConnectionManager's default behavior,\n      // except that we explicitly use SSLConnectionSocketFactory.getSystemSocketFactory()\n      // to pick up the system level default SSLContext (where javax.net.ssl.* properties\n      // related to keystore & truststore are specified)\n      RegistryBuilder<ConnectionSocketFactory> builder = RegistryBuilder.<ConnectionSocketFactory> create();\n      builder.register(\"http\", PlainConnectionSocketFactory.getSocketFactory());\n\n      // logic to turn off peer host check\n      SSLConnectionSocketFactory sslConnectionSocketFactory = null;\n      boolean sslCheckPeerName = toBooleanDefaultIfNull(\n          toBooleanObject(System.getProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME)), true);\n      if (sslCheckPeerName) {\n        sslConnectionSocketFactory = SSLConnectionSocketFactory.getSystemSocketFactory();\n      } else {\n        sslConnectionSocketFactory = new SSLConnectionSocketFactory(SSLContexts.createSystemDefault(),\n                                                                    NoopHostnameVerifier.INSTANCE);\n        log.debug(\"{} is false, hostname checks disabled.\", HttpClientUtil.SYS_PROP_CHECK_PEER_NAME);\n      }\n      builder.register(\"https\", sslConnectionSocketFactory);\n\n      return builder.build();\n    }\n\n","sourceOld":"    @Override\n    public Registry<ConnectionSocketFactory> getSocketFactoryRegistry() {\n      // this mimics PoolingHttpClientConnectionManager's default behavior,\n      // except that we explicitly use SSLConnectionSocketFactory.getSystemSocketFactory()\n      // to pick up the system level default SSLContext (where javax.net.ssl.* properties\n      // related to keystore & truststore are specified)\n      RegistryBuilder<ConnectionSocketFactory> builder = RegistryBuilder.<ConnectionSocketFactory> create();\n      builder.register(\"http\", PlainConnectionSocketFactory.getSocketFactory());\n\n      // logic to turn off peer host check\n      SSLConnectionSocketFactory sslConnectionSocketFactory = null;\n      boolean sslCheckPeerName = toBooleanDefaultIfNull(\n          toBooleanObject(System.getProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME)), true);\n      if (sslCheckPeerName) {\n        sslConnectionSocketFactory = SSLConnectionSocketFactory.getSystemSocketFactory();\n      } else {\n        sslConnectionSocketFactory = new SSLConnectionSocketFactory(SSLContexts.createSystemDefault(),\n                                                                    NoopHostnameVerifier.INSTANCE);\n        log.debug(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME + \"is false, hostname checks disabled.\");\n      }\n      builder.register(\"https\", sslConnectionSocketFactory);\n\n      return builder.build();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["9e856e5ac973044540959acff90fa900278d2692"],"9e856e5ac973044540959acff90fa900278d2692":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dc613ed6f75d1988140301ee8de8fdb056fa337"]},"commit2Childs":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9e856e5ac973044540959acff90fa900278d2692":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e856e5ac973044540959acff90fa900278d2692"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}