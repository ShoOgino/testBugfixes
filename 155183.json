{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientMultiConstructorTest#testZkConnectionStringConstructorWithValidChroot().mjava","commits":[{"id":"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","date":1520696743,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientMultiConstructorTest#testZkConnectionStringConstructorWithValidChroot().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testZkConnectionStringConstructorWithValidChroot() throws IOException {\n    int numOfZKServers = TestUtil.nextInt(random(), 1, 5);\n    boolean withChroot = random().nextBoolean();\n\n    final String chroot = \"/mychroot\";\n\n    StringBuilder sb = new StringBuilder();\n\n    List<String> hosts = new ArrayList<>();\n    for (int i=0; i<numOfZKServers; i++) {\n      String ZKString = \"host\" + i + \":2181\";\n      hosts.add(ZKString);\n      sb.append(ZKString);\n      if (i<numOfZKServers -1) sb.append(\",\");\n    }\n\n    if (withChroot) {\n      sb.append(chroot);\n    }\n\n    final Optional<String> chrootOption = withChroot == false ? Optional.empty() : Optional.of(chroot);\n    try (CloudSolrClient client = new CloudSolrClient.Builder(hosts, chrootOption).build()) {\n      assertEquals(sb.toString(), client.getZkHost());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cba13865da71de3b9b0937fcbc66d726089356d","date":1537507909,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientMultiConstructorTest#testZkConnectionStringConstructorWithValidChroot().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientMultiConstructorTest#testZkConnectionStringConstructorWithValidChroot().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testZkConnectionStringConstructorWithValidChroot() throws IOException {\n    int numOfZKServers = TestUtil.nextInt(random(), 1, 5);\n    boolean withChroot = random().nextBoolean();\n\n    final String chroot = \"/mychroot\";\n\n    StringBuilder sb = new StringBuilder();\n\n    List<String> hosts = new ArrayList<>();\n    for (int i=0; i<numOfZKServers; i++) {\n      String ZKString = \"host\" + i + \":2181\";\n      hosts.add(ZKString);\n      sb.append(ZKString);\n      if (i<numOfZKServers -1) sb.append(\",\");\n    }\n\n    if (withChroot) {\n      sb.append(chroot);\n    }\n\n    final Optional<String> chrootOption = withChroot == false ? Optional.empty() : Optional.of(chroot);\n    try (CloudSolrClient client = new CloudSolrClient.Builder(hosts, chrootOption).build()) {\n      assertEquals(sb.toString(), client.getZkHost());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testZkConnectionStringConstructorWithValidChroot() throws IOException {\n    int numOfZKServers = TestUtil.nextInt(random(), 1, 5);\n    boolean withChroot = random().nextBoolean();\n\n    final String chroot = \"/mychroot\";\n\n    StringBuilder sb = new StringBuilder();\n\n    List<String> hosts = new ArrayList<>();\n    for (int i=0; i<numOfZKServers; i++) {\n      String ZKString = \"host\" + i + \":2181\";\n      hosts.add(ZKString);\n      sb.append(ZKString);\n      if (i<numOfZKServers -1) sb.append(\",\");\n    }\n\n    if (withChroot) {\n      sb.append(chroot);\n    }\n\n    final Optional<String> chrootOption = withChroot == false ? Optional.empty() : Optional.of(chroot);\n    try (CloudSolrClient client = new CloudSolrClient.Builder(hosts, chrootOption).build()) {\n      assertEquals(sb.toString(), client.getZkHost());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientMultiConstructorTest#testZkConnectionStringConstructorWithValidChroot().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientMultiConstructorTest#testZkConnectionStringConstructorWithValidChroot().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testZkConnectionStringConstructorWithValidChroot() throws IOException {\n    int numOfZKServers = TestUtil.nextInt(random(), 1, 5);\n    boolean withChroot = random().nextBoolean();\n\n    final String chroot = \"/mychroot\";\n\n    StringBuilder sb = new StringBuilder();\n\n    List<String> hosts = new ArrayList<>();\n    for (int i=0; i<numOfZKServers; i++) {\n      String ZKString = \"host\" + i + \":2181\";\n      hosts.add(ZKString);\n      sb.append(ZKString);\n      if (i<numOfZKServers -1) sb.append(\",\");\n    }\n\n    if (withChroot) {\n      sb.append(chroot);\n    }\n\n    final Optional<String> chrootOption = withChroot == false ? Optional.empty() : Optional.of(chroot);\n    try (CloudSolrClient client = new CloudSolrClient.Builder(hosts, chrootOption).build()) {\n      assertEquals(sb.toString(), client.getZkHost());\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testZkConnectionStringConstructorWithValidChroot() throws IOException {\n    int numOfZKServers = TestUtil.nextInt(random(), 1, 5);\n    boolean withChroot = random().nextBoolean();\n\n    final String chroot = \"/mychroot\";\n\n    StringBuilder sb = new StringBuilder();\n\n    List<String> hosts = new ArrayList<>();\n    for (int i=0; i<numOfZKServers; i++) {\n      String ZKString = \"host\" + i + \":2181\";\n      hosts.add(ZKString);\n      sb.append(ZKString);\n      if (i<numOfZKServers -1) sb.append(\",\");\n    }\n\n    if (withChroot) {\n      sb.append(chroot);\n    }\n\n    final Optional<String> chrootOption = withChroot == false ? Optional.empty() : Optional.of(chroot);\n    try (CloudSolrClient client = new CloudSolrClient.Builder(hosts, chrootOption).build()) {\n      assertEquals(sb.toString(), client.getZkHost());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cba13865da71de3b9b0937fcbc66d726089356d":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["4cba13865da71de3b9b0937fcbc66d726089356d"]},"commit2Childs":{"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["4cba13865da71de3b9b0937fcbc66d726089356d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"4cba13865da71de3b9b0937fcbc66d726089356d":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8d35c84fdef07284c122012ca4000d3b7285a66e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}