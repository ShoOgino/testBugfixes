{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#finishTerm(TermStats).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == docCount: stats.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + stats.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n    //   }\n    // }\n\n    // vInt encode the remaining doc deltas and freqs:\n    for(int i=0;i<docBufferUpto;i++) {\n      final int docDelta = docDeltaBuffer[i];\n      final int freq = freqBuffer[i];\n      if (!fieldHasFreqs) {\n        docOut.writeVInt(docDelta);\n      } else if (freqBuffer[i] == 1) {\n        docOut.writeVInt((docDelta<<1)|1);\n      } else {\n        docOut.writeVInt(docDelta<<1);\n        docOut.writeVInt(freq);\n      }\n    }\n\n    final int lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert stats.totalTermFreq != -1;\n      if (stats.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = (int) (posOut.getFilePointer() - posTermStartFP);\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {\n        posOut.writeVInt(posBufferUpto);\n        \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            posOut.writeVInt(offsetStartDeltaBuffer[i]);\n            posOut.writeVInt(offsetLengthBuffer[i]);\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + stats.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    int skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = (int) (skipWriter.writeSkip(docOut) - docTermStartFP);\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n\n    long payStartFP;\n    if (stats.totalTermFreq >= BLOCK_SIZE) {\n      payStartFP = payTermStartFP;\n    } else {\n      payStartFP = -1;\n    }\n\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n\n    pendingTerms.add(new PendingTerm(docTermStartFP, posTermStartFP, payStartFP, skipOffset, lastPosBlockOffset));\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == docCount: stats.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + stats.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n    //   }\n    // }\n\n    // vInt encode the remaining doc deltas and freqs:\n    for(int i=0;i<docBufferUpto;i++) {\n      final int docDelta = docDeltaBuffer[i];\n      final int freq = freqBuffer[i];\n      if (!fieldHasFreqs) {\n        docOut.writeVInt(docDelta);\n      } else if (freqBuffer[i] == 1) {\n        docOut.writeVInt((docDelta<<1)|1);\n      } else {\n        docOut.writeVInt(docDelta<<1);\n        docOut.writeVInt(freq);\n      }\n    }\n\n    final int lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert stats.totalTermFreq != -1;\n      if (stats.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = (int) (posOut.getFilePointer() - posTermStartFP);\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {\n        posOut.writeVInt(posBufferUpto);\n        \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            posOut.writeVInt(offsetStartDeltaBuffer[i]);\n            posOut.writeVInt(offsetLengthBuffer[i]);\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + stats.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    int skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = (int) (skipWriter.writeSkip(docOut) - docTermStartFP);\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n\n    long payStartFP;\n    if (stats.totalTermFreq >= BLOCK_SIZE) {\n      payStartFP = payTermStartFP;\n    } else {\n      payStartFP = -1;\n    }\n\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n\n    pendingTerms.add(new PendingTerm(docTermStartFP, posTermStartFP, payStartFP, skipOffset, lastPosBlockOffset));\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5e3ea6d5c2b839bafea03558af4d9e641ec73cc","date":1349823963,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == docCount: stats.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + stats.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n    //   }\n    // }\n\n    // vInt encode the remaining doc deltas and freqs:\n    for(int i=0;i<docBufferUpto;i++) {\n      final int docDelta = docDeltaBuffer[i];\n      final int freq = freqBuffer[i];\n      if (!fieldHasFreqs) {\n        docOut.writeVInt(docDelta);\n      } else if (freqBuffer[i] == 1) {\n        docOut.writeVInt((docDelta<<1)|1);\n      } else {\n        docOut.writeVInt(docDelta<<1);\n        docOut.writeVInt(freq);\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert stats.totalTermFreq != -1;\n      if (stats.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posTermStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {\n        posOut.writeVInt(posBufferUpto);\n        \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            posOut.writeVInt(offsetStartDeltaBuffer[i]);\n            posOut.writeVInt(offsetLengthBuffer[i]);\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + stats.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docTermStartFP;\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n\n    long payStartFP;\n    if (stats.totalTermFreq >= BLOCK_SIZE) {\n      payStartFP = payTermStartFP;\n    } else {\n      payStartFP = -1;\n    }\n\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n\n    pendingTerms.add(new PendingTerm(docTermStartFP, posTermStartFP, payStartFP, skipOffset, lastPosBlockOffset));\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == docCount: stats.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + stats.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n    //   }\n    // }\n\n    // vInt encode the remaining doc deltas and freqs:\n    for(int i=0;i<docBufferUpto;i++) {\n      final int docDelta = docDeltaBuffer[i];\n      final int freq = freqBuffer[i];\n      if (!fieldHasFreqs) {\n        docOut.writeVInt(docDelta);\n      } else if (freqBuffer[i] == 1) {\n        docOut.writeVInt((docDelta<<1)|1);\n      } else {\n        docOut.writeVInt(docDelta<<1);\n        docOut.writeVInt(freq);\n      }\n    }\n\n    final int lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert stats.totalTermFreq != -1;\n      if (stats.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = (int) (posOut.getFilePointer() - posTermStartFP);\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {\n        posOut.writeVInt(posBufferUpto);\n        \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            posOut.writeVInt(offsetStartDeltaBuffer[i]);\n            posOut.writeVInt(offsetLengthBuffer[i]);\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + stats.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    int skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = (int) (skipWriter.writeSkip(docOut) - docTermStartFP);\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n\n    long payStartFP;\n    if (stats.totalTermFreq >= BLOCK_SIZE) {\n      payStartFP = payTermStartFP;\n    } else {\n      payStartFP = -1;\n    }\n\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n\n    pendingTerms.add(new PendingTerm(docTermStartFP, posTermStartFP, payStartFP, skipOffset, lastPosBlockOffset));\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","bugFix":["e6b41208259e8566cba0ecac7da6a331ea9732dd","e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"033b59c04f54c8fbe41a781b7cb9e4e0ad6fd970","date":1349914134,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == docCount: stats.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + stats.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n    //   }\n    // }\n\n    // vInt encode the remaining doc deltas and freqs:\n    for(int i=0;i<docBufferUpto;i++) {\n      final int docDelta = docDeltaBuffer[i];\n      final int freq = freqBuffer[i];\n      if (!fieldHasFreqs) {\n        docOut.writeVInt(docDelta);\n      } else if (freqBuffer[i] == 1) {\n        docOut.writeVInt((docDelta<<1)|1);\n      } else {\n        docOut.writeVInt(docDelta<<1);\n        docOut.writeVInt(freq);\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert stats.totalTermFreq != -1;\n      if (stats.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posTermStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {\n        posOut.writeVInt(posBufferUpto);\n        \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;  // force first payload length to be written\n        int lastOffsetLength = -1;   // force first offset length to be written\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            int delta = offsetStartDeltaBuffer[i];\n            int length = offsetLengthBuffer[i];\n            if (length == lastOffsetLength) {\n              posOut.writeVInt(delta << 1);\n            } else {\n              posOut.writeVInt(delta << 1 | 1);\n              posOut.writeVInt(length);\n              lastOffsetLength = length;\n            }\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + stats.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docTermStartFP;\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n\n    long payStartFP;\n    if (stats.totalTermFreq >= BLOCK_SIZE) {\n      payStartFP = payTermStartFP;\n    } else {\n      payStartFP = -1;\n    }\n\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n\n    pendingTerms.add(new PendingTerm(docTermStartFP, posTermStartFP, payStartFP, skipOffset, lastPosBlockOffset));\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == docCount: stats.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + stats.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n    //   }\n    // }\n\n    // vInt encode the remaining doc deltas and freqs:\n    for(int i=0;i<docBufferUpto;i++) {\n      final int docDelta = docDeltaBuffer[i];\n      final int freq = freqBuffer[i];\n      if (!fieldHasFreqs) {\n        docOut.writeVInt(docDelta);\n      } else if (freqBuffer[i] == 1) {\n        docOut.writeVInt((docDelta<<1)|1);\n      } else {\n        docOut.writeVInt(docDelta<<1);\n        docOut.writeVInt(freq);\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert stats.totalTermFreq != -1;\n      if (stats.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posTermStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {\n        posOut.writeVInt(posBufferUpto);\n        \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            posOut.writeVInt(offsetStartDeltaBuffer[i]);\n            posOut.writeVInt(offsetLengthBuffer[i]);\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + stats.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docTermStartFP;\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n\n    long payStartFP;\n    if (stats.totalTermFreq >= BLOCK_SIZE) {\n      payStartFP = payTermStartFP;\n    } else {\n      payStartFP = -1;\n    }\n\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n\n    pendingTerms.add(new PendingTerm(docTermStartFP, posTermStartFP, payStartFP, skipOffset, lastPosBlockOffset));\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == docCount: stats.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + stats.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n    //   }\n    // }\n\n    // vInt encode the remaining doc deltas and freqs:\n    for(int i=0;i<docBufferUpto;i++) {\n      final int docDelta = docDeltaBuffer[i];\n      final int freq = freqBuffer[i];\n      if (!fieldHasFreqs) {\n        docOut.writeVInt(docDelta);\n      } else if (freqBuffer[i] == 1) {\n        docOut.writeVInt((docDelta<<1)|1);\n      } else {\n        docOut.writeVInt(docDelta<<1);\n        docOut.writeVInt(freq);\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert stats.totalTermFreq != -1;\n      if (stats.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posTermStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {\n        posOut.writeVInt(posBufferUpto);\n        \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;  // force first payload length to be written\n        int lastOffsetLength = -1;   // force first offset length to be written\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            int delta = offsetStartDeltaBuffer[i];\n            int length = offsetLengthBuffer[i];\n            if (length == lastOffsetLength) {\n              posOut.writeVInt(delta << 1);\n            } else {\n              posOut.writeVInt(delta << 1 | 1);\n              posOut.writeVInt(length);\n              lastOffsetLength = length;\n            }\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + stats.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docTermStartFP;\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n\n    long payStartFP;\n    if (stats.totalTermFreq >= BLOCK_SIZE) {\n      payStartFP = payTermStartFP;\n    } else {\n      payStartFP = -1;\n    }\n\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n\n    pendingTerms.add(new PendingTerm(docTermStartFP, posTermStartFP, payStartFP, skipOffset, lastPosBlockOffset));\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == docCount: stats.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + stats.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n    //   }\n    // }\n\n    // vInt encode the remaining doc deltas and freqs:\n    for(int i=0;i<docBufferUpto;i++) {\n      final int docDelta = docDeltaBuffer[i];\n      final int freq = freqBuffer[i];\n      if (!fieldHasFreqs) {\n        docOut.writeVInt(docDelta);\n      } else if (freqBuffer[i] == 1) {\n        docOut.writeVInt((docDelta<<1)|1);\n      } else {\n        docOut.writeVInt(docDelta<<1);\n        docOut.writeVInt(freq);\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert stats.totalTermFreq != -1;\n      if (stats.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posTermStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {\n        posOut.writeVInt(posBufferUpto);\n        \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;  // force first payload length to be written\n        int lastOffsetLength = -1;   // force first offset length to be written\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            int delta = offsetStartDeltaBuffer[i];\n            int length = offsetLengthBuffer[i];\n            if (length == lastOffsetLength) {\n              posOut.writeVInt(delta << 1);\n            } else {\n              posOut.writeVInt(delta << 1 | 1);\n              posOut.writeVInt(length);\n              lastOffsetLength = length;\n            }\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + stats.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docTermStartFP;\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n\n    long payStartFP;\n    if (stats.totalTermFreq >= BLOCK_SIZE) {\n      payStartFP = payTermStartFP;\n    } else {\n      payStartFP = -1;\n    }\n\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n\n    pendingTerms.add(new PendingTerm(docTermStartFP, posTermStartFP, payStartFP, skipOffset, lastPosBlockOffset));\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == docCount: stats.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + stats.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n    //   }\n    // }\n\n    // vInt encode the remaining doc deltas and freqs:\n    for(int i=0;i<docBufferUpto;i++) {\n      final int docDelta = docDeltaBuffer[i];\n      final int freq = freqBuffer[i];\n      if (!fieldHasFreqs) {\n        docOut.writeVInt(docDelta);\n      } else if (freqBuffer[i] == 1) {\n        docOut.writeVInt((docDelta<<1)|1);\n      } else {\n        docOut.writeVInt(docDelta<<1);\n        docOut.writeVInt(freq);\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert stats.totalTermFreq != -1;\n      if (stats.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posTermStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {\n        posOut.writeVInt(posBufferUpto);\n        \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;  // force first payload length to be written\n        int lastOffsetLength = -1;   // force first offset length to be written\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            int delta = offsetStartDeltaBuffer[i];\n            int length = offsetLengthBuffer[i];\n            if (length == lastOffsetLength) {\n              posOut.writeVInt(delta << 1);\n            } else {\n              posOut.writeVInt(delta << 1 | 1);\n              posOut.writeVInt(length);\n              lastOffsetLength = length;\n            }\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + stats.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docTermStartFP;\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n\n    long payStartFP;\n    if (stats.totalTermFreq >= BLOCK_SIZE) {\n      payStartFP = payTermStartFP;\n    } else {\n      payStartFP = -1;\n    }\n\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n\n    pendingTerms.add(new PendingTerm(docTermStartFP, posTermStartFP, payStartFP, skipOffset, lastPosBlockOffset));\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == docCount: stats.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + stats.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n    //   }\n    // }\n\n    // vInt encode the remaining doc deltas and freqs:\n    for(int i=0;i<docBufferUpto;i++) {\n      final int docDelta = docDeltaBuffer[i];\n      final int freq = freqBuffer[i];\n      if (!fieldHasFreqs) {\n        docOut.writeVInt(docDelta);\n      } else if (freqBuffer[i] == 1) {\n        docOut.writeVInt((docDelta<<1)|1);\n      } else {\n        docOut.writeVInt(docDelta<<1);\n        docOut.writeVInt(freq);\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert stats.totalTermFreq != -1;\n      if (stats.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posTermStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {\n        posOut.writeVInt(posBufferUpto);\n        \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;  // force first payload length to be written\n        int lastOffsetLength = -1;   // force first offset length to be written\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            int delta = offsetStartDeltaBuffer[i];\n            int length = offsetLengthBuffer[i];\n            if (length == lastOffsetLength) {\n              posOut.writeVInt(delta << 1);\n            } else {\n              posOut.writeVInt(delta << 1 | 1);\n              posOut.writeVInt(length);\n              lastOffsetLength = length;\n            }\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + stats.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docTermStartFP;\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n\n    long payStartFP;\n    if (stats.totalTermFreq >= BLOCK_SIZE) {\n      payStartFP = payTermStartFP;\n    } else {\n      payStartFP = -1;\n    }\n\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n\n    pendingTerms.add(new PendingTerm(docTermStartFP, posTermStartFP, payStartFP, skipOffset, lastPosBlockOffset));\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == docCount: stats.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + stats.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n    //   }\n    // }\n\n    // vInt encode the remaining doc deltas and freqs:\n    for(int i=0;i<docBufferUpto;i++) {\n      final int docDelta = docDeltaBuffer[i];\n      final int freq = freqBuffer[i];\n      if (!fieldHasFreqs) {\n        docOut.writeVInt(docDelta);\n      } else if (freqBuffer[i] == 1) {\n        docOut.writeVInt((docDelta<<1)|1);\n      } else {\n        docOut.writeVInt(docDelta<<1);\n        docOut.writeVInt(freq);\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert stats.totalTermFreq != -1;\n      if (stats.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posTermStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {\n        posOut.writeVInt(posBufferUpto);\n        \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;  // force first payload length to be written\n        int lastOffsetLength = -1;   // force first offset length to be written\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            int delta = offsetStartDeltaBuffer[i];\n            int length = offsetLengthBuffer[i];\n            if (length == lastOffsetLength) {\n              posOut.writeVInt(delta << 1);\n            } else {\n              posOut.writeVInt(delta << 1 | 1);\n              posOut.writeVInt(length);\n              lastOffsetLength = length;\n            }\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + stats.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docTermStartFP;\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n\n    long payStartFP;\n    if (stats.totalTermFreq >= BLOCK_SIZE) {\n      payStartFP = payTermStartFP;\n    } else {\n      payStartFP = -1;\n    }\n\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n\n    pendingTerms.add(new PendingTerm(docTermStartFP, posTermStartFP, payStartFP, skipOffset, lastPosBlockOffset));\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == docCount: stats.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + stats.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n    //   }\n    // }\n\n    // vInt encode the remaining doc deltas and freqs:\n    for(int i=0;i<docBufferUpto;i++) {\n      final int docDelta = docDeltaBuffer[i];\n      final int freq = freqBuffer[i];\n      if (!fieldHasFreqs) {\n        docOut.writeVInt(docDelta);\n      } else if (freqBuffer[i] == 1) {\n        docOut.writeVInt((docDelta<<1)|1);\n      } else {\n        docOut.writeVInt(docDelta<<1);\n        docOut.writeVInt(freq);\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert stats.totalTermFreq != -1;\n      if (stats.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posTermStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {\n        posOut.writeVInt(posBufferUpto);\n        \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;  // force first payload length to be written\n        int lastOffsetLength = -1;   // force first offset length to be written\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            int delta = offsetStartDeltaBuffer[i];\n            int length = offsetLengthBuffer[i];\n            if (length == lastOffsetLength) {\n              posOut.writeVInt(delta << 1);\n            } else {\n              posOut.writeVInt(delta << 1 | 1);\n              posOut.writeVInt(length);\n              lastOffsetLength = length;\n            }\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + stats.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docTermStartFP;\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n\n    long payStartFP;\n    if (stats.totalTermFreq >= BLOCK_SIZE) {\n      payStartFP = payTermStartFP;\n    } else {\n      payStartFP = -1;\n    }\n\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n\n    pendingTerms.add(new PendingTerm(docTermStartFP, posTermStartFP, payStartFP, skipOffset, lastPosBlockOffset));\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["033b59c04f54c8fbe41a781b7cb9e4e0ad6fd970","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"033b59c04f54c8fbe41a781b7cb9e4e0ad6fd970":["a5e3ea6d5c2b839bafea03558af4d9e641ec73cc"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["033b59c04f54c8fbe41a781b7cb9e4e0ad6fd970"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["033b59c04f54c8fbe41a781b7cb9e4e0ad6fd970","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a5e3ea6d5c2b839bafea03558af4d9e641ec73cc":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"]},"commit2Childs":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"033b59c04f54c8fbe41a781b7cb9e4e0ad6fd970":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a5e3ea6d5c2b839bafea03558af4d9e641ec73cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"a5e3ea6d5c2b839bafea03558af4d9e641ec73cc":["033b59c04f54c8fbe41a781b7cb9e4e0ad6fd970"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}