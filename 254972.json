{"path":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","pathOld":"/dev/null","sourceNew":"  public Map<K,V> getLatestAccessedItems(int n) {\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","sourceNew":null,"sourceOld":"  public Map<K,V> getLatestAccessedItems(int n) {\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","pathOld":"src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","sourceNew":"  public Map<K,V> getLatestAccessedItems(int n) {\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","sourceOld":"  public Map<K,V> getLatestAccessedItems(int n) {\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","pathOld":"/dev/null","sourceNew":"  public Map<K,V> getLatestAccessedItems(int n) {\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0575ff28db069471bd8ec7187e27ec4774dfac83","date":1285975309,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","sourceNew":"  public Map<K,V> getLatestAccessedItems(int n) {\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","sourceOld":"  public Map<K,V> getLatestAccessedItems(int n) {\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","sourceNew":"  public Map<K,V> getLatestAccessedItems(int n) {\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","sourceOld":"  public Map<K,V> getLatestAccessedItems(int n) {\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbd02ee70d00f41133d28f0c1f8e9f68168c50d3","date":1294448351,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","sourceNew":"  public Map<K,V> getLatestAccessedItems(int n) {\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry<K,V>> tree = new TreeSet<CacheEntry<K,V>>();\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","sourceOld":"  public Map<K,V> getLatestAccessedItems(int n) {\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","sourceNew":"  public Map<K,V> getLatestAccessedItems(int n) {\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry<K,V>> tree = new TreeSet<CacheEntry<K,V>>();\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","sourceOld":"  public Map<K,V> getLatestAccessedItems(int n) {\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","sourceNew":"  public Map<K,V> getLatestAccessedItems(int n) {\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry<K,V>> tree = new TreeSet<CacheEntry<K,V>>();\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","sourceOld":"  public Map<K,V> getLatestAccessedItems(int n) {\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","sourceNew":"  public Map<K,V> getLatestAccessedItems(int n) {\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry<K,V>> tree = new TreeSet<CacheEntry<K,V>>();\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","sourceOld":"  public Map<K,V> getLatestAccessedItems(int n) {\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry<K,V>> tree = new TreeSet<CacheEntry<K,V>>();\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","sourceNew":"  public Map<K,V> getLatestAccessedItems(int n) {\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry<K,V>> tree = new TreeSet<CacheEntry<K,V>>();\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","sourceOld":"  public Map<K,V> getLatestAccessedItems(int n) {\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry<K,V>> tree = new TreeSet<CacheEntry<K,V>>();\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","sourceNew":"  public Map<K,V> getLatestAccessedItems(int n) {\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry<K,V>> tree = new TreeSet<CacheEntry<K,V>>();\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","sourceOld":"  public Map<K,V> getLatestAccessedItems(int n) {\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry<K,V>> tree = new TreeSet<CacheEntry<K,V>>();\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["fbd02ee70d00f41133d28f0c1f8e9f68168c50d3","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fbd02ee70d00f41133d28f0c1f8e9f68168c50d3":["0575ff28db069471bd8ec7187e27ec4774dfac83"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"0575ff28db069471bd8ec7187e27ec4774dfac83":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","0575ff28db069471bd8ec7187e27ec4774dfac83"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["fbd02ee70d00f41133d28f0c1f8e9f68168c50d3"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["0575ff28db069471bd8ec7187e27ec4774dfac83","fbd02ee70d00f41133d28f0c1f8e9f68168c50d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["fbd02ee70d00f41133d28f0c1f8e9f68168c50d3"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fbd02ee70d00f41133d28f0c1f8e9f68168c50d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fbd02ee70d00f41133d28f0c1f8e9f68168c50d3":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"0575ff28db069471bd8ec7187e27ec4774dfac83":["fbd02ee70d00f41133d28f0c1f8e9f68168c50d3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"1da8d55113b689b06716246649de6f62430f15c0":["0575ff28db069471bd8ec7187e27ec4774dfac83","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}