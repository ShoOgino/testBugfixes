{"path":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#getHighFreqTerms(IndexReader,int,String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#getHighFreqTerms(IndexReader,int,String).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#getHighFreqTerms(IndexReader,int,String).mjava","sourceNew":"  /**\n   * \n   * @param reader\n   * @param numTerms\n   * @param field\n   * @return TermStats[] ordered by terms with highest docFreq first.\n   * @throws Exception\n   */\n  public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field) throws Exception {\n    TermStatsQueue tiq = null;\n    \n    if (field != null) {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"field \" + field + \" not found\");\n      }\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        tiq = new TermStatsQueue(numTerms);\n        fillQueue(termsEnum, tiq, field);\n      }\n    } else {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"no fields found for this index\");\n      }\n      tiq = new TermStatsQueue(numTerms);\n      FieldsEnum fieldsEnum = fields.iterator();\n      while (true) {\n        field = fieldsEnum.next();\n        if (field != null) {\n          Terms terms = fieldsEnum.terms();\n          if (terms != null) {\n            fillQueue(terms.iterator(null), tiq, field);\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    \n    TermStats[] result = new TermStats[tiq.size()];\n    // we want highest first so we read the queue and populate the array\n    // starting at the end and work backwards\n    int count = tiq.size() - 1;\n    while (tiq.size() != 0) {\n      result[count] = tiq.pop();\n      count--;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * \n   * @param reader\n   * @param numTerms\n   * @param field\n   * @return TermStats[] ordered by terms with highest docFreq first.\n   * @throws Exception\n   */\n  public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field) throws Exception {\n    TermStatsQueue tiq = null;\n    \n    if (field != null) {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"field \" + field + \" not found\");\n      }\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        tiq = new TermStatsQueue(numTerms);\n        fillQueue(termsEnum, tiq, field);\n      }\n    } else {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"no fields found for this index\");\n      }\n      tiq = new TermStatsQueue(numTerms);\n      FieldsEnum fieldsEnum = fields.iterator();\n      while (true) {\n        field = fieldsEnum.next();\n        if (field != null) {\n          Terms terms = fieldsEnum.terms();\n          if (terms != null) {\n            fillQueue(terms.iterator(null), tiq, field);\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    \n    TermStats[] result = new TermStats[tiq.size()];\n    // we want highest first so we read the queue and populate the array\n    // starting at the end and work backwards\n    int count = tiq.size() - 1;\n    while (tiq.size() != 0) {\n      result[count] = tiq.pop();\n      count--;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1384ca7a3f6c23e84ab220381ba3fc1a4624649","date":1335142234,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#getHighFreqTerms(IndexReader,int,String).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#getHighFreqTerms(IndexReader,int,String).mjava","sourceNew":"  /**\n   * \n   * @param reader\n   * @param numTerms\n   * @param field\n   * @return TermStats[] ordered by terms with highest docFreq first.\n   * @throws Exception\n   */\n  public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field) throws Exception {\n    TermStatsQueue tiq = null;\n    \n    if (field != null) {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"field \" + field + \" not found\");\n      }\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        tiq = new TermStatsQueue(numTerms);\n        tiq.fill(field, termsEnum);\n      }\n    } else {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"no fields found for this index\");\n      }\n      tiq = new TermStatsQueue(numTerms);\n      FieldsEnum fieldsEnum = fields.iterator();\n      while (true) {\n        field = fieldsEnum.next();\n        if (field != null) {\n          Terms terms = fieldsEnum.terms();\n          if (terms != null) {\n            tiq.fill(field, terms.iterator(null));\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    \n    TermStats[] result = new TermStats[tiq.size()];\n    // we want highest first so we read the queue and populate the array\n    // starting at the end and work backwards\n    int count = tiq.size() - 1;\n    while (tiq.size() != 0) {\n      result[count] = tiq.pop();\n      count--;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * \n   * @param reader\n   * @param numTerms\n   * @param field\n   * @return TermStats[] ordered by terms with highest docFreq first.\n   * @throws Exception\n   */\n  public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field) throws Exception {\n    TermStatsQueue tiq = null;\n    \n    if (field != null) {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"field \" + field + \" not found\");\n      }\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        tiq = new TermStatsQueue(numTerms);\n        fillQueue(termsEnum, tiq, field);\n      }\n    } else {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"no fields found for this index\");\n      }\n      tiq = new TermStatsQueue(numTerms);\n      FieldsEnum fieldsEnum = fields.iterator();\n      while (true) {\n        field = fieldsEnum.next();\n        if (field != null) {\n          Terms terms = fieldsEnum.terms();\n          if (terms != null) {\n            fillQueue(terms.iterator(null), tiq, field);\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    \n    TermStats[] result = new TermStats[tiq.size()];\n    // we want highest first so we read the queue and populate the array\n    // starting at the end and work backwards\n    int count = tiq.size() - 1;\n    while (tiq.size() != 0) {\n      result[count] = tiq.pop();\n      count--;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb07ab105350b80ed9d63ca64b117084ed7391bc","date":1344824719,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#getHighFreqTerms(IndexReader,int,String).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#getHighFreqTerms(IndexReader,int,String).mjava","sourceNew":"  /**\n   * \n   * @param reader\n   * @param numTerms\n   * @param field\n   * @return TermStats[] ordered by terms with highest docFreq first.\n   * @throws Exception\n   */\n  public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field) throws Exception {\n    TermStatsQueue tiq = null;\n    \n    if (field != null) {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"field \" + field + \" not found\");\n      }\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        tiq = new TermStatsQueue(numTerms);\n        tiq.fill(field, termsEnum);\n      }\n    } else {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"no fields found for this index\");\n      }\n      tiq = new TermStatsQueue(numTerms);\n      for (String fieldName : fields) {\n        Terms terms = fields.terms(fieldName);\n        if (terms != null) {\n          tiq.fill(fieldName, terms.iterator(null));\n        }\n      }\n    }\n    \n    TermStats[] result = new TermStats[tiq.size()];\n    // we want highest first so we read the queue and populate the array\n    // starting at the end and work backwards\n    int count = tiq.size() - 1;\n    while (tiq.size() != 0) {\n      result[count] = tiq.pop();\n      count--;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * \n   * @param reader\n   * @param numTerms\n   * @param field\n   * @return TermStats[] ordered by terms with highest docFreq first.\n   * @throws Exception\n   */\n  public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field) throws Exception {\n    TermStatsQueue tiq = null;\n    \n    if (field != null) {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"field \" + field + \" not found\");\n      }\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        tiq = new TermStatsQueue(numTerms);\n        tiq.fill(field, termsEnum);\n      }\n    } else {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"no fields found for this index\");\n      }\n      tiq = new TermStatsQueue(numTerms);\n      FieldsEnum fieldsEnum = fields.iterator();\n      while (true) {\n        field = fieldsEnum.next();\n        if (field != null) {\n          Terms terms = fieldsEnum.terms();\n          if (terms != null) {\n            tiq.fill(field, terms.iterator(null));\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    \n    TermStats[] result = new TermStats[tiq.size()];\n    // we want highest first so we read the queue and populate the array\n    // starting at the end and work backwards\n    int count = tiq.size() - 1;\n    while (tiq.size() != 0) {\n      result[count] = tiq.pop();\n      count--;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#getHighFreqTerms(IndexReader,int,String).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#getHighFreqTerms(IndexReader,int,String).mjava","sourceNew":"  /**\n   * \n   * @param reader\n   * @param numTerms\n   * @param field\n   * @return TermStats[] ordered by terms with highest docFreq first.\n   * @throws Exception\n   */\n  public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field) throws Exception {\n    TermStatsQueue tiq = null;\n    \n    if (field != null) {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"field \" + field + \" not found\");\n      }\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        tiq = new TermStatsQueue(numTerms);\n        tiq.fill(field, termsEnum);\n      }\n    } else {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"no fields found for this index\");\n      }\n      tiq = new TermStatsQueue(numTerms);\n      for (String fieldName : fields) {\n        Terms terms = fields.terms(fieldName);\n        if (terms != null) {\n          tiq.fill(fieldName, terms.iterator(null));\n        }\n      }\n    }\n    \n    TermStats[] result = new TermStats[tiq.size()];\n    // we want highest first so we read the queue and populate the array\n    // starting at the end and work backwards\n    int count = tiq.size() - 1;\n    while (tiq.size() != 0) {\n      result[count] = tiq.pop();\n      count--;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * \n   * @param reader\n   * @param numTerms\n   * @param field\n   * @return TermStats[] ordered by terms with highest docFreq first.\n   * @throws Exception\n   */\n  public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field) throws Exception {\n    TermStatsQueue tiq = null;\n    \n    if (field != null) {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"field \" + field + \" not found\");\n      }\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        tiq = new TermStatsQueue(numTerms);\n        tiq.fill(field, termsEnum);\n      }\n    } else {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"no fields found for this index\");\n      }\n      tiq = new TermStatsQueue(numTerms);\n      FieldsEnum fieldsEnum = fields.iterator();\n      while (true) {\n        field = fieldsEnum.next();\n        if (field != null) {\n          Terms terms = fieldsEnum.terms();\n          if (terms != null) {\n            tiq.fill(field, terms.iterator(null));\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    \n    TermStats[] result = new TermStats[tiq.size()];\n    // we want highest first so we read the queue and populate the array\n    // starting at the end and work backwards\n    int count = tiq.size() - 1;\n    while (tiq.size() != 0) {\n      result[count] = tiq.pop();\n      count--;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#getHighFreqTerms(IndexReader,int,String).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#getHighFreqTerms(IndexReader,int,String).mjava","sourceNew":"  /**\n   * \n   * @param reader\n   * @param numTerms\n   * @param field\n   * @return TermStats[] ordered by terms with highest docFreq first.\n   * @throws Exception\n   */\n  public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field) throws Exception {\n    TermStatsQueue tiq = null;\n    \n    if (field != null) {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"field \" + field + \" not found\");\n      }\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        tiq = new TermStatsQueue(numTerms);\n        tiq.fill(field, termsEnum);\n      }\n    } else {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"no fields found for this index\");\n      }\n      tiq = new TermStatsQueue(numTerms);\n      for (String fieldName : fields) {\n        Terms terms = fields.terms(fieldName);\n        if (terms != null) {\n          tiq.fill(fieldName, terms.iterator(null));\n        }\n      }\n    }\n    \n    TermStats[] result = new TermStats[tiq.size()];\n    // we want highest first so we read the queue and populate the array\n    // starting at the end and work backwards\n    int count = tiq.size() - 1;\n    while (tiq.size() != 0) {\n      result[count] = tiq.pop();\n      count--;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * \n   * @param reader\n   * @param numTerms\n   * @param field\n   * @return TermStats[] ordered by terms with highest docFreq first.\n   * @throws Exception\n   */\n  public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field) throws Exception {\n    TermStatsQueue tiq = null;\n    \n    if (field != null) {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"field \" + field + \" not found\");\n      }\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        tiq = new TermStatsQueue(numTerms);\n        tiq.fill(field, termsEnum);\n      }\n    } else {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"no fields found for this index\");\n      }\n      tiq = new TermStatsQueue(numTerms);\n      FieldsEnum fieldsEnum = fields.iterator();\n      while (true) {\n        field = fieldsEnum.next();\n        if (field != null) {\n          Terms terms = fieldsEnum.terms();\n          if (terms != null) {\n            tiq.fill(field, terms.iterator(null));\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    \n    TermStats[] result = new TermStats[tiq.size()];\n    // we want highest first so we read the queue and populate the array\n    // starting at the end and work backwards\n    int count = tiq.size() - 1;\n    while (tiq.size() != 0) {\n      result[count] = tiq.pop();\n      count--;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#getHighFreqTerms(IndexReader,int,String).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#getHighFreqTerms(IndexReader,int,String).mjava","sourceNew":"  /**\n   * Returns TermStats[] ordered by terms with highest docFreq first.\n   */\n  public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field) throws Exception {\n    TermStatsQueue tiq = null;\n    \n    if (field != null) {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"field \" + field + \" not found\");\n      }\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        tiq = new TermStatsQueue(numTerms);\n        tiq.fill(field, termsEnum);\n      }\n    } else {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"no fields found for this index\");\n      }\n      tiq = new TermStatsQueue(numTerms);\n      for (String fieldName : fields) {\n        Terms terms = fields.terms(fieldName);\n        if (terms != null) {\n          tiq.fill(fieldName, terms.iterator(null));\n        }\n      }\n    }\n    \n    TermStats[] result = new TermStats[tiq.size()];\n    // we want highest first so we read the queue and populate the array\n    // starting at the end and work backwards\n    int count = tiq.size() - 1;\n    while (tiq.size() != 0) {\n      result[count] = tiq.pop();\n      count--;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * \n   * @param reader\n   * @param numTerms\n   * @param field\n   * @return TermStats[] ordered by terms with highest docFreq first.\n   * @throws Exception\n   */\n  public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field) throws Exception {\n    TermStatsQueue tiq = null;\n    \n    if (field != null) {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"field \" + field + \" not found\");\n      }\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        tiq = new TermStatsQueue(numTerms);\n        tiq.fill(field, termsEnum);\n      }\n    } else {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"no fields found for this index\");\n      }\n      tiq = new TermStatsQueue(numTerms);\n      for (String fieldName : fields) {\n        Terms terms = fields.terms(fieldName);\n        if (terms != null) {\n          tiq.fill(fieldName, terms.iterator(null));\n        }\n      }\n    }\n    \n    TermStats[] result = new TermStats[tiq.size()];\n    // we want highest first so we read the queue and populate the array\n    // starting at the end and work backwards\n    int count = tiq.size() - 1;\n    while (tiq.size() != 0) {\n      result[count] = tiq.pop();\n      count--;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0aae73ca2eeb899108e9fe36611ddf5a83ec790","date":1378482998,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#getHighFreqTerms(IndexReader,int,String,Comparator[TermStats]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#getHighFreqTerms(IndexReader,int,String).mjava","sourceNew":"  /**\n   * Returns TermStats[] ordered by the specified comparator\n   */\n  public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field, Comparator<TermStats> comparator) throws Exception {\n    TermStatsQueue tiq = null;\n    \n    if (field != null) {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"field \" + field + \" not found\");\n      }\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        tiq = new TermStatsQueue(numTerms, comparator);\n        tiq.fill(field, termsEnum);\n      }\n    } else {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"no fields found for this index\");\n      }\n      tiq = new TermStatsQueue(numTerms, comparator);\n      for (String fieldName : fields) {\n        Terms terms = fields.terms(fieldName);\n        if (terms != null) {\n          tiq.fill(fieldName, terms.iterator(null));\n        }\n      }\n    }\n    \n    TermStats[] result = new TermStats[tiq.size()];\n    // we want highest first so we read the queue and populate the array\n    // starting at the end and work backwards\n    int count = tiq.size() - 1;\n    while (tiq.size() != 0) {\n      result[count] = tiq.pop();\n      count--;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns TermStats[] ordered by terms with highest docFreq first.\n   */\n  public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field) throws Exception {\n    TermStatsQueue tiq = null;\n    \n    if (field != null) {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"field \" + field + \" not found\");\n      }\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        tiq = new TermStatsQueue(numTerms);\n        tiq.fill(field, termsEnum);\n      }\n    } else {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"no fields found for this index\");\n      }\n      tiq = new TermStatsQueue(numTerms);\n      for (String fieldName : fields) {\n        Terms terms = fields.terms(fieldName);\n        if (terms != null) {\n          tiq.fill(fieldName, terms.iterator(null));\n        }\n      }\n    }\n    \n    TermStats[] result = new TermStats[tiq.size()];\n    // we want highest first so we read the queue and populate the array\n    // starting at the end and work backwards\n    int count = tiq.size() - 1;\n    while (tiq.size() != 0) {\n      result[count] = tiq.pop();\n      count--;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["fb07ab105350b80ed9d63ca64b117084ed7391bc"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["c1384ca7a3f6c23e84ab220381ba3fc1a4624649","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["c1384ca7a3f6c23e84ab220381ba3fc1a4624649"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c1384ca7a3f6c23e84ab220381ba3fc1a4624649":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["c1384ca7a3f6c23e84ab220381ba3fc1a4624649","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0aae73ca2eeb899108e9fe36611ddf5a83ec790"],"f0aae73ca2eeb899108e9fe36611ddf5a83ec790":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["f0aae73ca2eeb899108e9fe36611ddf5a83ec790"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c1384ca7a3f6c23e84ab220381ba3fc1a4624649"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c1384ca7a3f6c23e84ab220381ba3fc1a4624649":["c7869f64c874ebf7f317d22c00baf2b6857797a6","fb07ab105350b80ed9d63ca64b117084ed7391bc","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f0aae73ca2eeb899108e9fe36611ddf5a83ec790":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}