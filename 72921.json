{"path":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermScorer#QueryTermScorer(WeightedTerm[]).mjava","commits":[{"id":"943c3f9cf96b8df37f4273d66a66182e2a669467","date":1249394171,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermScorer#QueryTermScorer(WeightedTerm[]).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#QueryScorer(WeightedTerm[]).mjava","sourceNew":"  public QueryTermScorer(WeightedTerm[] weightedTerms) {\n    termsToFind = new HashMap();\n    for (int i = 0; i < weightedTerms.length; i++) {\n      WeightedTerm existingTerm = (WeightedTerm) termsToFind\n          .get(weightedTerms[i].term);\n      if ((existingTerm == null)\n          || (existingTerm.weight < weightedTerms[i].weight)) {\n        // if a term is defined more than once, always use the highest scoring\n        // weight\n        termsToFind.put(weightedTerms[i].term, weightedTerms[i]);\n        maxTermWeight = Math.max(maxTermWeight, weightedTerms[i].getWeight());\n      }\n    }\n  }\n\n","sourceOld":"  public QueryScorer(WeightedTerm[] weightedTerms) {\n    termsToFind = new HashMap();\n    for (int i = 0; i < weightedTerms.length; i++) {\n      WeightedTerm existingTerm = (WeightedTerm) termsToFind\n          .get(weightedTerms[i].term);\n      if ((existingTerm == null)\n          || (existingTerm.weight < weightedTerms[i].weight)) {\n        // if a term is defined more than once, always use the highest scoring\n        // weight\n        termsToFind.put(weightedTerms[i].term, weightedTerms[i]);\n        maxTermWeight = Math.max(maxTermWeight, weightedTerms[i].getWeight());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffdf794cee8d43eb612df752c592cef2dc3e75ae","date":1256465578,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermScorer#QueryTermScorer(WeightedTerm[]).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermScorer#QueryTermScorer(WeightedTerm[]).mjava","sourceNew":"  public QueryTermScorer(WeightedTerm[] weightedTerms) {\n    termsToFind = new HashMap<String,WeightedTerm>();\n    for (int i = 0; i < weightedTerms.length; i++) {\n      WeightedTerm existingTerm = termsToFind\n          .get(weightedTerms[i].term);\n      if ((existingTerm == null)\n          || (existingTerm.weight < weightedTerms[i].weight)) {\n        // if a term is defined more than once, always use the highest scoring\n        // weight\n        termsToFind.put(weightedTerms[i].term, weightedTerms[i]);\n        maxTermWeight = Math.max(maxTermWeight, weightedTerms[i].getWeight());\n      }\n    }\n  }\n\n","sourceOld":"  public QueryTermScorer(WeightedTerm[] weightedTerms) {\n    termsToFind = new HashMap();\n    for (int i = 0; i < weightedTerms.length; i++) {\n      WeightedTerm existingTerm = (WeightedTerm) termsToFind\n          .get(weightedTerms[i].term);\n      if ((existingTerm == null)\n          || (existingTerm.weight < weightedTerms[i].weight)) {\n        // if a term is defined more than once, always use the highest scoring\n        // weight\n        termsToFind.put(weightedTerms[i].term, weightedTerms[i]);\n        maxTermWeight = Math.max(maxTermWeight, weightedTerms[i].getWeight());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermScorer#QueryTermScorer(WeightedTerm[]).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermScorer#QueryTermScorer(WeightedTerm[]).mjava","sourceNew":"  public QueryTermScorer(WeightedTerm[] weightedTerms) {\n    termsToFind = new HashMap<String,WeightedTerm>();\n    for (int i = 0; i < weightedTerms.length; i++) {\n      WeightedTerm existingTerm = termsToFind\n          .get(weightedTerms[i].term);\n      if ((existingTerm == null)\n          || (existingTerm.weight < weightedTerms[i].weight)) {\n        // if a term is defined more than once, always use the highest scoring\n        // weight\n        termsToFind.put(weightedTerms[i].term, weightedTerms[i]);\n        maxTermWeight = Math.max(maxTermWeight, weightedTerms[i].getWeight());\n      }\n    }\n  }\n\n","sourceOld":"  public QueryTermScorer(WeightedTerm[] weightedTerms) {\n    termsToFind = new HashMap<String,WeightedTerm>();\n    for (int i = 0; i < weightedTerms.length; i++) {\n      WeightedTerm existingTerm = termsToFind\n          .get(weightedTerms[i].term);\n      if ((existingTerm == null)\n          || (existingTerm.weight < weightedTerms[i].weight)) {\n        // if a term is defined more than once, always use the highest scoring\n        // weight\n        termsToFind.put(weightedTerms[i].term, weightedTerms[i]);\n        maxTermWeight = Math.max(maxTermWeight, weightedTerms[i].getWeight());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"943c3f9cf96b8df37f4273d66a66182e2a669467":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"]},"commit2Childs":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}