{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreNodeGone(String,String,String,int).mjava","commits":[{"id":"cd548b14f1051e707393e77329f80c5e89f69919","date":1385226862,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreNodeGone(String,String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreNodeGone(String,String,String).mjava","sourceNew":"  private boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    long waitUntil = System.currentTimeMillis() + timeoutms;\n    boolean deleted = false;\n    while (System.currentTimeMillis() < waitUntil) {\n      Thread.sleep(100);\n      deleted = zkStateReader.getClusterState().getCollection(collectionName).getSlice(shard).getReplica(replicaName) == null;\n      if (deleted) break;\n    }\n    return deleted;\n  }\n\n","sourceOld":"  private boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName) throws InterruptedException {\n    long waitUntil = System.currentTimeMillis() + 30000;\n    boolean deleted = false;\n    while (System.currentTimeMillis() < waitUntil) {\n      Thread.sleep(100);\n      deleted = zkStateReader.getClusterState().getCollection(collectionName).getSlice(shard).getReplica(replicaName) == null;\n      if (deleted) break;\n    }\n    return deleted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreNodeGone(String,String,String,int).mjava","pathOld":"/dev/null","sourceNew":"  private boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    long waitUntil = System.currentTimeMillis() + timeoutms;\n    boolean deleted = false;\n    while (System.currentTimeMillis() < waitUntil) {\n      Thread.sleep(100);\n      deleted = zkStateReader.getClusterState().getCollection(collectionName).getSlice(shard).getReplica(replicaName) == null;\n      if (deleted) break;\n    }\n    return deleted;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd5bc858b8426d40bbe90b94120ead37c77d7954","date":1393812525,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreNodeGone(String,String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreNodeGone(String,String,String,int).mjava","sourceNew":"  private boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    long waitUntil = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    boolean deleted = false;\n    while (System.nanoTime() < waitUntil) {\n      Thread.sleep(100);\n      deleted = zkStateReader.getClusterState().getCollection(collectionName).getSlice(shard).getReplica(replicaName) == null;\n      if (deleted) break;\n    }\n    return deleted;\n  }\n\n","sourceOld":"  private boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    long waitUntil = System.currentTimeMillis() + timeoutms;\n    boolean deleted = false;\n    while (System.currentTimeMillis() < waitUntil) {\n      Thread.sleep(100);\n      deleted = zkStateReader.getClusterState().getCollection(collectionName).getSlice(shard).getReplica(replicaName) == null;\n      if (deleted) break;\n    }\n    return deleted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de84935d1fc860da45274e111051890ba7504337","date":1407915714,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreNodeGone(String,String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreNodeGone(String,String,String,int).mjava","sourceNew":"  private boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    long waitUntil = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    boolean deleted = false;\n    while (System.nanoTime() < waitUntil) {\n      Thread.sleep(100);\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n      if(docCollection != null) {\n        Slice slice = docCollection.getSlice(shard);\n        if(slice == null || slice.getReplica(replicaName) == null) {\n          deleted =  true;\n        }\n      }\n      // Return true if either someone already deleted the collection/slice/replica.\n      if (docCollection == null || deleted) break;\n    }\n    return deleted;\n  }\n\n","sourceOld":"  private boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    long waitUntil = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    boolean deleted = false;\n    while (System.nanoTime() < waitUntil) {\n      Thread.sleep(100);\n      deleted = zkStateReader.getClusterState().getCollection(collectionName).getSlice(shard).getReplica(replicaName) == null;\n      if (deleted) break;\n    }\n    return deleted;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeGone(String,String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreNodeGone(String,String,String,int).mjava","sourceNew":"  private boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    long waitUntil = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    boolean deleted = false;\n    while (System.nanoTime() < waitUntil) {\n      Thread.sleep(100);\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n      if(docCollection != null) {\n        Slice slice = docCollection.getSlice(shard);\n        if(slice == null || slice.getReplica(replicaName) == null) {\n          deleted =  true;\n        }\n      }\n      // Return true if either someone already deleted the collection/slice/replica.\n      if (docCollection == null || deleted) break;\n    }\n    return deleted;\n  }\n\n","sourceOld":"  private boolean waitForCoreNodeGone(String collectionName, String shard, String replicaName, int timeoutms) throws InterruptedException {\n    long waitUntil = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    boolean deleted = false;\n    while (System.nanoTime() < waitUntil) {\n      Thread.sleep(100);\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n      if(docCollection != null) {\n        Slice slice = docCollection.getSlice(shard);\n        if(slice == null || slice.getReplica(replicaName) == null) {\n          deleted =  true;\n        }\n      }\n      // Return true if either someone already deleted the collection/slice/replica.\n      if (docCollection == null || deleted) break;\n    }\n    return deleted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["de84935d1fc860da45274e111051890ba7504337"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cd548b14f1051e707393e77329f80c5e89f69919"],"cd548b14f1051e707393e77329f80c5e89f69919":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"de84935d1fc860da45274e111051890ba7504337":["fd5bc858b8426d40bbe90b94120ead37c77d7954"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["cd548b14f1051e707393e77329f80c5e89f69919"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd548b14f1051e707393e77329f80c5e89f69919"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cd548b14f1051e707393e77329f80c5e89f69919":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","fd5bc858b8426d40bbe90b94120ead37c77d7954"],"de84935d1fc860da45274e111051890ba7504337":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["de84935d1fc860da45274e111051890ba7504337"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}