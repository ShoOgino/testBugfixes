{"path":"solr/core/src/test/org/apache/solr/uninverting/TestLegacyFieldCache#testDocsWithField().mjava","commits":[{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestLegacyFieldCache#testDocsWithField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestLegacyFieldCache#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, true);\n\n    // The double[] takes one slots, and docsWithField should also\n    // have been populated:\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER);\n\n    // No new entries should appear:\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER);\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.LEGACY_INT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\", FieldCache.LEGACY_INT_PARSER);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, true);\n\n    // The double[] takes one slots, and docsWithField should also\n    // have been populated:\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER);\n\n    // No new entries should appear:\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER);\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.LEGACY_INT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\", FieldCache.LEGACY_INT_PARSER);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestLegacyFieldCache#testDocsWithField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestLegacyFieldCache#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, true);\n\n    // The double[] takes one slots, and docsWithField should also\n    // have been populated:\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER);\n\n    // No new entries should appear:\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER);\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.LEGACY_INT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\", FieldCache.LEGACY_INT_PARSER);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, true);\n\n    // The double[] takes one slots, and docsWithField should also\n    // have been populated:\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER);\n\n    // No new entries should appear:\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER);\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.LEGACY_INT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\", FieldCache.LEGACY_INT_PARSER);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestLegacyFieldCache#testDocsWithField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestLegacyFieldCache#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, true);\n\n    // The double[] takes one slots, and docsWithField should also\n    // have been populated:\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER);\n\n    // No new entries should appear:\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER);\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.LEGACY_INT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\", FieldCache.LEGACY_INT_PARSER);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, true);\n\n    // The double[] takes one slots, and docsWithField should also\n    // have been populated:\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER);\n\n    // No new entries should appear:\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER);\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.LEGACY_INT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\", FieldCache.LEGACY_INT_PARSER);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestLegacyFieldCache#testDocsWithField().mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestLegacyFieldCache#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER);\n\n    // The double[] takes one slots, and docsWithField should also\n    // have been populated:\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER);\n\n    // No new entries should appear:\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER);\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (i%2 == 0) {\n        assertEquals(i, ints.nextDoc());\n        assertEquals(i, ints.longValue());\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.LEGACY_INT_PARSER);\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (i%2 == 0) {\n        assertEquals(i, numInts.nextDoc());\n        assertEquals(i, numInts.longValue());\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, true);\n\n    // The double[] takes one slots, and docsWithField should also\n    // have been populated:\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER);\n\n    // No new entries should appear:\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER);\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.LEGACY_INT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\", FieldCache.LEGACY_INT_PARSER);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestLegacyFieldCache#testDocsWithField().mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestLegacyFieldCache#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER);\n\n    // The double[] takes one slots, and docsWithField should also\n    // have been populated:\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER);\n\n    // No new entries should appear:\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER);\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (i%2 == 0) {\n        assertEquals(i, ints.nextDoc());\n        assertEquals(i, ints.longValue());\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.LEGACY_INT_PARSER);\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (i%2 == 0) {\n        assertEquals(i, numInts.nextDoc());\n        assertEquals(i, numInts.longValue());\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, true);\n\n    // The double[] takes one slots, and docsWithField should also\n    // have been populated:\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER);\n\n    // No new entries should appear:\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER);\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.LEGACY_INT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\", FieldCache.LEGACY_INT_PARSER);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestLegacyFieldCache#testDocsWithField().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER);\n\n    // The double[] takes one slots, and docsWithField should also\n    // have been populated:\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER);\n\n    // No new entries should appear:\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER);\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (i%2 == 0) {\n        assertEquals(i, ints.nextDoc());\n        assertEquals(i, ints.longValue());\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.LEGACY_INT_PARSER);\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (i%2 == 0) {\n        assertEquals(i, numInts.nextDoc());\n        assertEquals(i, numInts.longValue());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0e121d43b5a10f2df530f406f935102656e9c4e8","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","83870855d82aba6819217abeff5a40779dbb28b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}