{"path":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/ZooKeeperDownloader#downloadConfigDir(SolrZkClient,String,File).mjava","commits":[{"id":"c170e9d4c93c47801b611c5f124a91c5d27e0d73","date":1392824784,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/ZooKeeperDownloader#downloadConfigDir(SolrZkClient,String,File).mjava","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/ZooKeeperDownloader#downloadConfigDir(SolrZkClient,String).mjava","sourceNew":"  /**\n   * Download and return the config directory from ZK\n   */\n  public File downloadConfigDir(SolrZkClient zkClient, String configName, File dir)\n  throws IOException, InterruptedException, KeeperException {\n    Preconditions.checkArgument(dir.exists());\n    Preconditions.checkArgument(dir.isDirectory());\n    ZkController.downloadConfigDir(zkClient, configName, dir);\n    File confDir = new File(dir, \"conf\");\n    if (!confDir.isDirectory()) {\n      // create a temporary directory with \"conf\" subdir and mv the config in there.  This is\n      // necessary because of CDH-11188; solrctl does not generate nor accept directories with e.g.\n      // conf/solrconfig.xml which is necessary for proper solr operation.  This should work\n      // even if solrctl changes.\n      confDir = new File(Files.createTempDir().getAbsolutePath(), \"conf\");\n      confDir.getParentFile().deleteOnExit();\n      Files.move(dir, confDir);\n      dir = confDir.getParentFile();\n    }\n    verifyConfigDir(confDir);\n    return dir;\n  }\n\n","sourceOld":"  /**\n   * Download and return the config directory from ZK\n   */\n  public File downloadConfigDir(SolrZkClient zkClient, String configName)\n  throws IOException, InterruptedException, KeeperException {\n    File dir = Files.createTempDir();\n    dir.deleteOnExit();\n    ZkController.downloadConfigDir(zkClient, configName, dir);\n    File confDir = new File(dir, \"conf\");\n    if (!confDir.isDirectory()) {\n      // create a temporary directory with \"conf\" subdir and mv the config in there.  This is\n      // necessary because of CDH-11188; solrctl does not generate nor accept directories with e.g.\n      // conf/solrconfig.xml which is necessary for proper solr operation.  This should work\n      // even if solrctl changes.\n      confDir = new File(Files.createTempDir().getAbsolutePath(), \"conf\");\n      confDir.getParentFile().deleteOnExit();\n      Files.move(dir, confDir);\n      dir = confDir.getParentFile();\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c8a2521797f14d1d697a17a0069f5619cd211a6","date":1424361535,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/ZooKeeperDownloader#downloadConfigDir(SolrZkClient,String,File).mjava","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/ZooKeeperDownloader#downloadConfigDir(SolrZkClient,String,File).mjava","sourceNew":"  /**\n   * Download and return the config directory from ZK\n   */\n  public File downloadConfigDir(SolrZkClient zkClient, String configName, File dir)\n  throws IOException, InterruptedException, KeeperException {\n    Preconditions.checkArgument(dir.exists());\n    Preconditions.checkArgument(dir.isDirectory());\n    ZkConfigManager manager = new ZkConfigManager(zkClient);\n    manager.downloadConfigDir(configName, dir.toPath());\n    File confDir = new File(dir, \"conf\");\n    if (!confDir.isDirectory()) {\n      // create a temporary directory with \"conf\" subdir and mv the config in there.  This is\n      // necessary because of CDH-11188; solrctl does not generate nor accept directories with e.g.\n      // conf/solrconfig.xml which is necessary for proper solr operation.  This should work\n      // even if solrctl changes.\n      confDir = new File(Files.createTempDir().getAbsolutePath(), \"conf\");\n      confDir.getParentFile().deleteOnExit();\n      Files.move(dir, confDir);\n      dir = confDir.getParentFile();\n    }\n    verifyConfigDir(confDir);\n    return dir;\n  }\n\n","sourceOld":"  /**\n   * Download and return the config directory from ZK\n   */\n  public File downloadConfigDir(SolrZkClient zkClient, String configName, File dir)\n  throws IOException, InterruptedException, KeeperException {\n    Preconditions.checkArgument(dir.exists());\n    Preconditions.checkArgument(dir.isDirectory());\n    ZkController.downloadConfigDir(zkClient, configName, dir);\n    File confDir = new File(dir, \"conf\");\n    if (!confDir.isDirectory()) {\n      // create a temporary directory with \"conf\" subdir and mv the config in there.  This is\n      // necessary because of CDH-11188; solrctl does not generate nor accept directories with e.g.\n      // conf/solrconfig.xml which is necessary for proper solr operation.  This should work\n      // even if solrctl changes.\n      confDir = new File(Files.createTempDir().getAbsolutePath(), \"conf\");\n      confDir.getParentFile().deleteOnExit();\n      Files.move(dir, confDir);\n      dir = confDir.getParentFile();\n    }\n    verifyConfigDir(confDir);\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/ZooKeeperDownloader#downloadConfigDir(SolrZkClient,String,File).mjava","sourceNew":null,"sourceOld":"  /**\n   * Download and return the config directory from ZK\n   */\n  public File downloadConfigDir(SolrZkClient zkClient, String configName, File dir)\n  throws IOException, InterruptedException, KeeperException {\n    Preconditions.checkArgument(dir.exists());\n    Preconditions.checkArgument(dir.isDirectory());\n    ZkConfigManager manager = new ZkConfigManager(zkClient);\n    manager.downloadConfigDir(configName, dir.toPath());\n    File confDir = new File(dir, \"conf\");\n    if (!confDir.isDirectory()) {\n      // create a temporary directory with \"conf\" subdir and mv the config in there.  This is\n      // necessary because of CDH-11188; solrctl does not generate nor accept directories with e.g.\n      // conf/solrconfig.xml which is necessary for proper solr operation.  This should work\n      // even if solrctl changes.\n      confDir = new File(Files.createTempDir().getAbsolutePath(), \"conf\");\n      confDir.getParentFile().deleteOnExit();\n      Files.move(dir, confDir);\n      dir = confDir.getParentFile();\n    }\n    verifyConfigDir(confDir);\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/ZooKeeperDownloader#downloadConfigDir(SolrZkClient,String,File).mjava","sourceNew":null,"sourceOld":"  /**\n   * Download and return the config directory from ZK\n   */\n  public File downloadConfigDir(SolrZkClient zkClient, String configName, File dir)\n  throws IOException, InterruptedException, KeeperException {\n    Preconditions.checkArgument(dir.exists());\n    Preconditions.checkArgument(dir.isDirectory());\n    ZkConfigManager manager = new ZkConfigManager(zkClient);\n    manager.downloadConfigDir(configName, dir.toPath());\n    File confDir = new File(dir, \"conf\");\n    if (!confDir.isDirectory()) {\n      // create a temporary directory with \"conf\" subdir and mv the config in there.  This is\n      // necessary because of CDH-11188; solrctl does not generate nor accept directories with e.g.\n      // conf/solrconfig.xml which is necessary for proper solr operation.  This should work\n      // even if solrctl changes.\n      confDir = new File(Files.createTempDir().getAbsolutePath(), \"conf\");\n      confDir.getParentFile().deleteOnExit();\n      Files.move(dir, confDir);\n      dir = confDir.getParentFile();\n    }\n    verifyConfigDir(confDir);\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c170e9d4c93c47801b611c5f124a91c5d27e0d73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["c170e9d4c93c47801b611c5f124a91c5d27e0d73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe1c4aa9af769a38e878f608070f672efbeac27f":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"c170e9d4c93c47801b611c5f124a91c5d27e0d73":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c170e9d4c93c47801b611c5f124a91c5d27e0d73"],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["12109b652e9210b8d58fca47f6c4a725d058a58e","fe1c4aa9af769a38e878f608070f672efbeac27f"],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}