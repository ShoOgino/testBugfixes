{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#showCounts().mjava","commits":[{"id":"87fe1cc88e77427574da7dc868511048fec39e54","date":1372433111,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#showCounts().mjava","pathOld":"/dev/null","sourceNew":"  public void showCounts() {\n    Set<String> theShards = shardToJetty.keySet();\n    \n    for (String shard : theShards) {\n      List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n      \n      for (CloudJettyRunner cjetty : solrJetties) {\n        ZkNodeProps props = cjetty.info;\n        System.err.println(\"PROPS:\" + props);\n        \n        try {\n          SolrParams query = params(\"q\", \"*:*\", \"rows\", \"0\", \"distrib\",\n              \"false\", \"tests\", \"checkShardConsistency\"); // \"tests\" is just a\n                                                          // tag that won't do\n                                                          // anything except be\n                                                          // echoed in logs\n          long num = cjetty.client.solrClient.query(query).getResults()\n              .getNumFound();\n          System.err.println(\"DOCS:\" + num);\n        } catch (SolrServerException e) {\n          System.err.println(\"error contacting client: \" + e.getMessage()\n              + \"\\n\");\n          continue;\n        } catch (SolrException e) {\n          System.err.println(\"error contacting client: \" + e.getMessage()\n              + \"\\n\");\n          continue;\n        }\n        boolean live = false;\n        String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n        ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n        if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n          live = true;\n        }\n        System.err.println(\" live:\" + live);\n        \n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#showCounts().mjava","pathOld":"/dev/null","sourceNew":"  public void showCounts() {\n    Set<String> theShards = shardToJetty.keySet();\n    \n    for (String shard : theShards) {\n      List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n      \n      for (CloudJettyRunner cjetty : solrJetties) {\n        ZkNodeProps props = cjetty.info;\n        System.err.println(\"PROPS:\" + props);\n        \n        try {\n          SolrParams query = params(\"q\", \"*:*\", \"rows\", \"0\", \"distrib\",\n              \"false\", \"tests\", \"checkShardConsistency\"); // \"tests\" is just a\n                                                          // tag that won't do\n                                                          // anything except be\n                                                          // echoed in logs\n          long num = cjetty.client.solrClient.query(query).getResults()\n              .getNumFound();\n          System.err.println(\"DOCS:\" + num);\n        } catch (SolrServerException e) {\n          System.err.println(\"error contacting client: \" + e.getMessage()\n              + \"\\n\");\n          continue;\n        } catch (SolrException e) {\n          System.err.println(\"error contacting client: \" + e.getMessage()\n              + \"\\n\");\n          continue;\n        }\n        boolean live = false;\n        String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n        ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n        if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n          live = true;\n        }\n        System.err.println(\" live:\" + live);\n        \n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#showCounts().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#showCounts().mjava","sourceNew":"  public void showCounts() {\n    Set<String> theShards = shardToJetty.keySet();\n\n    for (String shard : theShards) {\n      List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n\n      for (CloudJettyRunner cjetty : solrJetties) {\n        ZkNodeProps props = cjetty.info;\n        System.err.println(\"PROPS:\" + props);\n\n        try {\n          SolrParams query = params(\"q\", \"*:*\", \"rows\", \"0\", \"distrib\",\n              \"false\", \"tests\", \"checkShardConsistency\"); // \"tests\" is just a\n                                                          // tag that won't do\n                                                          // anything except be\n                                                          // echoed in logs\n          long num = cjetty.client.solrClient.query(query).getResults()\n              .getNumFound();\n          System.err.println(\"DOCS:\" + num);\n        } catch (SolrServerException e) {\n          System.err.println(\"error contacting client: \" + e.getMessage()\n              + \"\\n\");\n          continue;\n        } catch (SolrException e) {\n          System.err.println(\"error contacting client: \" + e.getMessage()\n              + \"\\n\");\n          continue;\n        }\n        boolean live = false;\n        String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n        ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n        if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n          live = true;\n        }\n        System.err.println(\" live:\" + live);\n\n      }\n    }\n  }\n\n","sourceOld":"  public void showCounts() {\n    Set<String> theShards = shardToJetty.keySet();\n    \n    for (String shard : theShards) {\n      List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n      \n      for (CloudJettyRunner cjetty : solrJetties) {\n        ZkNodeProps props = cjetty.info;\n        System.err.println(\"PROPS:\" + props);\n        \n        try {\n          SolrParams query = params(\"q\", \"*:*\", \"rows\", \"0\", \"distrib\",\n              \"false\", \"tests\", \"checkShardConsistency\"); // \"tests\" is just a\n                                                          // tag that won't do\n                                                          // anything except be\n                                                          // echoed in logs\n          long num = cjetty.client.solrClient.query(query).getResults()\n              .getNumFound();\n          System.err.println(\"DOCS:\" + num);\n        } catch (SolrServerException e) {\n          System.err.println(\"error contacting client: \" + e.getMessage()\n              + \"\\n\");\n          continue;\n        } catch (SolrException e) {\n          System.err.println(\"error contacting client: \" + e.getMessage()\n              + \"\\n\");\n          continue;\n        }\n        boolean live = false;\n        String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n        ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n        if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n          live = true;\n        }\n        System.err.println(\" live:\" + live);\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa","date":1425039471,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#showCounts().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#showCounts().mjava","sourceNew":"  public void showCounts() {\n    Set<String> theShards = shardToJetty.keySet();\n\n    for (String shard : theShards) {\n      List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n\n      for (CloudJettyRunner cjetty : solrJetties) {\n        ZkNodeProps props = cjetty.info;\n        System.err.println(\"PROPS:\" + props);\n\n        try {\n          SolrParams query = params(\"q\", \"*:*\", \"rows\", \"0\", \"distrib\",\n              \"false\", \"tests\", \"checkShardConsistency\"); // \"tests\" is just a\n                                                          // tag that won't do\n                                                          // anything except be\n                                                          // echoed in logs\n          long num = cjetty.client.solrClient.query(query).getResults()\n              .getNumFound();\n          System.err.println(\"DOCS:\" + num);\n        } catch (SolrServerException | SolrException | IOException e) {\n          System.err.println(\"error contacting client: \" + e.getMessage()\n              + \"\\n\");\n          continue;\n        }\n        boolean live = false;\n        String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n        ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n        if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n          live = true;\n        }\n        System.err.println(\" live:\" + live);\n\n      }\n    }\n  }\n\n","sourceOld":"  public void showCounts() {\n    Set<String> theShards = shardToJetty.keySet();\n\n    for (String shard : theShards) {\n      List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n\n      for (CloudJettyRunner cjetty : solrJetties) {\n        ZkNodeProps props = cjetty.info;\n        System.err.println(\"PROPS:\" + props);\n\n        try {\n          SolrParams query = params(\"q\", \"*:*\", \"rows\", \"0\", \"distrib\",\n              \"false\", \"tests\", \"checkShardConsistency\"); // \"tests\" is just a\n                                                          // tag that won't do\n                                                          // anything except be\n                                                          // echoed in logs\n          long num = cjetty.client.solrClient.query(query).getResults()\n              .getNumFound();\n          System.err.println(\"DOCS:\" + num);\n        } catch (SolrServerException e) {\n          System.err.println(\"error contacting client: \" + e.getMessage()\n              + \"\\n\");\n          continue;\n        } catch (SolrException e) {\n          System.err.println(\"error contacting client: \" + e.getMessage()\n              + \"\\n\");\n          continue;\n        }\n        boolean live = false;\n        String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n        ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n        if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n          live = true;\n        }\n        System.err.println(\" live:\" + live);\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#showCounts().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#showCounts().mjava","sourceNew":"  public void showCounts() {\n    Set<String> theShards = shardToJetty.keySet();\n\n    for (String shard : theShards) {\n      List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n\n      for (CloudJettyRunner cjetty : solrJetties) {\n        ZkNodeProps props = cjetty.info;\n        System.err.println(\"PROPS:\" + props);\n\n        try {\n          SolrParams query = params(\"q\", \"*:*\", \"rows\", \"0\", \"distrib\",\n              \"false\", \"tests\", \"checkShardConsistency\"); // \"tests\" is just a\n                                                          // tag that won't do\n                                                          // anything except be\n                                                          // echoed in logs\n          long num = cjetty.client.solrClient.query(query).getResults()\n              .getNumFound();\n          System.err.println(\"DOCS:\" + num);\n        } catch (SolrServerException | SolrException | IOException e) {\n          System.err.println(\"error contacting client: \" + e.getMessage()\n              + \"\\n\");\n          continue;\n        }\n        boolean live = false;\n        String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n        ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n        if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n          live = true;\n        }\n        System.err.println(\" live:\" + live);\n\n      }\n    }\n  }\n\n","sourceOld":"  public void showCounts() {\n    Set<String> theShards = shardToJetty.keySet();\n\n    for (String shard : theShards) {\n      List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n\n      for (CloudJettyRunner cjetty : solrJetties) {\n        ZkNodeProps props = cjetty.info;\n        System.err.println(\"PROPS:\" + props);\n\n        try {\n          SolrParams query = params(\"q\", \"*:*\", \"rows\", \"0\", \"distrib\",\n              \"false\", \"tests\", \"checkShardConsistency\"); // \"tests\" is just a\n                                                          // tag that won't do\n                                                          // anything except be\n                                                          // echoed in logs\n          long num = cjetty.client.solrClient.query(query).getResults()\n              .getNumFound();\n          System.err.println(\"DOCS:\" + num);\n        } catch (SolrServerException e) {\n          System.err.println(\"error contacting client: \" + e.getMessage()\n              + \"\\n\");\n          continue;\n        } catch (SolrException e) {\n          System.err.println(\"error contacting client: \" + e.getMessage()\n              + \"\\n\");\n          continue;\n        }\n        boolean live = false;\n        String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n        ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n        if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n          live = true;\n        }\n        System.err.println(\" live:\" + live);\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["abb23fcc2461782ab204e61213240feb77d355aa","b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa":["abb23fcc2461782ab204e61213240feb77d355aa"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","87fe1cc88e77427574da7dc868511048fec39e54"],"abb23fcc2461782ab204e61213240feb77d355aa":["87fe1cc88e77427574da7dc868511048fec39e54"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87fe1cc88e77427574da7dc868511048fec39e54":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"abb23fcc2461782ab204e61213240feb77d355aa":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","87fe1cc88e77427574da7dc868511048fec39e54"],"87fe1cc88e77427574da7dc868511048fec39e54":["37a0f60745e53927c4c876cfe5b5a58170f0646c","abb23fcc2461782ab204e61213240feb77d355aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}