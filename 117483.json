{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitToSeeNotLive(ZkStateReader,CloudJettyRunner,int).mjava","commits":[{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitToSeeNotLive(ZkStateReader,CloudJettyRunner,int).mjava","pathOld":"/dev/null","sourceNew":"  protected void waitToSeeNotLive(ZkStateReader zkStateReader,\n      CloudJettyRunner cjetty, int cnt) throws InterruptedException {\n    int tries = 0;\n    ClusterState clusterState = zkStateReader.getClusterState();\n    while (clusterState.liveNodesContain(cjetty.info\n        .getStr(ZkStateReader.NODE_NAME_PROP))) {\n      System.out.println(\"scs:\"\n          + zkStateReader.getClusterState().getZkClusterStateVersion() + \" \"\n          + zkStateReader.getClusterState().getLiveNodes());\n      System.out.println(\"see live nodes:\"\n          + zkStateReader.getClusterState().getLiveNodes());\n      if (tries++ == 30) {\n        fail(\"Shard still reported as live in zk - \" + cnt + \" jetty\");\n      }\n\n      clusterState = zkStateReader.getClusterState();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b29aecd047d441947234ca7e94798fbaa784f969","date":1351352482,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitToSeeNotLive(ZkStateReader,CloudJettyRunner,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitToSeeNotLive(ZkStateReader,CloudJettyRunner,int).mjava","sourceNew":"  protected void waitToSeeNotLive(ZkStateReader zkStateReader,\n      CloudJettyRunner cjetty, int cnt) throws InterruptedException {\n    int tries = 0;\n    ClusterState clusterState = zkStateReader.getClusterState();\n    while (clusterState.liveNodesContain(cjetty.info\n        .getStr(ZkStateReader.NODE_NAME_PROP))) {\n      System.out.println(\"scs:\"\n          + zkStateReader.getClusterState().getZkClusterStateVersion() + \" \"\n          + zkStateReader.getClusterState().getLiveNodes());\n      System.out.println(\"see live nodes:\"\n          + zkStateReader.getClusterState().getLiveNodes());\n      if (tries++ == 30) {\n        fail(\"Shard still reported as live in zk - \" + cnt + \" jetty\");\n      }\n      Thread.sleep(1000);\n      clusterState = zkStateReader.getClusterState();\n    }\n  }\n\n","sourceOld":"  protected void waitToSeeNotLive(ZkStateReader zkStateReader,\n      CloudJettyRunner cjetty, int cnt) throws InterruptedException {\n    int tries = 0;\n    ClusterState clusterState = zkStateReader.getClusterState();\n    while (clusterState.liveNodesContain(cjetty.info\n        .getStr(ZkStateReader.NODE_NAME_PROP))) {\n      System.out.println(\"scs:\"\n          + zkStateReader.getClusterState().getZkClusterStateVersion() + \" \"\n          + zkStateReader.getClusterState().getLiveNodes());\n      System.out.println(\"see live nodes:\"\n          + zkStateReader.getClusterState().getLiveNodes());\n      if (tries++ == 30) {\n        fail(\"Shard still reported as live in zk - \" + cnt + \" jetty\");\n      }\n\n      clusterState = zkStateReader.getClusterState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitToSeeNotLive(ZkStateReader,CloudJettyRunner,int).mjava","pathOld":"/dev/null","sourceNew":"  protected void waitToSeeNotLive(ZkStateReader zkStateReader,\n      CloudJettyRunner cjetty, int cnt) throws InterruptedException {\n    int tries = 0;\n    ClusterState clusterState = zkStateReader.getClusterState();\n    while (clusterState.liveNodesContain(cjetty.info\n        .getStr(ZkStateReader.NODE_NAME_PROP))) {\n      System.out.println(\"scs:\"\n          + zkStateReader.getClusterState().getZkClusterStateVersion() + \" \"\n          + zkStateReader.getClusterState().getLiveNodes());\n      System.out.println(\"see live nodes:\"\n          + zkStateReader.getClusterState().getLiveNodes());\n      if (tries++ == 30) {\n        fail(\"Shard still reported as live in zk - \" + cnt + \" jetty\");\n      }\n      Thread.sleep(1000);\n      clusterState = zkStateReader.getClusterState();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69439d0df009e0bb0038d1e427159f449dd670d","date":1355704683,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitToSeeNotLive(ZkStateReader,CloudJettyRunner,int).mjava","sourceNew":null,"sourceOld":"  protected void waitToSeeNotLive(ZkStateReader zkStateReader,\n      CloudJettyRunner cjetty, int cnt) throws InterruptedException {\n    int tries = 0;\n    ClusterState clusterState = zkStateReader.getClusterState();\n    while (clusterState.liveNodesContain(cjetty.info\n        .getStr(ZkStateReader.NODE_NAME_PROP))) {\n      System.out.println(\"scs:\"\n          + zkStateReader.getClusterState().getZkClusterStateVersion() + \" \"\n          + zkStateReader.getClusterState().getLiveNodes());\n      System.out.println(\"see live nodes:\"\n          + zkStateReader.getClusterState().getLiveNodes());\n      if (tries++ == 30) {\n        fail(\"Shard still reported as live in zk - \" + cnt + \" jetty\");\n      }\n      Thread.sleep(1000);\n      clusterState = zkStateReader.getClusterState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#waitToSeeNotLive(ZkStateReader,CloudJettyRunner,int).mjava","sourceNew":null,"sourceOld":"  protected void waitToSeeNotLive(ZkStateReader zkStateReader,\n      CloudJettyRunner cjetty, int cnt) throws InterruptedException {\n    int tries = 0;\n    ClusterState clusterState = zkStateReader.getClusterState();\n    while (clusterState.liveNodesContain(cjetty.info\n        .getStr(ZkStateReader.NODE_NAME_PROP))) {\n      System.out.println(\"scs:\"\n          + zkStateReader.getClusterState().getZkClusterStateVersion() + \" \"\n          + zkStateReader.getClusterState().getLiveNodes());\n      System.out.println(\"see live nodes:\"\n          + zkStateReader.getClusterState().getLiveNodes());\n      if (tries++ == 30) {\n        fail(\"Shard still reported as live in zk - \" + cnt + \" jetty\");\n      }\n      Thread.sleep(1000);\n      clusterState = zkStateReader.getClusterState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b29aecd047d441947234ca7e94798fbaa784f969","a69439d0df009e0bb0038d1e427159f449dd670d"],"b29aecd047d441947234ca7e94798fbaa784f969":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a69439d0df009e0bb0038d1e427159f449dd670d":["b29aecd047d441947234ca7e94798fbaa784f969"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2126b84bd093fa3d921582a109a0ee578c28126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b29aecd047d441947234ca7e94798fbaa784f969"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a69439d0df009e0bb0038d1e427159f449dd670d"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b29aecd047d441947234ca7e94798fbaa784f969":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a69439d0df009e0bb0038d1e427159f449dd670d","f2126b84bd093fa3d921582a109a0ee578c28126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"a69439d0df009e0bb0038d1e427159f449dd670d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["b29aecd047d441947234ca7e94798fbaa784f969"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}