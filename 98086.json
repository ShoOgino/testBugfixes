{"path":"lucene/core/src/java/org/apache/lucene/search/CachingCollector.NoScoreCachingCollector#replay(Collector).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector.NoScoreCachingCollector#replay(Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingCollector.NoScoreCachingCollector#replay(Collector).mjava","sourceNew":"    @Override\n    public void replay(Collector other) throws IOException {\n      replayInit(other);\n      \n      int curUpto = 0;\n      int curbase = 0;\n      int chunkUpto = 0;\n      curDocs = EMPTY_INT_ARRAY;\n      for (SegStart seg : cachedSegs) {\n        other.setNextReader(seg.readerContext);\n        while (curbase + curUpto < seg.end) {\n          if (curUpto == curDocs.length) {\n            curbase += curDocs.length;\n            curDocs = cachedDocs.get(chunkUpto);\n            chunkUpto++;\n            curUpto = 0;\n          }\n          other.collect(curDocs[curUpto++]);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void replay(Collector other) throws IOException {\n      replayInit(other);\n      \n      int curUpto = 0;\n      int curbase = 0;\n      int chunkUpto = 0;\n      curDocs = EMPTY_INT_ARRAY;\n      for (SegStart seg : cachedSegs) {\n        other.setNextReader(seg.readerContext);\n        while (curbase + curUpto < seg.end) {\n          if (curUpto == curDocs.length) {\n            curbase += curDocs.length;\n            curDocs = cachedDocs.get(chunkUpto);\n            chunkUpto++;\n            curUpto = 0;\n          }\n          other.collect(curDocs[curUpto++]);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector.NoScoreCachingCollector#replay(Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingCollector.NoScoreCachingCollector#replay(Collector).mjava","sourceNew":"    public void replay(Collector other) throws IOException {\n      postCollection();\n      if (!isCached()) {\n        throw new IllegalStateException(\"cannot replay: cache was cleared because too much RAM was required\");\n      }\n      assert docs.size() == contexts.size();\n      for (int i = 0; i < contexts.size(); ++i) {\n        final AtomicReaderContext context = contexts.get(i);\n        final boolean docsInOrder = !acceptDocsOutOfOrders.get(i);\n        final LeafCollector collector = other.getLeafCollector(context);\n        if (!collector.acceptsDocsOutOfOrder() && !docsInOrder) {\n          throw new IllegalArgumentException(\n                \"cannot replay: given collector does not support \"\n                    + \"out-of-order collection, while the wrapped collector does. \"\n                    + \"Therefore cached documents may be out-of-order.\");\n        }\n        collect(collector, i);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void replay(Collector other) throws IOException {\n      replayInit(other);\n      \n      int curUpto = 0;\n      int curbase = 0;\n      int chunkUpto = 0;\n      curDocs = EMPTY_INT_ARRAY;\n      for (SegStart seg : cachedSegs) {\n        other.setNextReader(seg.readerContext);\n        while (curbase + curUpto < seg.end) {\n          if (curUpto == curDocs.length) {\n            curbase += curDocs.length;\n            curDocs = cachedDocs.get(chunkUpto);\n            chunkUpto++;\n            curUpto = 0;\n          }\n          other.collect(curDocs[curUpto++]);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector.NoScoreCachingCollector#replay(Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingCollector.NoScoreCachingCollector#replay(Collector).mjava","sourceNew":"    public void replay(Collector other) throws IOException {\n      postCollection();\n      if (!isCached()) {\n        throw new IllegalStateException(\"cannot replay: cache was cleared because too much RAM was required\");\n      }\n      assert docs.size() == contexts.size();\n      for (int i = 0; i < contexts.size(); ++i) {\n        final AtomicReaderContext context = contexts.get(i);\n        final boolean docsInOrder = !acceptDocsOutOfOrders.get(i);\n        final LeafCollector collector = other.getLeafCollector(context);\n        if (!collector.acceptsDocsOutOfOrder() && !docsInOrder) {\n          throw new IllegalArgumentException(\n                \"cannot replay: given collector does not support \"\n                    + \"out-of-order collection, while the wrapped collector does. \"\n                    + \"Therefore cached documents may be out-of-order.\");\n        }\n        collect(collector, i);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void replay(Collector other) throws IOException {\n      replayInit(other);\n      \n      int curUpto = 0;\n      int curbase = 0;\n      int chunkUpto = 0;\n      curDocs = EMPTY_INT_ARRAY;\n      for (SegStart seg : cachedSegs) {\n        other.setNextReader(seg.readerContext);\n        while (curbase + curUpto < seg.end) {\n          if (curUpto == curDocs.length) {\n            curbase += curDocs.length;\n            curDocs = cachedDocs.get(chunkUpto);\n            chunkUpto++;\n            curUpto = 0;\n          }\n          other.collect(curDocs[curUpto++]);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector.NoScoreCachingCollector#replay(Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingCollector.NoScoreCachingCollector#replay(Collector).mjava","sourceNew":"    public void replay(Collector other) throws IOException {\n      postCollection();\n      if (!isCached()) {\n        throw new IllegalStateException(\"cannot replay: cache was cleared because too much RAM was required\");\n      }\n      assert docs.size() == contexts.size();\n      for (int i = 0; i < contexts.size(); ++i) {\n        final LeafReaderContext context = contexts.get(i);\n        final boolean docsInOrder = !acceptDocsOutOfOrders.get(i);\n        final LeafCollector collector = other.getLeafCollector(context);\n        if (!collector.acceptsDocsOutOfOrder() && !docsInOrder) {\n          throw new IllegalArgumentException(\n                \"cannot replay: given collector does not support \"\n                    + \"out-of-order collection, while the wrapped collector does. \"\n                    + \"Therefore cached documents may be out-of-order.\");\n        }\n        collect(collector, i);\n      }\n    }\n\n","sourceOld":"    public void replay(Collector other) throws IOException {\n      postCollection();\n      if (!isCached()) {\n        throw new IllegalStateException(\"cannot replay: cache was cleared because too much RAM was required\");\n      }\n      assert docs.size() == contexts.size();\n      for (int i = 0; i < contexts.size(); ++i) {\n        final AtomicReaderContext context = contexts.get(i);\n        final boolean docsInOrder = !acceptDocsOutOfOrders.get(i);\n        final LeafCollector collector = other.getLeafCollector(context);\n        if (!collector.acceptsDocsOutOfOrder() && !docsInOrder) {\n          throw new IllegalArgumentException(\n                \"cannot replay: given collector does not support \"\n                    + \"out-of-order collection, while the wrapped collector does. \"\n                    + \"Therefore cached documents may be out-of-order.\");\n        }\n        collect(collector, i);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector.NoScoreCachingCollector#replay(Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingCollector.NoScoreCachingCollector#replay(Collector).mjava","sourceNew":"    public void replay(Collector other) throws IOException {\n      postCollection();\n      if (!isCached()) {\n        throw new IllegalStateException(\"cannot replay: cache was cleared because too much RAM was required\");\n      }\n      assert docs.size() == contexts.size();\n      for (int i = 0; i < contexts.size(); ++i) {\n        final LeafReaderContext context = contexts.get(i);\n        final LeafCollector collector = other.getLeafCollector(context);\n        collect(collector, i);\n      }\n    }\n\n","sourceOld":"    public void replay(Collector other) throws IOException {\n      postCollection();\n      if (!isCached()) {\n        throw new IllegalStateException(\"cannot replay: cache was cleared because too much RAM was required\");\n      }\n      assert docs.size() == contexts.size();\n      for (int i = 0; i < contexts.size(); ++i) {\n        final LeafReaderContext context = contexts.get(i);\n        final boolean docsInOrder = !acceptDocsOutOfOrders.get(i);\n        final LeafCollector collector = other.getLeafCollector(context);\n        if (!collector.acceptsDocsOutOfOrder() && !docsInOrder) {\n          throw new IllegalArgumentException(\n                \"cannot replay: given collector does not support \"\n                    + \"out-of-order collection, while the wrapped collector does. \"\n                    + \"Therefore cached documents may be out-of-order.\");\n        }\n        collect(collector, i);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["ae73da626f97850c922c42736f808d0378e165f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"]},"commit2Childs":{"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}