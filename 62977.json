{"path":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    nDocs = Math.min(nDocs, reader.numDocs());\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    nDocs = Math.min(nDocs, reader.numDocs());\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbf497fc92342be81ff184a144dfa7c96264116b","date":1275079529,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    nDocs = Math.min(nDocs, reader.maxDoc());\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    nDocs = Math.min(nDocs, reader.numDocs());\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":["259055feeba9afa10e21ab63032f3778bb1802f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"259055feeba9afa10e21ab63032f3778bb1802f1","date":1291199138,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    nDocs = Math.min(nDocs, reader.maxDoc());\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":["cbf497fc92342be81ff184a144dfa7c96264116b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    nDocs = Math.min(nDocs, reader.maxDoc());\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    nDocs = Math.min(nDocs, reader.maxDoc());\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n\n    if (executor == null) {\n      // single thread\n      int limit = reader.maxDoc();\n      if (limit == 0) {\n        limit = 1;\n      }\n      nDocs = Math.min(nDocs, limit);\n\n      TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                             fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n      search(weight, filter, collector);\n      return (TopFieldDocs) collector.topDocs();\n    } else {\n      // TODO: make this respect fillFields\n      final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < subReaders.length; i++) { // search each sub\n        runner.submit(\n                      new MultiSearcherCallableWithSort(lock, subSearchers[i], weight, filter, nDocs, hq, sort, i, docStarts));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        totalHits += topFieldDocs.totalHits;\n        maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n      }\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n    }\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":["d868f38e751225153684493f6a89d784835297bd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"41c254de87d45aece543872ed3ed365ab7d3ad7f","date":1294255671,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n\n    if (executor == null) {\n      // single thread\n      int limit = reader.maxDoc();\n      if (limit == 0) {\n        limit = 1;\n      }\n      nDocs = Math.min(nDocs, limit);\n\n      TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                             fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n      search(weight, filter, collector);\n      return (TopFieldDocs) collector.topDocs();\n    } else {\n      // TODO: make this respect fillFields\n      final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < subReaders.length; i++) { // search each sub\n        runner.submit(\n                      new MultiSearcherCallableWithSort(lock, subSearchers[i], weight, filter, nDocs, hq, sort, docStarts[i]));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        totalHits += topFieldDocs.totalHits;\n        maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n      }\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n    }\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n\n    if (executor == null) {\n      // single thread\n      int limit = reader.maxDoc();\n      if (limit == 0) {\n        limit = 1;\n      }\n      nDocs = Math.min(nDocs, limit);\n\n      TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                             fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n      search(weight, filter, collector);\n      return (TopFieldDocs) collector.topDocs();\n    } else {\n      // TODO: make this respect fillFields\n      final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < subReaders.length; i++) { // search each sub\n        runner.submit(\n                      new MultiSearcherCallableWithSort(lock, subSearchers[i], weight, filter, nDocs, hq, sort, i, docStarts));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        totalHits += topFieldDocs.totalHits;\n        maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n      }\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n\n    if (executor == null) {\n      // single thread\n      int limit = reader.maxDoc();\n      if (limit == 0) {\n        limit = 1;\n      }\n      nDocs = Math.min(nDocs, limit);\n\n      TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                             fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n      search(weight, filter, collector);\n      return (TopFieldDocs) collector.topDocs();\n    } else {\n      // TODO: make this respect fillFields\n      final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < subReaders.length; i++) { // search each sub\n        runner.submit(\n                      new MultiSearcherCallableWithSort(lock, subSearchers[i], weight, filter, nDocs, hq, sort, i, docStarts));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        totalHits += topFieldDocs.totalHits;\n        maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n      }\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n    }\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n\n    if (executor == null) {\n      // single thread\n      int limit = reader.maxDoc();\n      if (limit == 0) {\n        limit = 1;\n      }\n      nDocs = Math.min(nDocs, limit);\n\n      TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                             fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n      search(weight, filter, collector);\n      return (TopFieldDocs) collector.topDocs();\n    } else {\n      // TODO: make this respect fillFields\n      final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < subSearchers.length; i++) { // search each sub\n        runner.submit(\n                      new MultiSearcherCallableWithSort(lock, subSearchers[i], weight, filter, nDocs, hq, sort, leafContexts[i].docBase));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        totalHits += topFieldDocs.totalHits;\n        maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n      }\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n    }\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n\n    if (executor == null) {\n      // single thread\n      int limit = reader.maxDoc();\n      if (limit == 0) {\n        limit = 1;\n      }\n      nDocs = Math.min(nDocs, limit);\n\n      TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                             fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n      search(weight, filter, collector);\n      return (TopFieldDocs) collector.topDocs();\n    } else {\n      // TODO: make this respect fillFields\n      final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < subReaders.length; i++) { // search each sub\n        runner.submit(\n                      new MultiSearcherCallableWithSort(lock, subSearchers[i], weight, filter, nDocs, hq, sort, docStarts[i]));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        totalHits += topFieldDocs.totalHits;\n        maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n      }\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n\n    if (executor == null) {\n      // single thread\n      int limit = reader.maxDoc();\n      if (limit == 0) {\n        limit = 1;\n      }\n      nDocs = Math.min(nDocs, limit);\n\n      TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                             fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n      search(weight, filter, collector);\n      return (TopFieldDocs) collector.topDocs();\n    } else {\n      // TODO: make this respect fillFields\n      final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < subSearchers.length; i++) { // search each sub\n        runner.submit(\n                      new SearcherCallableWithSort(lock, subSearchers[i], weight, filter, nDocs, hq, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        totalHits += topFieldDocs.totalHits;\n        maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n      }\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n    }\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n\n    if (executor == null) {\n      // single thread\n      int limit = reader.maxDoc();\n      if (limit == 0) {\n        limit = 1;\n      }\n      nDocs = Math.min(nDocs, limit);\n\n      TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                             fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n      search(weight, filter, collector);\n      return (TopFieldDocs) collector.topDocs();\n    } else {\n      // TODO: make this respect fillFields\n      final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < subSearchers.length; i++) { // search each sub\n        runner.submit(\n                      new MultiSearcherCallableWithSort(lock, subSearchers[i], weight, filter, nDocs, hq, sort, leafContexts[i].docBase));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        totalHits += topFieldDocs.totalHits;\n        maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n      }\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n\n    if (executor == null) {\n      // single thread\n      int limit = reader.maxDoc();\n      if (limit == 0) {\n        limit = 1;\n      }\n      nDocs = Math.min(nDocs, limit);\n\n      TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                             fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n      search(weight, filter, collector);\n      return (TopFieldDocs) collector.topDocs();\n    } else {\n      // TODO: make this respect fillFields\n      final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < subSearchers.length; i++) { // search each sub\n        runner.submit(\n                      new SearcherCallableWithSort(lock, subSearchers[i], weight, filter, nDocs, hq, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        totalHits += topFieldDocs.totalHits;\n        maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n      }\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n    }\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30da203d7de68a87a16025523a483a96c24f4291","date":1296686055,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n    \n    if (executor == null) {\n      // use all leaves here!\n      return search (leafContexts, weight, filter, nDocs, sort, fillFields);\n    } else {\n      // TODO: make this respect fillFields\n      final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        runner.submit(\n                      new SearcherCallableWithSort(lock, this, leafSlices[i], weight, filter, nDocs, hq, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        totalHits += topFieldDocs.totalHits;\n        maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n      }\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n    }\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n\n    if (executor == null) {\n      // single thread\n      int limit = reader.maxDoc();\n      if (limit == 0) {\n        limit = 1;\n      }\n      nDocs = Math.min(nDocs, limit);\n\n      TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                             fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n      search(weight, filter, collector);\n      return (TopFieldDocs) collector.topDocs();\n    } else {\n      // TODO: make this respect fillFields\n      final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < subSearchers.length; i++) { // search each sub\n        runner.submit(\n                      new SearcherCallableWithSort(lock, subSearchers[i], weight, filter, nDocs, hq, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        totalHits += topFieldDocs.totalHits;\n        maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n      }\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":["d868f38e751225153684493f6a89d784835297bd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9f738d4503df21769bdbea97432f90df1d78747","date":1296724248,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n    \n    if (executor == null) {\n      // use all leaves here!\n      return search (leafContexts, weight, filter, nDocs, sort, fillFields);\n    } else {\n      // TODO: make this respect fillFields\n      final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        runner.submit(\n                      new SearcherCallableWithSort(lock, this, leafSlices[i], weight, filter, nDocs, hq, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        if (topFieldDocs.totalHits != 0) {\n          totalHits += topFieldDocs.totalHits;\n          maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n        }\n      }\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n    }\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n    \n    if (executor == null) {\n      // use all leaves here!\n      return search (leafContexts, weight, filter, nDocs, sort, fillFields);\n    } else {\n      // TODO: make this respect fillFields\n      final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        runner.submit(\n                      new SearcherCallableWithSort(lock, this, leafSlices[i], weight, filter, nDocs, hq, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        totalHits += topFieldDocs.totalHits;\n        maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n      }\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n    \n    if (executor == null) {\n      // use all leaves here!\n      return search (leafContexts, weight, filter, nDocs, sort, fillFields);\n    } else {\n      // TODO: make this respect fillFields\n      final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        runner.submit(\n                      new SearcherCallableWithSort(lock, this, leafSlices[i], weight, filter, nDocs, hq, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        if (topFieldDocs.totalHits != 0) {\n          totalHits += topFieldDocs.totalHits;\n          maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n        }\n      }\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n    }\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n\n    if (executor == null) {\n      // single thread\n      int limit = reader.maxDoc();\n      if (limit == 0) {\n        limit = 1;\n      }\n      nDocs = Math.min(nDocs, limit);\n\n      TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                             fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n      search(weight, filter, collector);\n      return (TopFieldDocs) collector.topDocs();\n    } else {\n      // TODO: make this respect fillFields\n      final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < subReaders.length; i++) { // search each sub\n        runner.submit(\n                      new MultiSearcherCallableWithSort(lock, subSearchers[i], weight, filter, nDocs, hq, sort, i, docStarts));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        totalHits += topFieldDocs.totalHits;\n        maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n      }\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n    \n    if (executor == null) {\n      // use all leaves here!\n      return search (leafContexts, weight, filter, nDocs, sort, fillFields);\n    } else {\n      // TODO: make this respect fillFields\n      final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        runner.submit(\n                      new SearcherCallableWithSort(lock, this, leafSlices[i], weight, filter, nDocs, hq, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        if (topFieldDocs.totalHits != 0) {\n          totalHits += topFieldDocs.totalHits;\n          maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n        }\n      }\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n    }\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n\n    if (executor == null) {\n      // single thread\n      int limit = reader.maxDoc();\n      if (limit == 0) {\n        limit = 1;\n      }\n      nDocs = Math.min(nDocs, limit);\n\n      TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                             fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n      search(weight, filter, collector);\n      return (TopFieldDocs) collector.topDocs();\n    } else {\n      // TODO: make this respect fillFields\n      final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < subSearchers.length; i++) { // search each sub\n        runner.submit(\n                      new SearcherCallableWithSort(lock, subSearchers[i], weight, filter, nDocs, hq, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        totalHits += topFieldDocs.totalHits;\n        maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n      }\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc83a5aa5437733334022157adbd6c2754fd9fca","date":1298605476,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(IndexReader.AtomicReaderContext[], Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n    \n    if (executor == null) {\n      // use all leaves here!\n      return search (leafContexts, weight, filter, nDocs, sort, fillFields);\n    } else {\n      // TODO: make this respect fillFields\n      final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        runner.submit(\n                      new SearcherCallableWithSort(lock, this, leafSlices[i], weight, filter, nDocs, hq, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        if (topFieldDocs.totalHits != 0) {\n          totalHits += topFieldDocs.totalHits;\n          maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n        }\n      }\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n    }\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n    \n    if (executor == null) {\n      // use all leaves here!\n      return search (leafContexts, weight, filter, nDocs, sort, fillFields);\n    } else {\n      // TODO: make this respect fillFields\n      final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        runner.submit(\n                      new SearcherCallableWithSort(lock, this, leafSlices[i], weight, filter, nDocs, hq, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        if (topFieldDocs.totalHits != 0) {\n          totalHits += topFieldDocs.totalHits;\n          maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n        }\n      }\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2dfd60688653855da1a42cd89a1df4e6738ac079","date":1298618289,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(IndexReader.AtomicReaderContext[], Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n    \n    if (executor == null) {\n      // use all leaves here!\n      return search (leafContexts, weight, filter, nDocs, sort, fillFields);\n    } else {\n      // TODO: make this respect fillFields\n      final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        runner.submit(\n                      new SearcherCallableWithSort(lock, this, leafSlices[i], weight, filter, nDocs, hq, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        if (topFieldDocs.totalHits != 0) {\n          totalHits += topFieldDocs.totalHits;\n          maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n        }\n      }\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n    }\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n    \n    if (executor == null) {\n      // use all leaves here!\n      return search (leafContexts, weight, filter, nDocs, sort, fillFields);\n    } else {\n      // TODO: make this respect fillFields\n      final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        runner.submit(\n                      new SearcherCallableWithSort(lock, this, leafSlices[i], weight, filter, nDocs, hq, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        if (topFieldDocs.totalHits != 0) {\n          totalHits += topFieldDocs.totalHits;\n          maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n        }\n      }\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d868f38e751225153684493f6a89d784835297bd","date":1299017203,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(IndexReader.AtomicReaderContext[], Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n    \n    if (executor == null) {\n      // use all leaves here!\n      return search (leafContexts, weight, filter, nDocs, sort, fillFields);\n    } else {\n      final TopFieldCollector topCollector = TopFieldCollector.create(sort, nDocs,\n                                                                      fillFields,\n                                                                      fieldSortDoTrackScores,\n                                                                      fieldSortDoMaxScore,\n                                                                      false);\n\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        runner.submit(\n                      new SearcherCallableWithSort(lock, this, leafSlices[i], weight, filter, nDocs, topCollector, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        if (topFieldDocs.totalHits != 0) {\n          totalHits += topFieldDocs.totalHits;\n          maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n        }\n      }\n\n      final TopFieldDocs topDocs = (TopFieldDocs) topCollector.topDocs();\n\n      return new TopFieldDocs(totalHits, topDocs.scoreDocs, topDocs.fields, topDocs.getMaxScore());\n    }\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(IndexReader.AtomicReaderContext[], Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n    \n    if (executor == null) {\n      // use all leaves here!\n      return search (leafContexts, weight, filter, nDocs, sort, fillFields);\n    } else {\n      // TODO: make this respect fillFields\n      final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        runner.submit(\n                      new SearcherCallableWithSort(lock, this, leafSlices[i], weight, filter, nDocs, hq, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        if (topFieldDocs.totalHits != 0) {\n          totalHits += topFieldDocs.totalHits;\n          maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n        }\n      }\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n    }\n  }\n\n","bugFix":["30da203d7de68a87a16025523a483a96c24f4291","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(IndexReader.AtomicReaderContext[], Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n    \n    if (executor == null) {\n      // use all leaves here!\n      return search (leafContexts, weight, filter, nDocs, sort, fillFields);\n    } else {\n      final TopFieldCollector topCollector = TopFieldCollector.create(sort, nDocs,\n                                                                      fillFields,\n                                                                      fieldSortDoTrackScores,\n                                                                      fieldSortDoMaxScore,\n                                                                      false);\n\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        runner.submit(\n                      new SearcherCallableWithSort(lock, this, leafSlices[i], weight, filter, nDocs, topCollector, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        if (topFieldDocs.totalHits != 0) {\n          totalHits += topFieldDocs.totalHits;\n          maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n        }\n      }\n\n      final TopFieldDocs topDocs = (TopFieldDocs) topCollector.topDocs();\n\n      return new TopFieldDocs(totalHits, topDocs.scoreDocs, topDocs.fields, topDocs.getMaxScore());\n    }\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n    \n    if (executor == null) {\n      // use all leaves here!\n      return search (leafContexts, weight, filter, nDocs, sort, fillFields);\n    } else {\n      // TODO: make this respect fillFields\n      final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        runner.submit(\n                      new SearcherCallableWithSort(lock, this, leafSlices[i], weight, filter, nDocs, hq, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        if (topFieldDocs.totalHits != 0) {\n          totalHits += topFieldDocs.totalHits;\n          maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n        }\n      }\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(IndexReader.AtomicReaderContext[], Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n    \n    if (executor == null) {\n      // use all leaves here!\n      return search (leafContexts, weight, filter, nDocs, sort, fillFields);\n    } else {\n      final TopFieldCollector topCollector = TopFieldCollector.create(sort, nDocs,\n                                                                      fillFields,\n                                                                      fieldSortDoTrackScores,\n                                                                      fieldSortDoMaxScore,\n                                                                      false);\n\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        runner.submit(\n                      new SearcherCallableWithSort(lock, this, leafSlices[i], weight, filter, nDocs, topCollector, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        if (topFieldDocs.totalHits != 0) {\n          totalHits += topFieldDocs.totalHits;\n          maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n        }\n      }\n\n      final TopFieldDocs topDocs = (TopFieldDocs) topCollector.topDocs();\n\n      return new TopFieldDocs(totalHits, topDocs.scoreDocs, topDocs.fields, topDocs.getMaxScore());\n    }\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(IndexReader.AtomicReaderContext[], Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n    \n    if (executor == null) {\n      // use all leaves here!\n      return search (leafContexts, weight, filter, nDocs, sort, fillFields);\n    } else {\n      // TODO: make this respect fillFields\n      final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        runner.submit(\n                      new SearcherCallableWithSort(lock, this, leafSlices[i], weight, filter, nDocs, hq, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        if (topFieldDocs.totalHits != 0) {\n          totalHits += topFieldDocs.totalHits;\n          maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n        }\n      }\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4aa50b979cd392e00e5bc0f23f78cbd106cb968","date":1308150768,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(IndexReader.AtomicReaderContext[], Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                                Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n    \n    if (executor == null) {\n      // use all leaves here!\n      return search (leafContexts, weight, filter, nDocs, sort, fillFields);\n    } else {\n      final TopFieldCollector topCollector = TopFieldCollector.create(sort, nDocs,\n                                                                      fillFields,\n                                                                      fieldSortDoTrackScores,\n                                                                      fieldSortDoMaxScore,\n                                                                      false);\n\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        runner.submit(\n                      new SearcherCallableWithSort(lock, this, leafSlices[i], weight, filter, nDocs, topCollector, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        if (topFieldDocs.totalHits != 0) {\n          totalHits += topFieldDocs.totalHits;\n          maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n        }\n      }\n\n      final TopFieldDocs topDocs = (TopFieldDocs) topCollector.topDocs();\n\n      return new TopFieldDocs(totalHits, topDocs.scoreDocs, topDocs.fields, topDocs.getMaxScore());\n    }\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(IndexReader.AtomicReaderContext[], Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n    \n    if (executor == null) {\n      // use all leaves here!\n      return search (leafContexts, weight, filter, nDocs, sort, fillFields);\n    } else {\n      final TopFieldCollector topCollector = TopFieldCollector.create(sort, nDocs,\n                                                                      fillFields,\n                                                                      fieldSortDoTrackScores,\n                                                                      fieldSortDoMaxScore,\n                                                                      false);\n\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        runner.submit(\n                      new SearcherCallableWithSort(lock, this, leafSlices[i], weight, filter, nDocs, topCollector, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        if (topFieldDocs.totalHits != 0) {\n          totalHits += topFieldDocs.totalHits;\n          maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n        }\n      }\n\n      final TopFieldDocs topDocs = (TopFieldDocs) topCollector.topDocs();\n\n      return new TopFieldDocs(totalHits, topDocs.scoreDocs, topDocs.fields, topDocs.getMaxScore());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","date":1308291005,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(IndexReader.AtomicReaderContext[], Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                                Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n    \n    if (executor == null) {\n      // use all leaves here!\n      return search (leafContexts, weight, filter, nDocs, sort, fillFields);\n    } else {\n      final TopFieldCollector topCollector = TopFieldCollector.create(sort, nDocs,\n                                                                      fillFields,\n                                                                      fieldSortDoTrackScores,\n                                                                      fieldSortDoMaxScore,\n                                                                      false);\n\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        runner.submit(\n                      new SearcherCallableWithSort(lock, this, leafSlices[i], weight, filter, nDocs, topCollector, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        if (topFieldDocs.totalHits != 0) {\n          totalHits += topFieldDocs.totalHits;\n          maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n        }\n      }\n\n      final TopFieldDocs topDocs = (TopFieldDocs) topCollector.topDocs();\n\n      return new TopFieldDocs(totalHits, topDocs.scoreDocs, topDocs.fields, topDocs.getMaxScore());\n    }\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(IndexReader.AtomicReaderContext[], Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n    \n    if (executor == null) {\n      // use all leaves here!\n      return search (leafContexts, weight, filter, nDocs, sort, fillFields);\n    } else {\n      final TopFieldCollector topCollector = TopFieldCollector.create(sort, nDocs,\n                                                                      fillFields,\n                                                                      fieldSortDoTrackScores,\n                                                                      fieldSortDoMaxScore,\n                                                                      false);\n\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        runner.submit(\n                      new SearcherCallableWithSort(lock, this, leafSlices[i], weight, filter, nDocs, topCollector, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        if (topFieldDocs.totalHits != 0) {\n          totalHits += topFieldDocs.totalHits;\n          maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n        }\n      }\n\n      final TopFieldDocs topDocs = (TopFieldDocs) topCollector.topDocs();\n\n      return new TopFieldDocs(totalHits, topDocs.scoreDocs, topDocs.fields, topDocs.getMaxScore());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(IndexReader.AtomicReaderContext[], Weight,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, int nDocs,\n                                Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n    \n    if (executor == null) {\n      // use all leaves here!\n      return search (leafContexts, weight, nDocs, sort, fillFields);\n    } else {\n      final TopFieldCollector topCollector = TopFieldCollector.create(sort, nDocs,\n                                                                      fillFields,\n                                                                      fieldSortDoTrackScores,\n                                                                      fieldSortDoMaxScore,\n                                                                      false);\n\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        runner.submit(\n                      new SearcherCallableWithSort(lock, this, leafSlices[i], weight, nDocs, topCollector, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        if (topFieldDocs.totalHits != 0) {\n          totalHits += topFieldDocs.totalHits;\n          maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n        }\n      }\n\n      final TopFieldDocs topDocs = (TopFieldDocs) topCollector.topDocs();\n\n      return new TopFieldDocs(totalHits, topDocs.scoreDocs, topDocs.fields, topDocs.getMaxScore());\n    }\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(IndexReader.AtomicReaderContext[], Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                                Sort sort, boolean fillFields)\n      throws IOException {\n\n    if (sort == null) throw new NullPointerException();\n    \n    if (executor == null) {\n      // use all leaves here!\n      return search (leafContexts, weight, filter, nDocs, sort, fillFields);\n    } else {\n      final TopFieldCollector topCollector = TopFieldCollector.create(sort, nDocs,\n                                                                      fillFields,\n                                                                      fieldSortDoTrackScores,\n                                                                      fieldSortDoMaxScore,\n                                                                      false);\n\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        runner.submit(\n                      new SearcherCallableWithSort(lock, this, leafSlices[i], weight, filter, nDocs, topCollector, sort));\n      }\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopFieldDocs topFieldDocs : runner) {\n        if (topFieldDocs.totalHits != 0) {\n          totalHits += topFieldDocs.totalHits;\n          maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());\n        }\n      }\n\n      final TopFieldDocs topDocs = (TopFieldDocs) topCollector.topDocs();\n\n      return new TopFieldDocs(totalHits, topDocs.scoreDocs, topDocs.fields, topDocs.getMaxScore());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["cbf497fc92342be81ff184a144dfa7c96264116b","259055feeba9afa10e21ab63032f3778bb1802f1"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["d868f38e751225153684493f6a89d784835297bd","d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["2dfd60688653855da1a42cd89a1df4e6738ac079","d868f38e751225153684493f6a89d784835297bd"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","c9f738d4503df21769bdbea97432f90df1d78747"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["41c254de87d45aece543872ed3ed365ab7d3ad7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"41c254de87d45aece543872ed3ed365ab7d3ad7f":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"259055feeba9afa10e21ab63032f3778bb1802f1":["cbf497fc92342be81ff184a144dfa7c96264116b"],"2dfd60688653855da1a42cd89a1df4e6738ac079":["bde51b089eb7f86171eb3406e38a274743f9b7ac","fc83a5aa5437733334022157adbd6c2754fd9fca"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","c9f738d4503df21769bdbea97432f90df1d78747"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fc83a5aa5437733334022157adbd6c2754fd9fca":["c9f738d4503df21769bdbea97432f90df1d78747"],"70ad682703b8585f5d0a637efec044d57ec05efb":["3bb13258feba31ab676502787ab2e1779f129b7a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"c9f738d4503df21769bdbea97432f90df1d78747":["30da203d7de68a87a16025523a483a96c24f4291"],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["d868f38e751225153684493f6a89d784835297bd"],"d868f38e751225153684493f6a89d784835297bd":["fc83a5aa5437733334022157adbd6c2754fd9fca"],"cbf497fc92342be81ff184a144dfa7c96264116b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["259055feeba9afa10e21ab63032f3778bb1802f1"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","d868f38e751225153684493f6a89d784835297bd"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"30da203d7de68a87a16025523a483a96c24f4291":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"3bb13258feba31ab676502787ab2e1779f129b7a":["cbf497fc92342be81ff184a144dfa7c96264116b","259055feeba9afa10e21ab63032f3778bb1802f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6620df8541b174097b1133a4fc370adb2e570524"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":[],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"259055feeba9afa10e21ab63032f3778bb1802f1":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","3bb13258feba31ab676502787ab2e1779f129b7a"],"41c254de87d45aece543872ed3ed365ab7d3ad7f":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"2dfd60688653855da1a42cd89a1df4e6738ac079":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["2dfd60688653855da1a42cd89a1df4e6738ac079"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cbf497fc92342be81ff184a144dfa7c96264116b"],"fc83a5aa5437733334022157adbd6c2754fd9fca":["2dfd60688653855da1a42cd89a1df4e6738ac079","d868f38e751225153684493f6a89d784835297bd"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"c9f738d4503df21769bdbea97432f90df1d78747":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","fc83a5aa5437733334022157adbd6c2754fd9fca"],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["6620df8541b174097b1133a4fc370adb2e570524","0a2903ea38ae3e636b93a08c52a5e37ae939cf6b"],"d868f38e751225153684493f6a89d784835297bd":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d4aa50b979cd392e00e5bc0f23f78cbd106cb968","d619839baa8ce5503e496b94a9e42ad6f079293f"],"cbf497fc92342be81ff184a144dfa7c96264116b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","259055feeba9afa10e21ab63032f3778bb1802f1","3bb13258feba31ab676502787ab2e1779f129b7a"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["41c254de87d45aece543872ed3ed365ab7d3ad7f","70ad682703b8585f5d0a637efec044d57ec05efb"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["30da203d7de68a87a16025523a483a96c24f4291","868da859b43505d9d2a023bfeae6dd0c795f5295"],"30da203d7de68a87a16025523a483a96c24f4291":["c9f738d4503df21769bdbea97432f90df1d78747"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"3bb13258feba31ab676502787ab2e1779f129b7a":["70ad682703b8585f5d0a637efec044d57ec05efb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}