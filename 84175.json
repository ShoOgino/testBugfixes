{"path":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestAddIndexesWithThreads().mjava","commits":[{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestAddIndexesWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void xxxtestAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 12;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2);\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 12;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2);\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testAddIndexesWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 12;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2);\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void xxxtestAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 12;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2);\n    assertEquals(100+NUM_COPY*(3*NUM_ITER/4)*c.NUM_THREADS*c.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}