{"path":"src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","commits":[{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","pathOld":"/dev/null","sourceNew":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","sourceNew":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","sourceNew":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","sourceNew":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","sourceNew":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","sourceNew":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","sourceNew":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}