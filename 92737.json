{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#Lucene40PostingsFormat(int,int).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#Lucene40PostingsFormat(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#Lucene40PostingsFormat(int,int).mjava","sourceNew":"  /** Creates {@code Lucene40PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  private Lucene40PostingsFormat(int minBlockSize, int maxBlockSize) {\n    super(\"Lucene40\");\n    this.minBlockSize = minBlockSize;\n    assert minBlockSize > 1;\n    this.maxBlockSize = maxBlockSize;\n  }\n\n","sourceOld":"  /** Creates {@code Lucene40PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  private Lucene40PostingsFormat(int minBlockSize, int maxBlockSize) {\n    super(\"Lucene40\");\n    this.minBlockSize = minBlockSize;\n    assert minBlockSize > 1;\n    this.maxBlockSize = maxBlockSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#Lucene40PostingsFormat(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#Lucene40PostingsFormat(int,int).mjava","sourceNew":"  /** Creates {@code Lucene40PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  private Lucene40PostingsFormat(int minBlockSize, int maxBlockSize) {\n    super(\"Lucene40\");\n    this.minBlockSize = minBlockSize;\n    assert minBlockSize > 1;\n    this.maxBlockSize = maxBlockSize;\n  }\n\n","sourceOld":"  /** Creates {@code Lucene40PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  private Lucene40PostingsFormat(int minBlockSize, int maxBlockSize) {\n    super(\"Lucene40\");\n    this.minBlockSize = minBlockSize;\n    assert minBlockSize > 1;\n    this.maxBlockSize = maxBlockSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ac4bff3307e88928bf48cd1a283ff7da1f82464","date":1411914960,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#Lucene40PostingsFormat(int,int).mjava","sourceNew":null,"sourceOld":"  /** Creates {@code Lucene40PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  private Lucene40PostingsFormat(int minBlockSize, int maxBlockSize) {\n    super(\"Lucene40\");\n    this.minBlockSize = minBlockSize;\n    assert minBlockSize > 1;\n    this.maxBlockSize = maxBlockSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#Lucene40PostingsFormat(int,int).mjava","sourceNew":null,"sourceOld":"  /** Creates {@code Lucene40PostingsFormat} with custom\n   *  values for {@code minBlockSize} and {@code\n   *  maxBlockSize} passed to block terms dictionary.\n   *  @see BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int) */\n  private Lucene40PostingsFormat(int minBlockSize, int maxBlockSize) {\n    super(\"Lucene40\");\n    this.minBlockSize = minBlockSize;\n    assert minBlockSize > 1;\n    this.maxBlockSize = maxBlockSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9bb9a29a5e71a90295f175df8919802993142c9a":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","6ac4bff3307e88928bf48cd1a283ff7da1f82464"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6ac4bff3307e88928bf48cd1a283ff7da1f82464":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"6ac4bff3307e88928bf48cd1a283ff7da1f82464":["9bb9a29a5e71a90295f175df8919802993142c9a"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["9bb9a29a5e71a90295f175df8919802993142c9a","6ac4bff3307e88928bf48cd1a283ff7da1f82464"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}