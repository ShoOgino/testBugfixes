{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8","date":1328775259,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = topReaderContext.leaves();\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = topReaderContext.leaves();\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = topReaderContext.leaves();\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = topReaderContext.leaves();\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = topReaderContext.leaves();\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = topReaderContext.leaves();\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random().nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = topReaderContext.leaves();\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = topReaderContext.leaves();\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random().nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = topReaderContext.leaves();\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random().nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      for (AtomicReaderContext atomicReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random().nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = topReaderContext.leaves();\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random().nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48acd84ae6a6d904e420587db751f06375ca6ff8","date":1342130191,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      for (AtomicReaderContext atomicReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      for (AtomicReaderContext atomicReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random().nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      for (AtomicReaderContext atomicReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      for (AtomicReaderContext atomicReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random().nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      for (AtomicReaderContext atomicReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      for (AtomicReaderContext atomicReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random().nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"211b1506e56f7860762fbd4698f6d1d1b57f672c","date":1344976996,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getContext();\n      for (AtomicReaderContext atomicReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      for (AtomicReaderContext atomicReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getContext();\n      for (AtomicReaderContext atomicReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      for (AtomicReaderContext atomicReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getContext();\n      for (AtomicReaderContext atomicReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      for (AtomicReaderContext atomicReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      for (AtomicReaderContext atomicReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getContext();\n      for (AtomicReaderContext atomicReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getContext();\n      for (AtomicReaderContext atomicReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      for (AtomicReaderContext atomicReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getContext();\n      for (AtomicReaderContext atomicReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getContext();\n      for (AtomicReaderContext atomicReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getContext();\n      for (AtomicReaderContext atomicReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getContext();\n      for (AtomicReaderContext atomicReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getContext();\n      for (AtomicReaderContext atomicReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getContext();\n      for (AtomicReaderContext atomicReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getContext();\n      for (AtomicReaderContext atomicReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getContext();\n      for (AtomicReaderContext atomicReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getContext();\n      for (LeafReaderContext leafReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            leafReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = leafReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[leafReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + leafReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getContext();\n      for (AtomicReaderContext atomicReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getContext();\n      for (LeafReaderContext leafReaderContext : topReaderContext.leaves()) {\n        PostingsEnum docsAndPosEnum = getDocsAndPositions(\n            leafReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = leafReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[leafReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + leafReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getContext();\n      for (LeafReaderContext leafReaderContext : topReaderContext.leaves()) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            leafReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = leafReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[leafReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + leafReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getContext();\n      for (LeafReaderContext leafReaderContext : topReaderContext.leaves()) {\n        PostingsEnum docsAndPosEnum = getDocsAndPositions(\n            leafReaderContext.reader(), bytes);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = leafReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[leafReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + leafReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random().nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random().nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getContext();\n      for (LeafReaderContext leafReaderContext : topReaderContext.leaves()) {\n        PostingsEnum docsAndPosEnum = getDocsAndPositions(\n            leafReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = leafReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random().nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random().nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[leafReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random().nextInt(20) == 0 ? pos.length\n              - random().nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + leafReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random().nextInt(10) == 0) { // once is a while advance\n            if (docsAndPosEnum.advance(docID + 1 + random().nextInt((maxDoc - docID))) == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["211b1506e56f7860762fbd4698f6d1d1b57f672c"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["fe33227f6805edab2036cbb80645cc4e2d1fa424"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"48acd84ae6a6d904e420587db751f06375ca6ff8":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["48acd84ae6a6d904e420587db751f06375ca6ff8"],"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["aba371508186796cc6151d8223a5b4e16d02e26e","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"51f5280f31484820499077f41fcdfe92d527d9dc":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["51f5280f31484820499077f41fcdfe92d527d9dc"],"aba371508186796cc6151d8223a5b4e16d02e26e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","48acd84ae6a6d904e420587db751f06375ca6ff8"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","48acd84ae6a6d904e420587db751f06375ca6ff8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["48acd84ae6a6d904e420587db751f06375ca6ff8","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"48acd84ae6a6d904e420587db751f06375ca6ff8":["211b1506e56f7860762fbd4698f6d1d1b57f672c","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["51f5280f31484820499077f41fcdfe92d527d9dc"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":["c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}