{"path":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReaderIterator#BlockPackedReaderIterator(DataInput,int,int,long).mjava","commits":[{"id":"37b84753dc1f66eba4973779932885fe42cde001","date":1358812051,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReaderIterator#BlockPackedReaderIterator(DataInput,int,int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#BlockPackedReader(DataInput,int,int,long).mjava","sourceNew":"  /** Sole constructor.\n   * @param blockSize the number of values of a block, must be equal to the\n   *                  block size of the {@link BlockPackedWriter} which has\n   *                  been used to write the stream\n   */\n  public BlockPackedReaderIterator(DataInput in, int packedIntsVersion, int blockSize, long valueCount) {\n    checkBlockSize(blockSize);\n    this.packedIntsVersion = packedIntsVersion;\n    this.blockSize = blockSize;\n    this.values = new long[blockSize];\n    this.valuesRef = new LongsRef(this.values, 0, 0);\n    reset(in, valueCount);\n  }\n\n","sourceOld":"  /** Sole constructor.\n   * @param blockSize the number of values of a block, must be equal to the\n   *                  block size of the {@link BlockPackedWriter} which has\n   *                  been used to write the stream\n   */\n  public BlockPackedReader(DataInput in, int packedIntsVersion, int blockSize, long valueCount) {\n    checkBlockSize(blockSize);\n    this.packedIntsVersion = packedIntsVersion;\n    this.blockSize = blockSize;\n    this.values = new long[blockSize];\n    this.valuesRef = new LongsRef(this.values, 0, 0);\n    reset(in, valueCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReaderIterator#BlockPackedReaderIterator(DataInput,int,int,long).mjava","pathOld":"/dev/null","sourceNew":"  /** Sole constructor.\n   * @param blockSize the number of values of a block, must be equal to the\n   *                  block size of the {@link BlockPackedWriter} which has\n   *                  been used to write the stream\n   */\n  public BlockPackedReaderIterator(DataInput in, int packedIntsVersion, int blockSize, long valueCount) {\n    checkBlockSize(blockSize);\n    this.packedIntsVersion = packedIntsVersion;\n    this.blockSize = blockSize;\n    this.values = new long[blockSize];\n    this.valuesRef = new LongsRef(this.values, 0, 0);\n    reset(in, valueCount);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f375a9203c9124207e176f4dc59bd8e832b239a0","date":1370270173,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReaderIterator#BlockPackedReaderIterator(DataInput,int,int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReaderIterator#BlockPackedReaderIterator(DataInput,int,int,long).mjava","sourceNew":"  /** Sole constructor.\n   * @param blockSize the number of values of a block, must be equal to the\n   *                  block size of the {@link BlockPackedWriter} which has\n   *                  been used to write the stream\n   */\n  public BlockPackedReaderIterator(DataInput in, int packedIntsVersion, int blockSize, long valueCount) {\n    checkBlockSize(blockSize, MIN_BLOCK_SIZE, MAX_BLOCK_SIZE);\n    this.packedIntsVersion = packedIntsVersion;\n    this.blockSize = blockSize;\n    this.values = new long[blockSize];\n    this.valuesRef = new LongsRef(this.values, 0, 0);\n    reset(in, valueCount);\n  }\n\n","sourceOld":"  /** Sole constructor.\n   * @param blockSize the number of values of a block, must be equal to the\n   *                  block size of the {@link BlockPackedWriter} which has\n   *                  been used to write the stream\n   */\n  public BlockPackedReaderIterator(DataInput in, int packedIntsVersion, int blockSize, long valueCount) {\n    checkBlockSize(blockSize);\n    this.packedIntsVersion = packedIntsVersion;\n    this.blockSize = blockSize;\n    this.values = new long[blockSize];\n    this.valuesRef = new LongsRef(this.values, 0, 0);\n    reset(in, valueCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","37b84753dc1f66eba4973779932885fe42cde001"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"37b84753dc1f66eba4973779932885fe42cde001":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f375a9203c9124207e176f4dc59bd8e832b239a0":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f375a9203c9124207e176f4dc59bd8e832b239a0"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["f375a9203c9124207e176f4dc59bd8e832b239a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","37b84753dc1f66eba4973779932885fe42cde001"],"37b84753dc1f66eba4973779932885fe42cde001":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"f375a9203c9124207e176f4dc59bd8e832b239a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}