{"path":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","commits":[{"id":"8d47f68d60cbff5718136b945ba8c55982342f38","date":1285583375,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","pathOld":"/dev/null","sourceNew":"    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      if (current != null) {\n        final int cmp = current.compareTo(text);\n        if (cmp == 0) {\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          ended = false;\n          in.seek(fieldStart);\n        }\n      } else {\n        ended = false;\n        in.seek(fieldStart);\n      }\n\n      // Naive!!  This just scans... would be better to do\n      // up-front scan to build in-RAM index\n      BytesRef b;\n      while((b = next()) != null) {\n        final int cmp = b.compareTo(text);\n        if (cmp == 0) {\n          ended = false;\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          ended = false;\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n      current = null;\n      ended = true;\n      return SeekStatus.END;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02f9424edb9eccc558626693e4a4cd43f8ce2622","date":1288987640,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      \n      final SortedMap<BytesRef,TermData> tailMap = allTerms.tailMap(text);\n\n      if (tailMap.isEmpty()) {\n        current = null;\n        return SeekStatus.END;\n      } else {\n        current = tailMap.firstKey();\n        final TermData td = tailMap.get(current);\n        docsStart = td.docsStart;\n        docFreq = td.docFreq;\n        iter = tailMap.entrySet().iterator();\n        assert iter.hasNext();\n        iter.next();\n        if (current.equals(text)) {\n          return SeekStatus.FOUND;\n        } else {\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n\n      /*\n      if (current != null) {\n        final int cmp = current.compareTo(text);\n        if (cmp == 0) {\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          ended = false;\n          in.seek(fieldStart);\n        }\n      } else {\n        ended = false;\n        in.seek(fieldStart);\n      }\n\n      // Naive!!  This just scans... would be better to do\n      // up-front scan to build in-RAM index\n      BytesRef b;\n      while((b = next()) != null) {\n        final int cmp = b.compareTo(text);\n        if (cmp == 0) {\n          ended = false;\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          ended = false;\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n      current = null;\n      ended = true;\n      return SeekStatus.END;\n      */\n    }\n\n","sourceOld":"    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      if (current != null) {\n        final int cmp = current.compareTo(text);\n        if (cmp == 0) {\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          ended = false;\n          in.seek(fieldStart);\n        }\n      } else {\n        ended = false;\n        in.seek(fieldStart);\n      }\n\n      // Naive!!  This just scans... would be better to do\n      // up-front scan to build in-RAM index\n      BytesRef b;\n      while((b = next()) != null) {\n        final int cmp = b.compareTo(text);\n        if (cmp == 0) {\n          ended = false;\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          ended = false;\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n      current = null;\n      ended = true;\n      return SeekStatus.END;\n    }\n\n","bugFix":null,"bugIntro":["f7d6f751de577f829f8bdc897d050c728075723a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7d6f751de577f829f8bdc897d050c728075723a","date":1288988093,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      if (current != null) {\n        final int cmp = current.compareTo(text);\n        if (cmp == 0) {\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          ended = false;\n          in.seek(fieldStart);\n        }\n      } else {\n        ended = false;\n        in.seek(fieldStart);\n      }\n\n      // Naive!!  This just scans... would be better to do\n      // up-front scan to build in-RAM index\n      BytesRef b;\n      while((b = next()) != null) {\n        final int cmp = b.compareTo(text);\n        if (cmp == 0) {\n          ended = false;\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          ended = false;\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n      current = null;\n      ended = true;\n      return SeekStatus.END;\n    }\n\n","sourceOld":"    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      \n      final SortedMap<BytesRef,TermData> tailMap = allTerms.tailMap(text);\n\n      if (tailMap.isEmpty()) {\n        current = null;\n        return SeekStatus.END;\n      } else {\n        current = tailMap.firstKey();\n        final TermData td = tailMap.get(current);\n        docsStart = td.docsStart;\n        docFreq = td.docFreq;\n        iter = tailMap.entrySet().iterator();\n        assert iter.hasNext();\n        iter.next();\n        if (current.equals(text)) {\n          return SeekStatus.FOUND;\n        } else {\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n\n      /*\n      if (current != null) {\n        final int cmp = current.compareTo(text);\n        if (cmp == 0) {\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          ended = false;\n          in.seek(fieldStart);\n        }\n      } else {\n        ended = false;\n        in.seek(fieldStart);\n      }\n\n      // Naive!!  This just scans... would be better to do\n      // up-front scan to build in-RAM index\n      BytesRef b;\n      while((b = next()) != null) {\n        final int cmp = b.compareTo(text);\n        if (cmp == 0) {\n          ended = false;\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          ended = false;\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n      current = null;\n      ended = true;\n      return SeekStatus.END;\n      */\n    }\n\n","bugFix":["02f9424edb9eccc558626693e4a4cd43f8ce2622"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b2d719eaefc9684ff00084555da5f61a7f32aef","date":1288993916,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      \n      final SortedMap<BytesRef,TermData> tailMap = allTerms.tailMap(text);\n\n      if (tailMap.isEmpty()) {\n        current = null;\n        return SeekStatus.END;\n      } else {\n        current = tailMap.firstKey();\n        final TermData td = tailMap.get(current);\n        docsStart = td.docsStart;\n        docFreq = td.docFreq;\n        iter = tailMap.entrySet().iterator();\n        assert iter.hasNext();\n        iter.next();\n        if (current.equals(text)) {\n          return SeekStatus.FOUND;\n        } else {\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n\n      /*\n      if (current != null) {\n        final int cmp = current.compareTo(text);\n        if (cmp == 0) {\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          ended = false;\n          in.seek(fieldStart);\n        }\n      } else {\n        ended = false;\n        in.seek(fieldStart);\n      }\n\n      // Naive!!  This just scans... would be better to do\n      // up-front scan to build in-RAM index\n      BytesRef b;\n      while((b = next()) != null) {\n        final int cmp = b.compareTo(text);\n        if (cmp == 0) {\n          ended = false;\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          ended = false;\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n      current = null;\n      ended = true;\n      return SeekStatus.END;\n      */\n    }\n\n","sourceOld":"    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      if (current != null) {\n        final int cmp = current.compareTo(text);\n        if (cmp == 0) {\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          ended = false;\n          in.seek(fieldStart);\n        }\n      } else {\n        ended = false;\n        in.seek(fieldStart);\n      }\n\n      // Naive!!  This just scans... would be better to do\n      // up-front scan to build in-RAM index\n      BytesRef b;\n      while((b = next()) != null) {\n        final int cmp = b.compareTo(text);\n        if (cmp == 0) {\n          ended = false;\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          ended = false;\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n      current = null;\n      ended = true;\n      return SeekStatus.END;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      \n      final SortedMap<BytesRef,TermData> tailMap = allTerms.tailMap(text);\n\n      if (tailMap.isEmpty()) {\n        current = null;\n        return SeekStatus.END;\n      } else {\n        current = tailMap.firstKey();\n        final TermData td = tailMap.get(current);\n        docsStart = td.docsStart;\n        docFreq = td.docFreq;\n        iter = tailMap.entrySet().iterator();\n        assert iter.hasNext();\n        iter.next();\n        if (current.equals(text)) {\n          return SeekStatus.FOUND;\n        } else {\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n\n      /*\n      if (current != null) {\n        final int cmp = current.compareTo(text);\n        if (cmp == 0) {\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          ended = false;\n          in.seek(fieldStart);\n        }\n      } else {\n        ended = false;\n        in.seek(fieldStart);\n      }\n\n      // Naive!!  This just scans... would be better to do\n      // up-front scan to build in-RAM index\n      BytesRef b;\n      while((b = next()) != null) {\n        final int cmp = b.compareTo(text);\n        if (cmp == 0) {\n          ended = false;\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          ended = false;\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n      current = null;\n      ended = true;\n      return SeekStatus.END;\n      */\n    }\n\n","sourceOld":"    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      if (current != null) {\n        final int cmp = current.compareTo(text);\n        if (cmp == 0) {\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          ended = false;\n          in.seek(fieldStart);\n        }\n      } else {\n        ended = false;\n        in.seek(fieldStart);\n      }\n\n      // Naive!!  This just scans... would be better to do\n      // up-front scan to build in-RAM index\n      BytesRef b;\n      while((b = next()) != null) {\n        final int cmp = b.compareTo(text);\n        if (cmp == 0) {\n          ended = false;\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          ended = false;\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n      current = null;\n      ended = true;\n      return SeekStatus.END;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4769bdea5a853f1841c485bc1fd9d79cb7022fc","date":1292168168,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n\n      fstEnum.reset();\n      //System.out.println(\"seek to text=\" + text.utf8ToString());\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,Long>> result = fstEnum.advance(text);\n      if (result == null) {\n        //System.out.println(\"  end\");\n        return SeekStatus.END;\n      } else {\n        //System.out.println(\"  got text=\" + term.utf8ToString());\n        PairOutputs.Pair<Long,Long> pair = result.output;\n        docsStart = pair.output1;\n        docFreq = pair.output2.intValue();\n\n        if (result.input.equals(text)) {\n          //System.out.println(\"  match docsStart=\" + docsStart);\n          return SeekStatus.FOUND;\n        } else {\n          //System.out.println(\"  not match docsStart=\" + docsStart);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","sourceOld":"    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      \n      final SortedMap<BytesRef,TermData> tailMap = allTerms.tailMap(text);\n\n      if (tailMap.isEmpty()) {\n        current = null;\n        return SeekStatus.END;\n      } else {\n        current = tailMap.firstKey();\n        final TermData td = tailMap.get(current);\n        docsStart = td.docsStart;\n        docFreq = td.docFreq;\n        iter = tailMap.entrySet().iterator();\n        assert iter.hasNext();\n        iter.next();\n        if (current.equals(text)) {\n          return SeekStatus.FOUND;\n        } else {\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n\n      /*\n      if (current != null) {\n        final int cmp = current.compareTo(text);\n        if (cmp == 0) {\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          ended = false;\n          in.seek(fieldStart);\n        }\n      } else {\n        ended = false;\n        in.seek(fieldStart);\n      }\n\n      // Naive!!  This just scans... would be better to do\n      // up-front scan to build in-RAM index\n      BytesRef b;\n      while((b = next()) != null) {\n        final int cmp = b.compareTo(text);\n        if (cmp == 0) {\n          ended = false;\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          ended = false;\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n      current = null;\n      ended = true;\n      return SeekStatus.END;\n      */\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n\n      fstEnum.reset();\n      //System.out.println(\"seek to text=\" + text.utf8ToString());\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,Long>> result = fstEnum.advance(text);\n      if (result == null) {\n        //System.out.println(\"  end\");\n        return SeekStatus.END;\n      } else {\n        //System.out.println(\"  got text=\" + term.utf8ToString());\n        PairOutputs.Pair<Long,Long> pair = result.output;\n        docsStart = pair.output1;\n        docFreq = pair.output2.intValue();\n\n        if (result.input.equals(text)) {\n          //System.out.println(\"  match docsStart=\" + docsStart);\n          return SeekStatus.FOUND;\n        } else {\n          //System.out.println(\"  not match docsStart=\" + docsStart);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","sourceOld":"    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      \n      final SortedMap<BytesRef,TermData> tailMap = allTerms.tailMap(text);\n\n      if (tailMap.isEmpty()) {\n        current = null;\n        return SeekStatus.END;\n      } else {\n        current = tailMap.firstKey();\n        final TermData td = tailMap.get(current);\n        docsStart = td.docsStart;\n        docFreq = td.docFreq;\n        iter = tailMap.entrySet().iterator();\n        assert iter.hasNext();\n        iter.next();\n        if (current.equals(text)) {\n          return SeekStatus.FOUND;\n        } else {\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n\n      /*\n      if (current != null) {\n        final int cmp = current.compareTo(text);\n        if (cmp == 0) {\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          ended = false;\n          in.seek(fieldStart);\n        }\n      } else {\n        ended = false;\n        in.seek(fieldStart);\n      }\n\n      // Naive!!  This just scans... would be better to do\n      // up-front scan to build in-RAM index\n      BytesRef b;\n      while((b = next()) != null) {\n        final int cmp = b.compareTo(text);\n        if (cmp == 0) {\n          ended = false;\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          ended = false;\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n      current = null;\n      ended = true;\n      return SeekStatus.END;\n      */\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","pathOld":"/dev/null","sourceNew":"    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n\n      fstEnum.reset();\n      //System.out.println(\"seek to text=\" + text.utf8ToString());\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,Long>> result = fstEnum.advance(text);\n      if (result == null) {\n        //System.out.println(\"  end\");\n        return SeekStatus.END;\n      } else {\n        //System.out.println(\"  got text=\" + term.utf8ToString());\n        PairOutputs.Pair<Long,Long> pair = result.output;\n        docsStart = pair.output1;\n        docFreq = pair.output2.intValue();\n\n        if (result.input.equals(text)) {\n          //System.out.println(\"  match docsStart=\" + docsStart);\n          return SeekStatus.FOUND;\n        } else {\n          //System.out.println(\"  not match docsStart=\" + docsStart);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n\n      //System.out.println(\"seek to text=\" + text.utf8ToString());\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,Long>> result = fstEnum.seekCeil(text);\n      if (result == null) {\n        //System.out.println(\"  end\");\n        return SeekStatus.END;\n      } else {\n        //System.out.println(\"  got text=\" + term.utf8ToString());\n        PairOutputs.Pair<Long,Long> pair = result.output;\n        docsStart = pair.output1;\n        docFreq = pair.output2.intValue();\n\n        if (result.input.equals(text)) {\n          //System.out.println(\"  match docsStart=\" + docsStart);\n          return SeekStatus.FOUND;\n        } else {\n          //System.out.println(\"  not match docsStart=\" + docsStart);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","sourceOld":"    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n\n      fstEnum.reset();\n      //System.out.println(\"seek to text=\" + text.utf8ToString());\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,Long>> result = fstEnum.advance(text);\n      if (result == null) {\n        //System.out.println(\"  end\");\n        return SeekStatus.END;\n      } else {\n        //System.out.println(\"  got text=\" + term.utf8ToString());\n        PairOutputs.Pair<Long,Long> pair = result.output;\n        docsStart = pair.output1;\n        docFreq = pair.output2.intValue();\n\n        if (result.input.equals(text)) {\n          //System.out.println(\"  match docsStart=\" + docsStart);\n          return SeekStatus.FOUND;\n        } else {\n          //System.out.println(\"  not match docsStart=\" + docsStart);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n\n      //System.out.println(\"seek to text=\" + text.utf8ToString());\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,Long>> result = fstEnum.seekCeil(text);\n      if (result == null) {\n        //System.out.println(\"  end\");\n        return SeekStatus.END;\n      } else {\n        //System.out.println(\"  got text=\" + term.utf8ToString());\n        PairOutputs.Pair<Long,Long> pair = result.output;\n        docsStart = pair.output1;\n        docFreq = pair.output2.intValue();\n\n        if (result.input.equals(text)) {\n          //System.out.println(\"  match docsStart=\" + docsStart);\n          return SeekStatus.FOUND;\n        } else {\n          //System.out.println(\"  not match docsStart=\" + docsStart);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","sourceOld":"    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n\n      fstEnum.reset();\n      //System.out.println(\"seek to text=\" + text.utf8ToString());\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,Long>> result = fstEnum.advance(text);\n      if (result == null) {\n        //System.out.println(\"  end\");\n        return SeekStatus.END;\n      } else {\n        //System.out.println(\"  got text=\" + term.utf8ToString());\n        PairOutputs.Pair<Long,Long> pair = result.output;\n        docsStart = pair.output1;\n        docFreq = pair.output2.intValue();\n\n        if (result.input.equals(text)) {\n          //System.out.println(\"  match docsStart=\" + docsStart);\n          return SeekStatus.FOUND;\n        } else {\n          //System.out.println(\"  not match docsStart=\" + docsStart);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n\n      //System.out.println(\"seek to text=\" + text.utf8ToString());\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,Long>> result = fstEnum.seekCeil(text);\n      if (result == null) {\n        //System.out.println(\"  end\");\n        return SeekStatus.END;\n      } else {\n        //System.out.println(\"  got text=\" + term.utf8ToString());\n        PairOutputs.Pair<Long,Long> pair = result.output;\n        docsStart = pair.output1;\n        docFreq = pair.output2.intValue();\n\n        if (result.input.equals(text)) {\n          //System.out.println(\"  match docsStart=\" + docsStart);\n          return SeekStatus.FOUND;\n        } else {\n          //System.out.println(\"  not match docsStart=\" + docsStart);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","sourceOld":"    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n\n      fstEnum.reset();\n      //System.out.println(\"seek to text=\" + text.utf8ToString());\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,Long>> result = fstEnum.advance(text);\n      if (result == null) {\n        //System.out.println(\"  end\");\n        return SeekStatus.END;\n      } else {\n        //System.out.println(\"  got text=\" + term.utf8ToString());\n        PairOutputs.Pair<Long,Long> pair = result.output;\n        docsStart = pair.output1;\n        docFreq = pair.output2.intValue();\n\n        if (result.input.equals(text)) {\n          //System.out.println(\"  match docsStart=\" + docsStart);\n          return SeekStatus.FOUND;\n        } else {\n          //System.out.println(\"  not match docsStart=\" + docsStart);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ecd298fdc085e7eba27afa7fae58df1ba1a2808","date":1295102557,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n\n      //System.out.println(\"seek to text=\" + text.utf8ToString());\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> result = fstEnum.seekCeil(text);\n      if (result == null) {\n        //System.out.println(\"  end\");\n        return SeekStatus.END;\n      } else {\n        //System.out.println(\"  got text=\" + term.utf8ToString());\n        PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>> pair1 = result.output;\n        PairOutputs.Pair<Long,Long> pair2 = pair1.output2;\n        docsStart = pair1.output1;\n        docFreq = pair2.output1.intValue();\n        totalTermFreq = pair2.output2;\n\n        if (result.input.equals(text)) {\n          //System.out.println(\"  match docsStart=\" + docsStart);\n          return SeekStatus.FOUND;\n        } else {\n          //System.out.println(\"  not match docsStart=\" + docsStart);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","sourceOld":"    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n\n      //System.out.println(\"seek to text=\" + text.utf8ToString());\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,Long>> result = fstEnum.seekCeil(text);\n      if (result == null) {\n        //System.out.println(\"  end\");\n        return SeekStatus.END;\n      } else {\n        //System.out.println(\"  got text=\" + term.utf8ToString());\n        PairOutputs.Pair<Long,Long> pair = result.output;\n        docsStart = pair.output1;\n        docFreq = pair.output2.intValue();\n\n        if (result.input.equals(text)) {\n          //System.out.println(\"  match docsStart=\" + docsStart);\n          return SeekStatus.FOUND;\n        } else {\n          //System.out.println(\"  not match docsStart=\" + docsStart);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16843358872ed92ba92888ab99df297550b9a36a","date":1295144724,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n\n      //System.out.println(\"seek to text=\" + text.utf8ToString());\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> result = fstEnum.seekCeil(text);\n      if (result == null) {\n        //System.out.println(\"  end\");\n        return SeekStatus.END;\n      } else {\n        //System.out.println(\"  got text=\" + term.utf8ToString());\n        PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>> pair1 = result.output;\n        PairOutputs.Pair<Long,Long> pair2 = pair1.output2;\n        docsStart = pair1.output1;\n        docFreq = pair2.output1.intValue();\n        totalTermFreq = pair2.output2;\n\n        if (result.input.equals(text)) {\n          //System.out.println(\"  match docsStart=\" + docsStart);\n          return SeekStatus.FOUND;\n        } else {\n          //System.out.println(\"  not match docsStart=\" + docsStart);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","sourceOld":"    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n\n      //System.out.println(\"seek to text=\" + text.utf8ToString());\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,Long>> result = fstEnum.seekCeil(text);\n      if (result == null) {\n        //System.out.println(\"  end\");\n        return SeekStatus.END;\n      } else {\n        //System.out.println(\"  got text=\" + term.utf8ToString());\n        PairOutputs.Pair<Long,Long> pair = result.output;\n        docsStart = pair.output1;\n        docFreq = pair.output2.intValue();\n\n        if (result.input.equals(text)) {\n          //System.out.println(\"  match docsStart=\" + docsStart);\n          return SeekStatus.FOUND;\n        } else {\n          //System.out.println(\"  not match docsStart=\" + docsStart);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"    @Override\n    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n\n      //System.out.println(\"seek to text=\" + text.utf8ToString());\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> result = fstEnum.seekCeil(text);\n      if (result == null) {\n        //System.out.println(\"  end\");\n        return SeekStatus.END;\n      } else {\n        //System.out.println(\"  got text=\" + term.utf8ToString());\n        PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>> pair1 = result.output;\n        PairOutputs.Pair<Long,Long> pair2 = pair1.output2;\n        docsStart = pair1.output1;\n        docFreq = pair2.output1.intValue();\n        totalTermFreq = pair2.output2;\n\n        if (result.input.equals(text)) {\n          //System.out.println(\"  match docsStart=\" + docsStart);\n          return SeekStatus.FOUND;\n        } else {\n          //System.out.println(\"  not match docsStart=\" + docsStart);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","sourceOld":"    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n\n      //System.out.println(\"seek to text=\" + text.utf8ToString());\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> result = fstEnum.seekCeil(text);\n      if (result == null) {\n        //System.out.println(\"  end\");\n        return SeekStatus.END;\n      } else {\n        //System.out.println(\"  got text=\" + term.utf8ToString());\n        PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>> pair1 = result.output;\n        PairOutputs.Pair<Long,Long> pair2 = pair1.output2;\n        docsStart = pair1.output1;\n        docFreq = pair2.output1.intValue();\n        totalTermFreq = pair2.output2;\n\n        if (result.input.equals(text)) {\n          //System.out.println(\"  match docsStart=\" + docsStart);\n          return SeekStatus.FOUND;\n        } else {\n          //System.out.println(\"  not match docsStart=\" + docsStart);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"    @Override\n    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n\n      //System.out.println(\"seek to text=\" + text.utf8ToString());\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> result = fstEnum.seekCeil(text);\n      if (result == null) {\n        //System.out.println(\"  end\");\n        return SeekStatus.END;\n      } else {\n        //System.out.println(\"  got text=\" + term.utf8ToString());\n        PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>> pair1 = result.output;\n        PairOutputs.Pair<Long,Long> pair2 = pair1.output2;\n        docsStart = pair1.output1;\n        docFreq = pair2.output1.intValue();\n        totalTermFreq = pair2.output2;\n\n        if (result.input.equals(text)) {\n          //System.out.println(\"  match docsStart=\" + docsStart);\n          return SeekStatus.FOUND;\n        } else {\n          //System.out.println(\"  not match docsStart=\" + docsStart);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","sourceOld":"    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n\n      //System.out.println(\"seek to text=\" + text.utf8ToString());\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,Long>> result = fstEnum.seekCeil(text);\n      if (result == null) {\n        //System.out.println(\"  end\");\n        return SeekStatus.END;\n      } else {\n        //System.out.println(\"  got text=\" + term.utf8ToString());\n        PairOutputs.Pair<Long,Long> pair = result.output;\n        docsStart = pair.output1;\n        docFreq = pair.output2.intValue();\n\n        if (result.input.equals(text)) {\n          //System.out.println(\"  match docsStart=\" + docsStart);\n          return SeekStatus.FOUND;\n        } else {\n          //System.out.println(\"  not match docsStart=\" + docsStart);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"    @Override\n    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n\n      //System.out.println(\"seek to text=\" + text.utf8ToString());\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> result = fstEnum.seekCeil(text);\n      if (result == null) {\n        //System.out.println(\"  end\");\n        return SeekStatus.END;\n      } else {\n        //System.out.println(\"  got text=\" + term.utf8ToString());\n        PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>> pair1 = result.output;\n        PairOutputs.Pair<Long,Long> pair2 = pair1.output2;\n        docsStart = pair1.output1;\n        docFreq = pair2.output1.intValue();\n        totalTermFreq = pair2.output2;\n\n        if (result.input.equals(text)) {\n          //System.out.println(\"  match docsStart=\" + docsStart);\n          return SeekStatus.FOUND;\n        } else {\n          //System.out.println(\"  not match docsStart=\" + docsStart);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","sourceOld":"    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n\n      //System.out.println(\"seek to text=\" + text.utf8ToString());\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> result = fstEnum.seekCeil(text);\n      if (result == null) {\n        //System.out.println(\"  end\");\n        return SeekStatus.END;\n      } else {\n        //System.out.println(\"  got text=\" + term.utf8ToString());\n        PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>> pair1 = result.output;\n        PairOutputs.Pair<Long,Long> pair2 = pair1.output2;\n        docsStart = pair1.output1;\n        docFreq = pair2.output1.intValue();\n        totalTermFreq = pair2.output2;\n\n        if (result.input.equals(text)) {\n          //System.out.println(\"  match docsStart=\" + docsStart);\n          return SeekStatus.FOUND;\n        } else {\n          //System.out.println(\"  not match docsStart=\" + docsStart);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"    @Override\n    public SeekStatus seekCeil(BytesRef text, boolean useCache /* ignored */) throws IOException {\n\n      //System.out.println(\"seek to text=\" + text.utf8ToString());\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> result = fstEnum.seekCeil(text);\n      if (result == null) {\n        //System.out.println(\"  end\");\n        return SeekStatus.END;\n      } else {\n        //System.out.println(\"  got text=\" + term.utf8ToString());\n        PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>> pair1 = result.output;\n        PairOutputs.Pair<Long,Long> pair2 = pair1.output2;\n        docsStart = pair1.output1;\n        docFreq = pair2.output1.intValue();\n        totalTermFreq = pair2.output2;\n\n        if (result.input.equals(text)) {\n          //System.out.println(\"  match docsStart=\" + docsStart);\n          return SeekStatus.FOUND;\n        } else {\n          //System.out.println(\"  not match docsStart=\" + docsStart);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n\n      //System.out.println(\"seek to text=\" + text.utf8ToString());\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> result = fstEnum.seekCeil(text);\n      if (result == null) {\n        //System.out.println(\"  end\");\n        return SeekStatus.END;\n      } else {\n        //System.out.println(\"  got text=\" + term.utf8ToString());\n        PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>> pair1 = result.output;\n        PairOutputs.Pair<Long,Long> pair2 = pair1.output2;\n        docsStart = pair1.output1;\n        docFreq = pair2.output1.intValue();\n        totalTermFreq = pair2.output2;\n\n        if (result.input.equals(text)) {\n          //System.out.println(\"  match docsStart=\" + docsStart);\n          return SeekStatus.FOUND;\n        } else {\n          //System.out.println(\"  not match docsStart=\" + docsStart);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"    @Override\n    public SeekStatus seekCeil(BytesRef text, boolean useCache /* ignored */) throws IOException {\n\n      //System.out.println(\"seek to text=\" + text.utf8ToString());\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> result = fstEnum.seekCeil(text);\n      if (result == null) {\n        //System.out.println(\"  end\");\n        return SeekStatus.END;\n      } else {\n        //System.out.println(\"  got text=\" + term.utf8ToString());\n        PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>> pair1 = result.output;\n        PairOutputs.Pair<Long,Long> pair2 = pair1.output2;\n        docsStart = pair1.output1;\n        docFreq = pair2.output1.intValue();\n        totalTermFreq = pair2.output2;\n\n        if (result.input.equals(text)) {\n          //System.out.println(\"  match docsStart=\" + docsStart);\n          return SeekStatus.FOUND;\n        } else {\n          //System.out.println(\"  not match docsStart=\" + docsStart);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n\n      //System.out.println(\"seek to text=\" + text.utf8ToString());\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> result = fstEnum.seekCeil(text);\n      if (result == null) {\n        //System.out.println(\"  end\");\n        return SeekStatus.END;\n      } else {\n        //System.out.println(\"  got text=\" + term.utf8ToString());\n        PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>> pair1 = result.output;\n        PairOutputs.Pair<Long,Long> pair2 = pair1.output2;\n        docsStart = pair1.output1;\n        docFreq = pair2.output1.intValue();\n        totalTermFreq = pair2.output2;\n\n        if (result.input.equals(text)) {\n          //System.out.println(\"  match docsStart=\" + docsStart);\n          return SeekStatus.FOUND;\n        } else {\n          //System.out.println(\"  not match docsStart=\" + docsStart);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n\n      //System.out.println(\"seek to text=\" + text.utf8ToString());\n      final BytesRefFSTEnum.InputOutput<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> result = fstEnum.seekCeil(text);\n      if (result == null) {\n        //System.out.println(\"  end\");\n        return SeekStatus.END;\n      } else {\n        //System.out.println(\"  got text=\" + term.utf8ToString());\n        PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>> pair1 = result.output;\n        PairOutputs.Pair<Long,Long> pair2 = pair1.output2;\n        docsStart = pair1.output1;\n        docFreq = pair2.output1.intValue();\n        totalTermFreq = pair2.output2;\n\n        if (result.input.equals(text)) {\n          //System.out.println(\"  match docsStart=\" + docsStart);\n          return SeekStatus.FOUND;\n        } else {\n          //System.out.println(\"  not match docsStart=\" + docsStart);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"70ad682703b8585f5d0a637efec044d57ec05efb":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","56da903869515527852ee21ea7ef7bfe414cd40d"],"85a883878c0af761245ab048babc63d099f835f3":["8d47f68d60cbff5718136b945ba8c55982342f38","2b2d719eaefc9684ff00084555da5f61a7f32aef"],"16843358872ed92ba92888ab99df297550b9a36a":["868da859b43505d9d2a023bfeae6dd0c795f5295","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["85a883878c0af761245ab048babc63d099f835f3","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"8d47f68d60cbff5718136b945ba8c55982342f38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2553b00f699380c64959ccb27991289aae87be2e":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","fd9cc9d77712aba3662f24632df7539ab75e3667"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"2b2d719eaefc9684ff00084555da5f61a7f32aef":["f7d6f751de577f829f8bdc897d050c728075723a"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","fd9cc9d77712aba3662f24632df7539ab75e3667"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["2b2d719eaefc9684ff00084555da5f61a7f32aef"],"56da903869515527852ee21ea7ef7bfe414cd40d":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02f9424edb9eccc558626693e4a4cd43f8ce2622":["8d47f68d60cbff5718136b945ba8c55982342f38"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["56da903869515527852ee21ea7ef7bfe414cd40d"],"f7d6f751de577f829f8bdc897d050c728075723a":["02f9424edb9eccc558626693e4a4cd43f8ce2622"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["16843358872ed92ba92888ab99df297550b9a36a","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd9cc9d77712aba3662f24632df7539ab75e3667"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","29ef99d61cda9641b6250bf9567329a6e65f901d","fd9cc9d77712aba3662f24632df7539ab75e3667","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"85a883878c0af761245ab048babc63d099f835f3":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"16843358872ed92ba92888ab99df297550b9a36a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["70ad682703b8585f5d0a637efec044d57ec05efb"],"8d47f68d60cbff5718136b945ba8c55982342f38":["85a883878c0af761245ab048babc63d099f835f3","02f9424edb9eccc558626693e4a4cd43f8ce2622"],"2553b00f699380c64959ccb27991289aae87be2e":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"2b2d719eaefc9684ff00084555da5f61a7f32aef":["85a883878c0af761245ab048babc63d099f835f3","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8d47f68d60cbff5718136b945ba8c55982342f38","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"02f9424edb9eccc558626693e4a4cd43f8ce2622":["f7d6f751de577f829f8bdc897d050c728075723a"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["16843358872ed92ba92888ab99df297550b9a36a"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","16843358872ed92ba92888ab99df297550b9a36a"],"f7d6f751de577f829f8bdc897d050c728075723a":["2b2d719eaefc9684ff00084555da5f61a7f32aef"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}