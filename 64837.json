{"path":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#sync(Collection[String]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#sync(Collection[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/FSDirectory#sync(Collection[String]).mjava","sourceNew":"  @Override\n  public void sync(Collection<String> names) throws IOException {\n    ensureOpen();\n    Set<String> toSync = new HashSet<String>(names);\n    toSync.retainAll(staleFiles);\n\n    for (String name : toSync)\n      fsync(name);\n\n    staleFiles.removeAll(toSync);\n  }\n\n","sourceOld":"  @Override\n  public void sync(Collection<String> names) throws IOException {\n    ensureOpen();\n    Set<String> toSync = new HashSet<String>(names);\n    toSync.retainAll(staleFiles);\n\n    for (String name : toSync)\n      fsync(name);\n\n    staleFiles.removeAll(toSync);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#sync(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#sync(Collection[String]).mjava","sourceNew":"  @Override\n  public void sync(Collection<String> names) throws IOException {\n    ensureOpen();\n    Set<String> toSync = new HashSet<>(names);\n    toSync.retainAll(staleFiles);\n\n    for (String name : toSync)\n      fsync(name);\n\n    staleFiles.removeAll(toSync);\n  }\n\n","sourceOld":"  @Override\n  public void sync(Collection<String> names) throws IOException {\n    ensureOpen();\n    Set<String> toSync = new HashSet<String>(names);\n    toSync.retainAll(staleFiles);\n\n    for (String name : toSync)\n      fsync(name);\n\n    staleFiles.removeAll(toSync);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e51a73abd3e0a6985e6c31e220c3ac5a5be01d45","date":1397155593,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#sync(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#sync(Collection[String]).mjava","sourceNew":"  @Override\n  public void sync(Collection<String> names) throws IOException {\n    ensureOpen();\n    Set<String> toSync = new HashSet<>(names);\n    toSync.retainAll(staleFiles);\n\n    for (String name : toSync)\n      fsync(name);\n    \n    IOUtils.fsync(directory, true);\n    \n    staleFiles.removeAll(toSync);\n  }\n\n","sourceOld":"  @Override\n  public void sync(Collection<String> names) throws IOException {\n    ensureOpen();\n    Set<String> toSync = new HashSet<>(names);\n    toSync.retainAll(staleFiles);\n\n    for (String name : toSync)\n      fsync(name);\n\n    staleFiles.removeAll(toSync);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a58b1286ce8a63e87a3d69a8b63c5e640b7a43bf","date":1397166834,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#sync(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#sync(Collection[String]).mjava","sourceNew":"  @Override\n  public void sync(Collection<String> names) throws IOException {\n    ensureOpen();\n    Set<String> toSync = new HashSet<>(names);\n    toSync.retainAll(staleFiles);\n\n    for (String name : toSync) {\n      fsync(name);\n    }\n    \n    // fsync the directory itsself, but only if there was any file fsynced before\n    // (otherwise it can happen that the directory does not yet exist)!\n    if (!toSync.isEmpty()) {\n      IOUtils.fsync(directory, true);\n    }\n    \n    staleFiles.removeAll(toSync);\n  }\n\n","sourceOld":"  @Override\n  public void sync(Collection<String> names) throws IOException {\n    ensureOpen();\n    Set<String> toSync = new HashSet<>(names);\n    toSync.retainAll(staleFiles);\n\n    for (String name : toSync)\n      fsync(name);\n    \n    IOUtils.fsync(directory, true);\n    \n    staleFiles.removeAll(toSync);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46e4a8bdfbafda795ef9c39a2bc2d47095770299","date":1410411846,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#sync(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#sync(Collection[String]).mjava","sourceNew":"  @Override\n  public void sync(Collection<String> names) throws IOException {\n    ensureOpen();\n    Set<String> toSync = new HashSet<>(names);\n    toSync.retainAll(staleFiles);\n\n    for (String name : toSync) {\n      fsync(name);\n    }\n    \n    staleFiles.removeAll(toSync);\n  }\n\n","sourceOld":"  @Override\n  public void sync(Collection<String> names) throws IOException {\n    ensureOpen();\n    Set<String> toSync = new HashSet<>(names);\n    toSync.retainAll(staleFiles);\n\n    for (String name : toSync) {\n      fsync(name);\n    }\n    \n    // fsync the directory itsself, but only if there was any file fsynced before\n    // (otherwise it can happen that the directory does not yet exist)!\n    if (!toSync.isEmpty()) {\n      IOUtils.fsync(directory, true);\n    }\n    \n    staleFiles.removeAll(toSync);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0716e003f90db334b4898cc2149fcc71e9a4fe4e","date":1420109009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#sync(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#sync(Collection[String]).mjava","sourceNew":"  @Override\n  public void sync(Collection<String> names) throws IOException {\n    ensureOpen();\n\n    for (String name : names) {\n      fsync(name);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void sync(Collection<String> names) throws IOException {\n    ensureOpen();\n    Set<String> toSync = new HashSet<>(names);\n    toSync.retainAll(staleFiles);\n\n    for (String name : toSync) {\n      fsync(name);\n    }\n    \n    staleFiles.removeAll(toSync);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"240cd0f67652ccfb87d7c5f8b2486d0f42012daa","date":1454536570,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#sync(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#sync(Collection[String]).mjava","sourceNew":"  @Override\n  public void sync(Collection<String> names) throws IOException {\n    ensureOpen();\n    maybeDeletePendingFiles();\n\n    for (String name : names) {\n      fsync(name);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void sync(Collection<String> names) throws IOException {\n    ensureOpen();\n\n    for (String name : names) {\n      fsync(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6105d385afcbf42689e171e9bcea48d0c9ff6c","date":1454692764,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#sync(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#sync(Collection[String]).mjava","sourceNew":"  @Override\n  public void sync(Collection<String> names) throws IOException {\n    ensureOpen();\n\n    for (String name : names) {\n      fsync(name);\n    }\n    maybeDeletePendingFiles();\n  }\n\n","sourceOld":"  @Override\n  public void sync(Collection<String> names) throws IOException {\n    ensureOpen();\n    maybeDeletePendingFiles();\n\n    for (String name : names) {\n      fsync(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#sync(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#sync(Collection[String]).mjava","sourceNew":"  @Override\n  public void sync(Collection<String> names) throws IOException {\n    ensureOpen();\n\n    for (String name : names) {\n      fsync(name);\n    }\n    maybeDeletePendingFiles();\n  }\n\n","sourceOld":"  @Override\n  public void sync(Collection<String> names) throws IOException {\n    ensureOpen();\n\n    for (String name : names) {\n      fsync(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#sync(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#sync(Collection[String]).mjava","sourceNew":"  @Override\n  public void sync(Collection<String> names) throws IOException {\n    ensureOpen();\n\n    for (String name : names) {\n      fsync(name);\n    }\n    maybeDeletePendingFiles();\n  }\n\n","sourceOld":"  @Override\n  public void sync(Collection<String> names) throws IOException {\n    ensureOpen();\n\n    for (String name : names) {\n      fsync(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#sync(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#sync(Collection[String]).mjava","sourceNew":"  @Override\n  public void sync(Collection<String> names) throws IOException {\n    ensureOpen();\n\n    for (String name : names) {\n      fsync(name);\n    }\n    maybeDeletePendingFiles();\n  }\n\n","sourceOld":"  @Override\n  public void sync(Collection<String> names) throws IOException {\n    ensureOpen();\n\n    for (String name : names) {\n      fsync(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"240cd0f67652ccfb87d7c5f8b2486d0f42012daa":["0716e003f90db334b4898cc2149fcc71e9a4fe4e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["0716e003f90db334b4898cc2149fcc71e9a4fe4e","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["0716e003f90db334b4898cc2149fcc71e9a4fe4e","b470f36a9372c97283360b1304eacbde22df6c0d"],"e51a73abd3e0a6985e6c31e220c3ac5a5be01d45":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["a58b1286ce8a63e87a3d69a8b63c5e640b7a43bf"],"1e6105d385afcbf42689e171e9bcea48d0c9ff6c":["240cd0f67652ccfb87d7c5f8b2486d0f42012daa"],"b470f36a9372c97283360b1304eacbde22df6c0d":["0716e003f90db334b4898cc2149fcc71e9a4fe4e","1e6105d385afcbf42689e171e9bcea48d0c9ff6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0716e003f90db334b4898cc2149fcc71e9a4fe4e":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"a58b1286ce8a63e87a3d69a8b63c5e640b7a43bf":["e51a73abd3e0a6985e6c31e220c3ac5a5be01d45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e51a73abd3e0a6985e6c31e220c3ac5a5be01d45"],"240cd0f67652ccfb87d7c5f8b2486d0f42012daa":["1e6105d385afcbf42689e171e9bcea48d0c9ff6c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"e51a73abd3e0a6985e6c31e220c3ac5a5be01d45":["a58b1286ce8a63e87a3d69a8b63c5e640b7a43bf"],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["0716e003f90db334b4898cc2149fcc71e9a4fe4e"],"1e6105d385afcbf42689e171e9bcea48d0c9ff6c":["b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0716e003f90db334b4898cc2149fcc71e9a4fe4e":["240cd0f67652ccfb87d7c5f8b2486d0f42012daa","5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d"],"a58b1286ce8a63e87a3d69a8b63c5e640b7a43bf":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}