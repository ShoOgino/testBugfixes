{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestPhraseWildcardQuery#testMaxExpansions().mjava","commits":[{"id":"b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e","date":1574848425,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestPhraseWildcardQuery#testMaxExpansions().mjava","pathOld":"/dev/null","sourceNew":"  public void testMaxExpansions() throws Exception {\n    // The limit on the number of expansions is different with PhraseWildcardQuery\n    // because it applies to each segments individually, and not globally unlike\n    // MultiPhraseQuery and SpanMultiTermQueryWrapper.\n    // Here we verify the total number of expansions directly from test stats\n    // inside PhraseWildcardQuery.\n\n    clearTestCounters();\n    searcher.search(phraseWildcardQuery(field(1), 3, 0, true, \"e*\", \"b*\"), MAX_DOCS);\n    // We expect 3 expansions even if both multi-terms have potentially more expansions.\n    assertEquals(3, TestCounters.get().expansionCount);\n\n    clearTestCounters();\n    searcher.search(phraseWildcardQuery(field(0), 4, 0, true, \"t?e\", \"utopia\", \"e*\"), MAX_DOCS);\n    // We expect 2 expansions since the \"utopia\" term matches only in the\n    // first segment, so there is no expansion for the second segment.\n    assertEquals(2, TestCounters.get().expansionCount);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fbbbb4892d97137c84d62762ee9283c8f32f247","date":1574942156,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestPhraseWildcardQuery#testMaxExpansions().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestPhraseWildcardQuery#testMaxExpansions().mjava","sourceNew":"  public void testMaxExpansions() throws Exception {\n    // The limit on the number of expansions is different with PhraseWildcardQuery\n    // because it applies to each segments individually, and not globally unlike\n    // MultiPhraseQuery and SpanMultiTermQueryWrapper.\n    // Here we verify the total number of expansions directly from test stats\n    // inside PhraseWildcardQuery.\n\n    assertCounters().clear();\n    searcher.search(phraseWildcardQuery(field(1), 3, 0, true, \"e*\", \"b*\"), MAX_DOCS);\n    // We expect 3 expansions even if both multi-terms have potentially more expansions.\n    assertCounters().expansion(3);\n\n    assertCounters().clear();\n    searcher.search(phraseWildcardQuery(field(0), 4, 0, true, \"t?e\", \"utopia\", \"e*\"), MAX_DOCS);\n    // We expect 2 expansions since the \"utopia\" term matches only in the\n    // first segment, so there is no expansion for the second segment.\n    assertCounters().expansion(2);\n  }\n\n","sourceOld":"  public void testMaxExpansions() throws Exception {\n    // The limit on the number of expansions is different with PhraseWildcardQuery\n    // because it applies to each segments individually, and not globally unlike\n    // MultiPhraseQuery and SpanMultiTermQueryWrapper.\n    // Here we verify the total number of expansions directly from test stats\n    // inside PhraseWildcardQuery.\n\n    clearTestCounters();\n    searcher.search(phraseWildcardQuery(field(1), 3, 0, true, \"e*\", \"b*\"), MAX_DOCS);\n    // We expect 3 expansions even if both multi-terms have potentially more expansions.\n    assertEquals(3, TestCounters.get().expansionCount);\n\n    clearTestCounters();\n    searcher.search(phraseWildcardQuery(field(0), 4, 0, true, \"t?e\", \"utopia\", \"e*\"), MAX_DOCS);\n    // We expect 2 expansions since the \"utopia\" term matches only in the\n    // first segment, so there is no expansion for the second segment.\n    assertEquals(2, TestCounters.get().expansionCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4fbbbb4892d97137c84d62762ee9283c8f32f247":["b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e"],"b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4fbbbb4892d97137c84d62762ee9283c8f32f247"]},"commit2Childs":{"4fbbbb4892d97137c84d62762ee9283c8f32f247":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e":["4fbbbb4892d97137c84d62762ee9283c8f32f247"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}