{"path":"lucene/core/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","sourceNew":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in  doClose()\n   *\n   * @see #incRef\n   */\n  public final void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.decrementAndGet();\n    if (rc == 0) {\n      boolean success = false;\n      try {\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      notifyReaderClosedListeners();\n    } else if (rc < 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount is \" + rc + \" after decrement\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in  doClose()\n   *\n   * @see #incRef\n   */\n  public final void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.decrementAndGet();\n    if (rc == 0) {\n      boolean success = false;\n      try {\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      notifyReaderClosedListeners();\n    } else if (rc < 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount is \" + rc + \" after decrement\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2a81b3988dfbdfb187c425043b89868e359b238","date":1329919075,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","sourceNew":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in  doClose()\n   *\n   * @see #incRef\n   */\n  public final void decRef() throws IOException {\n    // only check refcount here (don't call ensureOpen()), so we can\n    // still close the reader if it was made invalid by a child:\n    if (refCount.get() <= 0) {\n      throw new AlreadyClosedException(\"this IndexReader is closed\");\n    }\n    \n    final int rc = refCount.decrementAndGet();\n    if (rc == 0) {\n      boolean success = false;\n      try {\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      reportCloseToParentReaders();\n      notifyReaderClosedListeners();\n    } else if (rc < 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount is \" + rc + \" after decrement\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in  doClose()\n   *\n   * @see #incRef\n   */\n  public final void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.decrementAndGet();\n    if (rc == 0) {\n      boolean success = false;\n      try {\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      notifyReaderClosedListeners();\n    } else if (rc < 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount is \" + rc + \" after decrement\");\n    }\n  }\n\n","bugFix":["f3ff453bb43870ea139dcd068541a79fa8b38f98"],"bugIntro":["6f8a4ddee78d8bc3c8c736c1cdb130b94cde0b89"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","sourceNew":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in  doClose()\n   *\n   * @see #incRef\n   */\n  public final void decRef() throws IOException {\n    // only check refcount here (don't call ensureOpen()), so we can\n    // still close the reader if it was made invalid by a child:\n    if (refCount.get() <= 0) {\n      throw new AlreadyClosedException(\"this IndexReader is closed\");\n    }\n    \n    final int rc = refCount.decrementAndGet();\n    if (rc == 0) {\n      boolean success = false;\n      try {\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      reportCloseToParentReaders();\n      notifyReaderClosedListeners();\n    } else if (rc < 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount is \" + rc + \" after decrement\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in  doClose()\n   *\n   * @see #incRef\n   */\n  public final void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.decrementAndGet();\n    if (rc == 0) {\n      boolean success = false;\n      try {\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      notifyReaderClosedListeners();\n    } else if (rc < 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount is \" + rc + \" after decrement\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f8a4ddee78d8bc3c8c736c1cdb130b94cde0b89","date":1395763949,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","sourceNew":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in  doClose()\n   *\n   * @see #incRef\n   */\n  public final void decRef() throws IOException {\n    // only check refcount here (don't call ensureOpen()), so we can\n    // still close the reader if it was made invalid by a child:\n    if (refCount.get() <= 0) {\n      throw new AlreadyClosedException(\"this IndexReader is closed\");\n    }\n    \n    final int rc = refCount.decrementAndGet();\n    if (rc == 0) {\n      closed = true;\n      Throwable throwable = null;\n      try {\n        doClose();\n      } catch (Throwable th) {\n        throwable = th;\n      } finally {\n        try {\n          reportCloseToParentReaders();\n        } finally {\n          notifyReaderClosedListeners(throwable);\n        }\n      }\n    } else if (rc < 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount is \" + rc + \" after decrement\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in  doClose()\n   *\n   * @see #incRef\n   */\n  public final void decRef() throws IOException {\n    // only check refcount here (don't call ensureOpen()), so we can\n    // still close the reader if it was made invalid by a child:\n    if (refCount.get() <= 0) {\n      throw new AlreadyClosedException(\"this IndexReader is closed\");\n    }\n    \n    final int rc = refCount.decrementAndGet();\n    if (rc == 0) {\n      boolean success = false;\n      try {\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      reportCloseToParentReaders();\n      notifyReaderClosedListeners();\n    } else if (rc < 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount is \" + rc + \" after decrement\");\n    }\n  }\n\n","bugFix":["a2a81b3988dfbdfb187c425043b89868e359b238","eeb24fe119d55091148e2a3d94e80c9e349d886c","351c5b8cb12f675814b970fabc3723ee7c78280d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14d66d86a8b184a86bcaebcf6e15fcef486e0876","date":1521539412,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","sourceNew":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in  doClose()\n   *\n   * @see #incRef\n   */\n  @SuppressWarnings(\"try\")\n  public final void decRef() throws IOException {\n    // only check refcount here (don't call ensureOpen()), so we can\n    // still close the reader if it was made invalid by a child:\n    if (refCount.get() <= 0) {\n      throw new AlreadyClosedException(\"this IndexReader is closed\");\n    }\n    \n    final int rc = refCount.decrementAndGet();\n    if (rc == 0) {\n      closed = true;\n      try (Closeable finalizer = this::reportCloseToParentReaders;\n            Closeable finalizer1 = this::notifyReaderClosedListeners) {\n        doClose();\n      }\n    } else if (rc < 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount is \" + rc + \" after decrement\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in  doClose()\n   *\n   * @see #incRef\n   */\n  public final void decRef() throws IOException {\n    // only check refcount here (don't call ensureOpen()), so we can\n    // still close the reader if it was made invalid by a child:\n    if (refCount.get() <= 0) {\n      throw new AlreadyClosedException(\"this IndexReader is closed\");\n    }\n    \n    final int rc = refCount.decrementAndGet();\n    if (rc == 0) {\n      closed = true;\n      Throwable throwable = null;\n      try {\n        doClose();\n      } catch (Throwable th) {\n        throwable = th;\n      } finally {\n        try {\n          reportCloseToParentReaders();\n        } finally {\n          notifyReaderClosedListeners(throwable);\n        }\n      }\n    } else if (rc < 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount is \" + rc + \" after decrement\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","sourceNew":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in  doClose()\n   *\n   * @see #incRef\n   */\n  @SuppressWarnings(\"try\")\n  public final void decRef() throws IOException {\n    // only check refcount here (don't call ensureOpen()), so we can\n    // still close the reader if it was made invalid by a child:\n    if (refCount.get() <= 0) {\n      throw new AlreadyClosedException(\"this IndexReader is closed\");\n    }\n    \n    final int rc = refCount.decrementAndGet();\n    if (rc == 0) {\n      closed = true;\n      try (Closeable finalizer = this::reportCloseToParentReaders;\n            Closeable finalizer1 = this::notifyReaderClosedListeners) {\n        doClose();\n      }\n    } else if (rc < 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount is \" + rc + \" after decrement\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in  doClose()\n   *\n   * @see #incRef\n   */\n  public final void decRef() throws IOException {\n    // only check refcount here (don't call ensureOpen()), so we can\n    // still close the reader if it was made invalid by a child:\n    if (refCount.get() <= 0) {\n      throw new AlreadyClosedException(\"this IndexReader is closed\");\n    }\n    \n    final int rc = refCount.decrementAndGet();\n    if (rc == 0) {\n      closed = true;\n      Throwable throwable = null;\n      try {\n        doClose();\n      } catch (Throwable th) {\n        throwable = th;\n      } finally {\n        try {\n          reportCloseToParentReaders();\n        } finally {\n          notifyReaderClosedListeners(throwable);\n        }\n      }\n    } else if (rc < 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount is \" + rc + \" after decrement\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["6f8a4ddee78d8bc3c8c736c1cdb130b94cde0b89","14d66d86a8b184a86bcaebcf6e15fcef486e0876"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a2a81b3988dfbdfb187c425043b89868e359b238"],"6f8a4ddee78d8bc3c8c736c1cdb130b94cde0b89":["a2a81b3988dfbdfb187c425043b89868e359b238"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a2a81b3988dfbdfb187c425043b89868e359b238":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"14d66d86a8b184a86bcaebcf6e15fcef486e0876":["6f8a4ddee78d8bc3c8c736c1cdb130b94cde0b89"]},"commit2Childs":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"6f8a4ddee78d8bc3c8c736c1cdb130b94cde0b89":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","14d66d86a8b184a86bcaebcf6e15fcef486e0876"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a2a81b3988dfbdfb187c425043b89868e359b238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a2a81b3988dfbdfb187c425043b89868e359b238":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","6f8a4ddee78d8bc3c8c736c1cdb130b94cde0b89"],"14d66d86a8b184a86bcaebcf6e15fcef486e0876":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}