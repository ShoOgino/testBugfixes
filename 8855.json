{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateTimeRoutedAlias#getParams().mjava","commits":[{"id":"6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691","date":1516909549,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateTimeRoutedAlias#getParams().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.add(CommonParams.NAME, aliasName);\n      params.add(ROUTING_TYPE, \"time\");\n      params.add(ROUTING_FIELD, routerField);\n      params.add(ROUTING_START, start);\n      params.add(ROUTING_INCREMENT, interval);\n      if (tz != null) {\n        params.add(CommonParams.TZ, tz.getID());\n      }\n      if (maxFutureMs != null) {\n        params.add(ROUTING_MAX_FUTURE, \"\"+maxFutureMs);\n      }\n\n      // merge the above with collectionParams.  Above takes precedence.\n      ModifiableSolrParams createCollParams = new ModifiableSolrParams(); // output target\n      final SolrParams collParams = createCollTemplate.getParams();\n      final Iterator<String> pIter = collParams.getParameterNamesIterator();\n      while (pIter.hasNext()) {\n        String key = pIter.next();\n        if (key.equals(CollectionParams.ACTION) || key.equals(\"name\")) {\n          continue;\n        }\n        createCollParams.set(\"create-collection.\" + key, collParams.getParams(key));\n      }\n      return SolrParams.wrapDefaults(params, createCollParams);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46589ed5cc841861bf6b5e2afc55f718ebcd02a0","date":1516984620,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateTimeRoutedAlias#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateTimeRoutedAlias#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.add(CommonParams.NAME, aliasName);\n      params.add(ROUTER_TYPE_NAME, \"time\");\n      params.add(ROUTER_FIELD, routerField);\n      params.add(ROUTER_START, start);\n      params.add(ROUTER_INTERVAL, interval);\n      if (tz != null) {\n        params.add(CommonParams.TZ, tz.getID());\n      }\n      if (maxFutureMs != null) {\n        params.add(ROUTER_MAX_FUTURE, \"\"+maxFutureMs);\n      }\n\n      // merge the above with collectionParams.  Above takes precedence.\n      ModifiableSolrParams createCollParams = new ModifiableSolrParams(); // output target\n      final SolrParams collParams = createCollTemplate.getParams();\n      final Iterator<String> pIter = collParams.getParameterNamesIterator();\n      while (pIter.hasNext()) {\n        String key = pIter.next();\n        if (key.equals(CollectionParams.ACTION) || key.equals(\"name\")) {\n          continue;\n        }\n        createCollParams.set(\"create-collection.\" + key, collParams.getParams(key));\n      }\n      return SolrParams.wrapDefaults(params, createCollParams);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.add(CommonParams.NAME, aliasName);\n      params.add(ROUTING_TYPE, \"time\");\n      params.add(ROUTING_FIELD, routerField);\n      params.add(ROUTING_START, start);\n      params.add(ROUTING_INCREMENT, interval);\n      if (tz != null) {\n        params.add(CommonParams.TZ, tz.getID());\n      }\n      if (maxFutureMs != null) {\n        params.add(ROUTING_MAX_FUTURE, \"\"+maxFutureMs);\n      }\n\n      // merge the above with collectionParams.  Above takes precedence.\n      ModifiableSolrParams createCollParams = new ModifiableSolrParams(); // output target\n      final SolrParams collParams = createCollTemplate.getParams();\n      final Iterator<String> pIter = collParams.getParameterNamesIterator();\n      while (pIter.hasNext()) {\n        String key = pIter.next();\n        if (key.equals(CollectionParams.ACTION) || key.equals(\"name\")) {\n          continue;\n        }\n        createCollParams.set(\"create-collection.\" + key, collParams.getParams(key));\n      }\n      return SolrParams.wrapDefaults(params, createCollParams);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849083f8095b1ffaff05a66e0b1e024617b9968d","date":1536291524,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateTimeRoutedAlias#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateTimeRoutedAlias#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.add(CommonParams.NAME, aliasName);\n      params.add(ROUTER_TYPE_NAME, \"time\");\n      params.add(ROUTER_FIELD, routerField);\n      params.add(ROUTER_START, start);\n      params.add(ROUTER_INTERVAL, interval);\n      if (tz != null) {\n        params.add(CommonParams.TZ, tz.getID());\n      }\n      if (maxFutureMs != null) {\n        params.add(ROUTER_MAX_FUTURE, \"\"+maxFutureMs);\n      }\n      if (preemptiveCreateMath != null) {\n        params.add(ROUTER_PREEMPTIVE_CREATE_WINDOW, preemptiveCreateMath);\n      }\n\n      // merge the above with collectionParams.  Above takes precedence.\n      ModifiableSolrParams createCollParams = new ModifiableSolrParams(); // output target\n      final SolrParams collParams = createCollTemplate.getParams();\n      final Iterator<String> pIter = collParams.getParameterNamesIterator();\n      while (pIter.hasNext()) {\n        String key = pIter.next();\n        if (key.equals(CollectionParams.ACTION) || key.equals(\"name\")) {\n          continue;\n        }\n        createCollParams.set(\"create-collection.\" + key, collParams.getParams(key));\n      }\n      return SolrParams.wrapDefaults(params, createCollParams);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.add(CommonParams.NAME, aliasName);\n      params.add(ROUTER_TYPE_NAME, \"time\");\n      params.add(ROUTER_FIELD, routerField);\n      params.add(ROUTER_START, start);\n      params.add(ROUTER_INTERVAL, interval);\n      if (tz != null) {\n        params.add(CommonParams.TZ, tz.getID());\n      }\n      if (maxFutureMs != null) {\n        params.add(ROUTER_MAX_FUTURE, \"\"+maxFutureMs);\n      }\n\n      // merge the above with collectionParams.  Above takes precedence.\n      ModifiableSolrParams createCollParams = new ModifiableSolrParams(); // output target\n      final SolrParams collParams = createCollTemplate.getParams();\n      final Iterator<String> pIter = collParams.getParameterNamesIterator();\n      while (pIter.hasNext()) {\n        String key = pIter.next();\n        if (key.equals(CollectionParams.ACTION) || key.equals(\"name\")) {\n          continue;\n        }\n        createCollParams.set(\"create-collection.\" + key, collParams.getParams(key));\n      }\n      return SolrParams.wrapDefaults(params, createCollParams);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"105e345cf3c0abed3cb6c109274a379cb2655adc","date":1561038472,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateTimeRoutedAlias#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateTimeRoutedAlias#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.add(CommonParams.NAME, aliasName);\n      params.add(ROUTER_TYPE_NAME, \"time\");\n      params.add(ROUTER_FIELD, routerField);\n      params.add(ROUTER_START, start);\n      params.add(ROUTER_INTERVAL, interval);\n      if (tz != null) {\n        params.add(CommonParams.TZ, tz.getID());\n      }\n      if (maxFutureMs != null) {\n        params.add(ROUTER_MAX_FUTURE, \"\"+maxFutureMs);\n      }\n      if (preemptiveCreateMath != null) {\n        params.add(ROUTER_PREEMPTIVE_CREATE_WINDOW, preemptiveCreateMath);\n      }\n      if (autoDeleteAge != null) {\n        params.add(ROUTER_AUTO_DELETE_AGE, autoDeleteAge);\n      }\n\n      // merge the above with collectionParams.  Above takes precedence.\n      ModifiableSolrParams createCollParams = new ModifiableSolrParams(); // output target\n      final SolrParams collParams = createCollTemplate.getParams();\n      final Iterator<String> pIter = collParams.getParameterNamesIterator();\n      while (pIter.hasNext()) {\n        String key = pIter.next();\n        if (key.equals(CollectionParams.ACTION) || key.equals(\"name\")) {\n          continue;\n        }\n        createCollParams.set(\"create-collection.\" + key, collParams.getParams(key));\n      }\n      return SolrParams.wrapDefaults(params, createCollParams);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.add(CommonParams.NAME, aliasName);\n      params.add(ROUTER_TYPE_NAME, \"time\");\n      params.add(ROUTER_FIELD, routerField);\n      params.add(ROUTER_START, start);\n      params.add(ROUTER_INTERVAL, interval);\n      if (tz != null) {\n        params.add(CommonParams.TZ, tz.getID());\n      }\n      if (maxFutureMs != null) {\n        params.add(ROUTER_MAX_FUTURE, \"\"+maxFutureMs);\n      }\n      if (preemptiveCreateMath != null) {\n        params.add(ROUTER_PREEMPTIVE_CREATE_WINDOW, preemptiveCreateMath);\n      }\n\n      // merge the above with collectionParams.  Above takes precedence.\n      ModifiableSolrParams createCollParams = new ModifiableSolrParams(); // output target\n      final SolrParams collParams = createCollTemplate.getParams();\n      final Iterator<String> pIter = collParams.getParameterNamesIterator();\n      while (pIter.hasNext()) {\n        String key = pIter.next();\n        if (key.equals(CollectionParams.ACTION) || key.equals(\"name\")) {\n          continue;\n        }\n        createCollParams.set(\"create-collection.\" + key, collParams.getParams(key));\n      }\n      return SolrParams.wrapDefaults(params, createCollParams);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateTimeRoutedAlias#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateTimeRoutedAlias#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.add(CommonParams.NAME, aliasName);\n      params.add(ROUTER_TYPE_NAME, \"time\");\n      params.add(ROUTER_FIELD, routerField);\n      params.add(ROUTER_START, start);\n      params.add(ROUTER_INTERVAL, interval);\n      if (tz != null) {\n        params.add(CommonParams.TZ, tz.getID());\n      }\n      if (maxFutureMs != null) {\n        params.add(ROUTER_MAX_FUTURE, \"\"+maxFutureMs);\n      }\n      if (preemptiveCreateMath != null) {\n        params.add(ROUTER_PREEMPTIVE_CREATE_WINDOW, preemptiveCreateMath);\n      }\n      if (autoDeleteAge != null) {\n        params.add(ROUTER_AUTO_DELETE_AGE, autoDeleteAge);\n      }\n\n      // merge the above with collectionParams.  Above takes precedence.\n      ModifiableSolrParams createCollParams = mergeCollParams(createCollTemplate);\n      return SolrParams.wrapDefaults(params, createCollParams);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n      params.add(CommonParams.NAME, aliasName);\n      params.add(ROUTER_TYPE_NAME, \"time\");\n      params.add(ROUTER_FIELD, routerField);\n      params.add(ROUTER_START, start);\n      params.add(ROUTER_INTERVAL, interval);\n      if (tz != null) {\n        params.add(CommonParams.TZ, tz.getID());\n      }\n      if (maxFutureMs != null) {\n        params.add(ROUTER_MAX_FUTURE, \"\"+maxFutureMs);\n      }\n      if (preemptiveCreateMath != null) {\n        params.add(ROUTER_PREEMPTIVE_CREATE_WINDOW, preemptiveCreateMath);\n      }\n      if (autoDeleteAge != null) {\n        params.add(ROUTER_AUTO_DELETE_AGE, autoDeleteAge);\n      }\n\n      // merge the above with collectionParams.  Above takes precedence.\n      ModifiableSolrParams createCollParams = new ModifiableSolrParams(); // output target\n      final SolrParams collParams = createCollTemplate.getParams();\n      final Iterator<String> pIter = collParams.getParameterNamesIterator();\n      while (pIter.hasNext()) {\n        String key = pIter.next();\n        if (key.equals(CollectionParams.ACTION) || key.equals(\"name\")) {\n          continue;\n        }\n        createCollParams.set(\"create-collection.\" + key, collParams.getParams(key));\n      }\n      return SolrParams.wrapDefaults(params, createCollParams);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"105e345cf3c0abed3cb6c109274a379cb2655adc":["849083f8095b1ffaff05a66e0b1e024617b9968d"],"46589ed5cc841861bf6b5e2afc55f718ebcd02a0":["6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691"],"849083f8095b1ffaff05a66e0b1e024617b9968d":["46589ed5cc841861bf6b5e2afc55f718ebcd02a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["105e345cf3c0abed3cb6c109274a379cb2655adc"],"6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"]},"commit2Childs":{"105e345cf3c0abed3cb6c109274a379cb2655adc":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"46589ed5cc841861bf6b5e2afc55f718ebcd02a0":["849083f8095b1ffaff05a66e0b1e024617b9968d"],"849083f8095b1ffaff05a66e0b1e024617b9968d":["105e345cf3c0abed3cb6c109274a379cb2655adc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691":["46589ed5cc841861bf6b5e2afc55f718ebcd02a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}