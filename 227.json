{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testStoredFields(LeafReader,PrintStream,boolean).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testStoredFields(LeafReader,PrintStream,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test stored fields.\n   * @lucene.experimental\n   */\n  public static Status.StoredFieldStatus testStoredFields(LeafReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    final Status.StoredFieldStatus status = new Status.StoredFieldStatus();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: stored fields.......\");\n      }\n\n      // Scan stored fields for all documents\n      final Bits liveDocs = reader.getLiveDocs();\n      for (int j = 0; j < reader.maxDoc(); ++j) {\n        // Intentionally pull even deleted documents to\n        // make sure they too are not corrupt:\n        StoredDocument doc = reader.document(j);\n        if (liveDocs == null || liveDocs.get(j)) {\n          status.docCount++;\n          status.totFields += doc.getFields().size();\n        }\n      }      \n\n      // Validate docCount\n      if (status.docCount != reader.numDocs()) {\n        throw new RuntimeException(\"docCount=\" + status.docCount + \" but saw \" + status.docCount + \" undeleted docs\");\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" total field count; avg \" + \n          NumberFormat.getInstance(Locale.ROOT).format((((float) status.totFields)/status.docCount)) + \" fields per doc]\");      \n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6b64ceb507ba9aa71920c0bfad91032e2c03d42f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b64ceb507ba9aa71920c0bfad91032e2c03d42f","date":1423608862,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testStoredFields(LeafReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testStoredFields(LeafReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test stored fields.\n   * @lucene.experimental\n   */\n  public static Status.StoredFieldStatus testStoredFields(LeafReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.StoredFieldStatus status = new Status.StoredFieldStatus();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: stored fields.......\");\n      }\n\n      // Scan stored fields for all documents\n      final Bits liveDocs = reader.getLiveDocs();\n      for (int j = 0; j < reader.maxDoc(); ++j) {\n        // Intentionally pull even deleted documents to\n        // make sure they too are not corrupt:\n        StoredDocument doc = reader.document(j);\n        if (liveDocs == null || liveDocs.get(j)) {\n          status.docCount++;\n          status.totFields += doc.getFields().size();\n        }\n      }      \n\n      // Validate docCount\n      if (status.docCount != reader.numDocs()) {\n        throw new RuntimeException(\"docCount=\" + status.docCount + \" but saw \" + status.docCount + \" undeleted docs\");\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total field count; avg %.1f fields per doc] [took %.3f sec]\",\n                                    status.totFields,\n                                    (((float) status.totFields)/status.docCount),\n                                    nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test stored fields.\n   * @lucene.experimental\n   */\n  public static Status.StoredFieldStatus testStoredFields(LeafReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    final Status.StoredFieldStatus status = new Status.StoredFieldStatus();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: stored fields.......\");\n      }\n\n      // Scan stored fields for all documents\n      final Bits liveDocs = reader.getLiveDocs();\n      for (int j = 0; j < reader.maxDoc(); ++j) {\n        // Intentionally pull even deleted documents to\n        // make sure they too are not corrupt:\n        StoredDocument doc = reader.document(j);\n        if (liveDocs == null || liveDocs.get(j)) {\n          status.docCount++;\n          status.totFields += doc.getFields().size();\n        }\n      }      \n\n      // Validate docCount\n      if (status.docCount != reader.numDocs()) {\n        throw new RuntimeException(\"docCount=\" + status.docCount + \" but saw \" + status.docCount + \" undeleted docs\");\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" total field count; avg \" + \n          NumberFormat.getInstance(Locale.ROOT).format((((float) status.totFields)/status.docCount)) + \" fields per doc]\");      \n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","date":1425345513,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testStoredFields(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testStoredFields(LeafReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test stored fields.\n   * @lucene.experimental\n   */\n  public static Status.StoredFieldStatus testStoredFields(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.StoredFieldStatus status = new Status.StoredFieldStatus();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: stored fields.......\");\n      }\n\n      // Scan stored fields for all documents\n      final Bits liveDocs = reader.getLiveDocs();\n      StoredFieldsReader storedFields = reader.getFieldsReader().getMergeInstance();\n      for (int j = 0; j < reader.maxDoc(); ++j) {\n        // Intentionally pull even deleted documents to\n        // make sure they too are not corrupt:\n        DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n        storedFields.visitDocument(j, visitor);\n        StoredDocument doc = visitor.getDocument();\n        if (liveDocs == null || liveDocs.get(j)) {\n          status.docCount++;\n          status.totFields += doc.getFields().size();\n        }\n      }      \n\n      // Validate docCount\n      if (status.docCount != reader.numDocs()) {\n        throw new RuntimeException(\"docCount=\" + status.docCount + \" but saw \" + status.docCount + \" undeleted docs\");\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total field count; avg %.1f fields per doc] [took %.3f sec]\",\n                                    status.totFields,\n                                    (((float) status.totFields)/status.docCount),\n                                    nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test stored fields.\n   * @lucene.experimental\n   */\n  public static Status.StoredFieldStatus testStoredFields(LeafReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.StoredFieldStatus status = new Status.StoredFieldStatus();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: stored fields.......\");\n      }\n\n      // Scan stored fields for all documents\n      final Bits liveDocs = reader.getLiveDocs();\n      for (int j = 0; j < reader.maxDoc(); ++j) {\n        // Intentionally pull even deleted documents to\n        // make sure they too are not corrupt:\n        StoredDocument doc = reader.document(j);\n        if (liveDocs == null || liveDocs.get(j)) {\n          status.docCount++;\n          status.totFields += doc.getFields().size();\n        }\n      }      \n\n      // Validate docCount\n      if (status.docCount != reader.numDocs()) {\n        throw new RuntimeException(\"docCount=\" + status.docCount + \" but saw \" + status.docCount + \" undeleted docs\");\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total field count; avg %.1f fields per doc] [took %.3f sec]\",\n                                    status.totFields,\n                                    (((float) status.totFields)/status.docCount),\n                                    nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testStoredFields(LeafReader,PrintStream,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Test stored fields.\n   * @lucene.experimental\n   */\n  public static Status.StoredFieldStatus testStoredFields(LeafReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.StoredFieldStatus status = new Status.StoredFieldStatus();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: stored fields.......\");\n      }\n\n      // Scan stored fields for all documents\n      final Bits liveDocs = reader.getLiveDocs();\n      for (int j = 0; j < reader.maxDoc(); ++j) {\n        // Intentionally pull even deleted documents to\n        // make sure they too are not corrupt:\n        StoredDocument doc = reader.document(j);\n        if (liveDocs == null || liveDocs.get(j)) {\n          status.docCount++;\n          status.totFields += doc.getFields().size();\n        }\n      }      \n\n      // Validate docCount\n      if (status.docCount != reader.numDocs()) {\n        throw new RuntimeException(\"docCount=\" + status.docCount + \" but saw \" + status.docCount + \" undeleted docs\");\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total field count; avg %.1f fields per doc] [took %.3f sec]\",\n                                    status.totFields,\n                                    (((float) status.totFields)/status.docCount),\n                                    nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6":["6b64ceb507ba9aa71920c0bfad91032e2c03d42f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6b64ceb507ba9aa71920c0bfad91032e2c03d42f","8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6b64ceb507ba9aa71920c0bfad91032e2c03d42f":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6"]},"commit2Childs":{"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"6b64ceb507ba9aa71920c0bfad91032e2c03d42f":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["6b64ceb507ba9aa71920c0bfad91032e2c03d42f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}