{"path":"lucene/core/src/java/org/apache/lucene/search/NRTManager#NRTManager(IndexWriter,SearcherFactory,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NRTManager#NRTManager(IndexWriter,SearcherFactory,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/NRTManager#NRTManager(IndexWriter,SearcherFactory,boolean).mjava","sourceNew":"  /**\n   * Expert: just like {@link\n   * #NRTManager(IndexWriter,SearcherFactory)},\n   * but you can also specify whether every searcher must\n   * apply deletes.  This is useful for cases where certain\n   * uses can tolerate seeing some deleted docs, since\n   * reopen time is faster if deletes need not be applied. */\n  public NRTManager(IndexWriter writer, SearcherFactory searcherFactory, boolean alwaysApplyDeletes) throws IOException {\n    this.writer = writer;\n    if (alwaysApplyDeletes) {\n      withoutDeletes = withDeletes = new SearcherManagerRef(true, 0,  new SearcherManager(writer, true, searcherFactory));\n    } else {\n      withDeletes = new SearcherManagerRef(true, 0, new SearcherManager(writer, true, searcherFactory));\n      withoutDeletes = new SearcherManagerRef(false, 0, new SearcherManager(writer, false, searcherFactory));\n    }\n    indexingGen = new AtomicLong(1);\n  }\n\n","sourceOld":"  /**\n   * Expert: just like {@link\n   * #NRTManager(IndexWriter,SearcherFactory)},\n   * but you can also specify whether every searcher must\n   * apply deletes.  This is useful for cases where certain\n   * uses can tolerate seeing some deleted docs, since\n   * reopen time is faster if deletes need not be applied. */\n  public NRTManager(IndexWriter writer, SearcherFactory searcherFactory, boolean alwaysApplyDeletes) throws IOException {\n    this.writer = writer;\n    if (alwaysApplyDeletes) {\n      withoutDeletes = withDeletes = new SearcherManagerRef(true, 0,  new SearcherManager(writer, true, searcherFactory));\n    } else {\n      withDeletes = new SearcherManagerRef(true, 0, new SearcherManager(writer, true, searcherFactory));\n      withoutDeletes = new SearcherManagerRef(false, 0, new SearcherManager(writer, false, searcherFactory));\n    }\n    indexingGen = new AtomicLong(1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c36db4818c5eba16bdcbedab4f06dd69ae59190","date":1329160108,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/NRTManager#NRTManager(IndexWriter,SearcherFactory,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: just like {@link\n   * #NRTManager(IndexWriter,SearcherFactory)},\n   * but you can also specify whether every searcher must\n   * apply deletes.  This is useful for cases where certain\n   * uses can tolerate seeing some deleted docs, since\n   * reopen time is faster if deletes need not be applied. */\n  public NRTManager(IndexWriter writer, SearcherFactory searcherFactory, boolean alwaysApplyDeletes) throws IOException {\n    this.writer = writer;\n    if (alwaysApplyDeletes) {\n      withoutDeletes = withDeletes = new SearcherManagerRef(true, 0,  new SearcherManager(writer, true, searcherFactory));\n    } else {\n      withDeletes = new SearcherManagerRef(true, 0, new SearcherManager(writer, true, searcherFactory));\n      withoutDeletes = new SearcherManagerRef(false, 0, new SearcherManager(writer, false, searcherFactory));\n    }\n    indexingGen = new AtomicLong(1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c36db4818c5eba16bdcbedab4f06dd69ae59190":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c36db4818c5eba16bdcbedab4f06dd69ae59190"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2c36db4818c5eba16bdcbedab4f06dd69ae59190"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2c36db4818c5eba16bdcbedab4f06dd69ae59190":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}