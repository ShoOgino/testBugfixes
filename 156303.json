{"path":"src/java/org/apache/solr/core/MultiCore#swap(CoreDescriptor,CoreDescriptor).mjava","commits":[{"id":"6dc6ab6902f8f70ae43365947ccf44c25986906d","date":1204603577,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/MultiCore#swap(CoreDescriptor,CoreDescriptor).mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#swap(SolrCore,SolrCore).mjava","sourceNew":"  public void swap(CoreDescriptor c0, CoreDescriptor c1) {\n    if( c0 == null || c1 == null ) {\n      throw new RuntimeException( \"Can not swap a null core.\" );\n    }\n    synchronized( cores ) {\n      String n0 = c0.getName();\n      String n1 = c1.getName();\n      cores.put(n0, c1);\n      cores.put(n1, c0);\n      c0.setName( n1 );\n      if (c0.getCore() != null)\n        c0.getCore().setName(n1);\n      c1.setName( n0 );\n      if (c1.getCore() != null)\n        c1.getCore().setName(n0);\n    }\n    log.info( \"swaped: \"+c0.getName() + \" with \" + c1.getName() );\n  }\n\n","sourceOld":"  public void swap(SolrCore c0, SolrCore c1) {\n    if( c0 == null || c1 == null ) {\n      throw new RuntimeException( \"Can not swap a null core.\" );\n    }\n    synchronized( cores ) {\n      String n0 = c0.getName();\n      String n1 = c1.getName();\n      cores.put(n0, c1);\n      cores.put(n1, c0);\n      c0.setName( n1 );\n      c1.setName( n0 );\n    }\n    log.info( \"swaped: \"+c0.getName() + \" with \" + c1.getName() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58b41d4093a9662306bdc051e4b46643deff70de","date":1205090944,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/MultiCore#swap(CoreDescriptor,CoreDescriptor).mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#swap(CoreDescriptor,CoreDescriptor).mjava","sourceNew":"  /**\n   * Swaps two SolrCore descriptors.\n   * @param c0\n   * @param c1\n   */\n  public void swap(CoreDescriptor c0, CoreDescriptor c1) {\n    if( c0 == null || c1 == null ) {\n      throw new RuntimeException( \"Can not swap a null core.\" );\n    }\n    synchronized( cores ) {\n      String n0 = c0.getName();\n      String n1 = c1.getName();\n      cores.put(n0, c1);\n      cores.put(n1, c0);\n      c0.setName( n1 );\n      if (c0.getCore() != null)\n        c0.getCore().setName(n1);\n      c1.setName( n0 );\n      if (c1.getCore() != null)\n        c1.getCore().setName(n0);\n    }\n    log.info( \"swaped: \"+c0.getName() + \" with \" + c1.getName() );\n  }\n\n","sourceOld":"  public void swap(CoreDescriptor c0, CoreDescriptor c1) {\n    if( c0 == null || c1 == null ) {\n      throw new RuntimeException( \"Can not swap a null core.\" );\n    }\n    synchronized( cores ) {\n      String n0 = c0.getName();\n      String n1 = c1.getName();\n      cores.put(n0, c1);\n      cores.put(n1, c0);\n      c0.setName( n1 );\n      if (c0.getCore() != null)\n        c0.getCore().setName(n1);\n      c1.setName( n0 );\n      if (c1.getCore() != null)\n        c1.getCore().setName(n0);\n    }\n    log.info( \"swaped: \"+c0.getName() + \" with \" + c1.getName() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5","date":1218639440,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#swap(CoreDescriptor,CoreDescriptor).mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#swap(CoreDescriptor,CoreDescriptor).mjava","sourceNew":"  /**\n   * Swaps two SolrCore descriptors.\n   * @param c0\n   * @param c1\n   */\n  public void swap(CoreDescriptor c0, CoreDescriptor c1) {\n    if( c0 == null || c1 == null ) {\n      throw new RuntimeException( \"Can not swap a null core.\" );\n    }\n    synchronized( cores ) {\n      String n0 = c0.getName();\n      String n1 = c1.getName();\n      cores.put(n0, c1);\n      cores.put(n1, c0);\n      c0.setName( n1 );\n      if (c0.getCore() != null)\n        c0.getCore().setName(n1);\n      c1.setName( n0 );\n      if (c1.getCore() != null)\n        c1.getCore().setName(n0);\n    }\n    log.info( \"swaped: \"+c0.getName() + \" with \" + c1.getName() );\n  }\n\n","sourceOld":"  /**\n   * Swaps two SolrCore descriptors.\n   * @param c0\n   * @param c1\n   */\n  public void swap(CoreDescriptor c0, CoreDescriptor c1) {\n    if( c0 == null || c1 == null ) {\n      throw new RuntimeException( \"Can not swap a null core.\" );\n    }\n    synchronized( cores ) {\n      String n0 = c0.getName();\n      String n1 = c1.getName();\n      cores.put(n0, c1);\n      cores.put(n1, c0);\n      c0.setName( n1 );\n      if (c0.getCore() != null)\n        c0.getCore().setName(n1);\n      c1.setName( n0 );\n      if (c1.getCore() != null)\n        c1.getCore().setName(n0);\n    }\n    log.info( \"swaped: \"+c0.getName() + \" with \" + c1.getName() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dc6ab6902f8f70ae43365947ccf44c25986906d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"58b41d4093a9662306bdc051e4b46643deff70de":["6dc6ab6902f8f70ae43365947ccf44c25986906d"],"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5":["58b41d4093a9662306bdc051e4b46643deff70de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6dc6ab6902f8f70ae43365947ccf44c25986906d":["58b41d4093a9662306bdc051e4b46643deff70de"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6dc6ab6902f8f70ae43365947ccf44c25986906d"],"58b41d4093a9662306bdc051e4b46643deff70de":["9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5"],"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}