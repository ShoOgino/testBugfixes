{"path":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory.AbstractStatsValues#getStatsValues().mjava","commits":[{"id":"248f6ecc900c3a5633fd5ca6f564ea8b717720da","date":1588863846,"type":0,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory.AbstractStatsValues#getStatsValues().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public NamedList<?> getStatsValues() {\n      NamedList<Object> res = new SimpleOrderedMap<>();\n\n      if (statsField.includeInResponse(Stat.min)) {\n        res.add(\"min\", min);\n      }\n      if (statsField.includeInResponse(Stat.max)) {\n        res.add(\"max\", max);\n      }\n      if (statsField.includeInResponse(Stat.count)) {\n        res.add(\"count\", count);\n      }\n      if (statsField.includeInResponse(Stat.missing)) {\n        res.add(\"missing\", missing);\n      }\n      if (statsField.includeInResponse(Stat.distinctValues)) {\n        res.add(\"distinctValues\", distinctValues);\n      }\n      if (statsField.includeInResponse(Stat.countDistinct)) {\n        res.add(\"countDistinct\", countDistinct);\n      }\n      if (statsField.includeInResponse(Stat.cardinality)) {\n        if (statsField.getIsShard()) {\n          res.add(\"cardinality\", hll.toBytes());\n        } else {\n          res.add(\"cardinality\", hll.cardinality());\n        }\n      }\n\n      addTypeSpecificStats(res);\n\n      if (!facets.isEmpty()) {\n\n        // add the facet stats\n        NamedList<NamedList<?>> nl = new SimpleOrderedMap<>();\n        for (Map.Entry<String,Map<String,StatsValues>> entry : facets.entrySet()) {\n          NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<>();\n          nl.add(entry.getKey(), nl2);\n          for (Map.Entry<String,StatsValues> e2 : entry.getValue().entrySet()) {\n            nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n          }\n        }\n\n        res.add(FACETS, nl);\n      }\n\n      return res;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"]},"commit2Childs":{"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}