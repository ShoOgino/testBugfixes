{"path":"lucene/spatial3d/src/java/org/apache/lucene/bkdtree3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"f64b7098768253180859cd8faeae6b1a185b06ed","date":1441223971,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/bkdtree3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        BinaryDocValues bdv = reader.getBinaryDocValues(field);\n        if (bdv == null) {\n          // No docs in this segment had this field\n          return null;\n        }\n\n        if (bdv instanceof Geo3DBinaryDocValues == false) {\n          throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was not indexed with Geo3DBinaryDocValuesFormat: got: \" + bdv);\n        }\n        final Geo3DBinaryDocValues treeDV = (Geo3DBinaryDocValues) bdv;\n        BKD3DTreeReader tree = treeDV.getBKD3DTreeReader();\n\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        DocIdSet result = tree.intersect(Geo3DDocValuesFormat.encodeValueLenient(planetMax, bounds.getMinimumX()),\n                                         Geo3DDocValuesFormat.encodeValueLenient(planetMax, bounds.getMaximumX()),\n                                         Geo3DDocValuesFormat.encodeValueLenient(planetMax, bounds.getMinimumY()),\n                                         Geo3DDocValuesFormat.encodeValueLenient(planetMax, bounds.getMaximumY()),\n                                         Geo3DDocValuesFormat.encodeValueLenient(planetMax, bounds.getMinimumZ()),\n                                         Geo3DDocValuesFormat.encodeValueLenient(planetMax, bounds.getMaximumZ()),\n                                         new BKD3DTreeReader.ValueFilter() {\n                                           @Override\n                                           public boolean accept(int docID) {\n                                             //System.out.println(\"  accept? docID=\" + docID);\n                                             BytesRef bytes = treeDV.get(docID);\n                                             if (bytes == null) {\n                                               //System.out.println(\"    false (null)\");\n                                               return false;\n                                             }\n\n                                             assert bytes.length == 12;\n                                             double x = Geo3DDocValuesFormat.decodeValueCenter(treeDV.planetMax, Geo3DDocValuesFormat.readInt(bytes.bytes, bytes.offset));\n                                             double y = Geo3DDocValuesFormat.decodeValueCenter(treeDV.planetMax, Geo3DDocValuesFormat.readInt(bytes.bytes, bytes.offset+4));\n                                             double z = Geo3DDocValuesFormat.decodeValueCenter(treeDV.planetMax, Geo3DDocValuesFormat.readInt(bytes.bytes, bytes.offset+8));\n                                             // System.out.println(\"  accept docID=\" + docID + \" point: x=\" + x + \" y=\" + y + \" z=\" + z);\n\n                                             // True if x,y,z is within shape\n                                             //System.out.println(\"    x=\" + x + \" y=\" + y + \" z=\" + z);\n                                             //System.out.println(\"    ret: \" + shape.isWithin(x, y, z));\n\n                                             return shape.isWithin(x, y, z);\n                                           }\n\n                                           @Override\n                                           public BKD3DTreeReader.Relation compare(int cellXMinEnc, int cellXMaxEnc, int cellYMinEnc, int cellYMaxEnc, int cellZMinEnc, int cellZMaxEnc) {\n                                             assert cellXMinEnc <= cellXMaxEnc;\n                                             assert cellYMinEnc <= cellYMaxEnc;\n                                             assert cellZMinEnc <= cellZMaxEnc;\n\n                                             // Because the BKD tree operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                                             // could quantize into these bounds.  The encoding (Geo3DDocValuesFormat.encodeValue) does\n                                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                                             double cellXMin = Geo3DDocValuesFormat.decodeValueMin(treeDV.planetMax, cellXMinEnc);\n                                             double cellXMax = Geo3DDocValuesFormat.decodeValueMax(treeDV.planetMax, cellXMaxEnc);\n                                             double cellYMin = Geo3DDocValuesFormat.decodeValueMin(treeDV.planetMax, cellYMinEnc);\n                                             double cellYMax = Geo3DDocValuesFormat.decodeValueMax(treeDV.planetMax, cellYMaxEnc);\n                                             double cellZMin = Geo3DDocValuesFormat.decodeValueMin(treeDV.planetMax, cellZMinEnc);\n                                             double cellZMax = Geo3DDocValuesFormat.decodeValueMax(treeDV.planetMax, cellZMaxEnc);\n                                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n\n                                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel, cellXMin, cellXMax, cellYMin, cellYMax, cellZMin, cellZMax);\n\n                                             switch(xyzSolid.getRelationship(shape)) {\n                                             case GeoArea.CONTAINS:\n                                               // Shape fully contains the cell\n                                               //System.out.println(\"    inside\");\n                                               return BKD3DTreeReader.Relation.CELL_INSIDE_SHAPE;\n                                             case GeoArea.OVERLAPS:\n                                               // They do overlap but neither contains the other:\n                                               //System.out.println(\"    crosses1\");\n                                               return BKD3DTreeReader.Relation.SHAPE_CROSSES_CELL;\n                                             case GeoArea.WITHIN:\n                                               // Cell fully contains the shape:\n                                               //System.out.println(\"    crosses2\");\n                                               return BKD3DTreeReader.Relation.SHAPE_INSIDE_CELL;\n                                             case GeoArea.DISJOINT:\n                                               // They do not overlap at all\n                                               //System.out.println(\"    outside\");\n                                               return BKD3DTreeReader.Relation.SHAPE_OUTSIDE_CELL;\n                                             default:\n                                               assert false;\n                                               return BKD3DTreeReader.Relation.SHAPE_CROSSES_CELL;\n                                             }\n                                           }\n                                         });\n\n        final DocIdSetIterator disi = result.iterator();\n\n        return new ConstantScoreScorer(this, score(), disi);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/bkdtree3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        BinaryDocValues bdv = reader.getBinaryDocValues(field);\n        if (bdv == null) {\n          // No docs in this segment had this field\n          return null;\n        }\n\n        if (bdv instanceof Geo3DBinaryDocValues == false) {\n          throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was not indexed with Geo3DBinaryDocValuesFormat: got: \" + bdv);\n        }\n        final Geo3DBinaryDocValues treeDV = (Geo3DBinaryDocValues) bdv;\n        BKD3DTreeReader tree = treeDV.getBKD3DTreeReader();\n\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        DocIdSet result = tree.intersect(Geo3DDocValuesFormat.encodeValueLenient(planetMax, bounds.getMinimumX()),\n                                         Geo3DDocValuesFormat.encodeValueLenient(planetMax, bounds.getMaximumX()),\n                                         Geo3DDocValuesFormat.encodeValueLenient(planetMax, bounds.getMinimumY()),\n                                         Geo3DDocValuesFormat.encodeValueLenient(planetMax, bounds.getMaximumY()),\n                                         Geo3DDocValuesFormat.encodeValueLenient(planetMax, bounds.getMinimumZ()),\n                                         Geo3DDocValuesFormat.encodeValueLenient(planetMax, bounds.getMaximumZ()),\n                                         new BKD3DTreeReader.ValueFilter() {\n                                           @Override\n                                           public boolean accept(int docID) {\n                                             //System.out.println(\"  accept? docID=\" + docID);\n                                             BytesRef bytes = treeDV.get(docID);\n                                             if (bytes == null) {\n                                               //System.out.println(\"    false (null)\");\n                                               return false;\n                                             }\n\n                                             assert bytes.length == 12;\n                                             double x = Geo3DDocValuesFormat.decodeValueCenter(treeDV.planetMax, Geo3DDocValuesFormat.readInt(bytes.bytes, bytes.offset));\n                                             double y = Geo3DDocValuesFormat.decodeValueCenter(treeDV.planetMax, Geo3DDocValuesFormat.readInt(bytes.bytes, bytes.offset+4));\n                                             double z = Geo3DDocValuesFormat.decodeValueCenter(treeDV.planetMax, Geo3DDocValuesFormat.readInt(bytes.bytes, bytes.offset+8));\n                                             // System.out.println(\"  accept docID=\" + docID + \" point: x=\" + x + \" y=\" + y + \" z=\" + z);\n\n                                             // True if x,y,z is within shape\n                                             //System.out.println(\"    x=\" + x + \" y=\" + y + \" z=\" + z);\n                                             //System.out.println(\"    ret: \" + shape.isWithin(x, y, z));\n\n                                             return shape.isWithin(x, y, z);\n                                           }\n\n                                           @Override\n                                           public BKD3DTreeReader.Relation compare(int cellXMinEnc, int cellXMaxEnc, int cellYMinEnc, int cellYMaxEnc, int cellZMinEnc, int cellZMaxEnc) {\n                                             assert cellXMinEnc <= cellXMaxEnc;\n                                             assert cellYMinEnc <= cellYMaxEnc;\n                                             assert cellZMinEnc <= cellZMaxEnc;\n\n                                             // Because the BKD tree operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                                             // could quantize into these bounds.  The encoding (Geo3DDocValuesFormat.encodeValue) does\n                                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                                             double cellXMin = Geo3DDocValuesFormat.decodeValueMin(treeDV.planetMax, cellXMinEnc);\n                                             double cellXMax = Geo3DDocValuesFormat.decodeValueMax(treeDV.planetMax, cellXMaxEnc);\n                                             double cellYMin = Geo3DDocValuesFormat.decodeValueMin(treeDV.planetMax, cellYMinEnc);\n                                             double cellYMax = Geo3DDocValuesFormat.decodeValueMax(treeDV.planetMax, cellYMaxEnc);\n                                             double cellZMin = Geo3DDocValuesFormat.decodeValueMin(treeDV.planetMax, cellZMinEnc);\n                                             double cellZMax = Geo3DDocValuesFormat.decodeValueMax(treeDV.planetMax, cellZMaxEnc);\n                                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n\n                                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel, cellXMin, cellXMax, cellYMin, cellYMax, cellZMin, cellZMax);\n\n                                             switch(xyzSolid.getRelationship(shape)) {\n                                             case GeoArea.CONTAINS:\n                                               // Shape fully contains the cell\n                                               //System.out.println(\"    inside\");\n                                               return BKD3DTreeReader.Relation.CELL_INSIDE_SHAPE;\n                                             case GeoArea.OVERLAPS:\n                                               // They do overlap but neither contains the other:\n                                               //System.out.println(\"    crosses1\");\n                                               return BKD3DTreeReader.Relation.SHAPE_CROSSES_CELL;\n                                             case GeoArea.WITHIN:\n                                               // Cell fully contains the shape:\n                                               //System.out.println(\"    crosses2\");\n                                               return BKD3DTreeReader.Relation.SHAPE_INSIDE_CELL;\n                                             case GeoArea.DISJOINT:\n                                               // They do not overlap at all\n                                               //System.out.println(\"    outside\");\n                                               return BKD3DTreeReader.Relation.SHAPE_OUTSIDE_CELL;\n                                             default:\n                                               assert false;\n                                               return BKD3DTreeReader.Relation.SHAPE_CROSSES_CELL;\n                                             }\n                                           }\n                                         });\n\n        final DocIdSetIterator disi = result.iterator();\n\n        return new ConstantScoreScorer(this, score(), disi);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f64b7098768253180859cd8faeae6b1a185b06ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["f64b7098768253180859cd8faeae6b1a185b06ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"]},"commit2Childs":{"f64b7098768253180859cd8faeae6b1a185b06ed":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f64b7098768253180859cd8faeae6b1a185b06ed"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}