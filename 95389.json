{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],BytesRef,int).mjava","commits":[{"id":"e50f0da93c6dcee20d8792637b1786e2c34975e9","date":1400182475,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],BytesRef,int).mjava","pathOld":"/dev/null","sourceNew":"  // Pushes a frame we seek'd to\n  Frame pushFrame(FST.Arc<BytesRef> arc, BytesRef frameData, int length) throws IOException {\n    scratchReader.reset(frameData.bytes, frameData.offset, frameData.length);\n    final long code = scratchReader.readVLong();\n    final long fpSeek = code >>> BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n    final Frame f = getFrame(1+currentFrame.ord);\n    f.hasTerms = (code & BlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS) != 0;\n    f.hasTermsOrig = f.hasTerms;\n    f.isFloor = (code & BlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR) != 0;\n    if (f.isFloor) {\n      f.setFloorData(scratchReader, frameData);\n    }\n    pushFrame(arc, fpSeek, length);\n\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f4ef2de7b0fd59ef22e20888773ad260c90bfb4","date":1400183621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],BytesRef,int).mjava","sourceNew":"  // Pushes a frame we seek'd to\n  SegmentTermsEnumFrame pushFrame(FST.Arc<BytesRef> arc, BytesRef frameData, int length) throws IOException {\n    scratchReader.reset(frameData.bytes, frameData.offset, frameData.length);\n    final long code = scratchReader.readVLong();\n    final long fpSeek = code >>> BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n    final SegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);\n    f.hasTerms = (code & BlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS) != 0;\n    f.hasTermsOrig = f.hasTerms;\n    f.isFloor = (code & BlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR) != 0;\n    if (f.isFloor) {\n      f.setFloorData(scratchReader, frameData);\n    }\n    pushFrame(arc, fpSeek, length);\n\n    return f;\n  }\n\n","sourceOld":"  // Pushes a frame we seek'd to\n  Frame pushFrame(FST.Arc<BytesRef> arc, BytesRef frameData, int length) throws IOException {\n    scratchReader.reset(frameData.bytes, frameData.offset, frameData.length);\n    final long code = scratchReader.readVLong();\n    final long fpSeek = code >>> BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n    final Frame f = getFrame(1+currentFrame.ord);\n    f.hasTerms = (code & BlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS) != 0;\n    f.hasTermsOrig = f.hasTerms;\n    f.isFloor = (code & BlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR) != 0;\n    if (f.isFloor) {\n      f.setFloorData(scratchReader, frameData);\n    }\n    pushFrame(arc, fpSeek, length);\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],BytesRef,int).mjava","pathOld":"/dev/null","sourceNew":"  // Pushes a frame we seek'd to\n  SegmentTermsEnumFrame pushFrame(FST.Arc<BytesRef> arc, BytesRef frameData, int length) throws IOException {\n    scratchReader.reset(frameData.bytes, frameData.offset, frameData.length);\n    final long code = scratchReader.readVLong();\n    final long fpSeek = code >>> BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n    final SegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);\n    f.hasTerms = (code & BlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS) != 0;\n    f.hasTermsOrig = f.hasTerms;\n    f.isFloor = (code & BlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR) != 0;\n    if (f.isFloor) {\n      f.setFloorData(scratchReader, frameData);\n    }\n    pushFrame(arc, fpSeek, length);\n\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6d238816bcdf9bbe4ec886226d89bd93834eb7e","date":1413925889,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],BytesRef,int).mjava","sourceNew":"  // Pushes a frame we seek'd to\n  SegmentTermsEnumFrame pushFrame(FST.Arc<BytesRef> arc, BytesRef frameData, int length) throws IOException {\n    scratchReader.reset(frameData.bytes, frameData.offset, frameData.length);\n    final long code = scratchReader.readVLong();\n    final long fpSeek = code >>> BlockTreeTermsReader.OUTPUT_FLAGS_NUM_BITS;\n    final SegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);\n    f.hasTerms = (code & BlockTreeTermsReader.OUTPUT_FLAG_HAS_TERMS) != 0;\n    f.hasTermsOrig = f.hasTerms;\n    f.isFloor = (code & BlockTreeTermsReader.OUTPUT_FLAG_IS_FLOOR) != 0;\n    if (f.isFloor) {\n      f.setFloorData(scratchReader, frameData);\n    }\n    pushFrame(arc, fpSeek, length);\n\n    return f;\n  }\n\n","sourceOld":"  // Pushes a frame we seek'd to\n  SegmentTermsEnumFrame pushFrame(FST.Arc<BytesRef> arc, BytesRef frameData, int length) throws IOException {\n    scratchReader.reset(frameData.bytes, frameData.offset, frameData.length);\n    final long code = scratchReader.readVLong();\n    final long fpSeek = code >>> BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n    final SegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);\n    f.hasTerms = (code & BlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS) != 0;\n    f.hasTermsOrig = f.hasTerms;\n    f.isFloor = (code & BlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR) != 0;\n    if (f.isFloor) {\n      f.setFloorData(scratchReader, frameData);\n    }\n    pushFrame(arc, fpSeek, length);\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],BytesRef,int).mjava","sourceNew":"  // Pushes a frame we seek'd to\n  SegmentTermsEnumFrame pushFrame(FST.Arc<BytesRef> arc, BytesRef frameData, int length) throws IOException {\n    scratchReader.reset(frameData.bytes, frameData.offset, frameData.length);\n    final long code = scratchReader.readVLong();\n    final long fpSeek = code >>> BlockTreeTermsReader.OUTPUT_FLAGS_NUM_BITS;\n    final SegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);\n    f.hasTerms = (code & BlockTreeTermsReader.OUTPUT_FLAG_HAS_TERMS) != 0;\n    f.hasTermsOrig = f.hasTerms;\n    f.isFloor = (code & BlockTreeTermsReader.OUTPUT_FLAG_IS_FLOOR) != 0;\n    if (f.isFloor) {\n      f.setFloorData(scratchReader, frameData);\n    }\n    pushFrame(arc, fpSeek, length);\n\n    return f;\n  }\n\n","sourceOld":"  // Pushes a frame we seek'd to\n  SegmentTermsEnumFrame pushFrame(FST.Arc<BytesRef> arc, BytesRef frameData, int length) throws IOException {\n    scratchReader.reset(frameData.bytes, frameData.offset, frameData.length);\n    final long code = scratchReader.readVLong();\n    final long fpSeek = code >>> BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n    final SegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);\n    f.hasTerms = (code & BlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS) != 0;\n    f.hasTermsOrig = f.hasTerms;\n    f.isFloor = (code & BlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR) != 0;\n    if (f.isFloor) {\n      f.setFloorData(scratchReader, frameData);\n    }\n    pushFrame(arc, fpSeek, length);\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f4ef2de7b0fd59ef22e20888773ad260c90bfb4"],"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"3f4ef2de7b0fd59ef22e20888773ad260c90bfb4":["e50f0da93c6dcee20d8792637b1786e2c34975e9"],"e50f0da93c6dcee20d8792637b1786e2c34975e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["4d637064d608752565d4f9f41b2497dfdfdde50e","c6d238816bcdf9bbe4ec886226d89bd93834eb7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["c6d238816bcdf9bbe4ec886226d89bd93834eb7e","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"3f4ef2de7b0fd59ef22e20888773ad260c90bfb4":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"e50f0da93c6dcee20d8792637b1786e2c34975e9":["3f4ef2de7b0fd59ef22e20888773ad260c90bfb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d637064d608752565d4f9f41b2497dfdfdde50e","e50f0da93c6dcee20d8792637b1786e2c34975e9"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}