{"path":"src/java/org/apache/lucene/analysis/CharArraySet#rehash().mjava","commits":[{"id":"6864413dbc0c12104c978c05456f3da1d45adb03","date":1186770873,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CharArraySet#rehash().mjava","pathOld":"/dev/null","sourceNew":"  private void rehash() {\n    final int newSize = 2*count;\n    mask = newSize-1;\n\n    char[][] newEntries = new char[newSize][];\n    for(int i=0;i<entries.length;i++) {\n      char[] text = entries[i];\n      if (text != null) {\n        int code = getHashCode(text, text.length);\n        int pos = code & mask;\n        if (newEntries[pos] != null) {\n          final int inc = code*1347|1;\n          do {\n            code += inc;\n            pos = code & mask;\n          } while (newEntries[pos] != null);\n        }\n        newEntries[pos] = text;\n      }\n    }\n\n    entries = newEntries;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a641490b95646f21afda39cc9998d6bbd89187d5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"95fcbec956d64aff326919be88d27ba5b60c046e","date":1187017143,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CharArraySet#rehash().mjava","pathOld":"src/java/org/apache/lucene/analysis/CharArraySet#rehash().mjava","sourceNew":"  private void rehash() {\n    final int newSize = 2*count;\n    mask = newSize-1;\n\n    char[][] newEntries = new char[newSize][];\n    for(int i=0;i<entries.length;i++) {\n      char[] text = entries[i];\n      if (text != null) {\n        int code = getHashCode(text, text.length);\n        int pos = code & mask;\n        if (newEntries[pos] != null) {\n          final int inc = ((code>>8)+code)|1;\n          do {\n            code += inc;\n            pos = code & mask;\n          } while (newEntries[pos] != null);\n        }\n        newEntries[pos] = text;\n      }\n    }\n\n    entries = newEntries;\n  }\n\n","sourceOld":"  private void rehash() {\n    final int newSize = 2*count;\n    mask = newSize-1;\n\n    char[][] newEntries = new char[newSize][];\n    for(int i=0;i<entries.length;i++) {\n      char[] text = entries[i];\n      if (text != null) {\n        int code = getHashCode(text, text.length);\n        int pos = code & mask;\n        if (newEntries[pos] != null) {\n          final int inc = code*1347|1;\n          do {\n            code += inc;\n            pos = code & mask;\n          } while (newEntries[pos] != null);\n        }\n        newEntries[pos] = text;\n      }\n    }\n\n    entries = newEntries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"050b03edbe9b8423ff4c09685c6f03d900e86b83","date":1195514584,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CharArraySet#rehash().mjava","pathOld":"src/java/org/apache/lucene/analysis/CharArraySet#rehash().mjava","sourceNew":"  private void rehash() {\n    final int newSize = 2*count;\n    char[][] oldEntries = entries;\n    char[][] entries = new char[newSize][];\n\n    for(int i=0;i<oldEntries.length;i++) {\n      char[] text = oldEntries[i];\n      if (text != null) {\n        // todo: could be faster... no need to compare strings on collision\n        entries[ getSlot(text,0,text.length) ] = text;\n      }\n    }\n  }\n\n","sourceOld":"  private void rehash() {\n    final int newSize = 2*count;\n    mask = newSize-1;\n\n    char[][] newEntries = new char[newSize][];\n    for(int i=0;i<entries.length;i++) {\n      char[] text = entries[i];\n      if (text != null) {\n        int code = getHashCode(text, text.length);\n        int pos = code & mask;\n        if (newEntries[pos] != null) {\n          final int inc = ((code>>8)+code)|1;\n          do {\n            code += inc;\n            pos = code & mask;\n          } while (newEntries[pos] != null);\n        }\n        newEntries[pos] = text;\n      }\n    }\n\n    entries = newEntries;\n  }\n\n","bugFix":null,"bugIntro":["a641490b95646f21afda39cc9998d6bbd89187d5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a641490b95646f21afda39cc9998d6bbd89187d5","date":1195568590,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CharArraySet#rehash().mjava","pathOld":"src/java/org/apache/lucene/analysis/CharArraySet#rehash().mjava","sourceNew":"  private void rehash() {\n    final int newSize = 2*entries.length;\n    char[][] oldEntries = entries;\n    entries = new char[newSize][];\n\n    for(int i=0;i<oldEntries.length;i++) {\n      char[] text = oldEntries[i];\n      if (text != null) {\n        // todo: could be faster... no need to compare strings on collision\n        entries[getSlot(text,0,text.length)] = text;\n      }\n    }\n  }\n\n","sourceOld":"  private void rehash() {\n    final int newSize = 2*count;\n    char[][] oldEntries = entries;\n    char[][] entries = new char[newSize][];\n\n    for(int i=0;i<oldEntries.length;i++) {\n      char[] text = oldEntries[i];\n      if (text != null) {\n        // todo: could be faster... no need to compare strings on collision\n        entries[ getSlot(text,0,text.length) ] = text;\n      }\n    }\n  }\n\n","bugFix":["050b03edbe9b8423ff4c09685c6f03d900e86b83","6864413dbc0c12104c978c05456f3da1d45adb03"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c09067bd60a59f680992d62794689898c0148ac","date":1265200673,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/CharArraySet#rehash().mjava","sourceNew":null,"sourceOld":"  private void rehash() {\n    final int newSize = 2*entries.length;\n    char[][] oldEntries = entries;\n    entries = new char[newSize][];\n\n    for(int i=0;i<oldEntries.length;i++) {\n      char[] text = oldEntries[i];\n      if (text != null) {\n        // todo: could be faster... no need to compare strings on collision\n        entries[getSlot(text,0,text.length)] = text;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"95fcbec956d64aff326919be88d27ba5b60c046e":["6864413dbc0c12104c978c05456f3da1d45adb03"],"6864413dbc0c12104c978c05456f3da1d45adb03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3c09067bd60a59f680992d62794689898c0148ac":["a641490b95646f21afda39cc9998d6bbd89187d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a641490b95646f21afda39cc9998d6bbd89187d5":["050b03edbe9b8423ff4c09685c6f03d900e86b83"],"050b03edbe9b8423ff4c09685c6f03d900e86b83":["95fcbec956d64aff326919be88d27ba5b60c046e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3c09067bd60a59f680992d62794689898c0148ac"]},"commit2Childs":{"95fcbec956d64aff326919be88d27ba5b60c046e":["050b03edbe9b8423ff4c09685c6f03d900e86b83"],"6864413dbc0c12104c978c05456f3da1d45adb03":["95fcbec956d64aff326919be88d27ba5b60c046e"],"3c09067bd60a59f680992d62794689898c0148ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6864413dbc0c12104c978c05456f3da1d45adb03"],"a641490b95646f21afda39cc9998d6bbd89187d5":["3c09067bd60a59f680992d62794689898c0148ac"],"050b03edbe9b8423ff4c09685c6f03d900e86b83":["a641490b95646f21afda39cc9998d6bbd89187d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}