{"path":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","commits":[{"id":"ae695f21c50b03702b5d0fa2543d5af844bb7cd3","date":1331554994,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a ref to a clone.  NOTE: this clone is not\n   * enrolled in the pool, so you should simply close()\n   * it when you're done (ie, do not call release()).\n   */\n  public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n    if (reader == null) {\n      getReader(context).decRef();\n      assert reader != null;\n    }\n    shared = true;\n    if (liveDocs != null) {\n      return new SegmentReader(reader.getSegmentInfo(), reader.core, liveDocs, info.docCount - info.getDelCount() - pendingDeleteCount);\n    } else {\n      assert reader.getLiveDocs() == liveDocs;\n      reader.incRef();\n      return reader;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["baa23b5db56be939827f4340a4c7cfd3bcb8088c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a ref to a clone.  NOTE: this clone is not\n   * enrolled in the pool, so you should simply close()\n   * it when you're done (ie, do not call release()).\n   */\n  public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n    if (reader == null) {\n      getReader(context).decRef();\n      assert reader != null;\n    }\n    shared = true;\n    if (liveDocs != null) {\n      return new SegmentReader(reader.getSegmentInfo(), reader.core, liveDocs, info.docCount - info.getDelCount() - pendingDeleteCount);\n    } else {\n      assert reader.getLiveDocs() == liveDocs;\n      reader.incRef();\n      return reader;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","sourceNew":"  /**\n   * Returns a ref to a clone.  NOTE: this clone is not\n   * enrolled in the pool, so you should simply close()\n   * it when you're done (ie, do not call release()).\n   */\n  public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n    if (reader == null) {\n      getReader(context).decRef();\n      assert reader != null;\n    }\n    shared = true;\n    if (liveDocs != null) {\n      return new SegmentReader(reader.getSegmentInfo(), reader.core, liveDocs, info.info.docCount - info.getDelCount() - pendingDeleteCount);\n    } else {\n      assert reader.getLiveDocs() == liveDocs;\n      reader.incRef();\n      return reader;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a ref to a clone.  NOTE: this clone is not\n   * enrolled in the pool, so you should simply close()\n   * it when you're done (ie, do not call release()).\n   */\n  public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n    if (reader == null) {\n      getReader(context).decRef();\n      assert reader != null;\n    }\n    shared = true;\n    if (liveDocs != null) {\n      return new SegmentReader(reader.getSegmentInfo(), reader.core, liveDocs, info.docCount - info.getDelCount() - pendingDeleteCount);\n    } else {\n      assert reader.getLiveDocs() == liveDocs;\n      reader.incRef();\n      return reader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"203d7d3cb7712e10ef33009a63247ae40c302d7a","date":1337798111,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","sourceNew":"  /**\n   * Returns a ref to a clone.  NOTE: this clone is not\n   * enrolled in the pool, so you should simply close()\n   * it when you're done (ie, do not call release()).\n   */\n  public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n    if (reader == null) {\n      getReader(context).decRef();\n      assert reader != null;\n    }\n    shared = true;\n    if (liveDocs != null) {\n      return new SegmentReader(reader.getSegmentInfo(), reader.core, liveDocs, info.info.getDocCount() - info.getDelCount() - pendingDeleteCount);\n    } else {\n      assert reader.getLiveDocs() == liveDocs;\n      reader.incRef();\n      return reader;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a ref to a clone.  NOTE: this clone is not\n   * enrolled in the pool, so you should simply close()\n   * it when you're done (ie, do not call release()).\n   */\n  public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n    if (reader == null) {\n      getReader(context).decRef();\n      assert reader != null;\n    }\n    shared = true;\n    if (liveDocs != null) {\n      return new SegmentReader(reader.getSegmentInfo(), reader.core, liveDocs, info.info.docCount - info.getDelCount() - pendingDeleteCount);\n    } else {\n      assert reader.getLiveDocs() == liveDocs;\n      reader.incRef();\n      return reader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","sourceNew":"  /**\n   * Returns a ref to a clone.  NOTE: this clone is not\n   * enrolled in the pool, so you should simply close()\n   * it when you're done (ie, do not call release()).\n   */\n  public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n    if (reader == null) {\n      getReader(context).decRef();\n      assert reader != null;\n    }\n    shared = true;\n    if (liveDocs != null) {\n      return new SegmentReader(reader.getSegmentInfo(), reader.core, liveDocs, info.info.getDocCount() - info.getDelCount() - pendingDeleteCount);\n    } else {\n      assert reader.getLiveDocs() == liveDocs;\n      reader.incRef();\n      return reader;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a ref to a clone.  NOTE: this clone is not\n   * enrolled in the pool, so you should simply close()\n   * it when you're done (ie, do not call release()).\n   */\n  public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n    if (reader == null) {\n      getReader(context).decRef();\n      assert reader != null;\n    }\n    shared = true;\n    if (liveDocs != null) {\n      return new SegmentReader(reader.getSegmentInfo(), reader.core, liveDocs, info.docCount - info.getDelCount() - pendingDeleteCount);\n    } else {\n      assert reader.getLiveDocs() == liveDocs;\n      reader.incRef();\n      return reader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e072d0b1fc19e0533d8ce432eed245196bca6fde","date":1379265112,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","sourceNew":"  /**\n   * Returns a ref to a clone.  NOTE: this clone is not\n   * enrolled in the pool, so you should simply close()\n   * it when you're done (ie, do not call release()).\n   */\n  public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n    getReader(true, context).decRef(); // make sure we enroll a new reader if there are field updates\n    assert reader != null;\n    liveDocsShared = true;\n    if (liveDocs != null) {\n      return new SegmentReader(reader.getSegmentInfo(), reader, liveDocs, info.info.getDocCount() - info.getDelCount() - pendingDeleteCount);\n    } else {\n      assert reader.getLiveDocs() == liveDocs;\n      reader.incRef();\n      return reader;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a ref to a clone.  NOTE: this clone is not\n   * enrolled in the pool, so you should simply close()\n   * it when you're done (ie, do not call release()).\n   */\n  public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n    if (reader == null) {\n      getReader(context).decRef();\n      assert reader != null;\n    }\n    shared = true;\n    if (liveDocs != null) {\n      return new SegmentReader(reader.getSegmentInfo(), reader.core, liveDocs, info.info.getDocCount() - info.getDelCount() - pendingDeleteCount);\n    } else {\n      assert reader.getLiveDocs() == liveDocs;\n      reader.incRef();\n      return reader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"baa23b5db56be939827f4340a4c7cfd3bcb8088c","date":1381177715,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","sourceNew":"  /**\n   * Returns a ref to a clone. NOTE: you should decRef() the reader when you're\n   * dont (ie do not call close()).\n   */\n  public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n    getReader(true, context).decRef(); // make sure we enroll a new reader if there are field updates\n    assert reader != null;\n    liveDocsShared = true;\n    if (liveDocs != null) {\n      return new SegmentReader(reader.getSegmentInfo(), reader, liveDocs, info.info.getDocCount() - info.getDelCount() - pendingDeleteCount);\n    } else {\n      assert reader.getLiveDocs() == liveDocs;\n      reader.incRef();\n      return reader;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a ref to a clone.  NOTE: this clone is not\n   * enrolled in the pool, so you should simply close()\n   * it when you're done (ie, do not call release()).\n   */\n  public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n    getReader(true, context).decRef(); // make sure we enroll a new reader if there are field updates\n    assert reader != null;\n    liveDocsShared = true;\n    if (liveDocs != null) {\n      return new SegmentReader(reader.getSegmentInfo(), reader, liveDocs, info.info.getDocCount() - info.getDelCount() - pendingDeleteCount);\n    } else {\n      assert reader.getLiveDocs() == liveDocs;\n      reader.incRef();\n      return reader;\n    }\n  }\n\n","bugFix":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe","date":1381909398,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","sourceNew":"  /**\n   * Returns a ref to a clone. NOTE: you should decRef() the reader when you're\n   * dont (ie do not call close()).\n   */\n  public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n    if (reader == null) {\n      getReader(context).decRef();\n      assert reader != null;\n    }\n    liveDocsShared = true;\n    if (liveDocs != null) {\n      return new SegmentReader(reader.getSegmentInfo(), reader, liveDocs, info.info.getDocCount() - info.getDelCount() - pendingDeleteCount);\n    } else {\n      assert reader.getLiveDocs() == liveDocs;\n      reader.incRef();\n      return reader;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a ref to a clone. NOTE: you should decRef() the reader when you're\n   * dont (ie do not call close()).\n   */\n  public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n    getReader(true, context).decRef(); // make sure we enroll a new reader if there are field updates\n    assert reader != null;\n    liveDocsShared = true;\n    if (liveDocs != null) {\n      return new SegmentReader(reader.getSegmentInfo(), reader, liveDocs, info.info.getDocCount() - info.getDelCount() - pendingDeleteCount);\n    } else {\n      assert reader.getLiveDocs() == liveDocs;\n      reader.incRef();\n      return reader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReadOnlyClone(IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","sourceNew":"  /**\n   * Returns a ref to a clone. NOTE: you should decRef() the reader when you're\n   * dont (ie do not call close()).\n   */\n  public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n    if (reader == null) {\n      getReader(context).decRef();\n      assert reader != null;\n    }\n    liveDocsShared = true;\n    if (liveDocs != null) {\n      return new SegmentReader(reader.getSegmentInfo(), reader, liveDocs, info.info.getDocCount() - info.getDelCount() - pendingDeleteCount);\n    } else {\n      assert reader.getLiveDocs() == liveDocs;\n      reader.incRef();\n      return reader;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a ref to a clone. NOTE: you should decRef() the reader when you're\n   * dont (ie do not call close()).\n   */\n  public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n    if (reader == null) {\n      getReader(context).decRef();\n      assert reader != null;\n    }\n    liveDocsShared = true;\n    if (liveDocs != null) {\n      return new SegmentReader(reader.getSegmentInfo(), reader, liveDocs, info.info.getDocCount() - info.getDelCount() - pendingDeleteCount);\n    } else {\n      assert reader.getLiveDocs() == liveDocs;\n      reader.incRef();\n      return reader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3","203d7d3cb7712e10ef33009a63247ae40c302d7a"],"baa23b5db56be939827f4340a4c7cfd3bcb8088c":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe":["baa23b5db56be939827f4340a4c7cfd3bcb8088c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"203d7d3cb7712e10ef33009a63247ae40c302d7a":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"]},"commit2Childs":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["baa23b5db56be939827f4340a4c7cfd3bcb8088c"],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"baa23b5db56be939827f4340a4c7cfd3bcb8088c":["1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe"],"1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["203d7d3cb7712e10ef33009a63247ae40c302d7a"],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["38e3b736c7ca086d61b7dbb841c905ee115490da","615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"203d7d3cb7712e10ef33009a63247ae40c302d7a":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}