{"path":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testDisablingServer().mjava","commits":[{"id":"78a6940133670e0174590da7b3d490e837698176","date":1335202499,"type":0,"author":"Stefan Matheis","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testDisablingServer().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDisablingServer() throws Exception {\n    \n        \n    healthcheckFile.createNewFile();\n    \n    handler.handleEnable(healthcheck, false);\n    \n    assertFalse(healthcheckFile.exists());\n\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad826eef7abbe5ff5f62d508c87065b81010c4c6","date":1336074973,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testDisablingServer().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testDisablingServer().mjava","sourceNew":"  public void testDisablingServer() throws Exception {\n\n    assertTrue(! healthcheckFile.exists());\n        \n    healthcheckFile.createNewFile();\n\n    // first make sure that ping responds back that the service is enabled\n\n    SolrQueryResponse rsp = makeRequest(handler, req());\n    assertEquals(\"OK\", rsp.getValues().get(\"status\"));\n\n    // now disable\n    \n    makeRequest(handler, req(\"action\", \"disable\"));\n    \n    assertFalse(healthcheckFile.exists());\n\n    // now make sure that ping responds back that the service is disabled\n\n    try {\n      makeRequest(handler, req());\n      fail(\"Should have thrown a SolrException because not enabled yet\");\n    } catch (SolrException se){\n      assertEquals(SolrException.ErrorCode.SERVICE_UNAVAILABLE.code,se.code());\n    }\n    \n    // disable when already disabled shouldn't cause any problems\n    makeRequest(handler, req(\"action\", \"disable\"));\n    assertFalse(healthcheckFile.exists());\n    \n  }\n\n","sourceOld":"  @Test\n  public void testDisablingServer() throws Exception {\n    \n        \n    healthcheckFile.createNewFile();\n    \n    handler.handleEnable(healthcheck, false);\n    \n    assertFalse(healthcheckFile.exists());\n\n    \n  }\n\n","bugFix":null,"bugIntro":["03921e13f17e0e7ebdcddd51033044f34076348d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"31d1dc893fd6ef4249e83e0a62759475b0e03e5c","date":1352140863,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testDisablingServer().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testDisablingServer().mjava","sourceNew":"  @Ignore\n  public void testDisablingServer() throws Exception {\n\n    assertTrue(! healthcheckFile.exists());\n        \n    healthcheckFile.createNewFile();\n\n    // first make sure that ping responds back that the service is enabled\n\n    SolrQueryResponse rsp = makeRequest(handler, req());\n    assertEquals(\"OK\", rsp.getValues().get(\"status\"));\n\n    // now disable\n    \n    makeRequest(handler, req(\"action\", \"disable\"));\n    \n    assertFalse(healthcheckFile.exists());\n\n    // now make sure that ping responds back that the service is disabled\n\n    try {\n      makeRequest(handler, req());\n      fail(\"Should have thrown a SolrException because not enabled yet\");\n    } catch (SolrException se){\n      assertEquals(SolrException.ErrorCode.SERVICE_UNAVAILABLE.code,se.code());\n    }\n    \n    // disable when already disabled shouldn't cause any problems\n    makeRequest(handler, req(\"action\", \"disable\"));\n    assertFalse(healthcheckFile.exists());\n    \n  }\n\n","sourceOld":"  public void testDisablingServer() throws Exception {\n\n    assertTrue(! healthcheckFile.exists());\n        \n    healthcheckFile.createNewFile();\n\n    // first make sure that ping responds back that the service is enabled\n\n    SolrQueryResponse rsp = makeRequest(handler, req());\n    assertEquals(\"OK\", rsp.getValues().get(\"status\"));\n\n    // now disable\n    \n    makeRequest(handler, req(\"action\", \"disable\"));\n    \n    assertFalse(healthcheckFile.exists());\n\n    // now make sure that ping responds back that the service is disabled\n\n    try {\n      makeRequest(handler, req());\n      fail(\"Should have thrown a SolrException because not enabled yet\");\n    } catch (SolrException se){\n      assertEquals(SolrException.ErrorCode.SERVICE_UNAVAILABLE.code,se.code());\n    }\n    \n    // disable when already disabled shouldn't cause any problems\n    makeRequest(handler, req(\"action\", \"disable\"));\n    assertFalse(healthcheckFile.exists());\n    \n  }\n\n","bugFix":null,"bugIntro":["03921e13f17e0e7ebdcddd51033044f34076348d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"03921e13f17e0e7ebdcddd51033044f34076348d","date":1352141460,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testDisablingServer().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testDisablingServer().mjava","sourceNew":"  public void testDisablingServer() throws Exception {\n\n    assertTrue(! healthcheckFile.exists());\n        \n    healthcheckFile.createNewFile();\n\n    // first make sure that ping responds back that the service is enabled\n\n    SolrQueryResponse rsp = makeRequest(handler, req());\n    assertEquals(\"OK\", rsp.getValues().get(\"status\"));\n\n    // now disable\n    \n    makeRequest(handler, req(\"action\", \"disable\"));\n    \n    assertFalse(healthcheckFile.exists());\n\n    // now make sure that ping responds back that the service is disabled    \n    SolrQueryResponse sqr = makeRequest(handler, req());\n    SolrException se = (SolrException) sqr.getException();\n    assertEquals(\n      \"Response should have been replaced with a 503 SolrException.\",\n      se.code(), SolrException.ErrorCode.SERVICE_UNAVAILABLE.code);\n    \n    // disable when already disabled shouldn't cause any problems\n    makeRequest(handler, req(\"action\", \"disable\"));\n    assertFalse(healthcheckFile.exists());\n    \n  }\n\n","sourceOld":"  @Ignore\n  public void testDisablingServer() throws Exception {\n\n    assertTrue(! healthcheckFile.exists());\n        \n    healthcheckFile.createNewFile();\n\n    // first make sure that ping responds back that the service is enabled\n\n    SolrQueryResponse rsp = makeRequest(handler, req());\n    assertEquals(\"OK\", rsp.getValues().get(\"status\"));\n\n    // now disable\n    \n    makeRequest(handler, req(\"action\", \"disable\"));\n    \n    assertFalse(healthcheckFile.exists());\n\n    // now make sure that ping responds back that the service is disabled\n\n    try {\n      makeRequest(handler, req());\n      fail(\"Should have thrown a SolrException because not enabled yet\");\n    } catch (SolrException se){\n      assertEquals(SolrException.ErrorCode.SERVICE_UNAVAILABLE.code,se.code());\n    }\n    \n    // disable when already disabled shouldn't cause any problems\n    makeRequest(handler, req(\"action\", \"disable\"));\n    assertFalse(healthcheckFile.exists());\n    \n  }\n\n","bugFix":["31d1dc893fd6ef4249e83e0a62759475b0e03e5c","ad826eef7abbe5ff5f62d508c87065b81010c4c6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad826eef7abbe5ff5f62d508c87065b81010c4c6":["78a6940133670e0174590da7b3d490e837698176"],"78a6940133670e0174590da7b3d490e837698176":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"31d1dc893fd6ef4249e83e0a62759475b0e03e5c":["ad826eef7abbe5ff5f62d508c87065b81010c4c6"],"03921e13f17e0e7ebdcddd51033044f34076348d":["31d1dc893fd6ef4249e83e0a62759475b0e03e5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03921e13f17e0e7ebdcddd51033044f34076348d"]},"commit2Childs":{"ad826eef7abbe5ff5f62d508c87065b81010c4c6":["31d1dc893fd6ef4249e83e0a62759475b0e03e5c"],"78a6940133670e0174590da7b3d490e837698176":["ad826eef7abbe5ff5f62d508c87065b81010c4c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78a6940133670e0174590da7b3d490e837698176"],"31d1dc893fd6ef4249e83e0a62759475b0e03e5c":["03921e13f17e0e7ebdcddd51033044f34076348d"],"03921e13f17e0e7ebdcddd51033044f34076348d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}