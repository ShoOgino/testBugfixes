{"path":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetCounts2#beforeClassCountingFacetsAggregatorTest().mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetCounts2#beforeClassCountingFacetsAggregatorTest().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts2#beforeClassCountingFacetsAggregatorTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassCountingFacetsAggregatorTest() throws Exception {\n    indexDir = newDirectory();\n    taxoDir = newDirectory();\n    \n    // create an index which has:\n    // 1. Segment with no categories, but matching results\n    // 2. Segment w/ categories, but no results\n    // 3. Segment w/ categories and results\n    // 4. Segment w/ categories, but only some results\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges, so we can control the index segments\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n\n    allExpectedCounts = newCounts();\n    termExpectedCounts = newCounts();\n    \n    // segment w/ no categories\n    indexDocsNoFacets(indexWriter);\n\n    // segment w/ categories, no content\n    indexDocsWithFacetsNoTerms(indexWriter, taxoWriter, allExpectedCounts);\n\n    // segment w/ categories and content\n    indexDocsWithFacetsAndTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    // segment w/ categories and some content\n    indexDocsWithFacetsAndSomeTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    IOUtils.close(indexWriter, taxoWriter);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassCountingFacetsAggregatorTest() throws Exception {\n    indexDir = newDirectory();\n    taxoDir = newDirectory();\n    \n    // create an index which has:\n    // 1. Segment with no categories, but matching results\n    // 2. Segment w/ categories, but no results\n    // 3. Segment w/ categories and results\n    // 4. Segment w/ categories, but only some results\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges, so we can control the index segments\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n\n    allExpectedCounts = newCounts();\n    termExpectedCounts = newCounts();\n    \n    // segment w/ no categories\n    indexDocsNoFacets(indexWriter);\n\n    // segment w/ categories, no content\n    indexDocsWithFacetsNoTerms(indexWriter, taxoWriter, allExpectedCounts);\n\n    // segment w/ categories and content\n    indexDocsWithFacetsAndTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    // segment w/ categories and some content\n    indexDocsWithFacetsAndSomeTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    IOUtils.close(indexWriter, taxoWriter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts2#beforeClassCountingFacetsAggregatorTest().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetCounts2#beforeClassCountingFacetsAggregatorTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassCountingFacetsAggregatorTest() throws Exception {\n    indexDir = newDirectory();\n    taxoDir = newDirectory();\n    \n    // create an index which has:\n    // 1. Segment with no categories, but matching results\n    // 2. Segment w/ categories, but no results\n    // 3. Segment w/ categories and results\n    // 4. Segment w/ categories, but only some results\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges, so we can control the index segments\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n\n    allExpectedCounts = newCounts();\n    termExpectedCounts = newCounts();\n    \n    // segment w/ no categories\n    indexDocsNoFacets(indexWriter);\n\n    // segment w/ categories, no content\n    indexDocsWithFacetsNoTerms(indexWriter, taxoWriter, allExpectedCounts);\n\n    // segment w/ categories and content\n    indexDocsWithFacetsAndTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    // segment w/ categories and some content\n    indexDocsWithFacetsAndSomeTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    IOUtils.close(indexWriter, taxoWriter);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassCountingFacetsAggregatorTest() throws Exception {\n    indexDir = newDirectory();\n    taxoDir = newDirectory();\n    \n    // create an index which has:\n    // 1. Segment with no categories, but matching results\n    // 2. Segment w/ categories, but no results\n    // 3. Segment w/ categories and results\n    // 4. Segment w/ categories, but only some results\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges, so we can control the index segments\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n\n    allExpectedCounts = newCounts();\n    termExpectedCounts = newCounts();\n    \n    // segment w/ no categories\n    indexDocsNoFacets(indexWriter);\n\n    // segment w/ categories, no content\n    indexDocsWithFacetsNoTerms(indexWriter, taxoWriter, allExpectedCounts);\n\n    // segment w/ categories and content\n    indexDocsWithFacetsAndTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    // segment w/ categories and some content\n    indexDocsWithFacetsAndSomeTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    IOUtils.close(indexWriter, taxoWriter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4edc984f0f4ac77c37e48ace2932f780f888453c":["21d36d0db865f7b84026b447bec653469a6e66df"],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4edc984f0f4ac77c37e48ace2932f780f888453c":[],"21d36d0db865f7b84026b447bec653469a6e66df":["4edc984f0f4ac77c37e48ace2932f780f888453c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4edc984f0f4ac77c37e48ace2932f780f888453c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}