{"path":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#_testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  // nocommit\n  public void _testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ef87af8c7bd0f8429622b83aa74202383f2e757","date":1280262785,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#_testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  // nocommit\n  public void _testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","date":1280297653,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(mainDir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(mainDir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","date":1297940445,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        mainDir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(false,2))\n    );\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["3bb13258feba31ab676502787ab2e1779f129b7a","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["d572389229127c297dd1fa5ce4758e1cec41e799"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["06584e6e98d592b34e1329b384182f368d2025e8"],"06584e6e98d592b34e1329b384182f368d2025e8":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["f1bdbf92da222965b46c0a942c3857ba56e5c638","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":["5ef87af8c7bd0f8429622b83aa74202383f2e757"],"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["6c18273ea5b3974d2f30117f46f1ae416c28f727"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1f653cfcf159baeaafe5d01682a911e95bba4012","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["5ef87af8c7bd0f8429622b83aa74202383f2e757"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["6c18273ea5b3974d2f30117f46f1ae416c28f727","b21422ff1d1d56499dec481f193b402e5e8def5b"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3":["f1bdbf92da222965b46c0a942c3857ba56e5c638","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["06584e6e98d592b34e1329b384182f368d2025e8","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["8dc26bfa5ebbc55b5a04fbec545dfcec647b046b"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"3bb13258feba31ab676502787ab2e1779f129b7a":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}