{"path":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#backupIndex(Directory,SnapshotDeletionPolicy).mjava","commits":[{"id":"3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5","date":1196805804,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#backupIndex(Directory,SnapshotDeletionPolicy).mjava","pathOld":"/dev/null","sourceNew":"  /** Example showing how to use the SnapshotDeletionPolicy\n   *  to take a backup.  This method does not really do a\n   *  backup; instead, it reads every byte of every file\n   *  just to test that the files indeed exist and are\n   *  readable even while the index is changing. */\n  public void backupIndex(Directory dir, SnapshotDeletionPolicy dp) throws IOException {\n\n    // To backup an index we first take a snapshot:\n    IndexCommitPoint cp = dp.snapshot();\n    try {\n\n      // While we hold the snapshot, and nomatter how long\n      // we take to do the backup, the IndexWriter will\n      // never delete the files in the snapshot:\n      Collection files = cp.getFileNames();\n      Iterator it = files.iterator();\n      while(it.hasNext()) {\n        final String fileName = (String) it.next();\n        // NOTE: in a real backup you would not use\n        // readFile; you would need to use something else\n        // that copies the file to a backup location.  This\n        // could even be a spawned shell process (eg \"tar\",\n        // \"zip\") that takes the list of files and builds a\n        // backup.\n        readFile(dir, fileName);\n      }\n\n    } finally {\n      // Make sure to release the snapshot, otherwise these\n      // files will never be deleted during this IndexWriter\n      // session:\n      dp.release();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d60f4e15b3e2fb549c23c8f2096249d439876df8","date":1204035825,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#backupIndex(Directory,SnapshotDeletionPolicy).mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#backupIndex(Directory,SnapshotDeletionPolicy).mjava","sourceNew":"  /** Example showing how to use the SnapshotDeletionPolicy\n   *  to take a backup.  This method does not really do a\n   *  backup; instead, it reads every byte of every file\n   *  just to test that the files indeed exist and are\n   *  readable even while the index is changing. */\n  public void backupIndex(Directory dir, SnapshotDeletionPolicy dp) throws IOException {\n    // To backup an index we first take a snapshot:\n    try {\n      copyFiles(dir, dp, dp.snapshot());\n    } finally {\n      // Make sure to release the snapshot, otherwise these\n      // files will never be deleted during this IndexWriter\n      // session:\n      dp.release();\n    }\n  }\n\n","sourceOld":"  /** Example showing how to use the SnapshotDeletionPolicy\n   *  to take a backup.  This method does not really do a\n   *  backup; instead, it reads every byte of every file\n   *  just to test that the files indeed exist and are\n   *  readable even while the index is changing. */\n  public void backupIndex(Directory dir, SnapshotDeletionPolicy dp) throws IOException {\n\n    // To backup an index we first take a snapshot:\n    IndexCommitPoint cp = dp.snapshot();\n    try {\n\n      // While we hold the snapshot, and nomatter how long\n      // we take to do the backup, the IndexWriter will\n      // never delete the files in the snapshot:\n      Collection files = cp.getFileNames();\n      Iterator it = files.iterator();\n      while(it.hasNext()) {\n        final String fileName = (String) it.next();\n        // NOTE: in a real backup you would not use\n        // readFile; you would need to use something else\n        // that copies the file to a backup location.  This\n        // could even be a spawned shell process (eg \"tar\",\n        // \"zip\") that takes the list of files and builds a\n        // backup.\n        readFile(dir, fileName);\n      }\n\n    } finally {\n      // Make sure to release the snapshot, otherwise these\n      // files will never be deleted during this IndexWriter\n      // session:\n      dp.release();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a1559506fd82ede79bd8e60facef2a57524e175","date":1204808228,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#backupIndex(Directory,SnapshotDeletionPolicy).mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#backupIndex(Directory,SnapshotDeletionPolicy).mjava","sourceNew":"  /** Example showing how to use the SnapshotDeletionPolicy\n   *  to take a backup.  This method does not really do a\n   *  backup; instead, it reads every byte of every file\n   *  just to test that the files indeed exist and are\n   *  readable even while the index is changing. */\n  public void backupIndex(Directory dir, SnapshotDeletionPolicy dp) throws IOException {\n    // To backup an index we first take a snapshot:\n    try {\n      copyFiles(dir, (IndexCommit) dp.snapshot());\n    } finally {\n      // Make sure to release the snapshot, otherwise these\n      // files will never be deleted during this IndexWriter\n      // session:\n      dp.release();\n    }\n  }\n\n","sourceOld":"  /** Example showing how to use the SnapshotDeletionPolicy\n   *  to take a backup.  This method does not really do a\n   *  backup; instead, it reads every byte of every file\n   *  just to test that the files indeed exist and are\n   *  readable even while the index is changing. */\n  public void backupIndex(Directory dir, SnapshotDeletionPolicy dp) throws IOException {\n    // To backup an index we first take a snapshot:\n    try {\n      copyFiles(dir, dp, dp.snapshot());\n    } finally {\n      // Make sure to release the snapshot, otherwise these\n      // files will never be deleted during this IndexWriter\n      // session:\n      dp.release();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba7fd1181f778e9954547e8e6a47587ebf08e3fb","date":1238267455,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#backupIndex(Directory,SnapshotDeletionPolicy).mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#backupIndex(Directory,SnapshotDeletionPolicy).mjava","sourceNew":"  /** Example showing how to use the SnapshotDeletionPolicy\n   *  to take a backup.  This method does not really do a\n   *  backup; instead, it reads every byte of every file\n   *  just to test that the files indeed exist and are\n   *  readable even while the index is changing. */\n  public void backupIndex(Directory dir, SnapshotDeletionPolicy dp) throws Exception {\n    // To backup an index we first take a snapshot:\n    try {\n      copyFiles(dir, (IndexCommit) dp.snapshot());\n    } finally {\n      // Make sure to release the snapshot, otherwise these\n      // files will never be deleted during this IndexWriter\n      // session:\n      dp.release();\n    }\n  }\n\n","sourceOld":"  /** Example showing how to use the SnapshotDeletionPolicy\n   *  to take a backup.  This method does not really do a\n   *  backup; instead, it reads every byte of every file\n   *  just to test that the files indeed exist and are\n   *  readable even while the index is changing. */\n  public void backupIndex(Directory dir, SnapshotDeletionPolicy dp) throws IOException {\n    // To backup an index we first take a snapshot:\n    try {\n      copyFiles(dir, (IndexCommit) dp.snapshot());\n    } finally {\n      // Make sure to release the snapshot, otherwise these\n      // files will never be deleted during this IndexWriter\n      // session:\n      dp.release();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#backupIndex(Directory,SnapshotDeletionPolicy).mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#backupIndex(Directory,SnapshotDeletionPolicy).mjava","sourceNew":"  /** Example showing how to use the SnapshotDeletionPolicy\n   *  to take a backup.  This method does not really do a\n   *  backup; instead, it reads every byte of every file\n   *  just to test that the files indeed exist and are\n   *  readable even while the index is changing. */\n  public void backupIndex(Directory dir, SnapshotDeletionPolicy dp) throws Exception {\n    // To backup an index we first take a snapshot:\n    try {\n      copyFiles(dir,  dp.snapshot());\n    } finally {\n      // Make sure to release the snapshot, otherwise these\n      // files will never be deleted during this IndexWriter\n      // session:\n      dp.release();\n    }\n  }\n\n","sourceOld":"  /** Example showing how to use the SnapshotDeletionPolicy\n   *  to take a backup.  This method does not really do a\n   *  backup; instead, it reads every byte of every file\n   *  just to test that the files indeed exist and are\n   *  readable even while the index is changing. */\n  public void backupIndex(Directory dir, SnapshotDeletionPolicy dp) throws Exception {\n    // To backup an index we first take a snapshot:\n    try {\n      copyFiles(dir, (IndexCommit) dp.snapshot());\n    } finally {\n      // Make sure to release the snapshot, otherwise these\n      // files will never be deleted during this IndexWriter\n      // session:\n      dp.release();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSnapshotDeletionPolicy#backupIndex(Directory,SnapshotDeletionPolicy).mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#backupIndex(Directory,SnapshotDeletionPolicy).mjava","sourceNew":"  /** Example showing how to use the SnapshotDeletionPolicy\n   *  to take a backup.  This method does not really do a\n   *  backup; instead, it reads every byte of every file\n   *  just to test that the files indeed exist and are\n   *  readable even while the index is changing. */\n  public void backupIndex(Directory dir, SnapshotDeletionPolicy dp) throws Exception {\n    // To backup an index we first take a snapshot:\n    try {\n      copyFiles(dir,  dp.snapshot());\n    } finally {\n      // Make sure to release the snapshot, otherwise these\n      // files will never be deleted during this IndexWriter\n      // session:\n      dp.release();\n    }\n  }\n\n","sourceOld":"  /** Example showing how to use the SnapshotDeletionPolicy\n   *  to take a backup.  This method does not really do a\n   *  backup; instead, it reads every byte of every file\n   *  just to test that the files indeed exist and are\n   *  readable even while the index is changing. */\n  public void backupIndex(Directory dir, SnapshotDeletionPolicy dp) throws Exception {\n    // To backup an index we first take a snapshot:\n    try {\n      copyFiles(dir,  dp.snapshot());\n    } finally {\n      // Make sure to release the snapshot, otherwise these\n      // files will never be deleted during this IndexWriter\n      // session:\n      dp.release();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d60f4e15b3e2fb549c23c8f2096249d439876df8":["3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5"],"3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["8a1559506fd82ede79bd8e60facef2a57524e175"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"8a1559506fd82ede79bd8e60facef2a57524e175":["d60f4e15b3e2fb549c23c8f2096249d439876df8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"d60f4e15b3e2fb549c23c8f2096249d439876df8":["8a1559506fd82ede79bd8e60facef2a57524e175"],"3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5":["d60f4e15b3e2fb549c23c8f2096249d439876df8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8a1559506fd82ede79bd8e60facef2a57524e175":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}