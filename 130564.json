{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/response/json/HeatmapJsonFacet#isHeatmapFacet(NamedList[Object]).mjava","commits":[{"id":"07feaa572dd3645c2013be127176350b3f4cd6a2","date":1542492880,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/json/HeatmapJsonFacet#isHeatmapFacet(NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A NamedList is a proper \"heatmap\" response if it contains <i>all</i> expected properties\n   *\n   * We try to be rather strict in determining whether {@code potentialHeatmapValues} is a \"heatmap\".  Users can name\n   * subfacets arbitrarily, so having some names match those expected in a \"heatmap\" response could just be coincidence.\n   * <p>\n   * Heatmap facets do not support subfacets.\n   */\n  public static boolean isHeatmapFacet(NamedList<Object> potentialHeatmapValues) {\n    boolean hasGridLevel = false;\n    boolean hasColumns = false;\n    boolean hasRows = false;\n    boolean hasMinX = false;\n    boolean hasMaxX = false;\n    boolean hasMinY = false;\n    boolean hasMaxY = false;\n    boolean hasCountGrid = false;\n    for (Map.Entry<String, Object> entry : potentialHeatmapValues) {\n      String key = entry.getKey();\n      if (\"gridLevel\".equals(key)) {\n        hasGridLevel = true;\n      } else if (\"columns\".equals(key)) {\n        hasColumns = true;\n      } else if (\"rows\".equals(key)) {\n        hasRows = true;\n      } else if (\"minX\".equals(key)) {\n        hasMinX = true;\n      } else if (\"maxX\".equals(key)) {\n        hasMaxX = true;\n      } else if (\"minY\".equals(key)) {\n        hasMinY = true;\n      } else if (\"maxY\".equals(key)){\n        hasMaxY = true;\n      } else if (key != null && key.startsWith(\"counts_\")) {\n        hasCountGrid = true;\n      }\n    }\n\n    return potentialHeatmapValues.size() == 8 && hasGridLevel && hasColumns && hasRows && hasMinX && hasMaxX && hasMinY\n        && hasMaxY && hasCountGrid;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["07feaa572dd3645c2013be127176350b3f4cd6a2"],"07feaa572dd3645c2013be127176350b3f4cd6a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["07feaa572dd3645c2013be127176350b3f4cd6a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"07feaa572dd3645c2013be127176350b3f4cd6a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}