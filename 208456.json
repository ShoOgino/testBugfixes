{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionQuery#rewrite(IndexReader).mjava","commits":[{"id":"8c33f6677a2078739058f81eca1df69d12cd62b0","date":1432799589,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionQuery#rewrite(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    byte type = 0;\n    boolean first = true;\n    Terms terms;\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader leafReader = context.reader();\n      try {\n        if ((terms = leafReader.terms(getField())) == null) {\n          continue;\n        }\n      } catch (IOException e) {\n        continue;\n      }\n      if (terms instanceof CompletionTerms) {\n        CompletionTerms completionTerms = (CompletionTerms) terms;\n        byte t = completionTerms.getType();\n        if (first) {\n          type = t;\n          first = false;\n        } else if (type != t) {\n          throw new IllegalStateException(getField() + \" has values of multiple types\");\n        }\n      }\n    }\n\n    if (first == false) {\n      if (this instanceof ContextQuery) {\n        if (type == SuggestField.TYPE) {\n          throw new IllegalStateException(this.getClass().getSimpleName()\n              + \" can not be executed against a non context-enabled SuggestField: \"\n              + getField());\n        }\n      } else {\n        if (type == ContextSuggestField.TYPE) {\n          return new ContextQuery(this);\n        }\n      }\n    }\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionQuery#rewrite(IndexReader).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    byte type = 0;\n    boolean first = true;\n    Terms terms;\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader leafReader = context.reader();\n      try {\n        if ((terms = leafReader.terms(getField())) == null) {\n          continue;\n        }\n      } catch (IOException e) {\n        continue;\n      }\n      if (terms instanceof CompletionTerms) {\n        CompletionTerms completionTerms = (CompletionTerms) terms;\n        byte t = completionTerms.getType();\n        if (first) {\n          type = t;\n          first = false;\n        } else if (type != t) {\n          throw new IllegalStateException(getField() + \" has values of multiple types\");\n        }\n      }\n    }\n\n    if (first == false) {\n      if (this instanceof ContextQuery) {\n        if (type == SuggestField.TYPE) {\n          throw new IllegalStateException(this.getClass().getSimpleName()\n              + \" can not be executed against a non context-enabled SuggestField: \"\n              + getField());\n        }\n      } else {\n        if (type == ContextSuggestField.TYPE) {\n          return new ContextQuery(this);\n        }\n      }\n    }\n    return super.rewrite(reader);\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    byte type = 0;\n    boolean first = true;\n    Terms terms;\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader leafReader = context.reader();\n      try {\n        if ((terms = leafReader.terms(getField())) == null) {\n          continue;\n        }\n      } catch (IOException e) {\n        continue;\n      }\n      if (terms instanceof CompletionTerms) {\n        CompletionTerms completionTerms = (CompletionTerms) terms;\n        byte t = completionTerms.getType();\n        if (first) {\n          type = t;\n          first = false;\n        } else if (type != t) {\n          throw new IllegalStateException(getField() + \" has values of multiple types\");\n        }\n      }\n    }\n\n    if (first == false) {\n      if (this instanceof ContextQuery) {\n        if (type == SuggestField.TYPE) {\n          throw new IllegalStateException(this.getClass().getSimpleName()\n              + \" can not be executed against a non context-enabled SuggestField: \"\n              + getField());\n        }\n      } else {\n        if (type == ContextSuggestField.TYPE) {\n          return new ContextQuery(this);\n        }\n      }\n    }\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}