{"path":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","pathOld":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","sourceNew":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    assertU(adoc(\"id\",\"A\"));\n    assertU(adoc(\"id\",\"B\"));\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    SolrQueryRequest ureq = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(ureq, false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n    ureq.close();\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    assertU(delI(\"B\"));\n\n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    ureq = req();\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand(ureq);\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    ureq.close();\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    assertU(adoc(\"id\",\"ZZZ\"));\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    assertU(adoc(\"id\",\"A\"));\n    assertU(adoc(\"id\",\"B\"));\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    SolrQueryRequest ureq = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(ureq, false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n    ureq.close();\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    assertU(delI(\"B\"));\n\n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    ureq = req();\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand(ureq);\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    ureq.close();\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    assertU(adoc(\"id\",\"ZZZ\"));\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","pathOld":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","sourceNew":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    assertU(adoc(\"id\",\"A\"));\n    assertU(adoc(\"id\",\"B\"));\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    SolrQueryRequest ureq = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(ureq, false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n    ureq.close();\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    assertU(delI(\"B\"));\n\n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    ureq = req();\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand(ureq);\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    ureq.close();\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    assertU(adoc(\"id\",\"ZZZ\"));\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    assertU(adoc(\"id\",\"A\"));\n    assertU(adoc(\"id\",\"B\"));\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    SolrQueryRequest ureq = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(ureq, false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n    ureq.close();\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    assertU(delI(\"B\"));\n\n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    ureq = req();\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand(ureq);\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    ureq.close();\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    assertU(adoc(\"id\",\"ZZZ\"));\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","pathOld":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","sourceNew":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    assertU(adoc(\"id\",\"A\"));\n    assertU(adoc(\"id\",\"B\"));\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    SolrQueryRequest ureq = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(ureq, false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n    ureq.close();\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    assertU(delI(\"B\"));\n\n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    ureq = req();\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand(ureq);\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    ureq.close();\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    assertU(adoc(\"id\",\"ZZZ\"));\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    assertU(adoc(\"id\",\"A\"));\n    assertU(adoc(\"id\",\"B\"));\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    SolrQueryRequest ureq = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(ureq, false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n    ureq.close();\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    assertU(delI(\"B\"));\n\n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    ureq = req();\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand(ureq);\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    ureq.close();\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    assertU(adoc(\"id\",\"ZZZ\"));\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","sourceNew":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    assertU(adoc(\"id\",\"A\"));\n    assertU(adoc(\"id\",\"B\"));\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    SolrQueryRequest ureq = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(ureq, false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n    ureq.close();\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    assertU(delI(\"B\"));\n\n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    ureq = req();\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand(ureq);\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    ureq.close();\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    assertU(adoc(\"id\",\"ZZZ\"));\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    assertU(adoc(\"id\",\"A\"));\n    assertU(adoc(\"id\",\"B\"));\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    SolrQueryRequest ureq = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(ureq, false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n    ureq.close();\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    assertU(delI(\"B\"));\n\n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    ureq = req();\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand(ureq);\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    ureq.close();\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    assertU(adoc(\"id\",\"ZZZ\"));\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc0fbfa191179ae7a0081ee1cf7da0464bcd8078","date":1469530061,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","sourceNew":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    assertU(adoc(\"id\",\"A\"));\n    assertU(adoc(\"id\",\"B\"));\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    SolrQueryRequest ureq = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(ureq, false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.longValue() );\n    assertEquals( 2, duh2.addCommandsCumulative.longValue() );\n    assertEquals( 0, duh2.commitCommands.longValue() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.longValue() );\n    assertEquals( 2, duh2.addCommandsCumulative.longValue() );\n    assertEquals( 1, duh2.commitCommands.longValue() );\n    ureq.close();\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    assertU(delI(\"B\"));\n\n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    ureq = req();\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand(ureq);\n    assertEquals( 1, duh2.deleteByIdCommands.longValue() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.longValue() );\n    assertEquals( 0, duh2.rollbackCommands.longValue() );\n    updater.rollback(rbkCmd);\n    ureq.close();\n    assertEquals( 0, duh2.deleteByIdCommands.longValue() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.longValue() );\n    assertEquals( 1, duh2.rollbackCommands.longValue() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    assertU(adoc(\"id\",\"ZZZ\"));\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    assertU(adoc(\"id\",\"A\"));\n    assertU(adoc(\"id\",\"B\"));\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    SolrQueryRequest ureq = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(ureq, false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n    ureq.close();\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    assertU(delI(\"B\"));\n\n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    ureq = req();\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand(ureq);\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    ureq.close();\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    assertU(adoc(\"id\",\"ZZZ\"));\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","sourceNew":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    assertU(adoc(\"id\",\"A\"));\n    assertU(adoc(\"id\",\"B\"));\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    SolrQueryRequest ureq = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(ureq, false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.longValue() );\n    assertEquals( 2, duh2.addCommandsCumulative.longValue() );\n    assertEquals( 0, duh2.commitCommands.longValue() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.longValue() );\n    assertEquals( 2, duh2.addCommandsCumulative.longValue() );\n    assertEquals( 1, duh2.commitCommands.longValue() );\n    ureq.close();\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    assertU(delI(\"B\"));\n\n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    ureq = req();\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand(ureq);\n    assertEquals( 1, duh2.deleteByIdCommands.longValue() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.longValue() );\n    assertEquals( 0, duh2.rollbackCommands.longValue() );\n    updater.rollback(rbkCmd);\n    ureq.close();\n    assertEquals( 0, duh2.deleteByIdCommands.longValue() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.longValue() );\n    assertEquals( 1, duh2.rollbackCommands.longValue() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    assertU(adoc(\"id\",\"ZZZ\"));\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    assertU(adoc(\"id\",\"A\"));\n    assertU(adoc(\"id\",\"B\"));\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    SolrQueryRequest ureq = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(ureq, false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n    ureq.close();\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    assertU(delI(\"B\"));\n\n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    ureq = req();\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand(ureq);\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    ureq.close();\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    assertU(adoc(\"id\",\"ZZZ\"));\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","sourceNew":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    assertU(adoc(\"id\",\"A\"));\n    assertU(adoc(\"id\",\"B\"));\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    SolrQueryRequest ureq = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(ureq, false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.longValue() );\n    assertEquals( 2, duh2.addCommandsCumulative.longValue() );\n    assertEquals( 0, duh2.commitCommands.longValue() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.longValue() );\n    assertEquals( 2, duh2.addCommandsCumulative.longValue() );\n    assertEquals( 1, duh2.commitCommands.longValue() );\n    ureq.close();\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    assertU(delI(\"B\"));\n\n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    ureq = req();\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand(ureq);\n    assertEquals( 1, duh2.deleteByIdCommands.longValue() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.longValue() );\n    assertEquals( 0, duh2.rollbackCommands.longValue() );\n    updater.rollback(rbkCmd);\n    ureq.close();\n    assertEquals( 0, duh2.deleteByIdCommands.longValue() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.longValue() );\n    assertEquals( 1, duh2.rollbackCommands.longValue() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    assertU(adoc(\"id\",\"ZZZ\"));\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    assertU(adoc(\"id\",\"A\"));\n    assertU(adoc(\"id\",\"B\"));\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    SolrQueryRequest ureq = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(ureq, false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n    ureq.close();\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    assertU(delI(\"B\"));\n\n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    ureq = req();\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand(ureq);\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    ureq.close();\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    assertU(adoc(\"id\",\"ZZZ\"));\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52c21eddb989aed5815d30ea4c8abf481ace8ad","date":1488795043,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","sourceNew":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    assertU(adoc(\"id\",\"A\"));\n    assertU(adoc(\"id\",\"B\"));\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    SolrQueryRequest ureq = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(ureq, false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.longValue() );\n    assertEquals( 2, duh2.addCommandsCumulative.getCount() );\n    assertEquals( 0, duh2.commitCommands.getCount() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.longValue() );\n    assertEquals( 2, duh2.addCommandsCumulative.getCount() );\n    assertEquals( 1, duh2.commitCommands.getCount() );\n    ureq.close();\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    assertU(delI(\"B\"));\n\n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    ureq = req();\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand(ureq);\n    assertEquals( 1, duh2.deleteByIdCommands.longValue() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.getCount() );\n    assertEquals( 0, duh2.rollbackCommands.getCount() );\n    updater.rollback(rbkCmd);\n    ureq.close();\n    assertEquals( 0, duh2.deleteByIdCommands.longValue() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.getCount() );\n    assertEquals( 1, duh2.rollbackCommands.getCount() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    assertU(adoc(\"id\",\"ZZZ\"));\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    assertU(adoc(\"id\",\"A\"));\n    assertU(adoc(\"id\",\"B\"));\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    SolrQueryRequest ureq = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(ureq, false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.longValue() );\n    assertEquals( 2, duh2.addCommandsCumulative.longValue() );\n    assertEquals( 0, duh2.commitCommands.longValue() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.longValue() );\n    assertEquals( 2, duh2.addCommandsCumulative.longValue() );\n    assertEquals( 1, duh2.commitCommands.longValue() );\n    ureq.close();\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    assertU(delI(\"B\"));\n\n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    ureq = req();\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand(ureq);\n    assertEquals( 1, duh2.deleteByIdCommands.longValue() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.longValue() );\n    assertEquals( 0, duh2.rollbackCommands.longValue() );\n    updater.rollback(rbkCmd);\n    ureq.close();\n    assertEquals( 0, duh2.deleteByIdCommands.longValue() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.longValue() );\n    assertEquals( 1, duh2.rollbackCommands.longValue() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    assertU(adoc(\"id\",\"ZZZ\"));\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bc0fbfa191179ae7a0081ee1cf7da0464bcd8078":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e52c21eddb989aed5815d30ea4c8abf481ace8ad":["bc0fbfa191179ae7a0081ee1cf7da0464bcd8078"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","bc0fbfa191179ae7a0081ee1cf7da0464bcd8078"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","bc0fbfa191179ae7a0081ee1cf7da0464bcd8078"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e52c21eddb989aed5815d30ea4c8abf481ace8ad"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bc0fbfa191179ae7a0081ee1cf7da0464bcd8078","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"bc0fbfa191179ae7a0081ee1cf7da0464bcd8078":["e52c21eddb989aed5815d30ea4c8abf481ace8ad","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"e52c21eddb989aed5815d30ea4c8abf481ace8ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}