{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#test().mjava","commits":[{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 6)\n  public void test() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    docId = testIndexQueryDeleteHierarchical(docId);\n    \n    docId = testIndexingDocPerRequestWithHttpSolrClient(docId);\n    \n    testConcurrentIndexing(docId);\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n    \n    docId = testThatCantForwardToLeaderFails(docId);\n    \n    \n    docId = testIndexingBatchPerRequestWithHttpSolrClient(docId);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    docId = testIndexQueryDeleteHierarchical(docId);\n    \n    docId = testIndexingDocPerRequestWithHttpSolrClient(docId);\n    \n    testConcurrentIndexing(docId);\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n    \n    docId = testThatCantForwardToLeaderFails(docId);\n    \n    \n    docId = testIndexingBatchPerRequestWithHttpSolrClient(docId);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"747dd71fefcbc7142661c25334b74c518fef4d81","date":1423504825,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 6)\n  public void test() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    docId = testIndexQueryDeleteHierarchical(docId);\n    \n    docId = testIndexingDocPerRequestWithHttpSolrClient(docId);\n    \n    testConcurrentIndexing(docId);\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n\n    testDeleteByIdImplicitRouter();\n\n    testDeleteByIdCompositeRouterWithRouterField();\n\n    docId = testThatCantForwardToLeaderFails(docId);\n\n\n    docId = testIndexingBatchPerRequestWithHttpSolrClient(docId);\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 6)\n  public void test() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    docId = testIndexQueryDeleteHierarchical(docId);\n    \n    docId = testIndexingDocPerRequestWithHttpSolrClient(docId);\n    \n    testConcurrentIndexing(docId);\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n    \n    docId = testThatCantForwardToLeaderFails(docId);\n    \n    \n    docId = testIndexingBatchPerRequestWithHttpSolrClient(docId);\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cdd79356797aa0c48c7a38934a57b402a429194","date":1428951895,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 6)\n  public void test() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    docId = testIndexQueryDeleteHierarchical(docId);\n    \n    docId = testIndexingDocPerRequestWithHttpSolrClient(docId);\n    \n    testConcurrentIndexing(docId);\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n\n    // See SOLR-7384\n//    testDeleteByIdImplicitRouter();\n//\n//    testDeleteByIdCompositeRouterWithRouterField();\n\n    docId = testThatCantForwardToLeaderFails(docId);\n\n\n    docId = testIndexingBatchPerRequestWithHttpSolrClient(docId);\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 6)\n  public void test() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    docId = testIndexQueryDeleteHierarchical(docId);\n    \n    docId = testIndexingDocPerRequestWithHttpSolrClient(docId);\n    \n    testConcurrentIndexing(docId);\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n\n    testDeleteByIdImplicitRouter();\n\n    testDeleteByIdCompositeRouterWithRouterField();\n\n    docId = testThatCantForwardToLeaderFails(docId);\n\n\n    docId = testIndexingBatchPerRequestWithHttpSolrClient(docId);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","date":1533256859,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 6)\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void test() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    docId = testIndexQueryDeleteHierarchical(docId);\n    \n    docId = testIndexingDocPerRequestWithHttpSolrClient(docId);\n    \n    testConcurrentIndexing(docId);\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n\n    // See SOLR-7384\n//    testDeleteByIdImplicitRouter();\n//\n//    testDeleteByIdCompositeRouterWithRouterField();\n\n    docId = testThatCantForwardToLeaderFails(docId);\n\n\n    docId = testIndexingBatchPerRequestWithHttpSolrClient(docId);\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 6)\n  public void test() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    docId = testIndexQueryDeleteHierarchical(docId);\n    \n    docId = testIndexingDocPerRequestWithHttpSolrClient(docId);\n    \n    testConcurrentIndexing(docId);\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n\n    // See SOLR-7384\n//    testDeleteByIdImplicitRouter();\n//\n//    testDeleteByIdCompositeRouterWithRouterField();\n\n    docId = testThatCantForwardToLeaderFails(docId);\n\n\n    docId = testIndexingBatchPerRequestWithHttpSolrClient(docId);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14076e7b40405aa1f08702d8df762d08b5d44f70","date":1537071979,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 6)\n  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void test() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    docId = testIndexQueryDeleteHierarchical(docId);\n    \n    docId = testIndexingDocPerRequestWithHttpSolrClient(docId);\n    \n    testConcurrentIndexing(docId);\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n\n    // See SOLR-7384\n//    testDeleteByIdImplicitRouter();\n//\n//    testDeleteByIdCompositeRouterWithRouterField();\n\n    docId = testThatCantForwardToLeaderFails(docId);\n\n\n    docId = testIndexingBatchPerRequestWithHttpSolrClient(docId);\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 6)\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void test() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    docId = testIndexQueryDeleteHierarchical(docId);\n    \n    docId = testIndexingDocPerRequestWithHttpSolrClient(docId);\n    \n    testConcurrentIndexing(docId);\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n\n    // See SOLR-7384\n//    testDeleteByIdImplicitRouter();\n//\n//    testDeleteByIdCompositeRouterWithRouterField();\n\n    docId = testThatCantForwardToLeaderFails(docId);\n\n\n    docId = testIndexingBatchPerRequestWithHttpSolrClient(docId);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 6)\n  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void test() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    docId = testIndexQueryDeleteHierarchical(docId);\n    \n    docId = testIndexingDocPerRequestWithHttpSolrClient(docId);\n    \n    testConcurrentIndexing(docId);\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n\n    // See SOLR-7384\n//    testDeleteByIdImplicitRouter();\n//\n//    testDeleteByIdCompositeRouterWithRouterField();\n\n    docId = testThatCantForwardToLeaderFails(docId);\n\n\n    docId = testIndexingBatchPerRequestWithHttpSolrClient(docId);\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 6)\n  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void test() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    docId = testIndexQueryDeleteHierarchical(docId);\n    \n    docId = testIndexingDocPerRequestWithHttpSolrClient(docId);\n    \n    testConcurrentIndexing(docId);\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n\n    // See SOLR-7384\n//    testDeleteByIdImplicitRouter();\n//\n//    testDeleteByIdCompositeRouterWithRouterField();\n\n    docId = testThatCantForwardToLeaderFails(docId);\n\n\n    docId = testIndexingBatchPerRequestWithHttpSolrClient(docId);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b","date":1576537086,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#test().mjava","sourceNew":null,"sourceOld":"  @Test\n  @ShardsFixed(num = 6)\n  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void test() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    docId = testIndexQueryDeleteHierarchical(docId);\n    \n    docId = testIndexingDocPerRequestWithHttpSolrClient(docId);\n    \n    testConcurrentIndexing(docId);\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n\n    // See SOLR-7384\n//    testDeleteByIdImplicitRouter();\n//\n//    testDeleteByIdCompositeRouterWithRouterField();\n\n    docId = testThatCantForwardToLeaderFails(docId);\n\n\n    docId = testIndexingBatchPerRequestWithHttpSolrClient(docId);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b945b8f5bba0303382bc69d60c0c287714f23328","date":1576586294,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#test().mjava","sourceNew":null,"sourceOld":"  @Test\n  @ShardsFixed(num = 6)\n  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void test() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    docId = testIndexQueryDeleteHierarchical(docId);\n    \n    docId = testIndexingDocPerRequestWithHttpSolrClient(docId);\n    \n    testConcurrentIndexing(docId);\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n\n    // See SOLR-7384\n//    testDeleteByIdImplicitRouter();\n//\n//    testDeleteByIdCompositeRouterWithRouterField();\n\n    docId = testThatCantForwardToLeaderFails(docId);\n\n\n    docId = testIndexingBatchPerRequestWithHttpSolrClient(docId);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["7cdd79356797aa0c48c7a38934a57b402a429194"],"7cdd79356797aa0c48c7a38934a57b402a429194":["747dd71fefcbc7142661c25334b74c518fef4d81"],"abb23fcc2461782ab204e61213240feb77d355aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"14076e7b40405aa1f08702d8df762d08b5d44f70":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"747dd71fefcbc7142661c25334b74c518fef4d81":["abb23fcc2461782ab204e61213240feb77d355aa"],"b945b8f5bba0303382bc69d60c0c287714f23328":["8d35c84fdef07284c122012ca4000d3b7285a66e","0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["14076e7b40405aa1f08702d8df762d08b5d44f70"]},"commit2Childs":{"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["14076e7b40405aa1f08702d8df762d08b5d44f70"],"7cdd79356797aa0c48c7a38934a57b402a429194":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"abb23fcc2461782ab204e61213240feb77d355aa":["747dd71fefcbc7142661c25334b74c518fef4d81"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abb23fcc2461782ab204e61213240feb77d355aa"],"747dd71fefcbc7142661c25334b74c518fef4d81":["7cdd79356797aa0c48c7a38934a57b402a429194"],"14076e7b40405aa1f08702d8df762d08b5d44f70":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"b945b8f5bba0303382bc69d60c0c287714f23328":[],"8d35c84fdef07284c122012ca4000d3b7285a66e":["b945b8f5bba0303382bc69d60c0c287714f23328","0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b":["b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}