{"path":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertTimer(String,Timer,Predicate[CharSequence],boolean,boolean,String,BiConsumer[String,Object]).mjava","commits":[{"id":"233211c3dbff6f367588be5bbb4ac77f72eae193","date":1602085975,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertTimer(String,Timer,Predicate[CharSequence],boolean,boolean,String,BiConsumer[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convert a {@link Timer} to a map.\n   * @param name metric name\n   * @param timer timer instance\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param skipHistograms if true then discard the histogram part of the timer.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  public static void convertTimer(String name, Timer timer, Predicate<CharSequence> propertyFilter, boolean skipHistograms,\n                                                boolean simple, String separator, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      String prop = \"meanRate\";\n      if (propertyFilter.test(prop)) {\n        consumer.accept(name + separator + prop, timer.getMeanRate());\n      }\n    } else {\n      MapWriter writer = ew -> {\n        BiConsumer<String,Object> filter = (k, v) -> {\n          if (propertyFilter.test(k)) {\n            ew.putNoEx(k, v);\n          }\n        };\n        filter.accept(\"count\", timer.getCount());\n        filter.accept(\"meanRate\", timer.getMeanRate());\n        filter.accept(\"1minRate\", timer.getOneMinuteRate());\n        filter.accept(\"5minRate\", timer.getFiveMinuteRate());\n        filter.accept(\"15minRate\", timer.getFifteenMinuteRate());\n        if (!skipHistograms) {\n          // time-based values in nanoseconds\n          addSnapshot(ew, timer.getSnapshot(), propertyFilter, true);\n        }\n      };\n      if (writer._size() > 0) {\n        consumer.accept(name, writer);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"233211c3dbff6f367588be5bbb4ac77f72eae193":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["233211c3dbff6f367588be5bbb4ac77f72eae193"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["233211c3dbff6f367588be5bbb4ac77f72eae193"],"233211c3dbff6f367588be5bbb4ac77f72eae193":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}