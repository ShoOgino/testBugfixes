{"path":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreFromAnyList(String,boolean).mjava","commits":[{"id":"86184cf8c7654ee1badea2a629b8bc0487c7f690","date":1372190237,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreFromAnyList(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /* If you don't increment the reference count, someone could close the core before you use it. */\n  protected SolrCore getCoreFromAnyList(String name, boolean incRefCount) {\n    synchronized (modifyLock) {\n      SolrCore core = cores.get(name);\n\n      if (core == null) {\n        core = transientCores.get(name);\n      }\n\n      if (core != null && incRefCount) {\n        core.open();\n      }\n\n      return core;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b16415d71f34d00bd12f3db116f7cac330f123e0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b16415d71f34d00bd12f3db116f7cac330f123e0","date":1372531249,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreFromAnyList(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreFromAnyList(String,boolean).mjava","sourceNew":"  /* If you don't increment the reference count, someone could close the core before you use it. */\n  protected SolrCore  getCoreFromAnyList(String name, boolean incRefCount) {\n    synchronized (modifyLock) {\n      SolrCore core = cores.get(name);\n\n      if (core == null) {\n        core = transientCores.get(name);\n      }\n\n      if (core != null && incRefCount) {\n        core.open();\n      }\n\n      return core;\n    }\n  }\n\n","sourceOld":"  /* If you don't increment the reference count, someone could close the core before you use it. */\n  protected SolrCore getCoreFromAnyList(String name, boolean incRefCount) {\n    synchronized (modifyLock) {\n      SolrCore core = cores.get(name);\n\n      if (core == null) {\n        core = transientCores.get(name);\n      }\n\n      if (core != null && incRefCount) {\n        core.open();\n      }\n\n      return core;\n    }\n  }\n\n","bugFix":["86184cf8c7654ee1badea2a629b8bc0487c7f690"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreFromAnyList(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /* If you don't increment the reference count, someone could close the core before you use it. */\n  protected SolrCore  getCoreFromAnyList(String name, boolean incRefCount) {\n    synchronized (modifyLock) {\n      SolrCore core = cores.get(name);\n\n      if (core == null) {\n        core = transientCores.get(name);\n      }\n\n      if (core != null && incRefCount) {\n        core.open();\n      }\n\n      return core;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5a70f7ff0756e3668447bffbbf8bce8e7c361b9","date":1420028708,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreFromAnyList(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreFromAnyList(String,boolean).mjava","sourceNew":"  /* If you don't increment the reference count, someone could close the core before you use it. */\n  SolrCore  getCoreFromAnyList(String name, boolean incRefCount) {\n    synchronized (modifyLock) {\n      SolrCore core = cores.get(name);\n\n      if (core == null) {\n        core = transientCores.get(name);\n      }\n\n      if (core != null && incRefCount) {\n        core.open();\n      }\n\n      return core;\n    }\n  }\n\n","sourceOld":"  /* If you don't increment the reference count, someone could close the core before you use it. */\n  protected SolrCore  getCoreFromAnyList(String name, boolean incRefCount) {\n    synchronized (modifyLock) {\n      SolrCore core = cores.get(name);\n\n      if (core == null) {\n        core = transientCores.get(name);\n      }\n\n      if (core != null && incRefCount) {\n        core.open();\n      }\n\n      return core;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9435d55e3ea95c5d94406d3affc36f9505b6a736","date":1491251232,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreFromAnyList(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreFromAnyList(String,boolean).mjava","sourceNew":"  /* If you don't increment the reference count, someone could close the core before you use it. */\n  SolrCore  getCoreFromAnyList(String name, boolean incRefCount) {\n    synchronized (modifyLock) {\n      SolrCore core = cores.get(name);\n\n      if (core == null && container.getTransientCacheHandler() != null) {\n        core = container.getTransientCacheHandler().getCore(name);\n      }\n\n      if (core != null && incRefCount) {\n        core.open();\n      }\n\n      return core;\n    }\n  }\n\n","sourceOld":"  /* If you don't increment the reference count, someone could close the core before you use it. */\n  SolrCore  getCoreFromAnyList(String name, boolean incRefCount) {\n    synchronized (modifyLock) {\n      SolrCore core = cores.get(name);\n\n      if (core == null) {\n        core = transientCores.get(name);\n      }\n\n      if (core != null && incRefCount) {\n        core.open();\n      }\n\n      return core;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6a4b585aed7660a589375f6a09b90efd29c961","date":1491296430,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreFromAnyList(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreFromAnyList(String,boolean).mjava","sourceNew":"  /* If you don't increment the reference count, someone could close the core before you use it. */\n  SolrCore  getCoreFromAnyList(String name, boolean incRefCount) {\n    synchronized (modifyLock) {\n      SolrCore core = cores.get(name);\n\n      if (core == null && container.getTransientCacheHandler() != null) {\n        core = container.getTransientCacheHandler().getCore(name);\n      }\n\n      if (core != null && incRefCount) {\n        core.open();\n      }\n\n      return core;\n    }\n  }\n\n","sourceOld":"  /* If you don't increment the reference count, someone could close the core before you use it. */\n  SolrCore  getCoreFromAnyList(String name, boolean incRefCount) {\n    synchronized (modifyLock) {\n      SolrCore core = cores.get(name);\n\n      if (core == null) {\n        core = transientCores.get(name);\n      }\n\n      if (core != null && incRefCount) {\n        core.open();\n      }\n\n      return core;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7871f9c286dce2a9370bcf517a3e7d12e3bd9602","date":1498708934,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreFromAnyList(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreFromAnyList(String,boolean).mjava","sourceNew":"  /* If you don't increment the reference count, someone could close the core before you use it. */\n  SolrCore  getCoreFromAnyList(String name, boolean incRefCount) {\n    synchronized (modifyLock) {\n      SolrCore core = cores.get(name);\n\n      if (core == null && getTransientCacheHandler() != null) {\n        core = getTransientCacheHandler().getCore(name);\n      }\n\n      if (core != null && incRefCount) {\n        core.open();\n      }\n\n      return core;\n    }\n  }\n\n","sourceOld":"  /* If you don't increment the reference count, someone could close the core before you use it. */\n  SolrCore  getCoreFromAnyList(String name, boolean incRefCount) {\n    synchronized (modifyLock) {\n      SolrCore core = cores.get(name);\n\n      if (core == null && container.getTransientCacheHandler() != null) {\n        core = container.getTransientCacheHandler().getCore(name);\n      }\n\n      if (core != null && incRefCount) {\n        core.open();\n      }\n\n      return core;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreFromAnyList(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreFromAnyList(String,boolean).mjava","sourceNew":"  /* If you don't increment the reference count, someone could close the core before you use it. */\n  SolrCore  getCoreFromAnyList(String name, boolean incRefCount) {\n    synchronized (modifyLock) {\n      SolrCore core = cores.get(name);\n\n      if (core == null && getTransientCacheHandler() != null) {\n        core = getTransientCacheHandler().getCore(name);\n      }\n\n      if (core != null && incRefCount) {\n        core.open();\n      }\n\n      return core;\n    }\n  }\n\n","sourceOld":"  /* If you don't increment the reference count, someone could close the core before you use it. */\n  SolrCore  getCoreFromAnyList(String name, boolean incRefCount) {\n    synchronized (modifyLock) {\n      SolrCore core = cores.get(name);\n\n      if (core == null && container.getTransientCacheHandler() != null) {\n        core = container.getTransientCacheHandler().getCore(name);\n      }\n\n      if (core != null && incRefCount) {\n        core.open();\n      }\n\n      return core;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreFromAnyList(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreFromAnyList(String,boolean).mjava","sourceNew":"  /* If you don't increment the reference count, someone could close the core before you use it. */\n  SolrCore  getCoreFromAnyList(String name, boolean incRefCount) {\n    synchronized (modifyLock) {\n      SolrCore core = cores.get(name);\n\n      if (core == null && getTransientCacheHandler() != null) {\n        core = getTransientCacheHandler().getCore(name);\n      }\n\n      if (core != null && incRefCount) {\n        core.open();\n      }\n\n      return core;\n    }\n  }\n\n","sourceOld":"  /* If you don't increment the reference count, someone could close the core before you use it. */\n  SolrCore  getCoreFromAnyList(String name, boolean incRefCount) {\n    synchronized (modifyLock) {\n      SolrCore core = cores.get(name);\n\n      if (core == null && container.getTransientCacheHandler() != null) {\n        core = container.getTransientCacheHandler().getCore(name);\n      }\n\n      if (core != null && incRefCount) {\n        core.open();\n      }\n\n      return core;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fc1087854af39c9b439f47d913fd3ac1d85ac5c","date":1599523122,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreFromAnyList(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreFromAnyList(String,boolean).mjava","sourceNew":"  SolrCore  getCoreFromAnyList(String name, boolean incRefCount) {\n    return getCoreFromAnyList(name, incRefCount, null);\n  }\n\n","sourceOld":"  /* If you don't increment the reference count, someone could close the core before you use it. */\n  SolrCore  getCoreFromAnyList(String name, boolean incRefCount) {\n    synchronized (modifyLock) {\n      SolrCore core = cores.get(name);\n\n      if (core == null && getTransientCacheHandler() != null) {\n        core = getTransientCacheHandler().getCore(name);\n      }\n\n      if (core != null && incRefCount) {\n        core.open();\n      }\n\n      return core;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"938fe8fd4d30ae70161827366f67c2382985e446","date":1600050178,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreFromAnyList(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreFromAnyList(String,boolean).mjava","sourceNew":"  /* If you don't increment the reference count, someone could close the core before you use it. */\n  SolrCore  getCoreFromAnyList(String name, boolean incRefCount) {\n    synchronized (modifyLock) {\n      SolrCore core = cores.get(name);\n\n      if (core == null && getTransientCacheHandler() != null) {\n        core = getTransientCacheHandler().getCore(name);\n      }\n\n      if (core != null && incRefCount) {\n        core.open();\n      }\n\n      return core;\n    }\n  }\n\n","sourceOld":"  SolrCore  getCoreFromAnyList(String name, boolean incRefCount) {\n    return getCoreFromAnyList(name, incRefCount, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e451e492cce54699988e2ce0aea55e3ff170cb0","date":1600305561,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreFromAnyList(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCoreFromAnyList(String,boolean).mjava","sourceNew":"  SolrCore  getCoreFromAnyList(String name, boolean incRefCount) {\n    return getCoreFromAnyList(name, incRefCount, null);\n  }\n\n","sourceOld":"  /* If you don't increment the reference count, someone could close the core before you use it. */\n  SolrCore  getCoreFromAnyList(String name, boolean incRefCount) {\n    synchronized (modifyLock) {\n      SolrCore core = cores.get(name);\n\n      if (core == null && getTransientCacheHandler() != null) {\n        core = getTransientCacheHandler().getCore(name);\n      }\n\n      if (core != null && incRefCount) {\n        core.open();\n      }\n\n      return core;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9435d55e3ea95c5d94406d3affc36f9505b6a736":["b5a70f7ff0756e3668447bffbbf8bce8e7c361b9"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b16415d71f34d00bd12f3db116f7cac330f123e0"],"1fc1087854af39c9b439f47d913fd3ac1d85ac5c":["28288370235ed02234a64753cdbf0c6ec096304a"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["9435d55e3ea95c5d94406d3affc36f9505b6a736"],"30c8e5574b55d57947e989443dfde611646530ee":["8b6a4b585aed7660a589375f6a09b90efd29c961","28288370235ed02234a64753cdbf0c6ec096304a"],"8b6a4b585aed7660a589375f6a09b90efd29c961":["b5a70f7ff0756e3668447bffbbf8bce8e7c361b9"],"28288370235ed02234a64753cdbf0c6ec096304a":["9435d55e3ea95c5d94406d3affc36f9505b6a736","7871f9c286dce2a9370bcf517a3e7d12e3bd9602"],"86184cf8c7654ee1badea2a629b8bc0487c7f690":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b16415d71f34d00bd12f3db116f7cac330f123e0":["86184cf8c7654ee1badea2a629b8bc0487c7f690"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"938fe8fd4d30ae70161827366f67c2382985e446":["1fc1087854af39c9b439f47d913fd3ac1d85ac5c"],"b5a70f7ff0756e3668447bffbbf8bce8e7c361b9":["b16415d71f34d00bd12f3db116f7cac330f123e0"],"0e451e492cce54699988e2ce0aea55e3ff170cb0":["938fe8fd4d30ae70161827366f67c2382985e446"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e451e492cce54699988e2ce0aea55e3ff170cb0"]},"commit2Childs":{"9435d55e3ea95c5d94406d3affc36f9505b6a736":["7871f9c286dce2a9370bcf517a3e7d12e3bd9602","28288370235ed02234a64753cdbf0c6ec096304a"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"1fc1087854af39c9b439f47d913fd3ac1d85ac5c":["938fe8fd4d30ae70161827366f67c2382985e446"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"8b6a4b585aed7660a589375f6a09b90efd29c961":["30c8e5574b55d57947e989443dfde611646530ee"],"28288370235ed02234a64753cdbf0c6ec096304a":["1fc1087854af39c9b439f47d913fd3ac1d85ac5c","30c8e5574b55d57947e989443dfde611646530ee"],"86184cf8c7654ee1badea2a629b8bc0487c7f690":["b16415d71f34d00bd12f3db116f7cac330f123e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","86184cf8c7654ee1badea2a629b8bc0487c7f690"],"b16415d71f34d00bd12f3db116f7cac330f123e0":["37a0f60745e53927c4c876cfe5b5a58170f0646c","b5a70f7ff0756e3668447bffbbf8bce8e7c361b9"],"938fe8fd4d30ae70161827366f67c2382985e446":["0e451e492cce54699988e2ce0aea55e3ff170cb0"],"b5a70f7ff0756e3668447bffbbf8bce8e7c361b9":["9435d55e3ea95c5d94406d3affc36f9505b6a736","8b6a4b585aed7660a589375f6a09b90efd29c961"],"0e451e492cce54699988e2ce0aea55e3ff170cb0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}