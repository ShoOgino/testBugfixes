{"path":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.DebugFilter#doFilter(ServletRequest,ServletResponse,FilterChain).mjava","commits":[{"id":"c33aa37f7cb15bff94880004576bd9347e871dbc","date":1355453481,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.DebugFilter#doFilter(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n      nRequests.incrementAndGet();\n\n      /***\n      HttpServletRequest req = (HttpServletRequest)servletRequest;\n      HttpServletResponse resp = (HttpServletResponse)servletResponse;\n\n      String path = req.getServletPath();\n      if( req.getPathInfo() != null ) {\n        // this lets you handle /update/commit when /update is a servlet\n        path += req.getPathInfo();\n      }\n      System.out.println(\"###################### FILTER request \" + servletRequest);\n      System.out.println(\"\\t\\tgetServletPath=\"+req.getServletPath());\n      System.out.println(\"\\t\\tgetPathInfo=\"+req.getPathInfo());\n      ***/\n\n      filterChain.doFilter(servletRequest, servletResponse);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.DebugFilter#doFilter(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n      nRequests.incrementAndGet();\n\n      /***\n      HttpServletRequest req = (HttpServletRequest)servletRequest;\n      HttpServletResponse resp = (HttpServletResponse)servletResponse;\n\n      String path = req.getServletPath();\n      if( req.getPathInfo() != null ) {\n        // this lets you handle /update/commit when /update is a servlet\n        path += req.getPathInfo();\n      }\n      System.out.println(\"###################### FILTER request \" + servletRequest);\n      System.out.println(\"\\t\\tgetServletPath=\"+req.getServletPath());\n      System.out.println(\"\\t\\tgetPathInfo=\"+req.getPathInfo());\n      ***/\n\n      filterChain.doFilter(servletRequest, servletResponse);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c66158bb16e902a21272772f1b911f04b1a55abb","date":1424959524,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.DebugFilter#doFilter(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.DebugFilter#doFilter(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n      nRequests.incrementAndGet();\n      filterChain.doFilter(servletRequest, servletResponse);\n    }\n\n","sourceOld":"    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n      nRequests.incrementAndGet();\n\n      /***\n      HttpServletRequest req = (HttpServletRequest)servletRequest;\n      HttpServletResponse resp = (HttpServletResponse)servletResponse;\n\n      String path = req.getServletPath();\n      if( req.getPathInfo() != null ) {\n        // this lets you handle /update/commit when /update is a servlet\n        path += req.getPathInfo();\n      }\n      System.out.println(\"###################### FILTER request \" + servletRequest);\n      System.out.println(\"\\t\\tgetServletPath=\"+req.getServletPath());\n      System.out.println(\"\\t\\tgetPathInfo=\"+req.getPathInfo());\n      ***/\n\n      filterChain.doFilter(servletRequest, servletResponse);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.DebugFilter#doFilter(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.DebugFilter#doFilter(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n      nRequests.incrementAndGet();\n      filterChain.doFilter(servletRequest, servletResponse);\n    }\n\n","sourceOld":"    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n      nRequests.incrementAndGet();\n\n      /***\n      HttpServletRequest req = (HttpServletRequest)servletRequest;\n      HttpServletResponse resp = (HttpServletResponse)servletResponse;\n\n      String path = req.getServletPath();\n      if( req.getPathInfo() != null ) {\n        // this lets you handle /update/commit when /update is a servlet\n        path += req.getPathInfo();\n      }\n      System.out.println(\"###################### FILTER request \" + servletRequest);\n      System.out.println(\"\\t\\tgetServletPath=\"+req.getServletPath());\n      System.out.println(\"\\t\\tgetPathInfo=\"+req.getPathInfo());\n      ***/\n\n      filterChain.doFilter(servletRequest, servletResponse);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.DebugFilter#doFilter(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.DebugFilter#doFilter(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n      nRequests.incrementAndGet();\n      executeDelay();\n      filterChain.doFilter(servletRequest, servletResponse);\n    }\n\n","sourceOld":"    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n      nRequests.incrementAndGet();\n      filterChain.doFilter(servletRequest, servletResponse);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.DebugFilter#doFilter(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.DebugFilter#doFilter(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n      nRequests.incrementAndGet();\n      executeDelay();\n      filterChain.doFilter(servletRequest, servletResponse);\n    }\n\n","sourceOld":"    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n      nRequests.incrementAndGet();\n      filterChain.doFilter(servletRequest, servletResponse);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["c66158bb16e902a21272772f1b911f04b1a55abb"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c33aa37f7cb15bff94880004576bd9347e871dbc"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c33aa37f7cb15bff94880004576bd9347e871dbc","c66158bb16e902a21272772f1b911f04b1a55abb"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["c66158bb16e902a21272772f1b911f04b1a55abb","415bbbe7da8065dd3c477bdc3c703c6425622998"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c33aa37f7cb15bff94880004576bd9347e871dbc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"c66158bb16e902a21272772f1b911f04b1a55abb":["c33aa37f7cb15bff94880004576bd9347e871dbc"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c33aa37f7cb15bff94880004576bd9347e871dbc"],"c33aa37f7cb15bff94880004576bd9347e871dbc":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c66158bb16e902a21272772f1b911f04b1a55abb"],"c66158bb16e902a21272772f1b911f04b1a55abb":["415bbbe7da8065dd3c477bdc3c703c6425622998","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","598b5d23aa7c9732bf473c21a9cd309c44599394"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}