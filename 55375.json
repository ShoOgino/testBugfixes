{"path":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,boolean).mjava","commits":[{"id":"6c94d2661bc1c14426980ec7882e951fdcff08d0","date":1427167177,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          LOG.error(\"caught\", e);\n        }\n      }\n      \n      core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n      \n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService\n          .shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      if (deleteTmpIdxDir && tmpIndexDir != null) {\n        try {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Error removing directory \" + tmpIndexDir, e);\n        }\n      }\n      \n      if (tmpIndexDir != null) {\n        core.getDirectoryFactory().release(tmpIndexDir);\n      }\n      \n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ad28156288ac00b91352582904d97e6653205757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          LOG.error(\"caught\", e);\n        }\n      }\n      \n      core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n      \n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService\n          .shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      if (deleteTmpIdxDir && tmpIndexDir != null) {\n        try {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Error removing directory \" + tmpIndexDir, e);\n        }\n      }\n      \n      if (tmpIndexDir != null) {\n        core.getDirectoryFactory().release(tmpIndexDir);\n      }\n      \n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b13106276bb5ea342253dbf6aae7b675adb38d3","date":1428054414,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,boolean).mjava","sourceNew":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          LOG.error(\"caught\", e);\n        }\n      }\n\n      core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService\n          .shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      if (deleteTmpIdxDir && tmpIndexDir != null) {\n        try {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Error removing directory \" + tmpIndexDir, e);\n        }\n      }\n\n      if (tmpIndexDir != null) {\n        core.getDirectoryFactory().release(tmpIndexDir);\n      }\n\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          LOG.error(\"caught\", e);\n        }\n      }\n      \n      core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n      \n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService\n          .shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      if (deleteTmpIdxDir && tmpIndexDir != null) {\n        try {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Error removing directory \" + tmpIndexDir, e);\n        }\n      }\n      \n      if (tmpIndexDir != null) {\n        core.getDirectoryFactory().release(tmpIndexDir);\n      }\n      \n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["ad28156288ac00b91352582904d97e6653205757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,boolean).mjava","sourceNew":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          LOG.error(\"caught\", e);\n        }\n      }\n\n      core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService\n          .shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      if (deleteTmpIdxDir && tmpIndexDir != null) {\n        try {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Error removing directory \" + tmpIndexDir, e);\n        }\n      }\n\n      if (tmpIndexDir != null) {\n        core.getDirectoryFactory().release(tmpIndexDir);\n      }\n\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          LOG.error(\"caught\", e);\n        }\n      }\n      \n      core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n      \n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService\n          .shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      if (deleteTmpIdxDir && tmpIndexDir != null) {\n        try {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Error removing directory \" + tmpIndexDir, e);\n        }\n      }\n      \n      if (tmpIndexDir != null) {\n        core.getDirectoryFactory().release(tmpIndexDir);\n      }\n      \n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,boolean).mjava","sourceNew":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          LOG.error(\"caught\", e);\n        }\n      }\n\n      core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      markReplicationStop();\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService\n          .shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      if (deleteTmpIdxDir && tmpIndexDir != null) {\n        try {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Error removing directory \" + tmpIndexDir, e);\n        }\n      }\n\n      if (tmpIndexDir != null) {\n        core.getDirectoryFactory().release(tmpIndexDir);\n      }\n\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          LOG.error(\"caught\", e);\n        }\n      }\n\n      core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService\n          .shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      if (deleteTmpIdxDir && tmpIndexDir != null) {\n        try {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Error removing directory \" + tmpIndexDir, e);\n        }\n      }\n\n      if (tmpIndexDir != null) {\n        core.getDirectoryFactory().release(tmpIndexDir);\n      }\n\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70d61fdc6a5871f80a74c0e2e55bb8a94e9ac59d","date":1440987729,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,boolean).mjava","sourceNew":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          LOG.error(\"caught\", e);\n        }\n      }\n\n      core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      markReplicationStop();\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdown();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      if (deleteTmpIdxDir && tmpIndexDir != null) {\n        try {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Error removing directory \" + tmpIndexDir, e);\n        }\n      }\n\n      if (tmpIndexDir != null) {\n        core.getDirectoryFactory().release(tmpIndexDir);\n      }\n\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","sourceOld":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          LOG.error(\"caught\", e);\n        }\n      }\n\n      core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      markReplicationStop();\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService\n          .shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      if (deleteTmpIdxDir && tmpIndexDir != null) {\n        try {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Error removing directory \" + tmpIndexDir, e);\n        }\n      }\n\n      if (tmpIndexDir != null) {\n        core.getDirectoryFactory().release(tmpIndexDir);\n      }\n\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5","date":1446841099,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,File,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#cleanup(SolrCore,Directory,Directory,boolean,boolean).mjava","sourceNew":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, File tmpTlogDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          LOG.error(\"caught\", e);\n        }\n      }\n\n      core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = tlogFilesToDownload = tlogFilesDownloaded = null;\n      markReplicationStop();\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdown();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      if (deleteTmpIdxDir && tmpIndexDir != null) {\n        try {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Error removing directory \" + tmpIndexDir, e);\n        }\n      }\n\n      if (tmpIndexDir != null) {\n        core.getDirectoryFactory().release(tmpIndexDir);\n      }\n\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n\n      if (tmpTlogDir != null) {\n        delTree(tmpTlogDir);\n      }\n    }\n  }\n\n","sourceOld":"  private void cleanup(final SolrCore core, Directory tmpIndexDir,\n      Directory indexDir, boolean deleteTmpIdxDir, boolean successfulInstall) throws IOException {\n    try {\n      if (!successfulInstall) {\n        try {\n          logReplicationTimeAndConfFiles(null, successfulInstall);\n        } catch (Exception e) {\n          LOG.error(\"caught\", e);\n        }\n      }\n\n      core.getUpdateHandler().getSolrCoreState().setLastReplicateIndexSuccess(successfulInstall);\n\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      markReplicationStop();\n      dirFileFetcher = null;\n      localFileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdown();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    } finally {\n      if (deleteTmpIdxDir && tmpIndexDir != null) {\n        try {\n          core.getDirectoryFactory().doneWithDirectory(tmpIndexDir);\n          core.getDirectoryFactory().remove(tmpIndexDir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"Error removing directory \" + tmpIndexDir, e);\n        }\n      }\n\n      if (tmpIndexDir != null) {\n        core.getDirectoryFactory().release(tmpIndexDir);\n      }\n\n      if (indexDir != null) {\n        core.getDirectoryFactory().release(indexDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["ad28156288ac00b91352582904d97e6653205757"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6c94d2661bc1c14426980ec7882e951fdcff08d0"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["70d61fdc6a5871f80a74c0e2e55bb8a94e9ac59d"],"6c94d2661bc1c14426980ec7882e951fdcff08d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["7b13106276bb5ea342253dbf6aae7b675adb38d3"],"70d61fdc6a5871f80a74c0e2e55bb8a94e9ac59d":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["6c94d2661bc1c14426980ec7882e951fdcff08d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6c94d2661bc1c14426980ec7882e951fdcff08d0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","6c94d2661bc1c14426980ec7882e951fdcff08d0"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["70d61fdc6a5871f80a74c0e2e55bb8a94e9ac59d"],"70d61fdc6a5871f80a74c0e2e55bb8a94e9ac59d":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","bcf9886c8ff537aafde14de48ebf744f5673f08b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}