{"path":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#sendNonDirectDeletesRequestReplicaWithRetry(Replica,Set[Integer],int,Set[Integer],int,String).mjava","commits":[{"id":"615bf5b56d95ed8c9bf06a402db6c817d6bff21a","date":1509492118,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#sendNonDirectDeletesRequestReplicaWithRetry(Replica,Set[Integer],int,Set[Integer],int,String).mjava","pathOld":"/dev/null","sourceNew":"  protected void sendNonDirectDeletesRequestReplicaWithRetry(Replica rep,\n                                                             Set<Integer> byIdsSet, int expectedRfByIds,\n                                                             Set<Integer> byQueriesSet, int expectedRfDBQ,\n                                                             String coll) throws Exception {\n    // First add the docs indicated\n    List<String> byIdsList = new ArrayList<>();\n    List<String> byQueryList = new ArrayList<>();\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int myId : byIdsSet) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, myId);\n      doc.addField(\"a_t\", \"hello\" + id);\n      batch.add(doc);\n      byIdsList.add(Integer.toString(myId));\n    }\n    for (int myId : byQueriesSet) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, myId);\n      doc.addField(\"a_t\", \"hello\" + id);\n      batch.add(doc);\n      byQueryList.add(Integer.toString(myId));\n    }\n\n    // Add the docs.\n    sendDocsWithRetry(batch, expectedRfDBQ, 5, 1);\n\n    // Delete the docs by ID indicated\n    UpdateRequest req = new UpdateRequest();\n    req.deleteById(byIdsList);\n    req.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(expectedRfByIds));\n    sendNonDirectUpdateRequestReplicaWithRetry(rep, req, expectedRfByIds, coll);\n\n    //Delete the docs by query indicated.\n    req = new UpdateRequest();\n    req.deleteByQuery(\"id:(\" + StringUtils.join(byQueriesSet, \" OR \") + \")\");\n    req.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(expectedRfDBQ));\n    sendNonDirectUpdateRequestReplicaWithRetry(rep, req, expectedRfDBQ, coll);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43f5f8344e80b4bfb2069917069430266753d2f0","date":1538584815,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#sendNonDirectDeletesRequestReplicaWithRetry(Replica,Set[Integer],int,Set[Integer],int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#sendNonDirectDeletesRequestReplicaWithRetry(Replica,Set[Integer],int,Set[Integer],int,String).mjava","sourceNew":"  protected void sendNonDirectDeletesRequestReplicaWithRetry(Replica rep,\n                                                             Set<Integer> byIdsSet, int expectedRfByIds,\n                                                             Set<Integer> byQueriesSet, int expectedRfDBQ,\n                                                             String coll) throws Exception {\n    // First add the docs indicated\n    List<String> byIdsList = new ArrayList<>();\n    List<String> byQueryList = new ArrayList<>();\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int myId : byIdsSet) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, myId);\n      doc.addField(\"a_t\", \"hello\" + id);\n      batch.add(doc);\n      byIdsList.add(Integer.toString(myId));\n    }\n    for (int myId : byQueriesSet) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, myId);\n      doc.addField(\"a_t\", \"hello\" + id);\n      batch.add(doc);\n      byQueryList.add(Integer.toString(myId));\n    }\n\n    // Add the docs.\n    sendDocsWithRetry(batch, expectedRfDBQ, 5, 1);\n\n    // Delete the docs by ID indicated\n    UpdateRequest req = new UpdateRequest();\n    req.deleteById(byIdsList);\n    maybeAddMinRfExplicitly(expectedRfByIds, req);\n    sendNonDirectUpdateRequestReplicaWithRetry(rep, req, expectedRfByIds, coll);\n\n    //Delete the docs by query indicated.\n    req = new UpdateRequest();\n    req.deleteByQuery(\"id:(\" + StringUtils.join(byQueriesSet, \" OR \") + \")\");\n    maybeAddMinRfExplicitly(expectedRfDBQ, req);\n    sendNonDirectUpdateRequestReplicaWithRetry(rep, req, expectedRfDBQ, coll);\n\n  }\n\n","sourceOld":"  protected void sendNonDirectDeletesRequestReplicaWithRetry(Replica rep,\n                                                             Set<Integer> byIdsSet, int expectedRfByIds,\n                                                             Set<Integer> byQueriesSet, int expectedRfDBQ,\n                                                             String coll) throws Exception {\n    // First add the docs indicated\n    List<String> byIdsList = new ArrayList<>();\n    List<String> byQueryList = new ArrayList<>();\n    List<SolrInputDocument> batch = new ArrayList<SolrInputDocument>(10);\n    for (int myId : byIdsSet) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, myId);\n      doc.addField(\"a_t\", \"hello\" + id);\n      batch.add(doc);\n      byIdsList.add(Integer.toString(myId));\n    }\n    for (int myId : byQueriesSet) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, myId);\n      doc.addField(\"a_t\", \"hello\" + id);\n      batch.add(doc);\n      byQueryList.add(Integer.toString(myId));\n    }\n\n    // Add the docs.\n    sendDocsWithRetry(batch, expectedRfDBQ, 5, 1);\n\n    // Delete the docs by ID indicated\n    UpdateRequest req = new UpdateRequest();\n    req.deleteById(byIdsList);\n    req.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(expectedRfByIds));\n    sendNonDirectUpdateRequestReplicaWithRetry(rep, req, expectedRfByIds, coll);\n\n    //Delete the docs by query indicated.\n    req = new UpdateRequest();\n    req.deleteByQuery(\"id:(\" + StringUtils.join(byQueriesSet, \" OR \") + \")\");\n    req.setParam(UpdateRequest.MIN_REPFACT, String.valueOf(expectedRfDBQ));\n    sendNonDirectUpdateRequestReplicaWithRetry(rep, req, expectedRfDBQ, coll);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43f5f8344e80b4bfb2069917069430266753d2f0":["615bf5b56d95ed8c9bf06a402db6c817d6bff21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"615bf5b56d95ed8c9bf06a402db6c817d6bff21a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43f5f8344e80b4bfb2069917069430266753d2f0"]},"commit2Childs":{"43f5f8344e80b4bfb2069917069430266753d2f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615bf5b56d95ed8c9bf06a402db6c817d6bff21a"],"615bf5b56d95ed8c9bf06a402db6c817d6bff21a":["43f5f8344e80b4bfb2069917069430266753d2f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}