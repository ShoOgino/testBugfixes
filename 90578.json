{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    r = newRandom();\n\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    UnicodeUtil.UTF8Result utf8 = new UnicodeUtil.UTF8Result();\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n\n    for(int iter=0;iter<100000;iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.result[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.result, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    r = newRandom();\n\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    UnicodeUtil.UTF8Result utf8 = new UnicodeUtil.UTF8Result();\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n\n    for(int iter=0;iter<100000;iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.result[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.result, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    r = newRandom();\n\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n\n    for(int iter=0;iter<100000;iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    r = newRandom();\n\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    UnicodeUtil.UTF8Result utf8 = new UnicodeUtil.UTF8Result();\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n\n    for(int iter=0;iter<100000;iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.result[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.result, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    r = newRandom();\n\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n\n    for(int iter=0;iter<100000*_TestUtil.getRandomMultiplier();iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    r = newRandom();\n\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n\n    for(int iter=0;iter<100000;iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    r = newRandom();\n\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    r = newRandom();\n\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n\n    for(int iter=0;iter<100000*_TestUtil.getRandomMultiplier();iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    r = newRandom();\n\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    r = newRandom();\n\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n\n    for(int iter=0;iter<100000*_TestUtil.getRandomMultiplier();iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    r = newRandom();\n\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    r = newRandom();\n\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1b3a24d5d9b47345473ff564f5cc127a7b526b4","date":1306277076,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testRandomUnicodeStrings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testRandomUnicodeStrings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testRandomUnicodeStrings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = atLeast(100000);\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["2aafd88401639311b0404e67c94e829e123a0e45"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["2aafd88401639311b0404e67c94e829e123a0e45","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2aafd88401639311b0404e67c94e829e123a0e45":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","b21422ff1d1d56499dec481f193b402e5e8def5b"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["b21422ff1d1d56499dec481f193b402e5e8def5b","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"79c2cb24929f2649a8875fb629086171f914d5ce":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["2e10cb22a8bdb44339e282925a29182bb2f3174d","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["b21422ff1d1d56499dec481f193b402e5e8def5b","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["3242a09f703274d3b9283f2064a1a33064b53a1b","b21422ff1d1d56499dec481f193b402e5e8def5b"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["2aafd88401639311b0404e67c94e829e123a0e45"],"2aafd88401639311b0404e67c94e829e123a0e45":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","3242a09f703274d3b9283f2064a1a33064b53a1b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["79c2cb24929f2649a8875fb629086171f914d5ce"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a1b3a24d5d9b47345473ff564f5cc127a7b526b4","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}