{"path":"backwards/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"/dev/null","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        writer.setMaxBufferedDocs(10);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestLazyProxSkipping#createIndex(int).mjava","sourceNew":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        writer.setMaxBufferedDocs(10);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","sourceOld":"    private void createIndex(int numHits) throws IOException {\n        int numDocs = 500;\n        \n        Directory directory = new SeekCountingDirectory();\n        IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setUseCompoundFile(false);\n        writer.setMaxBufferedDocs(10);\n        for (int i = 0; i < numDocs; i++) {\n            Document doc = new Document();\n            String content;\n            if (i % (numDocs / numHits) == 0) {\n                // add a document that matches the query \"term1 term2\"\n                content = this.term1 + \" \" + this.term2;\n            } else if (i % 15 == 0) {\n                // add a document that only contains term1\n                content = this.term1 + \" \" + this.term1;\n            } else {\n                // add a document that contains term2 but not term 1\n                content = this.term3 + \" \" + this.term2;\n            }\n\n            doc.add(new Field(this.field, content, Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        // make sure the index has only a single segment\n        writer.optimize();\n        writer.close();\n        \n        SegmentReader reader = SegmentReader.getOnlySegmentReader(directory);\n\n        this.searcher = new IndexSearcher(reader);        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}