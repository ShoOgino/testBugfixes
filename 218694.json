{"path":"src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","commits":[{"id":"16efeb5e41e35037f154efba9fdbbc13f8bc5cc2","date":1202772354,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiConfig() throws Exception {\n    // test lots of smaller different params together\n    for (int i=0; i<100; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      autoCommit=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n\n      Directory dir1 = new RAMDirectory();\n      Directory dir2 = new RAMDirectory();\n      Map docs = indexRandom(nThreads, iter, range, dir1);\n      indexSerial(docs, dir2);\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["49adbad5232116eb2448ea8166464e6a68bca007","a5061c2bd3ae625ce9808a1291f32140d3609997"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04cd225b2d36ca6d599f6012f18973d8236e92c7","date":1202773059,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Exception {\n    // test lots of smaller different params together\n    for (int i=0; i<100; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      autoCommit=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n\n      Directory dir1 = new RAMDirectory();\n      Directory dir2 = new RAMDirectory();\n      Map docs = indexRandom(nThreads, iter, range, dir1);\n      indexSerial(docs, dir2);\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Exception {\n    // test lots of smaller different params together\n    for (int i=0; i<100; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      autoCommit=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n\n      Directory dir1 = new RAMDirectory();\n      Directory dir2 = new RAMDirectory();\n      Map docs = indexRandom(nThreads, iter, range, dir1);\n      indexSerial(docs, dir2);\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"49adbad5232116eb2448ea8166464e6a68bca007","date":1202851885,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Exception {\n    // test lots of smaller different params together\n    for (int i=0; i<100; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      autoCommit=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map docs = indexRandom(nThreads, iter, range, dir1);\n      indexSerial(docs, dir2);\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Exception {\n    // test lots of smaller different params together\n    for (int i=0; i<100; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      autoCommit=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n\n      Directory dir1 = new RAMDirectory();\n      Directory dir2 = new RAMDirectory();\n      Map docs = indexRandom(nThreads, iter, range, dir1);\n      indexSerial(docs, dir2);\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","bugFix":["16efeb5e41e35037f154efba9fdbbc13f8bc5cc2"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5061c2bd3ae625ce9808a1291f32140d3609997","date":1204824056,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Exception {\n    // test lots of smaller different params together\n    for (int i=0; i<100; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      autoCommit=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map docs = indexRandom(nThreads, iter, range, dir1);\n      indexSerial(docs, dir2);\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Exception {\n    // test lots of smaller different params together\n    for (int i=0; i<100; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      autoCommit=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map docs = indexRandom(nThreads, iter, range, dir1);\n      indexSerial(docs, dir2);\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","bugFix":["16efeb5e41e35037f154efba9fdbbc13f8bc5cc2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n    for (int i=0; i<100; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      autoCommit=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map docs = indexRandom(nThreads, iter, range, dir1);\n      indexSerial(docs, dir2);\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Exception {\n    // test lots of smaller different params together\n    for (int i=0; i<100; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      autoCommit=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map docs = indexRandom(nThreads, iter, range, dir1);\n      indexSerial(docs, dir2);\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb1066f2afe9450585d0d10063ea4450085236f1","date":1233870820,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n    r = newRandom();\n    for (int i=0; i<100; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      autoCommit=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map docs = indexRandom(nThreads, iter, range, dir1);\n      indexSerial(docs, dir2);\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n    for (int i=0; i<100; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      autoCommit=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map docs = indexRandom(nThreads, iter, range, dir1);\n      indexSerial(docs, dir2);\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n    r = newRandom();\n    for (int i=0; i<100; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map docs = indexRandom(nThreads, iter, range, dir1);\n      indexSerial(docs, dir2);\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n    r = newRandom();\n    for (int i=0; i<100; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      autoCommit=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map docs = indexRandom(nThreads, iter, range, dir1);\n      indexSerial(docs, dir2);\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90cb6b3f4e5652555b614adc90204287fbebd27c","date":1259494272,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n    r = newRandom();\n    for (int i=0; i<20; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map docs = indexRandom(nThreads, iter, range, dir1);\n      indexSerial(docs, dir2);\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n    r = newRandom();\n    for (int i=0; i<100; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map docs = indexRandom(nThreads, iter, range, dir1);\n      indexSerial(docs, dir2);\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n    r = newRandom();\n    for (int i=0; i<20; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1);\n      indexSerial(docs, dir2);\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n    r = newRandom();\n    for (int i=0; i<20; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map docs = indexRandom(nThreads, iter, range, dir1);\n      indexSerial(docs, dir2);\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","bugFix":null,"bugIntro":["a9802bb5985cb6cc3e0a3a0ecb2158acf4d5cfcf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9802bb5985cb6cc3e0a3a0ecb2158acf4d5cfcf","date":1268662366,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n    r = newRandom();\n    for (int i=0; i<20; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      int maxThreadStates = 1+r.nextInt(10);\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates);\n      indexSerial(docs, dir2);\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n    r = newRandom();\n    for (int i=0; i<20; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1);\n      indexSerial(docs, dir2);\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","bugFix":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#testMultiConfig().mjava","sourceNew":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n    r = newRandom();\n    for (int i=0; i<20; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      int maxThreadStates = 1+r.nextInt(10);\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates);\n      indexSerial(docs, dir2);\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","sourceOld":"  public void testMultiConfig() throws Throwable {\n    // test lots of smaller different params together\n    r = newRandom();\n    for (int i=0; i<20; i++) {  // increase iterations for better testing\n      sameFieldOrder=r.nextBoolean();\n      mergeFactor=r.nextInt(3)+2;\n      maxBufferedDocs=r.nextInt(3)+2;\n      int maxThreadStates = 1+r.nextInt(10);\n      seed++;\n\n      int nThreads=r.nextInt(5)+1;\n      int iter=r.nextInt(10)+1;\n      int range=r.nextInt(20)+1;\n      Directory dir1 = new MockRAMDirectory();\n      Directory dir2 = new MockRAMDirectory();\n      Map<String,Document> docs = indexRandom(nThreads, iter, range, dir1, maxThreadStates);\n      indexSerial(docs, dir2);\n      verifyEquals(dir1, dir2, \"id\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cb1066f2afe9450585d0d10063ea4450085236f1":["5350389bf83287111f7760b9e3db3af8e3648474"],"a5061c2bd3ae625ce9808a1291f32140d3609997":["49adbad5232116eb2448ea8166464e6a68bca007"],"16efeb5e41e35037f154efba9fdbbc13f8bc5cc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"49adbad5232116eb2448ea8166464e6a68bca007":["04cd225b2d36ca6d599f6012f18973d8236e92c7"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["87c966e9308847938a7c905c2e46a56d8df788b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9802bb5985cb6cc3e0a3a0ecb2158acf4d5cfcf":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"87c966e9308847938a7c905c2e46a56d8df788b8":["cb1066f2afe9450585d0d10063ea4450085236f1"],"04cd225b2d36ca6d599f6012f18973d8236e92c7":["16efeb5e41e35037f154efba9fdbbc13f8bc5cc2"],"5350389bf83287111f7760b9e3db3af8e3648474":["a5061c2bd3ae625ce9808a1291f32140d3609997"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9802bb5985cb6cc3e0a3a0ecb2158acf4d5cfcf"]},"commit2Childs":{"cb1066f2afe9450585d0d10063ea4450085236f1":["87c966e9308847938a7c905c2e46a56d8df788b8"],"a5061c2bd3ae625ce9808a1291f32140d3609997":["5350389bf83287111f7760b9e3db3af8e3648474"],"16efeb5e41e35037f154efba9fdbbc13f8bc5cc2":["04cd225b2d36ca6d599f6012f18973d8236e92c7"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["a9802bb5985cb6cc3e0a3a0ecb2158acf4d5cfcf"],"49adbad5232116eb2448ea8166464e6a68bca007":["a5061c2bd3ae625ce9808a1291f32140d3609997"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16efeb5e41e35037f154efba9fdbbc13f8bc5cc2"],"a9802bb5985cb6cc3e0a3a0ecb2158acf4d5cfcf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"04cd225b2d36ca6d599f6012f18973d8236e92c7":["49adbad5232116eb2448ea8166464e6a68bca007"],"87c966e9308847938a7c905c2e46a56d8df788b8":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"5350389bf83287111f7760b9e3db3af8e3648474":["cb1066f2afe9450585d0d10063ea4450085236f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}