{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/QueryNodeOperation#logicalAnd(QueryNode,QueryNode).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/QueryNodeOperation#logicalAnd(QueryNode,QueryNode).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/QueryNodeOperation#logicalAnd(QueryNode,QueryNode).mjava","sourceNew":"  /**\n   * perform a logical and of 2 QueryNode trees. if q1 and q2 are ANDQueryNode\n   * nodes it uses head Node from q1 and adds the children of q2 to q1 if q1 is\n   * a AND node and q2 is not, add q2 as a child of the head node of q1 if q2 is\n   * a AND node and q1 is not, add q1 as a child of the head node of q2 if q1\n   * and q2 are not ANDQueryNode nodes, create a AND node and make q1 and q2\n   * children of that node if q1 or q2 is null it returns the not null node if\n   * q1 = q2 = null it returns null\n   */\n  public final static QueryNode logicalAnd(QueryNode q1, QueryNode q2) {\n    if (q1 == null)\n      return q2;\n    if (q2 == null)\n      return q1;\n\n    ANDOperation op = null;\n    if (q1 instanceof AndQueryNode && q2 instanceof AndQueryNode)\n      op = ANDOperation.BOTH;\n    else if (q1 instanceof AndQueryNode)\n      op = ANDOperation.Q1;\n    else if (q1 instanceof AndQueryNode)\n      op = ANDOperation.Q2;\n    else\n      op = ANDOperation.NONE;\n\n    try {\n      QueryNode result = null;\n      switch (op) {\n      case NONE:\n        List<QueryNode> children = new ArrayList<QueryNode>();\n        children.add(q1.cloneTree());\n        children.add(q2.cloneTree());\n        result = new AndQueryNode(children);\n        return result;\n      case Q1:\n        result = q1.cloneTree();\n        result.add(q2.cloneTree());\n        return result;\n      case Q2:\n        result = q2.cloneTree();\n        result.add(q1.cloneTree());\n        return result;\n      case BOTH:\n        result = q1.cloneTree();\n        result.add(q2.cloneTree().getChildren());\n        return result;\n      }\n    } catch (CloneNotSupportedException e) {\n      throw new QueryNodeError(e);\n    }\n\n    return null;\n\n  }\n\n","sourceOld":"  /**\n   * perform a logical and of 2 QueryNode trees. if q1 and q2 are ANDQueryNode\n   * nodes it uses head Node from q1 and adds the children of q2 to q1 if q1 is\n   * a AND node and q2 is not, add q2 as a child of the head node of q1 if q2 is\n   * a AND node and q1 is not, add q1 as a child of the head node of q2 if q1\n   * and q2 are not ANDQueryNode nodes, create a AND node and make q1 and q2\n   * children of that node if q1 or q2 is null it returns the not null node if\n   * q1 = q2 = null it returns null\n   */\n  public final static QueryNode logicalAnd(QueryNode q1, QueryNode q2) {\n    if (q1 == null)\n      return q2;\n    if (q2 == null)\n      return q1;\n\n    ANDOperation op = null;\n    if (q1 instanceof AndQueryNode && q2 instanceof AndQueryNode)\n      op = ANDOperation.BOTH;\n    else if (q1 instanceof AndQueryNode)\n      op = ANDOperation.Q1;\n    else if (q1 instanceof AndQueryNode)\n      op = ANDOperation.Q2;\n    else\n      op = ANDOperation.NONE;\n\n    try {\n      QueryNode result = null;\n      switch (op) {\n      case NONE:\n        List<QueryNode> children = new ArrayList<QueryNode>();\n        children.add(q1.cloneTree());\n        children.add(q2.cloneTree());\n        result = new AndQueryNode(children);\n        return result;\n      case Q1:\n        result = q1.cloneTree();\n        result.add(q2.cloneTree());\n        return result;\n      case Q2:\n        result = q2.cloneTree();\n        result.add(q1.cloneTree());\n        return result;\n      case BOTH:\n        result = q1.cloneTree();\n        result.add(q2.cloneTree().getChildren());\n        return result;\n      }\n    } catch (CloneNotSupportedException e) {\n      throw new QueryNodeError(e);\n    }\n\n    return null;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/QueryNodeOperation#logicalAnd(QueryNode,QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/QueryNodeOperation#logicalAnd(QueryNode,QueryNode).mjava","sourceNew":"  /**\n   * perform a logical and of 2 QueryNode trees. if q1 and q2 are ANDQueryNode\n   * nodes it uses head Node from q1 and adds the children of q2 to q1 if q1 is\n   * a AND node and q2 is not, add q2 as a child of the head node of q1 if q2 is\n   * a AND node and q1 is not, add q1 as a child of the head node of q2 if q1\n   * and q2 are not ANDQueryNode nodes, create a AND node and make q1 and q2\n   * children of that node if q1 or q2 is null it returns the not null node if\n   * q1 = q2 = null it returns null\n   */\n  public final static QueryNode logicalAnd(QueryNode q1, QueryNode q2) {\n    if (q1 == null)\n      return q2;\n    if (q2 == null)\n      return q1;\n\n    ANDOperation op = null;\n    if (q1 instanceof AndQueryNode && q2 instanceof AndQueryNode)\n      op = ANDOperation.BOTH;\n    else if (q1 instanceof AndQueryNode)\n      op = ANDOperation.Q1;\n    else if (q1 instanceof AndQueryNode)\n      op = ANDOperation.Q2;\n    else\n      op = ANDOperation.NONE;\n\n    try {\n      QueryNode result = null;\n      switch (op) {\n      case NONE:\n        List<QueryNode> children = new ArrayList<>();\n        children.add(q1.cloneTree());\n        children.add(q2.cloneTree());\n        result = new AndQueryNode(children);\n        return result;\n      case Q1:\n        result = q1.cloneTree();\n        result.add(q2.cloneTree());\n        return result;\n      case Q2:\n        result = q2.cloneTree();\n        result.add(q1.cloneTree());\n        return result;\n      case BOTH:\n        result = q1.cloneTree();\n        result.add(q2.cloneTree().getChildren());\n        return result;\n      }\n    } catch (CloneNotSupportedException e) {\n      throw new QueryNodeError(e);\n    }\n\n    return null;\n\n  }\n\n","sourceOld":"  /**\n   * perform a logical and of 2 QueryNode trees. if q1 and q2 are ANDQueryNode\n   * nodes it uses head Node from q1 and adds the children of q2 to q1 if q1 is\n   * a AND node and q2 is not, add q2 as a child of the head node of q1 if q2 is\n   * a AND node and q1 is not, add q1 as a child of the head node of q2 if q1\n   * and q2 are not ANDQueryNode nodes, create a AND node and make q1 and q2\n   * children of that node if q1 or q2 is null it returns the not null node if\n   * q1 = q2 = null it returns null\n   */\n  public final static QueryNode logicalAnd(QueryNode q1, QueryNode q2) {\n    if (q1 == null)\n      return q2;\n    if (q2 == null)\n      return q1;\n\n    ANDOperation op = null;\n    if (q1 instanceof AndQueryNode && q2 instanceof AndQueryNode)\n      op = ANDOperation.BOTH;\n    else if (q1 instanceof AndQueryNode)\n      op = ANDOperation.Q1;\n    else if (q1 instanceof AndQueryNode)\n      op = ANDOperation.Q2;\n    else\n      op = ANDOperation.NONE;\n\n    try {\n      QueryNode result = null;\n      switch (op) {\n      case NONE:\n        List<QueryNode> children = new ArrayList<QueryNode>();\n        children.add(q1.cloneTree());\n        children.add(q2.cloneTree());\n        result = new AndQueryNode(children);\n        return result;\n      case Q1:\n        result = q1.cloneTree();\n        result.add(q2.cloneTree());\n        return result;\n      case Q2:\n        result = q2.cloneTree();\n        result.add(q1.cloneTree());\n        return result;\n      case BOTH:\n        result = q1.cloneTree();\n        result.add(q2.cloneTree().getChildren());\n        return result;\n      }\n    } catch (CloneNotSupportedException e) {\n      throw new QueryNodeError(e);\n    }\n\n    return null;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5905c7524b0c8f4309ec34827565925556f645f3","date":1494156261,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/QueryNodeOperation#logicalAnd(QueryNode,QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/QueryNodeOperation#logicalAnd(QueryNode,QueryNode).mjava","sourceNew":"  /**\n   * perform a logical and of 2 QueryNode trees. if q1 and q2 are ANDQueryNode\n   * nodes it uses head Node from q1 and adds the children of q2 to q1 if q1 is\n   * a AND node and q2 is not, add q2 as a child of the head node of q1 if q2 is\n   * a AND node and q1 is not, add q1 as a child of the head node of q2 if q1\n   * and q2 are not ANDQueryNode nodes, create a AND node and make q1 and q2\n   * children of that node if q1 or q2 is null it returns the not null node if\n   * q1 = q2 = null it returns null\n   */\n  public final static QueryNode logicalAnd(QueryNode q1, QueryNode q2) {\n    if (q1 == null)\n      return q2;\n    if (q2 == null)\n      return q1;\n\n    ANDOperation op = null;\n    if (q1 instanceof AndQueryNode && q2 instanceof AndQueryNode)\n      op = ANDOperation.BOTH;\n    else if (q1 instanceof AndQueryNode)\n      op = ANDOperation.Q1;\n    else if (q2 instanceof AndQueryNode)\n      op = ANDOperation.Q2;\n    else\n      op = ANDOperation.NONE;\n\n    try {\n      QueryNode result = null;\n      switch (op) {\n      case NONE:\n        List<QueryNode> children = new ArrayList<>();\n        children.add(q1.cloneTree());\n        children.add(q2.cloneTree());\n        result = new AndQueryNode(children);\n        return result;\n      case Q1:\n        result = q1.cloneTree();\n        result.add(q2.cloneTree());\n        return result;\n      case Q2:\n        result = q2.cloneTree();\n        result.add(q1.cloneTree());\n        return result;\n      case BOTH:\n        result = q1.cloneTree();\n        result.add(q2.cloneTree().getChildren());\n        return result;\n      }\n    } catch (CloneNotSupportedException e) {\n      throw new QueryNodeError(e);\n    }\n\n    return null;\n\n  }\n\n","sourceOld":"  /**\n   * perform a logical and of 2 QueryNode trees. if q1 and q2 are ANDQueryNode\n   * nodes it uses head Node from q1 and adds the children of q2 to q1 if q1 is\n   * a AND node and q2 is not, add q2 as a child of the head node of q1 if q2 is\n   * a AND node and q1 is not, add q1 as a child of the head node of q2 if q1\n   * and q2 are not ANDQueryNode nodes, create a AND node and make q1 and q2\n   * children of that node if q1 or q2 is null it returns the not null node if\n   * q1 = q2 = null it returns null\n   */\n  public final static QueryNode logicalAnd(QueryNode q1, QueryNode q2) {\n    if (q1 == null)\n      return q2;\n    if (q2 == null)\n      return q1;\n\n    ANDOperation op = null;\n    if (q1 instanceof AndQueryNode && q2 instanceof AndQueryNode)\n      op = ANDOperation.BOTH;\n    else if (q1 instanceof AndQueryNode)\n      op = ANDOperation.Q1;\n    else if (q1 instanceof AndQueryNode)\n      op = ANDOperation.Q2;\n    else\n      op = ANDOperation.NONE;\n\n    try {\n      QueryNode result = null;\n      switch (op) {\n      case NONE:\n        List<QueryNode> children = new ArrayList<>();\n        children.add(q1.cloneTree());\n        children.add(q2.cloneTree());\n        result = new AndQueryNode(children);\n        return result;\n      case Q1:\n        result = q1.cloneTree();\n        result.add(q2.cloneTree());\n        return result;\n      case Q2:\n        result = q2.cloneTree();\n        result.add(q1.cloneTree());\n        return result;\n      case BOTH:\n        result = q1.cloneTree();\n        result.add(q2.cloneTree().getChildren());\n        return result;\n      }\n    } catch (CloneNotSupportedException e) {\n      throw new QueryNodeError(e);\n    }\n\n    return null;\n\n  }\n\n","bugFix":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/QueryNodeOperation#logicalAnd(QueryNode,QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/util/QueryNodeOperation#logicalAnd(QueryNode,QueryNode).mjava","sourceNew":"  /**\n   * perform a logical and of 2 QueryNode trees. if q1 and q2 are ANDQueryNode\n   * nodes it uses head Node from q1 and adds the children of q2 to q1 if q1 is\n   * a AND node and q2 is not, add q2 as a child of the head node of q1 if q2 is\n   * a AND node and q1 is not, add q1 as a child of the head node of q2 if q1\n   * and q2 are not ANDQueryNode nodes, create a AND node and make q1 and q2\n   * children of that node if q1 or q2 is null it returns the not null node if\n   * q1 = q2 = null it returns null\n   */\n  public final static QueryNode logicalAnd(QueryNode q1, QueryNode q2) {\n    if (q1 == null)\n      return q2;\n    if (q2 == null)\n      return q1;\n\n    ANDOperation op = null;\n    if (q1 instanceof AndQueryNode && q2 instanceof AndQueryNode)\n      op = ANDOperation.BOTH;\n    else if (q1 instanceof AndQueryNode)\n      op = ANDOperation.Q1;\n    else if (q2 instanceof AndQueryNode)\n      op = ANDOperation.Q2;\n    else\n      op = ANDOperation.NONE;\n\n    try {\n      QueryNode result = null;\n      switch (op) {\n      case NONE:\n        List<QueryNode> children = new ArrayList<>();\n        children.add(q1.cloneTree());\n        children.add(q2.cloneTree());\n        result = new AndQueryNode(children);\n        return result;\n      case Q1:\n        result = q1.cloneTree();\n        result.add(q2.cloneTree());\n        return result;\n      case Q2:\n        result = q2.cloneTree();\n        result.add(q1.cloneTree());\n        return result;\n      case BOTH:\n        result = q1.cloneTree();\n        result.add(q2.cloneTree().getChildren());\n        return result;\n      }\n    } catch (CloneNotSupportedException e) {\n      throw new QueryNodeError(e);\n    }\n\n    return null;\n\n  }\n\n","sourceOld":"  /**\n   * perform a logical and of 2 QueryNode trees. if q1 and q2 are ANDQueryNode\n   * nodes it uses head Node from q1 and adds the children of q2 to q1 if q1 is\n   * a AND node and q2 is not, add q2 as a child of the head node of q1 if q2 is\n   * a AND node and q1 is not, add q1 as a child of the head node of q2 if q1\n   * and q2 are not ANDQueryNode nodes, create a AND node and make q1 and q2\n   * children of that node if q1 or q2 is null it returns the not null node if\n   * q1 = q2 = null it returns null\n   */\n  public final static QueryNode logicalAnd(QueryNode q1, QueryNode q2) {\n    if (q1 == null)\n      return q2;\n    if (q2 == null)\n      return q1;\n\n    ANDOperation op = null;\n    if (q1 instanceof AndQueryNode && q2 instanceof AndQueryNode)\n      op = ANDOperation.BOTH;\n    else if (q1 instanceof AndQueryNode)\n      op = ANDOperation.Q1;\n    else if (q1 instanceof AndQueryNode)\n      op = ANDOperation.Q2;\n    else\n      op = ANDOperation.NONE;\n\n    try {\n      QueryNode result = null;\n      switch (op) {\n      case NONE:\n        List<QueryNode> children = new ArrayList<>();\n        children.add(q1.cloneTree());\n        children.add(q2.cloneTree());\n        result = new AndQueryNode(children);\n        return result;\n      case Q1:\n        result = q1.cloneTree();\n        result.add(q2.cloneTree());\n        return result;\n      case Q2:\n        result = q2.cloneTree();\n        result.add(q1.cloneTree());\n        return result;\n      case BOTH:\n        result = q1.cloneTree();\n        result.add(q2.cloneTree().getChildren());\n        return result;\n      }\n    } catch (CloneNotSupportedException e) {\n      throw new QueryNodeError(e);\n    }\n\n    return null;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","5905c7524b0c8f4309ec34827565925556f645f3"],"5905c7524b0c8f4309ec34827565925556f645f3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5905c7524b0c8f4309ec34827565925556f645f3"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e9017cf144952056066919f1ebc7897ff9bd71b1","5905c7524b0c8f4309ec34827565925556f645f3"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5905c7524b0c8f4309ec34827565925556f645f3":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}