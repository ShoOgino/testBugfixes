{"path":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersect(List[#-extends-DocIdSetIterator]).mjava","commits":[{"id":"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1","date":1423845906,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersect(List[#-extends-DocIdSetIterator]).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a conjunction over the provided iterators, taking advantage of\n   *  {@link TwoPhaseDocIdSetIterator}. */\n  public static ConjunctionDISI intersect(List<? extends DocIdSetIterator> iterators) {\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseDocIdSetIterator> twoPhaseIterators = new ArrayList<>();\n    for (DocIdSetIterator iterator : iterators) {\n      if (iterator instanceof Scorer) {\n        // if we have a scorer, check if it supports two-phase iteration\n        TwoPhaseDocIdSetIterator twoPhaseIterator = ((Scorer) iterator).asTwoPhaseIterator();\n        if (twoPhaseIterator != null) {\n          // Note: \n          allIterators.add(twoPhaseIterator.approximation());\n          twoPhaseIterators.add(twoPhaseIterator);\n        } else {\n          allIterators.add(iterator);\n        }\n      } else {\n        // no approximation support, use the iterator as-is\n        allIterators.add(iterator);\n      }\n    }\n\n    if (twoPhaseIterators.isEmpty()) {\n      return new ConjunctionDISI(allIterators);\n    } else {\n      return new TwoPhase(allIterators, twoPhaseIterators);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3d6eb0072094d94624002318ba2d4c840946833","date":1424947971,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersect(List[#-extends-DocIdSetIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersect(List[#-extends-DocIdSetIterator]).mjava","sourceNew":"  /** Create a conjunction over the provided iterators, taking advantage of\n   *  {@link TwoPhaseIterator}. */\n  public static ConjunctionDISI intersect(List<? extends DocIdSetIterator> iterators) {\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (DocIdSetIterator iterator : iterators) {\n      if (iterator instanceof Scorer) {\n        // if we have a scorer, check if it supports two-phase iteration\n        TwoPhaseIterator twoPhaseIterator = ((Scorer) iterator).asTwoPhaseIterator();\n        if (twoPhaseIterator != null) {\n          // Note: \n          allIterators.add(twoPhaseIterator.approximation());\n          twoPhaseIterators.add(twoPhaseIterator);\n        } else {\n          allIterators.add(iterator);\n        }\n      } else {\n        // no approximation support, use the iterator as-is\n        allIterators.add(iterator);\n      }\n    }\n\n    if (twoPhaseIterators.isEmpty()) {\n      return new ConjunctionDISI(allIterators);\n    } else {\n      return new TwoPhase(allIterators, twoPhaseIterators);\n    }\n  }\n\n","sourceOld":"  /** Create a conjunction over the provided iterators, taking advantage of\n   *  {@link TwoPhaseDocIdSetIterator}. */\n  public static ConjunctionDISI intersect(List<? extends DocIdSetIterator> iterators) {\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseDocIdSetIterator> twoPhaseIterators = new ArrayList<>();\n    for (DocIdSetIterator iterator : iterators) {\n      if (iterator instanceof Scorer) {\n        // if we have a scorer, check if it supports two-phase iteration\n        TwoPhaseDocIdSetIterator twoPhaseIterator = ((Scorer) iterator).asTwoPhaseIterator();\n        if (twoPhaseIterator != null) {\n          // Note: \n          allIterators.add(twoPhaseIterator.approximation());\n          twoPhaseIterators.add(twoPhaseIterator);\n        } else {\n          allIterators.add(iterator);\n        }\n      } else {\n        // no approximation support, use the iterator as-is\n        allIterators.add(iterator);\n      }\n    }\n\n    if (twoPhaseIterators.isEmpty()) {\n      return new ConjunctionDISI(allIterators);\n    } else {\n      return new TwoPhase(allIterators, twoPhaseIterators);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersect(List[#-extends-DocIdSetIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersect(List[#-extends-DocIdSetIterator]).mjava","sourceNew":"  /** Create a conjunction over the provided iterators, taking advantage of\n   *  {@link TwoPhaseIterator}. */\n  public static ConjunctionDISI intersect(List<? extends DocIdSetIterator> iterators) {\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (DocIdSetIterator iterator : iterators) {\n      if (iterator instanceof Scorer) {\n        // if we have a scorer, check if it supports two-phase iteration\n        TwoPhaseIterator twoPhaseIterator = ((Scorer) iterator).asTwoPhaseIterator();\n        if (twoPhaseIterator != null) {\n          // Note: \n          allIterators.add(twoPhaseIterator.approximation());\n          twoPhaseIterators.add(twoPhaseIterator);\n        } else {\n          allIterators.add(iterator);\n        }\n      } else {\n        // no approximation support, use the iterator as-is\n        allIterators.add(iterator);\n      }\n    }\n\n    if (twoPhaseIterators.isEmpty()) {\n      return new ConjunctionDISI(allIterators);\n    } else {\n      return new TwoPhase(allIterators, twoPhaseIterators);\n    }\n  }\n\n","sourceOld":"  /** Create a conjunction over the provided iterators, taking advantage of\n   *  {@link TwoPhaseDocIdSetIterator}. */\n  public static ConjunctionDISI intersect(List<? extends DocIdSetIterator> iterators) {\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseDocIdSetIterator> twoPhaseIterators = new ArrayList<>();\n    for (DocIdSetIterator iterator : iterators) {\n      if (iterator instanceof Scorer) {\n        // if we have a scorer, check if it supports two-phase iteration\n        TwoPhaseDocIdSetIterator twoPhaseIterator = ((Scorer) iterator).asTwoPhaseIterator();\n        if (twoPhaseIterator != null) {\n          // Note: \n          allIterators.add(twoPhaseIterator.approximation());\n          twoPhaseIterators.add(twoPhaseIterator);\n        } else {\n          allIterators.add(iterator);\n        }\n      } else {\n        // no approximation support, use the iterator as-is\n        allIterators.add(iterator);\n      }\n    }\n\n    if (twoPhaseIterators.isEmpty()) {\n      return new ConjunctionDISI(allIterators);\n    } else {\n      return new TwoPhase(allIterators, twoPhaseIterators);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersect(List[#-extends-DocIdSetIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersect(List[#-extends-DocIdSetIterator]).mjava","sourceNew":"  /** Create a conjunction over the provided iterators, taking advantage of\n   *  {@link TwoPhaseIterator}. */\n  public static ConjunctionDISI intersect(List<? extends DocIdSetIterator> iterators) {\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (DocIdSetIterator iterator : iterators) {\n      TwoPhaseIterator twoPhaseIterator = null;\n      if (iterator instanceof Scorer) { \n        twoPhaseIterator = ((Scorer) iterator).asTwoPhaseIterator();\n      } else if (iterator instanceof Spans) {\n        twoPhaseIterator = ((Spans) iterator).asTwoPhaseIterator();\n      }\n      if (twoPhaseIterator != null) {\n        allIterators.add(twoPhaseIterator.approximation());\n        twoPhaseIterators.add(twoPhaseIterator);\n      } else { // no approximation support, use the iterator as-is\n        allIterators.add(iterator);\n      }\n    }\n\n    if (twoPhaseIterators.isEmpty()) {\n      return new ConjunctionDISI(allIterators);\n    } else {\n      return new TwoPhase(allIterators, twoPhaseIterators);\n    }\n  }\n\n","sourceOld":"  /** Create a conjunction over the provided iterators, taking advantage of\n   *  {@link TwoPhaseIterator}. */\n  public static ConjunctionDISI intersect(List<? extends DocIdSetIterator> iterators) {\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (DocIdSetIterator iterator : iterators) {\n      if (iterator instanceof Scorer) {\n        // if we have a scorer, check if it supports two-phase iteration\n        TwoPhaseIterator twoPhaseIterator = ((Scorer) iterator).asTwoPhaseIterator();\n        if (twoPhaseIterator != null) {\n          // Note: \n          allIterators.add(twoPhaseIterator.approximation());\n          twoPhaseIterators.add(twoPhaseIterator);\n        } else {\n          allIterators.add(iterator);\n        }\n      } else {\n        // no approximation support, use the iterator as-is\n        allIterators.add(iterator);\n      }\n    }\n\n    if (twoPhaseIterators.isEmpty()) {\n      return new ConjunctionDISI(allIterators);\n    } else {\n      return new TwoPhase(allIterators, twoPhaseIterators);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersect(List[#-extends-DocIdSetIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersect(List[#-extends-DocIdSetIterator]).mjava","sourceNew":"  /** Create a conjunction over the provided iterators, taking advantage of\n   *  {@link TwoPhaseIterator}. */\n  public static ConjunctionDISI intersect(List<? extends DocIdSetIterator> iterators) {\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (DocIdSetIterator iterator : iterators) {\n      TwoPhaseIterator twoPhaseIterator = null;\n      if (iterator instanceof Scorer) { \n        twoPhaseIterator = ((Scorer) iterator).asTwoPhaseIterator();\n      } else if (iterator instanceof Spans) {\n        twoPhaseIterator = ((Spans) iterator).asTwoPhaseIterator();\n      }\n      if (twoPhaseIterator != null) {\n        allIterators.add(twoPhaseIterator.approximation());\n        twoPhaseIterators.add(twoPhaseIterator);\n      } else { // no approximation support, use the iterator as-is\n        allIterators.add(iterator);\n      }\n    }\n\n    if (twoPhaseIterators.isEmpty()) {\n      return new ConjunctionDISI(allIterators);\n    } else {\n      return new TwoPhase(allIterators, twoPhaseIterators);\n    }\n  }\n\n","sourceOld":"  /** Create a conjunction over the provided iterators, taking advantage of\n   *  {@link TwoPhaseIterator}. */\n  public static ConjunctionDISI intersect(List<? extends DocIdSetIterator> iterators) {\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (DocIdSetIterator iterator : iterators) {\n      if (iterator instanceof Scorer) {\n        // if we have a scorer, check if it supports two-phase iteration\n        TwoPhaseIterator twoPhaseIterator = ((Scorer) iterator).asTwoPhaseIterator();\n        if (twoPhaseIterator != null) {\n          // Note: \n          allIterators.add(twoPhaseIterator.approximation());\n          twoPhaseIterators.add(twoPhaseIterator);\n        } else {\n          allIterators.add(iterator);\n        }\n      } else {\n        // no approximation support, use the iterator as-is\n        allIterators.add(iterator);\n      }\n    }\n\n    if (twoPhaseIterators.isEmpty()) {\n      return new ConjunctionDISI(allIterators);\n    } else {\n      return new TwoPhase(allIterators, twoPhaseIterators);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7","date":1429852340,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersect(List[#-extends-DocIdSetIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersect(List[#-extends-DocIdSetIterator]).mjava","sourceNew":"  /** Create a conjunction over the provided iterators, taking advantage of\n   *  {@link TwoPhaseIterator}. */\n  public static ConjunctionDISI intersect(List<? extends DocIdSetIterator> iterators) {\n    assert iterators.size() >= 2;\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (DocIdSetIterator iter : iterators) {\n      TwoPhaseIterator twoPhaseIter = TwoPhaseIterator.asTwoPhaseIterator(iter);\n      if (twoPhaseIter != null) {\n        allIterators.add(twoPhaseIter.approximation());\n        twoPhaseIterators.add(twoPhaseIter);\n      } else { // no approximation support, use the iterator as-is\n        allIterators.add(iter);\n      }\n    }\n\n    if (twoPhaseIterators.isEmpty()) {\n      return new ConjunctionDISI(allIterators);\n    } else {\n      return new TwoPhase(allIterators, twoPhaseIterators);\n    }\n  }\n\n","sourceOld":"  /** Create a conjunction over the provided iterators, taking advantage of\n   *  {@link TwoPhaseIterator}. */\n  public static ConjunctionDISI intersect(List<? extends DocIdSetIterator> iterators) {\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (DocIdSetIterator iterator : iterators) {\n      TwoPhaseIterator twoPhaseIterator = null;\n      if (iterator instanceof Scorer) { \n        twoPhaseIterator = ((Scorer) iterator).asTwoPhaseIterator();\n      } else if (iterator instanceof Spans) {\n        twoPhaseIterator = ((Spans) iterator).asTwoPhaseIterator();\n      }\n      if (twoPhaseIterator != null) {\n        allIterators.add(twoPhaseIterator.approximation());\n        twoPhaseIterators.add(twoPhaseIterator);\n      } else { // no approximation support, use the iterator as-is\n        allIterators.add(iterator);\n      }\n    }\n\n    if (twoPhaseIterators.isEmpty()) {\n      return new ConjunctionDISI(allIterators);\n    } else {\n      return new TwoPhase(allIterators, twoPhaseIterators);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84e6840c8664c06adc970e9491e04a67505396ad","date":1435200346,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersect(List[#-extends-DocIdSetIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersect(List[#-extends-DocIdSetIterator]).mjava","sourceNew":"  /** Create a conjunction over the provided iterators, taking advantage of\n   *  {@link TwoPhaseIterator}. */\n  public static ConjunctionDISI intersect(List<? extends DocIdSetIterator> iterators) {\n    if (iterators.size() < 2) {\n      throw new IllegalArgumentException(\"Cannot make a ConjunctionDISI of less than 2 iterators\");\n    }\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (DocIdSetIterator iter : iterators) {\n      addIterator(iter, allIterators, twoPhaseIterators);\n    }\n\n    if (twoPhaseIterators.isEmpty()) {\n      return new ConjunctionDISI(allIterators);\n    } else {\n      return new TwoPhase(allIterators, twoPhaseIterators);\n    }\n  }\n\n","sourceOld":"  /** Create a conjunction over the provided iterators, taking advantage of\n   *  {@link TwoPhaseIterator}. */\n  public static ConjunctionDISI intersect(List<? extends DocIdSetIterator> iterators) {\n    assert iterators.size() >= 2;\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (DocIdSetIterator iter : iterators) {\n      TwoPhaseIterator twoPhaseIter = TwoPhaseIterator.asTwoPhaseIterator(iter);\n      if (twoPhaseIter != null) {\n        allIterators.add(twoPhaseIter.approximation());\n        twoPhaseIterators.add(twoPhaseIter);\n      } else { // no approximation support, use the iterator as-is\n        allIterators.add(iter);\n      }\n    }\n\n    if (twoPhaseIterators.isEmpty()) {\n      return new ConjunctionDISI(allIterators);\n    } else {\n      return new TwoPhase(allIterators, twoPhaseIterators);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersectIterators(List[DocIdSetIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersect(List[#-extends-DocIdSetIterator]).mjava","sourceNew":"  /** Create a conjunction over the provided DocIdSetIterators. */\n  public static ConjunctionDISI intersectIterators(List<DocIdSetIterator> iterators) {\n    if (iterators.size() < 2) {\n      throw new IllegalArgumentException(\"Cannot make a ConjunctionDISI of less than 2 iterators\");\n    }\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (DocIdSetIterator iterator : iterators) {\n      addIterator(iterator, allIterators, twoPhaseIterators);\n    }\n\n    if (twoPhaseIterators.isEmpty()) {\n      return new ConjunctionDISI(allIterators);\n    } else {\n      return new TwoPhase(allIterators, twoPhaseIterators);\n    }\n  }\n\n","sourceOld":"  /** Create a conjunction over the provided iterators, taking advantage of\n   *  {@link TwoPhaseIterator}. */\n  public static ConjunctionDISI intersect(List<? extends DocIdSetIterator> iterators) {\n    if (iterators.size() < 2) {\n      throw new IllegalArgumentException(\"Cannot make a ConjunctionDISI of less than 2 iterators\");\n    }\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (DocIdSetIterator iter : iterators) {\n      addIterator(iter, allIterators, twoPhaseIterators);\n    }\n\n    if (twoPhaseIterators.isEmpty()) {\n      return new ConjunctionDISI(allIterators);\n    } else {\n      return new TwoPhase(allIterators, twoPhaseIterators);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1","a3d6eb0072094d94624002318ba2d4c840946833"],"84e6840c8664c06adc970e9491e04a67505396ad":["7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3d6eb0072094d94624002318ba2d4c840946833":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["84e6840c8664c06adc970e9491e04a67505396ad"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["a3d6eb0072094d94624002318ba2d4c840946833"],"fab172655716b96f7e42376116235017a922de3a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7":["84e6840c8664c06adc970e9491e04a67505396ad"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["fab172655716b96f7e42376116235017a922de3a"],"84e6840c8664c06adc970e9491e04a67505396ad":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"],"a3d6eb0072094d94624002318ba2d4c840946833":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a3d6eb0072094d94624002318ba2d4c840946833"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}