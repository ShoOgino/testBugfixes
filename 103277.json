{"path":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","commits":[{"id":"654038228db838218b2f5a2a02df4f6ed01ec154","date":1121886703,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","pathOld":"/dev/null","sourceNew":"  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      Vector clauses = new Vector();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText);\n        if (q != null) {\n          if (q instanceof PhraseQuery) {\n            ((PhraseQuery) q).setSlop(slop);\n          }\n          if (q instanceof MultiPhraseQuery) {\n            ((MultiPhraseQuery) q).setSlop(slop);\n          }\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getFieldQuery(field, queryText);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bad8f8c5bbb34d418019b17b33e219ab14692d8d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbbdd469796c4f57b306728d94c2e230a08453e0","date":1128461437,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","sourceNew":"  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      Vector clauses = new Vector();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText);\n        if (q != null) {\n          if (q instanceof PhraseQuery) {\n            ((PhraseQuery) q).setSlop(slop);\n          }\n          if (q instanceof MultiPhraseQuery) {\n            ((MultiPhraseQuery) q).setSlop(slop);\n          }\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getFieldQuery(field, queryText);\n  }\n\n","sourceOld":"  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      Vector clauses = new Vector();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText);\n        if (q != null) {\n          if (q instanceof PhraseQuery) {\n            ((PhraseQuery) q).setSlop(slop);\n          }\n          if (q instanceof MultiPhraseQuery) {\n            ((MultiPhraseQuery) q).setSlop(slop);\n          }\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getFieldQuery(field, queryText);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d7846472a0c5e319ab49c405925b78d8e4ded3af","date":1161124017,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","sourceNew":"  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      Vector clauses = new Vector();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = (Float)boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          if (q instanceof PhraseQuery) {\n            ((PhraseQuery) q).setSlop(slop);\n          }\n          if (q instanceof MultiPhraseQuery) {\n            ((MultiPhraseQuery) q).setSlop(slop);\n          }\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getFieldQuery(field, queryText);\n  }\n\n","sourceOld":"  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      Vector clauses = new Vector();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText);\n        if (q != null) {\n          if (q instanceof PhraseQuery) {\n            ((PhraseQuery) q).setSlop(slop);\n          }\n          if (q instanceof MultiPhraseQuery) {\n            ((MultiPhraseQuery) q).setSlop(slop);\n          }\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getFieldQuery(field, queryText);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e56e16c6c90a7d4b50aead1f331802fc4dabed16","date":1175738806,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","sourceNew":"  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      Vector clauses = new Vector();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = getFieldQuery(fields[i], queryText);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = (Float)boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          if (q instanceof PhraseQuery) {\n            ((PhraseQuery) q).setSlop(slop);\n          }\n          if (q instanceof MultiPhraseQuery) {\n            ((MultiPhraseQuery) q).setSlop(slop);\n          }\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getFieldQuery(field, queryText);\n  }\n\n","sourceOld":"  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      Vector clauses = new Vector();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = (Float)boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          if (q instanceof PhraseQuery) {\n            ((PhraseQuery) q).setSlop(slop);\n          }\n          if (q instanceof MultiPhraseQuery) {\n            ((MultiPhraseQuery) q).setSlop(slop);\n          }\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getFieldQuery(field, queryText);\n  }\n\n","bugFix":null,"bugIntro":["bad8f8c5bbb34d418019b17b33e219ab14692d8d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bad8f8c5bbb34d418019b17b33e219ab14692d8d","date":1205222814,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","sourceNew":"  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      Vector clauses = new Vector();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = (Float)boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          applySlop(q,slop);\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText);\n    applySlop(q,slop);\n    return q;\n  }\n\n","sourceOld":"  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      Vector clauses = new Vector();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = getFieldQuery(fields[i], queryText);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = (Float)boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          if (q instanceof PhraseQuery) {\n            ((PhraseQuery) q).setSlop(slop);\n          }\n          if (q instanceof MultiPhraseQuery) {\n            ((MultiPhraseQuery) q).setSlop(slop);\n          }\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getFieldQuery(field, queryText);\n  }\n\n","bugFix":["e56e16c6c90a7d4b50aead1f331802fc4dabed16","654038228db838218b2f5a2a02df4f6ed01ec154"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7b6cdc70e097da94da79a655ed8f94477ff69f5","date":1220815360,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","sourceNew":"  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      List clauses = new ArrayList();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = (Float)boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          applySlop(q,slop);\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText);\n    applySlop(q,slop);\n    return q;\n  }\n\n","sourceOld":"  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      Vector clauses = new Vector();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = (Float)boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          applySlop(q,slop);\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText);\n    applySlop(q,slop);\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84dc138e05008664b5e01dc83f6ad95bd73b91c5","date":1256054789,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","sourceNew":"  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          applySlop(q,slop);\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText);\n    applySlop(q,slop);\n    return q;\n  }\n\n","sourceOld":"  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      List clauses = new ArrayList();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = (Float)boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          applySlop(q,slop);\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText);\n    applySlop(q,slop);\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b7ca4a8be66d54de1c9a5d16a1e13e71c0b4985","date":1262018769,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","sourceNew":"  @Override\n  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          applySlop(q,slop);\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText);\n    applySlop(q,slop);\n    return q;\n  }\n\n","sourceOld":"  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          applySlop(q,slop);\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText);\n    applySlop(q,slop);\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,String,int).mjava","sourceNew":"  @Override\n  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          applySlop(q,slop);\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText);\n    applySlop(q,slop);\n    return q;\n  }\n\n","sourceOld":"  @Override\n  protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          applySlop(q,slop);\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText);\n    applySlop(q,slop);\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fbbdd469796c4f57b306728d94c2e230a08453e0":["654038228db838218b2f5a2a02df4f6ed01ec154"],"e56e16c6c90a7d4b50aead1f331802fc4dabed16":["d7846472a0c5e319ab49c405925b78d8e4ded3af"],"d7846472a0c5e319ab49c405925b78d8e4ded3af":["fbbdd469796c4f57b306728d94c2e230a08453e0"],"654038228db838218b2f5a2a02df4f6ed01ec154":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["bad8f8c5bbb34d418019b17b33e219ab14692d8d"],"bad8f8c5bbb34d418019b17b33e219ab14692d8d":["e56e16c6c90a7d4b50aead1f331802fc4dabed16"],"8b7ca4a8be66d54de1c9a5d16a1e13e71c0b4985":["84dc138e05008664b5e01dc83f6ad95bd73b91c5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8b7ca4a8be66d54de1c9a5d16a1e13e71c0b4985"],"84dc138e05008664b5e01dc83f6ad95bd73b91c5":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"]},"commit2Childs":{"fbbdd469796c4f57b306728d94c2e230a08453e0":["d7846472a0c5e319ab49c405925b78d8e4ded3af"],"e56e16c6c90a7d4b50aead1f331802fc4dabed16":["bad8f8c5bbb34d418019b17b33e219ab14692d8d"],"d7846472a0c5e319ab49c405925b78d8e4ded3af":["e56e16c6c90a7d4b50aead1f331802fc4dabed16"],"654038228db838218b2f5a2a02df4f6ed01ec154":["fbbdd469796c4f57b306728d94c2e230a08453e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["654038228db838218b2f5a2a02df4f6ed01ec154"],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["84dc138e05008664b5e01dc83f6ad95bd73b91c5"],"bad8f8c5bbb34d418019b17b33e219ab14692d8d":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"],"8b7ca4a8be66d54de1c9a5d16a1e13e71c0b4985":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"84dc138e05008664b5e01dc83f6ad95bd73b91c5":["8b7ca4a8be66d54de1c9a5d16a1e13e71c0b4985"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}