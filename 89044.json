{"path":"solr/core/src/java/org/apache/solr/util/ExportTool.JsonSink#accept(SolrDocument).mjava","commits":[{"id":"b26d91db0d1d754936add788fa3a21acaadc9685","date":1565418863,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ExportTool.JsonSink#accept(SolrDocument).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void accept(SolrDocument doc) throws IOException {\n      Map m = new LinkedHashMap(doc.size());\n      doc.forEach((s, field) -> {\n        if (s.equals(\"_version_\")) return;\n        if (field instanceof List) {\n          if (((List) field).size() == 1) {\n            field = ((List) field).get(0);\n          }\n        }\n        m.put(s, field);\n      });\n      jsonw.writeObj(m);\n      writer.flush();\n      writer.append('\\n');\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b373db031e25f03ad6783efcfb77809dcd963565"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b373db031e25f03ad6783efcfb77809dcd963565","date":1565686445,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ExportTool.JsonSink#accept(SolrDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/ExportTool.JsonSink#accept(SolrDocument).mjava","sourceNew":"    @Override\n    public synchronized void accept(SolrDocument doc) throws IOException {\n      docs.incrementAndGet();\n      charArr.reset();\n      Map m = new LinkedHashMap(doc.size());\n      doc.forEach((s, field) -> {\n        if (s.equals(\"_version_\") || s.equals(\"_roor_\")) return;\n        if (field instanceof List) {\n          if (((List) field).size() == 1) {\n            field = ((List) field).get(0);\n          }\n        }\n        m.put(s, field);\n      });\n      jsonWriter.write(m);\n      writer.write(charArr.getArray(), charArr.getStart(), charArr.getEnd());\n      writer.append('\\n');\n    }\n\n","sourceOld":"    @Override\n    public void accept(SolrDocument doc) throws IOException {\n      Map m = new LinkedHashMap(doc.size());\n      doc.forEach((s, field) -> {\n        if (s.equals(\"_version_\")) return;\n        if (field instanceof List) {\n          if (((List) field).size() == 1) {\n            field = ((List) field).get(0);\n          }\n        }\n        m.put(s, field);\n      });\n      jsonw.writeObj(m);\n      writer.flush();\n      writer.append('\\n');\n\n    }\n\n","bugFix":["b26d91db0d1d754936add788fa3a21acaadc9685"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"161e330a2c1ea9c6baa3615ab380472a4ae80749","date":1582252910,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ExportTool.JsonSink#accept(SolrDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/ExportTool.JsonSink#accept(SolrDocument).mjava","sourceNew":"    @Override\n    public synchronized void accept(SolrDocument doc) throws IOException {\n      charArr.reset();\n      Map m = new LinkedHashMap(doc.size());\n      doc.forEach((s, field) -> {\n        if (s.equals(\"_version_\") || s.equals(\"_roor_\")) return;\n        if (field instanceof List) {\n          if (((List) field).size() == 1) {\n            field = ((List) field).get(0);\n          }\n        }\n        m.put(s, field);\n      });\n      jsonWriter.write(m);\n      writer.write(charArr.getArray(), charArr.getStart(), charArr.getEnd());\n      writer.append('\\n');\n      super.accept(doc);\n    }\n\n","sourceOld":"    @Override\n    public synchronized void accept(SolrDocument doc) throws IOException {\n      docs.incrementAndGet();\n      charArr.reset();\n      Map m = new LinkedHashMap(doc.size());\n      doc.forEach((s, field) -> {\n        if (s.equals(\"_version_\") || s.equals(\"_roor_\")) return;\n        if (field instanceof List) {\n          if (((List) field).size() == 1) {\n            field = ((List) field).get(0);\n          }\n        }\n        m.put(s, field);\n      });\n      jsonWriter.write(m);\n      writer.write(charArr.getArray(), charArr.getStart(), charArr.getEnd());\n      writer.append('\\n');\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3fba3dcc5d2c31b4652c425cc1cbada9dff4a51","date":1582784911,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ExportTool.JsonSink#accept(SolrDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/ExportTool.JsonSink#accept(SolrDocument).mjava","sourceNew":"    @Override\n    public synchronized void accept(SolrDocument doc) throws IOException {\n      charArr.reset();\n      Map m = new LinkedHashMap(doc.size());\n      doc.forEach((s, field) -> {\n        if (s.equals(\"_version_\") || s.equals(\"_roor_\")) return;\n        if (field instanceof List) {\n          if (((List) field).size() == 1) {\n            field = ((List) field).get(0);\n          }\n        }\n        field = constructDateStr(field);\n        if (field instanceof List) {\n          List list = (List) field;\n          if (hasdate(list)) {\n            ArrayList<Object> listCopy = new ArrayList<>(list.size());\n            for (Object o : list) listCopy.add(constructDateStr(o));\n            field = listCopy;\n          }\n        }\n        m.put(s, field);\n      });\n      jsonWriter.write(m);\n      writer.write(charArr.getArray(), charArr.getStart(), charArr.getEnd());\n      writer.append('\\n');\n      super.accept(doc);\n    }\n\n","sourceOld":"    @Override\n    public synchronized void accept(SolrDocument doc) throws IOException {\n      charArr.reset();\n      Map m = new LinkedHashMap(doc.size());\n      doc.forEach((s, field) -> {\n        if (s.equals(\"_version_\") || s.equals(\"_roor_\")) return;\n        if (field instanceof List) {\n          if (((List) field).size() == 1) {\n            field = ((List) field).get(0);\n          }\n        }\n        m.put(s, field);\n      });\n      jsonWriter.write(m);\n      writer.write(charArr.getArray(), charArr.getStart(), charArr.getEnd());\n      writer.append('\\n');\n      super.accept(doc);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ExportTool.JsonSink#accept(SolrDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/ExportTool.JsonSink#accept(SolrDocument).mjava","sourceNew":"    @Override\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    public synchronized void accept(SolrDocument doc) throws IOException {\n      charArr.reset();\n      Map m = new LinkedHashMap(doc.size());\n      doc.forEach((s, field) -> {\n        if (s.equals(\"_version_\") || s.equals(\"_roor_\")) return;\n        if (field instanceof List) {\n          if (((List) field).size() == 1) {\n            field = ((List) field).get(0);\n          }\n        }\n        field = constructDateStr(field);\n        if (field instanceof List) {\n          List list = (List) field;\n          if (hasdate(list)) {\n            ArrayList<Object> listCopy = new ArrayList<>(list.size());\n            for (Object o : list) listCopy.add(constructDateStr(o));\n            field = listCopy;\n          }\n        }\n        m.put(s, field);\n      });\n      jsonWriter.write(m);\n      writer.write(charArr.getArray(), charArr.getStart(), charArr.getEnd());\n      writer.append('\\n');\n      super.accept(doc);\n    }\n\n","sourceOld":"    @Override\n    public synchronized void accept(SolrDocument doc) throws IOException {\n      charArr.reset();\n      Map m = new LinkedHashMap(doc.size());\n      doc.forEach((s, field) -> {\n        if (s.equals(\"_version_\") || s.equals(\"_roor_\")) return;\n        if (field instanceof List) {\n          if (((List) field).size() == 1) {\n            field = ((List) field).get(0);\n          }\n        }\n        field = constructDateStr(field);\n        if (field instanceof List) {\n          List list = (List) field;\n          if (hasdate(list)) {\n            ArrayList<Object> listCopy = new ArrayList<>(list.size());\n            for (Object o : list) listCopy.add(constructDateStr(o));\n            field = listCopy;\n          }\n        }\n        m.put(s, field);\n      });\n      jsonWriter.write(m);\n      writer.write(charArr.getArray(), charArr.getStart(), charArr.getEnd());\n      writer.append('\\n');\n      super.accept(doc);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b373db031e25f03ad6783efcfb77809dcd963565":["b26d91db0d1d754936add788fa3a21acaadc9685"],"b3fba3dcc5d2c31b4652c425cc1cbada9dff4a51":["161e330a2c1ea9c6baa3615ab380472a4ae80749"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["b3fba3dcc5d2c31b4652c425cc1cbada9dff4a51"],"161e330a2c1ea9c6baa3615ab380472a4ae80749":["b373db031e25f03ad6783efcfb77809dcd963565"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"b26d91db0d1d754936add788fa3a21acaadc9685":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b373db031e25f03ad6783efcfb77809dcd963565":["161e330a2c1ea9c6baa3615ab380472a4ae80749"],"b3fba3dcc5d2c31b4652c425cc1cbada9dff4a51":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b26d91db0d1d754936add788fa3a21acaadc9685"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"161e330a2c1ea9c6baa3615ab380472a4ae80749":["b3fba3dcc5d2c31b4652c425cc1cbada9dff4a51"],"b26d91db0d1d754936add788fa3a21acaadc9685":["b373db031e25f03ad6783efcfb77809dcd963565"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}