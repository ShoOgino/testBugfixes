{"path":"backwards/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true,\n                                           IndexWriter.MaxFieldLength.LIMITED);\n\n      writer.setUseCompoundFile(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(Version.LUCENE_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","pathOld":"backwards/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","sourceNew":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true,\n                                           IndexWriter.MaxFieldLength.LIMITED);\n\n      writer.setUseCompoundFile(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(Version.LUCENE_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n  }\n\n","sourceOld":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true,\n                                           IndexWriter.MaxFieldLength.LIMITED);\n\n      writer.setUseCompoundFile(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(Version.LUCENE_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}