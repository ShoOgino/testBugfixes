{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#cacheRootArcs(FST[Object]).mjava","commits":[{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#cacheRootArcs(FST[Object]).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#cacheRootArcs().mjava","sourceNew":"  /**\n   * Cache the root node's output arcs starting with completions with the\n   * highest weights.\n   */\n  @SuppressWarnings({\"all\"})\n  private static Arc<Object>[] cacheRootArcs(FST<Object> automaton) {\n    try {\n      List<Arc<Object>> rootArcs = new ArrayList<Arc<Object>>();\n      Arc<Object> arc = automaton.getFirstArc(new Arc<Object>());\n      automaton.readFirstTargetArc(arc, arc);\n      while (true) {\n        rootArcs.add(new Arc<Object>().copyFrom(arc));\n        if (arc.isLast()) break;\n        automaton.readNextArc(arc);\n      }\n      \n      Collections.reverse(rootArcs); // we want highest weights first.\n      return rootArcs.toArray(new Arc[rootArcs.size()]);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Cache the root node's output arcs starting with completions with the highest weights.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private void cacheRootArcs() throws IOException {\n    if (automaton != null) {\n      List<Arc<Object>> rootArcs = new ArrayList<Arc<Object>>();\n      Arc<Object> arc = automaton.getFirstArc(new Arc<Object>());\n      automaton.readFirstTargetArc(arc, arc);\n      while (true) {\n        rootArcs.add(new Arc<Object>().copyFrom(arc));\n        if (arc.isLast())\n          break;\n        automaton.readNextArc(arc);\n      }\n\n      Collections.reverse(rootArcs); // we want highest weights first.\n      this.rootArcs = rootArcs.toArray(new Arc[rootArcs.size()]);\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#cacheRootArcs(FST[Object]).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#cacheRootArcs(FST[Object]).mjava","sourceNew":"  /**\n   * Cache the root node's output arcs starting with completions with the\n   * highest weights.\n   */\n  @SuppressWarnings({\"all\"})\n  private static Arc<Object>[] cacheRootArcs(FST<Object> automaton) {\n    try {\n      List<Arc<Object>> rootArcs = new ArrayList<Arc<Object>>();\n      Arc<Object> arc = automaton.getFirstArc(new Arc<Object>());\n      automaton.readFirstTargetArc(arc, arc);\n      while (true) {\n        rootArcs.add(new Arc<Object>().copyFrom(arc));\n        if (arc.isLast()) break;\n        automaton.readNextArc(arc);\n      }\n      \n      Collections.reverse(rootArcs); // we want highest weights first.\n      return rootArcs.toArray(new Arc[rootArcs.size()]);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Cache the root node's output arcs starting with completions with the\n   * highest weights.\n   */\n  @SuppressWarnings({\"all\"})\n  private static Arc<Object>[] cacheRootArcs(FST<Object> automaton) {\n    try {\n      List<Arc<Object>> rootArcs = new ArrayList<Arc<Object>>();\n      Arc<Object> arc = automaton.getFirstArc(new Arc<Object>());\n      automaton.readFirstTargetArc(arc, arc);\n      while (true) {\n        rootArcs.add(new Arc<Object>().copyFrom(arc));\n        if (arc.isLast()) break;\n        automaton.readNextArc(arc);\n      }\n      \n      Collections.reverse(rootArcs); // we want highest weights first.\n      return rootArcs.toArray(new Arc[rootArcs.size()]);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}