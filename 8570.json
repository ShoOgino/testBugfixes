{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","pathOld":"/dev/null","sourceNew":"  private void testCloudSolrStreamWithZkHost() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(collection1, zkHost=\" + zkServer.getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n    assertLong(tuples.get(0),\"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + zkServer.getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n    assertLong(tuples.get(0),\"alias.a_i\", 0);\n    assertString(tuples.get(0),\"name\", \"hello0\");    \n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\" + zkServer.getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n    assertLong(tuples.get(1),\"a_i\", 3);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7","date":1449800905,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","sourceNew":"  private void testCloudSolrStreamWithZkHost() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(collection1, zkHost=\" + zkServer.getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n    assertLong(tuples.get(0),\"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + zkServer.getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n    assertLong(tuples.get(0),\"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\" + zkServer.getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testCloudSolrStreamWithZkHost() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(collection1, zkHost=\" + zkServer.getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n    assertLong(tuples.get(0),\"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + zkServer.getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n    assertLong(tuples.get(0),\"alias.a_i\", 0);\n    assertString(tuples.get(0),\"name\", \"hello0\");    \n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\" + zkServer.getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n    assertLong(tuples.get(1),\"a_i\", 3);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10b9c6c42133576daaccbd79bd04c88511b9caca","date":1455930223,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","sourceNew":"  private void testCloudSolrStreamWithZkHost() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(collection1, zkHost=\" + zkServer.getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + zkServer.getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\" + zkServer.getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testCloudSolrStreamWithZkHost() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(collection1, zkHost=\" + zkServer.getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n    assertLong(tuples.get(0),\"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + zkServer.getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n    assertLong(tuples.get(0),\"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\" + zkServer.getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","sourceNew":"  @Test\n  public void testCloudSolrStreamWithZkHost() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", zkHost=\" + cluster.getZkServer().getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + cluster.getZkServer().getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\"\n        + cluster.getZkServer().getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n  }\n\n","sourceOld":"  private void testCloudSolrStreamWithZkHost() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(collection1, zkHost=\" + zkServer.getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + zkServer.getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\" + zkServer.getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","sourceNew":"  @Test\n  public void testCloudSolrStreamWithZkHost() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", zkHost=\" + cluster.getZkServer().getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + cluster.getZkServer().getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\"\n        + cluster.getZkServer().getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n  }\n\n","sourceOld":"  private void testCloudSolrStreamWithZkHost() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(collection1, zkHost=\" + zkServer.getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + zkServer.getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\" + zkServer.getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","sourceNew":"  @Test\n  public void testCloudSolrStreamWithZkHost() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", zkHost=\" + cluster.getZkServer().getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + cluster.getZkServer().getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\"\n        + cluster.getZkServer().getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n  }\n\n","sourceOld":"  private void testCloudSolrStreamWithZkHost() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(collection1, zkHost=\" + zkServer.getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + zkServer.getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\" + zkServer.getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54d17c38a2ec6cf529776157e201d539c5c0ff2f","date":1462480579,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","sourceNew":"  @Test\n  public void testCloudSolrStreamWithZkHost() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", zkHost=\" + cluster.getZkServer().getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + cluster.getZkServer().getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\"\n        + cluster.getZkServer().getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n  }\n\n","sourceOld":"  @Test\n  public void testCloudSolrStreamWithZkHost() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", zkHost=\" + cluster.getZkServer().getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + cluster.getZkServer().getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\"\n        + cluster.getZkServer().getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79728e71d79579147b18f43e27a36e34be4986e2","date":1462480538,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","sourceNew":"  @Test\n  public void testCloudSolrStreamWithZkHost() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", zkHost=\" + cluster.getZkServer().getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + cluster.getZkServer().getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\"\n        + cluster.getZkServer().getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n  }\n\n","sourceOld":"  @Test\n  public void testCloudSolrStreamWithZkHost() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", zkHost=\" + cluster.getZkServer().getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + cluster.getZkServer().getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\"\n        + cluster.getZkServer().getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","sourceNew":"  @Test\n  public void testCloudSolrStreamWithZkHost() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", zkHost=\" + cluster.getZkServer().getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + cluster.getZkServer().getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\"\n        + cluster.getZkServer().getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n  }\n\n","sourceOld":"  private void testCloudSolrStreamWithZkHost() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(collection1, zkHost=\" + zkServer.getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + zkServer.getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\" + zkServer.getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","sourceNew":"  @Test\n  public void testCloudSolrStreamWithZkHost() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", zkHost=\" + cluster.getZkServer().getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + cluster.getZkServer().getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\"\n        + cluster.getZkServer().getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n\n    // Test a couple of multile field lists.\n    expression = StreamExpressionParser.parse(\"search(collection1, fq=\\\"a_s:hello0\\\", fq=\\\"a_s:hello1\\\", q=\\\"id:(*)\\\", \" +\n        \"zkHost=\" + cluster.getZkServer().getZkAddress()+ \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assertEquals(\"fq clauses should have prevented any docs from coming back\", tuples.size(), 0);\n\n\n    expression = StreamExpressionParser.parse(\"search(collection1, fq=\\\"a_s:(hello0 OR hello1)\\\", q=\\\"id:(*)\\\", \" +\n        \"zkHost=\" + cluster.getZkServer().getZkAddress() + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assertEquals(\"Combining an f1 clause should show us 2 docs\", tuples.size(), 2);\n    \n        \n\n  }\n\n","sourceOld":"  @Test\n  public void testCloudSolrStreamWithZkHost() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", zkHost=\" + cluster.getZkServer().getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + cluster.getZkServer().getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\"\n        + cluster.getZkServer().getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","sourceNew":"  @Test\n  public void testCloudSolrStreamWithZkHost() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", zkHost=\" + cluster.getZkServer().getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + cluster.getZkServer().getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\"\n        + cluster.getZkServer().getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n\n    // Test a couple of multile field lists.\n    expression = StreamExpressionParser.parse(\"search(collection1, fq=\\\"a_s:hello0\\\", fq=\\\"a_s:hello1\\\", q=\\\"id:(*)\\\", \" +\n        \"zkHost=\" + cluster.getZkServer().getZkAddress()+ \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assertEquals(\"fq clauses should have prevented any docs from coming back\", tuples.size(), 0);\n\n\n    expression = StreamExpressionParser.parse(\"search(collection1, fq=\\\"a_s:(hello0 OR hello1)\\\", q=\\\"id:(*)\\\", \" +\n        \"zkHost=\" + cluster.getZkServer().getZkAddress() + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assertEquals(\"Combining an f1 clause should show us 2 docs\", tuples.size(), 2);\n    \n        \n\n  }\n\n","sourceOld":"  @Test\n  public void testCloudSolrStreamWithZkHost() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", zkHost=\" + cluster.getZkServer().getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + cluster.getZkServer().getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\"\n        + cluster.getZkServer().getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","sourceNew":"  @Test\n  public void testCloudSolrStreamWithZkHost() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", zkHost=\" + cluster.getZkServer().getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + cluster.getZkServer().getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\"\n        + cluster.getZkServer().getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n\n    // Test a couple of multile field lists.\n    expression = StreamExpressionParser.parse(\"search(collection1, fq=\\\"a_s:hello0\\\", fq=\\\"a_s:hello1\\\", q=\\\"id:(*)\\\", \" +\n        \"zkHost=\" + cluster.getZkServer().getZkAddress()+ \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assertEquals(\"fq clauses should have prevented any docs from coming back\", tuples.size(), 0);\n\n\n    expression = StreamExpressionParser.parse(\"search(collection1, fq=\\\"a_s:(hello0 OR hello1)\\\", q=\\\"id:(*)\\\", \" +\n        \"zkHost=\" + cluster.getZkServer().getZkAddress() + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assertEquals(\"Combining an f1 clause should show us 2 docs\", tuples.size(), 2);\n    \n        \n\n  }\n\n","sourceOld":"  @Test\n  public void testCloudSolrStreamWithZkHost() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", zkHost=\" + cluster.getZkServer().getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + cluster.getZkServer().getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\"\n        + cluster.getZkServer().getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","sourceNew":"  @Test\n  public void testCloudSolrStreamWithZkHost() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", zkHost=\" + cluster.getZkServer().getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + cluster.getZkServer().getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\"\n        + cluster.getZkServer().getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n\n    // Test a couple of multile field lists.\n    expression = StreamExpressionParser.parse(\"search(collection1, fq=\\\"a_s:hello0\\\", fq=\\\"a_s:hello1\\\", q=\\\"id:(*)\\\", \" +\n        \"zkHost=\" + cluster.getZkServer().getZkAddress()+ \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assertEquals(\"fq clauses should have prevented any docs from coming back\", tuples.size(), 0);\n\n\n    expression = StreamExpressionParser.parse(\"search(collection1, fq=\\\"a_s:(hello0 OR hello1)\\\", q=\\\"id:(*)\\\", \" +\n        \"zkHost=\" + cluster.getZkServer().getZkAddress() + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assertEquals(\"Combining an f1 clause should show us 2 docs\", tuples.size(), 2);\n    \n        \n\n  }\n\n","sourceOld":"  @Test\n  public void testCloudSolrStreamWithZkHost() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", zkHost=\" + cluster.getZkServer().getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + cluster.getZkServer().getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\"\n        + cluster.getZkServer().getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","sourceNew":"  @Test\n  public void testCloudSolrStreamWithZkHost() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", zkHost=\" + cluster.getZkServer().getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + cluster.getZkServer().getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\"\n        + cluster.getZkServer().getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n\n    // Test a couple of multile field lists.\n    expression = StreamExpressionParser.parse(\"search(collection1, fq=\\\"a_s:hello0\\\", fq=\\\"a_s:hello1\\\", q=\\\"id:(*)\\\", \" +\n        \"zkHost=\" + cluster.getZkServer().getZkAddress()+ \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assertEquals(\"fq clauses should have prevented any docs from coming back\", tuples.size(), 0);\n\n\n    expression = StreamExpressionParser.parse(\"search(collection1, fq=\\\"a_s:(hello0 OR hello1)\\\", q=\\\"id:(*)\\\", \" +\n        \"zkHost=\" + cluster.getZkServer().getZkAddress() + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assertEquals(\"Combining an f1 clause should show us 2 docs\", tuples.size(), 2);\n    \n        \n\n  }\n\n","sourceOld":"  @Test\n  public void testCloudSolrStreamWithZkHost() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", zkHost=\" + cluster.getZkServer().getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + cluster.getZkServer().getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\"\n        + cluster.getZkServer().getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n\n    // Test a couple of multile field lists.\n    expression = StreamExpressionParser.parse(\"search(collection1, fq=\\\"a_s:hello0\\\", fq=\\\"a_s:hello1\\\", q=\\\"id:(*)\\\", \" +\n        \"zkHost=\" + cluster.getZkServer().getZkAddress()+ \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assertEquals(\"fq clauses should have prevented any docs from coming back\", tuples.size(), 0);\n\n\n    expression = StreamExpressionParser.parse(\"search(collection1, fq=\\\"a_s:(hello0 OR hello1)\\\", q=\\\"id:(*)\\\", \" +\n        \"zkHost=\" + cluster.getZkServer().getZkAddress() + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assertEquals(\"Combining an f1 clause should show us 2 docs\", tuples.size(), 2);\n    \n        \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","sourceNew":"  @Test\n  public void testCloudSolrStreamWithZkHost() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", zkHost=\" + cluster.getZkServer().getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + cluster.getZkServer().getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\"\n        + cluster.getZkServer().getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n\n    // Test a couple of multile field lists.\n    expression = StreamExpressionParser.parse(\"search(collection1, fq=\\\"a_s:hello0\\\", fq=\\\"a_s:hello1\\\", q=\\\"id:(*)\\\", \" +\n        \"zkHost=\" + cluster.getZkServer().getZkAddress()+ \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assertEquals(\"fq clauses should have prevented any docs from coming back\", tuples.size(), 0);\n\n\n    expression = StreamExpressionParser.parse(\"search(collection1, fq=\\\"a_s:(hello0 OR hello1)\\\", q=\\\"id:(*)\\\", \" +\n        \"zkHost=\" + cluster.getZkServer().getZkAddress() + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assertEquals(\"Combining an f1 clause should show us 2 docs\", tuples.size(), 2);\n    \n        \n\n  }\n\n","sourceOld":"  @Test\n  public void testCloudSolrStreamWithZkHost() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", zkHost=\" + cluster.getZkServer().getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + cluster.getZkServer().getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\"\n        + cluster.getZkServer().getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n\n    // Test a couple of multile field lists.\n    expression = StreamExpressionParser.parse(\"search(collection1, fq=\\\"a_s:hello0\\\", fq=\\\"a_s:hello1\\\", q=\\\"id:(*)\\\", \" +\n        \"zkHost=\" + cluster.getZkServer().getZkAddress()+ \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assertEquals(\"fq clauses should have prevented any docs from coming back\", tuples.size(), 0);\n\n\n    expression = StreamExpressionParser.parse(\"search(collection1, fq=\\\"a_s:(hello0 OR hello1)\\\", q=\\\"id:(*)\\\", \" +\n        \"zkHost=\" + cluster.getZkServer().getZkAddress() + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assertEquals(\"Combining an f1 clause should show us 2 docs\", tuples.size(), 2);\n    \n        \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","sourceNew":"  @Test\n  public void testCloudSolrStreamWithZkHost() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    List<Tuple> tuples;\n\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", zkHost=\" + cluster.getZkServer().getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"a_i\", 0);\n\n      // Basic w/aliases\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + cluster.getZkServer().getZkAddress() + \")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"alias.a_i\", 0);\n      assertString(tuples.get(0), \"name\", \"hello0\");\n\n      // Basic filtered test\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\"\n          + cluster.getZkServer().getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n      assertOrder(tuples, 0, 3, 4);\n      assertLong(tuples.get(1), \"a_i\", 3);\n\n\n      // Test a couple of multile field lists.\n      expression = StreamExpressionParser.parse(\"search(collection1, fq=\\\"a_s:hello0\\\", fq=\\\"a_s:hello1\\\", q=\\\"id:(*)\\\", \" +\n          \"zkHost=\" + cluster.getZkServer().getZkAddress() + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(\"fq clauses should have prevented any docs from coming back\", tuples.size(), 0);\n\n\n      expression = StreamExpressionParser.parse(\"search(collection1, fq=\\\"a_s:(hello0 OR hello1)\\\", q=\\\"id:(*)\\\", \" +\n          \"zkHost=\" + cluster.getZkServer().getZkAddress() + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(\"Combining an f1 clause should show us 2 docs\", tuples.size(), 2);\n\n    } finally {\n      solrClientCache.close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCloudSolrStreamWithZkHost() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", zkHost=\" + cluster.getZkServer().getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + cluster.getZkServer().getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\"\n        + cluster.getZkServer().getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n\n    // Test a couple of multile field lists.\n    expression = StreamExpressionParser.parse(\"search(collection1, fq=\\\"a_s:hello0\\\", fq=\\\"a_s:hello1\\\", q=\\\"id:(*)\\\", \" +\n        \"zkHost=\" + cluster.getZkServer().getZkAddress()+ \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assertEquals(\"fq clauses should have prevented any docs from coming back\", tuples.size(), 0);\n\n\n    expression = StreamExpressionParser.parse(\"search(collection1, fq=\\\"a_s:(hello0 OR hello1)\\\", q=\\\"id:(*)\\\", \" +\n        \"zkHost=\" + cluster.getZkServer().getZkAddress() + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assertEquals(\"Combining an f1 clause should show us 2 docs\", tuples.size(), 2);\n    \n        \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStreamWithZkHost().mjava","sourceNew":"  @Test\n  public void testCloudSolrStreamWithZkHost() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    List<Tuple> tuples;\n\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", zkHost=\" + cluster.getZkServer().getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"a_i\", 0);\n\n      // Basic w/aliases\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + cluster.getZkServer().getZkAddress() + \")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"alias.a_i\", 0);\n      assertString(tuples.get(0), \"name\", \"hello0\");\n\n      // Basic filtered test\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\"\n          + cluster.getZkServer().getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n      assertOrder(tuples, 0, 3, 4);\n      assertLong(tuples.get(1), \"a_i\", 3);\n\n\n      // Test a couple of multile field lists.\n      expression = StreamExpressionParser.parse(\"search(collection1, fq=\\\"a_s:hello0\\\", fq=\\\"a_s:hello1\\\", q=\\\"id:(*)\\\", \" +\n          \"zkHost=\" + cluster.getZkServer().getZkAddress() + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(\"fq clauses should have prevented any docs from coming back\", tuples.size(), 0);\n\n\n      expression = StreamExpressionParser.parse(\"search(collection1, fq=\\\"a_s:(hello0 OR hello1)\\\", q=\\\"id:(*)\\\", \" +\n          \"zkHost=\" + cluster.getZkServer().getZkAddress() + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(\"Combining an f1 clause should show us 2 docs\", tuples.size(), 2);\n\n    } finally {\n      solrClientCache.close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCloudSolrStreamWithZkHost() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory();\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", zkHost=\" + cluster.getZkServer().getZkAddress() + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\", zkHost=\" + cluster.getZkServer().getZkAddress() + \")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", zkHost=\"\n        + cluster.getZkServer().getZkAddress() + \", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n\n    // Test a couple of multile field lists.\n    expression = StreamExpressionParser.parse(\"search(collection1, fq=\\\"a_s:hello0\\\", fq=\\\"a_s:hello1\\\", q=\\\"id:(*)\\\", \" +\n        \"zkHost=\" + cluster.getZkServer().getZkAddress()+ \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assertEquals(\"fq clauses should have prevented any docs from coming back\", tuples.size(), 0);\n\n\n    expression = StreamExpressionParser.parse(\"search(collection1, fq=\\\"a_s:(hello0 OR hello1)\\\", q=\\\"id:(*)\\\", \" +\n        \"zkHost=\" + cluster.getZkServer().getZkAddress() + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assertEquals(\"Combining an f1 clause should show us 2 docs\", tuples.size(), 2);\n    \n        \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8c969f15cd04d31e520319c619a445ae21f02d72"],"10b9c6c42133576daaccbd79bd04c88511b9caca":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"73450c0955930295d34703e7ddbfc6973b7a121a":["10b9c6c42133576daaccbd79bd04c88511b9caca","b940572a59da1b42b6c20ab5278155b12816807a"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8c969f15cd04d31e520319c619a445ae21f02d72"],"b940572a59da1b42b6c20ab5278155b12816807a":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"79728e71d79579147b18f43e27a36e34be4986e2":["73450c0955930295d34703e7ddbfc6973b7a121a","54d17c38a2ec6cf529776157e201d539c5c0ff2f"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["79728e71d79579147b18f43e27a36e34be4986e2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["79728e71d79579147b18f43e27a36e34be4986e2","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"54d17c38a2ec6cf529776157e201d539c5c0ff2f":["73450c0955930295d34703e7ddbfc6973b7a121a"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["10b9c6c42133576daaccbd79bd04c88511b9caca","b940572a59da1b42b6c20ab5278155b12816807a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["10b9c6c42133576daaccbd79bd04c88511b9caca","79728e71d79579147b18f43e27a36e34be4986e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8c969f15cd04d31e520319c619a445ae21f02d72"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"8c969f15cd04d31e520319c619a445ae21f02d72":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"10b9c6c42133576daaccbd79bd04c88511b9caca":["73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"73450c0955930295d34703e7ddbfc6973b7a121a":["79728e71d79579147b18f43e27a36e34be4986e2","54d17c38a2ec6cf529776157e201d539c5c0ff2f"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"79728e71d79579147b18f43e27a36e34be4986e2":["826d15444ddf61716dc768c229cd54b2c2ccce1c","d470c8182e92b264680e34081b75e70a9f2b3c89","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8c969f15cd04d31e520319c619a445ae21f02d72"],"54d17c38a2ec6cf529776157e201d539c5c0ff2f":["79728e71d79579147b18f43e27a36e34be4986e2"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["e66a459d38c1c4a2f97128433dab546f683a9fed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"8c969f15cd04d31e520319c619a445ae21f02d72":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c405288c4553ffb50ab8ca5adbdde9881bcec4e4","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}