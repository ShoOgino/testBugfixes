{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#indexExists(Directory).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#indexExists(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#indexExists(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * If the directory does not exist or if there is no index in it.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean indexExists(Directory directory) throws IOException {\n    return SegmentInfos.getCurrentSegmentGeneration(directory) != -1;\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * If the directory does not exist or if there is no index in it.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean indexExists(Directory directory) throws IOException {\n    return SegmentInfos.getCurrentSegmentGeneration(directory) != -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"569a9403799d39d2fcc83f4e6d8d0693b69a3bf4","date":1292256541,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#indexExists(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#indexExists(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean indexExists(Directory directory) throws IOException {\n    try {\n      new SegmentInfos().read(directory);\n      return true;\n    } catch (IOException ioe) {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * If the directory does not exist or if there is no index in it.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean indexExists(Directory directory) throws IOException {\n    return SegmentInfos.getCurrentSegmentGeneration(directory) != -1;\n  }\n\n","bugFix":["284c1d3c8b19931bf6f312fae7470487f5d9e580","5e316f9ea0ab451f736a2a2b65103c3910bfad8e"],"bugIntro":["b41d447200403aa7ef7498f40bfa84da3422924d","b41d447200403aa7ef7498f40bfa84da3422924d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#indexExists(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#indexExists(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean indexExists(Directory directory) throws IOException {\n    try {\n      new SegmentInfos().read(directory);\n      return true;\n    } catch (IOException ioe) {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * If the directory does not exist or if there is no index in it.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean indexExists(Directory directory) throws IOException {\n    return SegmentInfos.getCurrentSegmentGeneration(directory) != -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#indexExists(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#indexExists(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean indexExists(Directory directory) throws IOException {\n    try {\n      new SegmentInfos().read(directory);\n      return true;\n    } catch (IOException ioe) {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * If the directory does not exist or if there is no index in it.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean indexExists(Directory directory) throws IOException {\n    return SegmentInfos.getCurrentSegmentGeneration(directory) != -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"893d07555f01912f57b453a320e4d46363a31b50","date":1327312526,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#indexExists(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#indexExists(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean indexExists(Directory directory) throws IOException {\n    try {\n      new SegmentInfos().read(directory);\n      return true;\n    } catch (IOException ioe) {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean indexExists(Directory directory) throws IOException {\n    try {\n      new SegmentInfos().read(directory);\n      return true;\n    } catch (IOException ioe) {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#indexExists(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#indexExists(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean indexExists(Directory directory) throws IOException {\n    try {\n      new SegmentInfos().read(directory);\n      return true;\n    } catch (IOException ioe) {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> if an index exists at the specified directory.\n   * @param  directory the directory to check for an index\n   * @return <code>true</code> if an index exists; <code>false</code> otherwise\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean indexExists(Directory directory) throws IOException {\n    try {\n      new SegmentInfos().read(directory);\n      return true;\n    } catch (IOException ioe) {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"569a9403799d39d2fcc83f4e6d8d0693b69a3bf4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"893d07555f01912f57b453a320e4d46363a31b50":["569a9403799d39d2fcc83f4e6d8d0693b69a3bf4"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["9454a6510e2db155fb01faa5c049b06ece95fab9","569a9403799d39d2fcc83f4e6d8d0693b69a3bf4"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","569a9403799d39d2fcc83f4e6d8d0693b69a3bf4"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["569a9403799d39d2fcc83f4e6d8d0693b69a3bf4","893d07555f01912f57b453a320e4d46363a31b50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"569a9403799d39d2fcc83f4e6d8d0693b69a3bf4":["893d07555f01912f57b453a320e4d46363a31b50","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5cab9a86bd67202d20b6adc463008c8e982b070a"],"893d07555f01912f57b453a320e4d46363a31b50":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["569a9403799d39d2fcc83f4e6d8d0693b69a3bf4","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}