{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testMaxNumSegments2().mjava","commits":[{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testMaxNumSegments2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOptimize#testOptimizeMaxNumSegments2().mjava","sourceNew":"  public void testMaxNumSegments2() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", StringField.TYPE_UNSTORED));\n\n    LogDocMergePolicy ldmp = new LogDocMergePolicy();\n    ldmp.setMinMergeDocs(1);\n    ldmp.setMergeFactor(4);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n      TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n    for(int iter=0;iter<10;iter++) {\n      for(int i=0;i<19;i++)\n        writer.addDocument(doc);\n\n      writer.commit();\n      writer.waitForMerges();\n      writer.commit();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n\n      final int segCount = sis.size();\n\n      writer.forceMerge(7);\n      writer.commit();\n      writer.waitForMerges();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 7)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(7, optSegCount);\n    }\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOptimizeMaxNumSegments2() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", StringField.TYPE_UNSTORED));\n\n    LogDocMergePolicy ldmp = new LogDocMergePolicy();\n    ldmp.setMinMergeDocs(1);\n    ldmp.setMergeFactor(4);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n      TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n    for(int iter=0;iter<10;iter++) {\n      for(int i=0;i<19;i++)\n        writer.addDocument(doc);\n\n      writer.commit();\n      writer.waitForMerges();\n      writer.commit();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n\n      final int segCount = sis.size();\n\n      writer.optimize(7);\n      writer.commit();\n      writer.waitForMerges();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 7)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(7, optSegCount);\n    }\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testMaxNumSegments2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testMaxNumSegments2().mjava","sourceNew":"  public void testMaxNumSegments2() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", StringField.TYPE_UNSTORED));\n\n    LogDocMergePolicy ldmp = new LogDocMergePolicy();\n    ldmp.setMinMergeDocs(1);\n    ldmp.setMergeFactor(4);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n      TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n    for(int iter=0;iter<10;iter++) {\n      for(int i=0;i<19;i++)\n        writer.addDocument(doc);\n\n      writer.commit();\n      writer.waitForMerges();\n      writer.commit();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n\n      final int segCount = sis.size();\n\n      writer.forceMerge(7);\n      writer.commit();\n      writer.waitForMerges();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 7)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(7, optSegCount);\n    }\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxNumSegments2() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", StringField.TYPE_UNSTORED));\n\n    LogDocMergePolicy ldmp = new LogDocMergePolicy();\n    ldmp.setMinMergeDocs(1);\n    ldmp.setMergeFactor(4);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n      TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n    for(int iter=0;iter<10;iter++) {\n      for(int i=0;i<19;i++)\n        writer.addDocument(doc);\n\n      writer.commit();\n      writer.waitForMerges();\n      writer.commit();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n\n      final int segCount = sis.size();\n\n      writer.forceMerge(7);\n      writer.commit();\n      writer.waitForMerges();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 7)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(7, optSegCount);\n    }\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}