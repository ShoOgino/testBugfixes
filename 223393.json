{"path":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","sourceNew":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n  }\n\n","sourceOld":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d88bfdf98b3ce721bb461161e9a8757bf4bc2b3","date":1332604338,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","sourceNew":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    Directory farsiIndex = newDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    reader.close();\n    farsiIndex.close();\n  }\n\n","sourceOld":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","sourceNew":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    Directory farsiIndex = newDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(farsiIndex);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    reader.close();\n    farsiIndex.close();\n  }\n\n","sourceOld":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    Directory farsiIndex = newDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    reader.close();\n    farsiIndex.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","sourceNew":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    Directory farsiIndex = newDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES));\n    doc.add(new StringField(\"body\", \"body\", Field.Store.YES));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(farsiIndex);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    reader.close();\n    farsiIndex.close();\n  }\n\n","sourceOld":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    Directory farsiIndex = newDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(farsiIndex);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    reader.close();\n    farsiIndex.close();\n  }\n\n","bugFix":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","sourceNew":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    Directory farsiIndex = newDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES));\n    doc.add(new StringField(\"body\", \"body\", Field.Store.YES));\n    writer.addDocument(doc);\n    writer.shutdown();\n\n    IndexReader reader = DirectoryReader.open(farsiIndex);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    reader.close();\n    farsiIndex.close();\n  }\n\n","sourceOld":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    Directory farsiIndex = newDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES));\n    doc.add(new StringField(\"body\", \"body\", Field.Store.YES));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(farsiIndex);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    reader.close();\n    farsiIndex.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","sourceNew":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    Directory farsiIndex = newDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(analyzer));\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES));\n    doc.add(new StringField(\"body\", \"body\", Field.Store.YES));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(farsiIndex);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    reader.close();\n    farsiIndex.close();\n  }\n\n","sourceOld":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    Directory farsiIndex = newDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES));\n    doc.add(new StringField(\"body\", \"body\", Field.Store.YES));\n    writer.addDocument(doc);\n    writer.shutdown();\n\n    IndexReader reader = DirectoryReader.open(farsiIndex);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    reader.close();\n    farsiIndex.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","sourceNew":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    Directory farsiIndex = newDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(analyzer));\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES));\n    doc.add(new StringField(\"body\", \"body\", Field.Store.YES));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(farsiIndex);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    reader.close();\n    farsiIndex.close();\n  }\n\n","sourceOld":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    Directory farsiIndex = newDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(analyzer));\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES));\n    doc.add(new StringField(\"body\", \"body\", Field.Store.YES));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(farsiIndex);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    reader.close();\n    farsiIndex.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["8d88bfdf98b3ce721bb461161e9a8757bf4bc2b3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"8d88bfdf98b3ce721bb461161e9a8757bf4bc2b3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8d88bfdf98b3ce721bb461161e9a8757bf4bc2b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"8d88bfdf98b3ce721bb461161e9a8757bf4bc2b3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}