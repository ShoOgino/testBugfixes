{"path":"solr/core/src/java/org/apache/solr/analysis/FSTSynonymFilterFactory#inform(ResourceLoader).mjava","commits":[{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/FSTSynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    final boolean ignoreCase = getBoolean(\"ignoreCase\", false); \n    this.ignoreCase = ignoreCase;\n\n    String tf = args.get(\"tokenizerFactory\");\n\n    final TokenizerFactory factory = tf == null ? null : loadTokenizerFactory(loader, tf, args);\n    \n    Analyzer analyzer = new ReusableAnalyzerBase() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_31, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_31, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    String format = args.get(\"format\");\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new RuntimeException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"728a2d83ed18643ec79ecf8f778ba8641d283a9d","date":1310442397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/FSTSynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/FSTSynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    final boolean ignoreCase = getBoolean(\"ignoreCase\", false); \n    this.ignoreCase = ignoreCase;\n\n    String tf = args.get(\"tokenizerFactory\");\n\n    final TokenizerFactory factory = tf == null ? null : loadTokenizerFactory(loader, tf, args);\n    \n    Analyzer analyzer = new ReusableAnalyzerBase() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_31, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_31, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    String format = args.get(\"format\");\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new RuntimeException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    \n    if (map.fst == null) {\n      log.warn(\"Synonyms loaded with \" + args + \" has empty rule set!\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    final boolean ignoreCase = getBoolean(\"ignoreCase\", false); \n    this.ignoreCase = ignoreCase;\n\n    String tf = args.get(\"tokenizerFactory\");\n\n    final TokenizerFactory factory = tf == null ? null : loadTokenizerFactory(loader, tf, args);\n    \n    Analyzer analyzer = new ReusableAnalyzerBase() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_31, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_31, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    String format = args.get(\"format\");\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new RuntimeException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f49143da0a5d278a72f741432047fcfa6da996e","date":1316927425,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/FSTSynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/FSTSynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    final boolean ignoreCase = getBoolean(\"ignoreCase\", false); \n    this.ignoreCase = ignoreCase;\n\n    String tf = args.get(\"tokenizerFactory\");\n\n    final TokenizerFactory factory = tf == null ? null : loadTokenizerFactory(loader, tf, args);\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_31, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_31, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    String format = args.get(\"format\");\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new RuntimeException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    \n    if (map.fst == null) {\n      log.warn(\"Synonyms loaded with \" + args + \" has empty rule set!\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    final boolean ignoreCase = getBoolean(\"ignoreCase\", false); \n    this.ignoreCase = ignoreCase;\n\n    String tf = args.get(\"tokenizerFactory\");\n\n    final TokenizerFactory factory = tf == null ? null : loadTokenizerFactory(loader, tf, args);\n    \n    Analyzer analyzer = new ReusableAnalyzerBase() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_31, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_31, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    String format = args.get(\"format\");\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new RuntimeException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    \n    if (map.fst == null) {\n      log.warn(\"Synonyms loaded with \" + args + \" has empty rule set!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39d25aba1848c644c6d22b943d3d66f661445ac7","date":1335238294,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/FSTSynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/FSTSynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    final boolean ignoreCase = getBoolean(\"ignoreCase\", false); \n    this.ignoreCase = ignoreCase;\n\n    String tf = args.get(\"tokenizerFactory\");\n\n    final TokenizerFactory factory = tf == null ? null : loadTokenizerFactory(loader, tf, args);\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_31, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_31, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    String format = args.get(\"format\");\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new InitializationException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (Exception e) {\n      throw new InitializationException(\"Exception thrown while loading synonyms\", e);\n    }\n    \n    if (map.fst == null) {\n      log.warn(\"Synonyms loaded with \" + args + \" has empty rule set!\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    final boolean ignoreCase = getBoolean(\"ignoreCase\", false); \n    this.ignoreCase = ignoreCase;\n\n    String tf = args.get(\"tokenizerFactory\");\n\n    final TokenizerFactory factory = tf == null ? null : loadTokenizerFactory(loader, tf, args);\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_31, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_31, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    String format = args.get(\"format\");\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new RuntimeException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    \n    if (map.fst == null) {\n      log.warn(\"Synonyms loaded with \" + args + \" has empty rule set!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6d3ad4230a9094e97925f9395cf6db4729284d9","date":1335503918,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/FSTSynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/FSTSynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    final boolean ignoreCase = getBoolean(\"ignoreCase\", false); \n    this.ignoreCase = ignoreCase;\n\n    String tf = args.get(\"tokenizerFactory\");\n\n    final TokenizerFactory factory = tf == null ? null : loadTokenizerFactory(loader, tf);\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_31, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_31, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    String format = args.get(\"format\");\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new InitializationException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (Exception e) {\n      throw new InitializationException(\"Exception thrown while loading synonyms\", e);\n    }\n    \n    if (map.fst == null) {\n      log.warn(\"Synonyms loaded with \" + args + \" has empty rule set!\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    final boolean ignoreCase = getBoolean(\"ignoreCase\", false); \n    this.ignoreCase = ignoreCase;\n\n    String tf = args.get(\"tokenizerFactory\");\n\n    final TokenizerFactory factory = tf == null ? null : loadTokenizerFactory(loader, tf, args);\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_31, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_31, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    String format = args.get(\"format\");\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new InitializationException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (Exception e) {\n      throw new InitializationException(\"Exception thrown while loading synonyms\", e);\n    }\n    \n    if (map.fst == null) {\n      log.warn(\"Synonyms loaded with \" + args + \" has empty rule set!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/FSTSynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    final boolean ignoreCase = getBoolean(\"ignoreCase\", false); \n    this.ignoreCase = ignoreCase;\n\n    String tf = args.get(\"tokenizerFactory\");\n\n    final TokenizerFactory factory = tf == null ? null : loadTokenizerFactory(loader, tf);\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_31, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_31, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    String format = args.get(\"format\");\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new InitializationException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (Exception e) {\n      throw new InitializationException(\"Exception thrown while loading synonyms\", e);\n    }\n    \n    if (map.fst == null) {\n      log.warn(\"Synonyms loaded with \" + args + \" has empty rule set!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["d6d3ad4230a9094e97925f9395cf6db4729284d9"],"d6d3ad4230a9094e97925f9395cf6db4729284d9":["39d25aba1848c644c6d22b943d3d66f661445ac7"],"728a2d83ed18643ec79ecf8f778ba8641d283a9d":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"39d25aba1848c644c6d22b943d3d66f661445ac7":["2f49143da0a5d278a72f741432047fcfa6da996e"],"2f49143da0a5d278a72f741432047fcfa6da996e":["728a2d83ed18643ec79ecf8f778ba8641d283a9d"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6d3ad4230a9094e97925f9395cf6db4729284d9":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"728a2d83ed18643ec79ecf8f778ba8641d283a9d":["2f49143da0a5d278a72f741432047fcfa6da996e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"39d25aba1848c644c6d22b943d3d66f661445ac7":["d6d3ad4230a9094e97925f9395cf6db4729284d9"],"2f49143da0a5d278a72f741432047fcfa6da996e":["39d25aba1848c644c6d22b943d3d66f661445ac7"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["728a2d83ed18643ec79ecf8f778ba8641d283a9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}