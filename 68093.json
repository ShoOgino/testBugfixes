{"path":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineTest#testTokenizeText().mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineTest#testTokenizeText().mjava","pathOld":"solr/contrib/solr-morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineTest#testTokenizeText().mjava","sourceNew":"  @Test\n  public void testTokenizeText() throws Exception {\n    morphline = createMorphline(\"test-morphlines/tokenizeText\");    \n    Record record = new Record();\n    record.put(Fields.MESSAGE, \"Hello World!\");\n    record.put(Fields.MESSAGE, \"\\nFoo@Bar.com #%()123\");\n    Record expected = record.copy();\n    expected.getFields().putAll(\"tokens\", Arrays.asList(\"hello\", \"world\", \"foo\", \"bar.com\", \"123\"));\n    startSession();\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyCommitTransaction(morphline);\n    assertEquals(expected, collector.getFirstRecord());\n  }\n\n","sourceOld":"  @Test\n  public void testTokenizeText() throws Exception {\n    morphline = createMorphline(\"test-morphlines/tokenizeText\");    \n    Record record = new Record();\n    record.put(Fields.MESSAGE, \"Hello World!\");\n    record.put(Fields.MESSAGE, \"\\nFoo@Bar.com #%()123\");\n    Record expected = record.copy();\n    expected.getFields().putAll(\"tokens\", Arrays.asList(\"hello\", \"world\", \"foo\", \"bar.com\", \"123\"));\n    startSession();\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyCommitTransaction(morphline);\n    assertEquals(expected, collector.getFirstRecord());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineTest#testTokenizeText().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTokenizeText() throws Exception {\n    morphline = createMorphline(\"test-morphlines/tokenizeText\");    \n    Record record = new Record();\n    record.put(Fields.MESSAGE, \"Hello World!\");\n    record.put(Fields.MESSAGE, \"\\nFoo@Bar.com #%()123\");\n    Record expected = record.copy();\n    expected.getFields().putAll(\"tokens\", Arrays.asList(\"hello\", \"world\", \"foo\", \"bar.com\", \"123\"));\n    startSession();\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyCommitTransaction(morphline);\n    assertEquals(expected, collector.getFirstRecord());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96fdd7189254bc9698a673fdf4e2b0e97e993ede","date":1387480427,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineTest#testTokenizeText().mjava","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineTest#testTokenizeText().mjava","sourceNew":"  @Test\n  public void testTokenizeText() throws Exception {\n    morphline = createMorphline(\"test-morphlines/tokenizeText\");\n    for (int i = 0; i < 3; i++) {\n      Record record = new Record();\n      record.put(Fields.MESSAGE, \"Hello World!\");\n      record.put(Fields.MESSAGE, \"\\nFoo@Bar.com #%()123\");\n      Record expected = record.copy();\n      expected.getFields().putAll(\"tokens\", Arrays.asList(\"hello\", \"world\", \"foo\", \"bar.com\", \"123\"));\n      collector.reset();\n      startSession();\n      Notifications.notifyBeginTransaction(morphline);\n      assertTrue(morphline.process(record));\n      assertEquals(1, collector.getNumStartEvents());\n      Notifications.notifyCommitTransaction(morphline);\n      assertEquals(expected, collector.getFirstRecord());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTokenizeText() throws Exception {\n    morphline = createMorphline(\"test-morphlines/tokenizeText\");    \n    Record record = new Record();\n    record.put(Fields.MESSAGE, \"Hello World!\");\n    record.put(Fields.MESSAGE, \"\\nFoo@Bar.com #%()123\");\n    Record expected = record.copy();\n    expected.getFields().putAll(\"tokens\", Arrays.asList(\"hello\", \"world\", \"foo\", \"bar.com\", \"123\"));\n    startSession();\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyCommitTransaction(morphline);\n    assertEquals(expected, collector.getFirstRecord());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c170e9d4c93c47801b611c5f124a91c5d27e0d73","date":1392824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineTest#testTokenizeText().mjava","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineTest#testTokenizeText().mjava","sourceNew":"  @Test\n  public void testTokenizeText() throws Exception {\n    morphline = createMorphline(\"test-morphlines\" + File.separator + \"tokenizeText\");\n    for (int i = 0; i < 3; i++) {\n      Record record = new Record();\n      record.put(Fields.MESSAGE, \"Hello World!\");\n      record.put(Fields.MESSAGE, \"\\nFoo@Bar.com #%()123\");\n      Record expected = record.copy();\n      expected.getFields().putAll(\"tokens\", Arrays.asList(\"hello\", \"world\", \"foo\", \"bar.com\", \"123\"));\n      collector.reset();\n      startSession();\n      Notifications.notifyBeginTransaction(morphline);\n      assertTrue(morphline.process(record));\n      assertEquals(1, collector.getNumStartEvents());\n      Notifications.notifyCommitTransaction(morphline);\n      assertEquals(expected, collector.getFirstRecord());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTokenizeText() throws Exception {\n    morphline = createMorphline(\"test-morphlines/tokenizeText\");\n    for (int i = 0; i < 3; i++) {\n      Record record = new Record();\n      record.put(Fields.MESSAGE, \"Hello World!\");\n      record.put(Fields.MESSAGE, \"\\nFoo@Bar.com #%()123\");\n      Record expected = record.copy();\n      expected.getFields().putAll(\"tokens\", Arrays.asList(\"hello\", \"world\", \"foo\", \"bar.com\", \"123\"));\n      collector.reset();\n      startSession();\n      Notifications.notifyBeginTransaction(morphline);\n      assertTrue(morphline.process(record));\n      assertEquals(1, collector.getNumStartEvents());\n      Notifications.notifyCommitTransaction(morphline);\n      assertEquals(expected, collector.getFirstRecord());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineTest#testTokenizeText().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testTokenizeText() throws Exception {\n    morphline = createMorphline(\"test-morphlines\" + File.separator + \"tokenizeText\");\n    for (int i = 0; i < 3; i++) {\n      Record record = new Record();\n      record.put(Fields.MESSAGE, \"Hello World!\");\n      record.put(Fields.MESSAGE, \"\\nFoo@Bar.com #%()123\");\n      Record expected = record.copy();\n      expected.getFields().putAll(\"tokens\", Arrays.asList(\"hello\", \"world\", \"foo\", \"bar.com\", \"123\"));\n      collector.reset();\n      startSession();\n      Notifications.notifyBeginTransaction(morphline);\n      assertTrue(morphline.process(record));\n      assertEquals(1, collector.getNumStartEvents());\n      Notifications.notifyCommitTransaction(morphline);\n      assertEquals(expected, collector.getFirstRecord());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineTest#testTokenizeText().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testTokenizeText() throws Exception {\n    morphline = createMorphline(\"test-morphlines\" + File.separator + \"tokenizeText\");\n    for (int i = 0; i < 3; i++) {\n      Record record = new Record();\n      record.put(Fields.MESSAGE, \"Hello World!\");\n      record.put(Fields.MESSAGE, \"\\nFoo@Bar.com #%()123\");\n      Record expected = record.copy();\n      expected.getFields().putAll(\"tokens\", Arrays.asList(\"hello\", \"world\", \"foo\", \"bar.com\", \"123\"));\n      collector.reset();\n      startSession();\n      Notifications.notifyBeginTransaction(morphline);\n      assertTrue(morphline.process(record));\n      assertEquals(1, collector.getNumStartEvents());\n      Notifications.notifyCommitTransaction(morphline);\n      assertEquals(expected, collector.getFirstRecord());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c170e9d4c93c47801b611c5f124a91c5d27e0d73":["96fdd7189254bc9698a673fdf4e2b0e97e993ede"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["c170e9d4c93c47801b611c5f124a91c5d27e0d73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"96fdd7189254bc9698a673fdf4e2b0e97e993ede":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["c170e9d4c93c47801b611c5f124a91c5d27e0d73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","96fdd7189254bc9698a673fdf4e2b0e97e993ede"],"c170e9d4c93c47801b611c5f124a91c5d27e0d73":["12109b652e9210b8d58fca47f6c4a725d058a58e","fe1c4aa9af769a38e878f608070f672efbeac27f"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"96fdd7189254bc9698a673fdf4e2b0e97e993ede":["c170e9d4c93c47801b611c5f124a91c5d27e0d73"],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}