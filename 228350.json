{"path":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#constructNormalizedVerticalPlane(Vector...).mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#constructNormalizedVerticalPlane(Vector...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Plane#constructNormalizedVerticalPlane(Vector...).mjava","sourceNew":"  /** Construct the most accurate normalized, vertical plane given a set of points.  If none of the points can determine\n  * the plane, return null.\n  */\n  public static Plane constructNormalizedVerticalPlane(final Vector... planePoints) {\n    // Pick the best one (with the greatest x-y distance)\n    double bestDistance = 0.0;\n    Vector bestPoint = null;\n    for (final Vector point : planePoints) {\n      final double pointDist = point.x * point.x + point.y * point.y;\n      if (pointDist > bestDistance) {\n        bestDistance = pointDist;\n        bestPoint = point;\n      }\n    }\n    return constructNormalizedVerticalPlane(bestPoint.x, bestPoint.y);\n  }\n\n","sourceOld":"  /** Construct the most accurate normalized, vertical plane given a set of points.  If none of the points can determine\n  * the plane, return null.\n  */\n  public static Plane constructNormalizedVerticalPlane(final Vector... planePoints) {\n    // Pick the best one (with the greatest x-y distance)\n    double bestDistance = 0.0;\n    Vector bestPoint = null;\n    for (final Vector point : planePoints) {\n      final double pointDist = point.x * point.x + point.y * point.y;\n      if (pointDist > bestDistance) {\n        bestDistance = pointDist;\n        bestPoint = point;\n      }\n    }\n    return constructNormalizedVerticalPlane(bestPoint.x, bestPoint.y);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d48c2726dec3381fb15aa3b90f7857635b6bdf74","date":1436825583,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#constructNormalizedVerticalPlane(Vector...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#constructNormalizedVerticalPlane(Vector...).mjava","sourceNew":"  /** Construct the most accurate normalized, vertical plane given a set of points.  If none of the points can determine\n   * the plane, return null.\n   * @param planePoints is a set of points to choose from.  The best one for constructing the most precise normal plane is picked.\n   * @return the normal plane\n   */\n  public static Plane constructNormalizedVerticalPlane(final Vector... planePoints) {\n    // Pick the best one (with the greatest x-y distance)\n    double bestDistance = 0.0;\n    Vector bestPoint = null;\n    for (final Vector point : planePoints) {\n      final double pointDist = point.x * point.x + point.y * point.y;\n      if (pointDist > bestDistance) {\n        bestDistance = pointDist;\n        bestPoint = point;\n      }\n    }\n    return constructNormalizedVerticalPlane(bestPoint.x, bestPoint.y);\n  }\n\n","sourceOld":"  /** Construct the most accurate normalized, vertical plane given a set of points.  If none of the points can determine\n  * the plane, return null.\n  */\n  public static Plane constructNormalizedVerticalPlane(final Vector... planePoints) {\n    // Pick the best one (with the greatest x-y distance)\n    double bestDistance = 0.0;\n    Vector bestPoint = null;\n    for (final Vector point : planePoints) {\n      final double pointDist = point.x * point.x + point.y * point.y;\n      if (pointDist > bestDistance) {\n        bestDistance = pointDist;\n        bestPoint = point;\n      }\n    }\n    return constructNormalizedVerticalPlane(bestPoint.x, bestPoint.y);\n  }\n\n","bugFix":["5f3c09e163d39ea7acb6f142f32aed0a6f523c5a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b7098768253180859cd8faeae6b1a185b06ed","date":1441223971,"type":6,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#constructNormalizedXPlane(Vector...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#constructNormalizedVerticalPlane(Vector...).mjava","sourceNew":"  /** Construct the most accurate normalized plane through an y-z point and including the X axis.\n   * If none of the points can determine the plane, return null.\n   * @param planePoints is a set of points to choose from.  The best one for constructing the most precise plane is picked.\n   * @return the plane\n   */\n  public static Plane constructNormalizedXPlane(final Vector... planePoints) {\n    // Pick the best one (with the greatest y-z distance)\n    double bestDistance = 0.0;\n    Vector bestPoint = null;\n    for (final Vector point : planePoints) {\n      final double pointDist = point.y * point.y + point.z * point.z;\n      if (pointDist > bestDistance) {\n        bestDistance = pointDist;\n        bestPoint = point;\n      }\n    }\n    return constructNormalizedXPlane(bestPoint.y, bestPoint.z, 0.0);\n  }\n\n","sourceOld":"  /** Construct the most accurate normalized, vertical plane given a set of points.  If none of the points can determine\n   * the plane, return null.\n   * @param planePoints is a set of points to choose from.  The best one for constructing the most precise normal plane is picked.\n   * @return the normal plane\n   */\n  public static Plane constructNormalizedVerticalPlane(final Vector... planePoints) {\n    // Pick the best one (with the greatest x-y distance)\n    double bestDistance = 0.0;\n    Vector bestPoint = null;\n    for (final Vector point : planePoints) {\n      final double pointDist = point.x * point.x + point.y * point.y;\n      if (pointDist > bestDistance) {\n        bestDistance = pointDist;\n        bestPoint = point;\n      }\n    }\n    return constructNormalizedVerticalPlane(bestPoint.x, bestPoint.y);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b7098768253180859cd8faeae6b1a185b06ed","date":1441223971,"type":6,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#constructNormalizedYPlane(Vector...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#constructNormalizedVerticalPlane(Vector...).mjava","sourceNew":"  /** Construct the most accurate normalized plane through an x-z point and including the Y axis.\n   * If none of the points can determine the plane, return null.\n   * @param planePoints is a set of points to choose from.  The best one for constructing the most precise plane is picked.\n   * @return the plane\n   */\n  public static Plane constructNormalizedYPlane(final Vector... planePoints) {\n    // Pick the best one (with the greatest x-z distance)\n    double bestDistance = 0.0;\n    Vector bestPoint = null;\n    for (final Vector point : planePoints) {\n      final double pointDist = point.x * point.x + point.z * point.z;\n      if (pointDist > bestDistance) {\n        bestDistance = pointDist;\n        bestPoint = point;\n      }\n    }\n    return constructNormalizedYPlane(bestPoint.x, bestPoint.z, 0.0);\n  }\n\n","sourceOld":"  /** Construct the most accurate normalized, vertical plane given a set of points.  If none of the points can determine\n   * the plane, return null.\n   * @param planePoints is a set of points to choose from.  The best one for constructing the most precise normal plane is picked.\n   * @return the normal plane\n   */\n  public static Plane constructNormalizedVerticalPlane(final Vector... planePoints) {\n    // Pick the best one (with the greatest x-y distance)\n    double bestDistance = 0.0;\n    Vector bestPoint = null;\n    for (final Vector point : planePoints) {\n      final double pointDist = point.x * point.x + point.y * point.y;\n      if (pointDist > bestDistance) {\n        bestDistance = pointDist;\n        bestPoint = point;\n      }\n    }\n    return constructNormalizedVerticalPlane(bestPoint.x, bestPoint.y);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b7098768253180859cd8faeae6b1a185b06ed","date":1441223971,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#constructNormalizedZPlane(Vector...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#constructNormalizedVerticalPlane(Vector...).mjava","sourceNew":"  /** Construct the most accurate normalized plane through an x-y point and including the Z axis.\n   * If none of the points can determine the plane, return null.\n   * @param planePoints is a set of points to choose from.  The best one for constructing the most precise plane is picked.\n   * @return the plane\n   */\n  public static Plane constructNormalizedZPlane(final Vector... planePoints) {\n    // Pick the best one (with the greatest x-y distance)\n    double bestDistance = 0.0;\n    Vector bestPoint = null;\n    for (final Vector point : planePoints) {\n      final double pointDist = point.x * point.x + point.y * point.y;\n      if (pointDist > bestDistance) {\n        bestDistance = pointDist;\n        bestPoint = point;\n      }\n    }\n    return constructNormalizedZPlane(bestPoint.x, bestPoint.y);\n  }\n\n","sourceOld":"  /** Construct the most accurate normalized, vertical plane given a set of points.  If none of the points can determine\n   * the plane, return null.\n   * @param planePoints is a set of points to choose from.  The best one for constructing the most precise normal plane is picked.\n   * @return the normal plane\n   */\n  public static Plane constructNormalizedVerticalPlane(final Vector... planePoints) {\n    // Pick the best one (with the greatest x-y distance)\n    double bestDistance = 0.0;\n    Vector bestPoint = null;\n    for (final Vector point : planePoints) {\n      final double pointDist = point.x * point.x + point.y * point.y;\n      if (pointDist > bestDistance) {\n        bestDistance = pointDist;\n        bestPoint = point;\n      }\n    }\n    return constructNormalizedVerticalPlane(bestPoint.x, bestPoint.y);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f64b7098768253180859cd8faeae6b1a185b06ed":["d48c2726dec3381fb15aa3b90f7857635b6bdf74"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d48c2726dec3381fb15aa3b90f7857635b6bdf74":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f64b7098768253180859cd8faeae6b1a185b06ed"]},"commit2Childs":{"f64b7098768253180859cd8faeae6b1a185b06ed":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["d48c2726dec3381fb15aa3b90f7857635b6bdf74"],"d48c2726dec3381fb15aa3b90f7857635b6bdf74":["f64b7098768253180859cd8faeae6b1a185b06ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}