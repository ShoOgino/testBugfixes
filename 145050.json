{"path":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#getStatistics(String).mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#getStatistics(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Finds the set of statistics that must be computed for the expression.\n   * @param expression The string representation of an expression\n   * @return The set of statistics (sum, mean, median, etc.) found in the expression\n   */\n  public static Set<String> getStatistics(String expression) {\n    HashSet<String> set = new HashSet<String>();\n    int firstParen = expression.indexOf('(');\n    if (firstParen>0) {\n      String topOperation = expression.substring(0,firstParen).trim();\n      if (AnalyticsParams.ALL_STAT_SET.contains(topOperation)) {\n        set.add(expression);\n      } else if (!(topOperation.equals(AnalyticsParams.CONSTANT_NUMBER)||topOperation.equals(AnalyticsParams.CONSTANT_DATE)||topOperation.equals(AnalyticsParams.CONSTANT_STRING))) {\n        String operands = expression.substring(firstParen+1, expression.lastIndexOf(')')).trim();\n        String[] arguments = ExpressionFactory.getArguments(operands);\n        for (String argument : arguments) {\n          Set<String> more = getStatistics(argument);\n          if (more!=null) {\n            set.addAll(more);\n          }\n        }\n      }\n    }\n    if (set.size()==0) {\n      return null;\n    }\n    return set;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#getStatistics(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Finds the set of statistics that must be computed for the expression.\n   * @param expression The string representation of an expression\n   * @return The set of statistics (sum, mean, median, etc.) found in the expression\n   */\n  public static Set<String> getStatistics(String expression) {\n    HashSet<String> set = new HashSet<String>();\n    int firstParen = expression.indexOf('(');\n    if (firstParen>0) {\n      String topOperation = expression.substring(0,firstParen).trim();\n      if (AnalyticsParams.ALL_STAT_SET.contains(topOperation)) {\n        set.add(expression);\n      } else if (!(topOperation.equals(AnalyticsParams.CONSTANT_NUMBER)||topOperation.equals(AnalyticsParams.CONSTANT_DATE)||topOperation.equals(AnalyticsParams.CONSTANT_STRING))) {\n        String operands = expression.substring(firstParen+1, expression.lastIndexOf(')')).trim();\n        String[] arguments = ExpressionFactory.getArguments(operands);\n        for (String argument : arguments) {\n          Set<String> more = getStatistics(argument);\n          if (more!=null) {\n            set.addAll(more);\n          }\n        }\n      }\n    }\n    if (set.size()==0) {\n      return null;\n    }\n    return set;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#getStatistics(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#getStatistics(String).mjava","sourceNew":"  /**\n   * Finds the set of statistics that must be computed for the expression.\n   * @param expression The string representation of an expression\n   * @return The set of statistics (sum, mean, median, etc.) found in the expression\n   */\n  public static Set<String> getStatistics(String expression) {\n    HashSet<String> set = new HashSet<>();\n    int firstParen = expression.indexOf('(');\n    if (firstParen>0) {\n      String topOperation = expression.substring(0,firstParen).trim();\n      if (AnalyticsParams.ALL_STAT_SET.contains(topOperation)) {\n        set.add(expression);\n      } else if (!(topOperation.equals(AnalyticsParams.CONSTANT_NUMBER)||topOperation.equals(AnalyticsParams.CONSTANT_DATE)||topOperation.equals(AnalyticsParams.CONSTANT_STRING))) {\n        String operands = expression.substring(firstParen+1, expression.lastIndexOf(')')).trim();\n        String[] arguments = ExpressionFactory.getArguments(operands);\n        for (String argument : arguments) {\n          Set<String> more = getStatistics(argument);\n          if (more!=null) {\n            set.addAll(more);\n          }\n        }\n      }\n    }\n    if (set.size()==0) {\n      return null;\n    }\n    return set;\n  }\n\n","sourceOld":"  /**\n   * Finds the set of statistics that must be computed for the expression.\n   * @param expression The string representation of an expression\n   * @return The set of statistics (sum, mean, median, etc.) found in the expression\n   */\n  public static Set<String> getStatistics(String expression) {\n    HashSet<String> set = new HashSet<String>();\n    int firstParen = expression.indexOf('(');\n    if (firstParen>0) {\n      String topOperation = expression.substring(0,firstParen).trim();\n      if (AnalyticsParams.ALL_STAT_SET.contains(topOperation)) {\n        set.add(expression);\n      } else if (!(topOperation.equals(AnalyticsParams.CONSTANT_NUMBER)||topOperation.equals(AnalyticsParams.CONSTANT_DATE)||topOperation.equals(AnalyticsParams.CONSTANT_STRING))) {\n        String operands = expression.substring(firstParen+1, expression.lastIndexOf(')')).trim();\n        String[] arguments = ExpressionFactory.getArguments(operands);\n        for (String argument : arguments) {\n          Set<String> more = getStatistics(argument);\n          if (more!=null) {\n            set.addAll(more);\n          }\n        }\n      }\n    }\n    if (set.size()==0) {\n      return null;\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#getStatistics(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#getStatistics(String).mjava","sourceNew":"  /**\n   * Finds the set of statistics that must be computed for the expression.\n   * @param expression The string representation of an expression\n   * @return The set of statistics (sum, mean, median, etc.) found in the expression\n   */\n  public static Set<String> getStatistics(String expression) {\n    HashSet<String> set = new HashSet<>();\n    int firstParen = expression.indexOf('(');\n    if (firstParen>0) {\n      String topOperation = expression.substring(0,firstParen).trim();\n      if (AnalyticsParams.ALL_STAT_SET.contains(topOperation)) {\n        set.add(expression);\n      } else if (!(topOperation.equals(AnalyticsParams.CONSTANT_NUMBER)||topOperation.equals(AnalyticsParams.CONSTANT_DATE)||topOperation.equals(AnalyticsParams.CONSTANT_STRING))) {\n        String operands = expression.substring(firstParen+1, expression.lastIndexOf(')')).trim();\n        String[] arguments = ExpressionFactory.getArguments(operands);\n        for (String argument : arguments) {\n          Set<String> more = getStatistics(argument);\n          if (more!=null) {\n            set.addAll(more);\n          }\n        }\n      }\n    }\n    if (set.size()==0) {\n      return null;\n    }\n    return set;\n  }\n\n","sourceOld":"  /**\n   * Finds the set of statistics that must be computed for the expression.\n   * @param expression The string representation of an expression\n   * @return The set of statistics (sum, mean, median, etc.) found in the expression\n   */\n  public static Set<String> getStatistics(String expression) {\n    HashSet<String> set = new HashSet<>();\n    int firstParen = expression.indexOf('(');\n    if (firstParen>0) {\n      String topOperation = expression.substring(0,firstParen).trim();\n      if (AnalyticsParams.ALL_STAT_SET.contains(topOperation)) {\n        set.add(expression);\n      } else if (!(topOperation.equals(AnalyticsParams.CONSTANT_NUMBER)||topOperation.equals(AnalyticsParams.CONSTANT_DATE)||topOperation.equals(AnalyticsParams.CONSTANT_STRING))) {\n        String operands = expression.substring(firstParen+1, expression.lastIndexOf(')')).trim();\n        String[] arguments = ExpressionFactory.getArguments(operands);\n        for (String argument : arguments) {\n          Set<String> more = getStatistics(argument);\n          if (more!=null) {\n            set.addAll(more);\n          }\n        }\n      }\n    }\n    if (set.size()==0) {\n      return null;\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ff403346522eaa9de75403763e297e83a3ea585c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff403346522eaa9de75403763e297e83a3ea585c"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ff403346522eaa9de75403763e297e83a3ea585c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}