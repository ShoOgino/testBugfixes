{"path":"contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotLengthNorm().mjava","commits":[{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotLengthNorm().mjava","pathOld":"contrib/miscellaneous/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotLengthNorm().mjava","sourceNew":"  public void testSweetSpotLengthNorm() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n  \n    for (int i = 1; i < 1000; i++) {\n      assertEquals(\"base case: i=\"+i,\n                   d.lengthNorm(\"foo\",i), s.lengthNorm(\"foo\",i),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f);\n  \n    for (int i = 3; i <=10; i++) {\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f, s.lengthNorm(\"foo\",i),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   d.lengthNorm(\"foo\",i-9), s.lengthNorm(\"foo\",i),\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    ss.setLengthNormFactors(\"bar\",8,13, 0.5f, false);\n    ss.setLengthNormFactors(\"yak\",6,9, 0.5f, false);\n\n  \n    for (int i = 3; i <=10; i++) {\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f, s.lengthNorm(\"foo\",i),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   d.lengthNorm(\"foo\",i-9), s.lengthNorm(\"foo\",i),\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f, s.lengthNorm(\"bar\",i),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f, s.lengthNorm(\"yak\",i),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   d.lengthNorm(\"foo\",i-12), s.lengthNorm(\"bar\",i),\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   d.lengthNorm(\"foo\",i-8), s.lengthNorm(\"yak\",i),\n                   0.0f);\n    }\n\n\n    // steepness\n\n    ss.setLengthNormFactors(\"a\",5,8,0.5f, false);\n    ss.setLengthNormFactors(\"b\",5,8,0.1f, false);\n\n    for (int i = 9; i < 1000; i++) {\n      assertTrue(\"s: i=\"+i+\" : a=\"+ss.lengthNorm(\"a\",i)+\n                 \" < b=\"+ss.lengthNorm(\"b\",i),\n                 ss.lengthNorm(\"a\",i) < s.lengthNorm(\"b\",i));\n    }\n\n  }\n\n","sourceOld":"  public void testSweetSpotLengthNorm() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n  \n    for (int i = 1; i < 1000; i++) {\n      assertEquals(\"base case: i=\"+i,\n                   d.lengthNorm(\"foo\",i), s.lengthNorm(\"foo\",i),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f);\n  \n    for (int i = 3; i <=10; i++) {\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f, s.lengthNorm(\"foo\",i),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   d.lengthNorm(\"foo\",i-9), s.lengthNorm(\"foo\",i),\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    ss.setLengthNormFactors(\"bar\",8,13, 0.5f, false);\n    ss.setLengthNormFactors(\"yak\",6,9, 0.5f, false);\n\n  \n    for (int i = 3; i <=10; i++) {\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f, s.lengthNorm(\"foo\",i),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   d.lengthNorm(\"foo\",i-9), s.lengthNorm(\"foo\",i),\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f, s.lengthNorm(\"bar\",i),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f, s.lengthNorm(\"yak\",i),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   d.lengthNorm(\"foo\",i-12), s.lengthNorm(\"bar\",i),\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   d.lengthNorm(\"foo\",i-8), s.lengthNorm(\"yak\",i),\n                   0.0f);\n    }\n\n\n    // steepness\n\n    ss.setLengthNormFactors(\"a\",5,8,0.5f, false);\n    ss.setLengthNormFactors(\"b\",5,8,0.1f, false);\n\n    for (int i = 9; i < 1000; i++) {\n      assertTrue(\"s: i=\"+i+\" : a=\"+ss.lengthNorm(\"a\",i)+\n                 \" < b=\"+ss.lengthNorm(\"b\",i),\n                 ss.lengthNorm(\"a\",i) < s.lengthNorm(\"b\",i));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotLengthNorm().mjava","pathOld":"contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotLengthNorm().mjava","sourceNew":"  public void testSweetSpotLengthNorm() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n  \n    for (int i = 1; i < 1000; i++) {\n      assertEquals(\"base case: i=\"+i,\n                   d.lengthNorm(\"foo\",i), s.lengthNorm(\"foo\",i),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f);\n  \n    for (int i = 3; i <=10; i++) {\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f, s.lengthNorm(\"foo\",i),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   d.lengthNorm(\"foo\",i-9), s.lengthNorm(\"foo\",i),\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    ss.setLengthNormFactors(\"bar\",8,13, 0.5f, false);\n    ss.setLengthNormFactors(\"yak\",6,9, 0.5f, false);\n\n  \n    for (int i = 3; i <=10; i++) {\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f, s.lengthNorm(\"foo\",i),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   d.lengthNorm(\"foo\",i-9), s.lengthNorm(\"foo\",i),\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f, s.lengthNorm(\"bar\",i),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f, s.lengthNorm(\"yak\",i),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   d.lengthNorm(\"foo\",i-12), s.lengthNorm(\"bar\",i),\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   d.lengthNorm(\"foo\",i-8), s.lengthNorm(\"yak\",i),\n                   0.0f);\n    }\n\n\n    // steepness\n\n    ss.setLengthNormFactors(\"a\",5,8,0.5f, false);\n    ss.setLengthNormFactors(\"b\",5,8,0.1f, false);\n\n    for (int i = 9; i < 1000; i++) {\n      assertTrue(\"s: i=\"+i+\" : a=\"+ss.lengthNorm(\"a\",i)+\n                 \" < b=\"+ss.lengthNorm(\"b\",i),\n                 ss.lengthNorm(\"a\",i) < s.lengthNorm(\"b\",i));\n    }\n\n  }\n\n","sourceOld":"  public void testSweetSpotLengthNorm() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n  \n    for (int i = 1; i < 1000; i++) {\n      assertEquals(\"base case: i=\"+i,\n                   d.lengthNorm(\"foo\",i), s.lengthNorm(\"foo\",i),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f);\n  \n    for (int i = 3; i <=10; i++) {\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f, s.lengthNorm(\"foo\",i),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   d.lengthNorm(\"foo\",i-9), s.lengthNorm(\"foo\",i),\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    ss.setLengthNormFactors(\"bar\",8,13, 0.5f, false);\n    ss.setLengthNormFactors(\"yak\",6,9, 0.5f, false);\n\n  \n    for (int i = 3; i <=10; i++) {\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f, s.lengthNorm(\"foo\",i),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   d.lengthNorm(\"foo\",i-9), s.lengthNorm(\"foo\",i),\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f, s.lengthNorm(\"bar\",i),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f, s.lengthNorm(\"yak\",i),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   d.lengthNorm(\"foo\",i-12), s.lengthNorm(\"bar\",i),\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   d.lengthNorm(\"foo\",i-8), s.lengthNorm(\"yak\",i),\n                   0.0f);\n    }\n\n\n    // steepness\n\n    ss.setLengthNormFactors(\"a\",5,8,0.5f, false);\n    ss.setLengthNormFactors(\"b\",5,8,0.1f, false);\n\n    for (int i = 9; i < 1000; i++) {\n      assertTrue(\"s: i=\"+i+\" : a=\"+ss.lengthNorm(\"a\",i)+\n                 \" < b=\"+ss.lengthNorm(\"b\",i),\n                 ss.lengthNorm(\"a\",i) < s.lengthNorm(\"b\",i));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"]},"commit2Childs":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}