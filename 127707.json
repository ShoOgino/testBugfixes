{"path":"solr/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","commits":[{"id":"1774e2854ef0f77de7f31ba1d9586139928e06fe","date":1285965652,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, \"2\"); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    IndexReader reader = core.getSearcher().get().getReader();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, reader);\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ba739a530000f510c2e351b2a4e7a1941517ba7","date":1287349584,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, \"2\"); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, \"2\"); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    IndexReader reader = core.getSearcher().get().getReader();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, reader);\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, \"2\"); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, \"2\"); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    IndexReader reader = core.getSearcher().get().getReader();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, reader);\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, \"2\"); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, \"2\"); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, \"2\"); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, \"2\"); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, \"2\"); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, \"2\"); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, \"2\"); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1f73d659ca2ba1a1656881663797f0e5b61f3fc","date":1307414322,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, \"2\"); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, \"2\"); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, \"2\"); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(DirectSolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try \"fob\"\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertFalse(entry.getValue() + \" equals: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["c220849f876de24a79f756f65b3eb045db59f63f","b1f73d659ca2ba1a1656881663797f0e5b61f3fc"],"c26f00b574427b55127e869b935845554afde1fa":["b1f73d659ca2ba1a1656881663797f0e5b61f3fc","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7ba739a530000f510c2e351b2a4e7a1941517ba7"],"b1f73d659ca2ba1a1656881663797f0e5b61f3fc":["c220849f876de24a79f756f65b3eb045db59f63f"],"7ba739a530000f510c2e351b2a4e7a1941517ba7":["1774e2854ef0f77de7f31ba1d9586139928e06fe"],"c220849f876de24a79f756f65b3eb045db59f63f":["7ba739a530000f510c2e351b2a4e7a1941517ba7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","c220849f876de24a79f756f65b3eb045db59f63f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1774e2854ef0f77de7f31ba1d9586139928e06fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["29ef99d61cda9641b6250bf9567329a6e65f901d","b1f73d659ca2ba1a1656881663797f0e5b61f3fc"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["b1f73d659ca2ba1a1656881663797f0e5b61f3fc"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["1774e2854ef0f77de7f31ba1d9586139928e06fe","7ba739a530000f510c2e351b2a4e7a1941517ba7"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c220849f876de24a79f756f65b3eb045db59f63f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"b1f73d659ca2ba1a1656881663797f0e5b61f3fc":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","c26f00b574427b55127e869b935845554afde1fa","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee"],"7ba739a530000f510c2e351b2a4e7a1941517ba7":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c220849f876de24a79f756f65b3eb045db59f63f","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c220849f876de24a79f756f65b3eb045db59f63f":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","b1f73d659ca2ba1a1656881663797f0e5b61f3fc","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1774e2854ef0f77de7f31ba1d9586139928e06fe"],"1774e2854ef0f77de7f31ba1d9586139928e06fe":["7ba739a530000f510c2e351b2a4e7a1941517ba7","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}