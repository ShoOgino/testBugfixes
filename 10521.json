{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#testShapeRelations().mjava","commits":[{"id":"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093","date":1401932592,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#testShapeRelations().mjava","pathOld":"/dev/null","sourceNew":"  public void testShapeRelations() throws ParseException {\n    Shape shapeA = tree.parseShape(\"[3122-01-23 TO 3122-11-27]\");\n    Shape shapeB = tree.parseShape(\"[3122-08 TO 3122-11]\");\n    assertEquals(SpatialRelation.INTERSECTS, shapeA.relate(shapeB));\n\n    shapeA = tree.parseShape(\"3122\");\n    shapeB = tree.parseShape(\"[* TO 3122-10-31]\");\n    assertEquals(SpatialRelation.INTERSECTS, shapeA.relate(shapeB));\n\n    shapeA = tree.parseShape(\"[3122-05-28 TO 3122-06-29]\");\n    shapeB = tree.parseShape(\"[3122 TO 3122-04]\");\n    assertEquals(SpatialRelation.DISJOINT, shapeA.relate(shapeB));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d009c4b73c08d156582c5a8e34e7e3c3f7378e8d","date":1402425682,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#testShapeRelations().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#testShapeRelations().mjava","sourceNew":"  public void testShapeRelations() throws ParseException {\n    //note: left range is 264000 at the thousand year level whereas right value is exact year\n    assertEquals(SpatialRelation.WITHIN,\n        tree.parseShape(\"[-264000 TO -264000-11-20]\").relate(tree.parseShape(\"-264000\")));\n\n    Shape shapeA = tree.parseShape(\"[3122-01-23 TO 3122-11-27]\");\n    Shape shapeB = tree.parseShape(\"[3122-08 TO 3122-11]\");\n    assertEquals(SpatialRelation.INTERSECTS, shapeA.relate(shapeB));\n\n    shapeA = tree.parseShape(\"3122\");\n    shapeB = tree.parseShape(\"[* TO 3122-10-31]\");\n    assertEquals(SpatialRelation.INTERSECTS, shapeA.relate(shapeB));\n\n    shapeA = tree.parseShape(\"[3122-05-28 TO 3122-06-29]\");\n    shapeB = tree.parseShape(\"[3122 TO 3122-04]\");\n    assertEquals(SpatialRelation.DISJOINT, shapeA.relate(shapeB));\n  }\n\n","sourceOld":"  public void testShapeRelations() throws ParseException {\n    Shape shapeA = tree.parseShape(\"[3122-01-23 TO 3122-11-27]\");\n    Shape shapeB = tree.parseShape(\"[3122-08 TO 3122-11]\");\n    assertEquals(SpatialRelation.INTERSECTS, shapeA.relate(shapeB));\n\n    shapeA = tree.parseShape(\"3122\");\n    shapeB = tree.parseShape(\"[* TO 3122-10-31]\");\n    assertEquals(SpatialRelation.INTERSECTS, shapeA.relate(shapeB));\n\n    shapeA = tree.parseShape(\"[3122-05-28 TO 3122-06-29]\");\n    shapeB = tree.parseShape(\"[3122 TO 3122-04]\");\n    assertEquals(SpatialRelation.DISJOINT, shapeA.relate(shapeB));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#testShapeRelations().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#testShapeRelations().mjava","sourceNew":"  public void testShapeRelations() throws ParseException {\n    //note: left range is 264000 at the thousand year level whereas right value is exact year\n    assertEquals(SpatialRelation.WITHIN,\n        tree.parseShape(\"[-264000 TO -264000-11-20]\").relate(tree.parseShape(\"-264000\")));\n\n    Shape shapeA = tree.parseShape(\"[3122-01-23 TO 3122-11-27]\");\n    Shape shapeB = tree.parseShape(\"[3122-08 TO 3122-11]\");\n    assertEquals(SpatialRelation.INTERSECTS, shapeA.relate(shapeB));\n\n    shapeA = tree.parseShape(\"3122\");\n    shapeB = tree.parseShape(\"[* TO 3122-10-31]\");\n    assertEquals(SpatialRelation.INTERSECTS, shapeA.relate(shapeB));\n\n    shapeA = tree.parseShape(\"[3122-05-28 TO 3122-06-29]\");\n    shapeB = tree.parseShape(\"[3122 TO 3122-04]\");\n    assertEquals(SpatialRelation.DISJOINT, shapeA.relate(shapeB));\n  }\n\n","sourceOld":"  public void testShapeRelations() throws ParseException {\n    //note: left range is 264000 at the thousand year level whereas right value is exact year\n    assertEquals(SpatialRelation.WITHIN,\n        tree.parseShape(\"[-264000 TO -264000-11-20]\").relate(tree.parseShape(\"-264000\")));\n\n    Shape shapeA = tree.parseShape(\"[3122-01-23 TO 3122-11-27]\");\n    Shape shapeB = tree.parseShape(\"[3122-08 TO 3122-11]\");\n    assertEquals(SpatialRelation.INTERSECTS, shapeA.relate(shapeB));\n\n    shapeA = tree.parseShape(\"3122\");\n    shapeB = tree.parseShape(\"[* TO 3122-10-31]\");\n    assertEquals(SpatialRelation.INTERSECTS, shapeA.relate(shapeB));\n\n    shapeA = tree.parseShape(\"[3122-05-28 TO 3122-06-29]\");\n    shapeB = tree.parseShape(\"[3122 TO 3122-04]\");\n    assertEquals(SpatialRelation.DISJOINT, shapeA.relate(shapeB));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#testShapeRelations().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#testShapeRelations().mjava","sourceNew":"  public void testShapeRelations() throws ParseException {\n    //note: left range is 264000 at the thousand year level whereas right value is exact year\n    assertEquals(SpatialRelation.WITHIN,\n        tree.parseShape(\"[-264000 TO -264000-11-20]\").relate(tree.parseShape(\"-264000\")));\n\n    Shape shapeA = tree.parseShape(\"[3122-01-23 TO 3122-11-27]\");\n    Shape shapeB = tree.parseShape(\"[3122-08 TO 3122-11]\");\n    assertEquals(SpatialRelation.INTERSECTS, shapeA.relate(shapeB));\n\n    shapeA = tree.parseShape(\"3122\");\n    shapeB = tree.parseShape(\"[* TO 3122-10-31]\");\n    assertEquals(SpatialRelation.INTERSECTS, shapeA.relate(shapeB));\n\n    shapeA = tree.parseShape(\"[3122-05-28 TO 3122-06-29]\");\n    shapeB = tree.parseShape(\"[3122 TO 3122-04]\");\n    assertEquals(SpatialRelation.DISJOINT, shapeA.relate(shapeB));\n  }\n\n","sourceOld":"  public void testShapeRelations() throws ParseException {\n    //note: left range is 264000 at the thousand year level whereas right value is exact year\n    assertEquals(SpatialRelation.WITHIN,\n        tree.parseShape(\"[-264000 TO -264000-11-20]\").relate(tree.parseShape(\"-264000\")));\n\n    Shape shapeA = tree.parseShape(\"[3122-01-23 TO 3122-11-27]\");\n    Shape shapeB = tree.parseShape(\"[3122-08 TO 3122-11]\");\n    assertEquals(SpatialRelation.INTERSECTS, shapeA.relate(shapeB));\n\n    shapeA = tree.parseShape(\"3122\");\n    shapeB = tree.parseShape(\"[* TO 3122-10-31]\");\n    assertEquals(SpatialRelation.INTERSECTS, shapeA.relate(shapeB));\n\n    shapeA = tree.parseShape(\"[3122-05-28 TO 3122-06-29]\");\n    shapeB = tree.parseShape(\"[3122 TO 3122-04]\");\n    assertEquals(SpatialRelation.DISJOINT, shapeA.relate(shapeB));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d009c4b73c08d156582c5a8e34e7e3c3f7378e8d":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"],"af2638813028b254a88b418ebeafb541afb49653":["d009c4b73c08d156582c5a8e34e7e3c3f7378e8d","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["d009c4b73c08d156582c5a8e34e7e3c3f7378e8d"],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"d009c4b73c08d156582c5a8e34e7e3c3f7378e8d":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["d009c4b73c08d156582c5a8e34e7e3c3f7378e8d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}