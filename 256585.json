{"path":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonFacetRangeOfAsymetricRates().mjava","commits":[{"id":"6409f24cc7d96b04fb1c932845092b0e307fb5d4","date":1515972624,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonFacetRangeOfAsymetricRates().mjava","pathOld":"/dev/null","sourceNew":"  public void testJsonFacetRangeOfAsymetricRates() throws Exception {\n    // json.facet: exchange rates relative to EUR (same as testFacetRangeOfAsymetricRates)\n    //\n    // because of the asymetric echange rate, the counts for these buckets will be different\n    // then if we just converted the EUR values to USD\n    for (boolean use_mincount : Arrays.asList(true, false)) {\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                                                \"{ foo:{ type:range, field:\"+FIELD+\", start:'8,EUR', \" +\n                                                \"        mincount:\"+(use_mincount ? 3 : 0)+\", \" +\n                                                \"        gap:'2,EUR', end:'22,EUR', other:all}}\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n        \n        final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n        \n        assertEqualsHACK(\"before\", 6L, ((NamedList)foo.get(\"before\")).get(\"count\"));\n        assertEqualsHACK(\"after\", 3L, ((NamedList)foo.get(\"after\")).get(\"count\"));\n        assertEqualsHACK(\"between\", 6L, ((NamedList)foo.get(\"between\")).get(\"count\"));\n        \n        final List<NamedList> buckets = (List<NamedList>) foo.get(\"buckets\");\n        \n        if (use_mincount) {\n          assertEquals(2, buckets.size());\n          for (int i = 0; i < 2; i++) {\n            NamedList bucket = buckets.get(i);\n            assertEquals((12 + (i * 2)) + \".00,EUR\", bucket.get(\"val\"));\n            assertEqualsHACK(\"bucket #\" + i, 3L, bucket.get(\"count\"));\n          }\n        } else {\n          assertEquals(7, buckets.size());\n          for (int i = 0; i < 7; i++) {\n            NamedList bucket = buckets.get(i);\n            assertEquals((8 + (i * 2)) + \".00,EUR\", bucket.get(\"val\"));\n            assertEqualsHACK(\"bucket #\" + i, (i == 2 || i == 3) ? 3L : 0L, bucket.get(\"count\"));\n          }\n        }\n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1c841e27891873cab110ebeb89f124a8ec470176"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonFacetRangeOfAsymetricRates().mjava","pathOld":"/dev/null","sourceNew":"  public void testJsonFacetRangeOfAsymetricRates() throws Exception {\n    // json.facet: exchange rates relative to EUR (same as testFacetRangeOfAsymetricRates)\n    //\n    // because of the asymetric echange rate, the counts for these buckets will be different\n    // then if we just converted the EUR values to USD\n    for (boolean use_mincount : Arrays.asList(true, false)) {\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                                                \"{ foo:{ type:range, field:\"+FIELD+\", start:'8,EUR', \" +\n                                                \"        mincount:\"+(use_mincount ? 3 : 0)+\", \" +\n                                                \"        gap:'2,EUR', end:'22,EUR', other:all}}\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n        \n        final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n        \n        assertEqualsHACK(\"before\", 6L, ((NamedList)foo.get(\"before\")).get(\"count\"));\n        assertEqualsHACK(\"after\", 3L, ((NamedList)foo.get(\"after\")).get(\"count\"));\n        assertEqualsHACK(\"between\", 6L, ((NamedList)foo.get(\"between\")).get(\"count\"));\n        \n        final List<NamedList> buckets = (List<NamedList>) foo.get(\"buckets\");\n        \n        if (use_mincount) {\n          assertEquals(2, buckets.size());\n          for (int i = 0; i < 2; i++) {\n            NamedList bucket = buckets.get(i);\n            assertEquals((12 + (i * 2)) + \".00,EUR\", bucket.get(\"val\"));\n            assertEqualsHACK(\"bucket #\" + i, 3L, bucket.get(\"count\"));\n          }\n        } else {\n          assertEquals(7, buckets.size());\n          for (int i = 0; i < 7; i++) {\n            NamedList bucket = buckets.get(i);\n            assertEquals((8 + (i * 2)) + \".00,EUR\", bucket.get(\"val\"));\n            assertEqualsHACK(\"bucket #\" + i, (i == 2 || i == 3) ? 3L : 0L, bucket.get(\"count\"));\n          }\n        }\n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c841e27891873cab110ebeb89f124a8ec470176","date":1586527220,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonFacetRangeOfAsymetricRates().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonFacetRangeOfAsymetricRates().mjava","sourceNew":"  public void testJsonFacetRangeOfAsymetricRates() throws Exception {\n    // json.facet: exchange rates relative to EUR (same as testFacetRangeOfAsymetricRates)\n    //\n    // because of the asymetric echange rate, the counts for these buckets will be different\n    // then if we just converted the EUR values to USD\n    for (boolean use_mincount : Arrays.asList(true, false)) {\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                                                \"{ foo:{ type:range, field:\"+FIELD+\", start:'8,EUR', \" +\n                                                \"        mincount:\"+(use_mincount ? 3 : 0)+\", \" +\n                                                \"        gap:'2,EUR', end:'22,EUR', other:all}}\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n        \n        final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n        \n        assertEquals(\"before\", 6L, ((NamedList)foo.get(\"before\")).get(\"count\"));\n        assertEquals(\"after\", 3L, ((NamedList)foo.get(\"after\")).get(\"count\"));\n        assertEquals(\"between\", 6L, ((NamedList)foo.get(\"between\")).get(\"count\"));\n        \n        final List<NamedList> buckets = (List<NamedList>) foo.get(\"buckets\");\n        \n        if (use_mincount) {\n          assertEquals(2, buckets.size());\n          for (int i = 0; i < 2; i++) {\n            NamedList bucket = buckets.get(i);\n            assertEquals((12 + (i * 2)) + \".00,EUR\", bucket.get(\"val\"));\n            assertEquals(\"bucket #\" + i, 3L, bucket.get(\"count\"));\n          }\n        } else {\n          assertEquals(7, buckets.size());\n          for (int i = 0; i < 7; i++) {\n            NamedList bucket = buckets.get(i);\n            assertEquals((8 + (i * 2)) + \".00,EUR\", bucket.get(\"val\"));\n            assertEquals(\"bucket #\" + i, (i == 2 || i == 3) ? 3L : 0L, bucket.get(\"count\"));\n          }\n        }\n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","sourceOld":"  public void testJsonFacetRangeOfAsymetricRates() throws Exception {\n    // json.facet: exchange rates relative to EUR (same as testFacetRangeOfAsymetricRates)\n    //\n    // because of the asymetric echange rate, the counts for these buckets will be different\n    // then if we just converted the EUR values to USD\n    for (boolean use_mincount : Arrays.asList(true, false)) {\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                                                \"{ foo:{ type:range, field:\"+FIELD+\", start:'8,EUR', \" +\n                                                \"        mincount:\"+(use_mincount ? 3 : 0)+\", \" +\n                                                \"        gap:'2,EUR', end:'22,EUR', other:all}}\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n        \n        final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n        \n        assertEqualsHACK(\"before\", 6L, ((NamedList)foo.get(\"before\")).get(\"count\"));\n        assertEqualsHACK(\"after\", 3L, ((NamedList)foo.get(\"after\")).get(\"count\"));\n        assertEqualsHACK(\"between\", 6L, ((NamedList)foo.get(\"between\")).get(\"count\"));\n        \n        final List<NamedList> buckets = (List<NamedList>) foo.get(\"buckets\");\n        \n        if (use_mincount) {\n          assertEquals(2, buckets.size());\n          for (int i = 0; i < 2; i++) {\n            NamedList bucket = buckets.get(i);\n            assertEquals((12 + (i * 2)) + \".00,EUR\", bucket.get(\"val\"));\n            assertEqualsHACK(\"bucket #\" + i, 3L, bucket.get(\"count\"));\n          }\n        } else {\n          assertEquals(7, buckets.size());\n          for (int i = 0; i < 7; i++) {\n            NamedList bucket = buckets.get(i);\n            assertEquals((8 + (i * 2)) + \".00,EUR\", bucket.get(\"val\"));\n            assertEqualsHACK(\"bucket #\" + i, (i == 2 || i == 3) ? 3L : 0L, bucket.get(\"count\"));\n          }\n        }\n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","bugFix":["6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonFacetRangeOfAsymetricRates().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonFacetRangeOfAsymetricRates().mjava","sourceNew":"  public void testJsonFacetRangeOfAsymetricRates() throws Exception {\n    // json.facet: exchange rates relative to EUR (same as testFacetRangeOfAsymetricRates)\n    //\n    // because of the asymetric echange rate, the counts for these buckets will be different\n    // then if we just converted the EUR values to USD\n    for (boolean use_mincount : Arrays.asList(true, false)) {\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                                                \"{ foo:{ type:range, field:\"+FIELD+\", start:'8,EUR', \" +\n                                                \"        mincount:\"+(use_mincount ? 3 : 0)+\", \" +\n                                                \"        gap:'2,EUR', end:'22,EUR', other:all}}\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n        \n        @SuppressWarnings({\"unchecked\"})\n        final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n        \n        assertEquals(\"before\", 6L, ((NamedList)foo.get(\"before\")).get(\"count\"));\n        assertEquals(\"after\", 3L, ((NamedList)foo.get(\"after\")).get(\"count\"));\n        assertEquals(\"between\", 6L, ((NamedList)foo.get(\"between\")).get(\"count\"));\n        \n        @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n        final List<NamedList> buckets = (List<NamedList>) foo.get(\"buckets\");\n        \n        if (use_mincount) {\n          assertEquals(2, buckets.size());\n          for (int i = 0; i < 2; i++) {\n            @SuppressWarnings({\"rawtypes\"})\n            NamedList bucket = buckets.get(i);\n            assertEquals((12 + (i * 2)) + \".00,EUR\", bucket.get(\"val\"));\n            assertEquals(\"bucket #\" + i, 3L, bucket.get(\"count\"));\n          }\n        } else {\n          assertEquals(7, buckets.size());\n          for (int i = 0; i < 7; i++) {\n            @SuppressWarnings({\"rawtypes\"})\n            NamedList bucket = buckets.get(i);\n            assertEquals((8 + (i * 2)) + \".00,EUR\", bucket.get(\"val\"));\n            assertEquals(\"bucket #\" + i, (i == 2 || i == 3) ? 3L : 0L, bucket.get(\"count\"));\n          }\n        }\n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","sourceOld":"  public void testJsonFacetRangeOfAsymetricRates() throws Exception {\n    // json.facet: exchange rates relative to EUR (same as testFacetRangeOfAsymetricRates)\n    //\n    // because of the asymetric echange rate, the counts for these buckets will be different\n    // then if we just converted the EUR values to USD\n    for (boolean use_mincount : Arrays.asList(true, false)) {\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                                                \"{ foo:{ type:range, field:\"+FIELD+\", start:'8,EUR', \" +\n                                                \"        mincount:\"+(use_mincount ? 3 : 0)+\", \" +\n                                                \"        gap:'2,EUR', end:'22,EUR', other:all}}\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n        \n        final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n        \n        assertEquals(\"before\", 6L, ((NamedList)foo.get(\"before\")).get(\"count\"));\n        assertEquals(\"after\", 3L, ((NamedList)foo.get(\"after\")).get(\"count\"));\n        assertEquals(\"between\", 6L, ((NamedList)foo.get(\"between\")).get(\"count\"));\n        \n        final List<NamedList> buckets = (List<NamedList>) foo.get(\"buckets\");\n        \n        if (use_mincount) {\n          assertEquals(2, buckets.size());\n          for (int i = 0; i < 2; i++) {\n            NamedList bucket = buckets.get(i);\n            assertEquals((12 + (i * 2)) + \".00,EUR\", bucket.get(\"val\"));\n            assertEquals(\"bucket #\" + i, 3L, bucket.get(\"count\"));\n          }\n        } else {\n          assertEquals(7, buckets.size());\n          for (int i = 0; i < 7; i++) {\n            NamedList bucket = buckets.get(i);\n            assertEquals((8 + (i * 2)) + \".00,EUR\", bucket.get(\"val\"));\n            assertEquals(\"bucket #\" + i, (i == 2 || i == 3) ? 3L : 0L, bucket.get(\"count\"));\n          }\n        }\n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1c841e27891873cab110ebeb89f124a8ec470176":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["1c841e27891873cab110ebeb89f124a8ec470176"]},"commit2Childs":{"1c841e27891873cab110ebeb89f124a8ec470176":["e98520789adb1d5ad05afb4956eca0944a929688"],"b94236357aaa22b76c10629851fe4e376e0cea82":["1c841e27891873cab110ebeb89f124a8ec470176"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}