{"path":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testRaceConditionOnUpdates().mjava","commits":[{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testRaceConditionOnUpdates().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testRaceConditionOnUpdates() throws InterruptedException {\r\n    String collection = \"raceConditionOnUpdates\";\r\n    List<String> replicas = Arrays.asList(\"rep1\", \"rep2\", \"rep3\", \"rep4\");\r\n    for (String replica : replicas) {\r\n      try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\r\n        zkShardTerms.registerTerm(replica);\r\n      }\r\n    }\r\n\r\n    List<String> failedReplicas = new ArrayList<>(replicas);\r\n    Collections.shuffle(failedReplicas, random());\r\n    while (failedReplicas.size() > 2) {\r\n      failedReplicas.remove(0);\r\n    }\r\n    AtomicBoolean stop = new AtomicBoolean(false);\r\n    Thread[] threads = new Thread[failedReplicas.size()];\r\n    for (int i = 0; i < failedReplicas.size(); i++) {\r\n      String replica = failedReplicas.get(i);\r\n      threads[i] = new Thread(() -> {\r\n        try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\r\n          while (!stop.get()) {\r\n            try {\r\n              Thread.sleep(random().nextInt(200));\r\n              zkShardTerms.setEqualsToMax(replica);\r\n            } catch (InterruptedException e) {\r\n              e.printStackTrace();\r\n            }\r\n          }\r\n        }\r\n      });\r\n      threads[i].start();\r\n    }\r\n\r\n    long maxTerm = 0;\r\n    try (ZkShardTerms shardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\r\n      shardTerms.registerTerm(\"leader\");\r\n      TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS, new TimeSource.CurrentTimeSource());\r\n      while (!timeOut.hasTimedOut()) {\r\n        maxTerm++;\r\n        assertEquals(shardTerms.getTerms().get(\"leader\"), Collections.max(shardTerms.getTerms().values()));\r\n        Thread.sleep(100);\r\n      }\r\n      assertTrue(maxTerm >= Collections.max(shardTerms.getTerms().values()));\r\n    }\r\n    stop.set(true);\r\n    for (Thread thread : threads) {\r\n      thread.join();\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94","date":1520143025,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testRaceConditionOnUpdates().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testRaceConditionOnUpdates().mjava","sourceNew":"  @Test\r\n  public void testRaceConditionOnUpdates() throws InterruptedException {\r\n    String collection = \"raceConditionOnUpdates\";\r\n    List<String> replicas = Arrays.asList(\"rep1\", \"rep2\", \"rep3\", \"rep4\");\r\n    for (String replica : replicas) {\r\n      try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\r\n        zkShardTerms.registerTerm(replica);\r\n      }\r\n    }\r\n\r\n    List<String> failedReplicas = new ArrayList<>(replicas);\r\n    Collections.shuffle(failedReplicas, random());\r\n    while (failedReplicas.size() > 2) {\r\n      failedReplicas.remove(0);\r\n    }\r\n    AtomicBoolean stop = new AtomicBoolean(false);\r\n    Thread[] threads = new Thread[failedReplicas.size()];\r\n    for (int i = 0; i < failedReplicas.size(); i++) {\r\n      String replica = failedReplicas.get(i);\r\n      threads[i] = new Thread(() -> {\r\n        try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\r\n          while (!stop.get()) {\r\n            try {\r\n              Thread.sleep(random().nextInt(200));\r\n              zkShardTerms.setTermEqualsToLeader(replica);\r\n            } catch (InterruptedException e) {\r\n              e.printStackTrace();\r\n            }\r\n          }\r\n        }\r\n      });\r\n      threads[i].start();\r\n    }\r\n\r\n    long maxTerm = 0;\r\n    try (ZkShardTerms shardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\r\n      shardTerms.registerTerm(\"leader\");\r\n      TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS, new TimeSource.CurrentTimeSource());\r\n      while (!timeOut.hasTimedOut()) {\r\n        maxTerm++;\r\n        assertEquals(shardTerms.getTerms().get(\"leader\"), Collections.max(shardTerms.getTerms().values()));\r\n        Thread.sleep(100);\r\n      }\r\n      assertTrue(maxTerm >= Collections.max(shardTerms.getTerms().values()));\r\n    }\r\n    stop.set(true);\r\n    for (Thread thread : threads) {\r\n      thread.join();\r\n    }\r\n  }\r\n\n","sourceOld":"  @Test\r\n  public void testRaceConditionOnUpdates() throws InterruptedException {\r\n    String collection = \"raceConditionOnUpdates\";\r\n    List<String> replicas = Arrays.asList(\"rep1\", \"rep2\", \"rep3\", \"rep4\");\r\n    for (String replica : replicas) {\r\n      try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\r\n        zkShardTerms.registerTerm(replica);\r\n      }\r\n    }\r\n\r\n    List<String> failedReplicas = new ArrayList<>(replicas);\r\n    Collections.shuffle(failedReplicas, random());\r\n    while (failedReplicas.size() > 2) {\r\n      failedReplicas.remove(0);\r\n    }\r\n    AtomicBoolean stop = new AtomicBoolean(false);\r\n    Thread[] threads = new Thread[failedReplicas.size()];\r\n    for (int i = 0; i < failedReplicas.size(); i++) {\r\n      String replica = failedReplicas.get(i);\r\n      threads[i] = new Thread(() -> {\r\n        try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\r\n          while (!stop.get()) {\r\n            try {\r\n              Thread.sleep(random().nextInt(200));\r\n              zkShardTerms.setEqualsToMax(replica);\r\n            } catch (InterruptedException e) {\r\n              e.printStackTrace();\r\n            }\r\n          }\r\n        }\r\n      });\r\n      threads[i].start();\r\n    }\r\n\r\n    long maxTerm = 0;\r\n    try (ZkShardTerms shardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\r\n      shardTerms.registerTerm(\"leader\");\r\n      TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS, new TimeSource.CurrentTimeSource());\r\n      while (!timeOut.hasTimedOut()) {\r\n        maxTerm++;\r\n        assertEquals(shardTerms.getTerms().get(\"leader\"), Collections.max(shardTerms.getTerms().values()));\r\n        Thread.sleep(100);\r\n      }\r\n      assertTrue(maxTerm >= Collections.max(shardTerms.getTerms().values()));\r\n    }\r\n    stop.set(true);\r\n    for (Thread thread : threads) {\r\n      thread.join();\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5c929d2716fa79d443b93a82adb1da5b578ebd8","date":1550428858,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testRaceConditionOnUpdates().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testRaceConditionOnUpdates().mjava","sourceNew":"  @Test\n  public void testRaceConditionOnUpdates() throws InterruptedException {\n    String collection = \"raceConditionOnUpdates\";\n    List<String> replicas = Arrays.asList(\"rep1\", \"rep2\", \"rep3\", \"rep4\");\n    for (String replica : replicas) {\n      try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\n        zkShardTerms.registerTerm(replica);\n      }\n    }\n\n    List<String> failedReplicas = new ArrayList<>(replicas);\n    Collections.shuffle(failedReplicas, random());\n    while (failedReplicas.size() > 2) {\n      failedReplicas.remove(0);\n    }\n    AtomicBoolean stop = new AtomicBoolean(false);\n    Thread[] threads = new Thread[failedReplicas.size()];\n    for (int i = 0; i < failedReplicas.size(); i++) {\n      String replica = failedReplicas.get(i);\n      threads[i] = new Thread(() -> {\n        try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\n          while (!stop.get()) {\n            try {\n              Thread.sleep(random().nextInt(200));\n              zkShardTerms.setTermEqualsToLeader(replica);\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n          }\n        }\n      });\n      threads[i].start();\n    }\n\n    long maxTerm = 0;\n    try (ZkShardTerms shardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\n      shardTerms.registerTerm(\"leader\");\n      TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS, new TimeSource.CurrentTimeSource());\n      while (!timeOut.hasTimedOut()) {\n        maxTerm++;\n        assertEquals(shardTerms.getTerms().get(\"leader\"), Collections.max(shardTerms.getTerms().values()));\n        Thread.sleep(100);\n      }\n      assertTrue(maxTerm >= Collections.max(shardTerms.getTerms().values()));\n    }\n    stop.set(true);\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","sourceOld":"  @Test\r\n  public void testRaceConditionOnUpdates() throws InterruptedException {\r\n    String collection = \"raceConditionOnUpdates\";\r\n    List<String> replicas = Arrays.asList(\"rep1\", \"rep2\", \"rep3\", \"rep4\");\r\n    for (String replica : replicas) {\r\n      try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\r\n        zkShardTerms.registerTerm(replica);\r\n      }\r\n    }\r\n\r\n    List<String> failedReplicas = new ArrayList<>(replicas);\r\n    Collections.shuffle(failedReplicas, random());\r\n    while (failedReplicas.size() > 2) {\r\n      failedReplicas.remove(0);\r\n    }\r\n    AtomicBoolean stop = new AtomicBoolean(false);\r\n    Thread[] threads = new Thread[failedReplicas.size()];\r\n    for (int i = 0; i < failedReplicas.size(); i++) {\r\n      String replica = failedReplicas.get(i);\r\n      threads[i] = new Thread(() -> {\r\n        try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\r\n          while (!stop.get()) {\r\n            try {\r\n              Thread.sleep(random().nextInt(200));\r\n              zkShardTerms.setTermEqualsToLeader(replica);\r\n            } catch (InterruptedException e) {\r\n              e.printStackTrace();\r\n            }\r\n          }\r\n        }\r\n      });\r\n      threads[i].start();\r\n    }\r\n\r\n    long maxTerm = 0;\r\n    try (ZkShardTerms shardTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient())) {\r\n      shardTerms.registerTerm(\"leader\");\r\n      TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS, new TimeSource.CurrentTimeSource());\r\n      while (!timeOut.hasTimedOut()) {\r\n        maxTerm++;\r\n        assertEquals(shardTerms.getTerms().get(\"leader\"), Collections.max(shardTerms.getTerms().values()));\r\n        Thread.sleep(100);\r\n      }\r\n      assertTrue(maxTerm >= Collections.max(shardTerms.getTerms().values()));\r\n    }\r\n    stop.set(true);\r\n    for (Thread thread : threads) {\r\n      thread.join();\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94"],"84f20f331d8001864545c7021812d8c6509c7593":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94":["84f20f331d8001864545c7021812d8c6509c7593"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84f20f331d8001864545c7021812d8c6509c7593"],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84f20f331d8001864545c7021812d8c6509c7593":["8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94"],"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}