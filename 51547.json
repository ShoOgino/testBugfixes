{"path":"lucene/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","commits":[{"id":"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b","date":1316619234,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    final String codec = CodecProvider.getDefault().getFieldCodec(\"field\");\n    int num = codec.equals(\"PreFlex\") ? 200 * RANDOM_MULTIPLIER : atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      field.setValue(_TestUtil.randomUnicodeString(random, 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c2b42ebed8a5de0cf893bacfe396a71f4cbca41f","04f07771a2a7dd3a395700665ed839c3dae2def2","a78a90fc9701e511308346ea29f4f5e548bb39fe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c2b42ebed8a5de0cf893bacfe396a71f4cbca41f","date":1316622366,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      field.setValue(_TestUtil.randomUnicodeString(random, 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    final String codec = CodecProvider.getDefault().getFieldCodec(\"field\");\n    int num = codec.equals(\"PreFlex\") ? 200 * RANDOM_MULTIPLIER : atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      field.setValue(_TestUtil.randomUnicodeString(random, 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestReaderClosed#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      field.setValue(_TestUtil.randomUnicodeString(random, 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(field);\n\n    // we generate aweful prefixes: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      field.setValue(_TestUtil.randomUnicodeString(random, 10));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c2b42ebed8a5de0cf893bacfe396a71f4cbca41f":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c2b42ebed8a5de0cf893bacfe396a71f4cbca41f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["c2b42ebed8a5de0cf893bacfe396a71f4cbca41f"],"c2b42ebed8a5de0cf893bacfe396a71f4cbca41f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}