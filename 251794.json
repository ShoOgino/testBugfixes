{"path":"src/test/org/apache/lucene/index/TestParallelReader#testDocument().mjava","commits":[{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestParallelReader#testDocument().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocument() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n\n    Document doc11 = pr.document(0, new MapFieldSelector(new String[] {\"f1\"}));\n    Document doc24 = pr.document(1, new MapFieldSelector(Arrays.asList(new String[] {\"f4\"})));\n    Document doc223 = pr.document(1, new MapFieldSelector(new String[] {\"f2\", \"f3\"}));\n    \n    assertEquals(1, numFields(doc11));\n    assertEquals(1, numFields(doc24));\n    assertEquals(2, numFields(doc223));\n    \n    assertEquals(\"v1\", doc11.get(\"f1\"));\n    assertEquals(\"v2\", doc24.get(\"f4\"));\n    assertEquals(\"v2\", doc223.get(\"f2\"));\n    assertEquals(\"v2\", doc223.get(\"f3\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb4c50eaa8173000ec556e906872ea29c26312e2","date":1151010727,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestParallelReader#testDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestParallelReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n\n    Document doc11 = pr.document(0, new MapFieldSelector(new String[] {\"f1\"}));\n    Document doc24 = pr.document(1, new MapFieldSelector(Arrays.asList(new String[] {\"f4\"})));\n    Document doc223 = pr.document(1, new MapFieldSelector(new String[] {\"f2\", \"f3\"}));\n    \n    assertEquals(1, doc11.getFields().size());\n    assertEquals(1, doc24.getFields().size());\n    assertEquals(2, doc223.getFields().size());\n    \n    assertEquals(\"v1\", doc11.get(\"f1\"));\n    assertEquals(\"v2\", doc24.get(\"f4\"));\n    assertEquals(\"v2\", doc223.get(\"f2\"));\n    assertEquals(\"v2\", doc223.get(\"f3\"));\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n\n    Document doc11 = pr.document(0, new MapFieldSelector(new String[] {\"f1\"}));\n    Document doc24 = pr.document(1, new MapFieldSelector(Arrays.asList(new String[] {\"f4\"})));\n    Document doc223 = pr.document(1, new MapFieldSelector(new String[] {\"f2\", \"f3\"}));\n    \n    assertEquals(1, numFields(doc11));\n    assertEquals(1, numFields(doc24));\n    assertEquals(2, numFields(doc223));\n    \n    assertEquals(\"v1\", doc11.get(\"f1\"));\n    assertEquals(\"v2\", doc24.get(\"f4\"));\n    assertEquals(\"v2\", doc223.get(\"f2\"));\n    assertEquals(\"v2\", doc223.get(\"f3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestParallelReader#testDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestParallelReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n\n    Document doc11 = pr.document(0, new MapFieldSelector(new String[] {\"f1\"}));\n    Document doc24 = pr.document(1, new MapFieldSelector(Arrays.asList(new String[] {\"f4\"})));\n    Document doc223 = pr.document(1, new MapFieldSelector(new String[] {\"f2\", \"f3\"}));\n    \n    assertEquals(1, doc11.getFields().size());\n    assertEquals(1, doc24.getFields().size());\n    assertEquals(2, doc223.getFields().size());\n    \n    assertEquals(\"v1\", doc11.get(\"f1\"));\n    assertEquals(\"v2\", doc24.get(\"f4\"));\n    assertEquals(\"v2\", doc223.get(\"f2\"));\n    assertEquals(\"v2\", doc223.get(\"f3\"));\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n\n    Document doc11 = pr.document(0, new MapFieldSelector(new String[] {\"f1\"}));\n    Document doc24 = pr.document(1, new MapFieldSelector(Arrays.asList(new String[] {\"f4\"})));\n    Document doc223 = pr.document(1, new MapFieldSelector(new String[] {\"f2\", \"f3\"}));\n    \n    assertEquals(1, doc11.getFields().size());\n    assertEquals(1, doc24.getFields().size());\n    assertEquals(2, doc223.getFields().size());\n    \n    assertEquals(\"v1\", doc11.get(\"f1\"));\n    assertEquals(\"v2\", doc24.get(\"f4\"));\n    assertEquals(\"v2\", doc223.get(\"f2\"));\n    assertEquals(\"v2\", doc223.get(\"f3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestParallelReader#testDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestParallelReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n\n    Document doc11 = pr.document(0, new MapFieldSelector(new String[] {\"f1\"}));\n    Document doc24 = pr.document(1, new MapFieldSelector(Arrays.asList(new String[] {\"f4\"})));\n    Document doc223 = pr.document(1, new MapFieldSelector(new String[] {\"f2\", \"f3\"}));\n    \n    assertEquals(1, doc11.getFields().size());\n    assertEquals(1, doc24.getFields().size());\n    assertEquals(2, doc223.getFields().size());\n    \n    assertEquals(\"v1\", doc11.get(\"f1\"));\n    assertEquals(\"v2\", doc24.get(\"f4\"));\n    assertEquals(\"v2\", doc223.get(\"f2\"));\n    assertEquals(\"v2\", doc223.get(\"f3\"));\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n\n    Document doc11 = pr.document(0, new MapFieldSelector(new String[] {\"f1\"}));\n    Document doc24 = pr.document(1, new MapFieldSelector(Arrays.asList(new String[] {\"f4\"})));\n    Document doc223 = pr.document(1, new MapFieldSelector(new String[] {\"f2\", \"f3\"}));\n    \n    assertEquals(1, doc11.getFields().size());\n    assertEquals(1, doc24.getFields().size());\n    assertEquals(2, doc223.getFields().size());\n    \n    assertEquals(\"v1\", doc11.get(\"f1\"));\n    assertEquals(\"v2\", doc24.get(\"f4\"));\n    assertEquals(\"v2\", doc223.get(\"f2\"));\n    assertEquals(\"v2\", doc223.get(\"f3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestParallelReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n\n    Document doc11 = pr.document(0, new MapFieldSelector(new String[] {\"f1\"}));\n    Document doc24 = pr.document(1, new MapFieldSelector(Arrays.asList(new String[] {\"f4\"})));\n    Document doc223 = pr.document(1, new MapFieldSelector(new String[] {\"f2\", \"f3\"}));\n    \n    assertEquals(1, doc11.getFields().size());\n    assertEquals(1, doc24.getFields().size());\n    assertEquals(2, doc223.getFields().size());\n    \n    assertEquals(\"v1\", doc11.get(\"f1\"));\n    assertEquals(\"v2\", doc24.get(\"f4\"));\n    assertEquals(\"v2\", doc223.get(\"f2\"));\n    assertEquals(\"v2\", doc223.get(\"f3\"));\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n\n    Document doc11 = pr.document(0, new MapFieldSelector(new String[] {\"f1\"}));\n    Document doc24 = pr.document(1, new MapFieldSelector(Arrays.asList(new String[] {\"f4\"})));\n    Document doc223 = pr.document(1, new MapFieldSelector(new String[] {\"f2\", \"f3\"}));\n    \n    assertEquals(1, doc11.getFields().size());\n    assertEquals(1, doc24.getFields().size());\n    assertEquals(2, doc223.getFields().size());\n    \n    assertEquals(\"v1\", doc11.get(\"f1\"));\n    assertEquals(\"v2\", doc24.get(\"f4\"));\n    assertEquals(\"v2\", doc223.get(\"f2\"));\n    assertEquals(\"v2\", doc223.get(\"f3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["bb4c50eaa8173000ec556e906872ea29c26312e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["bb4c50eaa8173000ec556e906872ea29c26312e2","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"bb4c50eaa8173000ec556e906872ea29c26312e2":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"0a046c0c310bc77931fc8441bd920053b607dd14":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"bb4c50eaa8173000ec556e906872ea29c26312e2":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["bb4c50eaa8173000ec556e906872ea29c26312e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}