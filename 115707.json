{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,String,CoreState).mjava","commits":[{"id":"d0492616b11aace806d95ec9df44f57a60160bf7","date":1327803775,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,String,CoreState).mjava","pathOld":"/dev/null","sourceNew":"      /**\n       * Try to assign core to the cluster\n       * @throws KeeperException \n       * @throws InterruptedException \n       */\n      private CloudState updateState(CloudState state, String nodeName, CoreState coreState) throws KeeperException, InterruptedException {\n        String collection = coreState.getCollectionName();\n        String zkCoreNodeName = coreState.getCoreNodeName();\n        \n          String shardId;\n          if (coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP) == null) {\n            shardId = AssignShard.assignShard(collection, state);\n          } else {\n            shardId = coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP);\n          }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          for (Entry<String,String> entry : coreState.getProperties().entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          CloudState newCloudState = updateSlice(state, collection, slice);\n          return newCloudState;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f5d497ef5f4afb803f608c705a49782def2f7082"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f4a0c306589f8607dc4b33f7abaf753db19f76e","date":1327836084,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,String,CoreState).mjava","pathOld":"/dev/null","sourceNew":"      /**\n       * Try to assign core to the cluster\n       * @throws KeeperException \n       * @throws InterruptedException \n       */\n      private CloudState updateState(CloudState state, String nodeName, CoreState coreState) throws KeeperException, InterruptedException {\n        String collection = coreState.getCollectionName();\n        String zkCoreNodeName = coreState.getCoreNodeName();\n        \n          String shardId;\n          if (coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP) == null) {\n            shardId = AssignShard.assignShard(collection, state);\n          } else {\n            shardId = coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP);\n          }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          for (Entry<String,String> entry : coreState.getProperties().entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          CloudState newCloudState = updateSlice(state, collection, slice);\n          return newCloudState;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,String,CoreState).mjava","pathOld":"/dev/null","sourceNew":"      /**\n       * Try to assign core to the cluster\n       * @throws KeeperException \n       * @throws InterruptedException \n       */\n      private CloudState updateState(CloudState state, String nodeName, CoreState coreState) throws KeeperException, InterruptedException {\n        String collection = coreState.getCollectionName();\n        String zkCoreNodeName = coreState.getCoreNodeName();\n        \n          String shardId;\n          if (coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP) == null) {\n            shardId = AssignShard.assignShard(collection, state);\n          } else {\n            shardId = coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP);\n          }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          for (Entry<String,String> entry : coreState.getProperties().entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          CloudState newCloudState = updateSlice(state, collection, slice);\n          return newCloudState;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f5d497ef5f4afb803f608c705a49782def2f7082","date":1327943814,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,String,CoreState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,String,CoreState).mjava","sourceNew":"      /**\n       * Try to assign core to the cluster. \n       * @throws KeeperException \n       * @throws InterruptedException \n       */\n      private CloudState updateState(CloudState state, String nodeName, CoreState coreState) throws KeeperException, InterruptedException {\n        String collection = coreState.getCollectionName();\n        String zkCoreNodeName = coreState.getCoreNodeName();\n\n        // use the provided non null shardId\n        String shardId = coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP);\n        if(shardId==null) {\n          //use shardId from CloudState\n          shardId = getAssignedId(state, nodeName, coreState);\n        }\n        if(shardId==null) {\n          //request new shardId \n          shardId = AssignShard.assignShard(collection, state);\n        }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          for (Entry<String,String> entry : coreState.getProperties().entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          CloudState newCloudState = updateSlice(state, collection, slice);\n          return newCloudState;\n      }\n\n","sourceOld":"      /**\n       * Try to assign core to the cluster\n       * @throws KeeperException \n       * @throws InterruptedException \n       */\n      private CloudState updateState(CloudState state, String nodeName, CoreState coreState) throws KeeperException, InterruptedException {\n        String collection = coreState.getCollectionName();\n        String zkCoreNodeName = coreState.getCoreNodeName();\n        \n          String shardId;\n          if (coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP) == null) {\n            shardId = AssignShard.assignShard(collection, state);\n          } else {\n            shardId = coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP);\n          }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          for (Entry<String,String> entry : coreState.getProperties().entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          CloudState newCloudState = updateSlice(state, collection, slice);\n          return newCloudState;\n      }\n\n","bugFix":["d0492616b11aace806d95ec9df44f57a60160bf7"],"bugIntro":["6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,String,CoreState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,String,CoreState).mjava","sourceNew":"      /**\n       * Try to assign core to the cluster. \n       * @throws KeeperException \n       * @throws InterruptedException \n       */\n      private CloudState updateState(CloudState state, String nodeName, CoreState coreState) throws KeeperException, InterruptedException {\n        String collection = coreState.getCollectionName();\n        String zkCoreNodeName = coreState.getCoreNodeName();\n\n        // use the provided non null shardId\n        String shardId = coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP);\n        if(shardId==null) {\n          //use shardId from CloudState\n          shardId = getAssignedId(state, nodeName, coreState);\n        }\n        if(shardId==null) {\n          //request new shardId \n          shardId = AssignShard.assignShard(collection, state);\n        }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          for (Entry<String,String> entry : coreState.getProperties().entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          CloudState newCloudState = updateSlice(state, collection, slice);\n          return newCloudState;\n      }\n\n","sourceOld":"      /**\n       * Try to assign core to the cluster\n       * @throws KeeperException \n       * @throws InterruptedException \n       */\n      private CloudState updateState(CloudState state, String nodeName, CoreState coreState) throws KeeperException, InterruptedException {\n        String collection = coreState.getCollectionName();\n        String zkCoreNodeName = coreState.getCoreNodeName();\n        \n          String shardId;\n          if (coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP) == null) {\n            shardId = AssignShard.assignShard(collection, state);\n          } else {\n            shardId = coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP);\n          }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          for (Entry<String,String> entry : coreState.getProperties().entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          CloudState newCloudState = updateSlice(state, collection, slice);\n          return newCloudState;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"410e066f093e407222d9681429d209084e783149","date":1327958394,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,String,CoreState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,String,CoreState).mjava","sourceNew":"      /**\n       * Try to assign core to the cluster. \n       * @throws KeeperException \n       * @throws InterruptedException \n       */\n      private CloudState updateState(CloudState state, String nodeName, CoreState coreState) throws KeeperException, InterruptedException {\n        String collection = coreState.getCollectionName();\n        String zkCoreNodeName = coreState.getCoreNodeName();\n\n        // use the provided non null shardId\n        String shardId = coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP);\n        if(shardId==null) {\n          //use shardId from CloudState\n          shardId = getAssignedId(state, nodeName, coreState);\n        }\n        if(shardId==null) {\n          //request new shardId \n          shardId = AssignShard.assignShard(collection, state);\n        }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          for (Entry<String,String> entry : coreState.getProperties().entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          CloudState newCloudState = updateSlice(state, collection, slice);\n          return newCloudState;\n      }\n\n","sourceOld":"      /**\n       * Try to assign core to the cluster\n       * @throws KeeperException \n       * @throws InterruptedException \n       */\n      private CloudState updateState(CloudState state, String nodeName, CoreState coreState) throws KeeperException, InterruptedException {\n        String collection = coreState.getCollectionName();\n        String zkCoreNodeName = coreState.getCoreNodeName();\n        \n          String shardId;\n          if (coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP) == null) {\n            shardId = AssignShard.assignShard(collection, state);\n          } else {\n            shardId = coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP);\n          }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          for (Entry<String,String> entry : coreState.getProperties().entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          CloudState newCloudState = updateSlice(state, collection, slice);\n          return newCloudState;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6101715a4732c1fe39eae50ce4a23fec6fc270d0","date":1328795951,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,String,CoreState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,String,CoreState).mjava","sourceNew":"      /**\n       * Try to assign core to the cluster. \n       * @throws KeeperException \n       * @throws InterruptedException \n       */\n      private CloudState updateState(CloudState state, String nodeName, CoreState coreState) throws KeeperException, InterruptedException {\n        String collection = coreState.getCollectionName();\n        String zkCoreNodeName = coreState.getCoreNodeName();\n\n        // use the provided non null shardId\n        String shardId = coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP);\n        if(shardId==null) {\n          //use shardId from CloudState\n          shardId = getAssignedId(state, nodeName, coreState);\n        }\n        if(shardId==null) {\n          //request new shardId \n          shardId = AssignShard.assignShard(collection, state, coreState.getNumShards());\n        }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          for (Entry<String,String> entry : coreState.getProperties().entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          CloudState newCloudState = updateSlice(state, collection, slice);\n          return newCloudState;\n      }\n\n","sourceOld":"      /**\n       * Try to assign core to the cluster. \n       * @throws KeeperException \n       * @throws InterruptedException \n       */\n      private CloudState updateState(CloudState state, String nodeName, CoreState coreState) throws KeeperException, InterruptedException {\n        String collection = coreState.getCollectionName();\n        String zkCoreNodeName = coreState.getCoreNodeName();\n\n        // use the provided non null shardId\n        String shardId = coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP);\n        if(shardId==null) {\n          //use shardId from CloudState\n          shardId = getAssignedId(state, nodeName, coreState);\n        }\n        if(shardId==null) {\n          //request new shardId \n          shardId = AssignShard.assignShard(collection, state);\n        }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          for (Entry<String,String> entry : coreState.getProperties().entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          CloudState newCloudState = updateSlice(state, collection, slice);\n          return newCloudState;\n      }\n\n","bugFix":["f5d497ef5f4afb803f608c705a49782def2f7082"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84250b785753dee996ec3f88a1ea2e941ebe7cfb","date":1328840665,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,String,CoreState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,String,CoreState).mjava","sourceNew":"      /**\n       * Try to assign core to the cluster. \n       * @throws KeeperException \n       * @throws InterruptedException \n       */\n      private CloudState updateState(CloudState state, String nodeName, CoreState coreState) throws KeeperException, InterruptedException {\n        String collection = coreState.getCollectionName();\n        String zkCoreNodeName = coreState.getCoreNodeName();\n        \n        //collection does not yet exist, create placeholders if num shards is specified\n        if (!state.getCollections().contains(coreState.getCollectionName())\n            && coreState.getNumShards() != null) {\n          state = createCollection(state, collection, coreState.getNumShards());\n        }\n        \n        // use the provided non null shardId\n        String shardId = coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP);\n        if(shardId==null) {\n          //use shardId from CloudState\n          shardId = getAssignedId(state, nodeName, coreState);\n        }\n        if(shardId==null) {\n          //request new shardId \n          shardId = AssignShard.assignShard(collection, state, coreState.getNumShards());\n        }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          for (Entry<String,String> entry : coreState.getProperties().entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          CloudState newCloudState = updateSlice(state, collection, slice);\n          return newCloudState;\n      }\n\n","sourceOld":"      /**\n       * Try to assign core to the cluster. \n       * @throws KeeperException \n       * @throws InterruptedException \n       */\n      private CloudState updateState(CloudState state, String nodeName, CoreState coreState) throws KeeperException, InterruptedException {\n        String collection = coreState.getCollectionName();\n        String zkCoreNodeName = coreState.getCoreNodeName();\n\n        // use the provided non null shardId\n        String shardId = coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP);\n        if(shardId==null) {\n          //use shardId from CloudState\n          shardId = getAssignedId(state, nodeName, coreState);\n        }\n        if(shardId==null) {\n          //request new shardId \n          shardId = AssignShard.assignShard(collection, state, coreState.getNumShards());\n        }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          for (Entry<String,String> entry : coreState.getProperties().entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          CloudState newCloudState = updateSlice(state, collection, slice);\n          return newCloudState;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae331510714fc1dc86340c5d07fd6fbc1583b9f2","date":1328889379,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,String,CoreState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,String,CoreState).mjava","sourceNew":"      /**\n       * Try to assign core to the cluster. \n       * @throws KeeperException \n       * @throws InterruptedException \n       */\n      private CloudState updateState(CloudState state, String nodeName, CoreState coreState) throws KeeperException, InterruptedException {\n        String collection = coreState.getCollectionName();\n        String zkCoreNodeName = coreState.getCoreNodeName();\n        \n        //collection does not yet exist, create placeholders if num shards is specified\n        if (!state.getCollections().contains(coreState.getCollectionName())\n            && coreState.getNumShards() != null) {\n          state = createCollection(state, collection, coreState.getNumShards());\n        }\n        \n        // use the provided non null shardId\n        String shardId = coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP);\n        if(shardId==null) {\n          //use shardId from CloudState\n          shardId = getAssignedId(state, nodeName, coreState);\n        }\n        if(shardId==null) {\n          //request new shardId \n          shardId = AssignShard.assignShard(collection, state, coreState.getNumShards());\n        }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          Map<String,String> coreProps = new HashMap<String,String>(coreState.getProperties().size());\n          coreProps.putAll(coreState.getProperties());\n          // we don't put num_shards in the clusterstate\n          coreProps.remove(\"num_shards\");\n          for (Entry<String,String> entry : coreProps.entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          CloudState newCloudState = updateSlice(state, collection, slice);\n          return newCloudState;\n      }\n\n","sourceOld":"      /**\n       * Try to assign core to the cluster. \n       * @throws KeeperException \n       * @throws InterruptedException \n       */\n      private CloudState updateState(CloudState state, String nodeName, CoreState coreState) throws KeeperException, InterruptedException {\n        String collection = coreState.getCollectionName();\n        String zkCoreNodeName = coreState.getCoreNodeName();\n        \n        //collection does not yet exist, create placeholders if num shards is specified\n        if (!state.getCollections().contains(coreState.getCollectionName())\n            && coreState.getNumShards() != null) {\n          state = createCollection(state, collection, coreState.getNumShards());\n        }\n        \n        // use the provided non null shardId\n        String shardId = coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP);\n        if(shardId==null) {\n          //use shardId from CloudState\n          shardId = getAssignedId(state, nodeName, coreState);\n        }\n        if(shardId==null) {\n          //request new shardId \n          shardId = AssignShard.assignShard(collection, state, coreState.getNumShards());\n        }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          for (Entry<String,String> entry : coreState.getProperties().entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          CloudState newCloudState = updateSlice(state, collection, slice);\n          return newCloudState;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":5,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateState(CloudState,String,CoreState).mjava","sourceNew":"      /**\n       * Try to assign core to the cluster. \n       * @throws KeeperException \n       * @throws InterruptedException \n       */\n      private CloudState updateState(CloudState state, final ZkNodeProps message) throws KeeperException, InterruptedException {\n        final String collection = message.get(ZkStateReader.COLLECTION_PROP);\n        final String zkCoreNodeName = message.get(ZkStateReader.NODE_NAME_PROP) + \"_\" + message.get(ZkStateReader.CORE_NAME_PROP);\n        final Integer numShards = message.get(ZkStateReader.NUM_SHARDS_PROP)!=null?Integer.parseInt(message.get(ZkStateReader.NUM_SHARDS_PROP)):null;\n        \n        //collection does not yet exist, create placeholders if num shards is specified\n        if (!state.getCollections().contains(collection)\n            && numShards!=null) {\n          state = createCollection(state, collection, numShards);\n        }\n        \n        // use the provided non null shardId\n        String shardId = message.get(ZkStateReader.SHARD_ID_PROP);\n        if (shardId == null) {\n          String nodeName = message.get(ZkStateReader.NODE_NAME_PROP);\n          //get shardId from CloudState\n          shardId = getAssignedId(state, nodeName, message);\n        }\n        if(shardId == null) {\n          //request new shardId \n          shardId = AssignShard.assignShard(collection, state, numShards);\n        }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          Map<String,String> coreProps = new HashMap<String,String>(message.getProperties().size());\n          coreProps.putAll(message.getProperties());\n          // we don't put num_shards in the clusterstate\n          coreProps.remove(ZkStateReader.NUM_SHARDS_PROP);\n          coreProps.remove(QUEUE_OPERATION);\n          for (Entry<String,String> entry : coreProps.entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          CloudState newCloudState = updateSlice(state, collection, slice);\n          return newCloudState;\n      }\n\n","sourceOld":"      /**\n       * Try to assign core to the cluster. \n       * @throws KeeperException \n       * @throws InterruptedException \n       */\n      private CloudState updateState(CloudState state, String nodeName, CoreState coreState) throws KeeperException, InterruptedException {\n        String collection = coreState.getCollectionName();\n        String zkCoreNodeName = coreState.getCoreNodeName();\n        \n        //collection does not yet exist, create placeholders if num shards is specified\n        if (!state.getCollections().contains(coreState.getCollectionName())\n            && coreState.getNumShards() != null) {\n          state = createCollection(state, collection, coreState.getNumShards());\n        }\n        \n        // use the provided non null shardId\n        String shardId = coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP);\n        if(shardId==null) {\n          //use shardId from CloudState\n          shardId = getAssignedId(state, nodeName, coreState);\n        }\n        if(shardId==null) {\n          //request new shardId \n          shardId = AssignShard.assignShard(collection, state, coreState.getNumShards());\n        }\n          \n          Map<String,String> props = new HashMap<String,String>();\n          Map<String,String> coreProps = new HashMap<String,String>(coreState.getProperties().size());\n          coreProps.putAll(coreState.getProperties());\n          // we don't put num_shards in the clusterstate\n          coreProps.remove(\"num_shards\");\n          for (Entry<String,String> entry : coreProps.entrySet()) {\n            props.put(entry.getKey(), entry.getValue());\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(props);\n          Slice slice = state.getSlice(collection, shardId);\n          Map<String,ZkNodeProps> shardProps;\n          if (slice == null) {\n            shardProps = new HashMap<String,ZkNodeProps>();\n          } else {\n            shardProps = state.getSlice(collection, shardId).getShardsCopy();\n          }\n          shardProps.put(zkCoreNodeName, zkProps);\n\n          slice = new Slice(shardId, shardProps);\n          CloudState newCloudState = updateSlice(state, collection, slice);\n          return newCloudState;\n      }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","1525b4dfbc0d413b8d7247da232009778e624836","1525b4dfbc0d413b8d7247da232009778e624836"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"410e066f093e407222d9681429d209084e783149":["fd92b8bcc88e969302510acf77bd6970da3994c4","f5d497ef5f4afb803f608c705a49782def2f7082"],"84250b785753dee996ec3f88a1ea2e941ebe7cfb":["6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["ae331510714fc1dc86340c5d07fd6fbc1583b9f2"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d0492616b11aace806d95ec9df44f57a60160bf7"],"5b6fdfce35d0adb18836cf8711abe487a934df33":["8f4a0c306589f8607dc4b33f7abaf753db19f76e","f5d497ef5f4afb803f608c705a49782def2f7082"],"ae331510714fc1dc86340c5d07fd6fbc1583b9f2":["84250b785753dee996ec3f88a1ea2e941ebe7cfb"],"d0492616b11aace806d95ec9df44f57a60160bf7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8f4a0c306589f8607dc4b33f7abaf753db19f76e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d0492616b11aace806d95ec9df44f57a60160bf7"],"6101715a4732c1fe39eae50ce4a23fec6fc270d0":["f5d497ef5f4afb803f608c705a49782def2f7082"],"f5d497ef5f4afb803f608c705a49782def2f7082":["d0492616b11aace806d95ec9df44f57a60160bf7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a5093a9e893633cc091cf2f729d7863671c2b715"]},"commit2Childs":{"410e066f093e407222d9681429d209084e783149":[],"84250b785753dee996ec3f88a1ea2e941ebe7cfb":["ae331510714fc1dc86340c5d07fd6fbc1583b9f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd92b8bcc88e969302510acf77bd6970da3994c4","d0492616b11aace806d95ec9df44f57a60160bf7","8f4a0c306589f8607dc4b33f7abaf753db19f76e"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["410e066f093e407222d9681429d209084e783149"],"a5093a9e893633cc091cf2f729d7863671c2b715":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"ae331510714fc1dc86340c5d07fd6fbc1583b9f2":["a5093a9e893633cc091cf2f729d7863671c2b715"],"d0492616b11aace806d95ec9df44f57a60160bf7":["fd92b8bcc88e969302510acf77bd6970da3994c4","8f4a0c306589f8607dc4b33f7abaf753db19f76e","f5d497ef5f4afb803f608c705a49782def2f7082"],"8f4a0c306589f8607dc4b33f7abaf753db19f76e":["5b6fdfce35d0adb18836cf8711abe487a934df33"],"f5d497ef5f4afb803f608c705a49782def2f7082":["410e066f093e407222d9681429d209084e783149","5b6fdfce35d0adb18836cf8711abe487a934df33","6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"6101715a4732c1fe39eae50ce4a23fec6fc270d0":["84250b785753dee996ec3f88a1ea2e941ebe7cfb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["410e066f093e407222d9681429d209084e783149","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}