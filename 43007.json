{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/en/PorterStemmer#stem(char[],int,int).mjava","commits":[{"id":"689f35bd9818b47b8d9fe96cf06518228e949ab6","date":1272894884,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/en/PorterStemmer#stem(char[],int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/PorterStemmer#stem(char[],int,int).mjava","sourceNew":"  /** Stem a word contained in a portion of a char[] array.  Returns\n   * true if the stemming process resulted in a word different from\n   * the input.  You can retrieve the result with\n   * getResultLength()/getResultBuffer() or toString().\n   */\n  public boolean stem(char[] wordBuffer, int offset, int wordLen) {\n    reset();\n    if (b.length < wordLen) {\n      b = new char[ArrayUtil.oversize(wordLen, NUM_BYTES_CHAR)];\n    }\n    System.arraycopy(wordBuffer, offset, b, 0, wordLen);\n    i = wordLen;\n    return stem(0);\n  }\n\n","sourceOld":"  /** Stem a word contained in a portion of a char[] array.  Returns\n   * true if the stemming process resulted in a word different from\n   * the input.  You can retrieve the result with\n   * getResultLength()/getResultBuffer() or toString().\n   */\n  public boolean stem(char[] wordBuffer, int offset, int wordLen) {\n    reset();\n    if (b.length < wordLen) {\n      b = new char[ArrayUtil.oversize(wordLen, NUM_BYTES_CHAR)];\n    }\n    System.arraycopy(wordBuffer, offset, b, 0, wordLen);\n    i = wordLen;\n    return stem(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/PorterStemmer#stem(char[],int,int).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/en/PorterStemmer#stem(char[],int,int).mjava","sourceNew":"  /** Stem a word contained in a portion of a char[] array.  Returns\n   * true if the stemming process resulted in a word different from\n   * the input.  You can retrieve the result with\n   * getResultLength()/getResultBuffer() or toString().\n   */\n  public boolean stem(char[] wordBuffer, int offset, int wordLen) {\n    reset();\n    if (b.length < wordLen) {\n      b = new char[ArrayUtil.oversize(wordLen, NUM_BYTES_CHAR)];\n    }\n    System.arraycopy(wordBuffer, offset, b, 0, wordLen);\n    i = wordLen;\n    return stem(0);\n  }\n\n","sourceOld":"  /** Stem a word contained in a portion of a char[] array.  Returns\n   * true if the stemming process resulted in a word different from\n   * the input.  You can retrieve the result with\n   * getResultLength()/getResultBuffer() or toString().\n   */\n  public boolean stem(char[] wordBuffer, int offset, int wordLen) {\n    reset();\n    if (b.length < wordLen) {\n      b = new char[ArrayUtil.oversize(wordLen, NUM_BYTES_CHAR)];\n    }\n    System.arraycopy(wordBuffer, offset, b, 0, wordLen);\n    i = wordLen;\n    return stem(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"689f35bd9818b47b8d9fe96cf06518228e949ab6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["689f35bd9818b47b8d9fe96cf06518228e949ab6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"689f35bd9818b47b8d9fe96cf06518228e949ab6":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["689f35bd9818b47b8d9fe96cf06518228e949ab6"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}