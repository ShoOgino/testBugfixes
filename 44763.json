{"path":"lucene/src/java/org/apache/lucene/util/packed/PackedReaderIterator#advance(int).mjava","commits":[{"id":"56b73889eb1d01f9e6df4acab29810fb701abf0d","date":1284810631,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/packed/PackedReaderIterator#advance(int).mjava","pathOld":"/dev/null","sourceNew":"  public long advance(final int ord) throws IOException{\n    assert ord < valueCount : \"ord must be less than valueCount\";\n    assert ord > position : \"ord must be greater than the current position\";\n    final long bits = (long) bitsPerValue;\n    final int posToSkip = ord - 1 - position;\n    final long bitsToSkip = (bits * (long)posToSkip);\n    if(bitsToSkip < pendingBitsLeft ){ // enough bits left - no seek required\n      pendingBitsLeft -= bitsToSkip;\n    }else {\n      final long skip = bitsToSkip-pendingBitsLeft;\n      final long closestByte = (skip >> 6) << 3;\n      if(closestByte != 0) { // need to seek \n        final long filePointer = in.getFilePointer();\n        in.seek(filePointer + closestByte);\n      }\n      pending = in.readLong();\n      pendingBitsLeft = 64 - (int)(skip % 64);\n    }\n    position = ord-1;\n    return next();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/packed/PackedReaderIterator#advance(int).mjava","pathOld":"/dev/null","sourceNew":"  public long advance(final int ord) throws IOException{\n    assert ord < valueCount : \"ord must be less than valueCount\";\n    assert ord > position : \"ord must be greater than the current position\";\n    final long bits = (long) bitsPerValue;\n    final int posToSkip = ord - 1 - position;\n    final long bitsToSkip = (bits * (long)posToSkip);\n    if(bitsToSkip < pendingBitsLeft ){ // enough bits left - no seek required\n      pendingBitsLeft -= bitsToSkip;\n    }else {\n      final long skip = bitsToSkip-pendingBitsLeft;\n      final long closestByte = (skip >> 6) << 3;\n      if(closestByte != 0) { // need to seek \n        final long filePointer = in.getFilePointer();\n        in.seek(filePointer + closestByte);\n      }\n      pending = in.readLong();\n      pendingBitsLeft = 64 - (int)(skip % 64);\n    }\n    position = ord-1;\n    return next();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0150c6e116b24d66f02d63fcb0758f336e8791e2","date":1307283797,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/packed/PackedReaderIterator#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedReaderIterator#advance(int).mjava","sourceNew":"  public long advance(final int ord) throws IOException{\n    assert ord < valueCount : \"ord must be less than valueCount\";\n    assert ord > position : \"ord must be greater than the current position\";\n    final long bits = (long) bitsPerValue;\n    final int posToSkip = ord - 1 - position;\n    final long bitsToSkip = (bits * (long)posToSkip);\n    if (bitsToSkip < pendingBitsLeft) { // enough bits left - no seek required\n      pendingBitsLeft -= bitsToSkip;\n    } else {\n      final long skip = bitsToSkip-pendingBitsLeft;\n      final long closestByte = (skip >> 6) << 3;\n      if (closestByte != 0) { // need to seek \n        final long filePointer = in.getFilePointer();\n        in.seek(filePointer + closestByte);\n      }\n      pending = in.readLong();\n      pendingBitsLeft = 64 - (int)(skip % 64);\n    }\n    position = ord-1;\n    return next();\n  }\n\n","sourceOld":"  public long advance(final int ord) throws IOException{\n    assert ord < valueCount : \"ord must be less than valueCount\";\n    assert ord > position : \"ord must be greater than the current position\";\n    final long bits = (long) bitsPerValue;\n    final int posToSkip = ord - 1 - position;\n    final long bitsToSkip = (bits * (long)posToSkip);\n    if(bitsToSkip < pendingBitsLeft ){ // enough bits left - no seek required\n      pendingBitsLeft -= bitsToSkip;\n    }else {\n      final long skip = bitsToSkip-pendingBitsLeft;\n      final long closestByte = (skip >> 6) << 3;\n      if(closestByte != 0) { // need to seek \n        final long filePointer = in.getFilePointer();\n        in.seek(filePointer + closestByte);\n      }\n      pending = in.readLong();\n      pendingBitsLeft = 64 - (int)(skip % 64);\n    }\n    position = ord-1;\n    return next();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/packed/PackedReaderIterator#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedReaderIterator#advance(int).mjava","sourceNew":"  public long advance(final int ord) throws IOException{\n    assert ord < valueCount : \"ord must be less than valueCount\";\n    assert ord > position : \"ord must be greater than the current position\";\n    final long bits = (long) bitsPerValue;\n    final int posToSkip = ord - 1 - position;\n    final long bitsToSkip = (bits * (long)posToSkip);\n    if (bitsToSkip < pendingBitsLeft) { // enough bits left - no seek required\n      pendingBitsLeft -= bitsToSkip;\n    } else {\n      final long skip = bitsToSkip-pendingBitsLeft;\n      final long closestByte = (skip >> 6) << 3;\n      if (closestByte != 0) { // need to seek \n        final long filePointer = in.getFilePointer();\n        in.seek(filePointer + closestByte);\n      }\n      pending = in.readLong();\n      pendingBitsLeft = 64 - (int)(skip % 64);\n    }\n    position = ord-1;\n    return next();\n  }\n\n","sourceOld":"  public long advance(final int ord) throws IOException{\n    assert ord < valueCount : \"ord must be less than valueCount\";\n    assert ord > position : \"ord must be greater than the current position\";\n    final long bits = (long) bitsPerValue;\n    final int posToSkip = ord - 1 - position;\n    final long bitsToSkip = (bits * (long)posToSkip);\n    if(bitsToSkip < pendingBitsLeft ){ // enough bits left - no seek required\n      pendingBitsLeft -= bitsToSkip;\n    }else {\n      final long skip = bitsToSkip-pendingBitsLeft;\n      final long closestByte = (skip >> 6) << 3;\n      if(closestByte != 0) { // need to seek \n        final long filePointer = in.getFilePointer();\n        in.seek(filePointer + closestByte);\n      }\n      pending = in.readLong();\n      pendingBitsLeft = 64 - (int)(skip % 64);\n    }\n    position = ord-1;\n    return next();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/packed/PackedReaderIterator#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedReaderIterator#advance(int).mjava","sourceNew":"  public long advance(final int ord) throws IOException{\n    assert ord < valueCount : \"ord must be less than valueCount\";\n    assert ord > position : \"ord must be greater than the current position\";\n    final long bits = (long) bitsPerValue;\n    final int posToSkip = ord - 1 - position;\n    final long bitsToSkip = (bits * (long)posToSkip);\n    if (bitsToSkip < pendingBitsLeft) { // enough bits left - no seek required\n      pendingBitsLeft -= bitsToSkip;\n    } else {\n      final long skip = bitsToSkip-pendingBitsLeft;\n      final long closestByte = (skip >> 6) << 3;\n      if (closestByte != 0) { // need to seek \n        final long filePointer = in.getFilePointer();\n        in.seek(filePointer + closestByte);\n      }\n      pending = in.readLong();\n      pendingBitsLeft = 64 - (int)(skip % 64);\n    }\n    position = ord-1;\n    return next();\n  }\n\n","sourceOld":"  public long advance(final int ord) throws IOException{\n    assert ord < valueCount : \"ord must be less than valueCount\";\n    assert ord > position : \"ord must be greater than the current position\";\n    final long bits = (long) bitsPerValue;\n    final int posToSkip = ord - 1 - position;\n    final long bitsToSkip = (bits * (long)posToSkip);\n    if(bitsToSkip < pendingBitsLeft ){ // enough bits left - no seek required\n      pendingBitsLeft -= bitsToSkip;\n    }else {\n      final long skip = bitsToSkip-pendingBitsLeft;\n      final long closestByte = (skip >> 6) << 3;\n      if(closestByte != 0) { // need to seek \n        final long filePointer = in.getFilePointer();\n        in.seek(filePointer + closestByte);\n      }\n      pending = in.readLong();\n      pendingBitsLeft = 64 - (int)(skip % 64);\n    }\n    position = ord-1;\n    return next();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/packed/PackedReaderIterator#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedReaderIterator#advance(int).mjava","sourceNew":"  public long advance(final int ord) throws IOException{\n    assert ord < valueCount : \"ord must be less than valueCount\";\n    assert ord > position : \"ord must be greater than the current position\";\n    final long bits = (long) bitsPerValue;\n    final int posToSkip = ord - 1 - position;\n    final long bitsToSkip = (bits * (long)posToSkip);\n    if (bitsToSkip < pendingBitsLeft) { // enough bits left - no seek required\n      pendingBitsLeft -= bitsToSkip;\n    } else {\n      final long skip = bitsToSkip-pendingBitsLeft;\n      final long closestByte = (skip >> 6) << 3;\n      if (closestByte != 0) { // need to seek \n        final long filePointer = in.getFilePointer();\n        in.seek(filePointer + closestByte);\n      }\n      pending = in.readLong();\n      pendingBitsLeft = 64 - (int)(skip % 64);\n    }\n    position = ord-1;\n    return currentValue = next();\n  }\n\n","sourceOld":"  public long advance(final int ord) throws IOException{\n    assert ord < valueCount : \"ord must be less than valueCount\";\n    assert ord > position : \"ord must be greater than the current position\";\n    final long bits = (long) bitsPerValue;\n    final int posToSkip = ord - 1 - position;\n    final long bitsToSkip = (bits * (long)posToSkip);\n    if (bitsToSkip < pendingBitsLeft) { // enough bits left - no seek required\n      pendingBitsLeft -= bitsToSkip;\n    } else {\n      final long skip = bitsToSkip-pendingBitsLeft;\n      final long closestByte = (skip >> 6) << 3;\n      if (closestByte != 0) { // need to seek \n        final long filePointer = in.getFilePointer();\n        in.seek(filePointer + closestByte);\n      }\n      pending = in.readLong();\n      pendingBitsLeft = 64 - (int)(skip % 64);\n    }\n    position = ord-1;\n    return next();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb","date":1320691430,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/packed/PackedReaderIterator#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedReaderIterator#advance(int).mjava","sourceNew":"  public long advance(final int ord) throws IOException{\n    assert ord < valueCount : \"ord must be less than valueCount\";\n    assert ord > position : \"ord must be greater than the current position\";\n    final long bits = (long) bitsPerValue;\n    final int posToSkip = ord - 1 - position;\n    final long bitsToSkip = (bits * (long)posToSkip);\n    if (bitsToSkip < pendingBitsLeft) { // enough bits left - no seek required\n      pendingBitsLeft -= bitsToSkip;\n    } else {\n      final long skip = bitsToSkip-pendingBitsLeft;\n      final long closestByte = (skip >> 6) << 3;\n      if (closestByte != 0) { // need to seek \n        final long filePointer = in.getFilePointer();\n        in.seek(filePointer + closestByte);\n      }\n      pending = in.readLong();\n      pendingBitsLeft = 64 - (int)(skip % 64);\n    }\n    position = ord-1;\n    return next();\n  }\n\n","sourceOld":"  public long advance(final int ord) throws IOException{\n    assert ord < valueCount : \"ord must be less than valueCount\";\n    assert ord > position : \"ord must be greater than the current position\";\n    final long bits = (long) bitsPerValue;\n    final int posToSkip = ord - 1 - position;\n    final long bitsToSkip = (bits * (long)posToSkip);\n    if (bitsToSkip < pendingBitsLeft) { // enough bits left - no seek required\n      pendingBitsLeft -= bitsToSkip;\n    } else {\n      final long skip = bitsToSkip-pendingBitsLeft;\n      final long closestByte = (skip >> 6) << 3;\n      if (closestByte != 0) { // need to seek \n        final long filePointer = in.getFilePointer();\n        in.seek(filePointer + closestByte);\n      }\n      pending = in.readLong();\n      pendingBitsLeft = 64 - (int)(skip % 64);\n    }\n    position = ord-1;\n    return currentValue = next();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedReaderIterator#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedReaderIterator#advance(int).mjava","sourceNew":"  public long advance(final int ord) throws IOException{\n    assert ord < valueCount : \"ord must be less than valueCount\";\n    assert ord > position : \"ord must be greater than the current position\";\n    final long bits = (long) bitsPerValue;\n    final int posToSkip = ord - 1 - position;\n    final long bitsToSkip = (bits * (long)posToSkip);\n    if (bitsToSkip < pendingBitsLeft) { // enough bits left - no seek required\n      pendingBitsLeft -= bitsToSkip;\n    } else {\n      final long skip = bitsToSkip-pendingBitsLeft;\n      final long closestByte = (skip >> 6) << 3;\n      if (closestByte != 0) { // need to seek \n        final long filePointer = in.getFilePointer();\n        in.seek(filePointer + closestByte);\n      }\n      pending = in.readLong();\n      pendingBitsLeft = 64 - (int)(skip % 64);\n    }\n    position = ord-1;\n    return next();\n  }\n\n","sourceOld":"  public long advance(final int ord) throws IOException{\n    assert ord < valueCount : \"ord must be less than valueCount\";\n    assert ord > position : \"ord must be greater than the current position\";\n    final long bits = (long) bitsPerValue;\n    final int posToSkip = ord - 1 - position;\n    final long bitsToSkip = (bits * (long)posToSkip);\n    if (bitsToSkip < pendingBitsLeft) { // enough bits left - no seek required\n      pendingBitsLeft -= bitsToSkip;\n    } else {\n      final long skip = bitsToSkip-pendingBitsLeft;\n      final long closestByte = (skip >> 6) << 3;\n      if (closestByte != 0) { // need to seek \n        final long filePointer = in.getFilePointer();\n        in.seek(filePointer + closestByte);\n      }\n      pending = in.readLong();\n      pendingBitsLeft = 64 - (int)(skip % 64);\n    }\n    position = ord-1;\n    return next();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["56b73889eb1d01f9e6df4acab29810fb701abf0d","2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["56b73889eb1d01f9e6df4acab29810fb701abf0d","0150c6e116b24d66f02d63fcb0758f336e8791e2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb"],"0150c6e116b24d66f02d63fcb0758f336e8791e2":["56b73889eb1d01f9e6df4acab29810fb701abf0d"],"142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb":["e128967bca58657bc0039d4bfe631e63e81f1977"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56b73889eb1d01f9e6df4acab29810fb701abf0d"],"e128967bca58657bc0039d4bfe631e63e81f1977":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"56b73889eb1d01f9e6df4acab29810fb701abf0d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","e128967bca58657bc0039d4bfe631e63e81f1977"],"0150c6e116b24d66f02d63fcb0758f336e8791e2":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56b73889eb1d01f9e6df4acab29810fb701abf0d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"e128967bca58657bc0039d4bfe631e63e81f1977":["142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb"],"56b73889eb1d01f9e6df4acab29810fb701abf0d":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","0150c6e116b24d66f02d63fcb0758f336e8791e2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}