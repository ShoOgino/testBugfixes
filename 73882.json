{"path":"lucene/src/java/org/apache/lucene/index/IndexFileNames#segmentFileName(String,String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileNames#segmentFileName(String,String).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileNames#segmentFileName(String,String).mjava","sourceNew":"  /**\n   * Returns the file name that matches the given segment name and extension.\n   * This method takes care to return the full file name in the form\n   * &lt;segmentName&gt;.&lt;ext&gt;, therefore you don't need to prefix the\n   * extension with a '.'.<br>\n   * <b>NOTE:</b> .&lt;ext&gt; is added to the result file name only if\n   * <code>ext</code> is not empty.\n   */\n  public static final String segmentFileName(String segmentName, String ext) {\n    if (ext.length() > 0) {\n      return new StringBuilder(segmentName.length() + 1 + ext.length()).append(\n          segmentName).append('.').append(ext).toString();\n    } else {\n      return segmentName;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the file name that matches the given segment name and extension.\n   * This method takes care to return the full file name in the form\n   * &lt;segmentName&gt;.&lt;ext&gt;, therefore you don't need to prefix the\n   * extension with a '.'.<br>\n   * <b>NOTE:</b> .&lt;ext&gt; is added to the result file name only if\n   * <code>ext</code> is not empty.\n   */\n  public static final String segmentFileName(String segmentName, String ext) {\n    if (ext.length() > 0) {\n      return new StringBuilder(segmentName.length() + 1 + ext.length()).append(\n          segmentName).append('.').append(ext).toString();\n    } else {\n      return segmentName;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileNames#segmentFileName(String,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileNames#segmentFileName(String,String).mjava","sourceNew":"  /**\n   * Returns the file name that matches the given segment name and extension.\n   * This method takes care to return the full file name in the form\n   * &lt;segmentName&gt;.&lt;ext&gt;, therefore you don't need to prefix the\n   * extension with a '.'.<br>\n   * <b>NOTE:</b> .&lt;ext&gt; is added to the result file name only if\n   * <code>ext</code> is not empty.\n   */\n  public static final String segmentFileName(String segmentName, String ext) {\n    if (ext.length() > 0) {\n      assert !ext.startsWith(\".\");\n      return new StringBuilder(segmentName.length() + 1 + ext.length()).append(\n          segmentName).append('.').append(ext).toString();\n    } else {\n      return segmentName;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the file name that matches the given segment name and extension.\n   * This method takes care to return the full file name in the form\n   * &lt;segmentName&gt;.&lt;ext&gt;, therefore you don't need to prefix the\n   * extension with a '.'.<br>\n   * <b>NOTE:</b> .&lt;ext&gt; is added to the result file name only if\n   * <code>ext</code> is not empty.\n   */\n  public static final String segmentFileName(String segmentName, String ext) {\n    if (ext.length() > 0) {\n      return new StringBuilder(segmentName.length() + 1 + ext.length()).append(\n          segmentName).append('.').append(ext).toString();\n    } else {\n      return segmentName;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileNames#segmentFileName(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the file name that matches the given segment name and extension.\n   * This method takes care to return the full file name in the form\n   * &lt;segmentName&gt;.&lt;ext&gt;, therefore you don't need to prefix the\n   * extension with a '.'.<br>\n   * <b>NOTE:</b> .&lt;ext&gt; is added to the result file name only if\n   * <code>ext</code> is not empty.\n   */\n  public static final String segmentFileName(String segmentName, String ext) {\n    if (ext.length() > 0) {\n      assert !ext.startsWith(\".\");\n      return new StringBuilder(segmentName.length() + 1 + ext.length()).append(\n          segmentName).append('.').append(ext).toString();\n    } else {\n      return segmentName;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}