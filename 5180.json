{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#loadParams(Map).mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#loadParams(Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrStream#loadParams(Map).mjava","sourceNew":"  private SolrParams loadParams(Map params) throws IOException {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    if(params.containsKey(\"partitionKeys\")) {\n      if(!params.get(\"partitionKeys\").equals(\"none\")) {\n        String partitionFilter = getPartitionFilter();\n        solrParams.add(\"fq\", partitionFilter);\n      }\n    } else {\n      if(numWorkers > 1) {\n        throw new IOException(\"When numWorkers > 1 partitionKeys must be set. Set partitionKeys=none to send the entire stream to each worker.\");\n      }\n    }\n\n    Iterator<Map.Entry> it = params.entrySet().iterator();\n    while(it.hasNext()) {\n      Map.Entry entry = it.next();\n      solrParams.add((String)entry.getKey(), entry.getValue().toString());\n    }\n\n    return solrParams;\n  }\n\n","sourceOld":"  private SolrParams loadParams(Map params) throws IOException {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    if(params.containsKey(\"partitionKeys\")) {\n      if(!params.get(\"partitionKeys\").equals(\"none\")) {\n        String partitionFilter = getPartitionFilter();\n        solrParams.add(\"fq\", partitionFilter);\n      }\n    } else {\n      if(numWorkers > 1) {\n        throw new IOException(\"When numWorkers > 1 partitionKeys must be set. Set partitionKeys=none to send the entire stream to each worker.\");\n      }\n    }\n\n    Iterator<Map.Entry> it = params.entrySet().iterator();\n    while(it.hasNext()) {\n      Map.Entry entry = it.next();\n      solrParams.add((String)entry.getKey(), entry.getValue().toString());\n    }\n\n    return solrParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10b9c6c42133576daaccbd79bd04c88511b9caca","date":1455930223,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#loadParams(Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#loadParams(Map).mjava","sourceNew":"  private SolrParams loadParams(Map params) throws IOException {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    if(params.containsKey(\"partitionKeys\")) {\n      if(!params.get(\"partitionKeys\").equals(\"none\")) {\n        String partitionFilter = getPartitionFilter();\n        solrParams.add(\"fq\", partitionFilter);\n      }\n    } else {\n      if(numWorkers > 1) {\n        throw new IOException(\"When numWorkers > 1 partitionKeys must be set. Set partitionKeys=none to send the entire stream to each worker.\");\n      }\n    }\n\n    if(checkpoint > 0) {\n      solrParams.add(\"fq\", \"{!frange cost=100 incl=false l=\"+checkpoint+\"}_version_\");\n    }\n\n    Iterator<Map.Entry> it = params.entrySet().iterator();\n    while(it.hasNext()) {\n      Map.Entry entry = it.next();\n      solrParams.add((String)entry.getKey(), entry.getValue().toString());\n    }\n\n    return solrParams;\n  }\n\n","sourceOld":"  private SolrParams loadParams(Map params) throws IOException {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    if(params.containsKey(\"partitionKeys\")) {\n      if(!params.get(\"partitionKeys\").equals(\"none\")) {\n        String partitionFilter = getPartitionFilter();\n        solrParams.add(\"fq\", partitionFilter);\n      }\n    } else {\n      if(numWorkers > 1) {\n        throw new IOException(\"When numWorkers > 1 partitionKeys must be set. Set partitionKeys=none to send the entire stream to each worker.\");\n      }\n    }\n\n    Iterator<Map.Entry> it = params.entrySet().iterator();\n    while(it.hasNext()) {\n      Map.Entry entry = it.next();\n      solrParams.add((String)entry.getKey(), entry.getValue().toString());\n    }\n\n    return solrParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#loadParams(SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#loadParams(Map).mjava","sourceNew":"  private SolrParams loadParams(SolrParams paramsIn) throws IOException {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams(paramsIn);\n    if (params.get(\"partitionKeys\") != null) {\n      if(!params.get(\"partitionKeys\").equals(\"none\")) {\n        String partitionFilter = getPartitionFilter();\n        solrParams.add(\"fq\", partitionFilter);\n      }\n    } else {\n      if(numWorkers > 1) {\n        throw new IOException(\"When numWorkers > 1 partitionKeys must be set. Set partitionKeys=none to send the entire stream to each worker.\");\n      }\n    }\n\n    if(checkpoint > 0) {\n      solrParams.add(\"fq\", \"{!frange cost=100 incl=false l=\"+checkpoint+\"}_version_\");\n    }\n\n    return solrParams;\n  }\n\n","sourceOld":"  private SolrParams loadParams(Map params) throws IOException {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    if(params.containsKey(\"partitionKeys\")) {\n      if(!params.get(\"partitionKeys\").equals(\"none\")) {\n        String partitionFilter = getPartitionFilter();\n        solrParams.add(\"fq\", partitionFilter);\n      }\n    } else {\n      if(numWorkers > 1) {\n        throw new IOException(\"When numWorkers > 1 partitionKeys must be set. Set partitionKeys=none to send the entire stream to each worker.\");\n      }\n    }\n\n    if(checkpoint > 0) {\n      solrParams.add(\"fq\", \"{!frange cost=100 incl=false l=\"+checkpoint+\"}_version_\");\n    }\n\n    Iterator<Map.Entry> it = params.entrySet().iterator();\n    while(it.hasNext()) {\n      Map.Entry entry = it.next();\n      solrParams.add((String)entry.getKey(), entry.getValue().toString());\n    }\n\n    return solrParams;\n  }\n\n","bugFix":null,"bugIntro":["85b7d92fa7b7dac117c267e0ad18c1f62df5a15c","85b7d92fa7b7dac117c267e0ad18c1f62df5a15c","85b7d92fa7b7dac117c267e0ad18c1f62df5a15c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#loadParams(SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#loadParams(Map).mjava","sourceNew":"  private SolrParams loadParams(SolrParams paramsIn) throws IOException {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams(paramsIn);\n    if (params.get(\"partitionKeys\") != null) {\n      if(!params.get(\"partitionKeys\").equals(\"none\")) {\n        String partitionFilter = getPartitionFilter();\n        solrParams.add(\"fq\", partitionFilter);\n      }\n    } else {\n      if(numWorkers > 1) {\n        throw new IOException(\"When numWorkers > 1 partitionKeys must be set. Set partitionKeys=none to send the entire stream to each worker.\");\n      }\n    }\n\n    if(checkpoint > 0) {\n      solrParams.add(\"fq\", \"{!frange cost=100 incl=false l=\"+checkpoint+\"}_version_\");\n    }\n\n    return solrParams;\n  }\n\n","sourceOld":"  private SolrParams loadParams(Map params) throws IOException {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    if(params.containsKey(\"partitionKeys\")) {\n      if(!params.get(\"partitionKeys\").equals(\"none\")) {\n        String partitionFilter = getPartitionFilter();\n        solrParams.add(\"fq\", partitionFilter);\n      }\n    } else {\n      if(numWorkers > 1) {\n        throw new IOException(\"When numWorkers > 1 partitionKeys must be set. Set partitionKeys=none to send the entire stream to each worker.\");\n      }\n    }\n\n    if(checkpoint > 0) {\n      solrParams.add(\"fq\", \"{!frange cost=100 incl=false l=\"+checkpoint+\"}_version_\");\n    }\n\n    Iterator<Map.Entry> it = params.entrySet().iterator();\n    while(it.hasNext()) {\n      Map.Entry entry = it.next();\n      solrParams.add((String)entry.getKey(), entry.getValue().toString());\n    }\n\n    return solrParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#loadParams(SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#loadParams(Map).mjava","sourceNew":"  private SolrParams loadParams(SolrParams paramsIn) throws IOException {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams(paramsIn);\n    if (params.get(\"partitionKeys\") != null) {\n      if(!params.get(\"partitionKeys\").equals(\"none\")) {\n        String partitionFilter = getPartitionFilter();\n        solrParams.add(\"fq\", partitionFilter);\n      }\n    } else {\n      if(numWorkers > 1) {\n        throw new IOException(\"When numWorkers > 1 partitionKeys must be set. Set partitionKeys=none to send the entire stream to each worker.\");\n      }\n    }\n\n    if(checkpoint > 0) {\n      solrParams.add(\"fq\", \"{!frange cost=100 incl=false l=\"+checkpoint+\"}_version_\");\n    }\n\n    return solrParams;\n  }\n\n","sourceOld":"  private SolrParams loadParams(Map params) throws IOException {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    if(params.containsKey(\"partitionKeys\")) {\n      if(!params.get(\"partitionKeys\").equals(\"none\")) {\n        String partitionFilter = getPartitionFilter();\n        solrParams.add(\"fq\", partitionFilter);\n      }\n    } else {\n      if(numWorkers > 1) {\n        throw new IOException(\"When numWorkers > 1 partitionKeys must be set. Set partitionKeys=none to send the entire stream to each worker.\");\n      }\n    }\n\n    if(checkpoint > 0) {\n      solrParams.add(\"fq\", \"{!frange cost=100 incl=false l=\"+checkpoint+\"}_version_\");\n    }\n\n    Iterator<Map.Entry> it = params.entrySet().iterator();\n    while(it.hasNext()) {\n      Map.Entry entry = it.next();\n      solrParams.add((String)entry.getKey(), entry.getValue().toString());\n    }\n\n    return solrParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#loadParams(Map).mjava","sourceNew":null,"sourceOld":"  private SolrParams loadParams(Map params) throws IOException {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    if(params.containsKey(\"partitionKeys\")) {\n      if(!params.get(\"partitionKeys\").equals(\"none\")) {\n        String partitionFilter = getPartitionFilter();\n        solrParams.add(\"fq\", partitionFilter);\n      }\n    } else {\n      if(numWorkers > 1) {\n        throw new IOException(\"When numWorkers > 1 partitionKeys must be set. Set partitionKeys=none to send the entire stream to each worker.\");\n      }\n    }\n\n    if(checkpoint > 0) {\n      solrParams.add(\"fq\", \"{!frange cost=100 incl=false l=\"+checkpoint+\"}_version_\");\n    }\n\n    Iterator<Map.Entry> it = params.entrySet().iterator();\n    while(it.hasNext()) {\n      Map.Entry entry = it.next();\n      solrParams.add((String)entry.getKey(), entry.getValue().toString());\n    }\n\n    return solrParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"10b9c6c42133576daaccbd79bd04c88511b9caca":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":["10b9c6c42133576daaccbd79bd04c88511b9caca","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["10b9c6c42133576daaccbd79bd04c88511b9caca","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["10b9c6c42133576daaccbd79bd04c88511b9caca","826d15444ddf61716dc768c229cd54b2c2ccce1c"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"10b9c6c42133576daaccbd79bd04c88511b9caca":["e66a459d38c1c4a2f97128433dab546f683a9fed","826d15444ddf61716dc768c229cd54b2c2ccce1c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}