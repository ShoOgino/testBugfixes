{"path":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,StoredDocument,String).mjava","commits":[{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,StoredDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,Document,String).mjava","sourceNew":"  private void alternateField( NamedList docSummaries, SolrParams params, StoredDocument doc, String fieldName ){\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    if (alternateField != null && alternateField.length() > 0) {\n      StorableField[] docFields = doc.getFields(alternateField);\n      List<String> listFields = new ArrayList<String>();\n      for (StorableField field : docFields) {\n        if (field.binaryValue() == null)\n          listFields.add(field.stringValue());\n      }\n\n      String[] altTexts = listFields.toArray(new String[listFields.size()]);\n\n      if (altTexts != null && altTexts.length > 0){\n        Encoder encoder = getEncoder(fieldName, params);\n        int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH,0);\n        List<String> altList = new ArrayList<String>();\n        int len = 0;\n        for( String altText: altTexts ){\n          if( alternateFieldLen <= 0 ){\n            altList.add(encoder.encodeText(altText));\n          }\n          else{\n            altList.add( len + altText.length() > alternateFieldLen ?\n                encoder.encodeText(new String(altText.substring( 0, alternateFieldLen - len ))) :\n                encoder.encodeText(altText) );\n            len += altText.length();\n            if( len >= alternateFieldLen ) break;\n          }\n        }\n        docSummaries.add(fieldName, altList);\n      }\n    }\n  }\n\n","sourceOld":"  private void alternateField( NamedList docSummaries, SolrParams params, Document doc, String fieldName ){\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    if (alternateField != null && alternateField.length() > 0) {\n      IndexableField[] docFields = doc.getFields(alternateField);\n      List<String> listFields = new ArrayList<String>();\n      for (IndexableField field : docFields) {\n        if (field.binaryValue() == null)\n          listFields.add(field.stringValue());\n      }\n\n      String[] altTexts = listFields.toArray(new String[listFields.size()]);\n\n      if (altTexts != null && altTexts.length > 0){\n        Encoder encoder = getEncoder(fieldName, params);\n        int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH,0);\n        List<String> altList = new ArrayList<String>();\n        int len = 0;\n        for( String altText: altTexts ){\n          if( alternateFieldLen <= 0 ){\n            altList.add(encoder.encodeText(altText));\n          }\n          else{\n            altList.add( len + altText.length() > alternateFieldLen ?\n                encoder.encodeText(new String(altText.substring( 0, alternateFieldLen - len ))) :\n                encoder.encodeText(altText) );\n            len += altText.length();\n            if( len >= alternateFieldLen ) break;\n          }\n        }\n        docSummaries.add(fieldName, altList);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,StoredDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,Document,String).mjava","sourceNew":"  private void alternateField( NamedList docSummaries, SolrParams params, StoredDocument doc, String fieldName ){\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    if (alternateField != null && alternateField.length() > 0) {\n      StorableField[] docFields = doc.getFields(alternateField);\n      List<String> listFields = new ArrayList<String>();\n      for (StorableField field : docFields) {\n        if (field.binaryValue() == null)\n          listFields.add(field.stringValue());\n      }\n\n      String[] altTexts = listFields.toArray(new String[listFields.size()]);\n\n      if (altTexts != null && altTexts.length > 0){\n        Encoder encoder = getEncoder(fieldName, params);\n        int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH,0);\n        List<String> altList = new ArrayList<String>();\n        int len = 0;\n        for( String altText: altTexts ){\n          if( alternateFieldLen <= 0 ){\n            altList.add(encoder.encodeText(altText));\n          }\n          else{\n            altList.add( len + altText.length() > alternateFieldLen ?\n                encoder.encodeText(new String(altText.substring( 0, alternateFieldLen - len ))) :\n                encoder.encodeText(altText) );\n            len += altText.length();\n            if( len >= alternateFieldLen ) break;\n          }\n        }\n        docSummaries.add(fieldName, altList);\n      }\n    }\n  }\n\n","sourceOld":"  private void alternateField( NamedList docSummaries, SolrParams params, Document doc, String fieldName ){\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    if (alternateField != null && alternateField.length() > 0) {\n      IndexableField[] docFields = doc.getFields(alternateField);\n      List<String> listFields = new ArrayList<String>();\n      for (IndexableField field : docFields) {\n        if (field.binaryValue() == null)\n          listFields.add(field.stringValue());\n      }\n\n      String[] altTexts = listFields.toArray(new String[listFields.size()]);\n\n      if (altTexts != null && altTexts.length > 0){\n        Encoder encoder = getEncoder(fieldName, params);\n        int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH,0);\n        List<String> altList = new ArrayList<String>();\n        int len = 0;\n        for( String altText: altTexts ){\n          if( alternateFieldLen <= 0 ){\n            altList.add(encoder.encodeText(altText));\n          }\n          else{\n            altList.add( len + altText.length() > alternateFieldLen ?\n                encoder.encodeText(new String(altText.substring( 0, alternateFieldLen - len ))) :\n                encoder.encodeText(altText) );\n            len += altText.length();\n            if( len >= alternateFieldLen ) break;\n          }\n        }\n        docSummaries.add(fieldName, altList);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75751d463aad19dc07165ab34691da32dd30a348","date":1388739899,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,StoredDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,StoredDocument,String).mjava","sourceNew":"  private void alternateField( NamedList docSummaries, SolrParams params, StoredDocument doc, String fieldName ){\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    if (alternateField != null && alternateField.length() > 0) {\n      StorableField[] docFields = doc.getFields(alternateField);\n      if (docFields.length == 0) {\n        // The alternate field did not exist, treat the original field as fallback instead\n        docFields = doc.getFields(fieldName);\n      }\n      List<String> listFields = new ArrayList<String>();\n      for (StorableField field : docFields) {\n        if (field.binaryValue() == null)\n          listFields.add(field.stringValue());\n      }\n\n      String[] altTexts = listFields.toArray(new String[listFields.size()]);\n\n      if (altTexts != null && altTexts.length > 0){\n        Encoder encoder = getEncoder(fieldName, params);\n        int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH,0);\n        List<String> altList = new ArrayList<String>();\n        int len = 0;\n        for( String altText: altTexts ){\n          if( alternateFieldLen <= 0 ){\n            altList.add(encoder.encodeText(altText));\n          }\n          else{\n            altList.add( len + altText.length() > alternateFieldLen ?\n                encoder.encodeText(new String(altText.substring( 0, alternateFieldLen - len ))) :\n                encoder.encodeText(altText) );\n            len += altText.length();\n            if( len >= alternateFieldLen ) break;\n          }\n        }\n        docSummaries.add(fieldName, altList);\n      }\n    }\n  }\n\n","sourceOld":"  private void alternateField( NamedList docSummaries, SolrParams params, StoredDocument doc, String fieldName ){\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    if (alternateField != null && alternateField.length() > 0) {\n      StorableField[] docFields = doc.getFields(alternateField);\n      List<String> listFields = new ArrayList<String>();\n      for (StorableField field : docFields) {\n        if (field.binaryValue() == null)\n          listFields.add(field.stringValue());\n      }\n\n      String[] altTexts = listFields.toArray(new String[listFields.size()]);\n\n      if (altTexts != null && altTexts.length > 0){\n        Encoder encoder = getEncoder(fieldName, params);\n        int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH,0);\n        List<String> altList = new ArrayList<String>();\n        int len = 0;\n        for( String altText: altTexts ){\n          if( alternateFieldLen <= 0 ){\n            altList.add(encoder.encodeText(altText));\n          }\n          else{\n            altList.add( len + altText.length() > alternateFieldLen ?\n                encoder.encodeText(new String(altText.substring( 0, alternateFieldLen - len ))) :\n                encoder.encodeText(altText) );\n            len += altText.length();\n            if( len >= alternateFieldLen ) break;\n          }\n        }\n        docSummaries.add(fieldName, altList);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,StoredDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,StoredDocument,String).mjava","sourceNew":"  private void alternateField( NamedList docSummaries, SolrParams params, StoredDocument doc, String fieldName ){\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    if (alternateField != null && alternateField.length() > 0) {\n      StorableField[] docFields = doc.getFields(alternateField);\n      if (docFields.length == 0) {\n        // The alternate field did not exist, treat the original field as fallback instead\n        docFields = doc.getFields(fieldName);\n      }\n      List<String> listFields = new ArrayList<>();\n      for (StorableField field : docFields) {\n        if (field.binaryValue() == null)\n          listFields.add(field.stringValue());\n      }\n\n      String[] altTexts = listFields.toArray(new String[listFields.size()]);\n\n      if (altTexts != null && altTexts.length > 0){\n        Encoder encoder = getEncoder(fieldName, params);\n        int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH,0);\n        List<String> altList = new ArrayList<>();\n        int len = 0;\n        for( String altText: altTexts ){\n          if( alternateFieldLen <= 0 ){\n            altList.add(encoder.encodeText(altText));\n          }\n          else{\n            altList.add( len + altText.length() > alternateFieldLen ?\n                encoder.encodeText(new String(altText.substring( 0, alternateFieldLen - len ))) :\n                encoder.encodeText(altText) );\n            len += altText.length();\n            if( len >= alternateFieldLen ) break;\n          }\n        }\n        docSummaries.add(fieldName, altList);\n      }\n    }\n  }\n\n","sourceOld":"  private void alternateField( NamedList docSummaries, SolrParams params, StoredDocument doc, String fieldName ){\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    if (alternateField != null && alternateField.length() > 0) {\n      StorableField[] docFields = doc.getFields(alternateField);\n      if (docFields.length == 0) {\n        // The alternate field did not exist, treat the original field as fallback instead\n        docFields = doc.getFields(fieldName);\n      }\n      List<String> listFields = new ArrayList<String>();\n      for (StorableField field : docFields) {\n        if (field.binaryValue() == null)\n          listFields.add(field.stringValue());\n      }\n\n      String[] altTexts = listFields.toArray(new String[listFields.size()]);\n\n      if (altTexts != null && altTexts.length > 0){\n        Encoder encoder = getEncoder(fieldName, params);\n        int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH,0);\n        List<String> altList = new ArrayList<String>();\n        int len = 0;\n        for( String altText: altTexts ){\n          if( alternateFieldLen <= 0 ){\n            altList.add(encoder.encodeText(altText));\n          }\n          else{\n            altList.add( len + altText.length() > alternateFieldLen ?\n                encoder.encodeText(new String(altText.substring( 0, alternateFieldLen - len ))) :\n                encoder.encodeText(altText) );\n            len += altText.length();\n            if( len >= alternateFieldLen ) break;\n          }\n        }\n        docSummaries.add(fieldName, altList);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cad4d876350c7790594c78dc3c3fb1718bf06dc7","date":1417321437,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,StoredDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,StoredDocument,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void alternateField( NamedList docSummaries, SolrParams params, StoredDocument doc, String fieldName ){\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    if (alternateField != null && alternateField.length() > 0) {\n      StorableField[] docFields = doc.getFields(alternateField);\n      if (docFields.length == 0) {\n        // The alternate field did not exist, treat the original field as fallback instead\n        docFields = doc.getFields(fieldName);\n      }\n      List<String> listFields = new ArrayList<>();\n      for (StorableField field : docFields) {\n        if (field.binaryValue() == null)\n          listFields.add(field.stringValue());\n      }\n\n      String[] altTexts = listFields.toArray(new String[listFields.size()]);\n\n      if (altTexts.length > 0){\n        Encoder encoder = getEncoder(fieldName, params);\n        int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH,0);\n        List<String> altList = new ArrayList<>();\n        int len = 0;\n        for( String altText: altTexts ){\n          if( alternateFieldLen <= 0 ){\n            altList.add(encoder.encodeText(altText));\n          }\n          else{\n            //note: seemingly redundant new String(...) releases memory to the larger text\n            altList.add( len + altText.length() > alternateFieldLen ?\n                encoder.encodeText(new String(altText.substring( 0, alternateFieldLen - len ))) :\n                encoder.encodeText(altText) );\n            len += altText.length();\n            if( len >= alternateFieldLen ) break;\n          }\n        }\n        docSummaries.add(fieldName, altList);\n      }\n    }\n  }\n\n","sourceOld":"  private void alternateField( NamedList docSummaries, SolrParams params, StoredDocument doc, String fieldName ){\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    if (alternateField != null && alternateField.length() > 0) {\n      StorableField[] docFields = doc.getFields(alternateField);\n      if (docFields.length == 0) {\n        // The alternate field did not exist, treat the original field as fallback instead\n        docFields = doc.getFields(fieldName);\n      }\n      List<String> listFields = new ArrayList<>();\n      for (StorableField field : docFields) {\n        if (field.binaryValue() == null)\n          listFields.add(field.stringValue());\n      }\n\n      String[] altTexts = listFields.toArray(new String[listFields.size()]);\n\n      if (altTexts != null && altTexts.length > 0){\n        Encoder encoder = getEncoder(fieldName, params);\n        int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH,0);\n        List<String> altList = new ArrayList<>();\n        int len = 0;\n        for( String altText: altTexts ){\n          if( alternateFieldLen <= 0 ){\n            altList.add(encoder.encodeText(altText));\n          }\n          else{\n            altList.add( len + altText.length() > alternateFieldLen ?\n                encoder.encodeText(new String(altText.substring( 0, alternateFieldLen - len ))) :\n                encoder.encodeText(altText) );\n            len += altText.length();\n            if( len >= alternateFieldLen ) break;\n          }\n        }\n        docSummaries.add(fieldName, altList);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12aef50f649e6f5f9689970748f96e3f1ca6104e","date":1428932135,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,StoredDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,StoredDocument,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected void alternateField( NamedList docSummaries, SolrParams params, StoredDocument doc, String fieldName ){\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    if (alternateField != null && alternateField.length() > 0) {\n      StorableField[] docFields = doc.getFields(alternateField);\n      if (docFields.length == 0) {\n        // The alternate field did not exist, treat the original field as fallback instead\n        docFields = doc.getFields(fieldName);\n      }\n      List<String> listFields = new ArrayList<>();\n      for (StorableField field : docFields) {\n        if (field.binaryValue() == null)\n          listFields.add(field.stringValue());\n      }\n\n      String[] altTexts = listFields.toArray(new String[listFields.size()]);\n\n      if (altTexts.length > 0){\n        Encoder encoder = getEncoder(fieldName, params);\n        int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH,0);\n        List<String> altList = new ArrayList<>();\n        int len = 0;\n        for( String altText: altTexts ){\n          if( alternateFieldLen <= 0 ){\n            altList.add(encoder.encodeText(altText));\n          }\n          else{\n            //note: seemingly redundant new String(...) releases memory to the larger text\n            altList.add( len + altText.length() > alternateFieldLen ?\n                encoder.encodeText(new String(altText.substring( 0, alternateFieldLen - len ))) :\n                encoder.encodeText(altText) );\n            len += altText.length();\n            if( len >= alternateFieldLen ) break;\n          }\n        }\n        docSummaries.add(fieldName, altList);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void alternateField( NamedList docSummaries, SolrParams params, StoredDocument doc, String fieldName ){\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    if (alternateField != null && alternateField.length() > 0) {\n      StorableField[] docFields = doc.getFields(alternateField);\n      if (docFields.length == 0) {\n        // The alternate field did not exist, treat the original field as fallback instead\n        docFields = doc.getFields(fieldName);\n      }\n      List<String> listFields = new ArrayList<>();\n      for (StorableField field : docFields) {\n        if (field.binaryValue() == null)\n          listFields.add(field.stringValue());\n      }\n\n      String[] altTexts = listFields.toArray(new String[listFields.size()]);\n\n      if (altTexts.length > 0){\n        Encoder encoder = getEncoder(fieldName, params);\n        int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH,0);\n        List<String> altList = new ArrayList<>();\n        int len = 0;\n        for( String altText: altTexts ){\n          if( alternateFieldLen <= 0 ){\n            altList.add(encoder.encodeText(altText));\n          }\n          else{\n            //note: seemingly redundant new String(...) releases memory to the larger text\n            altList.add( len + altText.length() > alternateFieldLen ?\n                encoder.encodeText(new String(altText.substring( 0, alternateFieldLen - len ))) :\n                encoder.encodeText(altText) );\n            len += altText.length();\n            if( len >= alternateFieldLen ) break;\n          }\n        }\n        docSummaries.add(fieldName, altList);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ba83a7997a13459d756c436cc76ee2570d2128f","date":1432215022,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(NamedList,SolrParams,StoredDocument,String).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected void alternateField( NamedList docSummaries, SolrParams params, StoredDocument doc, String fieldName ){\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    if (alternateField != null && alternateField.length() > 0) {\n      StorableField[] docFields = doc.getFields(alternateField);\n      if (docFields.length == 0) {\n        // The alternate field did not exist, treat the original field as fallback instead\n        docFields = doc.getFields(fieldName);\n      }\n      List<String> listFields = new ArrayList<>();\n      for (StorableField field : docFields) {\n        if (field.binaryValue() == null)\n          listFields.add(field.stringValue());\n      }\n\n      String[] altTexts = listFields.toArray(new String[listFields.size()]);\n\n      if (altTexts.length > 0){\n        Encoder encoder = getEncoder(fieldName, params);\n        int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH,0);\n        List<String> altList = new ArrayList<>();\n        int len = 0;\n        for( String altText: altTexts ){\n          if( alternateFieldLen <= 0 ){\n            altList.add(encoder.encodeText(altText));\n          }\n          else{\n            //note: seemingly redundant new String(...) releases memory to the larger text\n            altList.add( len + altText.length() > alternateFieldLen ?\n                encoder.encodeText(new String(altText.substring( 0, alternateFieldLen - len ))) :\n                encoder.encodeText(altText) );\n            len += altText.length();\n            if( len >= alternateFieldLen ) break;\n          }\n        }\n        docSummaries.add(fieldName, altList);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["75751d463aad19dc07165ab34691da32dd30a348"],"1d028314cced5858683a1bb4741423d0f934257b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"cad4d876350c7790594c78dc3c3fb1718bf06dc7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"1ba83a7997a13459d756c436cc76ee2570d2128f":["12aef50f649e6f5f9689970748f96e3f1ca6104e"],"12aef50f649e6f5f9689970748f96e3f1ca6104e":["cad4d876350c7790594c78dc3c3fb1718bf06dc7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"75751d463aad19dc07165ab34691da32dd30a348":["1d028314cced5858683a1bb4741423d0f934257b"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1ba83a7997a13459d756c436cc76ee2570d2128f"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cad4d876350c7790594c78dc3c3fb1718bf06dc7"],"1d028314cced5858683a1bb4741423d0f934257b":["75751d463aad19dc07165ab34691da32dd30a348"],"cad4d876350c7790594c78dc3c3fb1718bf06dc7":["12aef50f649e6f5f9689970748f96e3f1ca6104e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"1ba83a7997a13459d756c436cc76ee2570d2128f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"12aef50f649e6f5f9689970748f96e3f1ca6104e":["1ba83a7997a13459d756c436cc76ee2570d2128f"],"75751d463aad19dc07165ab34691da32dd30a348":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}