{"path":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","commits":[{"id":"45ccb604e99f21f1c05722c0e28bcfa64b94a861","date":1423735816,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public SimScorer simScorer(SimWeight stats, LeafReaderContext context)\n        throws IOException {\n      final SimScorer sub = sim.simScorer(stats, context);\n      final NumericDocValues values = DocValues.getNumeric(context.reader(),\n          scoreValueField);\n\n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) {\n          return Float.intBitsToFloat((int) values.get(doc));\n        }\n\n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end,\n            BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          return new Explanation(Float.intBitsToFloat((int) values.get(doc)),\n              \"indexDocValue(\" + scoreValueField + \")\");\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91","date":1429620941,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","sourceNew":"    @Override\n    public SimScorer simScorer(SimWeight stats, LeafReaderContext context)\n        throws IOException {\n      final SimScorer sub = sim.simScorer(stats, context);\n      final NumericDocValues values = DocValues.getNumeric(context.reader(),\n          scoreValueField);\n\n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) {\n          return Float.intBitsToFloat((int) values.get(doc));\n        }\n\n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end,\n            BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          return Explanation.match(Float.intBitsToFloat((int) values.get(doc)),\n              \"indexDocValue(\" + scoreValueField + \")\");\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public SimScorer simScorer(SimWeight stats, LeafReaderContext context)\n        throws IOException {\n      final SimScorer sub = sim.simScorer(stats, context);\n      final NumericDocValues values = DocValues.getNumeric(context.reader(),\n          scoreValueField);\n\n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) {\n          return Float.intBitsToFloat((int) values.get(doc));\n        }\n\n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end,\n            BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          return new Explanation(Float.intBitsToFloat((int) values.get(doc)),\n              \"indexDocValue(\" + scoreValueField + \")\");\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","sourceNew":"    @Override\n    public SimScorer simScorer(SimWeight stats, LeafReaderContext context)\n        throws IOException {\n      final SimScorer sub = sim.simScorer(stats, context);\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), scoreValueField);\n\n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) throws IOException {\n          if (doc != values.docID()) {\n            values.advance(doc);\n          }\n          if (doc == values.docID()) {\n            return Float.intBitsToFloat((int) values.longValue());\n          } else {\n            return 0f;\n          }\n        }\n\n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end,\n            BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) throws IOException {\n          return Explanation.match(score(doc, 0f), \"indexDocValue(\" + scoreValueField + \")\");\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public SimScorer simScorer(SimWeight stats, LeafReaderContext context)\n        throws IOException {\n      final SimScorer sub = sim.simScorer(stats, context);\n      final NumericDocValues values = DocValues.getNumeric(context.reader(),\n          scoreValueField);\n\n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) {\n          return Float.intBitsToFloat((int) values.get(doc));\n        }\n\n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end,\n            BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          return Explanation.match(Float.intBitsToFloat((int) values.get(doc)),\n              \"indexDocValue(\" + scoreValueField + \")\");\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","sourceNew":"    @Override\n    public SimScorer simScorer(SimWeight stats, LeafReaderContext context)\n        throws IOException {\n      final SimScorer sub = sim.simScorer(stats, context);\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), scoreValueField);\n\n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) throws IOException {\n          if (doc != values.docID()) {\n            values.advance(doc);\n          }\n          if (doc == values.docID()) {\n            return Float.intBitsToFloat((int) values.longValue());\n          } else {\n            return 0f;\n          }\n        }\n\n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end,\n            BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) throws IOException {\n          return Explanation.match(score(doc, 0f), \"indexDocValue(\" + scoreValueField + \")\");\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public SimScorer simScorer(SimWeight stats, LeafReaderContext context)\n        throws IOException {\n      final SimScorer sub = sim.simScorer(stats, context);\n      final NumericDocValues values = DocValues.getNumeric(context.reader(),\n          scoreValueField);\n\n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) {\n          return Float.intBitsToFloat((int) values.get(doc));\n        }\n\n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end,\n            BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          return Explanation.match(Float.intBitsToFloat((int) values.get(doc)),\n              \"indexDocValue(\" + scoreValueField + \")\");\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","sourceNew":"    @Override\n    public SimScorer simScorer(SimWeight stats, LeafReaderContext context)\n        throws IOException {\n      final SimScorer sub = sim.simScorer(stats, context);\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), scoreValueField);\n\n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) throws IOException {\n          if (doc != values.docID()) {\n            values.advance(doc);\n          }\n          if (doc == values.docID()) {\n            return Float.intBitsToFloat((int) values.longValue());\n          } else {\n            return 0f;\n          }\n        }\n\n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end,\n            BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) throws IOException {\n          return Explanation.match(score(doc, 0f), \"indexDocValue(\" + scoreValueField + \")\");\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public SimScorer simScorer(SimWeight stats, LeafReaderContext context)\n        throws IOException {\n      final SimScorer sub = sim.simScorer(stats, context);\n      final NumericDocValues values = DocValues.getNumeric(context.reader(),\n          scoreValueField);\n\n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) {\n          return Float.intBitsToFloat((int) values.get(doc));\n        }\n\n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end,\n            BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          return Explanation.match(Float.intBitsToFloat((int) values.get(doc)),\n              \"indexDocValue(\" + scoreValueField + \")\");\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"136d4e97e5588b3f560e4d157962baa796f6c259","date":1510236334,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","sourceNew":"    @Override\n    public SimScorer simScorer(SimWeight stats, LeafReaderContext context)\n        throws IOException {\n\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), scoreValueField);\n\n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) throws IOException {\n          if (doc != values.docID()) {\n            values.advance(doc);\n          }\n          if (doc == values.docID()) {\n            return Float.intBitsToFloat((int) values.longValue());\n          } else {\n            return 0f;\n          }\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) throws IOException {\n          return Explanation.match(score(doc, 0f), \"indexDocValue(\" + scoreValueField + \")\");\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public SimScorer simScorer(SimWeight stats, LeafReaderContext context)\n        throws IOException {\n      final SimScorer sub = sim.simScorer(stats, context);\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), scoreValueField);\n\n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) throws IOException {\n          if (doc != values.docID()) {\n            values.advance(doc);\n          }\n          if (doc == values.docID()) {\n            return Float.intBitsToFloat((int) values.longValue());\n          } else {\n            return 0f;\n          }\n        }\n\n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end,\n            BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) throws IOException {\n          return Explanation.match(score(doc, 0f), \"indexDocValue(\" + scoreValueField + \")\");\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"297201ceb6f93f54f44df6d02cdc988591428b75","date":1510304523,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","sourceNew":"    @Override\n    public SimScorer simScorer(SimWeight stats, LeafReaderContext context)\n        throws IOException {\n      final SimScorer sub = sim.simScorer(stats, context);\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), scoreValueField);\n\n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) throws IOException {\n          if (doc != values.docID()) {\n            values.advance(doc);\n          }\n          if (doc == values.docID()) {\n            return Float.intBitsToFloat((int) values.longValue());\n          } else {\n            return 0f;\n          }\n        }\n\n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end,\n            BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) throws IOException {\n          return Explanation.match(score(doc, 0f), \"indexDocValue(\" + scoreValueField + \")\");\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public SimScorer simScorer(SimWeight stats, LeafReaderContext context)\n        throws IOException {\n\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), scoreValueField);\n\n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) throws IOException {\n          if (doc != values.docID()) {\n            values.advance(doc);\n          }\n          if (doc == values.docID()) {\n            return Float.intBitsToFloat((int) values.longValue());\n          } else {\n            return 0f;\n          }\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) throws IOException {\n          return Explanation.match(score(doc, 0f), \"indexDocValue(\" + scoreValueField + \")\");\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9b82182bcb9110d24f7de32032113dbf31606c2","date":1510306998,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","sourceNew":"    @Override\n    public SimScorer simScorer(SimWeight stats, LeafReaderContext context)\n        throws IOException {\n\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), scoreValueField);\n\n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) throws IOException {\n          if (doc != values.docID()) {\n            values.advance(doc);\n          }\n          if (doc == values.docID()) {\n            return Float.intBitsToFloat((int) values.longValue());\n          } else {\n            return 0f;\n          }\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) throws IOException {\n          return Explanation.match(score(doc, 0f), \"indexDocValue(\" + scoreValueField + \")\");\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public SimScorer simScorer(SimWeight stats, LeafReaderContext context)\n        throws IOException {\n      final SimScorer sub = sim.simScorer(stats, context);\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), scoreValueField);\n\n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) throws IOException {\n          if (doc != values.docID()) {\n            values.advance(doc);\n          }\n          if (doc == values.docID()) {\n            return Float.intBitsToFloat((int) values.longValue());\n          } else {\n            return 0f;\n          }\n        }\n\n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end,\n            BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) throws IOException {\n          return Explanation.match(score(doc, 0f), \"indexDocValue(\" + scoreValueField + \")\");\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","sourceNew":"    @Override\n    public SimScorer simScorer(SimWeight stats, LeafReaderContext context)\n        throws IOException {\n\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), scoreValueField);\n\n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) throws IOException {\n          if (doc != values.docID()) {\n            values.advance(doc);\n          }\n          if (doc == values.docID()) {\n            return Float.intBitsToFloat((int) values.longValue());\n          } else {\n            return 0f;\n          }\n        }\n\n        @Override\n        public float maxScore(float maxFreq) {\n          return Float.MAX_VALUE;\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) throws IOException {\n          return Explanation.match(score(doc, 0f), \"indexDocValue(\" + scoreValueField + \")\");\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public SimScorer simScorer(SimWeight stats, LeafReaderContext context)\n        throws IOException {\n\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), scoreValueField);\n\n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) throws IOException {\n          if (doc != values.docID()) {\n            values.advance(doc);\n          }\n          if (doc == values.docID()) {\n            return Float.intBitsToFloat((int) values.longValue());\n          } else {\n            return 0f;\n          }\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) throws IOException {\n          return Explanation.match(score(doc, 0f), \"indexDocValue(\" + scoreValueField + \")\");\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","sourceNew":"    @Override\n    public SimScorer simScorer(SimWeight stats, LeafReaderContext context)\n        throws IOException {\n\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), scoreValueField);\n\n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) throws IOException {\n          if (doc != values.docID()) {\n            values.advance(doc);\n          }\n          if (doc == values.docID()) {\n            return Float.intBitsToFloat((int) values.longValue());\n          } else {\n            return 0f;\n          }\n        }\n\n        @Override\n        public float maxScore(float maxFreq) {\n          return Float.MAX_VALUE;\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) throws IOException {\n          return Explanation.match(score(doc, 0f), \"indexDocValue(\" + scoreValueField + \")\");\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public SimScorer simScorer(SimWeight stats, LeafReaderContext context)\n        throws IOException {\n\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), scoreValueField);\n\n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) throws IOException {\n          if (doc != values.docID()) {\n            values.advance(doc);\n          }\n          if (doc == values.docID()) {\n            return Float.intBitsToFloat((int) values.longValue());\n          } else {\n            return 0f;\n          }\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) throws IOException {\n          return Explanation.match(score(doc, 0f), \"indexDocValue(\" + scoreValueField + \")\");\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","sourceNew":null,"sourceOld":"    @Override\n    public SimScorer simScorer(SimWeight stats, LeafReaderContext context)\n        throws IOException {\n\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), scoreValueField);\n\n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) throws IOException {\n          if (doc != values.docID()) {\n            values.advance(doc);\n          }\n          if (doc == values.docID()) {\n            return Float.intBitsToFloat((int) values.longValue());\n          } else {\n            return 0f;\n          }\n        }\n\n        @Override\n        public float maxScore(float maxFreq) {\n          return Float.MAX_VALUE;\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) throws IOException {\n          return Explanation.match(score(doc, 0f), \"indexDocValue(\" + scoreValueField + \")\");\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","sourceNew":null,"sourceOld":"    @Override\n    public SimScorer simScorer(SimWeight stats, LeafReaderContext context)\n        throws IOException {\n\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), scoreValueField);\n\n      return new SimScorer() {\n        @Override\n        public float score(int doc, float freq) throws IOException {\n          if (doc != values.docID()) {\n            values.advance(doc);\n          }\n          if (doc == values.docID()) {\n            return Float.intBitsToFloat((int) values.longValue());\n          } else {\n            return 0f;\n          }\n        }\n\n        @Override\n        public float maxScore(float maxFreq) {\n          return Float.MAX_VALUE;\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) throws IOException {\n          return Explanation.match(score(doc, 0f), \"indexDocValue(\" + scoreValueField + \")\");\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["417142ff08fda9cf0b72d5133e63097a166c6458","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"417142ff08fda9cf0b72d5133e63097a166c6458":["b9b82182bcb9110d24f7de32032113dbf31606c2","9fc47cb7b4346802411bb432f501ed0673d7119e"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["417142ff08fda9cf0b72d5133e63097a166c6458"],"45ccb604e99f21f1c05722c0e28bcfa64b94a861":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["45ccb604e99f21f1c05722c0e28bcfa64b94a861"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["b9b82182bcb9110d24f7de32032113dbf31606c2"],"b9b82182bcb9110d24f7de32032113dbf31606c2":["297201ceb6f93f54f44df6d02cdc988591428b75"],"297201ceb6f93f54f44df6d02cdc988591428b75":["136d4e97e5588b3f560e4d157962baa796f6c259"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"136d4e97e5588b3f560e4d157962baa796f6c259":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"45ccb604e99f21f1c05722c0e28bcfa64b94a861":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","136d4e97e5588b3f560e4d157962baa796f6c259"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45ccb604e99f21f1c05722c0e28bcfa64b94a861"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"b9b82182bcb9110d24f7de32032113dbf31606c2":["417142ff08fda9cf0b72d5133e63097a166c6458","9fc47cb7b4346802411bb432f501ed0673d7119e"],"297201ceb6f93f54f44df6d02cdc988591428b75":["b9b82182bcb9110d24f7de32032113dbf31606c2"],"136d4e97e5588b3f560e4d157962baa796f6c259":["297201ceb6f93f54f44df6d02cdc988591428b75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}