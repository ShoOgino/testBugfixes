{"path":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildTokenInfo(NamedList).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildTokenInfo(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses the given named list and builds a token infoform it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;arr name=\"Tokenizer\"&gt;\n   *      &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *      &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *      &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *      &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *      &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *      &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *      &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *  &lt;/arr&gt;\n   * </code></pre>\n   *\n   * @param tokenNL The named list to parse.\n   *\n   * @return The built token info.\n   */\n  protected TokenInfo buildTokenInfo(NamedList tokenNL) {\n    String text = (String) tokenNL.get(\"text\");\n    String rawText = (String) tokenNL.get(\"rawText\");\n    String type = (String) tokenNL.get(\"type\");\n    int start = (Integer) tokenNL.get(\"start\");\n    int end = (Integer) tokenNL.get(\"end\");\n    int position = (Integer) tokenNL.get(\"position\");\n    Boolean match = (Boolean) tokenNL.get(\"match\");\n    return new TokenInfo(text, rawText, type, start, end, position, (match == null ? false : match));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildTokenInfo(NamedList).mjava","sourceNew":null,"sourceOld":"  /**\n   * Parses the given named list and builds a token infoform it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;arr name=\"Tokenizer\"&gt;\n   *      &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *      &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *      &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *      &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *      &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *      &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *      &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *  &lt;/arr&gt;\n   * </code></pre>\n   *\n   * @param tokenNL The named list to parse.\n   *\n   * @return The built token info.\n   */\n  protected TokenInfo buildTokenInfo(NamedList tokenNL) {\n    String text = (String) tokenNL.get(\"text\");\n    String rawText = (String) tokenNL.get(\"rawText\");\n    String type = (String) tokenNL.get(\"type\");\n    int start = (Integer) tokenNL.get(\"start\");\n    int end = (Integer) tokenNL.get(\"end\");\n    int position = (Integer) tokenNL.get(\"position\");\n    Boolean match = (Boolean) tokenNL.get(\"match\");\n    return new TokenInfo(text, rawText, type, start, end, position, (match == null ? false : match));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildTokenInfo(NamedList).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildTokenInfo(NamedList).mjava","sourceNew":"  /**\n   * Parses the given named list and builds a token infoform it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;arr name=\"Tokenizer\"&gt;\n   *      &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *      &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *      &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *      &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *      &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *      &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *      &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *  &lt;/arr&gt;\n   * </code></pre>\n   *\n   * @param tokenNL The named list to parse.\n   *\n   * @return The built token info.\n   */\n  protected TokenInfo buildTokenInfo(NamedList tokenNL) {\n    String text = (String) tokenNL.get(\"text\");\n    String rawText = (String) tokenNL.get(\"rawText\");\n    String type = (String) tokenNL.get(\"type\");\n    int start = (Integer) tokenNL.get(\"start\");\n    int end = (Integer) tokenNL.get(\"end\");\n    int position = (Integer) tokenNL.get(\"position\");\n    Boolean match = (Boolean) tokenNL.get(\"match\");\n    return new TokenInfo(text, rawText, type, start, end, position, (match == null ? false : match));\n  }\n\n","sourceOld":"  /**\n   * Parses the given named list and builds a token infoform it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;arr name=\"Tokenizer\"&gt;\n   *      &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *      &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *      &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *      &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *      &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *      &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *      &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *  &lt;/arr&gt;\n   * </code></pre>\n   *\n   * @param tokenNL The named list to parse.\n   *\n   * @return The built token info.\n   */\n  protected TokenInfo buildTokenInfo(NamedList tokenNL) {\n    String text = (String) tokenNL.get(\"text\");\n    String rawText = (String) tokenNL.get(\"rawText\");\n    String type = (String) tokenNL.get(\"type\");\n    int start = (Integer) tokenNL.get(\"start\");\n    int end = (Integer) tokenNL.get(\"end\");\n    int position = (Integer) tokenNL.get(\"position\");\n    Boolean match = (Boolean) tokenNL.get(\"match\");\n    return new TokenInfo(text, rawText, type, start, end, position, (match == null ? false : match));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildTokenInfo(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses the given named list and builds a token infoform it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;arr name=\"Tokenizer\"&gt;\n   *      &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *      &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *      &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *      &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *      &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *      &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *      &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *  &lt;/arr&gt;\n   * </code></pre>\n   *\n   * @param tokenNL The named list to parse.\n   *\n   * @return The built token info.\n   */\n  protected TokenInfo buildTokenInfo(NamedList tokenNL) {\n    String text = (String) tokenNL.get(\"text\");\n    String rawText = (String) tokenNL.get(\"rawText\");\n    String type = (String) tokenNL.get(\"type\");\n    int start = (Integer) tokenNL.get(\"start\");\n    int end = (Integer) tokenNL.get(\"end\");\n    int position = (Integer) tokenNL.get(\"position\");\n    Boolean match = (Boolean) tokenNL.get(\"match\");\n    return new TokenInfo(text, rawText, type, start, end, position, (match == null ? false : match));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f5fe462bb98957a73e6902a3728643a6c1ef1856","date":1294451895,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildTokenInfo(NamedList[Object]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildTokenInfo(NamedList).mjava","sourceNew":"  /**\n   * Parses the given named list and builds a token infoform it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;arr name=\"Tokenizer\"&gt;\n   *      &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *      &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *      &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *      &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *      &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *      &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *      &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *  &lt;/arr&gt;\n   * </code></pre>\n   *\n   * @param tokenNL The named list to parse.\n   *\n   * @return The built token info.\n   */\n  protected TokenInfo buildTokenInfo(NamedList<Object> tokenNL) {\n    String text = (String) tokenNL.get(\"text\");\n    String rawText = (String) tokenNL.get(\"rawText\");\n    String type = (String) tokenNL.get(\"type\");\n    int start = (Integer) tokenNL.get(\"start\");\n    int end = (Integer) tokenNL.get(\"end\");\n    int position = (Integer) tokenNL.get(\"position\");\n    Boolean match = (Boolean) tokenNL.get(\"match\");\n    return new TokenInfo(text, rawText, type, start, end, position, (match == null ? false : match));\n  }\n\n","sourceOld":"  /**\n   * Parses the given named list and builds a token infoform it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;arr name=\"Tokenizer\"&gt;\n   *      &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *      &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *      &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *      &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *      &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *      &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *      &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *  &lt;/arr&gt;\n   * </code></pre>\n   *\n   * @param tokenNL The named list to parse.\n   *\n   * @return The built token info.\n   */\n  protected TokenInfo buildTokenInfo(NamedList tokenNL) {\n    String text = (String) tokenNL.get(\"text\");\n    String rawText = (String) tokenNL.get(\"rawText\");\n    String type = (String) tokenNL.get(\"type\");\n    int start = (Integer) tokenNL.get(\"start\");\n    int end = (Integer) tokenNL.get(\"end\");\n    int position = (Integer) tokenNL.get(\"position\");\n    Boolean match = (Boolean) tokenNL.get(\"match\");\n    return new TokenInfo(text, rawText, type, start, end, position, (match == null ? false : match));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildTokenInfo(NamedList).mjava","sourceNew":null,"sourceOld":"  /**\n   * Parses the given named list and builds a token infoform it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;arr name=\"Tokenizer\"&gt;\n   *      &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *      &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *      &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *      &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *      &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *      &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *      &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *  &lt;/arr&gt;\n   * </code></pre>\n   *\n   * @param tokenNL The named list to parse.\n   *\n   * @return The built token info.\n   */\n  protected TokenInfo buildTokenInfo(NamedList tokenNL) {\n    String text = (String) tokenNL.get(\"text\");\n    String rawText = (String) tokenNL.get(\"rawText\");\n    String type = (String) tokenNL.get(\"type\");\n    int start = (Integer) tokenNL.get(\"start\");\n    int end = (Integer) tokenNL.get(\"end\");\n    int position = (Integer) tokenNL.get(\"position\");\n    Boolean match = (Boolean) tokenNL.get(\"match\");\n    return new TokenInfo(text, rawText, type, start, end, position, (match == null ? false : match));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildTokenInfo(NamedList).mjava","sourceNew":null,"sourceOld":"  /**\n   * Parses the given named list and builds a token infoform it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;arr name=\"Tokenizer\"&gt;\n   *      &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *      &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *      &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *      &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *      &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *      &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *      &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *  &lt;/arr&gt;\n   * </code></pre>\n   *\n   * @param tokenNL The named list to parse.\n   *\n   * @return The built token info.\n   */\n  protected TokenInfo buildTokenInfo(NamedList tokenNL) {\n    String text = (String) tokenNL.get(\"text\");\n    String rawText = (String) tokenNL.get(\"rawText\");\n    String type = (String) tokenNL.get(\"type\");\n    int start = (Integer) tokenNL.get(\"start\");\n    int end = (Integer) tokenNL.get(\"end\");\n    int position = (Integer) tokenNL.get(\"position\");\n    Boolean match = (Boolean) tokenNL.get(\"match\");\n    return new TokenInfo(text, rawText, type, start, end, position, (match == null ? false : match));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f5fe462bb98957a73e6902a3728643a6c1ef1856":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","f5fe462bb98957a73e6902a3728643a6c1ef1856"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["1da8d55113b689b06716246649de6f62430f15c0","f5fe462bb98957a73e6902a3728643a6c1ef1856"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f5fe462bb98957a73e6902a3728643a6c1ef1856"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["f5fe462bb98957a73e6902a3728643a6c1ef1856","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"f5fe462bb98957a73e6902a3728643a6c1ef1856":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}