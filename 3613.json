{"path":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModification().mjava","commits":[{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":1,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModification().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModificationToStateFormat2().mjava","sourceNew":"  public void testExternalModification() throws Exception {\n    Path zkDir = createTempDir(\"testExternalModification\");\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n        ClusterState state = reader.getClusterState();\n\n        // create collection 2\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0));\n        state = writer.enqueueUpdate(state, Collections.singletonList(c2), null);\n        assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately\n\n        int c2Version = state.getCollection(\"c2\").getZNodeVersion();\n\n        // Simulate an external modification to /collections/c2/state.json\n        byte[] data = zkClient.getData(ZkStateReader.getCollectionPath(\"c2\"), null, null, true);\n        zkClient.setData(ZkStateReader.getCollectionPath(\"c2\"), data, true);\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n        log.info(\"Cluster state: {}\", state);\n        assertTrue(state.hasCollection(\"c2\"));\n        assertEquals(c2Version + 1, state.getCollection(\"c2\").getZNodeVersion());\n\n        writer.enqueueUpdate(state, Collections.singletonList(c2), null);\n        assertTrue(writer.hasPendingUpdates());\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n\n        // Will trigger flush\n        Thread.sleep(Overseer.STATE_UPDATE_DELAY+100);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0));\n\n        try {\n          writer.enqueueUpdate(state, Collections.singletonList(c1), null);\n          fail(\"Enqueue should not have succeeded\");\n        } catch (KeeperException.BadVersionException bve) {\n          // expected\n        }\n\n        try {\n          writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c2), null);\n          fail(\"enqueueUpdate after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n\n        try {\n          writer.writePendingUpdates();\n          fail(\"writePendingUpdates after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testExternalModificationToStateFormat2() throws Exception {\n    Path zkDir = createTempDir(\"testExternalModificationToStateFormat2\");\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n        ClusterState state = reader.getClusterState();\n\n        // create collection 2 with stateFormat = 2\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.getCollectionPath(\"c2\")));\n        state = writer.enqueueUpdate(state, Collections.singletonList(c2), null);\n        assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately\n\n        int sharedClusterStateVersion = state.getZkClusterStateVersion();\n        int stateFormat2Version = state.getCollection(\"c2\").getZNodeVersion();\n\n        // Simulate an external modification to /collections/c2/state.json\n        byte[] data = zkClient.getData(ZkStateReader.getCollectionPath(\"c2\"), null, null, true);\n        zkClient.setData(ZkStateReader.getCollectionPath(\"c2\"), data, true);\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n        log.info(\"Cluster state: {}\", state);\n        assertTrue(state.hasCollection(\"c2\"));\n        assertEquals(sharedClusterStateVersion, (int) state.getZkClusterStateVersion());\n        assertEquals(stateFormat2Version + 1, state.getCollection(\"c2\").getZNodeVersion());\n\n        writer.enqueueUpdate(state, Collections.singletonList(c2), null);\n        assertTrue(writer.hasPendingUpdates());\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n\n        // Will trigger flush\n        Thread.sleep(Overseer.STATE_UPDATE_DELAY+100);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n        try {\n          writer.enqueueUpdate(state, Collections.singletonList(c1), null);\n          fail(\"Enqueue should not have succeeded\");\n        } catch (KeeperException.BadVersionException bve) {\n          // expected\n        }\n\n        try {\n          writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c2), null);\n          fail(\"enqueueUpdate after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n\n        try {\n          writer.writePendingUpdates();\n          fail(\"writePendingUpdates after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}