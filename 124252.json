{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = fld.get(FORMAT_STYLE);\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        if (srcCol == null)\n          srcCol = column;\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase();\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1377c0b1c5b1c273b200b230cf18dd0ef05c766a","date":1218790175,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = fld.get(FORMAT_STYLE);\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = fld.get(LOCALE);\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase();\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = fld.get(FORMAT_STYLE);\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        if (srcCol == null)\n          srcCol = column;\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase();\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73dfcb0f0208cdc38da92da0c7be6ed50fef55ba","date":1233903110,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    VariableResolver resolver = context.getVariableResolver();\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = resolver.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = resolver.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase();\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = fld.get(FORMAT_STYLE);\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = fld.get(LOCALE);\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase();\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"153cc06382fdc94d0ea3db127eab860ae4310525","date":1260181667,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase();\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    VariableResolver resolver = context.getVariableResolver();\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = resolver.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = resolver.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase();\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase();\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase();\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"73dfcb0f0208cdc38da92da0c7be6ed50fef55ba":["1377c0b1c5b1c273b200b230cf18dd0ef05c766a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1377c0b1c5b1c273b200b230cf18dd0ef05c766a":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["153cc06382fdc94d0ea3db127eab860ae4310525"],"153cc06382fdc94d0ea3db127eab860ae4310525":["73dfcb0f0208cdc38da92da0c7be6ed50fef55ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["1377c0b1c5b1c273b200b230cf18dd0ef05c766a"],"73dfcb0f0208cdc38da92da0c7be6ed50fef55ba":["153cc06382fdc94d0ea3db127eab860ae4310525"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"1377c0b1c5b1c273b200b230cf18dd0ef05c766a":["73dfcb0f0208cdc38da92da0c7be6ed50fef55ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"153cc06382fdc94d0ea3db127eab860ae4310525":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}