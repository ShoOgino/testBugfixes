{"path":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta3#testCompositePk_DeltaImport_add().mjava","commits":[{"id":"5871a631b6817f1cef161749ceffdc037e67558a","date":1291133429,"type":0,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta3#testCompositePk_DeltaImport_add().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testCompositePk_DeltaImport_add() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n\n    List parentDeltaRow = new ArrayList();\n    parentDeltaRow.add(createMap(\"parent_id\", \"1\"));\n    MockDataSource.setIterator(P_DELTA_QUERY,\n        parentDeltaRow.iterator());\n\n    List parentRow = new ArrayList();\n    parentRow.add(createMap(\"parent_id\", \"1\", \"desc\", \"d1\"));\n    MockDataSource.setIterator(\"select * from parent where last_modified > NOW AND parent_id=1\",\n        parentRow.iterator());\n\n    List childDeltaRow = new ArrayList();\n    childDeltaRow.add(createMap(\"id\", \"3\"));\n    MockDataSource.setIterator(C_DELTA_QUERY,\n        childDeltaRow.iterator());\n\n    List childParentDeltaRow = new ArrayList();\n    childParentDeltaRow.add(createMap(\"parent_id\", \"1\"));\n    MockDataSource.setIterator(\"select parent_id from child where id='3'\",\n        childParentDeltaRow.iterator());\n\n    List childRow = new ArrayList();\n    childRow.add(createMap(\"id\", \"3\"));\n    MockDataSource.setIterator(\"select * from child where last_modified > NOW AND parent_id=1\",\n        childRow.iterator());\n\n    runDeltaImport(dataConfig_delta);\n\n    assertQ(req(\"*:* OR testCompositePk_DeltaImport_add\"), \"//*[@numFound='2']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    assertQ(req(\"desc:d1\"), \"//*[@numFound='2']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta3#testCompositePk_DeltaImport_add().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testCompositePk_DeltaImport_add() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n\n    List parentDeltaRow = new ArrayList();\n    parentDeltaRow.add(createMap(\"parent_id\", \"1\"));\n    MockDataSource.setIterator(P_DELTA_QUERY,\n        parentDeltaRow.iterator());\n\n    List parentRow = new ArrayList();\n    parentRow.add(createMap(\"parent_id\", \"1\", \"desc\", \"d1\"));\n    MockDataSource.setIterator(\"select * from parent where last_modified > NOW AND parent_id=1\",\n        parentRow.iterator());\n\n    List childDeltaRow = new ArrayList();\n    childDeltaRow.add(createMap(\"id\", \"3\"));\n    MockDataSource.setIterator(C_DELTA_QUERY,\n        childDeltaRow.iterator());\n\n    List childParentDeltaRow = new ArrayList();\n    childParentDeltaRow.add(createMap(\"parent_id\", \"1\"));\n    MockDataSource.setIterator(\"select parent_id from child where id='3'\",\n        childParentDeltaRow.iterator());\n\n    List childRow = new ArrayList();\n    childRow.add(createMap(\"id\", \"3\"));\n    MockDataSource.setIterator(\"select * from child where last_modified > NOW AND parent_id=1\",\n        childRow.iterator());\n\n    runDeltaImport(dataConfig_delta);\n\n    assertQ(req(\"*:* OR testCompositePk_DeltaImport_add\"), \"//*[@numFound='2']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    assertQ(req(\"desc:d1\"), \"//*[@numFound='2']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta3#testCompositePk_DeltaImport_add().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testCompositePk_DeltaImport_add() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n\n    List parentDeltaRow = new ArrayList();\n    parentDeltaRow.add(createMap(\"parent_id\", \"1\"));\n    MockDataSource.setIterator(P_DELTA_QUERY,\n        parentDeltaRow.iterator());\n\n    List parentRow = new ArrayList();\n    parentRow.add(createMap(\"parent_id\", \"1\", \"desc\", \"d1\"));\n    MockDataSource.setIterator(\"select * from parent where last_modified > NOW AND parent_id=1\",\n        parentRow.iterator());\n\n    List childDeltaRow = new ArrayList();\n    childDeltaRow.add(createMap(\"id\", \"3\"));\n    MockDataSource.setIterator(C_DELTA_QUERY,\n        childDeltaRow.iterator());\n\n    List childParentDeltaRow = new ArrayList();\n    childParentDeltaRow.add(createMap(\"parent_id\", \"1\"));\n    MockDataSource.setIterator(\"select parent_id from child where id='3'\",\n        childParentDeltaRow.iterator());\n\n    List childRow = new ArrayList();\n    childRow.add(createMap(\"id\", \"3\"));\n    MockDataSource.setIterator(\"select * from child where last_modified > NOW AND parent_id=1\",\n        childRow.iterator());\n\n    runDeltaImport(dataConfig_delta);\n\n    assertQ(req(\"*:* OR testCompositePk_DeltaImport_add\"), \"//*[@numFound='2']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    assertQ(req(\"desc:d1\"), \"//*[@numFound='2']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta3#testCompositePk_DeltaImport_add().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta3#testCompositePk_DeltaImport_add().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testCompositePk_DeltaImport_add() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n\n    List parentDeltaRow = new ArrayList();\n    parentDeltaRow.add(createMap(\"parent_id\", \"1\"));\n    MockDataSource.setIterator(P_DELTA_QUERY,\n        parentDeltaRow.iterator());\n\n    List parentRow = new ArrayList();\n    parentRow.add(createMap(\"parent_id\", \"1\", \"desc\", \"d1\"));\n    MockDataSource.setIterator(\"select * from parent where last_modified > NOW AND parent_id=1\",\n        parentRow.iterator());\n\n    List childDeltaRow = new ArrayList();\n    childDeltaRow.add(createMap(\"id\", \"3\"));\n    MockDataSource.setIterator(C_DELTA_QUERY,\n        childDeltaRow.iterator());\n\n    List childParentDeltaRow = new ArrayList();\n    childParentDeltaRow.add(createMap(\"parent_id\", \"1\"));\n    MockDataSource.setIterator(\"select parent_id from child where id='3'\",\n        childParentDeltaRow.iterator());\n\n    List childRow = new ArrayList();\n    childRow.add(createMap(\"id\", \"3\"));\n    MockDataSource.setIterator(\"select * from child where last_modified > NOW AND parent_id=1\",\n        childRow.iterator());\n\n    runDeltaImport(dataConfig_delta);\n\n    assertQ(req(\"*:* OR testCompositePk_DeltaImport_add\"), \"//*[@numFound='2']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    assertQ(req(\"desc:d1\"), \"//*[@numFound='2']\");\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testCompositePk_DeltaImport_add() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n\n    List parentDeltaRow = new ArrayList();\n    parentDeltaRow.add(createMap(\"parent_id\", \"1\"));\n    MockDataSource.setIterator(P_DELTA_QUERY,\n        parentDeltaRow.iterator());\n\n    List parentRow = new ArrayList();\n    parentRow.add(createMap(\"parent_id\", \"1\", \"desc\", \"d1\"));\n    MockDataSource.setIterator(\"select * from parent where last_modified > NOW AND parent_id=1\",\n        parentRow.iterator());\n\n    List childDeltaRow = new ArrayList();\n    childDeltaRow.add(createMap(\"id\", \"3\"));\n    MockDataSource.setIterator(C_DELTA_QUERY,\n        childDeltaRow.iterator());\n\n    List childParentDeltaRow = new ArrayList();\n    childParentDeltaRow.add(createMap(\"parent_id\", \"1\"));\n    MockDataSource.setIterator(\"select parent_id from child where id='3'\",\n        childParentDeltaRow.iterator());\n\n    List childRow = new ArrayList();\n    childRow.add(createMap(\"id\", \"3\"));\n    MockDataSource.setIterator(\"select * from child where last_modified > NOW AND parent_id=1\",\n        childRow.iterator());\n\n    runDeltaImport(dataConfig_delta);\n\n    assertQ(req(\"*:* OR testCompositePk_DeltaImport_add\"), \"//*[@numFound='2']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    assertQ(req(\"desc:d1\"), \"//*[@numFound='2']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta3#testCompositePk_DeltaImport_add().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta3#testCompositePk_DeltaImport_add().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testCompositePk_DeltaImport_add() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n\n    List parentDeltaRow = new ArrayList();\n    parentDeltaRow.add(createMap(\"parent_id\", \"1\"));\n    MockDataSource.setIterator(P_DELTA_QUERY,\n        parentDeltaRow.iterator());\n\n    List parentRow = new ArrayList();\n    parentRow.add(createMap(\"parent_id\", \"1\", \"desc\", \"d1\"));\n    MockDataSource.setIterator(\"select * from parent where last_modified > NOW AND parent_id=1\",\n        parentRow.iterator());\n\n    List childDeltaRow = new ArrayList();\n    childDeltaRow.add(createMap(\"id\", \"3\"));\n    MockDataSource.setIterator(C_DELTA_QUERY,\n        childDeltaRow.iterator());\n\n    List childParentDeltaRow = new ArrayList();\n    childParentDeltaRow.add(createMap(\"parent_id\", \"1\"));\n    MockDataSource.setIterator(\"select parent_id from child where id='3'\",\n        childParentDeltaRow.iterator());\n\n    List childRow = new ArrayList();\n    childRow.add(createMap(\"id\", \"3\"));\n    MockDataSource.setIterator(\"select * from child where last_modified > NOW AND parent_id=1\",\n        childRow.iterator());\n\n    runDeltaImport(dataConfig_delta);\n\n    assertQ(req(\"*:* OR testCompositePk_DeltaImport_add\"), \"//*[@numFound='2']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    assertQ(req(\"desc:d1\"), \"//*[@numFound='2']\");\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testCompositePk_DeltaImport_add() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n\n    List parentDeltaRow = new ArrayList();\n    parentDeltaRow.add(createMap(\"parent_id\", \"1\"));\n    MockDataSource.setIterator(P_DELTA_QUERY,\n        parentDeltaRow.iterator());\n\n    List parentRow = new ArrayList();\n    parentRow.add(createMap(\"parent_id\", \"1\", \"desc\", \"d1\"));\n    MockDataSource.setIterator(\"select * from parent where last_modified > NOW AND parent_id=1\",\n        parentRow.iterator());\n\n    List childDeltaRow = new ArrayList();\n    childDeltaRow.add(createMap(\"id\", \"3\"));\n    MockDataSource.setIterator(C_DELTA_QUERY,\n        childDeltaRow.iterator());\n\n    List childParentDeltaRow = new ArrayList();\n    childParentDeltaRow.add(createMap(\"parent_id\", \"1\"));\n    MockDataSource.setIterator(\"select parent_id from child where id='3'\",\n        childParentDeltaRow.iterator());\n\n    List childRow = new ArrayList();\n    childRow.add(createMap(\"id\", \"3\"));\n    MockDataSource.setIterator(\"select * from child where last_modified > NOW AND parent_id=1\",\n        childRow.iterator());\n\n    runDeltaImport(dataConfig_delta);\n\n    assertQ(req(\"*:* OR testCompositePk_DeltaImport_add\"), \"//*[@numFound='2']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    assertQ(req(\"desc:d1\"), \"//*[@numFound='2']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5871a631b6817f1cef161749ceffdc037e67558a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["5871a631b6817f1cef161749ceffdc037e67558a","5871a631b6817f1cef161749ceffdc037e67558a"],"c26f00b574427b55127e869b935845554afde1fa":["5871a631b6817f1cef161749ceffdc037e67558a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5871a631b6817f1cef161749ceffdc037e67558a"],"3bb13258feba31ab676502787ab2e1779f129b7a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5871a631b6817f1cef161749ceffdc037e67558a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"5871a631b6817f1cef161749ceffdc037e67558a":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5871a631b6817f1cef161749ceffdc037e67558a","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}