{"path":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#deployClusterPackage(SolrPackageInstance,boolean,boolean,String[]).mjava","commits":[{"id":"4ea3ef3f76ecd22ead5b83d015adf8c16476a0f4","date":1594087785,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#deployClusterPackage(SolrPackageInstance,boolean,boolean,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#deployClusterPackage(SolrPackageInstance,boolean,boolean,boolean,String[]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private boolean deployClusterPackage(SolrPackageInstance packageInstance, boolean isUpdate, boolean noprompt, String[] overrides) {\n    boolean clusterPluginFailed = false;\n    int numberOfClusterPluginsDeployed = 0;\n\n    if (isUpdate) {\n      for (Plugin plugin: packageInstance.plugins) {\n        if (\"cluster\".equalsIgnoreCase(plugin.type) == false) continue;\n        SolrPackageInstance deployedPackage = getPackagesDeployedAsClusterLevelPlugins().get(packageInstance.name);\n        if (deployedPackage == null) {\n          PackageUtils.printRed(\"Cluster level plugin \" + plugin.name + \" from package \" + packageInstance.name + \" not deployed. To deploy, remove the --update parameter.\");\n          clusterPluginFailed = true;\n          continue;\n        }\n        for (PluginMeta pluginMeta: (List<PluginMeta>)deployedPackage.getCustomData()) {\n          PackageUtils.printGreen(\"Updating this plugin: \" + pluginMeta);\n          try {\n            pluginMeta.version = packageInstance.version; // just update the version, let the other metadata same\n            String postBody = \"{\\\"update\\\": \" + Utils.toJSONString(pluginMeta) + \"}\";\n            PackageUtils.printGreen(\"Posting \" + postBody + \" to \" + PackageUtils.CLUSTER_PLUGINS_PATH);\n            SolrCLI.postJsonToSolr(solrClient, PackageUtils.CLUSTER_PLUGINS_PATH, postBody);\n          } catch (Exception e) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, e);\n          }\n        }\n        numberOfClusterPluginsDeployed++;\n      }\n      if (numberOfClusterPluginsDeployed > 0) {\n        PackageUtils.printGreen(numberOfClusterPluginsDeployed + \" cluster level plugins updated.\");\n      } else {\n        PackageUtils.printRed(\"No cluster level plugin updated.\");\n        clusterPluginFailed = true;\n      }\n    } else {\n      for (Plugin plugin: packageInstance.plugins) {\n        if (\"cluster\".equalsIgnoreCase(plugin.type) == false) continue;\n        // Check if this cluster level plugin is already deployed\n        {\n          Map<String, Object> clusterprops = null;\n          try {\n            clusterprops = PackageUtils.getJson(solrClient.getHttpClient(), solrBaseUrl + PackageUtils.CLUSTERPROPS_PATH, Map.class);\n          } catch (SolrException ex) {\n            if (ex.code() == ErrorCode.NOT_FOUND.code) {\n              // Ignore this, as clusterprops may not have been created yet. This means package isn't already installed.\n            } else throw ex;\n          }\n          if (clusterprops != null) {\n            Object pkg = ((Map<String, Object>)clusterprops.getOrDefault(\"plugin\", Collections.emptyMap())).get(packageInstance.name+\":\"+plugin.name);\n            if (pkg != null) {\n              PackageUtils.printRed(\"Cluster level plugin \" + plugin.name + \" from package \" + packageInstance.name + \" already deployed. To update to \" + packageInstance + \", pass --update parameter.\");\n              clusterPluginFailed = true;\n              continue;\n            }\n          }\n        }\n\n        // Lets setup this plugin now\n        Map<String, String> systemParams = Map.of(\"package-name\", packageInstance.name, \"package-version\", packageInstance.version, \"plugin-name\", plugin.name);\n        Command cmd = plugin.setupCommand;\n        if (cmd != null && !Strings.isNullOrEmpty(cmd.method)) {\n          if (\"POST\".equalsIgnoreCase(cmd.method)) {\n            try {\n              Map<String, String> overridesMap = getParameterOverrides(overrides);\n              String payload = PackageUtils.resolve(getMapper().writeValueAsString(cmd.payload), packageInstance.parameterDefaults, overridesMap, systemParams);\n              String path = PackageUtils.resolve(cmd.path, packageInstance.parameterDefaults, overridesMap, systemParams);\n              PackageUtils.printGreen(\"Executing \" + payload + \" for path:\" + path);\n              boolean shouldExecute = prompt(noprompt);\n              if (shouldExecute) {\n                SolrCLI.postJsonToSolr(solrClient, path, payload);\n                numberOfClusterPluginsDeployed++;\n              }\n            } catch (Exception ex) {\n              throw new SolrException(ErrorCode.SERVER_ERROR, ex);\n            }\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-POST method not supported for setup commands\");\n          }\n        } else {\n          PackageUtils.printRed(\"There is no setup command to execute for plugin: \" + plugin.name);\n        }\n      }\n      if (numberOfClusterPluginsDeployed > 0) {\n        PackageUtils.printGreen(numberOfClusterPluginsDeployed + \" cluster level plugins setup.\");\n      } else {\n        PackageUtils.printRed(\"No cluster level plugin setup.\");\n        clusterPluginFailed = true;\n      }\n    }\n    return !clusterPluginFailed;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private boolean deployClusterPackage(SolrPackageInstance packageInstance, boolean isUpdate, boolean noprompt,\n      boolean shouldDeployClusterPlugins, String[] overrides) {\n    boolean cluasterPluginFailed = false;\n\n    if (isUpdate) {\n      for (Plugin plugin: packageInstance.plugins) {\n        if (!shouldDeployClusterPlugins || \"cluster\".equalsIgnoreCase(plugin.type) == false) continue;\n        SolrPackageInstance deployedPackage = getPackagesDeployedAsClusterLevelPlugins().get(packageInstance.name);\n        if (deployedPackage == null) {\n          PackageUtils.printRed(\"Cluster level plugin \" + plugin.name + \" from package \" + packageInstance.name + \" not deployed. To deploy, remove the --update parameter.\");\n          cluasterPluginFailed = true;\n          continue;\n        }\n        for (PluginMeta pluginMeta: (List<PluginMeta>)deployedPackage.getCustomData()) {\n          PackageUtils.printGreen(\"Updating this plugin: \" + pluginMeta);\n          try {\n            pluginMeta.version = packageInstance.version; // just update the version, let the other metadata same\n            String postBody = \"{\\\"update\\\": \" + Utils.toJSONString(pluginMeta) + \"}\";\n            PackageUtils.printGreen(\"Posting \" + postBody + \" to \" + PackageUtils.CLUSTER_PLUGINS_PATH);\n            SolrCLI.postJsonToSolr(solrClient, PackageUtils.CLUSTER_PLUGINS_PATH, postBody);\n          } catch (Exception e) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, e);\n          }\n        }\n      }\n    } else {\n      for (Plugin plugin: packageInstance.plugins) {\n        if (!shouldDeployClusterPlugins || \"cluster\".equalsIgnoreCase(plugin.type) == false) continue;\n        // Check if this cluster level plugin is already deployed\n        {\n          Map<String, Object> clusterprops = null;\n          try {\n            clusterprops = PackageUtils.getJson(solrClient.getHttpClient(), solrBaseUrl + PackageUtils.CLUSTERPROPS_PATH, Map.class);\n          } catch (SolrException ex) {\n            if (ex.code() == ErrorCode.NOT_FOUND.code) {\n              // Ignore this, as clusterprops may not have been created yet. This means package isn't already installed.\n            } else throw ex;\n          }\n          if (clusterprops != null) {\n            Object pkg = ((Map<String, Object>)clusterprops.getOrDefault(\"plugin\", Collections.emptyMap())).get(packageInstance.name+\":\"+plugin.name);\n            if (pkg != null) {\n              PackageUtils.printRed(\"Cluster level plugin \" + plugin.name + \" from package \" + packageInstance.name + \" already deployed. To update to \" + packageInstance + \", pass --update parameter.\");\n              cluasterPluginFailed = true;\n              continue;\n            }\n          }\n        }\n\n        // Lets install this plugin now\n        Map<String, String> systemParams = Map.of(\"package-name\", packageInstance.name, \"package-version\", packageInstance.version, \"plugin-name\", plugin.name);\n        Command cmd = plugin.setupCommand;\n        if (cmd != null && !Strings.isNullOrEmpty(cmd.method)) {\n          if (\"POST\".equalsIgnoreCase(cmd.method)) {\n            try {\n              Map<String, String> overridesMap = getParameterOverrides(overrides);\n              String payload = PackageUtils.resolve(getMapper().writeValueAsString(cmd.payload), packageInstance.parameterDefaults, overridesMap, systemParams);\n              String path = PackageUtils.resolve(cmd.path, packageInstance.parameterDefaults, overridesMap, systemParams);\n              PackageUtils.printGreen(\"Executing \" + payload + \" for path:\" + path);\n              boolean shouldExecute = true;\n              if (!noprompt) { // show a prompt asking user to execute the setup command for the plugin\n                PackageUtils.print(PackageUtils.YELLOW, \"Execute this command (y/n): \");\n                try (Scanner scanner = new Scanner(System.in, \"UTF-8\")) {\n                  String userInput = scanner.next();\n                  if (!\"yes\".equalsIgnoreCase(userInput) && !\"y\".equalsIgnoreCase(userInput)) {\n                    shouldExecute = false;\n                    PackageUtils.printRed(\"Skipping setup command for deploying (deployment verification may fail).\"\n                        + \" Please run this step manually or refer to package documentation.\");\n                  }\n                }\n              }\n              if (shouldExecute) {\n                SolrCLI.postJsonToSolr(solrClient, path, payload);\n              }\n            } catch (Exception ex) {\n              throw new SolrException(ErrorCode.SERVER_ERROR, ex);\n            }\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-POST method not supported for setup commands\");\n          }\n        } else {\n          PackageUtils.printRed(\"There is no setup command to execute for plugin: \" + plugin.name);\n        }\n      }\n    }\n    return !cluasterPluginFailed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ea3ef3f76ecd22ead5b83d015adf8c16476a0f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ea3ef3f76ecd22ead5b83d015adf8c16476a0f4"]},"commit2Childs":{"4ea3ef3f76ecd22ead5b83d015adf8c16476a0f4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ea3ef3f76ecd22ead5b83d015adf8c16476a0f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}