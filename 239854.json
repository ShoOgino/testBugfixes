{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,TrackingDirectoryWrapper,SegmentInfo,IOContext,IOUtils.IOConsumer[Collection[String]]).mjava","commits":[{"id":"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7","date":1524496660,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,TrackingDirectoryWrapper,SegmentInfo,IOContext,IOUtils.IOConsumer[Collection[String]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,TrackingDirectoryWrapper,SegmentInfo,IOContext).mjava","sourceNew":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final void createCompoundFile(InfoStream infoStream, TrackingDirectoryWrapper directory, final SegmentInfo info, IOContext context, IOUtils.IOConsumer<Collection<String>> deleteFiles) throws IOException {\n\n    // maybe this check is not needed, but why take the risk?\n    if (!directory.getCreatedFiles().isEmpty()) {\n      throw new IllegalStateException(\"pass a clean trackingdir for CFS creation\");\n    }\n    \n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file\");\n    }\n    // Now merge all added files    \n    boolean success = false;\n    try {\n      info.getCodec().compoundFormat().write(directory, info, context);\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteFiles.accept(directory.getCreatedFiles());\n      }\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    info.setFiles(new HashSet<>(directory.getCreatedFiles()));\n  }\n\n","sourceOld":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  final void createCompoundFile(InfoStream infoStream, TrackingDirectoryWrapper directory, final SegmentInfo info, IOContext context) throws IOException {\n\n    // maybe this check is not needed, but why take the risk?\n    if (!directory.getCreatedFiles().isEmpty()) {\n      throw new IllegalStateException(\"pass a clean trackingdir for CFS creation\");\n    }\n    \n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file\");\n    }\n    // Now merge all added files    \n    boolean success = false;\n    try {\n      info.getCodec().compoundFormat().write(directory, info, context);\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(directory.getCreatedFiles());\n      }\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    info.setFiles(new HashSet<>(directory.getCreatedFiles()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2","date":1588002560,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,TrackingDirectoryWrapper,SegmentInfo,IOContext,IOUtils.IOConsumer[Collection[String]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(InfoStream,TrackingDirectoryWrapper,SegmentInfo,IOContext,IOUtils.IOConsumer[Collection[String]]).mjava","sourceNew":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static void createCompoundFile(InfoStream infoStream, TrackingDirectoryWrapper directory, final SegmentInfo info, IOContext context, IOUtils.IOConsumer<Collection<String>> deleteFiles) throws IOException {\n\n    // maybe this check is not needed, but why take the risk?\n    if (!directory.getCreatedFiles().isEmpty()) {\n      throw new IllegalStateException(\"pass a clean trackingdir for CFS creation\");\n    }\n    \n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file\");\n    }\n    // Now merge all added files    \n    boolean success = false;\n    try {\n      info.getCodec().compoundFormat().write(directory, info, context);\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteFiles.accept(directory.getCreatedFiles());\n      }\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    info.setFiles(new HashSet<>(directory.getCreatedFiles()));\n  }\n\n","sourceOld":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final void createCompoundFile(InfoStream infoStream, TrackingDirectoryWrapper directory, final SegmentInfo info, IOContext context, IOUtils.IOConsumer<Collection<String>> deleteFiles) throws IOException {\n\n    // maybe this check is not needed, but why take the risk?\n    if (!directory.getCreatedFiles().isEmpty()) {\n      throw new IllegalStateException(\"pass a clean trackingdir for CFS creation\");\n    }\n    \n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"create compound file\");\n    }\n    // Now merge all added files    \n    boolean success = false;\n    try {\n      info.getCodec().compoundFormat().write(directory, info, context);\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteFiles.accept(directory.getCreatedFiles());\n      }\n    }\n\n    // Replace all previous files with the CFS/CFE files:\n    info.setFiles(new HashSet<>(directory.getCreatedFiles()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["86a2e8a56b368d37ef3ba7180541fa317d6fd6c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"]},"commit2Childs":{"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86a2e8a56b368d37ef3ba7180541fa317d6fd6c7"],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}