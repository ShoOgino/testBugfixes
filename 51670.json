{"path":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoDecoder#backToValue(long).mjava","commits":[{"id":"21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c","date":1373406544,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoDecoder#backToValue(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Given a target value, go back to the first smaller or equal value\n   * and return it if it is available. Otherwise return {@link #NO_MORE_VALUES}.\n   */\n  public long backToValue(long target) {\n    if (! toBeforeCurrentHighBit()) {\n      return NO_MORE_VALUES;\n    }\n    long highTarget = target >>> efEncoder.numLowBits;\n    long highValue = backToHighValue(highTarget);\n    if (highValue == NO_MORE_VALUES) {\n      return NO_MORE_VALUES;\n    }\n    // Linear search with low values:\n    long currentValue = combineHighLowValues(highValue, currentLowValue());\n    while (currentValue > target) {\n      currentValue = previousValue();\n      if (currentValue == NO_MORE_VALUES) {\n        return NO_MORE_VALUES;\n      }\n    }\n    return currentValue;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoDecoder#backToValue(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Given a target value, go back to the first smaller or equal value\n   * and return it if it is available. Otherwise return {@link #NO_MORE_VALUES}.\n   */\n  public long backToValue(long target) {\n    if (! toBeforeCurrentHighBit()) {\n      return NO_MORE_VALUES;\n    }\n    long highTarget = target >>> efEncoder.numLowBits;\n    long highValue = backToHighValue(highTarget);\n    if (highValue == NO_MORE_VALUES) {\n      return NO_MORE_VALUES;\n    }\n    // Linear search with low values:\n    long currentValue = combineHighLowValues(highValue, currentLowValue());\n    while (currentValue > target) {\n      currentValue = previousValue();\n      if (currentValue == NO_MORE_VALUES) {\n        return NO_MORE_VALUES;\n      }\n    }\n    return currentValue;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"423470dff9e19aa0db92590e282e2ca12e34d65a","date":1381851051,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoDecoder#backToValue(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoDecoder#backToValue(long).mjava","sourceNew":"  /** Given a target value, go back to the first smaller or equal value\n   * and return it if it is available. Otherwise return {@link #NO_MORE_VALUES}.\n   * <br>The current implementation does not use the index on the upper zero bit positions.\n   */\n  public long backToValue(long target) {\n    if (! toBeforeCurrentHighBit()) {\n      return NO_MORE_VALUES;\n    }\n    long highTarget = target >>> efEncoder.numLowBits;\n    long highValue = backToHighValue(highTarget);\n    if (highValue == NO_MORE_VALUES) {\n      return NO_MORE_VALUES;\n    }\n    // Linear search with low values:\n    long currentValue = combineHighLowValues(highValue, currentLowValue());\n    while (currentValue > target) {\n      currentValue = previousValue();\n      if (currentValue == NO_MORE_VALUES) {\n        return NO_MORE_VALUES;\n      }\n    }\n    return currentValue;\n  }\n\n","sourceOld":"  /** Given a target value, go back to the first smaller or equal value\n   * and return it if it is available. Otherwise return {@link #NO_MORE_VALUES}.\n   */\n  public long backToValue(long target) {\n    if (! toBeforeCurrentHighBit()) {\n      return NO_MORE_VALUES;\n    }\n    long highTarget = target >>> efEncoder.numLowBits;\n    long highValue = backToHighValue(highTarget);\n    if (highValue == NO_MORE_VALUES) {\n      return NO_MORE_VALUES;\n    }\n    // Linear search with low values:\n    long currentValue = combineHighLowValues(highValue, currentLowValue());\n    while (currentValue > target) {\n      currentValue = previousValue();\n      if (currentValue == NO_MORE_VALUES) {\n        return NO_MORE_VALUES;\n      }\n    }\n    return currentValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"556259cdb46d4f7fb27f4688c4efcb3eaee4a550","date":1432028057,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoDecoder#backToValue(long).mjava","sourceNew":null,"sourceOld":"  /** Given a target value, go back to the first smaller or equal value\n   * and return it if it is available. Otherwise return {@link #NO_MORE_VALUES}.\n   * <br>The current implementation does not use the index on the upper zero bit positions.\n   */\n  public long backToValue(long target) {\n    if (! toBeforeCurrentHighBit()) {\n      return NO_MORE_VALUES;\n    }\n    long highTarget = target >>> efEncoder.numLowBits;\n    long highValue = backToHighValue(highTarget);\n    if (highValue == NO_MORE_VALUES) {\n      return NO_MORE_VALUES;\n    }\n    // Linear search with low values:\n    long currentValue = combineHighLowValues(highValue, currentLowValue());\n    while (currentValue > target) {\n      currentValue = previousValue();\n      if (currentValue == NO_MORE_VALUES) {\n        return NO_MORE_VALUES;\n      }\n    }\n    return currentValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"556259cdb46d4f7fb27f4688c4efcb3eaee4a550":["423470dff9e19aa0db92590e282e2ca12e34d65a"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c"],"21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"423470dff9e19aa0db92590e282e2ca12e34d65a":["21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["556259cdb46d4f7fb27f4688c4efcb3eaee4a550"]},"commit2Childs":{"556259cdb46d4f7fb27f4688c4efcb3eaee4a550":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c":["37a0f60745e53927c4c876cfe5b5a58170f0646c","423470dff9e19aa0db92590e282e2ca12e34d65a"],"423470dff9e19aa0db92590e282e2ca12e34d65a":["556259cdb46d4f7fb27f4688c4efcb3eaee4a550"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}