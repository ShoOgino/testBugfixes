{"path":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, writer, maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.contains(info)) {\n\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          boolean useCompoundFile = getUseCompoundFile();\n          if (last > 1 || !isOptimized(writer, infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.range(0, last), useCompoundFile));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, writer, maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.contains(info)) {\n\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          boolean useCompoundFile = getUseCompoundFile();\n          if (last > 1 || !isOptimized(writer, infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.range(0, last), useCompoundFile));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, writer.get(), maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.contains(info)) {\n\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          boolean useCompoundFile = getUseCompoundFile();\n          if (last > 1 || !isOptimized(writer.get(), infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.range(0, last), useCompoundFile));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, writer, maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.contains(info)) {\n\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          boolean useCompoundFile = getUseCompoundFile();\n          if (last > 1 || !isOptimized(writer, infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.range(0, last), useCompoundFile));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8723a3379c08ae0b4ba0cf4f246306f86ad8362d","date":1287582680,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.contains(info)) {\n\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          boolean useCompoundFile = getUseCompoundFile();\n          if (last > 1 || !isOptimized(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.range(0, last), useCompoundFile));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, writer.get(), maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.contains(info)) {\n\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          boolean useCompoundFile = getUseCompoundFile();\n          if (last > 1 || !isOptimized(writer.get(), infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.range(0, last), useCompoundFile));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8017ab6544f30f93b106e419e7298173bad77f69","date":1287608126,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.contains(info)) {\n\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          boolean useCompoundFile = getUseCompoundFile();\n          if (last > 1 || !isOptimized(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.range(0, last), useCompoundFile));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, writer.get(), maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.contains(info)) {\n\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          boolean useCompoundFile = getUseCompoundFile();\n          if (last > 1 || !isOptimized(writer.get(), infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.range(0, last), useCompoundFile));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38a62612cfa4e104080d89d7751a8f1a258ac335","date":1291442315,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.contains(info)) {\n\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          if (last > 1 || !isOptimized(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.range(0, last)));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.contains(info)) {\n\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          boolean useCompoundFile = getUseCompoundFile();\n          if (last > 1 || !isOptimized(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.range(0, last), useCompoundFile));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","date":1291833341,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.contains(info)) {\n\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          if (last > 1 || !isOptimized(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.range(0, last)));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.contains(info)) {\n\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          boolean useCompoundFile = getUseCompoundFile();\n          if (last > 1 || !isOptimized(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.range(0, last), useCompoundFile));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.contains(info)) {\n\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          if (last > 1 || !isOptimized(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.range(0, last)));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, writer.get(), maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.contains(info)) {\n\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          boolean useCompoundFile = getUseCompoundFile();\n          if (last > 1 || !isOptimized(writer.get(), infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.range(0, last), useCompoundFile));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"786a4d25ca958a1f315a9d6a74f0441fdafcd522","date":1305734256,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.contains(info)) {\n\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          if (last > 1 || !isOptimized(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.asList().subList(0, last)));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.contains(info)) {\n\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          if (last > 1 || !isOptimized(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.range(0, last)));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.contains(info)) {\n\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          if (last > 1 || !isOptimized(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.asList().subList(0, last)));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.contains(info)) {\n\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          if (last > 1 || !isOptimized(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.range(0, last)));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.contains(info)) {\n\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          if (last > 1 || !isOptimized(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.asList().subList(0, last)));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.contains(info)) {\n\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          if (last > 1 || !isOptimized(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.range(0, last)));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09b6beb7329eb1b75a38c94b1c5ab4e840743c59","date":1308413204,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Map<SegmentInfo,Boolean> segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.containsKey(info)) {\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          if (last > 1 || !isOptimized(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.asList().subList(0, last)));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.contains(info)) {\n\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          if (last > 1 || !isOptimized(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.asList().subList(0, last)));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Map<SegmentInfo,Boolean> segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.containsKey(info)) {\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          if (last > 1 || !isOptimized(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.asList().subList(0, last)));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.contains(info)) {\n\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          if (last > 1 || !isOptimized(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.asList().subList(0, last)));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38a62612cfa4e104080d89d7751a8f1a258ac335":["8723a3379c08ae0b4ba0cf4f246306f86ad8362d"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e":["8017ab6544f30f93b106e419e7298173bad77f69"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["7ab99e8c71442b92c320e218141dee04a9b91ce8","38a62612cfa4e104080d89d7751a8f1a258ac335"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["38a62612cfa4e104080d89d7751a8f1a258ac335"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["a3776dccca01c11e7046323cfad46a3b4a471233","09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a3776dccca01c11e7046323cfad46a3b4a471233":["38a62612cfa4e104080d89d7751a8f1a258ac335","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8017ab6544f30f93b106e419e7298173bad77f69":["7ab99e8c71442b92c320e218141dee04a9b91ce8","8723a3379c08ae0b4ba0cf4f246306f86ad8362d"],"8723a3379c08ae0b4ba0cf4f246306f86ad8362d":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"38a62612cfa4e104080d89d7751a8f1a258ac335":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","786a4d25ca958a1f315a9d6a74f0441fdafcd522","a3776dccca01c11e7046323cfad46a3b4a471233"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8017ab6544f30f93b106e419e7298173bad77f69","8723a3379c08ae0b4ba0cf4f246306f86ad8362d"],"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":[],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8017ab6544f30f93b106e419e7298173bad77f69":["4a69e5860d014751cc9329dfeb441a6d8fd1ed8e"],"8723a3379c08ae0b4ba0cf4f246306f86ad8362d":["38a62612cfa4e104080d89d7751a8f1a258ac335","8017ab6544f30f93b106e419e7298173bad77f69"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","c3a8a449466c1ff7ce2274fe73dab487256964b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}