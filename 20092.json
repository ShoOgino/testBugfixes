{"path":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.MockDefaultFlushPolicy#onDelete(DocumentsWriterFlushControl,DocumentsWriterPerThread).mjava","commits":[{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.MockDefaultFlushPolicy#onDelete(DocumentsWriterFlushControl,DocumentsWriterPerThread).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.MockDefaultFlushPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"    @Override\n    public void onDelete(DocumentsWriterFlushControl control, DocumentsWriterPerThread perThread) {\n      final ArrayList<DocumentsWriterPerThread> pending = new ArrayList<>();\n      final ArrayList<DocumentsWriterPerThread> notPending = new ArrayList<>();\n      findPending(control, pending, notPending);\n      final boolean flushCurrent = perThread.isFlushPending();\n      final DocumentsWriterPerThread toFlush;\n      if (perThread.isFlushPending()) {\n        toFlush = perThread;\n      } else {\n        toFlush = null;\n      }\n      super.onDelete(control, perThread);\n      if (toFlush != null) {\n        if (flushCurrent) {\n          assertTrue(pending.remove(toFlush));\n        } else {\n          assertTrue(notPending.remove(toFlush));\n        }\n        assertTrue(toFlush.isFlushPending());\n        hasMarkedPending = true;\n      }\n\n      for (DocumentsWriterPerThread dwpt : notPending) {\n        assertFalse(dwpt.isFlushPending());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n      final ArrayList<ThreadState> pending = new ArrayList<>();\n      final ArrayList<ThreadState> notPending = new ArrayList<>();\n      findPending(control, pending, notPending);\n      final boolean flushCurrent = state.flushPending;\n      final ThreadState toFlush;\n      if (state.flushPending) {\n        toFlush = state;\n      } else {\n        toFlush = null;\n      }\n      super.onDelete(control, state);\n      if (toFlush != null) {\n        if (flushCurrent) {\n          assertTrue(pending.remove(toFlush));\n        } else {\n          assertTrue(notPending.remove(toFlush));\n        }\n        assertTrue(toFlush.flushPending);\n        hasMarkedPending = true;\n      }\n\n      for (ThreadState threadState : notPending) {\n        assertFalse(threadState.flushPending);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["264935965977b4a9e2f3920420647072c9c49176"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["264935965977b4a9e2f3920420647072c9c49176"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}