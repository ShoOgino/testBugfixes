{"path":"src/test/org/apache/solr/util/TestNumberUtils#testConverters().mjava","commits":[{"id":"a65a1a6171dfe798e06ba17f494a7a8747a11baa","date":1212716672,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/util/TestNumberUtils#testConverters().mjava","pathOld":"/dev/null","sourceNew":"  public void testConverters()\n  {\n    int iter=1000;\n    int arrsz=100000;\n    int num=12345;\n\n    // INTEGERS\n    List<Converter> converters = new ArrayList<Converter>();\n    converters.add( new Int2Int() );\n    converters.add( new SortInt() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    \n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getSpecial();\n        Comparable n2 = getSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // LONG\n    converters.clear();\n    converters.add( new SortLong() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getLongSpecial();\n        Comparable n2 = getLongSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // FLOAT\n    converters.clear();\n    converters.add( new Float2Float() );\n    converters.add( new SortFloat() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getFloatSpecial();\n        Comparable n2 = getFloatSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // DOUBLE\n    converters.clear();\n    converters.add( new SortDouble() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getDoubleSpecial();\n        Comparable n2 = getDoubleSpecial();\n        test( n1, n2, c );\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/TestNumberUtils#testConverters().mjava","pathOld":"src/test/org/apache/solr/util/TestNumberUtils#testConverters().mjava","sourceNew":"  public void testConverters()\n  {\n    int iter=1000;\n    int arrsz=100000;\n    int num=12345;\n\n    // INTEGERS\n    List<Converter> converters = new ArrayList<Converter>();\n    converters.add( new Int2Int() );\n    converters.add( new SortInt() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    \n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getSpecial();\n        Comparable n2 = getSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // LONG\n    converters.clear();\n    converters.add( new SortLong() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getLongSpecial();\n        Comparable n2 = getLongSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // FLOAT\n    converters.clear();\n    converters.add( new Float2Float() );\n    converters.add( new SortFloat() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getFloatSpecial();\n        Comparable n2 = getFloatSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // DOUBLE\n    converters.clear();\n    converters.add( new SortDouble() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getDoubleSpecial();\n        Comparable n2 = getDoubleSpecial();\n        test( n1, n2, c );\n      }\n    }\n  }\n\n","sourceOld":"  public void testConverters()\n  {\n    int iter=1000;\n    int arrsz=100000;\n    int num=12345;\n\n    // INTEGERS\n    List<Converter> converters = new ArrayList<Converter>();\n    converters.add( new Int2Int() );\n    converters.add( new SortInt() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    \n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getSpecial();\n        Comparable n2 = getSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // LONG\n    converters.clear();\n    converters.add( new SortLong() );\n    converters.add( new Base10kS() );\n    converters.add( new Base100S() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getLongSpecial();\n        Comparable n2 = getLongSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // FLOAT\n    converters.clear();\n    converters.add( new Float2Float() );\n    converters.add( new SortFloat() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getFloatSpecial();\n        Comparable n2 = getFloatSpecial();\n        test( n1, n2, c );\n      }\n    }\n\n    // DOUBLE\n    converters.clear();\n    converters.add( new SortDouble() );\n    for( Converter c : converters ) {\n      for (int i=0; i<iter; i++) {\n        Comparable n1 = getDoubleSpecial();\n        Comparable n2 = getDoubleSpecial();\n        test( n1, n2, c );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a65a1a6171dfe798e06ba17f494a7a8747a11baa":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["a65a1a6171dfe798e06ba17f494a7a8747a11baa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a65a1a6171dfe798e06ba17f494a7a8747a11baa":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["a65a1a6171dfe798e06ba17f494a7a8747a11baa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}