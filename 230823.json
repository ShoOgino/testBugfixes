{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#clone().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#clone().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#clone().mjava","sourceNew":"  /**\n   * Efficiently clones the IndexReader (sharing most\n   * internal state).\n   * <p>\n   * On cloning a reader with pending changes (deletions,\n   * norms), the original reader transfers its write lock to\n   * the cloned reader.  This means only the cloned reader\n   * may make further changes to the index, and commit the\n   * changes to the index on close, but the old reader still\n   * reflects all changes made up until it was cloned.\n   * <p>\n   * Like {@link #reopen()}, it's safe to make changes to\n   * either the original or the cloned reader: all shared\n   * mutable state obeys \"copy on write\" semantics to ensure\n   * the changes are not seen by other readers.\n   * <p>\n   */\n  @Override\n  public synchronized Object clone() {\n    throw new UnsupportedOperationException(\"This reader does not implement clone()\");\n  }\n\n","sourceOld":"  /**\n   * Efficiently clones the IndexReader (sharing most\n   * internal state).\n   * <p>\n   * On cloning a reader with pending changes (deletions,\n   * norms), the original reader transfers its write lock to\n   * the cloned reader.  This means only the cloned reader\n   * may make further changes to the index, and commit the\n   * changes to the index on close, but the old reader still\n   * reflects all changes made up until it was cloned.\n   * <p>\n   * Like {@link #reopen()}, it's safe to make changes to\n   * either the original or the cloned reader: all shared\n   * mutable state obeys \"copy on write\" semantics to ensure\n   * the changes are not seen by other readers.\n   * <p>\n   */\n  @Override\n  public synchronized Object clone() {\n    throw new UnsupportedOperationException(\"This reader does not implement clone()\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#clone().mjava","sourceNew":"  /**\n   * Efficiently clones the IndexReader (sharing most\n   * internal state).\n   * <p>\n   * On cloning a reader with pending changes (deletions,\n   * norms), the original reader transfers its write lock to\n   * the cloned reader.  This means only the cloned reader\n   * may make further changes to the index, and commit the\n   * changes to the index on close, but the old reader still\n   * reflects all changes made up until it was cloned.\n   * <p>\n   * Like {@link #openIfChanged(IndexReader)}, it's safe to make changes to\n   * either the original or the cloned reader: all shared\n   * mutable state obeys \"copy on write\" semantics to ensure\n   * the changes are not seen by other readers.\n   * <p>\n   */\n  @Override\n  public synchronized Object clone() {\n    throw new UnsupportedOperationException(\"This reader does not implement clone()\");\n  }\n\n","sourceOld":"  /**\n   * Efficiently clones the IndexReader (sharing most\n   * internal state).\n   * <p>\n   * On cloning a reader with pending changes (deletions,\n   * norms), the original reader transfers its write lock to\n   * the cloned reader.  This means only the cloned reader\n   * may make further changes to the index, and commit the\n   * changes to the index on close, but the old reader still\n   * reflects all changes made up until it was cloned.\n   * <p>\n   * Like {@link #reopen()}, it's safe to make changes to\n   * either the original or the cloned reader: all shared\n   * mutable state obeys \"copy on write\" semantics to ensure\n   * the changes are not seen by other readers.\n   * <p>\n   */\n  @Override\n  public synchronized Object clone() {\n    throw new UnsupportedOperationException(\"This reader does not implement clone()\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dd8cac059f4a5d4491e279aa2d07064392f9357","date":1323099195,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#clone().mjava","sourceNew":"  /**\n   * Efficiently clones the IndexReader (sharing most\n   * internal state).\n   */\n  @Override\n  public synchronized Object clone() {\n    throw new UnsupportedOperationException(\"This reader does not implement clone()\");\n  }\n\n","sourceOld":"  /**\n   * Efficiently clones the IndexReader (sharing most\n   * internal state).\n   * <p>\n   * On cloning a reader with pending changes (deletions,\n   * norms), the original reader transfers its write lock to\n   * the cloned reader.  This means only the cloned reader\n   * may make further changes to the index, and commit the\n   * changes to the index on close, but the old reader still\n   * reflects all changes made up until it was cloned.\n   * <p>\n   * Like {@link #openIfChanged(IndexReader)}, it's safe to make changes to\n   * either the original or the cloned reader: all shared\n   * mutable state obeys \"copy on write\" semantics to ensure\n   * the changes are not seen by other readers.\n   * <p>\n   */\n  @Override\n  public synchronized Object clone() {\n    throw new UnsupportedOperationException(\"This reader does not implement clone()\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#clone().mjava","sourceNew":"  /**\n   * Efficiently clones the IndexReader (sharing most\n   * internal state).\n   */\n  @Override\n  public synchronized Object clone() {\n    throw new UnsupportedOperationException(\"This reader does not implement clone()\");\n  }\n\n","sourceOld":"  /**\n   * Efficiently clones the IndexReader (sharing most\n   * internal state).\n   * <p>\n   * On cloning a reader with pending changes (deletions,\n   * norms), the original reader transfers its write lock to\n   * the cloned reader.  This means only the cloned reader\n   * may make further changes to the index, and commit the\n   * changes to the index on close, but the old reader still\n   * reflects all changes made up until it was cloned.\n   * <p>\n   * Like {@link #openIfChanged(IndexReader)}, it's safe to make changes to\n   * either the original or the cloned reader: all shared\n   * mutable state obeys \"copy on write\" semantics to ensure\n   * the changes are not seen by other readers.\n   * <p>\n   */\n  @Override\n  public synchronized Object clone() {\n    throw new UnsupportedOperationException(\"This reader does not implement clone()\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#clone().mjava","sourceNew":"  /**\n   * Efficiently clones the IndexReader (sharing most\n   * internal state).\n   */\n  @Override\n  public synchronized Object clone() {\n    throw new UnsupportedOperationException(\"This reader does not implement clone()\");\n  }\n\n","sourceOld":"  /**\n   * Efficiently clones the IndexReader (sharing most\n   * internal state).\n   * <p>\n   * On cloning a reader with pending changes (deletions,\n   * norms), the original reader transfers its write lock to\n   * the cloned reader.  This means only the cloned reader\n   * may make further changes to the index, and commit the\n   * changes to the index on close, but the old reader still\n   * reflects all changes made up until it was cloned.\n   * <p>\n   * Like {@link #openIfChanged(IndexReader)}, it's safe to make changes to\n   * either the original or the cloned reader: all shared\n   * mutable state obeys \"copy on write\" semantics to ensure\n   * the changes are not seen by other readers.\n   * <p>\n   */\n  @Override\n  public synchronized Object clone() {\n    throw new UnsupportedOperationException(\"This reader does not implement clone()\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#clone().mjava","sourceNew":null,"sourceOld":"  /**\n   * Efficiently clones the IndexReader (sharing most\n   * internal state).\n   */\n  @Override\n  public synchronized Object clone() {\n    throw new UnsupportedOperationException(\"This reader does not implement clone()\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["8a8259c922a83abc544609227a60d48e5ee93e7e","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["8a8259c922a83abc544609227a60d48e5ee93e7e","2dd8cac059f4a5d4491e279aa2d07064392f9357"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2dd8cac059f4a5d4491e279aa2d07064392f9357":["8a8259c922a83abc544609227a60d48e5ee93e7e"]},"commit2Childs":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","2dd8cac059f4a5d4491e279aa2d07064392f9357"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","9ce667c6d3400b22523701c549c0d35e26da8b46"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"2dd8cac059f4a5d4491e279aa2d07064392f9357":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}