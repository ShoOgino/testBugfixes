{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#MemoryIndexOffsetStrategy(String,Predicate[String],BytesRef[],PhraseHelper,CharacterRunAutomaton[],Analyzer,Function[Query,Collection[Query]]).mjava","commits":[{"id":"5675b3bced0b155f0ff8001ce2e1e502be7c92f6","date":1480972317,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#MemoryIndexOffsetStrategy(String,Predicate[String],BytesRef[],PhraseHelper,CharacterRunAutomaton[],Analyzer,Function[Query,Collection[Query]]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#MemoryIndexOffsetStrategy(String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Analyzer,Function[Query,Collection[Query]]).mjava","sourceNew":"  public MemoryIndexOffsetStrategy(String field, Predicate<String> fieldMatcher, BytesRef[] extractedTerms, PhraseHelper phraseHelper,\n                                   CharacterRunAutomaton[] automata, Analyzer analyzer,\n                                   Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    super(field, extractedTerms, phraseHelper, automata, analyzer);\n    boolean storePayloads = phraseHelper.hasPositionSensitivity(); // might be needed\n    memoryIndex = new MemoryIndex(true, storePayloads);//true==store offsets\n    leafReader = (LeafReader) memoryIndex.createSearcher().getIndexReader(); // appears to be re-usable\n    // preFilter for MemoryIndex\n    preMemIndexFilterAutomaton = buildCombinedAutomaton(fieldMatcher, terms, this.automata, phraseHelper, multiTermQueryRewrite);\n  }\n\n","sourceOld":"  public MemoryIndexOffsetStrategy(String field, BytesRef[] extractedTerms, PhraseHelper phraseHelper,\n                                   CharacterRunAutomaton[] automata, Analyzer analyzer,\n                                   Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    super(field, extractedTerms, phraseHelper, automata, analyzer);\n    boolean storePayloads = phraseHelper.hasPositionSensitivity(); // might be needed\n    memoryIndex = new MemoryIndex(true, storePayloads);//true==store offsets\n    leafReader = (LeafReader) memoryIndex.createSearcher().getIndexReader(); // appears to be re-usable\n    // preFilter for MemoryIndex\n    preMemIndexFilterAutomaton = buildCombinedAutomaton(field, terms, this.automata, phraseHelper, multiTermQueryRewrite);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d","date":1481116359,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#MemoryIndexOffsetStrategy(String,Predicate[String],BytesRef[],PhraseHelper,CharacterRunAutomaton[],Analyzer,Function[Query,Collection[Query]]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#MemoryIndexOffsetStrategy(String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Analyzer,Function[Query,Collection[Query]]).mjava","sourceNew":"  public MemoryIndexOffsetStrategy(String field, Predicate<String> fieldMatcher, BytesRef[] extractedTerms, PhraseHelper phraseHelper,\n                                   CharacterRunAutomaton[] automata, Analyzer analyzer,\n                                   Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    super(field, extractedTerms, phraseHelper, automata, analyzer);\n    boolean storePayloads = phraseHelper.hasPositionSensitivity(); // might be needed\n    memoryIndex = new MemoryIndex(true, storePayloads);//true==store offsets\n    leafReader = (LeafReader) memoryIndex.createSearcher().getIndexReader(); // appears to be re-usable\n    // preFilter for MemoryIndex\n    preMemIndexFilterAutomaton = buildCombinedAutomaton(fieldMatcher, terms, this.automata, phraseHelper, multiTermQueryRewrite);\n  }\n\n","sourceOld":"  public MemoryIndexOffsetStrategy(String field, BytesRef[] extractedTerms, PhraseHelper phraseHelper,\n                                   CharacterRunAutomaton[] automata, Analyzer analyzer,\n                                   Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    super(field, extractedTerms, phraseHelper, automata, analyzer);\n    boolean storePayloads = phraseHelper.hasPositionSensitivity(); // might be needed\n    memoryIndex = new MemoryIndex(true, storePayloads);//true==store offsets\n    leafReader = (LeafReader) memoryIndex.createSearcher().getIndexReader(); // appears to be re-usable\n    // preFilter for MemoryIndex\n    preMemIndexFilterAutomaton = buildCombinedAutomaton(field, terms, this.automata, phraseHelper, multiTermQueryRewrite);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#MemoryIndexOffsetStrategy(String,Predicate[String],BytesRef[],PhraseHelper,CharacterRunAutomaton[],Analyzer,Function[Query,Collection[Query]]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#MemoryIndexOffsetStrategy(String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Analyzer,Function[Query,Collection[Query]]).mjava","sourceNew":"  public MemoryIndexOffsetStrategy(String field, Predicate<String> fieldMatcher, BytesRef[] extractedTerms, PhraseHelper phraseHelper,\n                                   CharacterRunAutomaton[] automata, Analyzer analyzer,\n                                   Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    super(field, extractedTerms, phraseHelper, automata, analyzer);\n    boolean storePayloads = phraseHelper.hasPositionSensitivity(); // might be needed\n    memoryIndex = new MemoryIndex(true, storePayloads);//true==store offsets\n    leafReader = (LeafReader) memoryIndex.createSearcher().getIndexReader(); // appears to be re-usable\n    // preFilter for MemoryIndex\n    preMemIndexFilterAutomaton = buildCombinedAutomaton(fieldMatcher, terms, this.automata, phraseHelper, multiTermQueryRewrite);\n  }\n\n","sourceOld":"  public MemoryIndexOffsetStrategy(String field, BytesRef[] extractedTerms, PhraseHelper phraseHelper,\n                                   CharacterRunAutomaton[] automata, Analyzer analyzer,\n                                   Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    super(field, extractedTerms, phraseHelper, automata, analyzer);\n    boolean storePayloads = phraseHelper.hasPositionSensitivity(); // might be needed\n    memoryIndex = new MemoryIndex(true, storePayloads);//true==store offsets\n    leafReader = (LeafReader) memoryIndex.createSearcher().getIndexReader(); // appears to be re-usable\n    // preFilter for MemoryIndex\n    preMemIndexFilterAutomaton = buildCombinedAutomaton(field, terms, this.automata, phraseHelper, multiTermQueryRewrite);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"795822cce6616d4035b5a4bdbb6c113ea2f715ba","date":1535599765,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#MemoryIndexOffsetStrategy(String,Predicate[String],BytesRef[],PhraseHelper,CharacterRunAutomaton[],Analyzer,Function[Query,Collection[Query]]).mjava","sourceNew":null,"sourceOld":"  public MemoryIndexOffsetStrategy(String field, Predicate<String> fieldMatcher, BytesRef[] extractedTerms, PhraseHelper phraseHelper,\n                                   CharacterRunAutomaton[] automata, Analyzer analyzer,\n                                   Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    super(field, extractedTerms, phraseHelper, automata, analyzer);\n    boolean storePayloads = phraseHelper.hasPositionSensitivity(); // might be needed\n    memoryIndex = new MemoryIndex(true, storePayloads);//true==store offsets\n    leafReader = (LeafReader) memoryIndex.createSearcher().getIndexReader(); // appears to be re-usable\n    // preFilter for MemoryIndex\n    preMemIndexFilterAutomaton = buildCombinedAutomaton(fieldMatcher, terms, this.automata, phraseHelper, multiTermQueryRewrite);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5675b3bced0b155f0ff8001ce2e1e502be7c92f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5675b3bced0b155f0ff8001ce2e1e502be7c92f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"]},"commit2Childs":{"5675b3bced0b155f0ff8001ce2e1e502be7c92f6":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d":["9856095f7afb5a607bf5e65077615ed91273508c","795822cce6616d4035b5a4bdbb6c113ea2f715ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5675b3bced0b155f0ff8001ce2e1e502be7c92f6","ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}