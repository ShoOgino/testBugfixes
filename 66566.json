{"path":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#cancelRecovery().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#cancelRecovery().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void cancelRecovery() {\n    synchronized (recoveryLock) {\n      if (recoveryStrat != null) {\n        recoveryStrat.close();\n        \n        try {\n          recoveryStrat.join();\n        } catch (InterruptedException e) {\n          \n        }\n        \n        recoveryRunning = false;\n        recoveryLock.notifyAll();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#cancelRecovery().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void cancelRecovery() {\n    synchronized (recoveryLock) {\n      if (recoveryStrat != null) {\n        recoveryStrat.close();\n        \n        try {\n          recoveryStrat.join();\n        } catch (InterruptedException e) {\n          \n        }\n        \n        recoveryRunning = false;\n        recoveryLock.notifyAll();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#cancelRecovery().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void cancelRecovery() {\n    synchronized (recoveryLock) {\n      if (recoveryStrat != null) {\n        recoveryStrat.close();\n        \n        try {\n          recoveryStrat.join();\n        } catch (InterruptedException e) {\n          \n        }\n        \n        recoveryRunning = false;\n        recoveryLock.notifyAll();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c76806dcdb4841b4f71ecfe9e9e95147f7201f2","date":1337787106,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#cancelRecovery().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#cancelRecovery().mjava","sourceNew":"  @Override\n  public void cancelRecovery() {\n    synchronized (recoveryLock) {\n      if (recoveryStrat != null) {\n        recoveryStrat.close();\n        try {\n          recoveryStrat.join();\n        } catch (InterruptedException e) {\n          \n        }\n        \n        recoveryRunning = false;\n        recoveryLock.notifyAll();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void cancelRecovery() {\n    synchronized (recoveryLock) {\n      if (recoveryStrat != null) {\n        recoveryStrat.close();\n        \n        try {\n          recoveryStrat.join();\n        } catch (InterruptedException e) {\n          \n        }\n        \n        recoveryRunning = false;\n        recoveryLock.notifyAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#cancelRecovery().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#cancelRecovery().mjava","sourceNew":"  @Override\n  public void cancelRecovery() {\n    synchronized (recoveryLock) {\n      if (recoveryStrat != null) {\n        recoveryStrat.close();\n        try {\n          recoveryStrat.join();\n        } catch (InterruptedException e) {\n          \n        }\n        \n        recoveryRunning = false;\n        recoveryLock.notifyAll();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void cancelRecovery() {\n    synchronized (recoveryLock) {\n      if (recoveryStrat != null) {\n        recoveryStrat.close();\n        \n        try {\n          recoveryStrat.join();\n        } catch (InterruptedException e) {\n          \n        }\n        \n        recoveryRunning = false;\n        recoveryLock.notifyAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86b15d2cd85c280577e7ffb378a05c8aa1faddea","date":1346329150,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#cancelRecovery().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#cancelRecovery().mjava","sourceNew":"  @Override\n  public void cancelRecovery() {\n    synchronized (recoveryLock) {\n      if (recoveryStrat != null) {\n        recoveryStrat.close();\n        while (true) {\n          try {\n            recoveryStrat.join();\n          } catch (InterruptedException e) {\n            // not interruptible - keep waiting\n            continue;\n          }\n          break;\n        }\n        \n        recoveryRunning = false;\n        recoveryLock.notifyAll();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void cancelRecovery() {\n    synchronized (recoveryLock) {\n      if (recoveryStrat != null) {\n        recoveryStrat.close();\n        try {\n          recoveryStrat.join();\n        } catch (InterruptedException e) {\n          \n        }\n        \n        recoveryRunning = false;\n        recoveryLock.notifyAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#cancelRecovery().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#cancelRecovery().mjava","sourceNew":"  @Override\n  public void cancelRecovery() {\n    synchronized (recoveryLock) {\n      if (recoveryStrat != null) {\n        recoveryStrat.close();\n        while (true) {\n          try {\n            recoveryStrat.join();\n          } catch (InterruptedException e) {\n            // not interruptible - keep waiting\n            continue;\n          }\n          break;\n        }\n        \n        recoveryRunning = false;\n        recoveryLock.notifyAll();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void cancelRecovery() {\n    synchronized (recoveryLock) {\n      if (recoveryStrat != null) {\n        recoveryStrat.close();\n        try {\n          recoveryStrat.join();\n        } catch (InterruptedException e) {\n          \n        }\n        \n        recoveryRunning = false;\n        recoveryLock.notifyAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6","date":1346692465,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#cancelRecovery().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#cancelRecovery().mjava","sourceNew":"  @Override\n  public void cancelRecovery() {\n    synchronized (recoveryLock) {\n      if (recoveryStrat != null && recoveryRunning) {\n        recoveryStrat.close();\n        while (true) {\n          try {\n            recoveryStrat.join();\n          } catch (InterruptedException e) {\n            // not interruptible - keep waiting\n            continue;\n          }\n          break;\n        }\n        \n        recoveryRunning = false;\n        recoveryLock.notifyAll();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void cancelRecovery() {\n    synchronized (recoveryLock) {\n      if (recoveryStrat != null) {\n        recoveryStrat.close();\n        while (true) {\n          try {\n            recoveryStrat.join();\n          } catch (InterruptedException e) {\n            // not interruptible - keep waiting\n            continue;\n          }\n          break;\n        }\n        \n        recoveryRunning = false;\n        recoveryLock.notifyAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9e52dc3261e61fb422a343ba4e6df9a9fab88e6","date":1448994587,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#cancelRecovery().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#cancelRecovery().mjava","sourceNew":"  @Override\n  public void cancelRecovery() {\n    synchronized (recoveryLock) {\n      if (recoveryStrat != null && recoveryRunning) {\n        recoveryStrat.close();\n        while (true) {\n          try {\n            future.get();\n          } catch (InterruptedException e) {\n            // not interruptible - keep waiting\n            continue;\n          } catch (ExecutionException e) {\n            break;\n          }\n          break;\n        }\n        \n        recoveryRunning = false;\n        recoveryLock.notifyAll();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void cancelRecovery() {\n    synchronized (recoveryLock) {\n      if (recoveryStrat != null && recoveryRunning) {\n        recoveryStrat.close();\n        while (true) {\n          try {\n            recoveryStrat.join();\n          } catch (InterruptedException e) {\n            // not interruptible - keep waiting\n            continue;\n          }\n          break;\n        }\n        \n        recoveryRunning = false;\n        recoveryLock.notifyAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"faee9bc2585a43773210f032b2bdcff90d9a12bf","date":1450411263,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#cancelRecovery().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#cancelRecovery().mjava","sourceNew":"  @Override\n  public void cancelRecovery() {\n    if (recoveryStrat != null) {\n      try {\n        recoveryStrat.close();\n      } catch (NullPointerException e) {\n        // okay\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void cancelRecovery() {\n    synchronized (recoveryLock) {\n      if (recoveryStrat != null && recoveryRunning) {\n        recoveryStrat.close();\n        while (true) {\n          try {\n            future.get();\n          } catch (InterruptedException e) {\n            // not interruptible - keep waiting\n            continue;\n          } catch (ExecutionException e) {\n            break;\n          }\n          break;\n        }\n        \n        recoveryRunning = false;\n        recoveryLock.notifyAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b9e52dc3261e61fb422a343ba4e6df9a9fab88e6":["7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"faee9bc2585a43773210f032b2bdcff90d9a12bf":["b9e52dc3261e61fb422a343ba4e6df9a9fab88e6"],"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6":["86b15d2cd85c280577e7ffb378a05c8aa1faddea"],"5c76806dcdb4841b4f71ecfe9e9e95147f7201f2":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","5c76806dcdb4841b4f71ecfe9e9e95147f7201f2"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["5c76806dcdb4841b4f71ecfe9e9e95147f7201f2","86b15d2cd85c280577e7ffb378a05c8aa1faddea"],"86b15d2cd85c280577e7ffb378a05c8aa1faddea":["5c76806dcdb4841b4f71ecfe9e9e95147f7201f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["faee9bc2585a43773210f032b2bdcff90d9a12bf"]},"commit2Childs":{"b9e52dc3261e61fb422a343ba4e6df9a9fab88e6":["faee9bc2585a43773210f032b2bdcff90d9a12bf"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"faee9bc2585a43773210f032b2bdcff90d9a12bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6":["b9e52dc3261e61fb422a343ba4e6df9a9fab88e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"5c76806dcdb4841b4f71ecfe9e9e95147f7201f2":["3599646b4d4c346cf74d334813488b8b337b5bf5","05a14b2611ead08655a2b2bdc61632eb31316e57","86b15d2cd85c280577e7ffb378a05c8aa1faddea"],"3599646b4d4c346cf74d334813488b8b337b5bf5":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","5c76806dcdb4841b4f71ecfe9e9e95147f7201f2","3599646b4d4c346cf74d334813488b8b337b5bf5","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"86b15d2cd85c280577e7ffb378a05c8aa1faddea":["7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6","05a14b2611ead08655a2b2bdc61632eb31316e57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","3599646b4d4c346cf74d334813488b8b337b5bf5","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}