{"path":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","commits":[{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(ValueType,DocState,FieldInfo).mjava","sourceNew":"  DocValuesConsumer docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    PerDocConsumer perDocConsumer = perDocConsumers.get(0);\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      DocValuesFormat dvFormat = docState.docWriter.codec.docValuesFormat();\n      perDocConsumer = dvFormat.docsConsumer(perDocWriteState);\n      perDocConsumers.put(0, perDocConsumer);\n    }\n\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    fieldInfo.setDocValuesType(valueType);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","sourceOld":"  DocValuesConsumer docValuesConsumer(ValueType valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"IndexDocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    PerDocConsumer perDocConsumer = perDocConsumers.get(0);\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      DocValuesFormat dvFormat = docState.docWriter.codec.docValuesFormat();\n      perDocConsumer = dvFormat.docsConsumer(perDocWriteState);\n      perDocConsumers.put(0, perDocConsumer);\n    }\n\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    fieldInfo.setDocValuesType(valueType);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocState,FieldInfo).mjava","sourceNew":"  DocValuesConsumer docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    PerDocConsumer perDocConsumer = perDocConsumers.get(0);\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      DocValuesFormat dvFormat = docState.docWriter.codec.docValuesFormat();\n      perDocConsumer = dvFormat.docsConsumer(perDocWriteState);\n      perDocConsumers.put(0, perDocConsumer);\n    }\n\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    fieldInfo.setDocValuesType(valueType);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","sourceOld":"  DocValuesConsumer docValuesConsumer(DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"IndexDocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    PerDocConsumer perDocConsumer = perDocConsumers.get(0);\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      DocValuesFormat dvFormat = docState.docWriter.codec.docValuesFormat();\n      perDocConsumer = dvFormat.docsConsumer(perDocWriteState);\n      perDocConsumers.put(0, perDocConsumer);\n    }\n    boolean success = false;\n    DocValuesConsumer docValuesConsumer = null;\n    try {\n      docValuesConsumer = perDocConsumer.addValuesField(fieldInfo);\n      fieldInfo.commitDocValues();\n      success = true;\n    } finally {\n      if (!success) {\n        fieldInfo.revertUncommitted();\n      }\n    }\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6e3376a314fcc2b31bc46d399c2ff23552b78d6","date":1325780477,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","sourceNew":"  DocValuesConsumer docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    PerDocConsumer perDocConsumer = perDocConsumers.get(0);\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      DocValuesFormat dvFormat = docState.docWriter.codec.docValuesFormat();\n      perDocConsumer = dvFormat.docsConsumer(perDocWriteState);\n      perDocConsumers.put(0, perDocConsumer);\n    }\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    fieldInfo.setDocValuesType(valueType);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","sourceOld":"  DocValuesConsumer docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    PerDocConsumer perDocConsumer = perDocConsumers.get(0);\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      DocValuesFormat dvFormat = docState.docWriter.codec.docValuesFormat();\n      perDocConsumer = dvFormat.docsConsumer(perDocWriteState);\n      perDocConsumers.put(0, perDocConsumer);\n    }\n\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    fieldInfo.setDocValuesType(valueType);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","sourceNew":"  DocValuesConsumer docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      perDocConsumer = docState.docWriter.codec.docValuesFormat().docsConsumer(perDocWriteState);\n    }\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    fieldInfo.setDocValuesType(valueType);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","sourceOld":"  DocValuesConsumer docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    PerDocConsumer perDocConsumer = perDocConsumers.get(0);\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      DocValuesFormat dvFormat = docState.docWriter.codec.docValuesFormat();\n      perDocConsumer = dvFormat.docsConsumer(perDocWriteState);\n      perDocConsumers.put(0, perDocConsumer);\n    }\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    fieldInfo.setDocValuesType(valueType);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","bugFix":["7b91922b55d15444d554721b352861d028eb8278"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e8d5a6ffbfa3405d234a87c833741eabed98d13","date":1326725835,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","sourceNew":"  DocValuesConsumer docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      perDocConsumer = docState.docWriter.codec.docValuesFormat().docsConsumer(perDocWriteState);\n    }\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    fieldInfo.setDocValuesType(valueType, false);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","sourceOld":"  DocValuesConsumer docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      perDocConsumer = docState.docWriter.codec.docValuesFormat().docsConsumer(perDocWriteState);\n    }\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    fieldInfo.setDocValuesType(valueType);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","sourceNew":"  DocValuesConsumer docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      perDocConsumer = docState.docWriter.codec.docValuesFormat().docsConsumer(perDocWriteState);\n    }\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    fieldInfo.setDocValuesType(valueType, false);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","sourceOld":"  DocValuesConsumer docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      perDocConsumer = docState.docWriter.codec.docValuesFormat().docsConsumer(perDocWriteState);\n    }\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    fieldInfo.setDocValuesType(valueType, false);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["fa0f44f887719e97183771e977cfc4bfb485b766"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fa0f44f887719e97183771e977cfc4bfb485b766":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"]},"commit2Childs":{"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"fa0f44f887719e97183771e977cfc4bfb485b766":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["fa0f44f887719e97183771e977cfc4bfb485b766"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}