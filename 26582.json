{"path":"solr/core/src/test/org/apache/solr/cloud/RecoveryAfterSoftCommitTest#doTest().mjava","commits":[{"id":"1b7910b51406c081814c946331386da674f26aa5","date":1421770778,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RecoveryAfterSoftCommitTest#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    // flush twice\n    for (int i=0; i<4; i++) {\n      SolrInputDocument document = new SolrInputDocument();\n      document.addField(\"id\", String.valueOf(i));\n      document.addField(\"a_t\", \"text_\" + i);\n      cloudClient.add(document);\n    }\n\n    // soft-commit so searchers are open on un-committed but flushed segment files\n    AbstractUpdateRequest request = new UpdateRequest().setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true, true);\n    cloudClient.request(request);\n\n    Replica notLeader = ensureAllReplicasAreActive(DEFAULT_COLLECTION, \"shard1\", 1, 2, 30).get(0);\n    // ok, now introduce a network partition between the leader and the replica\n    SocketProxy proxy = getProxyForReplica(notLeader);\n\n    proxy.close();\n\n    // add more than 100 docs so that peer sync cannot be used for recovery\n    for (int i=5; i<115; i++) {\n      SolrInputDocument document = new SolrInputDocument();\n      document.addField(\"id\", String.valueOf(i));\n      document.addField(\"a_t\", \"text_\" + i);\n      cloudClient.add(document);\n    }\n\n    // Have the partition last at least 1 sec\n    // While this gives the impression that recovery is timing related, this is\n    // really only\n    // to give time for the state to be written to ZK before the test completes.\n    // In other words,\n    // without a brief pause, the test finishes so quickly that it doesn't give\n    // time for the recovery process to kick-in\n    Thread.sleep(2000L);\n\n    proxy.reopen();\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(DEFAULT_COLLECTION, \"shard1\", 1, 2, 30);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["82ccbe4be1d82140cd84efebc8fa7fe4ddaa23ee"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RecoveryAfterSoftCommitTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RecoveryAfterSoftCommitTest#doTest().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    // flush twice\n    for (int i=0; i<4; i++) {\n      SolrInputDocument document = new SolrInputDocument();\n      document.addField(\"id\", String.valueOf(i));\n      document.addField(\"a_t\", \"text_\" + i);\n      cloudClient.add(document);\n    }\n\n    // soft-commit so searchers are open on un-committed but flushed segment files\n    AbstractUpdateRequest request = new UpdateRequest().setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true, true);\n    cloudClient.request(request);\n\n    Replica notLeader = ensureAllReplicasAreActive(DEFAULT_COLLECTION, \"shard1\", 1, 2, 30).get(0);\n    // ok, now introduce a network partition between the leader and the replica\n    SocketProxy proxy = getProxyForReplica(notLeader);\n\n    proxy.close();\n\n    // add more than 100 docs so that peer sync cannot be used for recovery\n    for (int i=5; i<115; i++) {\n      SolrInputDocument document = new SolrInputDocument();\n      document.addField(\"id\", String.valueOf(i));\n      document.addField(\"a_t\", \"text_\" + i);\n      cloudClient.add(document);\n    }\n\n    // Have the partition last at least 1 sec\n    // While this gives the impression that recovery is timing related, this is\n    // really only\n    // to give time for the state to be written to ZK before the test completes.\n    // In other words,\n    // without a brief pause, the test finishes so quickly that it doesn't give\n    // time for the recovery process to kick-in\n    Thread.sleep(2000L);\n\n    proxy.reopen();\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(DEFAULT_COLLECTION, \"shard1\", 1, 2, 30);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    // flush twice\n    for (int i=0; i<4; i++) {\n      SolrInputDocument document = new SolrInputDocument();\n      document.addField(\"id\", String.valueOf(i));\n      document.addField(\"a_t\", \"text_\" + i);\n      cloudClient.add(document);\n    }\n\n    // soft-commit so searchers are open on un-committed but flushed segment files\n    AbstractUpdateRequest request = new UpdateRequest().setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true, true);\n    cloudClient.request(request);\n\n    Replica notLeader = ensureAllReplicasAreActive(DEFAULT_COLLECTION, \"shard1\", 1, 2, 30).get(0);\n    // ok, now introduce a network partition between the leader and the replica\n    SocketProxy proxy = getProxyForReplica(notLeader);\n\n    proxy.close();\n\n    // add more than 100 docs so that peer sync cannot be used for recovery\n    for (int i=5; i<115; i++) {\n      SolrInputDocument document = new SolrInputDocument();\n      document.addField(\"id\", String.valueOf(i));\n      document.addField(\"a_t\", \"text_\" + i);\n      cloudClient.add(document);\n    }\n\n    // Have the partition last at least 1 sec\n    // While this gives the impression that recovery is timing related, this is\n    // really only\n    // to give time for the state to be written to ZK before the test completes.\n    // In other words,\n    // without a brief pause, the test finishes so quickly that it doesn't give\n    // time for the recovery process to kick-in\n    Thread.sleep(2000L);\n\n    proxy.reopen();\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(DEFAULT_COLLECTION, \"shard1\", 1, 2, 30);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"abb23fcc2461782ab204e61213240feb77d355aa":["1b7910b51406c081814c946331386da674f26aa5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1b7910b51406c081814c946331386da674f26aa5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"]},"commit2Childs":{"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1b7910b51406c081814c946331386da674f26aa5"],"1b7910b51406c081814c946331386da674f26aa5":["abb23fcc2461782ab204e61213240feb77d355aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}