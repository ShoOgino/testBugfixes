{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newField(PayloadHelper.FIELD, \"one two three one four three\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader.getTopReaderContext(), snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newField(PayloadHelper.FIELD, \"one two three one four three\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader.getTopReaderContext(), snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newField(PayloadHelper.FIELD, \"one two three one four three\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader.getTopReaderContext(), snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newField(PayloadHelper.FIELD, \"one two three one four three\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader.getTopReaderContext(), snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader.getTopReaderContext(), snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newField(PayloadHelper.FIELD, \"one two three one four three\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader.getTopReaderContext(), snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"211b1506e56f7860762fbd4698f6d1d1b57f672c","date":1344976996,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader.getContext(), snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader.getTopReaderContext(), snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader.getContext(), snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader.getTopReaderContext(), snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader.getContext(), snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader.getTopReaderContext(), snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader.getTopReaderContext(), snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader.getContext(), snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader.getContext(), snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader.getTopReaderContext(), snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader.getContext(), snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader.getContext(), snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader.getContext(), snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader.getContext(), snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader.getContext(), snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader.getContext(), snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader, snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader.getContext(), snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader, snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader.getContext(), snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans#testSpanNot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader, snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader, snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["04f07771a2a7dd3a395700665ed839c3dae2def2","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["211b1506e56f7860762fbd4698f6d1d1b57f672c"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"fab172655716b96f7e42376116235017a922de3a":["d0ef034a4f10871667ae75181537775ddcf8ade4","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"04f07771a2a7dd3a395700665ed839c3dae2def2":["3c188105a9aae04f56c24996f98f8333fc825d2e","211b1506e56f7860762fbd4698f6d1d1b57f672c","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}