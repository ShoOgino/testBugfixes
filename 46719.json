{"path":"solr/test-framework/src/java/org/apache/solr/analysis/MockTokenizerFactory#MockTokenizerFactory(Map[String,String]).mjava","commits":[{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/analysis/MockTokenizerFactory#MockTokenizerFactory(Map[String,String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/analysis/MockTokenizerFactory#init(Map[String,String]).mjava","sourceNew":"  /** Creates a new MockTokenizerFactory */\n  public MockTokenizerFactory(Map<String,String> args) {\n    super(args);\n    String patternArg = args.remove(\"pattern\");\n    if (patternArg == null) {\n      patternArg = \"whitespace\";\n    }\n    \n    if (\"whitespace\".equalsIgnoreCase(patternArg)) {\n      pattern = MockTokenizer.WHITESPACE;\n    } else if (\"keyword\".equalsIgnoreCase(patternArg)) {\n      pattern = MockTokenizer.KEYWORD;\n    } else if (\"simple\".equalsIgnoreCase(patternArg)) {\n      pattern = MockTokenizer.SIMPLE;\n    } else {\n      throw new RuntimeException(\"invalid pattern!\");\n    }\n    \n    enableChecks = getBoolean(args, \"enableChecks\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String patternArg = args.get(\"pattern\");\n    if (patternArg == null) {\n      patternArg = \"whitespace\";\n    }\n    \n    if (\"whitespace\".equalsIgnoreCase(patternArg)) {\n      pattern = MockTokenizer.WHITESPACE;\n    } else if (\"keyword\".equalsIgnoreCase(patternArg)) {\n      pattern = MockTokenizer.KEYWORD;\n    } else if (\"simple\".equalsIgnoreCase(patternArg)) {\n      pattern = MockTokenizer.SIMPLE;\n    } else {\n      throw new RuntimeException(\"invalid pattern!\");\n    }\n    \n    enableChecks = getBoolean(\"enableChecks\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcae30df9fe9300569835aef42ec65802c7c0afb","date":1364859933,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/analysis/MockTokenizerFactory#MockTokenizerFactory(Map[String,String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/analysis/MockTokenizerFactory#MockTokenizerFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new MockTokenizerFactory */\n  public MockTokenizerFactory(Map<String,String> args) {\n    super(args);\n    String patternArg = get(args, \"pattern\", Arrays.asList(\"keyword\", \"simple\", \"whitespace\"));\n    if (\"keyword\".equalsIgnoreCase(patternArg)) {\n      pattern = MockTokenizer.KEYWORD;\n    } else if (\"simple\".equalsIgnoreCase(patternArg)) {\n      pattern = MockTokenizer.SIMPLE;\n    } else {\n      pattern = MockTokenizer.WHITESPACE;\n    }\n    \n    enableChecks = getBoolean(args, \"enableChecks\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new MockTokenizerFactory */\n  public MockTokenizerFactory(Map<String,String> args) {\n    super(args);\n    String patternArg = args.remove(\"pattern\");\n    if (patternArg == null) {\n      patternArg = \"whitespace\";\n    }\n    \n    if (\"whitespace\".equalsIgnoreCase(patternArg)) {\n      pattern = MockTokenizer.WHITESPACE;\n    } else if (\"keyword\".equalsIgnoreCase(patternArg)) {\n      pattern = MockTokenizer.KEYWORD;\n    } else if (\"simple\".equalsIgnoreCase(patternArg)) {\n      pattern = MockTokenizer.SIMPLE;\n    } else {\n      throw new RuntimeException(\"invalid pattern!\");\n    }\n    \n    enableChecks = getBoolean(args, \"enableChecks\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dcae30df9fe9300569835aef42ec65802c7c0afb":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dcae30df9fe9300569835aef42ec65802c7c0afb"]},"commit2Childs":{"dcae30df9fe9300569835aef42ec65802c7c0afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["dcae30df9fe9300569835aef42ec65802c7c0afb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}