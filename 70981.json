{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","commits":[{"id":"33ba398fa7984fdcb45fd76b87504d5adf7ca5e3","date":1373907993,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasic() throws Exception {\n    TermFreqPayload keys[] = new TermFreqPayload[] {\n      new TermFreqPayload(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new TermFreqPayload(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    File tempDir = _TestUtil.getTempDir(\"AnalyzingInfixSuggesterTest\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, tempDir, a, a, 3);\n    suggester.build(new TermFreqPayloadArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    suggester.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ec083aa3f3ecd55f91c47009d49e45553f99bd77","4637747f71df783fc2014ef1f1e0418466e3bed6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3aad8246db872dc16fbe6109f893457496b0240","date":1373920172,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    TermFreqPayload keys[] = new TermFreqPayload[] {\n      new TermFreqPayload(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new TermFreqPayload(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    File tempDir = _TestUtil.getTempDir(\"AnalyzingInfixSuggesterTest\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, tempDir, a, a, 3) {\n        @Override\n        protected Directory getDirectory(File path) {\n          return newDirectory();\n        }\n      };\n    suggester.build(new TermFreqPayloadArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    suggester.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    TermFreqPayload keys[] = new TermFreqPayload[] {\n      new TermFreqPayload(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new TermFreqPayload(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    File tempDir = _TestUtil.getTempDir(\"AnalyzingInfixSuggesterTest\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, tempDir, a, a, 3);\n    suggester.build(new TermFreqPayloadArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    suggester.close();\n  }\n\n","bugFix":null,"bugIntro":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasic() throws Exception {\n    TermFreqPayload keys[] = new TermFreqPayload[] {\n      new TermFreqPayload(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new TermFreqPayload(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    File tempDir = _TestUtil.getTempDir(\"AnalyzingInfixSuggesterTest\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, tempDir, a, a, 3) {\n        @Override\n        protected Directory getDirectory(File path) {\n          return newDirectory();\n        }\n      };\n    suggester.build(new TermFreqPayloadArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    suggester.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    File tempDir = _TestUtil.getTempDir(\"AnalyzingInfixSuggesterTest\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, tempDir, a, a, 3) {\n        @Override\n        protected Directory getDirectory(File path) {\n          return newDirectory();\n        }\n      };\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    suggester.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    TermFreqPayload keys[] = new TermFreqPayload[] {\n      new TermFreqPayload(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new TermFreqPayload(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    File tempDir = _TestUtil.getTempDir(\"AnalyzingInfixSuggesterTest\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, tempDir, a, a, 3) {\n        @Override\n        protected Directory getDirectory(File path) {\n          return newDirectory();\n        }\n      };\n    suggester.build(new TermFreqPayloadArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    suggester.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    File tempDir = TestUtil.getTempDir(\"AnalyzingInfixSuggesterTest\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, tempDir, a, a, 3) {\n        @Override\n        protected Directory getDirectory(File path) {\n          return newDirectory();\n        }\n      };\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    suggester.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    File tempDir = _TestUtil.getTempDir(\"AnalyzingInfixSuggesterTest\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, tempDir, a, a, 3) {\n        @Override\n        protected Directory getDirectory(File path) {\n          return newDirectory();\n        }\n      };\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    suggester.close();\n  }\n\n","bugFix":null,"bugIntro":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1e7da8a91a92330e8f04b171b83e655a4a25c31","date":1394125906,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newDirectory(), a, a, 3);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    suggester.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    File tempDir = TestUtil.getTempDir(\"AnalyzingInfixSuggesterTest\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, tempDir, a, a, 3) {\n        @Override\n        protected Directory getDirectory(File path) {\n          return newDirectory();\n        }\n      };\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    suggester.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4637747f71df783fc2014ef1f1e0418466e3bed6","date":1394196311,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newDirectory(), a, a, 3);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    suggester.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    File tempDir = TestUtil.getTempDir(\"AnalyzingInfixSuggesterTest\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, tempDir, a, a, 3) {\n        @Override\n        protected Directory getDirectory(File path) {\n          return newDirectory();\n        }\n      };\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    suggester.close();\n  }\n\n","bugFix":["33ba398fa7984fdcb45fd76b87504d5adf7ca5e3","b3aad8246db872dc16fbe6109f893457496b0240","6613659748fe4411a7dcf85266e55db1f95f7315"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newDirectory(), a, a, 3);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    suggester.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    File tempDir = TestUtil.getTempDir(\"AnalyzingInfixSuggesterTest\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, tempDir, a, a, 3) {\n        @Override\n        protected Directory getDirectory(File path) {\n          return newDirectory();\n        }\n      };\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    suggester.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6549d5ea6b7b25525309b981de3ec92b4dff99d1","date":1408666035,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    suggester.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newDirectory(), a, a, 3);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    suggester.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19e497fe4da591a79332da97681b8017d9c61165","date":1409030374,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    suggester.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    suggester.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ec083aa3f3ecd55f91c47009d49e45553f99bd77","date":1416002645,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).highlightKey);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    suggester.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).key);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).key);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).key);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    suggester.close();\n  }\n\n","bugFix":["33ba398fa7984fdcb45fd76b87504d5adf7ca5e3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7055cd9d1615c97eb7ddc5b4964c4e66e71ce273","date":1420568044,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).highlightKey);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n    \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"penny ea\", random()), 10, false, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> <b>ea</b>rned\", results.get(0).highlightKey);\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ea</b>r\", results.get(1).highlightKey);\n        \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, false);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertNull(results.get(0).highlightKey);\n    \n    testConstructorDefatuls(suggester, keys, a, true, true);\n    testConstructorDefatuls(suggester, keys, a, true, false);\n    testConstructorDefatuls(suggester, keys, a, false, false);\n    testConstructorDefatuls(suggester, keys, a, false, true);\n    \n    suggester.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).highlightKey);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    suggester.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca7fbb27b5ca0c241732978139f9680144cb2769","date":1420654222,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).highlightKey);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n    \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"penny ea\", random()), 10, false, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> <b>ea</b>rned\", results.get(0).highlightKey);\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ea</b>r\", results.get(1).highlightKey);\n        \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, false);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertNull(results.get(0).highlightKey);\n    \n    testConstructorDefaults(suggester, keys, a, true, true);\n    testConstructorDefaults(suggester, keys, a, true, false);\n    testConstructorDefaults(suggester, keys, a, false, false);\n    testConstructorDefaults(suggester, keys, a, false, true);\n    \n    suggester.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).highlightKey);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n    \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"penny ea\", random()), 10, false, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> <b>ea</b>rned\", results.get(0).highlightKey);\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ea</b>r\", results.get(1).highlightKey);\n        \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, false);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertNull(results.get(0).highlightKey);\n    \n    testConstructorDefatuls(suggester, keys, a, true, true);\n    testConstructorDefatuls(suggester, keys, a, true, false);\n    testConstructorDefatuls(suggester, keys, a, false, false);\n    testConstructorDefatuls(suggester, keys, a, false, true);\n    \n    suggester.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).highlightKey);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n    \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"penny ea\", random()), 10, false, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> <b>ea</b>rned\", results.get(0).highlightKey);\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ea</b>r\", results.get(1).highlightKey);\n        \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, false);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertNull(results.get(0).highlightKey);\n    \n    testConstructorDefaults(suggester, keys, a, true, true);\n    testConstructorDefaults(suggester, keys, a, true, false);\n    testConstructorDefaults(suggester, keys, a, false, false);\n    testConstructorDefaults(suggester, keys, a, false, true);\n    \n    suggester.close();\n    a.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).highlightKey);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n    \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"penny ea\", random()), 10, false, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> <b>ea</b>rned\", results.get(0).highlightKey);\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ea</b>r\", results.get(1).highlightKey);\n        \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, false);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertNull(results.get(0).highlightKey);\n    \n    testConstructorDefaults(suggester, keys, a, true, true);\n    testConstructorDefaults(suggester, keys, a, true, false);\n    testConstructorDefaults(suggester, keys, a, false, false);\n    testConstructorDefaults(suggester, keys, a, false, true);\n    \n    suggester.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).highlightKey);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n    \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"penny ea\", random()), 10, false, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> <b>ea</b>rned\", results.get(0).highlightKey);\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ea</b>r\", results.get(1).highlightKey);\n        \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, false);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertNull(results.get(0).highlightKey);\n    \n    testConstructorDefaults(suggester, keys, a, true, true);\n    testConstructorDefaults(suggester, keys, a, true, false);\n    testConstructorDefaults(suggester, keys, a, false, false);\n    testConstructorDefaults(suggester, keys, a, false, true);\n    \n    suggester.close();\n    a.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).highlightKey);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n    \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"penny ea\", random()), 10, false, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> <b>ea</b>rned\", results.get(0).highlightKey);\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ea</b>r\", results.get(1).highlightKey);\n        \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, false);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertNull(results.get(0).highlightKey);\n    \n    testConstructorDefaults(suggester, keys, a, true, true);\n    testConstructorDefaults(suggester, keys, a, true, false);\n    testConstructorDefaults(suggester, keys, a, false, false);\n    testConstructorDefaults(suggester, keys, a, false, true);\n    \n    suggester.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22aab7a3b640b0dba26cc5e9416bc7af93614b46","date":1462575761,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(\"foobaz\", results.get(0).payload.utf8ToString());\n\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).highlightKey);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n    \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"penny ea\", random()), 10, false, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> <b>ea</b>rned\", results.get(0).highlightKey);\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ea</b>r\", results.get(1).highlightKey);\n        \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, false);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertNull(results.get(0).highlightKey);\n    \n    testConstructorDefaults(suggester, keys, a, true, true);\n    testConstructorDefaults(suggester, keys, a, true, false);\n    testConstructorDefaults(suggester, keys, a, false, false);\n    testConstructorDefaults(suggester, keys, a, false, true);\n    \n    suggester.close();\n    a.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).highlightKey);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n    \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"penny ea\", random()), 10, false, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> <b>ea</b>rned\", results.get(0).highlightKey);\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ea</b>r\", results.get(1).highlightKey);\n        \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, false);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertNull(results.get(0).highlightKey);\n    \n    testConstructorDefaults(suggester, keys, a, true, true);\n    testConstructorDefaults(suggester, keys, a, true, false);\n    testConstructorDefaults(suggester, keys, a, false, false);\n    testConstructorDefaults(suggester, keys, a, false, true);\n    \n    suggester.close();\n    a.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(\"foobaz\", results.get(0).payload.utf8ToString());\n\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).highlightKey);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n    \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"penny ea\", random()), 10, false, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> <b>ea</b>rned\", results.get(0).highlightKey);\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ea</b>r\", results.get(1).highlightKey);\n        \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, false);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertNull(results.get(0).highlightKey);\n    \n    testConstructorDefaults(suggester, keys, a, true, true);\n    testConstructorDefaults(suggester, keys, a, true, false);\n    testConstructorDefaults(suggester, keys, a, false, false);\n    testConstructorDefaults(suggester, keys, a, false, true);\n    \n    suggester.close();\n    a.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).highlightKey);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n    \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"penny ea\", random()), 10, false, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> <b>ea</b>rned\", results.get(0).highlightKey);\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ea</b>r\", results.get(1).highlightKey);\n        \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, false);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertNull(results.get(0).highlightKey);\n    \n    testConstructorDefaults(suggester, keys, a, true, true);\n    testConstructorDefaults(suggester, keys, a, true, false);\n    testConstructorDefaults(suggester, keys, a, false, false);\n    testConstructorDefaults(suggester, keys, a, false, true);\n    \n    suggester.close();\n    a.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(\"foobaz\", results.get(0).payload.utf8ToString());\n\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).highlightKey);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n    \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"penny ea\", random()), 10, false, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> <b>ea</b>rned\", results.get(0).highlightKey);\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ea</b>r\", results.get(1).highlightKey);\n        \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, false);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertNull(results.get(0).highlightKey);\n    \n    testConstructorDefaults(suggester, keys, a, true, true);\n    testConstructorDefaults(suggester, keys, a, true, false);\n    testConstructorDefaults(suggester, keys, a, false, false);\n    testConstructorDefaults(suggester, keys, a, false, true);\n    \n    suggester.close();\n    a.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).highlightKey);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n    \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"penny ea\", random()), 10, false, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> <b>ea</b>rned\", results.get(0).highlightKey);\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ea</b>r\", results.get(1).highlightKey);\n        \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, false);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertNull(results.get(0).highlightKey);\n    \n    testConstructorDefaults(suggester, keys, a, true, true);\n    testConstructorDefaults(suggester, keys, a, true, false);\n    testConstructorDefaults(suggester, keys, a, false, false);\n    testConstructorDefaults(suggester, keys, a, false, true);\n    \n    suggester.close();\n    a.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(\"foobaz\", results.get(0).payload.utf8ToString());\n\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).highlightKey);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n    \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"penny ea\", random()), 10, false, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> <b>ea</b>rned\", results.get(0).highlightKey);\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ea</b>r\", results.get(1).highlightKey);\n        \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, false);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertNull(results.get(0).highlightKey);\n    \n    testConstructorDefaults(suggester, keys, a, true, true);\n    testConstructorDefaults(suggester, keys, a, true, false);\n    testConstructorDefaults(suggester, keys, a, false, false);\n    testConstructorDefaults(suggester, keys, a, false, true);\n    \n    suggester.close();\n    a.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).highlightKey);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n    \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"penny ea\", random()), 10, false, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> <b>ea</b>rned\", results.get(0).highlightKey);\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ea</b>r\", results.get(1).highlightKey);\n        \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, false);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertNull(results.get(0).highlightKey);\n    \n    testConstructorDefaults(suggester, keys, a, true, true);\n    testConstructorDefaults(suggester, keys, a, true, false);\n    testConstructorDefaults(suggester, keys, a, false, false);\n    testConstructorDefaults(suggester, keys, a, false, true);\n    \n    suggester.close();\n    a.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(\"foobaz\", results.get(0).payload.utf8ToString());\n\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).highlightKey);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n    \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"penny ea\", random()), 10, false, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> <b>ea</b>rned\", results.get(0).highlightKey);\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ea</b>r\", results.get(1).highlightKey);\n        \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, false);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertNull(results.get(0).highlightKey);\n    \n    testConstructorDefaults(suggester, keys, a, true, true);\n    testConstructorDefaults(suggester, keys, a, true, false);\n    testConstructorDefaults(suggester, keys, a, false, false);\n    testConstructorDefaults(suggester, keys, a, false, true);\n    \n    suggester.close();\n    a.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Input keys[] = new Input[] {\n      new Input(\"lend me your ear\", 8, new BytesRef(\"foobar\")),\n      new Input(\"a penny saved is a penny earned\", 10, new BytesRef(\"foobaz\")),\n    };\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    AnalyzingInfixSuggester suggester = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false);\n    suggester.build(new InputArrayIterator(keys));\n\n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"ear\", random()), 10, true, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a penny saved is a penny <b>ear</b>ned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(1).highlightKey);\n    assertEquals(8, results.get(1).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(1).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ear \", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"lend me your ear\", results.get(0).key);\n    assertEquals(\"lend me your <b>ear</b>\", results.get(0).highlightKey);\n    assertEquals(8, results.get(0).value);\n    assertEquals(new BytesRef(\"foobar\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"pen\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>pen</b>ny saved is a <b>pen</b>ny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"p\", random()), 10, true, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>p</b>enny saved is a <b>p</b>enny earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n    \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, true);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> earned\", results.get(0).highlightKey);\n    assertEquals(10, results.get(0).value);\n    assertEquals(new BytesRef(\"foobaz\"), results.get(0).payload);\n \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"penny ea\", random()), 10, false, true);\n    assertEquals(2, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertEquals(\"a <b>penny</b> saved is a <b>penny</b> <b>ea</b>rned\", results.get(0).highlightKey);\n    assertEquals(\"lend me your ear\", results.get(1).key);\n    assertEquals(\"lend me your <b>ea</b>r\", results.get(1).highlightKey);\n        \n    results = suggester.lookup(TestUtil.stringToCharSequence(\"money penny\", random()), 10, false, false);\n    assertEquals(1, results.size());\n    assertEquals(\"a penny saved is a penny earned\", results.get(0).key);\n    assertNull(results.get(0).highlightKey);\n    \n    testConstructorDefaults(suggester, keys, a, true, true);\n    testConstructorDefaults(suggester, keys, a, true, false);\n    testConstructorDefaults(suggester, keys, a, false, false);\n    testConstructorDefaults(suggester, keys, a, false, true);\n    \n    suggester.close();\n    a.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ca7fbb27b5ca0c241732978139f9680144cb2769":["7055cd9d1615c97eb7ddc5b4964c4e66e71ce273"],"7055cd9d1615c97eb7ddc5b4964c4e66e71ce273":["ec083aa3f3ecd55f91c47009d49e45553f99bd77"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["6613659748fe4411a7dcf85266e55db1f95f7315","4637747f71df783fc2014ef1f1e0418466e3bed6"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["b3aad8246db872dc16fbe6109f893457496b0240"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3aad8246db872dc16fbe6109f893457496b0240"],"6613659748fe4411a7dcf85266e55db1f95f7315":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"b3aad8246db872dc16fbe6109f893457496b0240":["33ba398fa7984fdcb45fd76b87504d5adf7ca5e3"],"6549d5ea6b7b25525309b981de3ec92b4dff99d1":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"0ad30c6a479e764150a3316e57263319775f1df2":["a56958d7f71a28824f20031ffbb2e13502a0274e","3d33e731a93d4b57e662ff094f64f94a745422d4"],"f1e7da8a91a92330e8f04b171b83e655a4a25c31":["6613659748fe4411a7dcf85266e55db1f95f7315"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a56958d7f71a28824f20031ffbb2e13502a0274e","d470c8182e92b264680e34081b75e70a9f2b3c89"],"19e497fe4da591a79332da97681b8017d9c61165":["6549d5ea6b7b25525309b981de3ec92b4dff99d1"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a56958d7f71a28824f20031ffbb2e13502a0274e","0ad30c6a479e764150a3316e57263319775f1df2"],"22aab7a3b640b0dba26cc5e9416bc7af93614b46":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["ca7fbb27b5ca0c241732978139f9680144cb2769","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ec083aa3f3ecd55f91c47009d49e45553f99bd77":["19e497fe4da591a79332da97681b8017d9c61165"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["ca7fbb27b5ca0c241732978139f9680144cb2769"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["6613659748fe4411a7dcf85266e55db1f95f7315","f1e7da8a91a92330e8f04b171b83e655a4a25c31"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["a56958d7f71a28824f20031ffbb2e13502a0274e","22aab7a3b640b0dba26cc5e9416bc7af93614b46"],"33ba398fa7984fdcb45fd76b87504d5adf7ca5e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"commit2Childs":{"ca7fbb27b5ca0c241732978139f9680144cb2769":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"7055cd9d1615c97eb7ddc5b4964c4e66e71ce273":["ca7fbb27b5ca0c241732978139f9680144cb2769"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["6613659748fe4411a7dcf85266e55db1f95f7315"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["96ea64d994d340044e0d57aeb6a5871539d10ca5","f1e7da8a91a92330e8f04b171b83e655a4a25c31","4637747f71df783fc2014ef1f1e0418466e3bed6"],"b3aad8246db872dc16fbe6109f893457496b0240":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"6549d5ea6b7b25525309b981de3ec92b4dff99d1":["19e497fe4da591a79332da97681b8017d9c61165"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"f1e7da8a91a92330e8f04b171b83e655a4a25c31":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19e497fe4da591a79332da97681b8017d9c61165":["ec083aa3f3ecd55f91c47009d49e45553f99bd77"],"22aab7a3b640b0dba26cc5e9416bc7af93614b46":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","33ba398fa7984fdcb45fd76b87504d5adf7ca5e3"],"ec083aa3f3ecd55f91c47009d49e45553f99bd77":["7055cd9d1615c97eb7ddc5b4964c4e66e71ce273"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["96ea64d994d340044e0d57aeb6a5871539d10ca5","6549d5ea6b7b25525309b981de3ec92b4dff99d1"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","22aab7a3b640b0dba26cc5e9416bc7af93614b46","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"33ba398fa7984fdcb45fd76b87504d5adf7ca5e3":["b3aad8246db872dc16fbe6109f893457496b0240"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","37a0f60745e53927c4c876cfe5b5a58170f0646c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}