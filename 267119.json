{"path":"lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes#FrozenBufferedDeletes(BufferedDeletes,boolean).mjava","commits":[{"id":"327863a2fd61e831028b6c56c8fef6b00a44eb0b","date":1302686439,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes#FrozenBufferedDeletes(BufferedDeletes,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes#FrozenBufferedDeletes(BufferedDeletes,long).mjava","sourceNew":"  public FrozenBufferedDeletes(BufferedDeletes deletes, boolean isSegmentPrivate) {\n    this.isSegmentPrivate = isSegmentPrivate;\n    assert !isSegmentPrivate || deletes.terms.size() == 0 : \"segment private package should only have del queries\"; \n    terms = deletes.terms.keySet().toArray(new Term[deletes.terms.size()]);\n    queries = new Query[deletes.queries.size()];\n    queryLimits = new int[deletes.queries.size()];\n    int upto = 0;\n    for(Map.Entry<Query,Integer> ent : deletes.queries.entrySet()) {\n      queries[upto] = ent.getKey();\n      queryLimits[upto] = ent.getValue();\n      upto++;\n    }\n    bytesUsed = terms.length * BYTES_PER_DEL_TERM + queries.length * BYTES_PER_DEL_QUERY;\n    numTermDeletes = deletes.numTermDeletes.get();\n  }\n\n","sourceOld":"  public FrozenBufferedDeletes(BufferedDeletes deletes, long gen) {\n    terms = deletes.terms.keySet().toArray(new Term[deletes.terms.size()]);\n    queries = new Query[deletes.queries.size()];\n    queryLimits = new int[deletes.queries.size()];\n    int upto = 0;\n    for(Map.Entry<Query,Integer> ent : deletes.queries.entrySet()) {\n      queries[upto] = ent.getKey();\n      queryLimits[upto] = ent.getValue();\n      upto++;\n    }\n    bytesUsed = terms.length * BYTES_PER_DEL_TERM + queries.length * BYTES_PER_DEL_QUERY;\n    numTermDeletes = deletes.numTermDeletes.get();\n    this.gen = gen;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes#FrozenBufferedDeletes(BufferedDeletes,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes#FrozenBufferedDeletes(BufferedDeletes,long).mjava","sourceNew":"  public FrozenBufferedDeletes(BufferedDeletes deletes, boolean isSegmentPrivate) {\n    this.isSegmentPrivate = isSegmentPrivate;\n    assert !isSegmentPrivate || deletes.terms.size() == 0 : \"segment private package should only have del queries\"; \n    terms = deletes.terms.keySet().toArray(new Term[deletes.terms.size()]);\n    queries = new Query[deletes.queries.size()];\n    queryLimits = new int[deletes.queries.size()];\n    int upto = 0;\n    for(Map.Entry<Query,Integer> ent : deletes.queries.entrySet()) {\n      queries[upto] = ent.getKey();\n      queryLimits[upto] = ent.getValue();\n      upto++;\n    }\n    bytesUsed = terms.length * BYTES_PER_DEL_TERM + queries.length * BYTES_PER_DEL_QUERY;\n    numTermDeletes = deletes.numTermDeletes.get();\n  }\n\n","sourceOld":"  public FrozenBufferedDeletes(BufferedDeletes deletes, long gen) {\n    terms = deletes.terms.keySet().toArray(new Term[deletes.terms.size()]);\n    queries = new Query[deletes.queries.size()];\n    queryLimits = new int[deletes.queries.size()];\n    int upto = 0;\n    for(Map.Entry<Query,Integer> ent : deletes.queries.entrySet()) {\n      queries[upto] = ent.getKey();\n      queryLimits[upto] = ent.getValue();\n      upto++;\n    }\n    bytesUsed = terms.length * BYTES_PER_DEL_TERM + queries.length * BYTES_PER_DEL_QUERY;\n    numTermDeletes = deletes.numTermDeletes.get();\n    this.gen = gen;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes#FrozenBufferedDeletes(BufferedDeletes,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public FrozenBufferedDeletes(BufferedDeletes deletes, boolean isSegmentPrivate) {\n    this.isSegmentPrivate = isSegmentPrivate;\n    assert !isSegmentPrivate || deletes.terms.size() == 0 : \"segment private package should only have del queries\"; \n    terms = deletes.terms.keySet().toArray(new Term[deletes.terms.size()]);\n    queries = new Query[deletes.queries.size()];\n    queryLimits = new int[deletes.queries.size()];\n    int upto = 0;\n    for(Map.Entry<Query,Integer> ent : deletes.queries.entrySet()) {\n      queries[upto] = ent.getKey();\n      queryLimits[upto] = ent.getValue();\n      upto++;\n    }\n    bytesUsed = terms.length * BYTES_PER_DEL_TERM + queries.length * BYTES_PER_DEL_QUERY;\n    numTermDeletes = deletes.numTermDeletes.get();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes#FrozenBufferedDeletes(BufferedDeletes,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public FrozenBufferedDeletes(BufferedDeletes deletes, boolean isSegmentPrivate) {\n    this.isSegmentPrivate = isSegmentPrivate;\n    assert !isSegmentPrivate || deletes.terms.size() == 0 : \"segment private package should only have del queries\"; \n    terms = deletes.terms.keySet().toArray(new Term[deletes.terms.size()]);\n    queries = new Query[deletes.queries.size()];\n    queryLimits = new int[deletes.queries.size()];\n    int upto = 0;\n    for(Map.Entry<Query,Integer> ent : deletes.queries.entrySet()) {\n      queries[upto] = ent.getKey();\n      queryLimits[upto] = ent.getValue();\n      upto++;\n    }\n    bytesUsed = terms.length * BYTES_PER_DEL_TERM + queries.length * BYTES_PER_DEL_QUERY;\n    numTermDeletes = deletes.numTermDeletes.get();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"982b2ae363d5aff7345ceab8c236e1066031710b","date":1308672464,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes#FrozenBufferedDeletes(BufferedDeletes,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes#FrozenBufferedDeletes(BufferedDeletes,boolean).mjava","sourceNew":"  public FrozenBufferedDeletes(BufferedDeletes deletes, boolean isSegmentPrivate) {\n    this.isSegmentPrivate = isSegmentPrivate;\n    assert !isSegmentPrivate || deletes.terms.size() == 0 : \"segment private package should only have del queries\"; \n    terms = deletes.terms.keySet().toArray(new Term[deletes.terms.size()]);\n    queries = new Query[deletes.queries.size()];\n    queryLimits = new int[deletes.queries.size()];\n    int upto = 0;\n    for(Map.Entry<Query,Integer> ent : deletes.queries.entrySet()) {\n      queries[upto] = ent.getKey();\n      queryLimits[upto] = ent.getValue();\n      upto++;\n    }\n    int termDataBytes = 0;\n    for(Map.Entry<Term,Integer> ent : deletes.terms.entrySet()) {\n      final Term term = ent.getKey();\n      termDataBytes += term.bytes().length;\n      termDataBytes += term.field().length() * RamUsageEstimator.NUM_BYTES_CHAR;\n    }\n    bytesUsed = terms.length * BYTES_PER_DEL_TERM + queries.length * BYTES_PER_DEL_QUERY + termDataBytes;\n    numTermDeletes = deletes.numTermDeletes.get();\n  }\n\n","sourceOld":"  public FrozenBufferedDeletes(BufferedDeletes deletes, boolean isSegmentPrivate) {\n    this.isSegmentPrivate = isSegmentPrivate;\n    assert !isSegmentPrivate || deletes.terms.size() == 0 : \"segment private package should only have del queries\"; \n    terms = deletes.terms.keySet().toArray(new Term[deletes.terms.size()]);\n    queries = new Query[deletes.queries.size()];\n    queryLimits = new int[deletes.queries.size()];\n    int upto = 0;\n    for(Map.Entry<Query,Integer> ent : deletes.queries.entrySet()) {\n      queries[upto] = ent.getKey();\n      queryLimits[upto] = ent.getValue();\n      upto++;\n    }\n    bytesUsed = terms.length * BYTES_PER_DEL_TERM + queries.length * BYTES_PER_DEL_QUERY;\n    numTermDeletes = deletes.numTermDeletes.get();\n  }\n\n","bugFix":["69a6d2d525aeab53c867ed26934185e5bb627d0e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes#FrozenBufferedDeletes(BufferedDeletes,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes#FrozenBufferedDeletes(BufferedDeletes,boolean).mjava","sourceNew":"  public FrozenBufferedDeletes(BufferedDeletes deletes, boolean isSegmentPrivate) {\n    this.isSegmentPrivate = isSegmentPrivate;\n    assert !isSegmentPrivate || deletes.terms.size() == 0 : \"segment private package should only have del queries\"; \n    terms = deletes.terms.keySet().toArray(new Term[deletes.terms.size()]);\n    queries = new Query[deletes.queries.size()];\n    queryLimits = new int[deletes.queries.size()];\n    int upto = 0;\n    for(Map.Entry<Query,Integer> ent : deletes.queries.entrySet()) {\n      queries[upto] = ent.getKey();\n      queryLimits[upto] = ent.getValue();\n      upto++;\n    }\n    int termDataBytes = 0;\n    for(Map.Entry<Term,Integer> ent : deletes.terms.entrySet()) {\n      final Term term = ent.getKey();\n      termDataBytes += term.bytes().length;\n      termDataBytes += term.field().length() * RamUsageEstimator.NUM_BYTES_CHAR;\n    }\n    bytesUsed = terms.length * BYTES_PER_DEL_TERM + queries.length * BYTES_PER_DEL_QUERY + termDataBytes;\n    numTermDeletes = deletes.numTermDeletes.get();\n  }\n\n","sourceOld":"  public FrozenBufferedDeletes(BufferedDeletes deletes, boolean isSegmentPrivate) {\n    this.isSegmentPrivate = isSegmentPrivate;\n    assert !isSegmentPrivate || deletes.terms.size() == 0 : \"segment private package should only have del queries\"; \n    terms = deletes.terms.keySet().toArray(new Term[deletes.terms.size()]);\n    queries = new Query[deletes.queries.size()];\n    queryLimits = new int[deletes.queries.size()];\n    int upto = 0;\n    for(Map.Entry<Query,Integer> ent : deletes.queries.entrySet()) {\n      queries[upto] = ent.getKey();\n      queryLimits[upto] = ent.getValue();\n      upto++;\n    }\n    bytesUsed = terms.length * BYTES_PER_DEL_TERM + queries.length * BYTES_PER_DEL_QUERY;\n    numTermDeletes = deletes.numTermDeletes.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes#FrozenBufferedDeletes(BufferedDeletes,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes#FrozenBufferedDeletes(BufferedDeletes,boolean).mjava","sourceNew":"  public FrozenBufferedDeletes(BufferedDeletes deletes, boolean isSegmentPrivate) {\n    this.isSegmentPrivate = isSegmentPrivate;\n    assert !isSegmentPrivate || deletes.terms.size() == 0 : \"segment private package should only have del queries\"; \n    terms = deletes.terms.keySet().toArray(new Term[deletes.terms.size()]);\n    queries = new Query[deletes.queries.size()];\n    queryLimits = new int[deletes.queries.size()];\n    int upto = 0;\n    for(Map.Entry<Query,Integer> ent : deletes.queries.entrySet()) {\n      queries[upto] = ent.getKey();\n      queryLimits[upto] = ent.getValue();\n      upto++;\n    }\n    int termDataBytes = 0;\n    for(Map.Entry<Term,Integer> ent : deletes.terms.entrySet()) {\n      final Term term = ent.getKey();\n      termDataBytes += term.bytes().length;\n      termDataBytes += term.field().length() * RamUsageEstimator.NUM_BYTES_CHAR;\n    }\n    bytesUsed = terms.length * BYTES_PER_DEL_TERM + queries.length * BYTES_PER_DEL_QUERY + termDataBytes;\n    numTermDeletes = deletes.numTermDeletes.get();\n  }\n\n","sourceOld":"  public FrozenBufferedDeletes(BufferedDeletes deletes, boolean isSegmentPrivate) {\n    this.isSegmentPrivate = isSegmentPrivate;\n    assert !isSegmentPrivate || deletes.terms.size() == 0 : \"segment private package should only have del queries\"; \n    terms = deletes.terms.keySet().toArray(new Term[deletes.terms.size()]);\n    queries = new Query[deletes.queries.size()];\n    queryLimits = new int[deletes.queries.size()];\n    int upto = 0;\n    for(Map.Entry<Query,Integer> ent : deletes.queries.entrySet()) {\n      queries[upto] = ent.getKey();\n      queryLimits[upto] = ent.getValue();\n      upto++;\n    }\n    bytesUsed = terms.length * BYTES_PER_DEL_TERM + queries.length * BYTES_PER_DEL_QUERY;\n    numTermDeletes = deletes.numTermDeletes.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2","date":1311898374,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes#FrozenBufferedDeletes(BufferedDeletes,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes#FrozenBufferedDeletes(BufferedDeletes,boolean).mjava","sourceNew":"  public FrozenBufferedDeletes(BufferedDeletes deletes, boolean isSegmentPrivate) {\n    this.isSegmentPrivate = isSegmentPrivate;\n    assert !isSegmentPrivate || deletes.terms.size() == 0 : \"segment private package should only have del queries\"; \n    Term termsArray[] = deletes.terms.keySet().toArray(new Term[deletes.terms.size()]);\n    termCount = termsArray.length;\n    ArrayUtil.mergeSort(termsArray);\n    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();\n    for (Term term : termsArray) {\n      builder.add(term);\n    }\n    terms = builder.finish();\n    \n    queries = new Query[deletes.queries.size()];\n    queryLimits = new int[deletes.queries.size()];\n    int upto = 0;\n    for(Map.Entry<Query,Integer> ent : deletes.queries.entrySet()) {\n      queries[upto] = ent.getKey();\n      queryLimits[upto] = ent.getValue();\n      upto++;\n    }\n\n    bytesUsed = (int) terms.getSizeInBytes() + queries.length * BYTES_PER_DEL_QUERY;\n    numTermDeletes = deletes.numTermDeletes.get();\n  }\n\n","sourceOld":"  public FrozenBufferedDeletes(BufferedDeletes deletes, boolean isSegmentPrivate) {\n    this.isSegmentPrivate = isSegmentPrivate;\n    assert !isSegmentPrivate || deletes.terms.size() == 0 : \"segment private package should only have del queries\"; \n    terms = deletes.terms.keySet().toArray(new Term[deletes.terms.size()]);\n    queries = new Query[deletes.queries.size()];\n    queryLimits = new int[deletes.queries.size()];\n    int upto = 0;\n    for(Map.Entry<Query,Integer> ent : deletes.queries.entrySet()) {\n      queries[upto] = ent.getKey();\n      queryLimits[upto] = ent.getValue();\n      upto++;\n    }\n    int termDataBytes = 0;\n    for(Map.Entry<Term,Integer> ent : deletes.terms.entrySet()) {\n      final Term term = ent.getKey();\n      termDataBytes += term.bytes().length;\n      termDataBytes += term.field().length() * RamUsageEstimator.NUM_BYTES_CHAR;\n    }\n    bytesUsed = terms.length * BYTES_PER_DEL_TERM + queries.length * BYTES_PER_DEL_QUERY + termDataBytes;\n    numTermDeletes = deletes.numTermDeletes.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FrozenBufferedDeletes#FrozenBufferedDeletes(BufferedDeletes,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes#FrozenBufferedDeletes(BufferedDeletes,boolean).mjava","sourceNew":"  public FrozenBufferedDeletes(BufferedDeletes deletes, boolean isSegmentPrivate) {\n    this.isSegmentPrivate = isSegmentPrivate;\n    assert !isSegmentPrivate || deletes.terms.size() == 0 : \"segment private package should only have del queries\"; \n    Term termsArray[] = deletes.terms.keySet().toArray(new Term[deletes.terms.size()]);\n    termCount = termsArray.length;\n    ArrayUtil.mergeSort(termsArray);\n    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();\n    for (Term term : termsArray) {\n      builder.add(term);\n    }\n    terms = builder.finish();\n    \n    queries = new Query[deletes.queries.size()];\n    queryLimits = new int[deletes.queries.size()];\n    int upto = 0;\n    for(Map.Entry<Query,Integer> ent : deletes.queries.entrySet()) {\n      queries[upto] = ent.getKey();\n      queryLimits[upto] = ent.getValue();\n      upto++;\n    }\n\n    bytesUsed = (int) terms.getSizeInBytes() + queries.length * BYTES_PER_DEL_QUERY;\n    numTermDeletes = deletes.numTermDeletes.get();\n  }\n\n","sourceOld":"  public FrozenBufferedDeletes(BufferedDeletes deletes, boolean isSegmentPrivate) {\n    this.isSegmentPrivate = isSegmentPrivate;\n    assert !isSegmentPrivate || deletes.terms.size() == 0 : \"segment private package should only have del queries\"; \n    Term termsArray[] = deletes.terms.keySet().toArray(new Term[deletes.terms.size()]);\n    termCount = termsArray.length;\n    ArrayUtil.mergeSort(termsArray);\n    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();\n    for (Term term : termsArray) {\n      builder.add(term);\n    }\n    terms = builder.finish();\n    \n    queries = new Query[deletes.queries.size()];\n    queryLimits = new int[deletes.queries.size()];\n    int upto = 0;\n    for(Map.Entry<Query,Integer> ent : deletes.queries.entrySet()) {\n      queries[upto] = ent.getKey();\n      queryLimits[upto] = ent.getValue();\n      upto++;\n    }\n\n    bytesUsed = (int) terms.getSizeInBytes() + queries.length * BYTES_PER_DEL_QUERY;\n    numTermDeletes = deletes.numTermDeletes.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"982b2ae363d5aff7345ceab8c236e1066031710b":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2":["982b2ae363d5aff7345ceab8c236e1066031710b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2553b00f699380c64959ccb27991289aae87be2e":["a3776dccca01c11e7046323cfad46a3b4a471233","982b2ae363d5aff7345ceab8c236e1066031710b"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","982b2ae363d5aff7345ceab8c236e1066031710b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"982b2ae363d5aff7345ceab8c236e1066031710b":["9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["982b2ae363d5aff7345ceab8c236e1066031710b","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}