{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestLineEntityProcessor#no_xsd_files().mjava","commits":[{"id":"3b748a573c805ec5a2eb0b49f143381e82e25bac","date":1240222370,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestLineEntityProcessor#no_xsd_files().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  /************************************************************************/\n  public void no_xsd_files() throws IOException {\n    /* we want to create the equiv of :-\n     *  <entity name=\"list_all_files\" \n     *           processor=\"LineEntityProcessor\"\n     *           fileName=\"dummy.lis\"\n     *           omitLineRegex=\"\\\\.xsd\"\n     *           />\n     */\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            LineEntityProcessor.URL, \"dummy.lis\",\n            LineEntityProcessor.SKIP_LINE_REGEX, \"\\\\.xsd\"\n    );\n\n    Context c = AbstractDataImportHandlerTest.getContext(\n            null,                          //parentEntity\n            new VariableResolverImpl(),  //resolver\n            getDataSource(filecontents),   //parentDataSource\n            Context.FULL_DUMP,                             //currProcess\n            Collections.EMPTY_LIST,        //entityFields\n            attrs                          //entityAttrs\n    );\n    LineEntityProcessor ep = new LineEntityProcessor();\n    ep.init(c);\n\n    /// call the entity processor to walk the directory\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = ep.nextRow();\n      if (f == null) break;\n      fList.add((String) f.get(\"rawLine\"));\n    }\n    Assert.assertEquals(18, fList.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestLineEntityProcessor#no_xsd_files().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestLineEntityProcessor#no_xsd_files().mjava","sourceNew":"  @Test\n  /************************************************************************/\n  public void no_xsd_files() throws IOException {\n    /* we want to create the equiv of :-\n     *  <entity name=\"list_all_files\" \n     *           processor=\"LineEntityProcessor\"\n     *           fileName=\"dummy.lis\"\n     *           omitLineRegex=\"\\\\.xsd\"\n     *           />\n     */\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            LineEntityProcessor.URL, \"dummy.lis\",\n            LineEntityProcessor.SKIP_LINE_REGEX, \"\\\\.xsd\"\n    );\n\n    Context c = AbstractDataImportHandlerTest.getContext(\n            null,                          //parentEntity\n            new VariableResolverImpl(),  //resolver\n            getDataSource(filecontents),   //parentDataSource\n            Context.FULL_DUMP,                             //currProcess\n            Collections.EMPTY_LIST,        //entityFields\n            attrs                          //entityAttrs\n    );\n    LineEntityProcessor ep = new LineEntityProcessor();\n    ep.init(c);\n\n    /// call the entity processor to walk the directory\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = ep.nextRow();\n      if (f == null) break;\n      fList.add((String) f.get(\"rawLine\"));\n    }\n    Assert.assertEquals(18, fList.size());\n  }\n\n","sourceOld":"  @Test\n  /************************************************************************/\n  public void no_xsd_files() throws IOException {\n    /* we want to create the equiv of :-\n     *  <entity name=\"list_all_files\" \n     *           processor=\"LineEntityProcessor\"\n     *           fileName=\"dummy.lis\"\n     *           omitLineRegex=\"\\\\.xsd\"\n     *           />\n     */\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            LineEntityProcessor.URL, \"dummy.lis\",\n            LineEntityProcessor.SKIP_LINE_REGEX, \"\\\\.xsd\"\n    );\n\n    Context c = AbstractDataImportHandlerTest.getContext(\n            null,                          //parentEntity\n            new VariableResolverImpl(),  //resolver\n            getDataSource(filecontents),   //parentDataSource\n            Context.FULL_DUMP,                             //currProcess\n            Collections.EMPTY_LIST,        //entityFields\n            attrs                          //entityAttrs\n    );\n    LineEntityProcessor ep = new LineEntityProcessor();\n    ep.init(c);\n\n    /// call the entity processor to walk the directory\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = ep.nextRow();\n      if (f == null) break;\n      fList.add((String) f.get(\"rawLine\"));\n    }\n    Assert.assertEquals(18, fList.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"3b748a573c805ec5a2eb0b49f143381e82e25bac":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["3b748a573c805ec5a2eb0b49f143381e82e25bac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3b748a573c805ec5a2eb0b49f143381e82e25bac"],"3b748a573c805ec5a2eb0b49f143381e82e25bac":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}