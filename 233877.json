{"path":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#loadSingle(ResourceLoader,Node).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#loadSingle(ResourceLoader,Node).mjava","pathOld":"solr/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#loadSingle(ResourceLoader,Node).mjava","sourceNew":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   * <plugin name=\"name1\" class=\"solr.ClassName\" > ... </plugin>\n   * \n   * This will initialize and register a single plugin. A class will be\n   * generated for the plugin and registered to the given name.\n   * \n   * If 'preRegister' is true, the plugin will be registered *before* it is\n   * initialized This may be useful for implementations that need to inspect\n   * other registered plugins at startup.\n   * \n   * The created class for the plugin will be returned from this function.\n   * \n   */\n  public T loadSingle(ResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.info(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      // Either initialize now or wait till everything has been registered\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      SolrConfig.severeErrors.add( e );\n      SolrException.logOnce(log,null,e);\n      throw e;\n    }\n\n    // If everything needs to be registered *first*, this will initialize later\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        SolrConfig.severeErrors.add( e );\n        SolrException.logOnce(log,null,e);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n\n","sourceOld":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   * <plugin name=\"name1\" class=\"solr.ClassName\" > ... </plugin>\n   * \n   * This will initialize and register a single plugin. A class will be\n   * generated for the plugin and registered to the given name.\n   * \n   * If 'preRegister' is true, the plugin will be registered *before* it is\n   * initialized This may be useful for implementations that need to inspect\n   * other registered plugins at startup.\n   * \n   * The created class for the plugin will be returned from this function.\n   * \n   */\n  public T loadSingle(ResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.info(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      // Either initialize now or wait till everything has been registered\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      SolrConfig.severeErrors.add( e );\n      SolrException.logOnce(log,null,e);\n      throw e;\n    }\n\n    // If everything needs to be registered *first*, this will initialize later\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        SolrConfig.severeErrors.add( e );\n        SolrException.logOnce(log,null,e);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#loadSingle(ResourceLoader,Node).mjava","pathOld":"solr/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#loadSingle(ResourceLoader,Node).mjava","sourceNew":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   * <plugin name=\"name1\" class=\"solr.ClassName\" > ... </plugin>\n   * \n   * This will initialize and register a single plugin. A class will be\n   * generated for the plugin and registered to the given name.\n   * \n   * If 'preRegister' is true, the plugin will be registered *before* it is\n   * initialized This may be useful for implementations that need to inspect\n   * other registered plugins at startup.\n   * \n   * The created class for the plugin will be returned from this function.\n   * \n   */\n  public T loadSingle(ResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.info(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      // Either initialize now or wait till everything has been registered\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      SolrConfig.severeErrors.add( e );\n      SolrException.logOnce(log,null,e);\n      throw e;\n    }\n\n    // If everything needs to be registered *first*, this will initialize later\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        SolrConfig.severeErrors.add( e );\n        SolrException.logOnce(log,null,e);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n\n","sourceOld":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   * <plugin name=\"name1\" class=\"solr.ClassName\" > ... </plugin>\n   * \n   * This will initialize and register a single plugin. A class will be\n   * generated for the plugin and registered to the given name.\n   * \n   * If 'preRegister' is true, the plugin will be registered *before* it is\n   * initialized This may be useful for implementations that need to inspect\n   * other registered plugins at startup.\n   * \n   * The created class for the plugin will be returned from this function.\n   * \n   */\n  public T loadSingle(ResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.info(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      // Either initialize now or wait till everything has been registered\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      SolrConfig.severeErrors.add( e );\n      SolrException.logOnce(log,null,e);\n      throw e;\n    }\n\n    // If everything needs to be registered *first*, this will initialize later\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        SolrConfig.severeErrors.add( e );\n        SolrException.logOnce(log,null,e);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#loadSingle(ResourceLoader,Node).mjava","pathOld":"solr/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#loadSingle(ResourceLoader,Node).mjava","sourceNew":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   * <plugin name=\"name1\" class=\"solr.ClassName\" > ... </plugin>\n   * \n   * This will initialize and register a single plugin. A class will be\n   * generated for the plugin and registered to the given name.\n   * \n   * If 'preRegister' is true, the plugin will be registered *before* it is\n   * initialized This may be useful for implementations that need to inspect\n   * other registered plugins at startup.\n   * \n   * The created class for the plugin will be returned from this function.\n   * \n   */\n  public T loadSingle(ResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.info(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      // Either initialize now or wait till everything has been registered\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      SolrConfig.severeErrors.add( e );\n      SolrException.logOnce(log,null,e);\n      throw e;\n    }\n\n    // If everything needs to be registered *first*, this will initialize later\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        SolrConfig.severeErrors.add( e );\n        SolrException.logOnce(log,null,e);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n\n","sourceOld":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   * <plugin name=\"name1\" class=\"solr.ClassName\" > ... </plugin>\n   * \n   * This will initialize and register a single plugin. A class will be\n   * generated for the plugin and registered to the given name.\n   * \n   * If 'preRegister' is true, the plugin will be registered *before* it is\n   * initialized This may be useful for implementations that need to inspect\n   * other registered plugins at startup.\n   * \n   * The created class for the plugin will be returned from this function.\n   * \n   */\n  public T loadSingle(ResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.info(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      // Either initialize now or wait till everything has been registered\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      SolrConfig.severeErrors.add( e );\n      SolrException.logOnce(log,null,e);\n      throw e;\n    }\n\n    // If everything needs to be registered *first*, this will initialize later\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        SolrConfig.severeErrors.add( e );\n        SolrException.logOnce(log,null,e);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b1605dda5afabdc06fd136fa0dd14ad326e3001","date":1326751633,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#loadSingle(ResourceLoader,Node).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#loadSingle(ResourceLoader,Node).mjava","sourceNew":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   * <plugin name=\"name1\" class=\"solr.ClassName\" > ... </plugin>\n   * \n   * This will initialize and register a single plugin. A class will be\n   * generated for the plugin and registered to the given name.\n   * \n   * If 'preRegister' is true, the plugin will be registered *before* it is\n   * initialized This may be useful for implementations that need to inspect\n   * other registered plugins at startup.\n   * \n   * The created class for the plugin will be returned from this function.\n   * \n   */\n  public T loadSingle(ResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.info(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      // Either initialize now or wait till everything has been registered\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    // If everything needs to be registered *first*, this will initialize later\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n\n","sourceOld":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   * <plugin name=\"name1\" class=\"solr.ClassName\" > ... </plugin>\n   * \n   * This will initialize and register a single plugin. A class will be\n   * generated for the plugin and registered to the given name.\n   * \n   * If 'preRegister' is true, the plugin will be registered *before* it is\n   * initialized This may be useful for implementations that need to inspect\n   * other registered plugins at startup.\n   * \n   * The created class for the plugin will be returned from this function.\n   * \n   */\n  public T loadSingle(ResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.info(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      // Either initialize now or wait till everything has been registered\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      SolrConfig.severeErrors.add( e );\n      SolrException.logOnce(log,null,e);\n      throw e;\n    }\n\n    // If everything needs to be registered *first*, this will initialize later\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        SolrConfig.severeErrors.add( e );\n        SolrException.logOnce(log,null,e);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8f7907798e0c730e9ab37681c6e8dfbde0e4173","date":1330361299,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#loadSingle(ResourceLoader,Node).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#loadSingle(ResourceLoader,Node).mjava","sourceNew":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   * <plugin name=\"name1\" class=\"solr.ClassName\" > ... </plugin>\n   * \n   * This will initialize and register a single plugin. A class will be\n   * generated for the plugin and registered to the given name.\n   * \n   * If 'preRegister' is true, the plugin will be registered *before* it is\n   * initialized This may be useful for implementations that need to inspect\n   * other registered plugins at startup.\n   * \n   * The created class for the plugin will be returned from this function.\n   * \n   */\n  public T loadSingle(ResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.debug(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      // Either initialize now or wait till everything has been registered\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    // If everything needs to be registered *first*, this will initialize later\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n\n","sourceOld":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   * <plugin name=\"name1\" class=\"solr.ClassName\" > ... </plugin>\n   * \n   * This will initialize and register a single plugin. A class will be\n   * generated for the plugin and registered to the given name.\n   * \n   * If 'preRegister' is true, the plugin will be registered *before* it is\n   * initialized This may be useful for implementations that need to inspect\n   * other registered plugins at startup.\n   * \n   * The created class for the plugin will be returned from this function.\n   * \n   */\n  public T loadSingle(ResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.info(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      // Either initialize now or wait till everything has been registered\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    // If everything needs to be registered *first*, this will initialize later\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#loadSingle(ResourceLoader,Node).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#loadSingle(ResourceLoader,Node).mjava","sourceNew":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   * <plugin name=\"name1\" class=\"solr.ClassName\" > ... </plugin>\n   * \n   * This will initialize and register a single plugin. A class will be\n   * generated for the plugin and registered to the given name.\n   * \n   * If 'preRegister' is true, the plugin will be registered *before* it is\n   * initialized This may be useful for implementations that need to inspect\n   * other registered plugins at startup.\n   * \n   * The created class for the plugin will be returned from this function.\n   * \n   */\n  public T loadSingle(ResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.debug(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      // Either initialize now or wait till everything has been registered\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    // If everything needs to be registered *first*, this will initialize later\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n\n","sourceOld":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   * <plugin name=\"name1\" class=\"solr.ClassName\" > ... </plugin>\n   * \n   * This will initialize and register a single plugin. A class will be\n   * generated for the plugin and registered to the given name.\n   * \n   * If 'preRegister' is true, the plugin will be registered *before* it is\n   * initialized This may be useful for implementations that need to inspect\n   * other registered plugins at startup.\n   * \n   * The created class for the plugin will be returned from this function.\n   * \n   */\n  public T loadSingle(ResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.info(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      // Either initialize now or wait till everything has been registered\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    // If everything needs to be registered *first*, this will initialize later\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c028362918f0b06bbdb243dfd35486218b89dbde","date":1343391303,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#loadSingle(SolrResourceLoader,Node).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#loadSingle(ResourceLoader,Node).mjava","sourceNew":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   * <plugin name=\"name1\" class=\"solr.ClassName\" > ... </plugin>\n   * \n   * This will initialize and register a single plugin. A class will be\n   * generated for the plugin and registered to the given name.\n   * \n   * If 'preRegister' is true, the plugin will be registered *before* it is\n   * initialized This may be useful for implementations that need to inspect\n   * other registered plugins at startup.\n   * \n   * The created class for the plugin will be returned from this function.\n   * \n   */\n  public T loadSingle(SolrResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.debug(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      // Either initialize now or wait till everything has been registered\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    // If everything needs to be registered *first*, this will initialize later\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n\n","sourceOld":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   * <plugin name=\"name1\" class=\"solr.ClassName\" > ... </plugin>\n   * \n   * This will initialize and register a single plugin. A class will be\n   * generated for the plugin and registered to the given name.\n   * \n   * If 'preRegister' is true, the plugin will be registered *before* it is\n   * initialized This may be useful for implementations that need to inspect\n   * other registered plugins at startup.\n   * \n   * The created class for the plugin will be returned from this function.\n   * \n   */\n  public T loadSingle(ResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.debug(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      // Either initialize now or wait till everything has been registered\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    // If everything needs to be registered *first*, this will initialize later\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#loadSingle(ResourceLoader,Node).mjava","sourceNew":null,"sourceOld":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   * <plugin name=\"name1\" class=\"solr.ClassName\" > ... </plugin>\n   * \n   * This will initialize and register a single plugin. A class will be\n   * generated for the plugin and registered to the given name.\n   * \n   * If 'preRegister' is true, the plugin will be registered *before* it is\n   * initialized This may be useful for implementations that need to inspect\n   * other registered plugins at startup.\n   * \n   * The created class for the plugin will be returned from this function.\n   * \n   */\n  public T loadSingle(ResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.debug(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      // Either initialize now or wait till everything has been registered\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    // If everything needs to be registered *first*, this will initialize later\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#loadSingle(ResourceLoader,Node).mjava","sourceNew":null,"sourceOld":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   * <plugin name=\"name1\" class=\"solr.ClassName\" > ... </plugin>\n   * \n   * This will initialize and register a single plugin. A class will be\n   * generated for the plugin and registered to the given name.\n   * \n   * If 'preRegister' is true, the plugin will be registered *before* it is\n   * initialized This may be useful for implementations that need to inspect\n   * other registered plugins at startup.\n   * \n   * The created class for the plugin will be returned from this function.\n   * \n   */\n  public T loadSingle(ResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.debug(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      // Either initialize now or wait till everything has been registered\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    // If everything needs to be registered *first*, this will initialize later\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f8f7907798e0c730e9ab37681c6e8dfbde0e4173":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"aba371508186796cc6151d8223a5b4e16d02e26e":["f8f7907798e0c730e9ab37681c6e8dfbde0e4173","c028362918f0b06bbdb243dfd35486218b89dbde"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["7b1605dda5afabdc06fd136fa0dd14ad326e3001","f8f7907798e0c730e9ab37681c6e8dfbde0e4173"],"c028362918f0b06bbdb243dfd35486218b89dbde":["f8f7907798e0c730e9ab37681c6e8dfbde0e4173"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["f8f7907798e0c730e9ab37681c6e8dfbde0e4173","c028362918f0b06bbdb243dfd35486218b89dbde"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c028362918f0b06bbdb243dfd35486218b89dbde"]},"commit2Childs":{"f8f7907798e0c730e9ab37681c6e8dfbde0e4173":["aba371508186796cc6151d8223a5b4e16d02e26e","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c028362918f0b06bbdb243dfd35486218b89dbde","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c028362918f0b06bbdb243dfd35486218b89dbde":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["f8f7907798e0c730e9ab37681c6e8dfbde0e4173","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}