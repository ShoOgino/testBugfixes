{"path":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getDocCollection(String).mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getDocCollection(String).mjava","pathOld":"/dev/null","sourceNew":"  protected DocCollection getDocCollection(String collectionName) {\n    if (!cores.isZooKeeperAware()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Solr not running in cloud mode \");\n    }\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n    if (collection == null) {\n      collectionName = corename = lookupAliases(collectionName);\n      collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n    }\n    return collection;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getDocCollection(String).mjava","pathOld":"/dev/null","sourceNew":"  protected DocCollection getDocCollection(String collectionName) {\n    if (!cores.isZooKeeperAware()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Solr not running in cloud mode \");\n    }\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n    if (collection == null) {\n      collectionName = corename = lookupAliases(collectionName);\n      collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n    }\n    return collection;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b824daa61db3f30b91a22213d6c04e1fa2e2b06","date":1508385744,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getDocCollection(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getDocCollection(String).mjava","sourceNew":"  protected DocCollection getDocCollection(String collectionName) { // note: don't send an alias; resolve it first\n    if (!cores.isZooKeeperAware()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Solr not running in cloud mode \");\n    }\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    return zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n  }\n\n","sourceOld":"  protected DocCollection getDocCollection(String collectionName) {\n    if (!cores.isZooKeeperAware()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Solr not running in cloud mode \");\n    }\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n    if (collection == null) {\n      collectionName = corename = lookupAliases(collectionName);\n      collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n    }\n    return collection;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e81b6aab54e3749e1502c221e0bc9dbd3f91e15","date":1525806607,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getDocCollection(String).mjava","sourceNew":null,"sourceOld":"  protected DocCollection getDocCollection(String collectionName) { // note: don't send an alias; resolve it first\n    if (!cores.isZooKeeperAware()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Solr not running in cloud mode \");\n    }\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    return zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"8e81b6aab54e3749e1502c221e0bc9dbd3f91e15":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8e81b6aab54e3749e1502c221e0bc9dbd3f91e15"]},"commit2Childs":{"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["8e81b6aab54e3749e1502c221e0bc9dbd3f91e15"],"8e81b6aab54e3749e1502c221e0bc9dbd3f91e15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}