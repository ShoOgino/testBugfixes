{"path":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testUseColdSearcher().mjava","commits":[{"id":"2a350d715b45fda01002eb33f9cd107c1b716176","date":1419450711,"type":0,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testUseColdSearcher().mjava","pathOld":"/dev/null","sourceNew":"  public void testUseColdSearcher() throws Exception {\n    MockSearchComponent.registerFirstSearcherListener = false;\n    MockSearchComponent.registerNewSearcherListener = false;\n    MockSearchComponent.registerSlowSearcherListener = true;\n    final AtomicBoolean querySucceeded = new AtomicBoolean(false);\n    SlowSearcherListener.numberOfTimesCalled = new AtomicInteger(0);\n    SlowSearcherListener.latch = new CountDownLatch(1);\n    \n    \n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    final SolrCore newCore;\n    boolean coreCreated = false;\n    try {\n      System.setProperty(\"tests.solr.useColdSearcher\", \"true\");\n      CoreDescriptor newCd = new CoreDescriptor(cores, \"core1\", cd.getInstanceDir(), \"config\", \"solrconfig-searcher-listeners1.xml\");\n      // Create a new core, this should call all the firstSearcherListeners\n      newCore = cores.create(newCd);\n      coreCreated = true;\n      \n      //validate that the new core was created with the correct solrconfig\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      assertTrue(newCore.getSolrConfig().useColdSearcher);\n      \n      Thread t = new Thread() {\n        public void run() {\n          try {\n            doQuery(newCore);\n            querySucceeded.set(true);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        };\n      };\n      t.start();\n      \n      // validate that the query runs before the searcher warmer finishes\n      for (int i = 0; i <= 1000; i++) {\n        if (querySucceeded.get()) {\n          break;\n        }\n        if (i == 1000) {\n          fail(\"Query didn't succeed after 10 secoonds\");\n        }\n        Thread.sleep(10);\n      }\n      \n      assertEquals(0, SlowSearcherListener.numberOfTimesCalled.get());\n      \n    } finally {\n      System.getProperties().remove(\"tests.solr.useColdSearcher\");\n      if (coreCreated) {\n        SlowSearcherListener.latch.countDown();\n        cores.unload(\"core1\");\n      }\n      \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testUseColdSearcher().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testUseColdSearcher().mjava","sourceNew":"  public void testUseColdSearcher() throws Exception {\n    MockSearchComponent.registerFirstSearcherListener = false;\n    MockSearchComponent.registerNewSearcherListener = false;\n    MockSearchComponent.registerSlowSearcherListener = true;\n    final AtomicBoolean querySucceeded = new AtomicBoolean(false);\n    SlowSearcherListener.numberOfTimesCalled = new AtomicInteger(0);\n    SlowSearcherListener.latch = new CountDownLatch(1);\n    \n    \n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    final SolrCore newCore;\n    boolean coreCreated = false;\n    try {\n      System.setProperty(\"tests.solr.useColdSearcher\", \"true\");\n      // Create a new core, this should call all the firstSearcherListeners\n      newCore = cores.create(\"core1\", cd.getInstanceDir(), ImmutableMap.of(\"config\", \"solrconfig-searcher-listeners1.xml\"));\n      coreCreated = true;\n      \n      //validate that the new core was created with the correct solrconfig\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      assertTrue(newCore.getSolrConfig().useColdSearcher);\n      \n      Thread t = new Thread() {\n        public void run() {\n          try {\n            doQuery(newCore);\n            querySucceeded.set(true);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        };\n      };\n      t.start();\n      \n      // validate that the query runs before the searcher warmer finishes\n      for (int i = 0; i <= 1000; i++) {\n        if (querySucceeded.get()) {\n          break;\n        }\n        if (i == 1000) {\n          fail(\"Query didn't succeed after 10 secoonds\");\n        }\n        Thread.sleep(10);\n      }\n      \n      assertEquals(0, SlowSearcherListener.numberOfTimesCalled.get());\n      \n    } finally {\n      System.getProperties().remove(\"tests.solr.useColdSearcher\");\n      if (coreCreated) {\n        SlowSearcherListener.latch.countDown();\n        cores.unload(\"core1\");\n      }\n      \n    }\n  }\n\n","sourceOld":"  public void testUseColdSearcher() throws Exception {\n    MockSearchComponent.registerFirstSearcherListener = false;\n    MockSearchComponent.registerNewSearcherListener = false;\n    MockSearchComponent.registerSlowSearcherListener = true;\n    final AtomicBoolean querySucceeded = new AtomicBoolean(false);\n    SlowSearcherListener.numberOfTimesCalled = new AtomicInteger(0);\n    SlowSearcherListener.latch = new CountDownLatch(1);\n    \n    \n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    final SolrCore newCore;\n    boolean coreCreated = false;\n    try {\n      System.setProperty(\"tests.solr.useColdSearcher\", \"true\");\n      CoreDescriptor newCd = new CoreDescriptor(cores, \"core1\", cd.getInstanceDir(), \"config\", \"solrconfig-searcher-listeners1.xml\");\n      // Create a new core, this should call all the firstSearcherListeners\n      newCore = cores.create(newCd);\n      coreCreated = true;\n      \n      //validate that the new core was created with the correct solrconfig\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      assertTrue(newCore.getSolrConfig().useColdSearcher);\n      \n      Thread t = new Thread() {\n        public void run() {\n          try {\n            doQuery(newCore);\n            querySucceeded.set(true);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        };\n      };\n      t.start();\n      \n      // validate that the query runs before the searcher warmer finishes\n      for (int i = 0; i <= 1000; i++) {\n        if (querySucceeded.get()) {\n          break;\n        }\n        if (i == 1000) {\n          fail(\"Query didn't succeed after 10 secoonds\");\n        }\n        Thread.sleep(10);\n      }\n      \n      assertEquals(0, SlowSearcherListener.numberOfTimesCalled.get());\n      \n    } finally {\n      System.getProperties().remove(\"tests.solr.useColdSearcher\");\n      if (coreCreated) {\n        SlowSearcherListener.latch.countDown();\n        cores.unload(\"core1\");\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d528fd7ae22865015b756e0a03832e2051de2a9c","date":1476721105,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testUseColdSearcher().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testUseColdSearcher().mjava","sourceNew":"  public void testUseColdSearcher() throws Exception {\n    MockSearchComponent.registerFirstSearcherListener = false;\n    MockSearchComponent.registerNewSearcherListener = false;\n    MockSearchComponent.registerSlowSearcherListener = true;\n    final AtomicBoolean querySucceeded = new AtomicBoolean(false);\n    SlowSearcherListener.numberOfTimesCalled = new AtomicInteger(0);\n    SlowSearcherListener.latch = new CountDownLatch(1);\n    \n    \n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    final SolrCore newCore;\n    boolean coreCreated = false;\n    try {\n      System.setProperty(\"tests.solr.useColdSearcher\", \"true\");\n      // Create a new core, this should call all the firstSearcherListeners\n      newCore = cores.create(\"core1\", cd.getInstanceDir(), ImmutableMap.of(\"config\", \"solrconfig-searcher-listeners1.xml\"), false);\n      coreCreated = true;\n      \n      //validate that the new core was created with the correct solrconfig\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      assertTrue(newCore.getSolrConfig().useColdSearcher);\n      \n      Thread t = new Thread() {\n        public void run() {\n          try {\n            doQuery(newCore);\n            querySucceeded.set(true);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        };\n      };\n      t.start();\n      \n      // validate that the query runs before the searcher warmer finishes\n      for (int i = 0; i <= 1000; i++) {\n        if (querySucceeded.get()) {\n          break;\n        }\n        if (i == 1000) {\n          fail(\"Query didn't succeed after 10 secoonds\");\n        }\n        Thread.sleep(10);\n      }\n      \n      assertEquals(0, SlowSearcherListener.numberOfTimesCalled.get());\n      \n    } finally {\n      System.getProperties().remove(\"tests.solr.useColdSearcher\");\n      if (coreCreated) {\n        SlowSearcherListener.latch.countDown();\n        cores.unload(\"core1\");\n      }\n      \n    }\n  }\n\n","sourceOld":"  public void testUseColdSearcher() throws Exception {\n    MockSearchComponent.registerFirstSearcherListener = false;\n    MockSearchComponent.registerNewSearcherListener = false;\n    MockSearchComponent.registerSlowSearcherListener = true;\n    final AtomicBoolean querySucceeded = new AtomicBoolean(false);\n    SlowSearcherListener.numberOfTimesCalled = new AtomicInteger(0);\n    SlowSearcherListener.latch = new CountDownLatch(1);\n    \n    \n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    final SolrCore newCore;\n    boolean coreCreated = false;\n    try {\n      System.setProperty(\"tests.solr.useColdSearcher\", \"true\");\n      // Create a new core, this should call all the firstSearcherListeners\n      newCore = cores.create(\"core1\", cd.getInstanceDir(), ImmutableMap.of(\"config\", \"solrconfig-searcher-listeners1.xml\"));\n      coreCreated = true;\n      \n      //validate that the new core was created with the correct solrconfig\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      assertTrue(newCore.getSolrConfig().useColdSearcher);\n      \n      Thread t = new Thread() {\n        public void run() {\n          try {\n            doQuery(newCore);\n            querySucceeded.set(true);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        };\n      };\n      t.start();\n      \n      // validate that the query runs before the searcher warmer finishes\n      for (int i = 0; i <= 1000; i++) {\n        if (querySucceeded.get()) {\n          break;\n        }\n        if (i == 1000) {\n          fail(\"Query didn't succeed after 10 secoonds\");\n        }\n        Thread.sleep(10);\n      }\n      \n      assertEquals(0, SlowSearcherListener.numberOfTimesCalled.get());\n      \n    } finally {\n      System.getProperties().remove(\"tests.solr.useColdSearcher\");\n      if (coreCreated) {\n        SlowSearcherListener.latch.countDown();\n        cores.unload(\"core1\");\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testUseColdSearcher().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#testUseColdSearcher().mjava","sourceNew":"  public void testUseColdSearcher() throws Exception {\n    MockSearchComponent.registerFirstSearcherListener = false;\n    MockSearchComponent.registerNewSearcherListener = false;\n    MockSearchComponent.registerSlowSearcherListener = true;\n    final AtomicBoolean querySucceeded = new AtomicBoolean(false);\n    SlowSearcherListener.numberOfTimesCalled = new AtomicInteger(0);\n    SlowSearcherListener.latch = new CountDownLatch(1);\n    \n    \n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    final SolrCore newCore;\n    boolean coreCreated = false;\n    try {\n      System.setProperty(\"tests.solr.useColdSearcher\", \"true\");\n      // Create a new core, this should call all the firstSearcherListeners\n      newCore = cores.create(\"core1\", cd.getInstanceDir(), ImmutableMap.of(\"config\", \"solrconfig-searcher-listeners1.xml\"), false);\n      coreCreated = true;\n      \n      //validate that the new core was created with the correct solrconfig\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      assertTrue(newCore.getSolrConfig().useColdSearcher);\n      \n      Thread t = new Thread() {\n        public void run() {\n          try {\n            doQuery(newCore);\n            querySucceeded.set(true);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        };\n      };\n      t.start();\n      \n      // validate that the query runs before the searcher warmer finishes\n      for (int i = 0; i <= 1000; i++) {\n        if (querySucceeded.get()) {\n          break;\n        }\n        if (i == 1000) {\n          fail(\"Query didn't succeed after 10 secoonds\");\n        }\n        Thread.sleep(10);\n      }\n      \n      assertEquals(0, SlowSearcherListener.numberOfTimesCalled.get());\n      \n    } finally {\n      System.getProperties().remove(\"tests.solr.useColdSearcher\");\n      if (coreCreated) {\n        SlowSearcherListener.latch.countDown();\n        cores.unload(\"core1\");\n      }\n      \n    }\n  }\n\n","sourceOld":"  public void testUseColdSearcher() throws Exception {\n    MockSearchComponent.registerFirstSearcherListener = false;\n    MockSearchComponent.registerNewSearcherListener = false;\n    MockSearchComponent.registerSlowSearcherListener = true;\n    final AtomicBoolean querySucceeded = new AtomicBoolean(false);\n    SlowSearcherListener.numberOfTimesCalled = new AtomicInteger(0);\n    SlowSearcherListener.latch = new CountDownLatch(1);\n    \n    \n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    final SolrCore newCore;\n    boolean coreCreated = false;\n    try {\n      System.setProperty(\"tests.solr.useColdSearcher\", \"true\");\n      // Create a new core, this should call all the firstSearcherListeners\n      newCore = cores.create(\"core1\", cd.getInstanceDir(), ImmutableMap.of(\"config\", \"solrconfig-searcher-listeners1.xml\"));\n      coreCreated = true;\n      \n      //validate that the new core was created with the correct solrconfig\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      assertTrue(newCore.getSolrConfig().useColdSearcher);\n      \n      Thread t = new Thread() {\n        public void run() {\n          try {\n            doQuery(newCore);\n            querySucceeded.set(true);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        };\n      };\n      t.start();\n      \n      // validate that the query runs before the searcher warmer finishes\n      for (int i = 0; i <= 1000; i++) {\n        if (querySucceeded.get()) {\n          break;\n        }\n        if (i == 1000) {\n          fail(\"Query didn't succeed after 10 secoonds\");\n        }\n        Thread.sleep(10);\n      }\n      \n      assertEquals(0, SlowSearcherListener.numberOfTimesCalled.get());\n      \n    } finally {\n      System.getProperties().remove(\"tests.solr.useColdSearcher\");\n      if (coreCreated) {\n        SlowSearcherListener.latch.countDown();\n        cores.unload(\"core1\");\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["2a350d715b45fda01002eb33f9cd107c1b716176"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2a350d715b45fda01002eb33f9cd107c1b716176":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d528fd7ae22865015b756e0a03832e2051de2a9c":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","d528fd7ae22865015b756e0a03832e2051de2a9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d528fd7ae22865015b756e0a03832e2051de2a9c"]},"commit2Childs":{"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["d528fd7ae22865015b756e0a03832e2051de2a9c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2a350d715b45fda01002eb33f9cd107c1b716176"],"2a350d715b45fda01002eb33f9cd107c1b716176":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"d528fd7ae22865015b756e0a03832e2051de2a9c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}