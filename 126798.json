{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#unary().mjava","commits":[{"id":"f18d4e1cdc7330101ca433af5e8564dfd894f2bf","date":1379041877,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#unary().mjava","pathOld":"/dev/null","sourceNew":"    // $ANTLR start \"unary\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:298:1: unary : ( postfix | AT_ADD ! unary | unary_operator ^ unary );\n    public final JavascriptParser.unary_return unary() throws RecognitionException {\n        JavascriptParser.unary_return retval = new JavascriptParser.unary_return();\n        retval.start = input.LT(1);\n\n\n        CommonTree root_0 = null;\n\n        Token AT_ADD39=null;\n        JavascriptParser.postfix_return postfix38 =null;\n\n        JavascriptParser.unary_return unary40 =null;\n\n        JavascriptParser.unary_operator_return unary_operator41 =null;\n\n        JavascriptParser.unary_return unary42 =null;\n\n\n        CommonTree AT_ADD39_tree=null;\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:299:5: ( postfix | AT_ADD ! unary | unary_operator ^ unary )\n            int alt12=3;\n            switch ( input.LA(1) ) {\n            case AT_LPAREN:\n            case DECIMAL:\n            case HEX:\n            case ID:\n            case OCTAL:\n                {\n                alt12=1;\n                }\n                break;\n            case AT_ADD:\n                {\n                alt12=2;\n                }\n                break;\n            case AT_BIT_NOT:\n            case AT_BOOL_NOT:\n            case AT_SUBTRACT:\n                {\n                alt12=3;\n                }\n                break;\n            default:\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 12, 0, input);\n\n                throw nvae;\n\n            }\n\n            switch (alt12) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    pushFollow(FOLLOW_postfix_in_unary1084);\n                    postfix38=postfix();\n\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, postfix38.getTree());\n\n                    }\n                    break;\n                case 2 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    AT_ADD39=(Token)match(input,AT_ADD,FOLLOW_AT_ADD_in_unary1092); \n\n                    pushFollow(FOLLOW_unary_in_unary1095);\n                    unary40=unary();\n\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, unary40.getTree());\n\n                    }\n                    break;\n                case 3 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    pushFollow(FOLLOW_unary_operator_in_unary1103);\n                    unary_operator41=unary_operator();\n\n                    state._fsp--;\n\n                    root_0 = (CommonTree)adaptor.becomeRoot(unary_operator41.getTree(), root_0);\n\n                    pushFollow(FOLLOW_unary_in_unary1106);\n                    unary42=unary();\n\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, unary42.getTree());\n\n                    }\n                    break;\n\n            }\n            retval.stop = input.LT(-1);\n\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n    \tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n        }\n\n        finally {\n        \t// do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"unary\"\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3623d67605fbbdfce2fadea678e2f4bbe2ab2310","date":1379042933,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#unary().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#unary().mjava","sourceNew":"    // $ANTLR start \"unary\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:298:1: unary : ( postfix | AT_ADD ! unary | unary_operator ^ unary );\n    public final JavascriptParser.unary_return unary() throws RecognitionException {\n        JavascriptParser.unary_return retval = new JavascriptParser.unary_return();\n        retval.start = input.LT(1);\n\n\n        CommonTree root_0 = null;\n\n        Token AT_ADD39=null;\n        JavascriptParser.postfix_return postfix38 =null;\n\n        JavascriptParser.unary_return unary40 =null;\n\n        JavascriptParser.unary_operator_return unary_operator41 =null;\n\n        JavascriptParser.unary_return unary42 =null;\n\n\n        CommonTree AT_ADD39_tree=null;\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:299:5: ( postfix | AT_ADD ! unary | unary_operator ^ unary )\n            int alt12=3;\n            switch ( input.LA(1) ) {\n            case AT_LPAREN:\n            case DECIMAL:\n            case HEX:\n            case ID:\n            case OCTAL:\n                {\n                alt12=1;\n                }\n                break;\n            case AT_ADD:\n                {\n                alt12=2;\n                }\n                break;\n            case AT_BIT_NOT:\n            case AT_BOOL_NOT:\n            case AT_SUBTRACT:\n                {\n                alt12=3;\n                }\n                break;\n            default:\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 12, 0, input);\n\n                throw nvae;\n\n            }\n\n            switch (alt12) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    pushFollow(FOLLOW_postfix_in_unary1084);\n                    postfix38=postfix();\n\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, postfix38.getTree());\n\n                    }\n                    break;\n                case 2 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    AT_ADD39=(Token)match(input,AT_ADD,FOLLOW_AT_ADD_in_unary1092); \n\n                    pushFollow(FOLLOW_unary_in_unary1095);\n                    unary40=unary();\n\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, unary40.getTree());\n\n                    }\n                    break;\n                case 3 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    pushFollow(FOLLOW_unary_operator_in_unary1103);\n                    unary_operator41=unary_operator();\n\n                    state._fsp--;\n\n                    root_0 = (CommonTree)adaptor.becomeRoot(unary_operator41.getTree(), root_0);\n\n                    pushFollow(FOLLOW_unary_in_unary1106);\n                    unary42=unary();\n\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, unary42.getTree());\n\n                    }\n                    break;\n\n            }\n            retval.stop = input.LT(-1);\n\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n        }\n\n        finally {\n            // do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"unary\"\n\n","sourceOld":"    // $ANTLR start \"unary\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:298:1: unary : ( postfix | AT_ADD ! unary | unary_operator ^ unary );\n    public final JavascriptParser.unary_return unary() throws RecognitionException {\n        JavascriptParser.unary_return retval = new JavascriptParser.unary_return();\n        retval.start = input.LT(1);\n\n\n        CommonTree root_0 = null;\n\n        Token AT_ADD39=null;\n        JavascriptParser.postfix_return postfix38 =null;\n\n        JavascriptParser.unary_return unary40 =null;\n\n        JavascriptParser.unary_operator_return unary_operator41 =null;\n\n        JavascriptParser.unary_return unary42 =null;\n\n\n        CommonTree AT_ADD39_tree=null;\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:299:5: ( postfix | AT_ADD ! unary | unary_operator ^ unary )\n            int alt12=3;\n            switch ( input.LA(1) ) {\n            case AT_LPAREN:\n            case DECIMAL:\n            case HEX:\n            case ID:\n            case OCTAL:\n                {\n                alt12=1;\n                }\n                break;\n            case AT_ADD:\n                {\n                alt12=2;\n                }\n                break;\n            case AT_BIT_NOT:\n            case AT_BOOL_NOT:\n            case AT_SUBTRACT:\n                {\n                alt12=3;\n                }\n                break;\n            default:\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 12, 0, input);\n\n                throw nvae;\n\n            }\n\n            switch (alt12) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    pushFollow(FOLLOW_postfix_in_unary1084);\n                    postfix38=postfix();\n\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, postfix38.getTree());\n\n                    }\n                    break;\n                case 2 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    AT_ADD39=(Token)match(input,AT_ADD,FOLLOW_AT_ADD_in_unary1092); \n\n                    pushFollow(FOLLOW_unary_in_unary1095);\n                    unary40=unary();\n\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, unary40.getTree());\n\n                    }\n                    break;\n                case 3 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    pushFollow(FOLLOW_unary_operator_in_unary1103);\n                    unary_operator41=unary_operator();\n\n                    state._fsp--;\n\n                    root_0 = (CommonTree)adaptor.becomeRoot(unary_operator41.getTree(), root_0);\n\n                    pushFollow(FOLLOW_unary_in_unary1106);\n                    unary42=unary();\n\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, unary42.getTree());\n\n                    }\n                    break;\n\n            }\n            retval.stop = input.LT(-1);\n\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n    \tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n        }\n\n        finally {\n        \t// do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"unary\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2","date":1379096281,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#unary().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#unary().mjava","sourceNew":"    // $ANTLR start \"unary\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:298:1: unary : ( postfix | AT_ADD ! unary | unary_operator ^ unary );\n    public final JavascriptParser.unary_return unary() throws RecognitionException {\n        JavascriptParser.unary_return retval = new JavascriptParser.unary_return();\n        retval.start = input.LT(1);\n\n        CommonTree root_0 = null;\n\n        Token AT_ADD39=null;\n        ParserRuleReturnScope postfix38 =null;\n        ParserRuleReturnScope unary40 =null;\n        ParserRuleReturnScope unary_operator41 =null;\n        ParserRuleReturnScope unary42 =null;\n\n        CommonTree AT_ADD39_tree=null;\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:299:5: ( postfix | AT_ADD ! unary | unary_operator ^ unary )\n            int alt12=3;\n            switch ( input.LA(1) ) {\n            case AT_LPAREN:\n            case DECIMAL:\n            case HEX:\n            case ID:\n            case OCTAL:\n                {\n                alt12=1;\n                }\n                break;\n            case AT_ADD:\n                {\n                alt12=2;\n                }\n                break;\n            case AT_BIT_NOT:\n            case AT_BOOL_NOT:\n            case AT_SUBTRACT:\n                {\n                alt12=3;\n                }\n                break;\n            default:\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 12, 0, input);\n                throw nvae;\n            }\n            switch (alt12) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    pushFollow(FOLLOW_postfix_in_unary1084);\n                    postfix38=postfix();\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, postfix38.getTree());\n\n                    }\n                    break;\n                case 2 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    AT_ADD39=(Token)match(input,AT_ADD,FOLLOW_AT_ADD_in_unary1092); \n                    pushFollow(FOLLOW_unary_in_unary1095);\n                    unary40=unary();\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, unary40.getTree());\n\n                    }\n                    break;\n                case 3 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    pushFollow(FOLLOW_unary_operator_in_unary1103);\n                    unary_operator41=unary_operator();\n                    state._fsp--;\n\n                    root_0 = (CommonTree)adaptor.becomeRoot(unary_operator41.getTree(), root_0);\n                    pushFollow(FOLLOW_unary_in_unary1106);\n                    unary42=unary();\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, unary42.getTree());\n\n                    }\n                    break;\n\n            }\n            retval.stop = input.LT(-1);\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n        }\n        finally {\n            // do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"unary\"\n\n","sourceOld":"    // $ANTLR start \"unary\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:298:1: unary : ( postfix | AT_ADD ! unary | unary_operator ^ unary );\n    public final JavascriptParser.unary_return unary() throws RecognitionException {\n        JavascriptParser.unary_return retval = new JavascriptParser.unary_return();\n        retval.start = input.LT(1);\n\n\n        CommonTree root_0 = null;\n\n        Token AT_ADD39=null;\n        JavascriptParser.postfix_return postfix38 =null;\n\n        JavascriptParser.unary_return unary40 =null;\n\n        JavascriptParser.unary_operator_return unary_operator41 =null;\n\n        JavascriptParser.unary_return unary42 =null;\n\n\n        CommonTree AT_ADD39_tree=null;\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:299:5: ( postfix | AT_ADD ! unary | unary_operator ^ unary )\n            int alt12=3;\n            switch ( input.LA(1) ) {\n            case AT_LPAREN:\n            case DECIMAL:\n            case HEX:\n            case ID:\n            case OCTAL:\n                {\n                alt12=1;\n                }\n                break;\n            case AT_ADD:\n                {\n                alt12=2;\n                }\n                break;\n            case AT_BIT_NOT:\n            case AT_BOOL_NOT:\n            case AT_SUBTRACT:\n                {\n                alt12=3;\n                }\n                break;\n            default:\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 12, 0, input);\n\n                throw nvae;\n\n            }\n\n            switch (alt12) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    pushFollow(FOLLOW_postfix_in_unary1084);\n                    postfix38=postfix();\n\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, postfix38.getTree());\n\n                    }\n                    break;\n                case 2 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    AT_ADD39=(Token)match(input,AT_ADD,FOLLOW_AT_ADD_in_unary1092); \n\n                    pushFollow(FOLLOW_unary_in_unary1095);\n                    unary40=unary();\n\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, unary40.getTree());\n\n                    }\n                    break;\n                case 3 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    pushFollow(FOLLOW_unary_operator_in_unary1103);\n                    unary_operator41=unary_operator();\n\n                    state._fsp--;\n\n                    root_0 = (CommonTree)adaptor.becomeRoot(unary_operator41.getTree(), root_0);\n\n                    pushFollow(FOLLOW_unary_in_unary1106);\n                    unary42=unary();\n\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, unary42.getTree());\n\n                    }\n                    break;\n\n            }\n            retval.stop = input.LT(-1);\n\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n        }\n\n        finally {\n            // do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"unary\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1441eba4282a646ef88d12acb797483db37554e","date":1379096538,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#unary().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#unary().mjava","sourceNew":"  // $ANTLR start \"unary\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:298:1: unary : ( postfix | AT_ADD ! unary | unary_operator ^ unary );\n  public final JavascriptParser.unary_return unary() throws RecognitionException {\n    JavascriptParser.unary_return retval = new JavascriptParser.unary_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token AT_ADD39=null;\n    ParserRuleReturnScope postfix38 =null;\n    ParserRuleReturnScope unary40 =null;\n    ParserRuleReturnScope unary_operator41 =null;\n    ParserRuleReturnScope unary42 =null;\n\n    CommonTree AT_ADD39_tree=null;\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:299:5: ( postfix | AT_ADD ! unary | unary_operator ^ unary )\n      int alt12=3;\n      switch ( input.LA(1) ) {\n      case AT_LPAREN:\n      case DECIMAL:\n      case HEX:\n      case ID:\n      case OCTAL:\n        {\n        alt12=1;\n        }\n        break;\n      case AT_ADD:\n        {\n        alt12=2;\n        }\n        break;\n      case AT_BIT_NOT:\n      case AT_BOOL_NOT:\n      case AT_SUBTRACT:\n        {\n        alt12=3;\n        }\n        break;\n      default:\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 12, 0, input);\n        throw nvae;\n      }\n      switch (alt12) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          pushFollow(FOLLOW_postfix_in_unary1084);\n          postfix38=postfix();\n          state._fsp--;\n\n          adaptor.addChild(root_0, postfix38.getTree());\n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          AT_ADD39=(Token)match(input,AT_ADD,FOLLOW_AT_ADD_in_unary1092); \n          pushFollow(FOLLOW_unary_in_unary1095);\n          unary40=unary();\n          state._fsp--;\n\n          adaptor.addChild(root_0, unary40.getTree());\n\n          }\n          break;\n        case 3 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          pushFollow(FOLLOW_unary_operator_in_unary1103);\n          unary_operator41=unary_operator();\n          state._fsp--;\n\n          root_0 = (CommonTree)adaptor.becomeRoot(unary_operator41.getTree(), root_0);\n          pushFollow(FOLLOW_unary_in_unary1106);\n          unary42=unary();\n          state._fsp--;\n\n          adaptor.addChild(root_0, unary42.getTree());\n\n          }\n          break;\n\n      }\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"unary\"\n\n","sourceOld":"    // $ANTLR start \"unary\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:298:1: unary : ( postfix | AT_ADD ! unary | unary_operator ^ unary );\n    public final JavascriptParser.unary_return unary() throws RecognitionException {\n        JavascriptParser.unary_return retval = new JavascriptParser.unary_return();\n        retval.start = input.LT(1);\n\n        CommonTree root_0 = null;\n\n        Token AT_ADD39=null;\n        ParserRuleReturnScope postfix38 =null;\n        ParserRuleReturnScope unary40 =null;\n        ParserRuleReturnScope unary_operator41 =null;\n        ParserRuleReturnScope unary42 =null;\n\n        CommonTree AT_ADD39_tree=null;\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:299:5: ( postfix | AT_ADD ! unary | unary_operator ^ unary )\n            int alt12=3;\n            switch ( input.LA(1) ) {\n            case AT_LPAREN:\n            case DECIMAL:\n            case HEX:\n            case ID:\n            case OCTAL:\n                {\n                alt12=1;\n                }\n                break;\n            case AT_ADD:\n                {\n                alt12=2;\n                }\n                break;\n            case AT_BIT_NOT:\n            case AT_BOOL_NOT:\n            case AT_SUBTRACT:\n                {\n                alt12=3;\n                }\n                break;\n            default:\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 12, 0, input);\n                throw nvae;\n            }\n            switch (alt12) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    pushFollow(FOLLOW_postfix_in_unary1084);\n                    postfix38=postfix();\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, postfix38.getTree());\n\n                    }\n                    break;\n                case 2 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    AT_ADD39=(Token)match(input,AT_ADD,FOLLOW_AT_ADD_in_unary1092); \n                    pushFollow(FOLLOW_unary_in_unary1095);\n                    unary40=unary();\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, unary40.getTree());\n\n                    }\n                    break;\n                case 3 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    pushFollow(FOLLOW_unary_operator_in_unary1103);\n                    unary_operator41=unary_operator();\n                    state._fsp--;\n\n                    root_0 = (CommonTree)adaptor.becomeRoot(unary_operator41.getTree(), root_0);\n                    pushFollow(FOLLOW_unary_in_unary1106);\n                    unary42=unary();\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, unary42.getTree());\n\n                    }\n                    break;\n\n            }\n            retval.stop = input.LT(-1);\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n        }\n        finally {\n            // do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"unary\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f0e44787cffbb978aa2182761e3f9b184545a1e","date":1379265303,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#unary().mjava","pathOld":"/dev/null","sourceNew":"  // $ANTLR start \"unary\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:298:1: unary : ( postfix | AT_ADD ! unary | unary_operator ^ unary );\n  public final JavascriptParser.unary_return unary() throws RecognitionException {\n    JavascriptParser.unary_return retval = new JavascriptParser.unary_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token AT_ADD39=null;\n    ParserRuleReturnScope postfix38 =null;\n    ParserRuleReturnScope unary40 =null;\n    ParserRuleReturnScope unary_operator41 =null;\n    ParserRuleReturnScope unary42 =null;\n\n    CommonTree AT_ADD39_tree=null;\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:299:5: ( postfix | AT_ADD ! unary | unary_operator ^ unary )\n      int alt12=3;\n      switch ( input.LA(1) ) {\n      case AT_LPAREN:\n      case DECIMAL:\n      case HEX:\n      case ID:\n      case OCTAL:\n        {\n        alt12=1;\n        }\n        break;\n      case AT_ADD:\n        {\n        alt12=2;\n        }\n        break;\n      case AT_BIT_NOT:\n      case AT_BOOL_NOT:\n      case AT_SUBTRACT:\n        {\n        alt12=3;\n        }\n        break;\n      default:\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 12, 0, input);\n        throw nvae;\n      }\n      switch (alt12) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          pushFollow(FOLLOW_postfix_in_unary1084);\n          postfix38=postfix();\n          state._fsp--;\n\n          adaptor.addChild(root_0, postfix38.getTree());\n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          AT_ADD39=(Token)match(input,AT_ADD,FOLLOW_AT_ADD_in_unary1092); \n          pushFollow(FOLLOW_unary_in_unary1095);\n          unary40=unary();\n          state._fsp--;\n\n          adaptor.addChild(root_0, unary40.getTree());\n\n          }\n          break;\n        case 3 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          pushFollow(FOLLOW_unary_operator_in_unary1103);\n          unary_operator41=unary_operator();\n          state._fsp--;\n\n          root_0 = (CommonTree)adaptor.becomeRoot(unary_operator41.getTree(), root_0);\n          pushFollow(FOLLOW_unary_in_unary1106);\n          unary42=unary();\n          state._fsp--;\n\n          adaptor.addChild(root_0, unary42.getTree());\n\n          }\n          break;\n\n      }\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"unary\"\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d639dc27b5b3eae561ef321b06f3cad9280c529","date":1383945027,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#unary().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#unary().mjava","sourceNew":"  // $ANTLR start \"unary\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:298:1: unary : ( postfix | AT_ADD ! unary | unary_operator ^ unary );\n  public final JavascriptParser.unary_return unary() throws RecognitionException {\n    JavascriptParser.unary_return retval = new JavascriptParser.unary_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token AT_ADD39=null;\n    ParserRuleReturnScope postfix38 =null;\n    ParserRuleReturnScope unary40 =null;\n    ParserRuleReturnScope unary_operator41 =null;\n    ParserRuleReturnScope unary42 =null;\n\n    CommonTree AT_ADD39_tree=null;\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:299:5: ( postfix | AT_ADD ! unary | unary_operator ^ unary )\n      int alt12=3;\n      switch ( input.LA(1) ) {\n      case AT_LPAREN:\n      case DECIMAL:\n      case HEX:\n      case NAMESPACE_ID:\n      case OCTAL:\n        {\n        alt12=1;\n        }\n        break;\n      case AT_ADD:\n        {\n        alt12=2;\n        }\n        break;\n      case AT_BIT_NOT:\n      case AT_BOOL_NOT:\n      case AT_SUBTRACT:\n        {\n        alt12=3;\n        }\n        break;\n      default:\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 12, 0, input);\n        throw nvae;\n      }\n      switch (alt12) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          pushFollow(FOLLOW_postfix_in_unary1084);\n          postfix38=postfix();\n          state._fsp--;\n\n          adaptor.addChild(root_0, postfix38.getTree());\n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          AT_ADD39=(Token)match(input,AT_ADD,FOLLOW_AT_ADD_in_unary1092); \n          pushFollow(FOLLOW_unary_in_unary1095);\n          unary40=unary();\n          state._fsp--;\n\n          adaptor.addChild(root_0, unary40.getTree());\n\n          }\n          break;\n        case 3 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          pushFollow(FOLLOW_unary_operator_in_unary1103);\n          unary_operator41=unary_operator();\n          state._fsp--;\n\n          root_0 = (CommonTree)adaptor.becomeRoot(unary_operator41.getTree(), root_0);\n          pushFollow(FOLLOW_unary_in_unary1106);\n          unary42=unary();\n          state._fsp--;\n\n          adaptor.addChild(root_0, unary42.getTree());\n\n          }\n          break;\n\n      }\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"unary\"\n\n","sourceOld":"  // $ANTLR start \"unary\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:298:1: unary : ( postfix | AT_ADD ! unary | unary_operator ^ unary );\n  public final JavascriptParser.unary_return unary() throws RecognitionException {\n    JavascriptParser.unary_return retval = new JavascriptParser.unary_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token AT_ADD39=null;\n    ParserRuleReturnScope postfix38 =null;\n    ParserRuleReturnScope unary40 =null;\n    ParserRuleReturnScope unary_operator41 =null;\n    ParserRuleReturnScope unary42 =null;\n\n    CommonTree AT_ADD39_tree=null;\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:299:5: ( postfix | AT_ADD ! unary | unary_operator ^ unary )\n      int alt12=3;\n      switch ( input.LA(1) ) {\n      case AT_LPAREN:\n      case DECIMAL:\n      case HEX:\n      case ID:\n      case OCTAL:\n        {\n        alt12=1;\n        }\n        break;\n      case AT_ADD:\n        {\n        alt12=2;\n        }\n        break;\n      case AT_BIT_NOT:\n      case AT_BOOL_NOT:\n      case AT_SUBTRACT:\n        {\n        alt12=3;\n        }\n        break;\n      default:\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 12, 0, input);\n        throw nvae;\n      }\n      switch (alt12) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          pushFollow(FOLLOW_postfix_in_unary1084);\n          postfix38=postfix();\n          state._fsp--;\n\n          adaptor.addChild(root_0, postfix38.getTree());\n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          AT_ADD39=(Token)match(input,AT_ADD,FOLLOW_AT_ADD_in_unary1092); \n          pushFollow(FOLLOW_unary_in_unary1095);\n          unary40=unary();\n          state._fsp--;\n\n          adaptor.addChild(root_0, unary40.getTree());\n\n          }\n          break;\n        case 3 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          pushFollow(FOLLOW_unary_operator_in_unary1103);\n          unary_operator41=unary_operator();\n          state._fsp--;\n\n          root_0 = (CommonTree)adaptor.becomeRoot(unary_operator41.getTree(), root_0);\n          pushFollow(FOLLOW_unary_in_unary1106);\n          unary42=unary();\n          state._fsp--;\n\n          adaptor.addChild(root_0, unary42.getTree());\n\n          }\n          break;\n\n      }\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"unary\"\n\n","bugFix":null,"bugIntro":["5b6aa541ae5bb3c0260e1c263d6897a7925fa00c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5b6aa541ae5bb3c0260e1c263d6897a7925fa00c","date":1404947938,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#unary().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#unary().mjava","sourceNew":"  // $ANTLR start \"unary\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:298:1: unary : ( postfix | AT_ADD ! unary | unary_operator ^ unary );\n  public final JavascriptParser.unary_return unary() throws RecognitionException {\n    JavascriptParser.unary_return retval = new JavascriptParser.unary_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token AT_ADD39=null;\n    ParserRuleReturnScope postfix38 =null;\n    ParserRuleReturnScope unary40 =null;\n    ParserRuleReturnScope unary_operator41 =null;\n    ParserRuleReturnScope unary42 =null;\n\n    CommonTree AT_ADD39_tree=null;\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:299:5: ( postfix | AT_ADD ! unary | unary_operator ^ unary )\n      int alt12=3;\n      switch ( input.LA(1) ) {\n      case AT_LPAREN:\n      case DECIMAL:\n      case HEX:\n      case OCTAL:\n      case VARIABLE:\n        {\n        alt12=1;\n        }\n        break;\n      case AT_ADD:\n        {\n        alt12=2;\n        }\n        break;\n      case AT_BIT_NOT:\n      case AT_BOOL_NOT:\n      case AT_SUBTRACT:\n        {\n        alt12=3;\n        }\n        break;\n      default:\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 12, 0, input);\n        throw nvae;\n      }\n      switch (alt12) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          pushFollow(FOLLOW_postfix_in_unary1084);\n          postfix38=postfix();\n          state._fsp--;\n\n          adaptor.addChild(root_0, postfix38.getTree());\n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          AT_ADD39=(Token)match(input,AT_ADD,FOLLOW_AT_ADD_in_unary1092); \n          pushFollow(FOLLOW_unary_in_unary1095);\n          unary40=unary();\n          state._fsp--;\n\n          adaptor.addChild(root_0, unary40.getTree());\n\n          }\n          break;\n        case 3 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          pushFollow(FOLLOW_unary_operator_in_unary1103);\n          unary_operator41=unary_operator();\n          state._fsp--;\n\n          root_0 = (CommonTree)adaptor.becomeRoot(unary_operator41.getTree(), root_0);\n          pushFollow(FOLLOW_unary_in_unary1106);\n          unary42=unary();\n          state._fsp--;\n\n          adaptor.addChild(root_0, unary42.getTree());\n\n          }\n          break;\n\n      }\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"unary\"\n\n","sourceOld":"  // $ANTLR start \"unary\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:298:1: unary : ( postfix | AT_ADD ! unary | unary_operator ^ unary );\n  public final JavascriptParser.unary_return unary() throws RecognitionException {\n    JavascriptParser.unary_return retval = new JavascriptParser.unary_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token AT_ADD39=null;\n    ParserRuleReturnScope postfix38 =null;\n    ParserRuleReturnScope unary40 =null;\n    ParserRuleReturnScope unary_operator41 =null;\n    ParserRuleReturnScope unary42 =null;\n\n    CommonTree AT_ADD39_tree=null;\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:299:5: ( postfix | AT_ADD ! unary | unary_operator ^ unary )\n      int alt12=3;\n      switch ( input.LA(1) ) {\n      case AT_LPAREN:\n      case DECIMAL:\n      case HEX:\n      case NAMESPACE_ID:\n      case OCTAL:\n        {\n        alt12=1;\n        }\n        break;\n      case AT_ADD:\n        {\n        alt12=2;\n        }\n        break;\n      case AT_BIT_NOT:\n      case AT_BOOL_NOT:\n      case AT_SUBTRACT:\n        {\n        alt12=3;\n        }\n        break;\n      default:\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 12, 0, input);\n        throw nvae;\n      }\n      switch (alt12) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          pushFollow(FOLLOW_postfix_in_unary1084);\n          postfix38=postfix();\n          state._fsp--;\n\n          adaptor.addChild(root_0, postfix38.getTree());\n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          AT_ADD39=(Token)match(input,AT_ADD,FOLLOW_AT_ADD_in_unary1092); \n          pushFollow(FOLLOW_unary_in_unary1095);\n          unary40=unary();\n          state._fsp--;\n\n          adaptor.addChild(root_0, unary40.getTree());\n\n          }\n          break;\n        case 3 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          pushFollow(FOLLOW_unary_operator_in_unary1103);\n          unary_operator41=unary_operator();\n          state._fsp--;\n\n          root_0 = (CommonTree)adaptor.becomeRoot(unary_operator41.getTree(), root_0);\n          pushFollow(FOLLOW_unary_in_unary1106);\n          unary42=unary();\n          state._fsp--;\n\n          adaptor.addChild(root_0, unary42.getTree());\n\n          }\n          break;\n\n      }\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"unary\"\n\n","bugFix":["8d639dc27b5b3eae561ef321b06f3cad9280c529"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d23d4828afa583ebf35b4a541763af6206133458","date":1438931440,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#unary().mjava","sourceNew":null,"sourceOld":"  // $ANTLR start \"unary\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:298:1: unary : ( postfix | AT_ADD ! unary | unary_operator ^ unary );\n  public final JavascriptParser.unary_return unary() throws RecognitionException {\n    JavascriptParser.unary_return retval = new JavascriptParser.unary_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token AT_ADD39=null;\n    ParserRuleReturnScope postfix38 =null;\n    ParserRuleReturnScope unary40 =null;\n    ParserRuleReturnScope unary_operator41 =null;\n    ParserRuleReturnScope unary42 =null;\n\n    CommonTree AT_ADD39_tree=null;\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:299:5: ( postfix | AT_ADD ! unary | unary_operator ^ unary )\n      int alt12=3;\n      switch ( input.LA(1) ) {\n      case AT_LPAREN:\n      case DECIMAL:\n      case HEX:\n      case OCTAL:\n      case VARIABLE:\n        {\n        alt12=1;\n        }\n        break;\n      case AT_ADD:\n        {\n        alt12=2;\n        }\n        break;\n      case AT_BIT_NOT:\n      case AT_BOOL_NOT:\n      case AT_SUBTRACT:\n        {\n        alt12=3;\n        }\n        break;\n      default:\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 12, 0, input);\n        throw nvae;\n      }\n      switch (alt12) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:299:7: postfix\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          pushFollow(FOLLOW_postfix_in_unary1084);\n          postfix38=postfix();\n          state._fsp--;\n\n          adaptor.addChild(root_0, postfix38.getTree());\n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:300:7: AT_ADD ! unary\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          AT_ADD39=(Token)match(input,AT_ADD,FOLLOW_AT_ADD_in_unary1092); \n          pushFollow(FOLLOW_unary_in_unary1095);\n          unary40=unary();\n          state._fsp--;\n\n          adaptor.addChild(root_0, unary40.getTree());\n\n          }\n          break;\n        case 3 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:301:7: unary_operator ^ unary\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          pushFollow(FOLLOW_unary_operator_in_unary1103);\n          unary_operator41=unary_operator();\n          state._fsp--;\n\n          root_0 = (CommonTree)adaptor.becomeRoot(unary_operator41.getTree(), root_0);\n          pushFollow(FOLLOW_unary_in_unary1106);\n          unary42=unary();\n          state._fsp--;\n\n          adaptor.addChild(root_0, unary42.getTree());\n\n          }\n          break;\n\n      }\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"unary\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d23d4828afa583ebf35b4a541763af6206133458":["5b6aa541ae5bb3c0260e1c263d6897a7925fa00c"],"68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2":["3623d67605fbbdfce2fadea678e2f4bbe2ab2310"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1441eba4282a646ef88d12acb797483db37554e":["68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2"],"8d639dc27b5b3eae561ef321b06f3cad9280c529":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6aa541ae5bb3c0260e1c263d6897a7925fa00c":["8d639dc27b5b3eae561ef321b06f3cad9280c529"],"3623d67605fbbdfce2fadea678e2f4bbe2ab2310":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d23d4828afa583ebf35b4a541763af6206133458"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d1441eba4282a646ef88d12acb797483db37554e"]},"commit2Childs":{"d23d4828afa583ebf35b4a541763af6206133458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2":["d1441eba4282a646ef88d12acb797483db37554e"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["3623d67605fbbdfce2fadea678e2f4bbe2ab2310"],"d1441eba4282a646ef88d12acb797483db37554e":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"8d639dc27b5b3eae561ef321b06f3cad9280c529":["5b6aa541ae5bb3c0260e1c263d6897a7925fa00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf","5f0e44787cffbb978aa2182761e3f9b184545a1e"],"5b6aa541ae5bb3c0260e1c263d6897a7925fa00c":["d23d4828afa583ebf35b4a541763af6206133458"],"3623d67605fbbdfce2fadea678e2f4bbe2ab2310":["68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["8d639dc27b5b3eae561ef321b06f3cad9280c529"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}