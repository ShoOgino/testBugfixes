{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(TEST_VERSION_CURRENT, reader)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(TEST_VERSION_CURRENT, reader)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f8e68717c68517265937c911e1ce9f25750247","date":1274071103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(TEST_VERSION_CURRENT, reader)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    MockRAMDirectory dir = newDirectory(random);\n    IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory(random);\n    IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    MockRAMDirectory dir = newDirectory(random);\n    IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory(random);\n    IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd4c4b2a55a46d2c45e3de4514f08e33215caa21","date":1288902330,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":null,"sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"85a883878c0af761245ab048babc63d099f835f3":["132903c28af3aa6f67284b78de91c0f0a99488c2","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"c7f8e68717c68517265937c911e1ce9f25750247":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["c7f8e68717c68517265937c911e1ce9f25750247","28427ef110c4c5bf5b4057731b83110bd1e13724"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["c7f8e68717c68517265937c911e1ce9f25750247"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["3242a09f703274d3b9283f2064a1a33064b53a1b","b21422ff1d1d56499dec481f193b402e5e8def5b"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"85a883878c0af761245ab048babc63d099f835f3":[],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["85a883878c0af761245ab048babc63d099f835f3","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"c7f8e68717c68517265937c911e1ce9f25750247":["5f4e87790277826a2aea119328600dfb07761f32","28427ef110c4c5bf5b4057731b83110bd1e13724"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","5f4e87790277826a2aea119328600dfb07761f32"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c7f8e68717c68517265937c911e1ce9f25750247"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}