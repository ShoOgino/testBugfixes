{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#FSTTermsWriter(SegmentWriteState,PostingsWriterBase).mjava","commits":[{"id":"56df73d43b6fc340f5332322862382c7e30f4368","date":1378304988,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#FSTTermsWriter(SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTTermsWriter#TempFSTTermsWriter(SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public FSTTermsWriter(SegmentWriteState state, PostingsWriterBase postingsWriter) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n\n    this.postingsWriter = postingsWriter;\n    this.fieldInfos = state.fieldInfos;\n    this.out = state.directory.createOutput(termsFileName, state.context);\n\n    boolean success = false;\n    try {\n      writeHeader(out);\n      this.postingsWriter.init(out); \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public TempFSTTermsWriter(SegmentWriteState state, PostingsWriterBase postingsWriter) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n\n    this.postingsWriter = postingsWriter;\n    this.fieldInfos = state.fieldInfos;\n    this.out = state.directory.createOutput(termsFileName, state.context);\n\n    boolean success = false;\n    try {\n      writeHeader(out);\n      this.postingsWriter.init(out); \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#FSTTermsWriter(SegmentWriteState,PostingsWriterBase).mjava","pathOld":"/dev/null","sourceNew":"  public FSTTermsWriter(SegmentWriteState state, PostingsWriterBase postingsWriter) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n\n    this.postingsWriter = postingsWriter;\n    this.fieldInfos = state.fieldInfos;\n    this.out = state.directory.createOutput(termsFileName, state.context);\n\n    boolean success = false;\n    try {\n      writeHeader(out);\n      this.postingsWriter.init(out); \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#FSTTermsWriter(SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#FSTTermsWriter(SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public FSTTermsWriter(SegmentWriteState state, PostingsWriterBase postingsWriter) throws IOException {\n    super(state);\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n\n    this.postingsWriter = postingsWriter;\n    this.fieldInfos = state.fieldInfos;\n    this.out = state.directory.createOutput(termsFileName, state.context);\n\n    boolean success = false;\n    try {\n      writeHeader(out);\n      this.postingsWriter.init(out); \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public FSTTermsWriter(SegmentWriteState state, PostingsWriterBase postingsWriter) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n\n    this.postingsWriter = postingsWriter;\n    this.fieldInfos = state.fieldInfos;\n    this.out = state.directory.createOutput(termsFileName, state.context);\n\n    boolean success = false;\n    try {\n      writeHeader(out);\n      this.postingsWriter.init(out); \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#FSTTermsWriter(SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#FSTTermsWriter(SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public FSTTermsWriter(SegmentWriteState state, PostingsWriterBase postingsWriter) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n\n    this.postingsWriter = postingsWriter;\n    this.fieldInfos = state.fieldInfos;\n    this.out = state.directory.createOutput(termsFileName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n\n    boolean success = false;\n    try {\n      writeHeader(out);\n      this.postingsWriter.init(out); \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public FSTTermsWriter(SegmentWriteState state, PostingsWriterBase postingsWriter) throws IOException {\n    super(state);\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n\n    this.postingsWriter = postingsWriter;\n    this.fieldInfos = state.fieldInfos;\n    this.out = state.directory.createOutput(termsFileName, state.context);\n\n    boolean success = false;\n    try {\n      writeHeader(out);\n      this.postingsWriter.init(out); \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d640273789c74bf4f1412b99c67294c14293d154","date":1412169281,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#FSTTermsWriter(SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#FSTTermsWriter(SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public FSTTermsWriter(SegmentWriteState state, PostingsWriterBase postingsWriter) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n\n    this.postingsWriter = postingsWriter;\n    this.fieldInfos = state.fieldInfos;\n    this.out = state.directory.createOutput(termsFileName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n\n    boolean success = false;\n    try {\n      CodecUtil.writeSegmentHeader(out, TERMS_CODEC_NAME, TERMS_VERSION_CURRENT,\n                                        state.segmentInfo.getId(), state.segmentSuffix);   \n\n      this.postingsWriter.init(out); \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public FSTTermsWriter(SegmentWriteState state, PostingsWriterBase postingsWriter) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n\n    this.postingsWriter = postingsWriter;\n    this.fieldInfos = state.fieldInfos;\n    this.out = state.directory.createOutput(termsFileName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n\n    boolean success = false;\n    try {\n      writeHeader(out);\n      this.postingsWriter.init(out); \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#FSTTermsWriter(SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#FSTTermsWriter(SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public FSTTermsWriter(SegmentWriteState state, PostingsWriterBase postingsWriter) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n\n    this.postingsWriter = postingsWriter;\n    this.fieldInfos = state.fieldInfos;\n    this.out = state.directory.createOutput(termsFileName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n\n    boolean success = false;\n    try {\n      CodecUtil.writeSegmentHeader(out, TERMS_CODEC_NAME, TERMS_VERSION_CURRENT,\n                                        state.segmentInfo.getId(), state.segmentSuffix);   \n\n      this.postingsWriter.init(out); \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public FSTTermsWriter(SegmentWriteState state, PostingsWriterBase postingsWriter) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n\n    this.postingsWriter = postingsWriter;\n    this.fieldInfos = state.fieldInfos;\n    this.out = state.directory.createOutput(termsFileName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n\n    boolean success = false;\n    try {\n      writeHeader(out);\n      this.postingsWriter.init(out); \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#FSTTermsWriter(SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#FSTTermsWriter(SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public FSTTermsWriter(SegmentWriteState state, PostingsWriterBase postingsWriter) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n\n    this.postingsWriter = postingsWriter;\n    this.fieldInfos = state.fieldInfos;\n    this.out = state.directory.createOutput(termsFileName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n\n    boolean success = false;\n    try {\n      CodecUtil.writeSegmentHeader(out, TERMS_CODEC_NAME, TERMS_VERSION_CURRENT,\n                                        state.segmentInfo.getId(), state.segmentSuffix);   \n\n      this.postingsWriter.init(out, state); \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public FSTTermsWriter(SegmentWriteState state, PostingsWriterBase postingsWriter) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n\n    this.postingsWriter = postingsWriter;\n    this.fieldInfos = state.fieldInfos;\n    this.out = state.directory.createOutput(termsFileName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n\n    boolean success = false;\n    try {\n      CodecUtil.writeSegmentHeader(out, TERMS_CODEC_NAME, TERMS_VERSION_CURRENT,\n                                        state.segmentInfo.getId(), state.segmentSuffix);   \n\n      this.postingsWriter.init(out); \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#FSTTermsWriter(SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#FSTTermsWriter(SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public FSTTermsWriter(SegmentWriteState state, PostingsWriterBase postingsWriter) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n\n    this.postingsWriter = postingsWriter;\n    this.fieldInfos = state.fieldInfos;\n    this.out = state.directory.createOutput(termsFileName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, TERMS_VERSION_CURRENT,\n                                        state.segmentInfo.getId(), state.segmentSuffix);   \n\n      this.postingsWriter.init(out, state); \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public FSTTermsWriter(SegmentWriteState state, PostingsWriterBase postingsWriter) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n\n    this.postingsWriter = postingsWriter;\n    this.fieldInfos = state.fieldInfos;\n    this.out = state.directory.createOutput(termsFileName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n\n    boolean success = false;\n    try {\n      CodecUtil.writeSegmentHeader(out, TERMS_CODEC_NAME, TERMS_VERSION_CURRENT,\n                                        state.segmentInfo.getId(), state.segmentSuffix);   \n\n      this.postingsWriter.init(out, state); \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#FSTTermsWriter(SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#FSTTermsWriter(SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public FSTTermsWriter(SegmentWriteState state, PostingsWriterBase postingsWriter) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n\n    this.postingsWriter = postingsWriter;\n    this.fieldInfos = state.fieldInfos;\n    this.out = state.directory.createOutput(termsFileName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, TERMS_VERSION_CURRENT,\n                                        state.segmentInfo.getId(), state.segmentSuffix);   \n\n      this.postingsWriter.init(out, state); \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public FSTTermsWriter(SegmentWriteState state, PostingsWriterBase postingsWriter) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n\n    this.postingsWriter = postingsWriter;\n    this.fieldInfos = state.fieldInfos;\n    this.out = state.directory.createOutput(termsFileName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n\n    boolean success = false;\n    try {\n      CodecUtil.writeSegmentHeader(out, TERMS_CODEC_NAME, TERMS_VERSION_CURRENT,\n                                        state.segmentInfo.getId(), state.segmentSuffix);   \n\n      this.postingsWriter.init(out); \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#FSTTermsWriter(SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#FSTTermsWriter(SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public FSTTermsWriter(SegmentWriteState state, PostingsWriterBase postingsWriter) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n\n    this.postingsWriter = postingsWriter;\n    this.fieldInfos = state.fieldInfos;\n    this.out = state.directory.createOutput(termsFileName, state.context);\n    this.maxDoc = state.segmentInfo.maxDoc();\n\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, TERMS_VERSION_CURRENT,\n                                        state.segmentInfo.getId(), state.segmentSuffix);   \n\n      this.postingsWriter.init(out, state); \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public FSTTermsWriter(SegmentWriteState state, PostingsWriterBase postingsWriter) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n\n    this.postingsWriter = postingsWriter;\n    this.fieldInfos = state.fieldInfos;\n    this.out = state.directory.createOutput(termsFileName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, TERMS_VERSION_CURRENT,\n                                        state.segmentInfo.getId(), state.segmentSuffix);   \n\n      this.postingsWriter.init(out, state); \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#FSTTermsWriter(SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#FSTTermsWriter(SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public FSTTermsWriter(SegmentWriteState state, PostingsWriterBase postingsWriter) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n\n    this.postingsWriter = postingsWriter;\n    this.fieldInfos = state.fieldInfos;\n    this.out = state.directory.createOutput(termsFileName, state.context);\n    this.maxDoc = state.segmentInfo.maxDoc();\n\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, TERMS_VERSION_CURRENT,\n                                        state.segmentInfo.getId(), state.segmentSuffix);   \n\n      this.postingsWriter.init(out, state); \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public FSTTermsWriter(SegmentWriteState state, PostingsWriterBase postingsWriter) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n\n    this.postingsWriter = postingsWriter;\n    this.fieldInfos = state.fieldInfos;\n    this.out = state.directory.createOutput(termsFileName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, TERMS_VERSION_CURRENT,\n                                        state.segmentInfo.getId(), state.segmentSuffix);   \n\n      this.postingsWriter.init(out, state); \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#FSTTermsWriter(SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#FSTTermsWriter(SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public FSTTermsWriter(SegmentWriteState state, PostingsWriterBase postingsWriter) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n\n    this.postingsWriter = postingsWriter;\n    this.fieldInfos = state.fieldInfos;\n    this.out = state.directory.createOutput(termsFileName, state.context);\n    this.maxDoc = state.segmentInfo.maxDoc();\n\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, TERMS_VERSION_CURRENT,\n                                        state.segmentInfo.getId(), state.segmentSuffix);   \n\n      this.postingsWriter.init(out, state); \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public FSTTermsWriter(SegmentWriteState state, PostingsWriterBase postingsWriter) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n\n    this.postingsWriter = postingsWriter;\n    this.fieldInfos = state.fieldInfos;\n    this.out = state.directory.createOutput(termsFileName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, TERMS_VERSION_CURRENT,\n                                        state.segmentInfo.getId(), state.segmentSuffix);   \n\n      this.postingsWriter.init(out, state); \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#FSTTermsWriter(SegmentWriteState,PostingsWriterBase).mjava","sourceNew":null,"sourceOld":"  public FSTTermsWriter(SegmentWriteState state, PostingsWriterBase postingsWriter) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n\n    this.postingsWriter = postingsWriter;\n    this.fieldInfos = state.fieldInfos;\n    this.out = state.directory.createOutput(termsFileName, state.context);\n    this.maxDoc = state.segmentInfo.maxDoc();\n\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, TERMS_VERSION_CURRENT,\n                                        state.segmentInfo.getId(), state.segmentSuffix);   \n\n      this.postingsWriter.init(out, state); \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter#FSTTermsWriter(SegmentWriteState,PostingsWriterBase).mjava","pathOld":"/dev/null","sourceNew":"  public FSTTermsWriter(SegmentWriteState state, PostingsWriterBase postingsWriter) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n\n    this.postingsWriter = postingsWriter;\n    this.fieldInfos = state.fieldInfos;\n    this.out = state.directory.createOutput(termsFileName, state.context);\n    this.maxDoc = state.segmentInfo.maxDoc();\n\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, TERMS_VERSION_CURRENT,\n                                        state.segmentInfo.getId(), state.segmentSuffix);   \n\n      this.postingsWriter.init(out, state); \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56df73d43b6fc340f5332322862382c7e30f4368":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"99eb4a732d1a908f4636ace52928876136bf1896":["d640273789c74bf4f1412b99c67294c14293d154"],"b0267c69e2456a3477a1ad785723f2135da3117e":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["b0267c69e2456a3477a1ad785723f2135da3117e"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["99eb4a732d1a908f4636ace52928876136bf1896"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","b0267c69e2456a3477a1ad785723f2135da3117e"],"b06445ae1731e049327712db0454e5643ca9b7fe":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","b0267c69e2456a3477a1ad785723f2135da3117e"],"9bb9a29a5e71a90295f175df8919802993142c9a":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52","d640273789c74bf4f1412b99c67294c14293d154"],"d640273789c74bf4f1412b99c67294c14293d154":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56df73d43b6fc340f5332322862382c7e30f4368"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06ab276a5660cb79daae8c5ede063531c700a03a"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"56df73d43b6fc340f5332322862382c7e30f4368":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"99eb4a732d1a908f4636ace52928876136bf1896":["3384e6013a93e4d11b7d75388693f8d0388602bf"],"b0267c69e2456a3477a1ad785723f2135da3117e":["cb77022ef17ff655c519a3f6ecd393747ac88bcf","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["9bb9a29a5e71a90295f175df8919802993142c9a","d640273789c74bf4f1412b99c67294c14293d154"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"d640273789c74bf4f1412b99c67294c14293d154":["99eb4a732d1a908f4636ace52928876136bf1896","9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56df73d43b6fc340f5332322862382c7e30f4368","2f948dd442d23baa6cbb28daf77c8db78b351329"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["b0267c69e2456a3477a1ad785723f2135da3117e","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"06ab276a5660cb79daae8c5ede063531c700a03a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}