{"path":"backwards/src/java/org/apache/lucene/index/MultiReader#doReopen(boolean).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/MultiReader#doReopen(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * If clone is true then we clone each of the subreaders\n   * @param doClone\n   * @return New IndexReader, or same one (this) if\n   *   reopen/clone is not necessary\n   * @throws CorruptIndexException\n   * @throws IOException\n   */\n  protected IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    IndexReader[] newSubReaders = new IndexReader[subReaders.length];\n    \n    boolean success = false;\n    try {\n      for (int i = 0; i < subReaders.length; i++) {\n        if (doClone)\n          newSubReaders[i] = (IndexReader) subReaders[i].clone();\n        else\n          newSubReaders[i] = subReaders[i].reopen();\n        // if at least one of the subreaders was updated we remember that\n        // and return a new MultiReader\n        if (newSubReaders[i] != subReaders[i]) {\n          reopened = true;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newSubReaders.length; i++) {\n          if (newSubReaders[i] != subReaders[i]) {\n            try {\n              newSubReaders[i].close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      boolean[] newDecrefOnClose = new boolean[subReaders.length];\n      for (int i = 0; i < subReaders.length; i++) {\n        if (newSubReaders[i] == subReaders[i]) {\n          newSubReaders[i].incRef();\n          newDecrefOnClose[i] = true;\n        }\n      }\n      MultiReader mr = new MultiReader(newSubReaders);\n      mr.decrefOnClose = newDecrefOnClose;\n      return mr;\n    } else {\n      return this;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/MultiReader#doReopen(boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/MultiReader#doReopen(boolean).mjava","sourceNew":"  /**\n   * If clone is true then we clone each of the subreaders\n   * @param doClone\n   * @return New IndexReader, or same one (this) if\n   *   reopen/clone is not necessary\n   * @throws CorruptIndexException\n   * @throws IOException\n   */\n  protected IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    IndexReader[] newSubReaders = new IndexReader[subReaders.length];\n    \n    boolean success = false;\n    try {\n      for (int i = 0; i < subReaders.length; i++) {\n        if (doClone)\n          newSubReaders[i] = (IndexReader) subReaders[i].clone();\n        else\n          newSubReaders[i] = subReaders[i].reopen();\n        // if at least one of the subreaders was updated we remember that\n        // and return a new MultiReader\n        if (newSubReaders[i] != subReaders[i]) {\n          reopened = true;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newSubReaders.length; i++) {\n          if (newSubReaders[i] != subReaders[i]) {\n            try {\n              newSubReaders[i].close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      boolean[] newDecrefOnClose = new boolean[subReaders.length];\n      for (int i = 0; i < subReaders.length; i++) {\n        if (newSubReaders[i] == subReaders[i]) {\n          newSubReaders[i].incRef();\n          newDecrefOnClose[i] = true;\n        }\n      }\n      MultiReader mr = new MultiReader(newSubReaders);\n      mr.decrefOnClose = newDecrefOnClose;\n      return mr;\n    } else {\n      return this;\n    }\n  }\n\n","sourceOld":"  /**\n   * If clone is true then we clone each of the subreaders\n   * @param doClone\n   * @return New IndexReader, or same one (this) if\n   *   reopen/clone is not necessary\n   * @throws CorruptIndexException\n   * @throws IOException\n   */\n  protected IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    IndexReader[] newSubReaders = new IndexReader[subReaders.length];\n    \n    boolean success = false;\n    try {\n      for (int i = 0; i < subReaders.length; i++) {\n        if (doClone)\n          newSubReaders[i] = (IndexReader) subReaders[i].clone();\n        else\n          newSubReaders[i] = subReaders[i].reopen();\n        // if at least one of the subreaders was updated we remember that\n        // and return a new MultiReader\n        if (newSubReaders[i] != subReaders[i]) {\n          reopened = true;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newSubReaders.length; i++) {\n          if (newSubReaders[i] != subReaders[i]) {\n            try {\n              newSubReaders[i].close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      boolean[] newDecrefOnClose = new boolean[subReaders.length];\n      for (int i = 0; i < subReaders.length; i++) {\n        if (newSubReaders[i] == subReaders[i]) {\n          newSubReaders[i].incRef();\n          newDecrefOnClose[i] = true;\n        }\n      }\n      MultiReader mr = new MultiReader(newSubReaders);\n      mr.decrefOnClose = newDecrefOnClose;\n      return mr;\n    } else {\n      return this;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}