{"path":"src/java/org/apache/lucene/index/DocumentsWriterThreadState#processDocument(Analyzer).mjava","commits":[{"id":"5a0af3a442be522899177e5e11384a45a6784a3f","date":1205348952,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriterThreadState#processDocument(Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  /** Tokenizes the fields of a document into Postings */\n  void processDocument(Analyzer analyzer)\n    throws IOException, AbortException {\n\n    final int numFields = numFieldData;\n    assert clearLastVectorFieldName();\n\n    assert 0 == fdtLocal.length();\n\n    if (docWriter.tvx != null)\n      // If we are writing vectors then we must visit\n      // fields in sorted order so they are written in\n      // sorted order.  TODO: we actually only need to\n      // sort the subset of fields that have vectors\n      // enabled; we could save [small amount of] CPU\n      // here.\n      quickSort(fieldDataArray, 0, numFields-1);\n\n    // We process the document one field at a time\n    for(int i=0;i<numFields;i++)\n      fieldDataArray[i].processField(analyzer);\n\n    if (docWriter.infoStream != null && maxTermPrefix != null)\n      docWriter.infoStream.println(\"WARNING: document contains at least one immense term (longer than the max length \" + DocumentsWriter.MAX_TERM_LENGTH + \"), all of which were skipped.  Please correct the analyzer to not produce such terms.  The prefix of the first immense term is: '\" + maxTermPrefix + \"...'\"); \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/DocumentsWriterThreadState#processDocument(Analyzer).mjava","sourceNew":null,"sourceOld":"  /** Tokenizes the fields of a document into Postings */\n  void processDocument(Analyzer analyzer)\n    throws IOException, AbortException {\n\n    final int numFields = numFieldData;\n    assert clearLastVectorFieldName();\n\n    assert 0 == fdtLocal.length();\n\n    if (docWriter.tvx != null)\n      // If we are writing vectors then we must visit\n      // fields in sorted order so they are written in\n      // sorted order.  TODO: we actually only need to\n      // sort the subset of fields that have vectors\n      // enabled; we could save [small amount of] CPU\n      // here.\n      quickSort(fieldDataArray, 0, numFields-1);\n\n    // We process the document one field at a time\n    for(int i=0;i<numFields;i++)\n      fieldDataArray[i].processField(analyzer);\n\n    if (docWriter.infoStream != null && maxTermPrefix != null)\n      docWriter.infoStream.println(\"WARNING: document contains at least one immense term (longer than the max length \" + DocumentsWriter.MAX_TERM_LENGTH + \"), all of which were skipped.  Please correct the analyzer to not produce such terms.  The prefix of the first immense term is: '\" + maxTermPrefix + \"...'\"); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a0af3a442be522899177e5e11384a45a6784a3f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5350389bf83287111f7760b9e3db3af8e3648474":["5a0af3a442be522899177e5e11384a45a6784a3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5350389bf83287111f7760b9e3db3af8e3648474"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a0af3a442be522899177e5e11384a45a6784a3f"],"5a0af3a442be522899177e5e11384a45a6784a3f":["5350389bf83287111f7760b9e3db3af8e3648474"],"5350389bf83287111f7760b9e3db3af8e3648474":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}