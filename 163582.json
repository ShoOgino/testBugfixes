{"path":"lucene/src/test-framework/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(AtomicReaderContext).mjava","commits":[{"id":"7da4ef858fd1769c26618bc6a24e479d88e7180f","date":1313600819,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public synchronized DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n\n    final int saveMissCount = missCount;\n    DocIdSet docIdSet = super.getDocIdSet(context);\n\n    if (shouldHaveCache) {\n      Assert.assertEquals(\"Cache should have data \", saveMissCount, missCount);\n    } else {\n      Assert.assertTrue(\"Cache should be null \" + docIdSet, missCount > saveMissCount);\n    }\n\n    return docIdSet;\n  }\n\n","sourceOld":"  @Override\n  public synchronized DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n\n    final int saveMissCount = missCount;\n    DocIdSet docIdSet = super.getDocIdSet(context);\n\n    if (shouldHaveCache) {\n      Assert.assertEquals(\"Cache should have data \", saveMissCount, missCount);\n    } else {\n      Assert.assertTrue(\"Cache should be null \" + docIdSet, missCount > saveMissCount);\n    }\n\n    return docIdSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public synchronized DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n\n    final int saveMissCount = missCount;\n    DocIdSet docIdSet = super.getDocIdSet(context, acceptDocs);\n\n    if (shouldHaveCache) {\n      Assert.assertEquals(\"Cache should have data \", saveMissCount, missCount);\n    } else {\n      Assert.assertTrue(\"Cache should be null \" + docIdSet, missCount > saveMissCount);\n    }\n\n    return docIdSet;\n  }\n\n","sourceOld":"  @Override\n  public synchronized DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n\n    final int saveMissCount = missCount;\n    DocIdSet docIdSet = super.getDocIdSet(context);\n\n    if (shouldHaveCache) {\n      Assert.assertEquals(\"Cache should have data \", saveMissCount, missCount);\n    } else {\n      Assert.assertTrue(\"Cache should be null \" + docIdSet, missCount > saveMissCount);\n    }\n\n    return docIdSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7da4ef858fd1769c26618bc6a24e479d88e7180f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6620df8541b174097b1133a4fc370adb2e570524":["7da4ef858fd1769c26618bc6a24e479d88e7180f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6620df8541b174097b1133a4fc370adb2e570524"]},"commit2Childs":{"7da4ef858fd1769c26618bc6a24e479d88e7180f":["6620df8541b174097b1133a4fc370adb2e570524"],"6620df8541b174097b1133a4fc370adb2e570524":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7da4ef858fd1769c26618bc6a24e479d88e7180f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}