{"path":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#addCollationsToResponse(SolrParams,SpellingResult,ResponseBuilder,String,NamedList).mjava","commits":[{"id":"cdcf766020b9b159d0b3a6ecae90ff1998ded019","date":1286818331,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#addCollationsToResponse(SolrParams,SpellingResult,ResponseBuilder,String,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n\tprotected void addCollationsToResponse(SolrParams params, SpellingResult spellingResult, ResponseBuilder rb, String q,\n\t\t\tNamedList response) {\n\t\tint maxCollations = params.getInt(SPELLCHECK_MAX_COLLATIONS, 1);\n\t\tint maxCollationTries = params.getInt(SPELLCHECK_MAX_COLLATION_TRIES, 0);\n\t\tboolean collationExtendedResults = params.getBool(SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n\t\tboolean shard = params.getBool(ShardParams.IS_SHARD, false);\n\n\t\tSpellCheckCollator collator = new SpellCheckCollator();\n\t\tList<SpellCheckCollation> collations = collator.collate(spellingResult, q, rb, maxCollations, maxCollationTries);\n\t\t//by sorting here we guarantee a non-distributed request returns all \n\t\t//results in the same order as a distributed request would, \n\t\t//even in cases when the internal rank is the same.\n\t\tCollections.sort(collations);\n\t\t\n\t\tfor (SpellCheckCollation collation : collations) {\n\t\t\tif (collationExtendedResults) {\n\t\t\t\tNamedList extendedResult = new NamedList();\n\t\t\t\textendedResult.add(\"collationQuery\", collation.getCollationQuery());\n\t\t\t\textendedResult.add(\"hits\", collation.getHits());\n\t\t\t\textendedResult.add(\"misspellingsAndCorrections\", collation.getMisspellingsAndCorrections());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\textendedResult.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t\tresponse.add(\"collation\", extendedResult);\n\t\t\t} else {\n\t\t\t\tresponse.add(\"collation\", collation.getCollationQuery());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\tresponse.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":["31aff65a420ac3dfd25611e2c4a99d38b7dd60e9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#addCollationsToResponse(SolrParams,SpellingResult,ResponseBuilder,String,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n\tprotected void addCollationsToResponse(SolrParams params, SpellingResult spellingResult, ResponseBuilder rb, String q,\n\t\t\tNamedList response) {\n\t\tint maxCollations = params.getInt(SPELLCHECK_MAX_COLLATIONS, 1);\n\t\tint maxCollationTries = params.getInt(SPELLCHECK_MAX_COLLATION_TRIES, 0);\n\t\tboolean collationExtendedResults = params.getBool(SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n\t\tboolean shard = params.getBool(ShardParams.IS_SHARD, false);\n\n\t\tSpellCheckCollator collator = new SpellCheckCollator();\n\t\tList<SpellCheckCollation> collations = collator.collate(spellingResult, q, rb, maxCollations, maxCollationTries);\n\t\t//by sorting here we guarantee a non-distributed request returns all \n\t\t//results in the same order as a distributed request would, \n\t\t//even in cases when the internal rank is the same.\n\t\tCollections.sort(collations);\n\t\t\n\t\tfor (SpellCheckCollation collation : collations) {\n\t\t\tif (collationExtendedResults) {\n\t\t\t\tNamedList extendedResult = new NamedList();\n\t\t\t\textendedResult.add(\"collationQuery\", collation.getCollationQuery());\n\t\t\t\textendedResult.add(\"hits\", collation.getHits());\n\t\t\t\textendedResult.add(\"misspellingsAndCorrections\", collation.getMisspellingsAndCorrections());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\textendedResult.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t\tresponse.add(\"collation\", extendedResult);\n\t\t\t} else {\n\t\t\t\tresponse.add(\"collation\", collation.getCollationQuery());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\tresponse.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31aff65a420ac3dfd25611e2c4a99d38b7dd60e9","date":1307387688,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#addCollationsToResponse(SolrParams,SpellingResult,ResponseBuilder,String,NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#addCollationsToResponse(SolrParams,SpellingResult,ResponseBuilder,String,NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n\tprotected void addCollationsToResponse(SolrParams params, SpellingResult spellingResult, ResponseBuilder rb, String q,\n\t\t\tNamedList response) {\n\t\tint maxCollations = params.getInt(SPELLCHECK_MAX_COLLATIONS, 1);\n\t\tint maxCollationTries = params.getInt(SPELLCHECK_MAX_COLLATION_TRIES, 0);\n\t\tint maxCollationEvaluations = params.getInt(SPELLCHECK_MAX_COLLATION_EVALUATIONS, 10000);\n\t\tboolean collationExtendedResults = params.getBool(SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n\t\tboolean shard = params.getBool(ShardParams.IS_SHARD, false);\n\n\t\tSpellCheckCollator collator = new SpellCheckCollator();\n\t\tList<SpellCheckCollation> collations = collator.collate(spellingResult, q, rb, maxCollations, maxCollationTries, maxCollationEvaluations);\n\t\t//by sorting here we guarantee a non-distributed request returns all \n\t\t//results in the same order as a distributed request would, \n\t\t//even in cases when the internal rank is the same.\n\t\tCollections.sort(collations);\n\t\t\n\t\tfor (SpellCheckCollation collation : collations) {\n\t\t\tif (collationExtendedResults) {\n\t\t\t\tNamedList extendedResult = new NamedList();\n\t\t\t\textendedResult.add(\"collationQuery\", collation.getCollationQuery());\n\t\t\t\textendedResult.add(\"hits\", collation.getHits());\n\t\t\t\textendedResult.add(\"misspellingsAndCorrections\", collation.getMisspellingsAndCorrections());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\textendedResult.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t\tresponse.add(\"collation\", extendedResult);\n\t\t\t} else {\n\t\t\t\tresponse.add(\"collation\", collation.getCollationQuery());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\tresponse.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n\tprotected void addCollationsToResponse(SolrParams params, SpellingResult spellingResult, ResponseBuilder rb, String q,\n\t\t\tNamedList response) {\n\t\tint maxCollations = params.getInt(SPELLCHECK_MAX_COLLATIONS, 1);\n\t\tint maxCollationTries = params.getInt(SPELLCHECK_MAX_COLLATION_TRIES, 0);\n\t\tboolean collationExtendedResults = params.getBool(SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n\t\tboolean shard = params.getBool(ShardParams.IS_SHARD, false);\n\n\t\tSpellCheckCollator collator = new SpellCheckCollator();\n\t\tList<SpellCheckCollation> collations = collator.collate(spellingResult, q, rb, maxCollations, maxCollationTries);\n\t\t//by sorting here we guarantee a non-distributed request returns all \n\t\t//results in the same order as a distributed request would, \n\t\t//even in cases when the internal rank is the same.\n\t\tCollections.sort(collations);\n\t\t\n\t\tfor (SpellCheckCollation collation : collations) {\n\t\t\tif (collationExtendedResults) {\n\t\t\t\tNamedList extendedResult = new NamedList();\n\t\t\t\textendedResult.add(\"collationQuery\", collation.getCollationQuery());\n\t\t\t\textendedResult.add(\"hits\", collation.getHits());\n\t\t\t\textendedResult.add(\"misspellingsAndCorrections\", collation.getMisspellingsAndCorrections());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\textendedResult.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t\tresponse.add(\"collation\", extendedResult);\n\t\t\t} else {\n\t\t\t\tresponse.add(\"collation\", collation.getCollationQuery());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\tresponse.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n","bugFix":["cdcf766020b9b159d0b3a6ecae90ff1998ded019"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#addCollationsToResponse(SolrParams,SpellingResult,ResponseBuilder,String,NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#addCollationsToResponse(SolrParams,SpellingResult,ResponseBuilder,String,NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n\tprotected void addCollationsToResponse(SolrParams params, SpellingResult spellingResult, ResponseBuilder rb, String q,\n\t\t\tNamedList response) {\n\t\tint maxCollations = params.getInt(SPELLCHECK_MAX_COLLATIONS, 1);\n\t\tint maxCollationTries = params.getInt(SPELLCHECK_MAX_COLLATION_TRIES, 0);\n\t\tint maxCollationEvaluations = params.getInt(SPELLCHECK_MAX_COLLATION_EVALUATIONS, 10000);\n\t\tboolean collationExtendedResults = params.getBool(SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n\t\tboolean shard = params.getBool(ShardParams.IS_SHARD, false);\n\n\t\tSpellCheckCollator collator = new SpellCheckCollator();\n\t\tList<SpellCheckCollation> collations = collator.collate(spellingResult, q, rb, maxCollations, maxCollationTries, maxCollationEvaluations);\n\t\t//by sorting here we guarantee a non-distributed request returns all \n\t\t//results in the same order as a distributed request would, \n\t\t//even in cases when the internal rank is the same.\n\t\tCollections.sort(collations);\n\t\t\n\t\tfor (SpellCheckCollation collation : collations) {\n\t\t\tif (collationExtendedResults) {\n\t\t\t\tNamedList extendedResult = new NamedList();\n\t\t\t\textendedResult.add(\"collationQuery\", collation.getCollationQuery());\n\t\t\t\textendedResult.add(\"hits\", collation.getHits());\n\t\t\t\textendedResult.add(\"misspellingsAndCorrections\", collation.getMisspellingsAndCorrections());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\textendedResult.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t\tresponse.add(\"collation\", extendedResult);\n\t\t\t} else {\n\t\t\t\tresponse.add(\"collation\", collation.getCollationQuery());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\tresponse.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n\tprotected void addCollationsToResponse(SolrParams params, SpellingResult spellingResult, ResponseBuilder rb, String q,\n\t\t\tNamedList response) {\n\t\tint maxCollations = params.getInt(SPELLCHECK_MAX_COLLATIONS, 1);\n\t\tint maxCollationTries = params.getInt(SPELLCHECK_MAX_COLLATION_TRIES, 0);\n\t\tboolean collationExtendedResults = params.getBool(SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n\t\tboolean shard = params.getBool(ShardParams.IS_SHARD, false);\n\n\t\tSpellCheckCollator collator = new SpellCheckCollator();\n\t\tList<SpellCheckCollation> collations = collator.collate(spellingResult, q, rb, maxCollations, maxCollationTries);\n\t\t//by sorting here we guarantee a non-distributed request returns all \n\t\t//results in the same order as a distributed request would, \n\t\t//even in cases when the internal rank is the same.\n\t\tCollections.sort(collations);\n\t\t\n\t\tfor (SpellCheckCollation collation : collations) {\n\t\t\tif (collationExtendedResults) {\n\t\t\t\tNamedList extendedResult = new NamedList();\n\t\t\t\textendedResult.add(\"collationQuery\", collation.getCollationQuery());\n\t\t\t\textendedResult.add(\"hits\", collation.getHits());\n\t\t\t\textendedResult.add(\"misspellingsAndCorrections\", collation.getMisspellingsAndCorrections());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\textendedResult.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t\tresponse.add(\"collation\", extendedResult);\n\t\t\t} else {\n\t\t\t\tresponse.add(\"collation\", collation.getCollationQuery());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\tresponse.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#addCollationsToResponse(SolrParams,SpellingResult,ResponseBuilder,String,NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#addCollationsToResponse(SolrParams,SpellingResult,ResponseBuilder,String,NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n\tprotected void addCollationsToResponse(SolrParams params, SpellingResult spellingResult, ResponseBuilder rb, String q,\n\t\t\tNamedList response) {\n\t\tint maxCollations = params.getInt(SPELLCHECK_MAX_COLLATIONS, 1);\n\t\tint maxCollationTries = params.getInt(SPELLCHECK_MAX_COLLATION_TRIES, 0);\n\t\tint maxCollationEvaluations = params.getInt(SPELLCHECK_MAX_COLLATION_EVALUATIONS, 10000);\n\t\tboolean collationExtendedResults = params.getBool(SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n\t\tboolean shard = params.getBool(ShardParams.IS_SHARD, false);\n\n\t\tSpellCheckCollator collator = new SpellCheckCollator();\n\t\tList<SpellCheckCollation> collations = collator.collate(spellingResult, q, rb, maxCollations, maxCollationTries, maxCollationEvaluations);\n\t\t//by sorting here we guarantee a non-distributed request returns all \n\t\t//results in the same order as a distributed request would, \n\t\t//even in cases when the internal rank is the same.\n\t\tCollections.sort(collations);\n\t\t\n\t\tfor (SpellCheckCollation collation : collations) {\n\t\t\tif (collationExtendedResults) {\n\t\t\t\tNamedList extendedResult = new NamedList();\n\t\t\t\textendedResult.add(\"collationQuery\", collation.getCollationQuery());\n\t\t\t\textendedResult.add(\"hits\", collation.getHits());\n\t\t\t\textendedResult.add(\"misspellingsAndCorrections\", collation.getMisspellingsAndCorrections());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\textendedResult.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t\tresponse.add(\"collation\", extendedResult);\n\t\t\t} else {\n\t\t\t\tresponse.add(\"collation\", collation.getCollationQuery());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\tresponse.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n\tprotected void addCollationsToResponse(SolrParams params, SpellingResult spellingResult, ResponseBuilder rb, String q,\n\t\t\tNamedList response) {\n\t\tint maxCollations = params.getInt(SPELLCHECK_MAX_COLLATIONS, 1);\n\t\tint maxCollationTries = params.getInt(SPELLCHECK_MAX_COLLATION_TRIES, 0);\n\t\tboolean collationExtendedResults = params.getBool(SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n\t\tboolean shard = params.getBool(ShardParams.IS_SHARD, false);\n\n\t\tSpellCheckCollator collator = new SpellCheckCollator();\n\t\tList<SpellCheckCollation> collations = collator.collate(spellingResult, q, rb, maxCollations, maxCollationTries);\n\t\t//by sorting here we guarantee a non-distributed request returns all \n\t\t//results in the same order as a distributed request would, \n\t\t//even in cases when the internal rank is the same.\n\t\tCollections.sort(collations);\n\t\t\n\t\tfor (SpellCheckCollation collation : collations) {\n\t\t\tif (collationExtendedResults) {\n\t\t\t\tNamedList extendedResult = new NamedList();\n\t\t\t\textendedResult.add(\"collationQuery\", collation.getCollationQuery());\n\t\t\t\textendedResult.add(\"hits\", collation.getHits());\n\t\t\t\textendedResult.add(\"misspellingsAndCorrections\", collation.getMisspellingsAndCorrections());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\textendedResult.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t\tresponse.add(\"collation\", extendedResult);\n\t\t\t} else {\n\t\t\t\tresponse.add(\"collation\", collation.getCollationQuery());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\tresponse.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#addCollationsToResponse(SolrParams,SpellingResult,ResponseBuilder,String,NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#addCollationsToResponse(SolrParams,SpellingResult,ResponseBuilder,String,NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n\tprotected void addCollationsToResponse(SolrParams params, SpellingResult spellingResult, ResponseBuilder rb, String q,\n\t\t\tNamedList response) {\n\t\tint maxCollations = params.getInt(SPELLCHECK_MAX_COLLATIONS, 1);\n\t\tint maxCollationTries = params.getInt(SPELLCHECK_MAX_COLLATION_TRIES, 0);\n\t\tint maxCollationEvaluations = params.getInt(SPELLCHECK_MAX_COLLATION_EVALUATIONS, 10000);\n\t\tboolean collationExtendedResults = params.getBool(SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n\t\tboolean shard = params.getBool(ShardParams.IS_SHARD, false);\n\n\t\tSpellCheckCollator collator = new SpellCheckCollator();\n\t\tList<SpellCheckCollation> collations = collator.collate(spellingResult, q, rb, maxCollations, maxCollationTries, maxCollationEvaluations);\n\t\t//by sorting here we guarantee a non-distributed request returns all \n\t\t//results in the same order as a distributed request would, \n\t\t//even in cases when the internal rank is the same.\n\t\tCollections.sort(collations);\n\t\t\n\t\tfor (SpellCheckCollation collation : collations) {\n\t\t\tif (collationExtendedResults) {\n\t\t\t\tNamedList extendedResult = new NamedList();\n\t\t\t\textendedResult.add(\"collationQuery\", collation.getCollationQuery());\n\t\t\t\textendedResult.add(\"hits\", collation.getHits());\n\t\t\t\textendedResult.add(\"misspellingsAndCorrections\", collation.getMisspellingsAndCorrections());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\textendedResult.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t\tresponse.add(\"collation\", extendedResult);\n\t\t\t} else {\n\t\t\t\tresponse.add(\"collation\", collation.getCollationQuery());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\tresponse.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n\tprotected void addCollationsToResponse(SolrParams params, SpellingResult spellingResult, ResponseBuilder rb, String q,\n\t\t\tNamedList response) {\n\t\tint maxCollations = params.getInt(SPELLCHECK_MAX_COLLATIONS, 1);\n\t\tint maxCollationTries = params.getInt(SPELLCHECK_MAX_COLLATION_TRIES, 0);\n\t\tint maxCollationEvaluations = params.getInt(SPELLCHECK_MAX_COLLATION_EVALUATIONS, 10000);\n\t\tboolean collationExtendedResults = params.getBool(SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n\t\tboolean shard = params.getBool(ShardParams.IS_SHARD, false);\n\n\t\tSpellCheckCollator collator = new SpellCheckCollator();\n\t\tList<SpellCheckCollation> collations = collator.collate(spellingResult, q, rb, maxCollations, maxCollationTries, maxCollationEvaluations);\n\t\t//by sorting here we guarantee a non-distributed request returns all \n\t\t//results in the same order as a distributed request would, \n\t\t//even in cases when the internal rank is the same.\n\t\tCollections.sort(collations);\n\t\t\n\t\tfor (SpellCheckCollation collation : collations) {\n\t\t\tif (collationExtendedResults) {\n\t\t\t\tNamedList extendedResult = new NamedList();\n\t\t\t\textendedResult.add(\"collationQuery\", collation.getCollationQuery());\n\t\t\t\textendedResult.add(\"hits\", collation.getHits());\n\t\t\t\textendedResult.add(\"misspellingsAndCorrections\", collation.getMisspellingsAndCorrections());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\textendedResult.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t\tresponse.add(\"collation\", extendedResult);\n\t\t\t} else {\n\t\t\t\tresponse.add(\"collation\", collation.getCollationQuery());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\tresponse.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#addCollationsToResponse(SolrParams,SpellingResult,ResponseBuilder,String,NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#addCollationsToResponse(SolrParams,SpellingResult,ResponseBuilder,String,NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n\tprotected void addCollationsToResponse(SolrParams params, SpellingResult spellingResult, ResponseBuilder rb, String q,\n\t\t\tNamedList response) {\n\t\tint maxCollations = params.getInt(SPELLCHECK_MAX_COLLATIONS, 1);\n\t\tint maxCollationTries = params.getInt(SPELLCHECK_MAX_COLLATION_TRIES, 0);\n\t\tint maxCollationEvaluations = params.getInt(SPELLCHECK_MAX_COLLATION_EVALUATIONS, 10000);\n\t\tboolean collationExtendedResults = params.getBool(SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n\t\tboolean shard = params.getBool(ShardParams.IS_SHARD, false);\n\n\t\tSpellCheckCollator collator = new SpellCheckCollator();\n\t\tList<SpellCheckCollation> collations = collator.collate(spellingResult, q, rb, maxCollations, maxCollationTries, maxCollationEvaluations);\n\t\t//by sorting here we guarantee a non-distributed request returns all \n\t\t//results in the same order as a distributed request would, \n\t\t//even in cases when the internal rank is the same.\n\t\tCollections.sort(collations);\n\t\t\n\t\tfor (SpellCheckCollation collation : collations) {\n\t\t\tif (collationExtendedResults) {\n\t\t\t\tNamedList extendedResult = new NamedList();\n\t\t\t\textendedResult.add(\"collationQuery\", collation.getCollationQuery());\n\t\t\t\textendedResult.add(\"hits\", collation.getHits());\n\t\t\t\textendedResult.add(\"misspellingsAndCorrections\", collation.getMisspellingsAndCorrections());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\textendedResult.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t\tresponse.add(\"collation\", extendedResult);\n\t\t\t} else {\n\t\t\t\tresponse.add(\"collation\", collation.getCollationQuery());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\tresponse.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n\tprotected void addCollationsToResponse(SolrParams params, SpellingResult spellingResult, ResponseBuilder rb, String q,\n\t\t\tNamedList response) {\n\t\tint maxCollations = params.getInt(SPELLCHECK_MAX_COLLATIONS, 1);\n\t\tint maxCollationTries = params.getInt(SPELLCHECK_MAX_COLLATION_TRIES, 0);\n\t\tint maxCollationEvaluations = params.getInt(SPELLCHECK_MAX_COLLATION_EVALUATIONS, 10000);\n\t\tboolean collationExtendedResults = params.getBool(SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n\t\tboolean shard = params.getBool(ShardParams.IS_SHARD, false);\n\n\t\tSpellCheckCollator collator = new SpellCheckCollator();\n\t\tList<SpellCheckCollation> collations = collator.collate(spellingResult, q, rb, maxCollations, maxCollationTries, maxCollationEvaluations);\n\t\t//by sorting here we guarantee a non-distributed request returns all \n\t\t//results in the same order as a distributed request would, \n\t\t//even in cases when the internal rank is the same.\n\t\tCollections.sort(collations);\n\t\t\n\t\tfor (SpellCheckCollation collation : collations) {\n\t\t\tif (collationExtendedResults) {\n\t\t\t\tNamedList extendedResult = new NamedList();\n\t\t\t\textendedResult.add(\"collationQuery\", collation.getCollationQuery());\n\t\t\t\textendedResult.add(\"hits\", collation.getHits());\n\t\t\t\textendedResult.add(\"misspellingsAndCorrections\", collation.getMisspellingsAndCorrections());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\textendedResult.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t\tresponse.add(\"collation\", extendedResult);\n\t\t\t} else {\n\t\t\t\tresponse.add(\"collation\", collation.getCollationQuery());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\tresponse.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#addCollationsToResponse(SolrParams,SpellingResult,ResponseBuilder,String,NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#addCollationsToResponse(SolrParams,SpellingResult,ResponseBuilder,String,NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n\tprotected void addCollationsToResponse(SolrParams params, SpellingResult spellingResult, ResponseBuilder rb, String q,\n\t\t\tNamedList response) {\n\t\tint maxCollations = params.getInt(SPELLCHECK_MAX_COLLATIONS, 1);\n\t\tint maxCollationTries = params.getInt(SPELLCHECK_MAX_COLLATION_TRIES, 0);\n\t\tint maxCollationEvaluations = params.getInt(SPELLCHECK_MAX_COLLATION_EVALUATIONS, 10000);\n\t\tboolean collationExtendedResults = params.getBool(SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n\t\tboolean shard = params.getBool(ShardParams.IS_SHARD, false);\n\n\t\tSpellCheckCollator collator = new SpellCheckCollator();\n\t\tList<SpellCheckCollation> collations = collator.collate(spellingResult, q, rb, maxCollations, maxCollationTries, maxCollationEvaluations);\n\t\t//by sorting here we guarantee a non-distributed request returns all \n\t\t//results in the same order as a distributed request would, \n\t\t//even in cases when the internal rank is the same.\n\t\tCollections.sort(collations);\n\t\t\n\t\tfor (SpellCheckCollation collation : collations) {\n\t\t\tif (collationExtendedResults) {\n\t\t\t\tNamedList extendedResult = new NamedList();\n\t\t\t\textendedResult.add(\"collationQuery\", collation.getCollationQuery());\n\t\t\t\textendedResult.add(\"hits\", collation.getHits());\n\t\t\t\textendedResult.add(\"misspellingsAndCorrections\", collation.getMisspellingsAndCorrections());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\textendedResult.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t\tresponse.add(\"collation\", extendedResult);\n\t\t\t} else {\n\t\t\t\tresponse.add(\"collation\", collation.getCollationQuery());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\tresponse.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n\tprotected void addCollationsToResponse(SolrParams params, SpellingResult spellingResult, ResponseBuilder rb, String q,\n\t\t\tNamedList response) {\n\t\tint maxCollations = params.getInt(SPELLCHECK_MAX_COLLATIONS, 1);\n\t\tint maxCollationTries = params.getInt(SPELLCHECK_MAX_COLLATION_TRIES, 0);\n\t\tint maxCollationEvaluations = params.getInt(SPELLCHECK_MAX_COLLATION_EVALUATIONS, 10000);\n\t\tboolean collationExtendedResults = params.getBool(SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n\t\tboolean shard = params.getBool(ShardParams.IS_SHARD, false);\n\n\t\tSpellCheckCollator collator = new SpellCheckCollator();\n\t\tList<SpellCheckCollation> collations = collator.collate(spellingResult, q, rb, maxCollations, maxCollationTries, maxCollationEvaluations);\n\t\t//by sorting here we guarantee a non-distributed request returns all \n\t\t//results in the same order as a distributed request would, \n\t\t//even in cases when the internal rank is the same.\n\t\tCollections.sort(collations);\n\t\t\n\t\tfor (SpellCheckCollation collation : collations) {\n\t\t\tif (collationExtendedResults) {\n\t\t\t\tNamedList extendedResult = new NamedList();\n\t\t\t\textendedResult.add(\"collationQuery\", collation.getCollationQuery());\n\t\t\t\textendedResult.add(\"hits\", collation.getHits());\n\t\t\t\textendedResult.add(\"misspellingsAndCorrections\", collation.getMisspellingsAndCorrections());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\textendedResult.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t\tresponse.add(\"collation\", extendedResult);\n\t\t\t} else {\n\t\t\t\tresponse.add(\"collation\", collation.getCollationQuery());\n\t\t\t\tif(maxCollationTries>0 && shard)\n\t\t\t\t{\n\t\t\t\t\tresponse.add(\"collationInternalRank\", collation.getInternalRank());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["cdcf766020b9b159d0b3a6ecae90ff1998ded019","31aff65a420ac3dfd25611e2c4a99d38b7dd60e9"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"31aff65a420ac3dfd25611e2c4a99d38b7dd60e9":["cdcf766020b9b159d0b3a6ecae90ff1998ded019"],"cdcf766020b9b159d0b3a6ecae90ff1998ded019":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["31aff65a420ac3dfd25611e2c4a99d38b7dd60e9","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["cdcf766020b9b159d0b3a6ecae90ff1998ded019","31aff65a420ac3dfd25611e2c4a99d38b7dd60e9"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["31aff65a420ac3dfd25611e2c4a99d38b7dd60e9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cdcf766020b9b159d0b3a6ecae90ff1998ded019"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"cdcf766020b9b159d0b3a6ecae90ff1998ded019":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","31aff65a420ac3dfd25611e2c4a99d38b7dd60e9","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"31aff65a420ac3dfd25611e2c4a99d38b7dd60e9":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","c26f00b574427b55127e869b935845554afde1fa","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cdcf766020b9b159d0b3a6ecae90ff1998ded019","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}