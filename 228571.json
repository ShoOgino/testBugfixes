{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder#getFilter(Element).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder#getFilter(Element).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder#getFilter(Element).mjava","sourceNew":"  /*\n    * (non-Javadoc)\n    *\n    * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n    */\n  public Filter getFilter(Element e) throws ParserException {\n    TermsFilter tf = new TermsFilter();\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        term = new Term(fieldName, BytesRef.deepCopyOf(bytes));\n        tf.addTerm(term);\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n    return tf;\n  }\n\n","sourceOld":"  /*\n    * (non-Javadoc)\n    *\n    * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n    */\n  public Filter getFilter(Element e) throws ParserException {\n    TermsFilter tf = new TermsFilter();\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        term = new Term(fieldName, BytesRef.deepCopyOf(bytes));\n        tf.addTerm(term);\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n    return tf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4107dd39b127d892359c5c1d67d0f14d92f1a9bf","date":1351689723,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder#getFilter(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder#getFilter(Element).mjava","sourceNew":"  /*\n    * (non-Javadoc)\n    *\n    * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n    */\n  public Filter getFilter(Element e) throws ParserException {\n    List<BytesRef> terms = new ArrayList<BytesRef>();\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        terms.add(BytesRef.deepCopyOf(bytes));\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n    return new TermsFilter(fieldName, terms);\n  }\n\n","sourceOld":"  /*\n    * (non-Javadoc)\n    *\n    * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n    */\n  public Filter getFilter(Element e) throws ParserException {\n    TermsFilter tf = new TermsFilter();\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        term = new Term(fieldName, BytesRef.deepCopyOf(bytes));\n        tf.addTerm(term);\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n    return tf;\n  }\n\n","bugFix":["e6e919043fa85ee891123768dd655a98edbbf63c","b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder#getFilter(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder#getFilter(Element).mjava","sourceNew":"  /*\n    * (non-Javadoc)\n    *\n    * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n    */\n  @Override\n  public Filter getFilter(Element e) throws ParserException {\n    List<BytesRef> terms = new ArrayList<BytesRef>();\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        terms.add(BytesRef.deepCopyOf(bytes));\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n    return new TermsFilter(fieldName, terms);\n  }\n\n","sourceOld":"  /*\n    * (non-Javadoc)\n    *\n    * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n    */\n  public Filter getFilter(Element e) throws ParserException {\n    List<BytesRef> terms = new ArrayList<BytesRef>();\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        terms.add(BytesRef.deepCopyOf(bytes));\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n    return new TermsFilter(fieldName, terms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder#getFilter(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder#getFilter(Element).mjava","sourceNew":"  /*\n    * (non-Javadoc)\n    *\n    * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n    */\n  @Override\n  public Filter getFilter(Element e) throws ParserException {\n    List<BytesRef> terms = new ArrayList<BytesRef>();\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        terms.add(BytesRef.deepCopyOf(bytes));\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n    return new TermsFilter(fieldName, terms);\n  }\n\n","sourceOld":"  /*\n    * (non-Javadoc)\n    *\n    * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n    */\n  public Filter getFilter(Element e) throws ParserException {\n    List<BytesRef> terms = new ArrayList<BytesRef>();\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        terms.add(BytesRef.deepCopyOf(bytes));\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n    return new TermsFilter(fieldName, terms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder#getFilter(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder#getFilter(Element).mjava","sourceNew":"  /*\n    * (non-Javadoc)\n    *\n    * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n    */\n  @Override\n  public Filter getFilter(Element e) throws ParserException {\n    List<BytesRef> terms = new ArrayList<BytesRef>();\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, text);\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        terms.add(BytesRef.deepCopyOf(bytes));\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n    return new TermsFilter(fieldName, terms);\n  }\n\n","sourceOld":"  /*\n    * (non-Javadoc)\n    *\n    * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n    */\n  @Override\n  public Filter getFilter(Element e) throws ParserException {\n    List<BytesRef> terms = new ArrayList<BytesRef>();\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        terms.add(BytesRef.deepCopyOf(bytes));\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n    return new TermsFilter(fieldName, terms);\n  }\n\n","bugFix":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2","69e043c521d4e8db770cc140c63f5ef51f03426a"],"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder#getFilter(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder#getFilter(Element).mjava","sourceNew":"  /*\n    * (non-Javadoc)\n    *\n    * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n    */\n  @Override\n  public Filter getFilter(Element e) throws ParserException {\n    List<BytesRef> terms = new ArrayList<BytesRef>();\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, text);\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        terms.add(BytesRef.deepCopyOf(bytes));\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n    return new TermsFilter(fieldName, terms);\n  }\n\n","sourceOld":"  /*\n    * (non-Javadoc)\n    *\n    * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n    */\n  @Override\n  public Filter getFilter(Element e) throws ParserException {\n    List<BytesRef> terms = new ArrayList<BytesRef>();\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        terms.add(BytesRef.deepCopyOf(bytes));\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n    return new TermsFilter(fieldName, terms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"782ed6a4b4ba50ec19734fc8db4e570ee193d627","date":1381127065,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder#getFilter(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder#getFilter(Element).mjava","sourceNew":"  /*\n    * (non-Javadoc)\n    *\n    * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n    */\n  @Override\n  public Filter getFilter(Element e) throws ParserException {\n    List<BytesRef> terms = new ArrayList<BytesRef>();\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\n    try (TokenStream ts = analyzer.tokenStream(fieldName, text)) {\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        terms.add(BytesRef.deepCopyOf(bytes));\n      }\n      ts.end();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n    return new TermsFilter(fieldName, terms);\n  }\n\n","sourceOld":"  /*\n    * (non-Javadoc)\n    *\n    * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n    */\n  @Override\n  public Filter getFilter(Element e) throws ParserException {\n    List<BytesRef> terms = new ArrayList<BytesRef>();\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, text);\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        terms.add(BytesRef.deepCopyOf(bytes));\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n    return new TermsFilter(fieldName, terms);\n  }\n\n","bugFix":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2","c83d6c4335f31cae14f625a222bc842f20073dcd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder#getFilter(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder#getFilter(Element).mjava","sourceNew":"  /*\n    * (non-Javadoc)\n    *\n    * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n    */\n  @Override\n  public Filter getFilter(Element e) throws ParserException {\n    List<BytesRef> terms = new ArrayList<>();\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\n    try (TokenStream ts = analyzer.tokenStream(fieldName, text)) {\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        terms.add(BytesRef.deepCopyOf(bytes));\n      }\n      ts.end();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n    return new TermsFilter(fieldName, terms);\n  }\n\n","sourceOld":"  /*\n    * (non-Javadoc)\n    *\n    * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n    */\n  @Override\n  public Filter getFilter(Element e) throws ParserException {\n    List<BytesRef> terms = new ArrayList<BytesRef>();\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\n    try (TokenStream ts = analyzer.tokenStream(fieldName, text)) {\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        terms.add(BytesRef.deepCopyOf(bytes));\n      }\n      ts.end();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n    return new TermsFilter(fieldName, terms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2042d3e27841c5b60112990fc33559e10ccf6dd","date":1424537395,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder#getFilter(Element).mjava","sourceNew":null,"sourceOld":"  /*\n    * (non-Javadoc)\n    *\n    * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n    */\n  @Override\n  public Filter getFilter(Element e) throws ParserException {\n    List<BytesRef> terms = new ArrayList<>();\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\n    try (TokenStream ts = analyzer.tokenStream(fieldName, text)) {\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        terms.add(BytesRef.deepCopyOf(bytes));\n      }\n      ts.end();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n    return new TermsFilter(fieldName, terms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4107dd39b127d892359c5c1d67d0f14d92f1a9bf":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf","7530de27b87b961b51f01bd1299b7004d46e8823"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["7530de27b87b961b51f01bd1299b7004d46e8823","c83d6c4335f31cae14f625a222bc842f20073dcd"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"7530de27b87b961b51f01bd1299b7004d46e8823":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2042d3e27841c5b60112990fc33559e10ccf6dd"]},"commit2Childs":{"4107dd39b127d892359c5c1d67d0f14d92f1a9bf":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c2042d3e27841c5b60112990fc33559e10ccf6dd"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c83d6c4335f31cae14f625a222bc842f20073dcd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd"],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}