{"path":"lucene/sandbox/src/java/org/apache/lucene/rangetree/SortedSetRangeTreeQuery#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"8c12c43c449a172df0f2b122918f0f5fc0e9a470","date":1438415333,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/rangetree/SortedSetRangeTreeQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        final SortedSetDocValues ssdv = reader.getSortedSetDocValues(field);\n        if (ssdv == null) {\n          // No docs in this segment had this field\n          return null;\n        }\n\n        if (ssdv instanceof RangeTreeSortedSetDocValues == false) {\n          throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was not indexed with RangeTreeDocValuesFormat: got: \" + ssdv);\n        }\n        RangeTreeSortedSetDocValues treeDV = (RangeTreeSortedSetDocValues) ssdv;\n        RangeTreeReader tree = treeDV.getRangeTreeReader();\n\n        /*\n        for(int i=0;i<treeDV.getValueCount();i++) {\n          System.out.println(\"  ord \" + i + \" -> \" + treeDV.lookupOrd(i));\n        }\n        */\n\n        // lower\n        final long minOrdIncl;\n        if (minValue == null) {\n          minOrdIncl = 0;\n        } else {\n          long ord = ssdv.lookupTerm(minValue);\n          if (ord >= 0) {\n            // Exact match\n            if (minInclusive) {\n              minOrdIncl = ord;\n            } else {\n              minOrdIncl = ord+1;\n            }\n          } else {\n            minOrdIncl = -ord-1;\n          }\n        }\n\n        // upper\n        final long maxOrdIncl;\n        if (maxValue == null) {\n          maxOrdIncl = Long.MAX_VALUE;\n        } else {\n          long ord = ssdv.lookupTerm(maxValue);\n          if (ord >= 0) {\n            // Exact match\n            if (maxInclusive) {\n              maxOrdIncl = ord;\n            } else {\n              maxOrdIncl = ord-1;\n            }\n          } else {\n            maxOrdIncl = -ord-2;\n          }\n        }\n\n        if (maxOrdIncl < minOrdIncl) {  \n          // This can happen when the requested range lies entirely between 2 adjacent ords:\n          return null;\n        }\n\n        //System.out.println(reader + \": ORD: \" + minOrdIncl + \"-\" + maxOrdIncl + \"; \" + minValue + \" - \" + maxValue);\n        \n        // Just a \"view\" of only the ords from the SSDV, as an SNDV.  Maybe we\n        // have this view implemented somewhere else already?  It's not so bad that\n        // we are inefficient here (making 2 passes over the ords): this is only\n        // used in at most 2 leaf cells (the boundary cells).\n        SortedNumericDocValues ords = new SortedNumericDocValues() {\n\n            private long[] ords = new long[2];\n            private int count;\n\n            @Override\n            public void setDocument(int doc) {\n              ssdv.setDocument(doc);\n              long ord;\n              count = 0;\n              while ((ord = ssdv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                if (count == ords.length) {\n                  ords = ArrayUtil.grow(ords, count+1);\n                }\n                ords[count++] = ord;\n              }\n            }\n\n            @Override\n            public int count() {\n              return count;\n            }\n\n            @Override\n            public long valueAt(int index) {\n              return ords[index];\n            }\n          };\n\n        DocIdSet result = tree.intersect(minOrdIncl, maxOrdIncl, ords, context.reader().maxDoc());\n\n        final DocIdSetIterator disi = result.iterator();\n\n        return new ConstantScoreScorer(this, score(), disi);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/rangetree/SortedSetRangeTreeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        final SortedSetDocValues ssdv = reader.getSortedSetDocValues(field);\n        if (ssdv == null) {\n          // No docs in this segment had this field\n          return null;\n        }\n\n        if (ssdv instanceof RangeTreeSortedSetDocValues == false) {\n          throw new IllegalStateException(\"field \\\"\" + field + \"\\\" was not indexed with RangeTreeDocValuesFormat: got: \" + ssdv);\n        }\n        RangeTreeSortedSetDocValues treeDV = (RangeTreeSortedSetDocValues) ssdv;\n        RangeTreeReader tree = treeDV.getRangeTreeReader();\n\n        /*\n        for(int i=0;i<treeDV.getValueCount();i++) {\n          System.out.println(\"  ord \" + i + \" -> \" + treeDV.lookupOrd(i));\n        }\n        */\n\n        // lower\n        final long minOrdIncl;\n        if (minValue == null) {\n          minOrdIncl = 0;\n        } else {\n          long ord = ssdv.lookupTerm(minValue);\n          if (ord >= 0) {\n            // Exact match\n            if (minInclusive) {\n              minOrdIncl = ord;\n            } else {\n              minOrdIncl = ord+1;\n            }\n          } else {\n            minOrdIncl = -ord-1;\n          }\n        }\n\n        // upper\n        final long maxOrdIncl;\n        if (maxValue == null) {\n          maxOrdIncl = Long.MAX_VALUE;\n        } else {\n          long ord = ssdv.lookupTerm(maxValue);\n          if (ord >= 0) {\n            // Exact match\n            if (maxInclusive) {\n              maxOrdIncl = ord;\n            } else {\n              maxOrdIncl = ord-1;\n            }\n          } else {\n            maxOrdIncl = -ord-2;\n          }\n        }\n\n        if (maxOrdIncl < minOrdIncl) {  \n          // This can happen when the requested range lies entirely between 2 adjacent ords:\n          return null;\n        }\n\n        //System.out.println(reader + \": ORD: \" + minOrdIncl + \"-\" + maxOrdIncl + \"; \" + minValue + \" - \" + maxValue);\n        \n        // Just a \"view\" of only the ords from the SSDV, as an SNDV.  Maybe we\n        // have this view implemented somewhere else already?  It's not so bad that\n        // we are inefficient here (making 2 passes over the ords): this is only\n        // used in at most 2 leaf cells (the boundary cells).\n        SortedNumericDocValues ords = new SortedNumericDocValues() {\n\n            private long[] ords = new long[2];\n            private int count;\n\n            @Override\n            public void setDocument(int doc) {\n              ssdv.setDocument(doc);\n              long ord;\n              count = 0;\n              while ((ord = ssdv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n                if (count == ords.length) {\n                  ords = ArrayUtil.grow(ords, count+1);\n                }\n                ords[count++] = ord;\n              }\n            }\n\n            @Override\n            public int count() {\n              return count;\n            }\n\n            @Override\n            public long valueAt(int index) {\n              return ords[index];\n            }\n          };\n\n        DocIdSet result = tree.intersect(minOrdIncl, maxOrdIncl, ords, context.reader().maxDoc());\n\n        final DocIdSetIterator disi = result.iterator();\n\n        return new ConstantScoreScorer(this, score(), disi);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8c12c43c449a172df0f2b122918f0f5fc0e9a470":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["8c12c43c449a172df0f2b122918f0f5fc0e9a470"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"]},"commit2Childs":{"8c12c43c449a172df0f2b122918f0f5fc0e9a470":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c12c43c449a172df0f2b122918f0f5fc0e9a470"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}