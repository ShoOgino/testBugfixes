{"path":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#advanceRepeatGroups().mjava","commits":[{"id":"2eaa5d4d2618a012373ae4574ebb6563933aa9f6","date":1331337973,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#advanceRepeatGroups().mjava","pathOld":"/dev/null","sourceNew":"  /** At initialization (each doc), each repetition group is sorted by (query) offset.\n   * This provides the start condition: no collisions.\n   * <p>Case 1: no multi-term repeats<br>\n   * It is sufficient to advance each pp in the group by one less than its group index.\n   * So lesser pp is not advanced, 2nd one advance once, 3rd one advanced twice, etc.\n   * <p>Case 2: multi-term repeats<br>\n   * \n   * @return false if PPs are exhausted. \n   */\n  private boolean advanceRepeatGroups() throws IOException {\n    for (PhrasePositions[] rg: rptGroups) { \n      if (hasMultiTermRpts) {\n        // more involved, some may not collide\n        int incr;\n        for (int i=0; i<rg.length; i+=incr) {\n          incr = 1;\n          PhrasePositions pp = rg[i];\n          int k;\n          while((k=collide(pp)) >= 0) {\n            PhrasePositions pp2 = lesser(pp, rg[k]);\n            if (!advancePP(pp2)) {  // at initialization always advance pp with higher offset\n              return false; // exhausted\n            }\n            if (pp2.rptInd < i) { // should not happen?\n              incr = 0;\n              break;\n            }\n          }\n        }\n      } else {\n        // simpler, we know exactly how much to advance\n        for (int j=1; j<rg.length; j++) {\n          for (int k=0; k<j; k++) {\n            if (!rg[j].nextPosition()) {\n              return false; // PPs exhausted\n            }\n          }\n        }\n      }\n    }\n    return true; // PPs available\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#advanceRepeatGroups().mjava","pathOld":"/dev/null","sourceNew":"  /** At initialization (each doc), each repetition group is sorted by (query) offset.\n   * This provides the start condition: no collisions.\n   * <p>Case 1: no multi-term repeats<br>\n   * It is sufficient to advance each pp in the group by one less than its group index.\n   * So lesser pp is not advanced, 2nd one advance once, 3rd one advanced twice, etc.\n   * <p>Case 2: multi-term repeats<br>\n   * \n   * @return false if PPs are exhausted. \n   */\n  private boolean advanceRepeatGroups() throws IOException {\n    for (PhrasePositions[] rg: rptGroups) { \n      if (hasMultiTermRpts) {\n        // more involved, some may not collide\n        int incr;\n        for (int i=0; i<rg.length; i+=incr) {\n          incr = 1;\n          PhrasePositions pp = rg[i];\n          int k;\n          while((k=collide(pp)) >= 0) {\n            PhrasePositions pp2 = lesser(pp, rg[k]);\n            if (!advancePP(pp2)) {  // at initialization always advance pp with higher offset\n              return false; // exhausted\n            }\n            if (pp2.rptInd < i) { // should not happen?\n              incr = 0;\n              break;\n            }\n          }\n        }\n      } else {\n        // simpler, we know exactly how much to advance\n        for (int j=1; j<rg.length; j++) {\n          for (int k=0; k<j; k++) {\n            if (!rg[j].nextPosition()) {\n              return false; // PPs exhausted\n            }\n          }\n        }\n      }\n    }\n    return true; // PPs available\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b11b9d5eaf9707760ca5151530830a825197023","date":1525941319,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#advanceRepeatGroups().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#advanceRepeatGroups().mjava","sourceNew":"  /** At initialization (each doc), each repetition group is sorted by (query) offset.\n   * This provides the start condition: no collisions.\n   * <p>Case 1: no multi-term repeats<br>\n   * It is sufficient to advance each pp in the group by one less than its group index.\n   * So lesser pp is not advanced, 2nd one advance once, 3rd one advanced twice, etc.\n   * <p>Case 2: multi-term repeats<br>\n   * \n   * @return false if PPs are exhausted. \n   */\n  private boolean advanceRepeatGroups() throws IOException {\n    for (PhrasePositions[] rg: rptGroups) { \n      if (hasMultiTermRpts) {\n        // more involved, some may not collide\n        int incr;\n        for (int i=0; i<rg.length; i+=incr) {\n          incr = 1;\n          PhrasePositions pp = rg[i];\n          int k;\n          while((k=collide(pp)) >= 0) {\n            PhrasePositions pp2 = lesser(pp, rg[k]);\n            if (!advancePP(pp2)) {  // at initialization always advance pp with higher offset\n              return false; // exhausted\n            }\n            if (pp2.rptInd < i) { // should not happen?\n              incr = 0;\n              break;\n            }\n          }\n        }\n      } else {\n        // simpler, we know exactly how much to advance\n        for (int j=1; j<rg.length; j++) {\n          for (int k=0; k<j; k++) {\n            if (!rg[j].nextPosition()) {\n              return false; // PPs exhausted\n            }\n          }\n        }\n      }\n    }\n    return true; // PPs available\n  }\n\n","sourceOld":"  /** At initialization (each doc), each repetition group is sorted by (query) offset.\n   * This provides the start condition: no collisions.\n   * <p>Case 1: no multi-term repeats<br>\n   * It is sufficient to advance each pp in the group by one less than its group index.\n   * So lesser pp is not advanced, 2nd one advance once, 3rd one advanced twice, etc.\n   * <p>Case 2: multi-term repeats<br>\n   * \n   * @return false if PPs are exhausted. \n   */\n  private boolean advanceRepeatGroups() throws IOException {\n    for (PhrasePositions[] rg: rptGroups) { \n      if (hasMultiTermRpts) {\n        // more involved, some may not collide\n        int incr;\n        for (int i=0; i<rg.length; i+=incr) {\n          incr = 1;\n          PhrasePositions pp = rg[i];\n          int k;\n          while((k=collide(pp)) >= 0) {\n            PhrasePositions pp2 = lesser(pp, rg[k]);\n            if (!advancePP(pp2)) {  // at initialization always advance pp with higher offset\n              return false; // exhausted\n            }\n            if (pp2.rptInd < i) { // should not happen?\n              incr = 0;\n              break;\n            }\n          }\n        }\n      } else {\n        // simpler, we know exactly how much to advance\n        for (int j=1; j<rg.length; j++) {\n          for (int k=0; k<j; k++) {\n            if (!rg[j].nextPosition()) {\n              return false; // PPs exhausted\n            }\n          }\n        }\n      }\n    }\n    return true; // PPs available\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"2eaa5d4d2618a012373ae4574ebb6563933aa9f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b11b9d5eaf9707760ca5151530830a825197023":["2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b11b9d5eaf9707760ca5151530830a825197023"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"2eaa5d4d2618a012373ae4574ebb6563933aa9f6":["38e3b736c7ca086d61b7dbb841c905ee115490da","3b11b9d5eaf9707760ca5151530830a825197023"],"3b11b9d5eaf9707760ca5151530830a825197023":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}