{"path":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int).mjava","pathOld":"/dev/null","sourceNew":"  final TopDocs search(Query query, Filter filter, final int nDocs)\n       throws IOException {\n    Scorer scorer = Query.scorer(query, this, reader);\n    if (scorer == null)\n      return new TopDocs(0, new ScoreDoc[0]);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final HitQueue hq = new HitQueue(nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n\tprivate float minScore = 0.0f;\n\tpublic final void collect(int doc, float score) {\n\t  if (score > 0.0f &&\t\t\t  // ignore zeroed buckets\n\t      (bits==null || bits.get(doc))) {\t  // skip docs not in bits\n\t    totalHits[0]++;\n\t    if (score >= minScore) {\n\t      hq.put(new ScoreDoc(doc, score));\t  // update hit queue\n\t      if (hq.size() > nDocs) {\t\t  // if hit queue overfull\n\t\thq.pop();\t\t\t  // remove lowest in hit queue\n\t\tminScore = ((ScoreDoc)hq.top()).score; // reset minScore\n\t      }\n\t    }\n\t  }\n\t}\n      }, reader.maxDoc());\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n    \n    return new TopDocs(totalHits[0], scoreDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c7454619ea6a0710272c1dd947345cee64489f6","date":1026927484,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int).mjava","sourceNew":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Called by {@link Hits}.\n   *\n   * <p>Applications should usually call {@link #search(Query)} or {@link\n   * #search(Query,Filter)} instead.\n   */\n  public TopDocs search(Query query, Filter filter, final int nDocs)\n       throws IOException {\n    Scorer scorer = Query.scorer(query, this, reader);\n    if (scorer == null)\n      return new TopDocs(0, new ScoreDoc[0]);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final HitQueue hq = new HitQueue(nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n\tprivate float minScore = 0.0f;\n\tpublic final void collect(int doc, float score) {\n\t  if (score > 0.0f &&\t\t\t  // ignore zeroed buckets\n\t      (bits==null || bits.get(doc))) {\t  // skip docs not in bits\n\t    totalHits[0]++;\n\t    if (score >= minScore) {\n\t      hq.put(new ScoreDoc(doc, score));\t  // update hit queue\n\t      if (hq.size() > nDocs) {\t\t  // if hit queue overfull\n\t\thq.pop();\t\t\t  // remove lowest in hit queue\n\t\tminScore = ((ScoreDoc)hq.top()).score; // reset minScore\n\t      }\n\t    }\n\t  }\n\t}\n      }, reader.maxDoc());\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n    \n    return new TopDocs(totalHits[0], scoreDocs);\n  }\n\n","sourceOld":"  final TopDocs search(Query query, Filter filter, final int nDocs)\n       throws IOException {\n    Scorer scorer = Query.scorer(query, this, reader);\n    if (scorer == null)\n      return new TopDocs(0, new ScoreDoc[0]);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final HitQueue hq = new HitQueue(nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n\tprivate float minScore = 0.0f;\n\tpublic final void collect(int doc, float score) {\n\t  if (score > 0.0f &&\t\t\t  // ignore zeroed buckets\n\t      (bits==null || bits.get(doc))) {\t  // skip docs not in bits\n\t    totalHits[0]++;\n\t    if (score >= minScore) {\n\t      hq.put(new ScoreDoc(doc, score));\t  // update hit queue\n\t      if (hq.size() > nDocs) {\t\t  // if hit queue overfull\n\t\thq.pop();\t\t\t  // remove lowest in hit queue\n\t\tminScore = ((ScoreDoc)hq.top()).score; // reset minScore\n\t      }\n\t    }\n\t  }\n\t}\n      }, reader.maxDoc());\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n    \n    return new TopDocs(totalHits[0], scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27274410c91546fcfc28e692abd2dd77ca99be4b","date":1042501834,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int).mjava","sourceNew":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Called by {@link Hits}.\n   *\n   * <p>Applications should usually call {@link #search(Query)} or {@link\n   * #search(Query,Filter)} instead.\n   */\n  public TopDocs search(Query query, Filter filter, final int nDocs)\n       throws IOException {\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return new TopDocs(0, new ScoreDoc[0]);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final HitQueue hq = new HitQueue(nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n\tprivate float minScore = 0.0f;\n\tpublic final void collect(int doc, float score) {\n\t  if (score > 0.0f &&\t\t\t  // ignore zeroed buckets\n\t      (bits==null || bits.get(doc))) {\t  // skip docs not in bits\n\t    totalHits[0]++;\n\t    if (score >= minScore) {\n\t      hq.put(new ScoreDoc(doc, score));\t  // update hit queue\n\t      if (hq.size() > nDocs) {\t\t  // if hit queue overfull\n\t\thq.pop();\t\t\t  // remove lowest in hit queue\n\t\tminScore = ((ScoreDoc)hq.top()).score; // reset minScore\n\t      }\n\t    }\n\t  }\n\t}\n      }, reader.maxDoc());\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n    \n    return new TopDocs(totalHits[0], scoreDocs);\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Called by {@link Hits}.\n   *\n   * <p>Applications should usually call {@link #search(Query)} or {@link\n   * #search(Query,Filter)} instead.\n   */\n  public TopDocs search(Query query, Filter filter, final int nDocs)\n       throws IOException {\n    Scorer scorer = Query.scorer(query, this, reader);\n    if (scorer == null)\n      return new TopDocs(0, new ScoreDoc[0]);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final HitQueue hq = new HitQueue(nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n\tprivate float minScore = 0.0f;\n\tpublic final void collect(int doc, float score) {\n\t  if (score > 0.0f &&\t\t\t  // ignore zeroed buckets\n\t      (bits==null || bits.get(doc))) {\t  // skip docs not in bits\n\t    totalHits[0]++;\n\t    if (score >= minScore) {\n\t      hq.put(new ScoreDoc(doc, score));\t  // update hit queue\n\t      if (hq.size() > nDocs) {\t\t  // if hit queue overfull\n\t\thq.pop();\t\t\t  // remove lowest in hit queue\n\t\tminScore = ((ScoreDoc)hq.top()).score; // reset minScore\n\t      }\n\t    }\n\t  }\n\t}\n      }, reader.maxDoc());\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n    \n    return new TopDocs(totalHits[0], scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f9a181719777fdcf002cf117bfdb5519d59656c","date":1053789866,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int).mjava","sourceNew":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Called by {@link Hits}.\n   *\n   * <p>Applications should usually call {@link #search(Query)} or {@link\n   * #search(Query,Filter)} instead.\n   */\n  public TopDocs search(Query query, Filter filter, final int nDocs)\n       throws IOException {\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return new TopDocs(0, new ScoreDoc[0]);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final HitQueue hq = new HitQueue(nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n\tprivate float minScore = 0.0f;\n\tpublic final void collect(int doc, float score) {\n\t  if (score > 0.0f &&\t\t\t  // ignore zeroed buckets\n\t      (bits==null || bits.get(doc))) {\t  // skip docs not in bits\n\t    totalHits[0]++;\n\t    if (score >= minScore) {\n\t      hq.put(new ScoreDoc(doc, score));\t  // update hit queue\n\t      if (hq.size() > nDocs) {\t\t  // if hit queue overfull\n\t\thq.pop();\t\t\t  // remove lowest in hit queue\n\t\tminScore = ((ScoreDoc)hq.top()).score; // reset minScore\n\t      }\n\t    }\n\t  }\n\t}\n      }, reader.maxDoc());\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n\n    return new TopDocs(totalHits[0], scoreDocs);\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Called by {@link Hits}.\n   *\n   * <p>Applications should usually call {@link #search(Query)} or {@link\n   * #search(Query,Filter)} instead.\n   */\n  public TopDocs search(Query query, Filter filter, final int nDocs)\n       throws IOException {\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return new TopDocs(0, new ScoreDoc[0]);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final HitQueue hq = new HitQueue(nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n\tprivate float minScore = 0.0f;\n\tpublic final void collect(int doc, float score) {\n\t  if (score > 0.0f &&\t\t\t  // ignore zeroed buckets\n\t      (bits==null || bits.get(doc))) {\t  // skip docs not in bits\n\t    totalHits[0]++;\n\t    if (score >= minScore) {\n\t      hq.put(new ScoreDoc(doc, score));\t  // update hit queue\n\t      if (hq.size() > nDocs) {\t\t  // if hit queue overfull\n\t\thq.pop();\t\t\t  // remove lowest in hit queue\n\t\tminScore = ((ScoreDoc)hq.top()).score; // reset minScore\n\t      }\n\t    }\n\t  }\n\t}\n      }, reader.maxDoc());\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n    \n    return new TopDocs(totalHits[0], scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d36e31648b7ec39d875e5e05bcc9ac24ae313690","date":1063282530,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int).mjava","sourceNew":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Called by {@link Hits}.\n   *\n   * <p>Applications should usually call {@link #search(Query)} or {@link\n   * #search(Query,Filter)} instead.\n   */\n  public TopDocs search(Query query, Filter filter, final int nDocs)\n       throws IOException {\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return new TopDocs(0, new ScoreDoc[0]);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final HitQueue hq = new HitQueue(nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n\tpublic final void collect(int doc, float score) {\n\t  if (score > 0.0f &&\t\t\t  // ignore zeroed buckets\n\t      (bits==null || bits.get(doc))) {\t  // skip docs not in bits\n\t    totalHits[0]++;\n            hq.insert(new ScoreDoc(doc, score));\n\t  }\n\t}\n      }, reader.maxDoc());\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n\n    return new TopDocs(totalHits[0], scoreDocs);\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Called by {@link Hits}.\n   *\n   * <p>Applications should usually call {@link #search(Query)} or {@link\n   * #search(Query,Filter)} instead.\n   */\n  public TopDocs search(Query query, Filter filter, final int nDocs)\n       throws IOException {\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return new TopDocs(0, new ScoreDoc[0]);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final HitQueue hq = new HitQueue(nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n\tprivate float minScore = 0.0f;\n\tpublic final void collect(int doc, float score) {\n\t  if (score > 0.0f &&\t\t\t  // ignore zeroed buckets\n\t      (bits==null || bits.get(doc))) {\t  // skip docs not in bits\n\t    totalHits[0]++;\n\t    if (score >= minScore) {\n\t      hq.put(new ScoreDoc(doc, score));\t  // update hit queue\n\t      if (hq.size() > nDocs) {\t\t  // if hit queue overfull\n\t\thq.pop();\t\t\t  // remove lowest in hit queue\n\t\tminScore = ((ScoreDoc)hq.top()).score; // reset minScore\n\t      }\n\t    }\n\t  }\n\t}\n      }, reader.maxDoc());\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n\n    return new TopDocs(totalHits[0], scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15c469602973ef1a33c9a07367a380d278ffab20","date":1074206555,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int).mjava","sourceNew":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Called by {@link Hits}.\n   *\n   * <p>Applications should usually call {@link #search(Query)} or {@link\n   * #search(Query,Filter)} instead.\n   */\n  public TopDocs search(Query query, Filter filter, final int nDocs)\n       throws IOException {\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return new TopDocs(0, new ScoreDoc[0]);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final HitQueue hq = new HitQueue(nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n\tpublic final void collect(int doc, float score) {\n\t  if (score > 0.0f &&\t\t\t  // ignore zeroed buckets\n\t      (bits==null || bits.get(doc))) {\t  // skip docs not in bits\n\t    totalHits[0]++;\n            hq.insert(new ScoreDoc(doc, score));\n\t  }\n\t}\n      });\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n\n    return new TopDocs(totalHits[0], scoreDocs);\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Called by {@link Hits}.\n   *\n   * <p>Applications should usually call {@link #search(Query)} or {@link\n   * #search(Query,Filter)} instead.\n   */\n  public TopDocs search(Query query, Filter filter, final int nDocs)\n       throws IOException {\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return new TopDocs(0, new ScoreDoc[0]);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final HitQueue hq = new HitQueue(nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n\tpublic final void collect(int doc, float score) {\n\t  if (score > 0.0f &&\t\t\t  // ignore zeroed buckets\n\t      (bits==null || bits.get(doc))) {\t  // skip docs not in bits\n\t    totalHits[0]++;\n            hq.insert(new ScoreDoc(doc, score));\n\t  }\n\t}\n      }, reader.maxDoc());\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n\n    return new TopDocs(totalHits[0], scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32cf2e30bd45f6248722d0d19a0045a712782ebc","date":1080240435,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int).mjava","sourceNew":"  // inherit javadoc\n  public TopDocs search(Query query, Filter filter, final int nDocs)\n       throws IOException {\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return new TopDocs(0, new ScoreDoc[0]);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final HitQueue hq = new HitQueue(nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n\tpublic final void collect(int doc, float score) {\n\t  if (score > 0.0f &&\t\t\t  // ignore zeroed buckets\n\t      (bits==null || bits.get(doc))) {\t  // skip docs not in bits\n\t    totalHits[0]++;\n            hq.insert(new ScoreDoc(doc, score));\n\t  }\n\t}\n      });\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n\n    return new TopDocs(totalHits[0], scoreDocs);\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Called by {@link Hits}.\n   *\n   * <p>Applications should usually call {@link #search(Query)} or {@link\n   * #search(Query,Filter)} instead.\n   */\n  public TopDocs search(Query query, Filter filter, final int nDocs)\n       throws IOException {\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return new TopDocs(0, new ScoreDoc[0]);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final HitQueue hq = new HitQueue(nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n\tpublic final void collect(int doc, float score) {\n\t  if (score > 0.0f &&\t\t\t  // ignore zeroed buckets\n\t      (bits==null || bits.get(doc))) {\t  // skip docs not in bits\n\t    totalHits[0]++;\n            hq.insert(new ScoreDoc(doc, score));\n\t  }\n\t}\n      });\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n\n    return new TopDocs(totalHits[0], scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ba06d3dd45ae38f56781aaf97cdb9c2fbc3b8b3","date":1095872580,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int).mjava","sourceNew":"  // inherit javadoc\n  public TopDocs search(Query query, Filter filter, final int nDocs)\n       throws IOException {\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return new TopDocs(0, new ScoreDoc[0]);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final HitQueue hq = new HitQueue(nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n        private float minScore = 0.0f;\n        public final void collect(int doc, float score) {\n          if (score > 0.0f &&                     // ignore zeroed buckets\n              (bits==null || bits.get(doc))) {    // skip docs not in bits\n            totalHits[0]++;\n            if (hq.size() < nDocs || score >= minScore) {\n              hq.insert(new ScoreDoc(doc, score));\n              minScore = ((ScoreDoc)hq.top()).score; // maintain minScore\n            }\n          }\n        }\n      });\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)        // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n\n    return new TopDocs(totalHits[0], scoreDocs);\n  }\n\n","sourceOld":"  // inherit javadoc\n  public TopDocs search(Query query, Filter filter, final int nDocs)\n       throws IOException {\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return new TopDocs(0, new ScoreDoc[0]);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final HitQueue hq = new HitQueue(nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n\tpublic final void collect(int doc, float score) {\n\t  if (score > 0.0f &&\t\t\t  // ignore zeroed buckets\n\t      (bits==null || bits.get(doc))) {\t  // skip docs not in bits\n\t    totalHits[0]++;\n            hq.insert(new ScoreDoc(doc, score));\n\t  }\n\t}\n      });\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n\n    return new TopDocs(totalHits[0], scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88e85592d567bd56ff271a65280c42fc0b2dd6f2","date":1100438788,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int).mjava","sourceNew":"  // inherit javadoc\n  public TopDocs search(Query query, Filter filter, final int nDocs)\n       throws IOException {\n\n    if (nDocs <= 0)  // null might be returned from hq.top() below.\n      throw new IllegalArgumentException(\"nDocs must be > 0\");\n\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return new TopDocs(0, new ScoreDoc[0]);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final HitQueue hq = new HitQueue(nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n        private float minScore = 0.0f;\n        public final void collect(int doc, float score) {\n          if (score > 0.0f &&                     // ignore zeroed buckets\n              (bits==null || bits.get(doc))) {    // skip docs not in bits\n            totalHits[0]++;\n            if (hq.size() < nDocs || score >= minScore) {\n              hq.insert(new ScoreDoc(doc, score));\n              minScore = ((ScoreDoc)hq.top()).score; // maintain minScore\n            }\n          }\n        }\n      });\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)        // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n\n    return new TopDocs(totalHits[0], scoreDocs);\n  }\n\n","sourceOld":"  // inherit javadoc\n  public TopDocs search(Query query, Filter filter, final int nDocs)\n       throws IOException {\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return new TopDocs(0, new ScoreDoc[0]);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final HitQueue hq = new HitQueue(nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n        private float minScore = 0.0f;\n        public final void collect(int doc, float score) {\n          if (score > 0.0f &&                     // ignore zeroed buckets\n              (bits==null || bits.get(doc))) {    // skip docs not in bits\n            totalHits[0]++;\n            if (hq.size() < nDocs || score >= minScore) {\n              hq.insert(new ScoreDoc(doc, score));\n              minScore = ((ScoreDoc)hq.top()).score; // maintain minScore\n            }\n          }\n        }\n      });\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)        // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n\n    return new TopDocs(totalHits[0], scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402061809f3a4629ea0c449e33e9f94a9772f3c3","date":1113967712,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int).mjava","sourceNew":"  // inherit javadoc\n  public TopDocs search(Query query, Filter filter, final int nDocs)\n       throws IOException {\n    return search(query.weight(this), filter, nDocs);\n  }\n\n","sourceOld":"  // inherit javadoc\n  public TopDocs search(Query query, Filter filter, final int nDocs)\n       throws IOException {\n\n    if (nDocs <= 0)  // null might be returned from hq.top() below.\n      throw new IllegalArgumentException(\"nDocs must be > 0\");\n\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return new TopDocs(0, new ScoreDoc[0]);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final HitQueue hq = new HitQueue(nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n        private float minScore = 0.0f;\n        public final void collect(int doc, float score) {\n          if (score > 0.0f &&                     // ignore zeroed buckets\n              (bits==null || bits.get(doc))) {    // skip docs not in bits\n            totalHits[0]++;\n            if (hq.size() < nDocs || score >= minScore) {\n              hq.insert(new ScoreDoc(doc, score));\n              minScore = ((ScoreDoc)hq.top()).score; // maintain minScore\n            }\n          }\n        }\n      });\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)        // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n\n    return new TopDocs(totalHits[0], scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ceaa9738cad9616d1831286111af106e13e0e4b","date":1114543820,"type":4,"author":"Doug Cutting","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int).mjava","sourceNew":null,"sourceOld":"  // inherit javadoc\n  public TopDocs search(Query query, Filter filter, final int nDocs)\n       throws IOException {\n    return search(query.weight(this), filter, nDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d36e31648b7ec39d875e5e05bcc9ac24ae313690":["5f9a181719777fdcf002cf117bfdb5519d59656c"],"4ceaa9738cad9616d1831286111af106e13e0e4b":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8ba06d3dd45ae38f56781aaf97cdb9c2fbc3b8b3":["32cf2e30bd45f6248722d0d19a0045a712782ebc"],"32cf2e30bd45f6248722d0d19a0045a712782ebc":["15c469602973ef1a33c9a07367a380d278ffab20"],"88e85592d567bd56ff271a65280c42fc0b2dd6f2":["8ba06d3dd45ae38f56781aaf97cdb9c2fbc3b8b3"],"5f9a181719777fdcf002cf117bfdb5519d59656c":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["88e85592d567bd56ff271a65280c42fc0b2dd6f2"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["9c7454619ea6a0710272c1dd947345cee64489f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9c7454619ea6a0710272c1dd947345cee64489f6":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ceaa9738cad9616d1831286111af106e13e0e4b"],"15c469602973ef1a33c9a07367a380d278ffab20":["d36e31648b7ec39d875e5e05bcc9ac24ae313690"]},"commit2Childs":{"d36e31648b7ec39d875e5e05bcc9ac24ae313690":["15c469602973ef1a33c9a07367a380d278ffab20"],"4ceaa9738cad9616d1831286111af106e13e0e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["9c7454619ea6a0710272c1dd947345cee64489f6"],"8ba06d3dd45ae38f56781aaf97cdb9c2fbc3b8b3":["88e85592d567bd56ff271a65280c42fc0b2dd6f2"],"32cf2e30bd45f6248722d0d19a0045a712782ebc":["8ba06d3dd45ae38f56781aaf97cdb9c2fbc3b8b3"],"88e85592d567bd56ff271a65280c42fc0b2dd6f2":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"5f9a181719777fdcf002cf117bfdb5519d59656c":["d36e31648b7ec39d875e5e05bcc9ac24ae313690"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["4ceaa9738cad9616d1831286111af106e13e0e4b"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["5f9a181719777fdcf002cf117bfdb5519d59656c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"9c7454619ea6a0710272c1dd947345cee64489f6":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"15c469602973ef1a33c9a07367a380d278ffab20":["32cf2e30bd45f6248722d0d19a0045a712782ebc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}