{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","commits":[{"id":"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e","date":1358793943,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(NUMBER);\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = new HashSet<Long>();\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n\n    long delta = maxValue - minValue;\n    final int bitsPerValue;\n    if (delta < 0) {\n      bitsPerValue = 64;\n      meta.writeByte((byte)0); // delta-compressed\n    } else if (uniqueValues != null && PackedInts.bitsRequired(uniqueValues.size()-1) < PackedInts.bitsRequired(delta)) {\n      // smaller to tableize\n      bitsPerValue = PackedInts.bitsRequired(uniqueValues.size()-1);\n      minValue = 0; // we will write indexes into the table instead of values\n      meta.writeByte((byte)1); // table-compressed\n      Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n      final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n      data.writeVInt(decode.length);\n      for (int i = 0; i < decode.length; i++) {\n        data.writeLong(decode[i]);\n        encode.put(decode[i], i);\n      }\n      final Iterable<Number> original = values;\n      values = new Iterable<Number>() {\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> inner = original.iterator();\n          return new Iterator<Number>() {\n            @Override\n            public boolean hasNext() {\n              return inner.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              return encode.get(inner.next());\n            }\n\n            @Override\n            public void remove() { throw new UnsupportedOperationException(); }\n          };\n        }\n      };\n    } else {\n      bitsPerValue = PackedInts.bitsRequired(delta);\n      meta.writeByte((byte)0); // delta-compressed\n    }\n\n    data.writeLong(minValue);\n\n    FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(count, bitsPerValue, PackedInts.COMPACT);   \n    final PackedInts.Writer writer = PackedInts.getWriter(data, count, formatAndBits.bitsPerValue, 0);\n    for(Number nv : values) {\n      writer.add(nv.longValue() - minValue);\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(NUMBER);\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = new HashSet<Long>();\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n\n    long delta = maxValue - minValue;\n    final int bitsPerValue;\n    if (delta < 0) {\n      bitsPerValue = 64;\n      meta.writeByte((byte)0); // delta-compressed\n    } else if (uniqueValues != null && PackedInts.bitsRequired(uniqueValues.size()-1) < PackedInts.bitsRequired(delta)) {\n      // smaller to tableize\n      bitsPerValue = PackedInts.bitsRequired(uniqueValues.size()-1);\n      minValue = 0; // we will write indexes into the table instead of values\n      meta.writeByte((byte)1); // table-compressed\n      Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n      final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n      data.writeVInt(decode.length);\n      for (int i = 0; i < decode.length; i++) {\n        data.writeLong(decode[i]);\n        encode.put(decode[i], i);\n      }\n      final Iterable<Number> original = values;\n      values = new Iterable<Number>() {\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> inner = original.iterator();\n          return new Iterator<Number>() {\n            @Override\n            public boolean hasNext() {\n              return inner.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              return encode.get(inner.next());\n            }\n\n            @Override\n            public void remove() { throw new UnsupportedOperationException(); }\n          };\n        }\n      };\n    } else {\n      bitsPerValue = PackedInts.bitsRequired(delta);\n      meta.writeByte((byte)0); // delta-compressed\n    }\n\n    data.writeLong(minValue);\n \n    final PackedInts.Writer writer = PackedInts.getWriter(data, count, bitsPerValue, PackedInts.COMPACT);\n    for(Number nv : values) {\n      writer.add(nv.longValue() - minValue);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78f2388efbec3fac2b64171db893e432d930dd9","date":1358794184,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(NUMBER);\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = new HashSet<Long>();\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n\n    long delta = maxValue - minValue;\n    final int bitsPerValue;\n    if (delta < 0) {\n      bitsPerValue = 64;\n      meta.writeByte((byte)0); // delta-compressed\n    } else if (uniqueValues != null && PackedInts.bitsRequired(uniqueValues.size()-1) < PackedInts.bitsRequired(delta)) {\n      // smaller to tableize\n      bitsPerValue = PackedInts.bitsRequired(uniqueValues.size()-1);\n      minValue = 0; // we will write indexes into the table instead of values\n      meta.writeByte((byte)1); // table-compressed\n      Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n      final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n      data.writeVInt(decode.length);\n      for (int i = 0; i < decode.length; i++) {\n        data.writeLong(decode[i]);\n        encode.put(decode[i], i);\n      }\n      final Iterable<Number> original = values;\n      values = new Iterable<Number>() {\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> inner = original.iterator();\n          return new Iterator<Number>() {\n            @Override\n            public boolean hasNext() {\n              return inner.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              return encode.get(inner.next());\n            }\n\n            @Override\n            public void remove() { throw new UnsupportedOperationException(); }\n          };\n        }\n      };\n    } else {\n      bitsPerValue = PackedInts.bitsRequired(delta);\n      meta.writeByte((byte)0); // delta-compressed\n    }\n\n    data.writeLong(minValue);\n\n    final PackedInts.Writer writer = PackedInts.getWriter(data, count, bitsPerValue, PackedInts.COMPACT);\n    for(Number nv : values) {\n      writer.add(nv.longValue() - minValue);\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(NUMBER);\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = new HashSet<Long>();\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n\n    long delta = maxValue - minValue;\n    final int bitsPerValue;\n    if (delta < 0) {\n      bitsPerValue = 64;\n      meta.writeByte((byte)0); // delta-compressed\n    } else if (uniqueValues != null && PackedInts.bitsRequired(uniqueValues.size()-1) < PackedInts.bitsRequired(delta)) {\n      // smaller to tableize\n      bitsPerValue = PackedInts.bitsRequired(uniqueValues.size()-1);\n      minValue = 0; // we will write indexes into the table instead of values\n      meta.writeByte((byte)1); // table-compressed\n      Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n      final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n      data.writeVInt(decode.length);\n      for (int i = 0; i < decode.length; i++) {\n        data.writeLong(decode[i]);\n        encode.put(decode[i], i);\n      }\n      final Iterable<Number> original = values;\n      values = new Iterable<Number>() {\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> inner = original.iterator();\n          return new Iterator<Number>() {\n            @Override\n            public boolean hasNext() {\n              return inner.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              return encode.get(inner.next());\n            }\n\n            @Override\n            public void remove() { throw new UnsupportedOperationException(); }\n          };\n        }\n      };\n    } else {\n      bitsPerValue = PackedInts.bitsRequired(delta);\n      meta.writeByte((byte)0); // delta-compressed\n    }\n\n    data.writeLong(minValue);\n\n    FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(count, bitsPerValue, PackedInts.COMPACT);   \n    final PackedInts.Writer writer = PackedInts.getWriter(data, count, formatAndBits.bitsPerValue, 0);\n    for(Number nv : values) {\n      writer.add(nv.longValue() - minValue);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37b84753dc1f66eba4973779932885fe42cde001","date":1358812051,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(NUMBER);\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = new HashSet<Long>();\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n\n    final long delta = maxValue - minValue;\n    if (uniqueValues != null && (delta < 0 || PackedInts.bitsRequired(uniqueValues.size()-1) < PackedInts.bitsRequired(delta))) {\n      // smaller to tableize\n      final int bitsPerValue = PackedInts.bitsRequired(uniqueValues.size()-1);\n      meta.writeByte((byte)1); // table-compressed\n      Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n      final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n      data.writeVInt(decode.length);\n      for (int i = 0; i < decode.length; i++) {\n        data.writeLong(decode[i]);\n        encode.put(decode[i], i);\n      }\n\n      data.writeVInt(PackedInts.VERSION_CURRENT);\n      data.writeVInt(count);\n      data.writeVInt(bitsPerValue);\n\n      final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, count, bitsPerValue, PackedInts.DEFAULT_BUFFER_SIZE);\n      for(Number nv : values) {\n        writer.add(encode.get(nv));\n      }\n      writer.finish();\n    } else {\n      meta.writeByte((byte)0); // delta-compressed\n\n      data.writeVInt(PackedInts.VERSION_CURRENT);\n      data.writeVInt(count);\n      data.writeVInt(BLOCK_SIZE);\n\n      final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n      for (Number nv : values) {\n        writer.add(nv.longValue());\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(NUMBER);\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = new HashSet<Long>();\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n\n    long delta = maxValue - minValue;\n    final int bitsPerValue;\n    if (delta < 0) {\n      bitsPerValue = 64;\n      meta.writeByte((byte)0); // delta-compressed\n    } else if (uniqueValues != null && PackedInts.bitsRequired(uniqueValues.size()-1) < PackedInts.bitsRequired(delta)) {\n      // smaller to tableize\n      bitsPerValue = PackedInts.bitsRequired(uniqueValues.size()-1);\n      minValue = 0; // we will write indexes into the table instead of values\n      meta.writeByte((byte)1); // table-compressed\n      Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n      final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n      data.writeVInt(decode.length);\n      for (int i = 0; i < decode.length; i++) {\n        data.writeLong(decode[i]);\n        encode.put(decode[i], i);\n      }\n      final Iterable<Number> original = values;\n      values = new Iterable<Number>() {\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> inner = original.iterator();\n          return new Iterator<Number>() {\n            @Override\n            public boolean hasNext() {\n              return inner.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              return encode.get(inner.next());\n            }\n\n            @Override\n            public void remove() { throw new UnsupportedOperationException(); }\n          };\n        }\n      };\n    } else {\n      bitsPerValue = PackedInts.bitsRequired(delta);\n      meta.writeByte((byte)0); // delta-compressed\n    }\n\n    data.writeLong(minValue);\n\n    final PackedInts.Writer writer = PackedInts.getWriter(data, count, bitsPerValue, PackedInts.COMPACT);\n    for(Number nv : values) {\n      writer.add(nv.longValue() - minValue);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e76d3450662dab47d54e3f462c7b3eba4e38b9ac","date":1358866496,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(NUMBER);\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = new HashSet<Long>();\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n\n    final long delta = maxValue - minValue;\n    if (uniqueValues != null && (delta < 0 || PackedInts.bitsRequired(uniqueValues.size()-1) < PackedInts.bitsRequired(delta))) {\n      // smaller to tableize\n      final int bitsPerValue = PackedInts.bitsRequired(uniqueValues.size()-1);\n      meta.writeByte((byte)1); // table-compressed\n      Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n      final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n      data.writeVInt(decode.length);\n      for (int i = 0; i < decode.length; i++) {\n        data.writeLong(decode[i]);\n        encode.put(decode[i], i);\n      }\n\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(count);\n      data.writeVInt(bitsPerValue);\n\n      final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, count, bitsPerValue, PackedInts.DEFAULT_BUFFER_SIZE);\n      for(Number nv : values) {\n        writer.add(encode.get(nv));\n      }\n      writer.finish();\n    } else {\n      meta.writeByte((byte)0); // delta-compressed\n\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(count);\n      data.writeVInt(BLOCK_SIZE);\n\n      final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n      for (Number nv : values) {\n        writer.add(nv.longValue());\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(NUMBER);\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = new HashSet<Long>();\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n\n    final long delta = maxValue - minValue;\n    if (uniqueValues != null && (delta < 0 || PackedInts.bitsRequired(uniqueValues.size()-1) < PackedInts.bitsRequired(delta))) {\n      // smaller to tableize\n      final int bitsPerValue = PackedInts.bitsRequired(uniqueValues.size()-1);\n      meta.writeByte((byte)1); // table-compressed\n      Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n      final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n      data.writeVInt(decode.length);\n      for (int i = 0; i < decode.length; i++) {\n        data.writeLong(decode[i]);\n        encode.put(decode[i], i);\n      }\n\n      data.writeVInt(PackedInts.VERSION_CURRENT);\n      data.writeVInt(count);\n      data.writeVInt(bitsPerValue);\n\n      final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, count, bitsPerValue, PackedInts.DEFAULT_BUFFER_SIZE);\n      for(Number nv : values) {\n        writer.add(encode.get(nv));\n      }\n      writer.finish();\n    } else {\n      meta.writeByte((byte)0); // delta-compressed\n\n      data.writeVInt(PackedInts.VERSION_CURRENT);\n      data.writeVInt(count);\n      data.writeVInt(BLOCK_SIZE);\n\n      final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n      for (Number nv : values) {\n        writer.add(nv.longValue());\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69f2d92e64f751f5af8d5559f6efa01239d50237","date":1359144355,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(NUMBER);\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = new HashSet<Long>();\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n\n    final long delta = maxValue - minValue;\n    if (uniqueValues != null && (delta < 0 || PackedInts.bitsRequired(uniqueValues.size()-1) < PackedInts.bitsRequired(delta))) {\n      // smaller to tableize\n      final int bitsPerValue = PackedInts.bitsRequired(uniqueValues.size()-1);\n      meta.writeByte((byte)1); // table-compressed\n      Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n      final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n      data.writeVInt(decode.length);\n      for (int i = 0; i < decode.length; i++) {\n        data.writeLong(decode[i]);\n        encode.put(decode[i], i);\n      }\n\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      data.writeVInt(bitsPerValue);\n\n      final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, maxDoc, bitsPerValue, PackedInts.DEFAULT_BUFFER_SIZE);\n      for(Number nv : values) {\n        writer.add(encode.get(nv));\n      }\n      writer.finish();\n    } else {\n      meta.writeByte((byte)0); // delta-compressed\n\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      data.writeVInt(BLOCK_SIZE);\n\n      final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n      for (Number nv : values) {\n        writer.add(nv.longValue());\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(NUMBER);\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = new HashSet<Long>();\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n\n    final long delta = maxValue - minValue;\n    if (uniqueValues != null && (delta < 0 || PackedInts.bitsRequired(uniqueValues.size()-1) < PackedInts.bitsRequired(delta))) {\n      // smaller to tableize\n      final int bitsPerValue = PackedInts.bitsRequired(uniqueValues.size()-1);\n      meta.writeByte((byte)1); // table-compressed\n      Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n      final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n      data.writeVInt(decode.length);\n      for (int i = 0; i < decode.length; i++) {\n        data.writeLong(decode[i]);\n        encode.put(decode[i], i);\n      }\n\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(count);\n      data.writeVInt(bitsPerValue);\n\n      final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, count, bitsPerValue, PackedInts.DEFAULT_BUFFER_SIZE);\n      for(Number nv : values) {\n        writer.add(encode.get(nv));\n      }\n      writer.finish();\n    } else {\n      meta.writeByte((byte)0); // delta-compressed\n\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(count);\n      data.writeVInt(BLOCK_SIZE);\n\n      final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n      for (Number nv : values) {\n        writer.add(nv.longValue());\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6fca07cac66b15729e7870bc0896a88560270b5","date":1360097580,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(NUMBER);\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = new HashSet<Long>();\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n\n    if (uniqueValues != null) {\n      // small number of unique values\n      final int bitsPerValue = PackedInts.bitsRequired(uniqueValues.size()-1);\n      FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(maxDoc, bitsPerValue, acceptableOverheadRatio);\n      if (formatAndBits.bitsPerValue == 8 && minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE) {\n        meta.writeByte(UNCOMPRESSED); // uncompressed\n        for (Number nv : values) {\n          data.writeByte((byte) nv.longValue());\n        }\n      } else {\n        meta.writeByte(TABLE_COMPRESSED); // table-compressed\n        Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n        data.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          data.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n\n        meta.writeVInt(PackedInts.VERSION_CURRENT);\n        data.writeVInt(formatAndBits.format.getId());\n        data.writeVInt(formatAndBits.bitsPerValue);\n\n        final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, formatAndBits.format, maxDoc, formatAndBits.bitsPerValue, PackedInts.DEFAULT_BUFFER_SIZE);\n        for(Number nv : values) {\n          writer.add(encode.get(nv.longValue()));\n        }\n        writer.finish();\n      }\n    } else {\n      meta.writeByte(DELTA_COMPRESSED); // delta-compressed\n\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      data.writeVInt(BLOCK_SIZE);\n\n      final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n      for (Number nv : values) {\n        writer.add(nv.longValue());\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(NUMBER);\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = new HashSet<Long>();\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n\n    final long delta = maxValue - minValue;\n    if (uniqueValues != null && (delta < 0 || PackedInts.bitsRequired(uniqueValues.size()-1) < PackedInts.bitsRequired(delta))) {\n      // smaller to tableize\n      final int bitsPerValue = PackedInts.bitsRequired(uniqueValues.size()-1);\n      meta.writeByte((byte)1); // table-compressed\n      Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n      final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n      data.writeVInt(decode.length);\n      for (int i = 0; i < decode.length; i++) {\n        data.writeLong(decode[i]);\n        encode.put(decode[i], i);\n      }\n\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      data.writeVInt(bitsPerValue);\n\n      final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, maxDoc, bitsPerValue, PackedInts.DEFAULT_BUFFER_SIZE);\n      for(Number nv : values) {\n        writer.add(encode.get(nv));\n      }\n      writer.finish();\n    } else {\n      meta.writeByte((byte)0); // delta-compressed\n\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      data.writeVInt(BLOCK_SIZE);\n\n      final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n      for (Number nv : values) {\n        writer.add(nv.longValue());\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(NUMBER);\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = new HashSet<Long>();\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n\n    if (uniqueValues != null) {\n      // small number of unique values\n      final int bitsPerValue = PackedInts.bitsRequired(uniqueValues.size()-1);\n      FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(maxDoc, bitsPerValue, acceptableOverheadRatio);\n      if (formatAndBits.bitsPerValue == 8 && minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE) {\n        meta.writeByte(UNCOMPRESSED); // uncompressed\n        for (Number nv : values) {\n          data.writeByte((byte) nv.longValue());\n        }\n      } else {\n        meta.writeByte(TABLE_COMPRESSED); // table-compressed\n        Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n        data.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          data.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n\n        meta.writeVInt(PackedInts.VERSION_CURRENT);\n        data.writeVInt(formatAndBits.format.getId());\n        data.writeVInt(formatAndBits.bitsPerValue);\n\n        final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, formatAndBits.format, maxDoc, formatAndBits.bitsPerValue, PackedInts.DEFAULT_BUFFER_SIZE);\n        for(Number nv : values) {\n          writer.add(encode.get(nv.longValue()));\n        }\n        writer.finish();\n      }\n    } else {\n      meta.writeByte(DELTA_COMPRESSED); // delta-compressed\n\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      data.writeVInt(BLOCK_SIZE);\n\n      final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n      for (Number nv : values) {\n        writer.add(nv.longValue());\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf317f41f8247db62a955791ebb8a5ab3e7c8d47","date":1366724337,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    addNumericField(field, values, true);\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(NUMBER);\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = new HashSet<Long>();\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n\n    if (uniqueValues != null) {\n      // small number of unique values\n      final int bitsPerValue = PackedInts.bitsRequired(uniqueValues.size()-1);\n      FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(maxDoc, bitsPerValue, acceptableOverheadRatio);\n      if (formatAndBits.bitsPerValue == 8 && minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE) {\n        meta.writeByte(UNCOMPRESSED); // uncompressed\n        for (Number nv : values) {\n          data.writeByte((byte) nv.longValue());\n        }\n      } else {\n        meta.writeByte(TABLE_COMPRESSED); // table-compressed\n        Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n        data.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          data.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n\n        meta.writeVInt(PackedInts.VERSION_CURRENT);\n        data.writeVInt(formatAndBits.format.getId());\n        data.writeVInt(formatAndBits.bitsPerValue);\n\n        final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, formatAndBits.format, maxDoc, formatAndBits.bitsPerValue, PackedInts.DEFAULT_BUFFER_SIZE);\n        for(Number nv : values) {\n          writer.add(encode.get(nv.longValue()));\n        }\n        writer.finish();\n      }\n    } else {\n      meta.writeByte(DELTA_COMPRESSED); // delta-compressed\n\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      data.writeVInt(BLOCK_SIZE);\n\n      final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n      for (Number nv : values) {\n        writer.add(nv.longValue());\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09a42395865f791464f0bd5f6118a4abbfa3eb8a","date":1376920143,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    addNumericField(field, values, true);\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    addNumericField(field, values, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":6,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    addNumericField(field, values, true);\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    addNumericField(field, values, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    addNumericField(field, values, true);\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    addNumericField(field, values, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":6,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    addNumericField(field, values, true);\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    addNumericField(field, values, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":5,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    addNumericField(field, values, true);\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    addNumericField(field, values, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["37b84753dc1f66eba4973779932885fe42cde001"],"a78f2388efbec3fac2b64171db893e432d930dd9":["3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"37b84753dc1f66eba4973779932885fe42cde001":["a78f2388efbec3fac2b64171db893e432d930dd9"],"bf317f41f8247db62a955791ebb8a5ab3e7c8d47":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47","09a42395865f791464f0bd5f6118a4abbfa3eb8a"],"09a42395865f791464f0bd5f6118a4abbfa3eb8a":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"69f2d92e64f751f5af8d5559f6efa01239d50237":["e76d3450662dab47d54e3f462c7b3eba4e38b9ac"],"c6fca07cac66b15729e7870bc0896a88560270b5":["69f2d92e64f751f5af8d5559f6efa01239d50237"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c6fca07cac66b15729e7870bc0896a88560270b5"],"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"]},"commit2Childs":{"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["69f2d92e64f751f5af8d5559f6efa01239d50237"],"a78f2388efbec3fac2b64171db893e432d930dd9":["37b84753dc1f66eba4973779932885fe42cde001"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"37b84753dc1f66eba4973779932885fe42cde001":["e76d3450662dab47d54e3f462c7b3eba4e38b9ac"],"bf317f41f8247db62a955791ebb8a5ab3e7c8d47":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","09a42395865f791464f0bd5f6118a4abbfa3eb8a"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09a42395865f791464f0bd5f6118a4abbfa3eb8a":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"69f2d92e64f751f5af8d5559f6efa01239d50237":["c6fca07cac66b15729e7870bc0896a88560270b5"],"c6fca07cac66b15729e7870bc0896a88560270b5":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["a78f2388efbec3fac2b64171db893e432d930dd9"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}