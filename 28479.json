{"path":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#OrdValueSourceStrategy(int,int,int,GroupHeadSelector,boolean,boolean,IntIntHashMap,FunctionQuery,IndexSearcher,SortedDocValues).mjava","commits":[{"id":"3575e61fd7df2bbcce8b977a23d3d67aa423ce62","date":1586507050,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#OrdValueSourceStrategy(int,int,int,GroupHeadSelector,boolean,boolean,IntIntHashMap,FunctionQuery,IndexSearcher,SortedDocValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#OrdValueSourceStrategy(int,int,int[],GroupHeadSelector,boolean,boolean,IntIntHashMap,FunctionQuery,IndexSearcher,SortedDocValues).mjava","sourceNew":"    public OrdValueSourceStrategy(int maxDoc,\n                                  int nullPolicy,\n                                  int valueCount,\n                                  GroupHeadSelector groupHeadSelector,\n                                  boolean needsScores4Collapsing,\n                                  boolean needsScores,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery,\n                                  IndexSearcher searcher,\n                                  SortedDocValues values) throws IOException {\n      super(maxDoc, valueCount, nullPolicy, needsScores, boostDocs, values);\n      this.needsScores4Collapsing = needsScores4Collapsing;\n      this.valueSource = funcQuery.getValueSource();\n      this.rcontext = ValueSource.newContext(searcher);\n\n      assert GroupHeadSelectorType.MIN_MAX.contains(groupHeadSelector.type);\n\n      if (GroupHeadSelectorType.MAX.equals(groupHeadSelector.type)) {\n        comp = new MaxFloatComp();\n        this.ordVals = new IntFloatDynamicMap(valueCount, -Float.MAX_VALUE);\n      } else {\n        this.nullVal = Float.MAX_VALUE;\n        comp = new MinFloatComp();\n        this.ordVals = new IntFloatDynamicMap(valueCount, Float.MAX_VALUE);\n      }\n\n      collapseScore.setupIfNeeded(groupHeadSelector, rcontext);\n    }\n\n","sourceOld":"    public OrdValueSourceStrategy(int maxDoc,\n                                  int nullPolicy,\n                                  int[] ords,\n                                  GroupHeadSelector groupHeadSelector,\n                                  boolean needsScores4Collapsing,\n                                  boolean needsScores,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery,\n                                  IndexSearcher searcher,\n                                  SortedDocValues values) throws IOException {\n      super(maxDoc, ords, nullPolicy, needsScores, boostDocs, values);\n      this.needsScores4Collapsing = needsScores4Collapsing;\n      this.valueSource = funcQuery.getValueSource();\n      this.rcontext = ValueSource.newContext(searcher);\n      this.ordVals = new float[ords.length];\n\n      assert GroupHeadSelectorType.MIN_MAX.contains(groupHeadSelector.type);\n      \n      if (GroupHeadSelectorType.MAX.equals(groupHeadSelector.type)) {\n        comp = new MaxFloatComp();\n        Arrays.fill(ordVals, -Float.MAX_VALUE );\n      } else {\n        this.nullVal = Float.MAX_VALUE;\n        comp = new MinFloatComp();\n        Arrays.fill(ordVals, Float.MAX_VALUE);\n      }\n\n      collapseScore.setupIfNeeded(groupHeadSelector, rcontext);\n\n      if(this.needsScores) {\n        this.scores = new float[ords.length];\n        if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          nullScores = new FloatArrayList();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3575e61fd7df2bbcce8b977a23d3d67aa423ce62":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3575e61fd7df2bbcce8b977a23d3d67aa423ce62"]},"commit2Childs":{"3575e61fd7df2bbcce8b977a23d3d67aa423ce62":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3575e61fd7df2bbcce8b977a23d3d67aa423ce62"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}