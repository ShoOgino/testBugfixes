{"path":"src/java/org/apache/lucene/search/MultiFieldSortedHitQueue#MultiFieldSortedHitQueue(IndexReader,SortField[],int).mjava","commits":[{"id":"c6691cb6747f9e850337c706c06b92e9ddf816e1","date":1077044431,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiFieldSortedHitQueue#MultiFieldSortedHitQueue(IndexReader,SortField[],int).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Creates a hit queue sorted by the given list of fields.\n\t * @param reader  Index to use.\n\t * @param fields Field names, in priority order (highest priority first).  Cannot be <code>null</code> or empty.\n\t * @param size  The number of hits to retain.  Must be greater than zero.\n\t * @throws IOException\n\t */\n\tMultiFieldSortedHitQueue (IndexReader reader, SortField[] fields, int size)\n\tthrows IOException {\n\t\tfinal int n = fields.length;\n\t\tcomparators = new ScoreDocComparator[n];\n\t\tthis.fields = new SortField[n];\n\t\tfor (int i=0; i<n; ++i) {\n\t\t\tcomparators[i] = FieldSortedHitQueue.getCachedComparator (reader, fields[i].getField(), fields[i].getType());\n\t\t\tthis.fields[i] = new SortField (fields[i].getField(), comparators[i].sortType(), fields[i].getReverse());\n\t\t}\n\t\tinitialize (size);\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d7f2f39556d99cecd24f152bdece2b6432458c3","date":1077651298,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiFieldSortedHitQueue#MultiFieldSortedHitQueue(IndexReader,SortField[],int).mjava","pathOld":"src/java/org/apache/lucene/search/MultiFieldSortedHitQueue#MultiFieldSortedHitQueue(IndexReader,SortField[],int).mjava","sourceNew":"\t/**\n\t * Creates a hit queue sorted by the given list of fields.\n\t * @param reader  Index to use.\n\t * @param fields Field names, in priority order (highest priority first).  Cannot be <code>null</code> or empty.\n\t * @param size  The number of hits to retain.  Must be greater than zero.\n\t * @throws IOException\n\t */\n\tMultiFieldSortedHitQueue (IndexReader reader, SortField[] fields, int size)\n\tthrows IOException {\n\t\tfinal int n = fields.length;\n\t\tcomparators = new ScoreDocComparator[n];\n\t\tthis.fields = new SortField[n];\n\t\tfor (int i=0; i<n; ++i) {\n\t\t\tString fieldname = fields[i].getField();\n\t\t\tcomparators[i] = FieldSortedHitQueue.getCachedComparator (reader, fieldname, fields[i].getType());\n\t\t\tthis.fields[i] = new SortField (fieldname, comparators[i].sortType(), fields[i].getReverse());\n\t\t}\n\t\tinitialize (size);\n\t}\n\n","sourceOld":"\t/**\n\t * Creates a hit queue sorted by the given list of fields.\n\t * @param reader  Index to use.\n\t * @param fields Field names, in priority order (highest priority first).  Cannot be <code>null</code> or empty.\n\t * @param size  The number of hits to retain.  Must be greater than zero.\n\t * @throws IOException\n\t */\n\tMultiFieldSortedHitQueue (IndexReader reader, SortField[] fields, int size)\n\tthrows IOException {\n\t\tfinal int n = fields.length;\n\t\tcomparators = new ScoreDocComparator[n];\n\t\tthis.fields = new SortField[n];\n\t\tfor (int i=0; i<n; ++i) {\n\t\t\tcomparators[i] = FieldSortedHitQueue.getCachedComparator (reader, fields[i].getField(), fields[i].getType());\n\t\t\tthis.fields[i] = new SortField (fields[i].getField(), comparators[i].sortType(), fields[i].getReverse());\n\t\t}\n\t\tinitialize (size);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35c39157e8b6bc585e3a07e703d75db0f2ad56b2","date":1082672595,"type":3,"author":"Tim Jones","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiFieldSortedHitQueue#MultiFieldSortedHitQueue(IndexReader,SortField[],int).mjava","pathOld":"src/java/org/apache/lucene/search/MultiFieldSortedHitQueue#MultiFieldSortedHitQueue(IndexReader,SortField[],int).mjava","sourceNew":"\t/**\n\t * Creates a hit queue sorted by the given list of fields.\n\t * @param reader  Index to use.\n\t * @param fields Field names, in priority order (highest priority first).  Cannot be <code>null</code> or empty.\n\t * @param size  The number of hits to retain.  Must be greater than zero.\n\t * @throws IOException\n\t */\n\tMultiFieldSortedHitQueue (IndexReader reader, SortField[] fields, int size)\n\tthrows IOException {\n\t\tfinal int n = fields.length;\n\t\tcomparators = new ScoreDocComparator[n];\n\t\tthis.fields = new SortField[n];\n\t\tfor (int i=0; i<n; ++i) {\n\t\t\tString fieldname = fields[i].getField();\n\t\t\tcomparators[i] = FieldSortedHitQueue.getCachedComparator (reader, fieldname, fields[i].getType(), fields[i].getFactory());\n\t\t\tthis.fields[i] = new SortField (fieldname, comparators[i].sortType(), fields[i].getReverse());\n\t\t}\n\t\tinitialize (size);\n\t}\n\n","sourceOld":"\t/**\n\t * Creates a hit queue sorted by the given list of fields.\n\t * @param reader  Index to use.\n\t * @param fields Field names, in priority order (highest priority first).  Cannot be <code>null</code> or empty.\n\t * @param size  The number of hits to retain.  Must be greater than zero.\n\t * @throws IOException\n\t */\n\tMultiFieldSortedHitQueue (IndexReader reader, SortField[] fields, int size)\n\tthrows IOException {\n\t\tfinal int n = fields.length;\n\t\tcomparators = new ScoreDocComparator[n];\n\t\tthis.fields = new SortField[n];\n\t\tfor (int i=0; i<n; ++i) {\n\t\t\tString fieldname = fields[i].getField();\n\t\t\tcomparators[i] = FieldSortedHitQueue.getCachedComparator (reader, fieldname, fields[i].getType());\n\t\t\tthis.fields[i] = new SortField (fieldname, comparators[i].sortType(), fields[i].getReverse());\n\t\t}\n\t\tinitialize (size);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99ee715b9c02dd47d9e69a18607a5192c1ebd82b","date":1085007927,"type":4,"author":"Tim Jones","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/MultiFieldSortedHitQueue#MultiFieldSortedHitQueue(IndexReader,SortField[],int).mjava","sourceNew":null,"sourceOld":"\t/**\n\t * Creates a hit queue sorted by the given list of fields.\n\t * @param reader  Index to use.\n\t * @param fields Field names, in priority order (highest priority first).  Cannot be <code>null</code> or empty.\n\t * @param size  The number of hits to retain.  Must be greater than zero.\n\t * @throws IOException\n\t */\n\tMultiFieldSortedHitQueue (IndexReader reader, SortField[] fields, int size)\n\tthrows IOException {\n\t\tfinal int n = fields.length;\n\t\tcomparators = new ScoreDocComparator[n];\n\t\tthis.fields = new SortField[n];\n\t\tfor (int i=0; i<n; ++i) {\n\t\t\tString fieldname = fields[i].getField();\n\t\t\tcomparators[i] = FieldSortedHitQueue.getCachedComparator (reader, fieldname, fields[i].getType(), fields[i].getFactory());\n\t\t\tthis.fields[i] = new SortField (fieldname, comparators[i].sortType(), fields[i].getReverse());\n\t\t}\n\t\tinitialize (size);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6691cb6747f9e850337c706c06b92e9ddf816e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["35c39157e8b6bc585e3a07e703d75db0f2ad56b2"],"35c39157e8b6bc585e3a07e703d75db0f2ad56b2":["9d7f2f39556d99cecd24f152bdece2b6432458c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d7f2f39556d99cecd24f152bdece2b6432458c3":["c6691cb6747f9e850337c706c06b92e9ddf816e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"]},"commit2Childs":{"c6691cb6747f9e850337c706c06b92e9ddf816e1":["9d7f2f39556d99cecd24f152bdece2b6432458c3"],"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"35c39157e8b6bc585e3a07e703d75db0f2ad56b2":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6691cb6747f9e850337c706c06b92e9ddf816e1"],"9d7f2f39556d99cecd24f152bdece2b6432458c3":["35c39157e8b6bc585e3a07e703d75db0f2ad56b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}