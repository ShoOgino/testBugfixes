{"path":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#doTestConfigUpdate(String,String).mjava","commits":[{"id":"547b9bdc942b65ebcd943738bb12c2a222fcf566","date":1432317527,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#doTestConfigUpdate(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Uses the SolrCLI config action to activate soft auto-commits for the getting started collection.\n   */\n  protected void doTestConfigUpdate(String testCollectionName, String solrUrl) throws Exception {\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n    String configUrl = solrUrl + testCollectionName + \"/config\";\n\n    Map<String, Object> configJson = SolrCLI.getJson(configUrl);\n    Object maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(new Long(-1L), maxTimeFromConfig);\n\n    String prop = \"updateHandler.autoSoftCommit.maxTime\";\n    Long maxTime = new Long(3000L);\n    String[] args = new String[]{\n        \"config\",\n        \"-collection\", testCollectionName,\n        \"-property\", prop,\n        \"-value\", maxTime.toString(),\n        \"-solrUrl\", solrUrl\n    };\n    SolrCLI.ConfigTool tool = new SolrCLI.ConfigTool();\n    CommandLine cli = SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args);\n    log.info(\"Sending set-property '\" + prop + \"'=\" + maxTime + \" to SolrCLI.ConfigTool.\");\n    assertTrue(\"Set config property failed!\", tool.runTool(cli) == 0);\n\n    configJson = SolrCLI.getJson(configUrl);\n    maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(maxTime, maxTimeFromConfig);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e2df0ef4d31d965ccc4afc2ec6349c06c3cccf","date":1432317730,"type":4,"author":"Timothy Potter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#doTestConfigUpdate(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Uses the SolrCLI config action to activate soft auto-commits for the getting started collection.\n   */\n  protected void doTestConfigUpdate(String testCollectionName, String solrUrl) throws Exception {\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n    String configUrl = solrUrl + testCollectionName + \"/config\";\n\n    Map<String, Object> configJson = SolrCLI.getJson(configUrl);\n    Object maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(new Long(-1L), maxTimeFromConfig);\n\n    String prop = \"updateHandler.autoSoftCommit.maxTime\";\n    Long maxTime = new Long(3000L);\n    String[] args = new String[]{\n        \"config\",\n        \"-collection\", testCollectionName,\n        \"-property\", prop,\n        \"-value\", maxTime.toString(),\n        \"-solrUrl\", solrUrl\n    };\n    SolrCLI.ConfigTool tool = new SolrCLI.ConfigTool();\n    CommandLine cli = SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args);\n    log.info(\"Sending set-property '\" + prop + \"'=\" + maxTime + \" to SolrCLI.ConfigTool.\");\n    assertTrue(\"Set config property failed!\", tool.runTool(cli) == 0);\n\n    configJson = SolrCLI.getJson(configUrl);\n    maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(maxTime, maxTimeFromConfig);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"919a9ff0212f46eb240b8716a6d189b06659d3f2","date":1432317985,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#doTestConfigUpdate(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Uses the SolrCLI config action to activate soft auto-commits for the getting started collection.\n   */\n  protected void doTestConfigUpdate(String testCollectionName, String solrUrl) throws Exception {\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n    String configUrl = solrUrl + testCollectionName + \"/config\";\n\n    Map<String, Object> configJson = SolrCLI.getJson(configUrl);\n    Object maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(new Long(-1L), maxTimeFromConfig);\n\n    String prop = \"updateHandler.autoSoftCommit.maxTime\";\n    Long maxTime = new Long(3000L);\n    String[] args = new String[]{\n        \"config\",\n        \"-collection\", testCollectionName,\n        \"-property\", prop,\n        \"-value\", maxTime.toString(),\n        \"-solrUrl\", solrUrl\n    };\n    SolrCLI.ConfigTool tool = new SolrCLI.ConfigTool();\n    CommandLine cli = SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args);\n    log.info(\"Sending set-property '\" + prop + \"'=\" + maxTime + \" to SolrCLI.ConfigTool.\");\n    assertTrue(\"Set config property failed!\", tool.runTool(cli) == 0);\n\n    configJson = SolrCLI.getJson(configUrl);\n    maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(maxTime, maxTimeFromConfig);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#doTestConfigUpdate(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#doTestConfigUpdate(String,String).mjava","sourceNew":"  /**\n   * Uses the SolrCLI config action to activate soft auto-commits for the getting started collection.\n   */\n  protected void doTestConfigUpdate(String testCollectionName, String solrUrl) throws Exception {\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n    String configUrl = solrUrl + testCollectionName + \"/config\";\n\n    Map<String, Object> configJson = SolrCLI.getJson(configUrl);\n    Object maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(new Long(-1L), maxTimeFromConfig);\n\n    String prop = \"updateHandler.autoSoftCommit.maxTime\";\n    Long maxTime = new Long(3000L);\n    String[] args = new String[]{\n        \"-collection\", testCollectionName,\n        \"-property\", prop,\n        \"-value\", maxTime.toString(),\n        \"-solrUrl\", solrUrl\n    };\n    SolrCLI.ConfigTool tool = new SolrCLI.ConfigTool();\n    CommandLine cli = SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args);\n    log.info(\"Sending set-property '\" + prop + \"'=\" + maxTime + \" to SolrCLI.ConfigTool.\");\n    assertTrue(\"Set config property failed!\", tool.runTool(cli) == 0);\n\n    configJson = SolrCLI.getJson(configUrl);\n    maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(maxTime, maxTimeFromConfig);\n  }\n\n","sourceOld":"  /**\n   * Uses the SolrCLI config action to activate soft auto-commits for the getting started collection.\n   */\n  protected void doTestConfigUpdate(String testCollectionName, String solrUrl) throws Exception {\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n    String configUrl = solrUrl + testCollectionName + \"/config\";\n\n    Map<String, Object> configJson = SolrCLI.getJson(configUrl);\n    Object maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(new Long(-1L), maxTimeFromConfig);\n\n    String prop = \"updateHandler.autoSoftCommit.maxTime\";\n    Long maxTime = new Long(3000L);\n    String[] args = new String[]{\n        \"config\",\n        \"-collection\", testCollectionName,\n        \"-property\", prop,\n        \"-value\", maxTime.toString(),\n        \"-solrUrl\", solrUrl\n    };\n    SolrCLI.ConfigTool tool = new SolrCLI.ConfigTool();\n    CommandLine cli = SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args);\n    log.info(\"Sending set-property '\" + prop + \"'=\" + maxTime + \" to SolrCLI.ConfigTool.\");\n    assertTrue(\"Set config property failed!\", tool.runTool(cli) == 0);\n\n    configJson = SolrCLI.getJson(configUrl);\n    maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(maxTime, maxTimeFromConfig);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5","date":1493061731,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#doTestConfigUpdate(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#doTestConfigUpdate(String,String).mjava","sourceNew":"  /**\n   * Uses the SolrCLI config action to activate soft auto-commits for the getting started collection.\n   */\n  protected void doTestConfigUpdate(String testCollectionName, String solrUrl) throws Exception {\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n    String configUrl = solrUrl + testCollectionName + \"/config\";\n\n    Map<String, Object> configJson = SolrCLI.getJson(configUrl);\n    Object maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(new Long(-1L), maxTimeFromConfig);\n\n    String prop = \"updateHandler.autoSoftCommit.maxTime\";\n    Long maxTime = new Long(3000L);\n    String[] args = new String[]{\n        \"-collection\", testCollectionName,\n        \"-property\", prop,\n        \"-value\", maxTime.toString(),\n        \"-solrUrl\", solrUrl\n    };\n\n    Map<String, Long> startTimes = getSoftAutocommitInterval(testCollectionName);\n\n    SolrCLI.ConfigTool tool = new SolrCLI.ConfigTool();\n    CommandLine cli = SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args);\n    log.info(\"Sending set-property '\" + prop + \"'=\" + maxTime + \" to SolrCLI.ConfigTool.\");\n    assertTrue(\"Set config property failed!\", tool.runTool(cli) == 0);\n\n    configJson = SolrCLI.getJson(configUrl);\n    maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(maxTime, maxTimeFromConfig);\n\n    log.info(\"live_nodes_count :  \" + cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n\n    // Since it takes some time for this command to complete we need to make sure all the reloads for\n    // all the cores have been done.\n    boolean allGood = false;\n    Map<String, Long> curSoftCommitInterval = null;\n    for (int idx = 0; idx < 600 && allGood == false; ++idx) {\n      curSoftCommitInterval = getSoftAutocommitInterval(testCollectionName);\n      if (curSoftCommitInterval.size() > 0 && curSoftCommitInterval.size() == startTimes.size()) { // no point in even trying if they're not the same size!\n        allGood = true;\n        for (Map.Entry<String, Long> currEntry : curSoftCommitInterval.entrySet()) {\n          if (currEntry.getValue().equals(maxTime) == false) {\n            allGood = false;\n          }\n        }\n      }\n      if (allGood == false) {\n        Thread.sleep(100);\n      }\n    }\n    assertTrue(\"All cores should have been reloaded within 60 seconds!!!\", allGood);\n  }\n\n","sourceOld":"  /**\n   * Uses the SolrCLI config action to activate soft auto-commits for the getting started collection.\n   */\n  protected void doTestConfigUpdate(String testCollectionName, String solrUrl) throws Exception {\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n    String configUrl = solrUrl + testCollectionName + \"/config\";\n\n    Map<String, Object> configJson = SolrCLI.getJson(configUrl);\n    Object maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(new Long(-1L), maxTimeFromConfig);\n\n    String prop = \"updateHandler.autoSoftCommit.maxTime\";\n    Long maxTime = new Long(3000L);\n    String[] args = new String[]{\n        \"-collection\", testCollectionName,\n        \"-property\", prop,\n        \"-value\", maxTime.toString(),\n        \"-solrUrl\", solrUrl\n    };\n    SolrCLI.ConfigTool tool = new SolrCLI.ConfigTool();\n    CommandLine cli = SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args);\n    log.info(\"Sending set-property '\" + prop + \"'=\" + maxTime + \" to SolrCLI.ConfigTool.\");\n    assertTrue(\"Set config property failed!\", tool.runTool(cli) == 0);\n\n    configJson = SolrCLI.getJson(configUrl);\n    maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(maxTime, maxTimeFromConfig);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44ecc6a862721de62c141ce8b174b5c9b4d83b6e","date":1493758727,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#doTestConfigUpdate(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#doTestConfigUpdate(String,String).mjava","sourceNew":"  /**\n   * Uses the SolrCLI config action to activate soft auto-commits for the getting started collection.\n   */\n  protected void doTestConfigUpdate(String testCollectionName, String solrUrl) throws Exception {\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n    String configUrl = solrUrl + testCollectionName + \"/config\";\n\n    Map<String, Object> configJson = SolrCLI.getJson(configUrl);\n    Object maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(new Long(-1L), maxTimeFromConfig);\n\n    String prop = \"updateHandler.autoSoftCommit.maxTime\";\n    Long maxTime = new Long(3000L);\n    String[] args = new String[]{\n        \"-collection\", testCollectionName,\n        \"-property\", prop,\n        \"-value\", maxTime.toString(),\n        \"-solrUrl\", solrUrl\n    };\n\n    Map<String, Long> startTimes = getSoftAutocommitInterval(testCollectionName);\n\n    SolrCLI.ConfigTool tool = new SolrCLI.ConfigTool();\n    CommandLine cli = SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args);\n    log.info(\"Sending set-property '\" + prop + \"'=\" + maxTime + \" to SolrCLI.ConfigTool.\");\n    assertTrue(\"Set config property failed!\", tool.runTool(cli) == 0);\n\n    configJson = SolrCLI.getJson(configUrl);\n    maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(maxTime, maxTimeFromConfig);\n\n    // Just check that we can access paths with slashes in them both through an intermediate method and explicitly\n    // using atPath.\n    assertEquals(\"Should have been able to get a value from the /query request handler\",\n        \"explicit\", SolrCLI.asString(\"/config/requestHandler/\\\\/query/defaults/echoParams\", configJson));\n\n    assertEquals(\"Should have been able to get a value from the /query request handler\",\n        \"explicit\", SolrCLI.atPath(\"/config/requestHandler/\\\\/query/defaults/echoParams\", configJson));\n\n    log.info(\"live_nodes_count :  \" + cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n\n    // Since it takes some time for this command to complete we need to make sure all the reloads for\n    // all the cores have been done.\n    boolean allGood = false;\n    Map<String, Long> curSoftCommitInterval = null;\n    for (int idx = 0; idx < 600 && allGood == false; ++idx) {\n      curSoftCommitInterval = getSoftAutocommitInterval(testCollectionName);\n      if (curSoftCommitInterval.size() > 0 && curSoftCommitInterval.size() == startTimes.size()) { // no point in even trying if they're not the same size!\n        allGood = true;\n        for (Map.Entry<String, Long> currEntry : curSoftCommitInterval.entrySet()) {\n          if (currEntry.getValue().equals(maxTime) == false) {\n            allGood = false;\n          }\n        }\n      }\n      if (allGood == false) {\n        Thread.sleep(100);\n      }\n    }\n    assertTrue(\"All cores should have been reloaded within 60 seconds!!!\", allGood);\n  }\n\n","sourceOld":"  /**\n   * Uses the SolrCLI config action to activate soft auto-commits for the getting started collection.\n   */\n  protected void doTestConfigUpdate(String testCollectionName, String solrUrl) throws Exception {\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n    String configUrl = solrUrl + testCollectionName + \"/config\";\n\n    Map<String, Object> configJson = SolrCLI.getJson(configUrl);\n    Object maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(new Long(-1L), maxTimeFromConfig);\n\n    String prop = \"updateHandler.autoSoftCommit.maxTime\";\n    Long maxTime = new Long(3000L);\n    String[] args = new String[]{\n        \"-collection\", testCollectionName,\n        \"-property\", prop,\n        \"-value\", maxTime.toString(),\n        \"-solrUrl\", solrUrl\n    };\n\n    Map<String, Long> startTimes = getSoftAutocommitInterval(testCollectionName);\n\n    SolrCLI.ConfigTool tool = new SolrCLI.ConfigTool();\n    CommandLine cli = SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args);\n    log.info(\"Sending set-property '\" + prop + \"'=\" + maxTime + \" to SolrCLI.ConfigTool.\");\n    assertTrue(\"Set config property failed!\", tool.runTool(cli) == 0);\n\n    configJson = SolrCLI.getJson(configUrl);\n    maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(maxTime, maxTimeFromConfig);\n\n    log.info(\"live_nodes_count :  \" + cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n\n    // Since it takes some time for this command to complete we need to make sure all the reloads for\n    // all the cores have been done.\n    boolean allGood = false;\n    Map<String, Long> curSoftCommitInterval = null;\n    for (int idx = 0; idx < 600 && allGood == false; ++idx) {\n      curSoftCommitInterval = getSoftAutocommitInterval(testCollectionName);\n      if (curSoftCommitInterval.size() > 0 && curSoftCommitInterval.size() == startTimes.size()) { // no point in even trying if they're not the same size!\n        allGood = true;\n        for (Map.Entry<String, Long> currEntry : curSoftCommitInterval.entrySet()) {\n          if (currEntry.getValue().equals(maxTime) == false) {\n            allGood = false;\n          }\n        }\n      }\n      if (allGood == false) {\n        Thread.sleep(100);\n      }\n    }\n    assertTrue(\"All cores should have been reloaded within 60 seconds!!!\", allGood);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#doTestConfigUpdate(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#doTestConfigUpdate(String,String).mjava","sourceNew":"  /**\n   * Uses the SolrCLI config action to activate soft auto-commits for the getting started collection.\n   */\n  protected void doTestConfigUpdate(String testCollectionName, String solrUrl) throws Exception {\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n    String configUrl = solrUrl + testCollectionName + \"/config\";\n\n    Map<String, Object> configJson = SolrCLI.getJson(configUrl);\n    Object maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(new Long(-1L), maxTimeFromConfig);\n\n    String prop = \"updateHandler.autoSoftCommit.maxTime\";\n    Long maxTime = new Long(3000L);\n    String[] args = new String[]{\n        \"-collection\", testCollectionName,\n        \"-property\", prop,\n        \"-value\", maxTime.toString(),\n        \"-solrUrl\", solrUrl\n    };\n\n    Map<String, Long> startTimes = getSoftAutocommitInterval(testCollectionName);\n\n    SolrCLI.ConfigTool tool = new SolrCLI.ConfigTool();\n    CommandLine cli = SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args);\n    log.info(\"Sending set-property '\" + prop + \"'=\" + maxTime + \" to SolrCLI.ConfigTool.\");\n    assertTrue(\"Set config property failed!\", tool.runTool(cli) == 0);\n\n    configJson = SolrCLI.getJson(configUrl);\n    maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(maxTime, maxTimeFromConfig);\n\n    // Just check that we can access paths with slashes in them both through an intermediate method and explicitly\n    // using atPath.\n    assertEquals(\"Should have been able to get a value from the /query request handler\",\n        \"explicit\", SolrCLI.asString(\"/config/requestHandler/\\\\/query/defaults/echoParams\", configJson));\n\n    assertEquals(\"Should have been able to get a value from the /query request handler\",\n        \"explicit\", SolrCLI.atPath(\"/config/requestHandler/\\\\/query/defaults/echoParams\", configJson));\n\n    log.info(\"live_nodes_count :  \" + cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n\n    // Since it takes some time for this command to complete we need to make sure all the reloads for\n    // all the cores have been done.\n    boolean allGood = false;\n    Map<String, Long> curSoftCommitInterval = null;\n    for (int idx = 0; idx < 600 && allGood == false; ++idx) {\n      curSoftCommitInterval = getSoftAutocommitInterval(testCollectionName);\n      if (curSoftCommitInterval.size() > 0 && curSoftCommitInterval.size() == startTimes.size()) { // no point in even trying if they're not the same size!\n        allGood = true;\n        for (Map.Entry<String, Long> currEntry : curSoftCommitInterval.entrySet()) {\n          if (currEntry.getValue().equals(maxTime) == false) {\n            allGood = false;\n          }\n        }\n      }\n      if (allGood == false) {\n        Thread.sleep(100);\n      }\n    }\n    assertTrue(\"All cores should have been reloaded within 60 seconds!!!\", allGood);\n  }\n\n","sourceOld":"  /**\n   * Uses the SolrCLI config action to activate soft auto-commits for the getting started collection.\n   */\n  protected void doTestConfigUpdate(String testCollectionName, String solrUrl) throws Exception {\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n    String configUrl = solrUrl + testCollectionName + \"/config\";\n\n    Map<String, Object> configJson = SolrCLI.getJson(configUrl);\n    Object maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(new Long(-1L), maxTimeFromConfig);\n\n    String prop = \"updateHandler.autoSoftCommit.maxTime\";\n    Long maxTime = new Long(3000L);\n    String[] args = new String[]{\n        \"-collection\", testCollectionName,\n        \"-property\", prop,\n        \"-value\", maxTime.toString(),\n        \"-solrUrl\", solrUrl\n    };\n    SolrCLI.ConfigTool tool = new SolrCLI.ConfigTool();\n    CommandLine cli = SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args);\n    log.info(\"Sending set-property '\" + prop + \"'=\" + maxTime + \" to SolrCLI.ConfigTool.\");\n    assertTrue(\"Set config property failed!\", tool.runTool(cli) == 0);\n\n    configJson = SolrCLI.getJson(configUrl);\n    maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(maxTime, maxTimeFromConfig);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#doTestConfigUpdate(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#doTestConfigUpdate(String,String).mjava","sourceNew":"  /**\n   * Uses the SolrCLI config action to activate soft auto-commits for the getting started collection.\n   */\n  protected void doTestConfigUpdate(String testCollectionName, String solrUrl) throws Exception {\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n    String configUrl = solrUrl + testCollectionName + \"/config\";\n\n    Map<String, Object> configJson = SolrCLI.getJson(configUrl);\n    Object maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(-1L, maxTimeFromConfig);\n\n    String prop = \"updateHandler.autoSoftCommit.maxTime\";\n    Long maxTime = 3000L;\n    String[] args = new String[]{\n        \"-collection\", testCollectionName,\n        \"-property\", prop,\n        \"-value\", maxTime.toString(),\n        \"-solrUrl\", solrUrl\n    };\n\n    Map<String, Long> startTimes = getSoftAutocommitInterval(testCollectionName);\n\n    SolrCLI.ConfigTool tool = new SolrCLI.ConfigTool();\n    CommandLine cli = SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args);\n    log.info(\"Sending set-property '\" + prop + \"'=\" + maxTime + \" to SolrCLI.ConfigTool.\");\n    assertTrue(\"Set config property failed!\", tool.runTool(cli) == 0);\n\n    configJson = SolrCLI.getJson(configUrl);\n    maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(maxTime, maxTimeFromConfig);\n\n    // Just check that we can access paths with slashes in them both through an intermediate method and explicitly\n    // using atPath.\n    assertEquals(\"Should have been able to get a value from the /query request handler\",\n        \"explicit\", SolrCLI.asString(\"/config/requestHandler/\\\\/query/defaults/echoParams\", configJson));\n\n    assertEquals(\"Should have been able to get a value from the /query request handler\",\n        \"explicit\", SolrCLI.atPath(\"/config/requestHandler/\\\\/query/defaults/echoParams\", configJson));\n\n    log.info(\"live_nodes_count :  \" + cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n\n    // Since it takes some time for this command to complete we need to make sure all the reloads for\n    // all the cores have been done.\n    boolean allGood = false;\n    Map<String, Long> curSoftCommitInterval = null;\n    for (int idx = 0; idx < 600 && allGood == false; ++idx) {\n      curSoftCommitInterval = getSoftAutocommitInterval(testCollectionName);\n      if (curSoftCommitInterval.size() > 0 && curSoftCommitInterval.size() == startTimes.size()) { // no point in even trying if they're not the same size!\n        allGood = true;\n        for (Map.Entry<String, Long> currEntry : curSoftCommitInterval.entrySet()) {\n          if (currEntry.getValue().equals(maxTime) == false) {\n            allGood = false;\n          }\n        }\n      }\n      if (allGood == false) {\n        Thread.sleep(100);\n      }\n    }\n    assertTrue(\"All cores should have been reloaded within 60 seconds!!!\", allGood);\n  }\n\n","sourceOld":"  /**\n   * Uses the SolrCLI config action to activate soft auto-commits for the getting started collection.\n   */\n  protected void doTestConfigUpdate(String testCollectionName, String solrUrl) throws Exception {\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n    String configUrl = solrUrl + testCollectionName + \"/config\";\n\n    Map<String, Object> configJson = SolrCLI.getJson(configUrl);\n    Object maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(new Long(-1L), maxTimeFromConfig);\n\n    String prop = \"updateHandler.autoSoftCommit.maxTime\";\n    Long maxTime = new Long(3000L);\n    String[] args = new String[]{\n        \"-collection\", testCollectionName,\n        \"-property\", prop,\n        \"-value\", maxTime.toString(),\n        \"-solrUrl\", solrUrl\n    };\n\n    Map<String, Long> startTimes = getSoftAutocommitInterval(testCollectionName);\n\n    SolrCLI.ConfigTool tool = new SolrCLI.ConfigTool();\n    CommandLine cli = SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args);\n    log.info(\"Sending set-property '\" + prop + \"'=\" + maxTime + \" to SolrCLI.ConfigTool.\");\n    assertTrue(\"Set config property failed!\", tool.runTool(cli) == 0);\n\n    configJson = SolrCLI.getJson(configUrl);\n    maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(maxTime, maxTimeFromConfig);\n\n    // Just check that we can access paths with slashes in them both through an intermediate method and explicitly\n    // using atPath.\n    assertEquals(\"Should have been able to get a value from the /query request handler\",\n        \"explicit\", SolrCLI.asString(\"/config/requestHandler/\\\\/query/defaults/echoParams\", configJson));\n\n    assertEquals(\"Should have been able to get a value from the /query request handler\",\n        \"explicit\", SolrCLI.atPath(\"/config/requestHandler/\\\\/query/defaults/echoParams\", configJson));\n\n    log.info(\"live_nodes_count :  \" + cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n\n    // Since it takes some time for this command to complete we need to make sure all the reloads for\n    // all the cores have been done.\n    boolean allGood = false;\n    Map<String, Long> curSoftCommitInterval = null;\n    for (int idx = 0; idx < 600 && allGood == false; ++idx) {\n      curSoftCommitInterval = getSoftAutocommitInterval(testCollectionName);\n      if (curSoftCommitInterval.size() > 0 && curSoftCommitInterval.size() == startTimes.size()) { // no point in even trying if they're not the same size!\n        allGood = true;\n        for (Map.Entry<String, Long> currEntry : curSoftCommitInterval.entrySet()) {\n          if (currEntry.getValue().equals(maxTime) == false) {\n            allGood = false;\n          }\n        }\n      }\n      if (allGood == false) {\n        Thread.sleep(100);\n      }\n    }\n    assertTrue(\"All cores should have been reloaded within 60 seconds!!!\", allGood);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#doTestConfigUpdate(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#doTestConfigUpdate(String,String).mjava","sourceNew":"  /**\n   * Uses the SolrCLI config action to activate soft auto-commits for the getting started collection.\n   */\n  protected void doTestConfigUpdate(String testCollectionName, String solrUrl) throws Exception {\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n    String configUrl = solrUrl + testCollectionName + \"/config\";\n\n    Map<String, Object> configJson = SolrCLI.getJson(configUrl);\n    Object maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(-1L, maxTimeFromConfig);\n\n    String prop = \"updateHandler.autoSoftCommit.maxTime\";\n    Long maxTime = 3000L;\n    String[] args = new String[]{\n        \"-collection\", testCollectionName,\n        \"-property\", prop,\n        \"-value\", maxTime.toString(),\n        \"-solrUrl\", solrUrl\n    };\n\n    Map<String, Long> startTimes = getSoftAutocommitInterval(testCollectionName);\n\n    SolrCLI.ConfigTool tool = new SolrCLI.ConfigTool();\n    CommandLine cli = SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args);\n    log.info(\"Sending set-property '\" + prop + \"'=\" + maxTime + \" to SolrCLI.ConfigTool.\");\n    assertTrue(\"Set config property failed!\", tool.runTool(cli) == 0);\n\n    configJson = SolrCLI.getJson(configUrl);\n    maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(maxTime, maxTimeFromConfig);\n\n    // Just check that we can access paths with slashes in them both through an intermediate method and explicitly\n    // using atPath.\n    assertEquals(\"Should have been able to get a value from the /query request handler\",\n        \"explicit\", SolrCLI.asString(\"/config/requestHandler/\\\\/query/defaults/echoParams\", configJson));\n\n    assertEquals(\"Should have been able to get a value from the /query request handler\",\n        \"explicit\", SolrCLI.atPath(\"/config/requestHandler/\\\\/query/defaults/echoParams\", configJson));\n\n    log.info(\"live_nodes_count :  \" + cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n\n    // Since it takes some time for this command to complete we need to make sure all the reloads for\n    // all the cores have been done.\n    boolean allGood = false;\n    Map<String, Long> curSoftCommitInterval = null;\n    for (int idx = 0; idx < 600 && allGood == false; ++idx) {\n      curSoftCommitInterval = getSoftAutocommitInterval(testCollectionName);\n      if (curSoftCommitInterval.size() > 0 && curSoftCommitInterval.size() == startTimes.size()) { // no point in even trying if they're not the same size!\n        allGood = true;\n        for (Map.Entry<String, Long> currEntry : curSoftCommitInterval.entrySet()) {\n          if (currEntry.getValue().equals(maxTime) == false) {\n            allGood = false;\n          }\n        }\n      }\n      if (allGood == false) {\n        Thread.sleep(100);\n      }\n    }\n    assertTrue(\"All cores should have been reloaded within 60 seconds!!!\", allGood);\n  }\n\n","sourceOld":"  /**\n   * Uses the SolrCLI config action to activate soft auto-commits for the getting started collection.\n   */\n  protected void doTestConfigUpdate(String testCollectionName, String solrUrl) throws Exception {\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n    String configUrl = solrUrl + testCollectionName + \"/config\";\n\n    Map<String, Object> configJson = SolrCLI.getJson(configUrl);\n    Object maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(new Long(-1L), maxTimeFromConfig);\n\n    String prop = \"updateHandler.autoSoftCommit.maxTime\";\n    Long maxTime = new Long(3000L);\n    String[] args = new String[]{\n        \"-collection\", testCollectionName,\n        \"-property\", prop,\n        \"-value\", maxTime.toString(),\n        \"-solrUrl\", solrUrl\n    };\n\n    Map<String, Long> startTimes = getSoftAutocommitInterval(testCollectionName);\n\n    SolrCLI.ConfigTool tool = new SolrCLI.ConfigTool();\n    CommandLine cli = SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args);\n    log.info(\"Sending set-property '\" + prop + \"'=\" + maxTime + \" to SolrCLI.ConfigTool.\");\n    assertTrue(\"Set config property failed!\", tool.runTool(cli) == 0);\n\n    configJson = SolrCLI.getJson(configUrl);\n    maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(maxTime, maxTimeFromConfig);\n\n    // Just check that we can access paths with slashes in them both through an intermediate method and explicitly\n    // using atPath.\n    assertEquals(\"Should have been able to get a value from the /query request handler\",\n        \"explicit\", SolrCLI.asString(\"/config/requestHandler/\\\\/query/defaults/echoParams\", configJson));\n\n    assertEquals(\"Should have been able to get a value from the /query request handler\",\n        \"explicit\", SolrCLI.atPath(\"/config/requestHandler/\\\\/query/defaults/echoParams\", configJson));\n\n    log.info(\"live_nodes_count :  \" + cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n\n    // Since it takes some time for this command to complete we need to make sure all the reloads for\n    // all the cores have been done.\n    boolean allGood = false;\n    Map<String, Long> curSoftCommitInterval = null;\n    for (int idx = 0; idx < 600 && allGood == false; ++idx) {\n      curSoftCommitInterval = getSoftAutocommitInterval(testCollectionName);\n      if (curSoftCommitInterval.size() > 0 && curSoftCommitInterval.size() == startTimes.size()) { // no point in even trying if they're not the same size!\n        allGood = true;\n        for (Map.Entry<String, Long> currEntry : curSoftCommitInterval.entrySet()) {\n          if (currEntry.getValue().equals(maxTime) == false) {\n            allGood = false;\n          }\n        }\n      }\n      if (allGood == false) {\n        Thread.sleep(100);\n      }\n    }\n    assertTrue(\"All cores should have been reloaded within 60 seconds!!!\", allGood);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#doTestConfigUpdate(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#doTestConfigUpdate(String,String).mjava","sourceNew":"  /**\n   * Uses the SolrCLI config action to activate soft auto-commits for the getting started collection.\n   */\n  protected void doTestConfigUpdate(String testCollectionName, String solrUrl) throws Exception {\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n    String configUrl = solrUrl + testCollectionName + \"/config\";\n\n    Map<String, Object> configJson = SolrCLI.getJson(configUrl);\n    Object maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(-1L, maxTimeFromConfig);\n\n    String prop = \"updateHandler.autoSoftCommit.maxTime\";\n    Long maxTime = 3000L;\n    String[] args = new String[]{\n        \"-collection\", testCollectionName,\n        \"-property\", prop,\n        \"-value\", maxTime.toString(),\n        \"-solrUrl\", solrUrl\n    };\n\n    Map<String, Long> startTimes = getSoftAutocommitInterval(testCollectionName);\n\n    SolrCLI.ConfigTool tool = new SolrCLI.ConfigTool();\n    CommandLine cli = SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args);\n    log.info(\"Sending set-property '\" + prop + \"'=\" + maxTime + \" to SolrCLI.ConfigTool.\");\n    assertTrue(\"Set config property failed!\", tool.runTool(cli) == 0);\n\n    configJson = SolrCLI.getJson(configUrl);\n    maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(maxTime, maxTimeFromConfig);\n\n    // Just check that we can access paths with slashes in them both through an intermediate method and explicitly\n    // using atPath.\n    assertEquals(\"Should have been able to get a value from the /query request handler\",\n        \"explicit\", SolrCLI.asString(\"/config/requestHandler/\\\\/query/defaults/echoParams\", configJson));\n\n    assertEquals(\"Should have been able to get a value from the /query request handler\",\n        \"explicit\", SolrCLI.atPath(\"/config/requestHandler/\\\\/query/defaults/echoParams\", configJson));\n\n    log.info(\"live_nodes_count :  \" + cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n\n    // Since it takes some time for this command to complete we need to make sure all the reloads for\n    // all the cores have been done.\n    boolean allGood = false;\n    Map<String, Long> curSoftCommitInterval = null;\n    for (int idx = 0; idx < 600 && allGood == false; ++idx) {\n      curSoftCommitInterval = getSoftAutocommitInterval(testCollectionName);\n      if (curSoftCommitInterval.size() > 0 && curSoftCommitInterval.size() == startTimes.size()) { // no point in even trying if they're not the same size!\n        allGood = true;\n        for (Map.Entry<String, Long> currEntry : curSoftCommitInterval.entrySet()) {\n          if (currEntry.getValue().equals(maxTime) == false) {\n            allGood = false;\n          }\n        }\n      }\n      if (allGood == false) {\n        Thread.sleep(100);\n      }\n    }\n    assertTrue(\"All cores should have been reloaded within 60 seconds!!!\", allGood);\n  }\n\n","sourceOld":"  /**\n   * Uses the SolrCLI config action to activate soft auto-commits for the getting started collection.\n   */\n  protected void doTestConfigUpdate(String testCollectionName, String solrUrl) throws Exception {\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n    String configUrl = solrUrl + testCollectionName + \"/config\";\n\n    Map<String, Object> configJson = SolrCLI.getJson(configUrl);\n    Object maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(new Long(-1L), maxTimeFromConfig);\n\n    String prop = \"updateHandler.autoSoftCommit.maxTime\";\n    Long maxTime = new Long(3000L);\n    String[] args = new String[]{\n        \"-collection\", testCollectionName,\n        \"-property\", prop,\n        \"-value\", maxTime.toString(),\n        \"-solrUrl\", solrUrl\n    };\n\n    Map<String, Long> startTimes = getSoftAutocommitInterval(testCollectionName);\n\n    SolrCLI.ConfigTool tool = new SolrCLI.ConfigTool();\n    CommandLine cli = SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args);\n    log.info(\"Sending set-property '\" + prop + \"'=\" + maxTime + \" to SolrCLI.ConfigTool.\");\n    assertTrue(\"Set config property failed!\", tool.runTool(cli) == 0);\n\n    configJson = SolrCLI.getJson(configUrl);\n    maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(maxTime, maxTimeFromConfig);\n\n    // Just check that we can access paths with slashes in them both through an intermediate method and explicitly\n    // using atPath.\n    assertEquals(\"Should have been able to get a value from the /query request handler\",\n        \"explicit\", SolrCLI.asString(\"/config/requestHandler/\\\\/query/defaults/echoParams\", configJson));\n\n    assertEquals(\"Should have been able to get a value from the /query request handler\",\n        \"explicit\", SolrCLI.atPath(\"/config/requestHandler/\\\\/query/defaults/echoParams\", configJson));\n\n    log.info(\"live_nodes_count :  \" + cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n\n    // Since it takes some time for this command to complete we need to make sure all the reloads for\n    // all the cores have been done.\n    boolean allGood = false;\n    Map<String, Long> curSoftCommitInterval = null;\n    for (int idx = 0; idx < 600 && allGood == false; ++idx) {\n      curSoftCommitInterval = getSoftAutocommitInterval(testCollectionName);\n      if (curSoftCommitInterval.size() > 0 && curSoftCommitInterval.size() == startTimes.size()) { // no point in even trying if they're not the same size!\n        allGood = true;\n        for (Map.Entry<String, Long> currEntry : curSoftCommitInterval.entrySet()) {\n          if (currEntry.getValue().equals(maxTime) == false) {\n            allGood = false;\n          }\n        }\n      }\n      if (allGood == false) {\n        Thread.sleep(100);\n      }\n    }\n    assertTrue(\"All cores should have been reloaded within 60 seconds!!!\", allGood);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#doTestConfigUpdate(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#doTestConfigUpdate(String,String).mjava","sourceNew":"  /**\n   * Uses the SolrCLI config action to activate soft auto-commits for the getting started collection.\n   */\n  protected void doTestConfigUpdate(String testCollectionName, String solrUrl) throws Exception {\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n    String configUrl = solrUrl + testCollectionName + \"/config\";\n\n    Map<String, Object> configJson = SolrCLI.getJson(configUrl);\n    Object maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(-1L, maxTimeFromConfig);\n\n    String prop = \"updateHandler.autoSoftCommit.maxTime\";\n    Long maxTime = 3000L;\n    String[] args = new String[]{\n        \"-collection\", testCollectionName,\n        \"-property\", prop,\n        \"-value\", maxTime.toString(),\n        \"-solrUrl\", solrUrl\n    };\n\n    Map<String, Long> startTimes = getSoftAutocommitInterval(testCollectionName);\n\n    SolrCLI.ConfigTool tool = new SolrCLI.ConfigTool();\n    CommandLine cli = SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args);\n    log.info(\"Sending set-property '{}'={} to SolrCLI.ConfigTool.\", prop, maxTime);\n    assertTrue(\"Set config property failed!\", tool.runTool(cli) == 0);\n\n    configJson = SolrCLI.getJson(configUrl);\n    maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(maxTime, maxTimeFromConfig);\n\n    // Just check that we can access paths with slashes in them both through an intermediate method and explicitly\n    // using atPath.\n    assertEquals(\"Should have been able to get a value from the /query request handler\",\n        \"explicit\", SolrCLI.asString(\"/config/requestHandler/\\\\/query/defaults/echoParams\", configJson));\n\n    assertEquals(\"Should have been able to get a value from the /query request handler\",\n        \"explicit\", SolrCLI.atPath(\"/config/requestHandler/\\\\/query/defaults/echoParams\", configJson));\n\n    if (log.isInfoEnabled()) {\n      log.info(\"live_nodes_count :  {}\", cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n    }\n\n    // Since it takes some time for this command to complete we need to make sure all the reloads for\n    // all the cores have been done.\n    boolean allGood = false;\n    Map<String, Long> curSoftCommitInterval = null;\n    for (int idx = 0; idx < 600 && allGood == false; ++idx) {\n      curSoftCommitInterval = getSoftAutocommitInterval(testCollectionName);\n      if (curSoftCommitInterval.size() > 0 && curSoftCommitInterval.size() == startTimes.size()) { // no point in even trying if they're not the same size!\n        allGood = true;\n        for (Map.Entry<String, Long> currEntry : curSoftCommitInterval.entrySet()) {\n          if (currEntry.getValue().equals(maxTime) == false) {\n            allGood = false;\n          }\n        }\n      }\n      if (allGood == false) {\n        Thread.sleep(100);\n      }\n    }\n    assertTrue(\"All cores should have been reloaded within 60 seconds!!!\", allGood);\n  }\n\n","sourceOld":"  /**\n   * Uses the SolrCLI config action to activate soft auto-commits for the getting started collection.\n   */\n  protected void doTestConfigUpdate(String testCollectionName, String solrUrl) throws Exception {\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n    String configUrl = solrUrl + testCollectionName + \"/config\";\n\n    Map<String, Object> configJson = SolrCLI.getJson(configUrl);\n    Object maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(-1L, maxTimeFromConfig);\n\n    String prop = \"updateHandler.autoSoftCommit.maxTime\";\n    Long maxTime = 3000L;\n    String[] args = new String[]{\n        \"-collection\", testCollectionName,\n        \"-property\", prop,\n        \"-value\", maxTime.toString(),\n        \"-solrUrl\", solrUrl\n    };\n\n    Map<String, Long> startTimes = getSoftAutocommitInterval(testCollectionName);\n\n    SolrCLI.ConfigTool tool = new SolrCLI.ConfigTool();\n    CommandLine cli = SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args);\n    log.info(\"Sending set-property '\" + prop + \"'=\" + maxTime + \" to SolrCLI.ConfigTool.\");\n    assertTrue(\"Set config property failed!\", tool.runTool(cli) == 0);\n\n    configJson = SolrCLI.getJson(configUrl);\n    maxTimeFromConfig = SolrCLI.atPath(\"/config/updateHandler/autoSoftCommit/maxTime\", configJson);\n    assertNotNull(maxTimeFromConfig);\n    assertEquals(maxTime, maxTimeFromConfig);\n\n    // Just check that we can access paths with slashes in them both through an intermediate method and explicitly\n    // using atPath.\n    assertEquals(\"Should have been able to get a value from the /query request handler\",\n        \"explicit\", SolrCLI.asString(\"/config/requestHandler/\\\\/query/defaults/echoParams\", configJson));\n\n    assertEquals(\"Should have been able to get a value from the /query request handler\",\n        \"explicit\", SolrCLI.atPath(\"/config/requestHandler/\\\\/query/defaults/echoParams\", configJson));\n\n    log.info(\"live_nodes_count :  \" + cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n\n    // Since it takes some time for this command to complete we need to make sure all the reloads for\n    // all the cores have been done.\n    boolean allGood = false;\n    Map<String, Long> curSoftCommitInterval = null;\n    for (int idx = 0; idx < 600 && allGood == false; ++idx) {\n      curSoftCommitInterval = getSoftAutocommitInterval(testCollectionName);\n      if (curSoftCommitInterval.size() > 0 && curSoftCommitInterval.size() == startTimes.size()) { // no point in even trying if they're not the same size!\n        allGood = true;\n        for (Map.Entry<String, Long> currEntry : curSoftCommitInterval.entrySet()) {\n          if (currEntry.getValue().equals(maxTime) == false) {\n            allGood = false;\n          }\n        }\n      }\n      if (allGood == false) {\n        Thread.sleep(100);\n      }\n    }\n    assertTrue(\"All cores should have been reloaded within 60 seconds!!!\", allGood);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["44ecc6a862721de62c141ce8b174b5c9b4d83b6e"],"547b9bdc942b65ebcd943738bb12c2a222fcf566":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"44ecc6a862721de62c141ce8b174b5c9b4d83b6e":["fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["44ecc6a862721de62c141ce8b174b5c9b4d83b6e","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"4ca20be81c9284c840498143264e583ccbb8525a":["919a9ff0212f46eb240b8716a6d189b06659d3f2"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["4ca20be81c9284c840498143264e583ccbb8525a","44ecc6a862721de62c141ce8b174b5c9b4d83b6e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["44ecc6a862721de62c141ce8b174b5c9b4d83b6e","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"919a9ff0212f46eb240b8716a6d189b06659d3f2":["b3e2df0ef4d31d965ccc4afc2ec6349c06c3cccf"],"fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5":["4ca20be81c9284c840498143264e583ccbb8525a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"b3e2df0ef4d31d965ccc4afc2ec6349c06c3cccf":["547b9bdc942b65ebcd943738bb12c2a222fcf566"]},"commit2Childs":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"547b9bdc942b65ebcd943738bb12c2a222fcf566":["b3e2df0ef4d31d965ccc4afc2ec6349c06c3cccf"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"44ecc6a862721de62c141ce8b174b5c9b4d83b6e":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","628903f37b6c442da0d390db1c6af9a0e74d41a7","e9017cf144952056066919f1ebc7897ff9bd71b1","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["a966532d92cf9ba2856f15a8140151bb6b518e4b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"4ca20be81c9284c840498143264e583ccbb8525a":["e9017cf144952056066919f1ebc7897ff9bd71b1","fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["547b9bdc942b65ebcd943738bb12c2a222fcf566"],"919a9ff0212f46eb240b8716a6d189b06659d3f2":["4ca20be81c9284c840498143264e583ccbb8525a"],"fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5":["44ecc6a862721de62c141ce8b174b5c9b4d83b6e"],"b3e2df0ef4d31d965ccc4afc2ec6349c06c3cccf":["919a9ff0212f46eb240b8716a6d189b06659d3f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}