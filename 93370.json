{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeilArrayWithGaps(FST.Arc[T],int,FST.BytesReader).mjava","commits":[{"id":"ae67e1f82a53594208ca929f382ee861dad3d7a8","date":1557134375,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeilArrayWithGaps(FST.Arc[T],int,FST.BytesReader).mjava","pathOld":"/dev/null","sourceNew":"  private FST.Arc<T> doSeekCeilArrayWithGaps(final FST.Arc<T> arc, final int targetLabel, final FST.BytesReader in) throws IOException {\n    // The array is addressed directly by label and may contain holes.\n\n    in.setPosition(arc.posArcsStart);\n    in.skipBytes(1);\n    int firstLabel = fst.readLabel(in);\n    int arcOffset = targetLabel - firstLabel;\n    if (arcOffset >= arc.numArcs) {\n      // target is beyond the last arc\n      arc.nextArc = arc.posArcsStart - (arc.numArcs - 1) * arc.bytesPerArc;\n      fst.readNextRealArc(arc, in);\n      assert arc.isLast();\n      // Dead end (target is after the last arc);\n      // rollback to last fork then push\n      upto--;\n      while(true) {\n        if (upto == 0) {\n          return null;\n        }\n        final FST.Arc<T> prevArc = getArc(upto);\n        //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n        if (!prevArc.isLast()) {\n          fst.readNextArc(prevArc, fstReader);\n          pushFirst();\n          return null;\n        }\n        upto--;\n      }\n    } else {\n      // TODO: if firstLabel == targetLabel\n      if (arcOffset >= 0) {\n        arc.nextArc = arc.posArcsStart - (arc.bytesPerArc * arcOffset);\n      } else {\n        arc.nextArc = arc.posArcsStart;\n      }\n      fst.readNextRealArc(arc, in);\n      if (arc.label == targetLabel) {\n        // found -- copy pasta from below\n        output[upto] = fst.outputs.add(output[upto-1], arc.output);\n        if (targetLabel == FST.END_LABEL) {\n          return null;\n        }\n        setCurrentLabel(arc.label);\n        incr();\n        return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n      }\n      // not found, return the next highest\n      assert arc.label > targetLabel;\n      pushFirst();\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeilArrayWithGaps(FST.Arc[T],int,FST.BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeilArrayWithGaps(FST.Arc[T],int,FST.BytesReader).mjava","sourceNew":"  private FST.Arc<T> doSeekCeilArrayWithGaps(final FST.Arc<T> arc, final int targetLabel, final FST.BytesReader in) throws IOException {\n    // The array is addressed directly by label and may contain holes.\n\n    in.setPosition(arc.posArcsStart());\n    in.skipBytes(1);\n    int firstLabel = fst.readLabel(in);\n    int arcOffset = targetLabel - firstLabel;\n    if (arcOffset >= arc.numArcs()) {\n      // target is beyond the last arc\n      arc.nextArc(arc.posArcsStart() - (arc.numArcs() - 1) * arc.bytesPerArc());\n      fst.readNextRealArc(arc, in);\n      assert arc.isLast();\n      // Dead end (target is after the last arc);\n      // rollback to last fork then push\n      upto--;\n      while(true) {\n        if (upto == 0) {\n          return null;\n        }\n        final FST.Arc<T> prevArc = getArc(upto);\n        //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n        if (!prevArc.isLast()) {\n          fst.readNextArc(prevArc, fstReader);\n          pushFirst();\n          return null;\n        }\n        upto--;\n      }\n    } else {\n      // TODO: if firstLabel == targetLabel\n      if (arcOffset >= 0) {\n        arc.nextArc(arc.posArcsStart() - (arc.bytesPerArc() * arcOffset));\n      } else {\n        arc.nextArc(arc.posArcsStart());\n      }\n      fst.readNextRealArc(arc, in);\n      if (arc.label() == targetLabel) {\n        // found -- copy pasta from below\n        output[upto] = fst.outputs.add(output[upto-1], arc.output());\n        if (targetLabel == FST.END_LABEL) {\n          return null;\n        }\n        setCurrentLabel(arc.label());\n        incr();\n        return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n      }\n      // not found, return the next highest\n      assert arc.label() > targetLabel;\n      pushFirst();\n      return null;\n    }\n  }\n\n","sourceOld":"  private FST.Arc<T> doSeekCeilArrayWithGaps(final FST.Arc<T> arc, final int targetLabel, final FST.BytesReader in) throws IOException {\n    // The array is addressed directly by label and may contain holes.\n\n    in.setPosition(arc.posArcsStart);\n    in.skipBytes(1);\n    int firstLabel = fst.readLabel(in);\n    int arcOffset = targetLabel - firstLabel;\n    if (arcOffset >= arc.numArcs) {\n      // target is beyond the last arc\n      arc.nextArc = arc.posArcsStart - (arc.numArcs - 1) * arc.bytesPerArc;\n      fst.readNextRealArc(arc, in);\n      assert arc.isLast();\n      // Dead end (target is after the last arc);\n      // rollback to last fork then push\n      upto--;\n      while(true) {\n        if (upto == 0) {\n          return null;\n        }\n        final FST.Arc<T> prevArc = getArc(upto);\n        //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n        if (!prevArc.isLast()) {\n          fst.readNextArc(prevArc, fstReader);\n          pushFirst();\n          return null;\n        }\n        upto--;\n      }\n    } else {\n      // TODO: if firstLabel == targetLabel\n      if (arcOffset >= 0) {\n        arc.nextArc = arc.posArcsStart - (arc.bytesPerArc * arcOffset);\n      } else {\n        arc.nextArc = arc.posArcsStart;\n      }\n      fst.readNextRealArc(arc, in);\n      if (arc.label == targetLabel) {\n        // found -- copy pasta from below\n        output[upto] = fst.outputs.add(output[upto-1], arc.output);\n        if (targetLabel == FST.END_LABEL) {\n          return null;\n        }\n        setCurrentLabel(arc.label);\n        incr();\n        return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n      }\n      // not found, return the next highest\n      assert arc.label > targetLabel;\n      pushFirst();\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeilArrayWithGaps(FST.Arc[T],int,FST.BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeilArrayWithGaps(FST.Arc[T],int,FST.BytesReader).mjava","sourceNew":"  private FST.Arc<T> doSeekCeilArrayWithGaps(final FST.Arc<T> arc, final int targetLabel, final FST.BytesReader in) throws IOException {\n    // The array is addressed directly by label and may contain holes.\n\n    in.setPosition(arc.posArcsStart());\n    in.skipBytes(1);\n    int firstLabel = fst.readLabel(in);\n    int arcOffset = targetLabel - firstLabel;\n    if (arcOffset >= arc.numArcs()) {\n      // target is beyond the last arc\n      fst.readArcAtPosition(arc, in, arc.posArcsStart() - (arc.numArcs() - 1) * arc.bytesPerArc());\n      assert arc.isLast();\n      // Dead end (target is after the last arc);\n      // rollback to last fork then push\n      upto--;\n      while(true) {\n        if (upto == 0) {\n          return null;\n        }\n        final FST.Arc<T> prevArc = getArc(upto);\n        //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n        if (!prevArc.isLast()) {\n          fst.readNextArc(prevArc, fstReader);\n          pushFirst();\n          return null;\n        }\n        upto--;\n      }\n    } else {\n      // TODO: if firstLabel == targetLabel\n      long pos;\n      if (arcOffset >= 0) {\n        pos = arc.posArcsStart() - (arc.bytesPerArc() * arcOffset);\n      } else {\n        pos = arc.posArcsStart();\n      }\n      fst.readArcAtPosition(arc, in, pos);\n      if (arc.label() == targetLabel) {\n        // found -- copy pasta from below\n        output[upto] = fst.outputs.add(output[upto-1], arc.output());\n        if (targetLabel == FST.END_LABEL) {\n          return null;\n        }\n        setCurrentLabel(arc.label());\n        incr();\n        return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n      }\n      // not found, return the next highest\n      assert arc.label() > targetLabel;\n      pushFirst();\n      return null;\n    }\n  }\n\n","sourceOld":"  private FST.Arc<T> doSeekCeilArrayWithGaps(final FST.Arc<T> arc, final int targetLabel, final FST.BytesReader in) throws IOException {\n    // The array is addressed directly by label and may contain holes.\n\n    in.setPosition(arc.posArcsStart());\n    in.skipBytes(1);\n    int firstLabel = fst.readLabel(in);\n    int arcOffset = targetLabel - firstLabel;\n    if (arcOffset >= arc.numArcs()) {\n      // target is beyond the last arc\n      arc.nextArc(arc.posArcsStart() - (arc.numArcs() - 1) * arc.bytesPerArc());\n      fst.readNextRealArc(arc, in);\n      assert arc.isLast();\n      // Dead end (target is after the last arc);\n      // rollback to last fork then push\n      upto--;\n      while(true) {\n        if (upto == 0) {\n          return null;\n        }\n        final FST.Arc<T> prevArc = getArc(upto);\n        //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n        if (!prevArc.isLast()) {\n          fst.readNextArc(prevArc, fstReader);\n          pushFirst();\n          return null;\n        }\n        upto--;\n      }\n    } else {\n      // TODO: if firstLabel == targetLabel\n      if (arcOffset >= 0) {\n        arc.nextArc(arc.posArcsStart() - (arc.bytesPerArc() * arcOffset));\n      } else {\n        arc.nextArc(arc.posArcsStart());\n      }\n      fst.readNextRealArc(arc, in);\n      if (arc.label() == targetLabel) {\n        // found -- copy pasta from below\n        output[upto] = fst.outputs.add(output[upto-1], arc.output());\n        if (targetLabel == FST.END_LABEL) {\n          return null;\n        }\n        setCurrentLabel(arc.label());\n        incr();\n        return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n      }\n      // not found, return the next highest\n      assert arc.label() > targetLabel;\n      pushFirst();\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeilArrayWithGaps(FST.Arc[T],int,FST.BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeilArrayWithGaps(FST.Arc[T],int,FST.BytesReader).mjava","sourceNew":"  private FST.Arc<T> doSeekCeilArrayWithGaps(final FST.Arc<T> arc, final int targetLabel, final FST.BytesReader in) throws IOException {\n    // The array is addressed directly by label and may contain holes.\n\n    in.setPosition(arc.posArcsStart());\n    in.skipBytes(1);\n    int firstLabel = fst.readLabel(in);\n    int arcOffset = targetLabel - firstLabel;\n    if (arcOffset >= arc.numArcs()) {\n      // target is beyond the last arc\n      fst.readArcAtPosition(arc, in, arc.posArcsStart() - (arc.numArcs() - 1) * arc.bytesPerArc());\n      assert arc.isLast();\n      // Dead end (target is after the last arc);\n      // rollback to last fork then push\n      upto--;\n      while(true) {\n        if (upto == 0) {\n          return null;\n        }\n        final FST.Arc<T> prevArc = getArc(upto);\n        //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n        if (!prevArc.isLast()) {\n          fst.readNextArc(prevArc, fstReader);\n          pushFirst();\n          return null;\n        }\n        upto--;\n      }\n    } else {\n      // TODO: if firstLabel == targetLabel\n      long pos;\n      if (arcOffset >= 0) {\n        pos = arc.posArcsStart() - (arc.bytesPerArc() * arcOffset);\n      } else {\n        pos = arc.posArcsStart();\n      }\n      fst.readArcAtPosition(arc, in, pos);\n      if (arc.label() == targetLabel) {\n        // found -- copy pasta from below\n        output[upto] = fst.outputs.add(output[upto-1], arc.output());\n        if (targetLabel == FST.END_LABEL) {\n          return null;\n        }\n        setCurrentLabel(arc.label());\n        incr();\n        return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n      }\n      // not found, return the next highest\n      assert arc.label() > targetLabel;\n      pushFirst();\n      return null;\n    }\n  }\n\n","sourceOld":"  private FST.Arc<T> doSeekCeilArrayWithGaps(final FST.Arc<T> arc, final int targetLabel, final FST.BytesReader in) throws IOException {\n    // The array is addressed directly by label and may contain holes.\n\n    in.setPosition(arc.posArcsStart);\n    in.skipBytes(1);\n    int firstLabel = fst.readLabel(in);\n    int arcOffset = targetLabel - firstLabel;\n    if (arcOffset >= arc.numArcs) {\n      // target is beyond the last arc\n      arc.nextArc = arc.posArcsStart - (arc.numArcs - 1) * arc.bytesPerArc;\n      fst.readNextRealArc(arc, in);\n      assert arc.isLast();\n      // Dead end (target is after the last arc);\n      // rollback to last fork then push\n      upto--;\n      while(true) {\n        if (upto == 0) {\n          return null;\n        }\n        final FST.Arc<T> prevArc = getArc(upto);\n        //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n        if (!prevArc.isLast()) {\n          fst.readNextArc(prevArc, fstReader);\n          pushFirst();\n          return null;\n        }\n        upto--;\n      }\n    } else {\n      // TODO: if firstLabel == targetLabel\n      if (arcOffset >= 0) {\n        arc.nextArc = arc.posArcsStart - (arc.bytesPerArc * arcOffset);\n      } else {\n        arc.nextArc = arc.posArcsStart;\n      }\n      fst.readNextRealArc(arc, in);\n      if (arc.label == targetLabel) {\n        // found -- copy pasta from below\n        output[upto] = fst.outputs.add(output[upto-1], arc.output);\n        if (targetLabel == FST.END_LABEL) {\n          return null;\n        }\n        setCurrentLabel(arc.label);\n        incr();\n        return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n      }\n      // not found, return the next highest\n      assert arc.label > targetLabel;\n      pushFirst();\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":5,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeilArrayDirectAddressing(FST.Arc[T],int,FST.BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeilArrayWithGaps(FST.Arc[T],int,FST.BytesReader).mjava","sourceNew":"  private FST.Arc<T> doSeekCeilArrayDirectAddressing(final FST.Arc<T> arc, final int targetLabel, final FST.BytesReader in) throws IOException {\n    // The array is addressed directly by label, with presence bits to compute the actual arc offset.\n\n    int targetIndex = targetLabel - arc.firstLabel();\n    if (targetIndex >= arc.numArcs()) {\n      // Target is beyond the last arc, out of label range.\n      // Dead end (target is after the last arc);\n      // rollback to last fork then push\n      upto--;\n      while(true) {\n        if (upto == 0) {\n          return null;\n        }\n        final FST.Arc<T> prevArc = getArc(upto);\n        //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n        if (!prevArc.isLast()) {\n          fst.readNextArc(prevArc, fstReader);\n          pushFirst();\n          return null;\n        }\n        upto--;\n      }\n    } else {\n      if (targetIndex < 0) {\n        targetIndex = -1;\n      } else if (arc.bitTable().isBitSet(targetIndex)) {\n        fst.readArcByDirectAddressing(arc, in, targetIndex);\n        assert arc.label() == targetLabel;\n        // found -- copy pasta from below\n        output[upto] = fst.outputs.add(output[upto - 1], arc.output());\n        if (targetLabel == FST.END_LABEL) {\n          return null;\n        }\n        setCurrentLabel(arc.label());\n        incr();\n        return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n      }\n      // Not found, return the next arc (ceil).\n      int ceilIndex = arc.bitTable().nextBitSet(targetIndex);\n      assert ceilIndex != -1;\n      fst.readArcByDirectAddressing(arc, in, ceilIndex);\n      assert arc.label() > targetLabel;\n      pushFirst();\n      return null;\n    }\n  }\n\n","sourceOld":"  private FST.Arc<T> doSeekCeilArrayWithGaps(final FST.Arc<T> arc, final int targetLabel, final FST.BytesReader in) throws IOException {\n    // The array is addressed directly by label and may contain holes.\n\n    in.setPosition(arc.posArcsStart());\n    in.skipBytes(1);\n    int firstLabel = fst.readLabel(in);\n    int arcOffset = targetLabel - firstLabel;\n    if (arcOffset >= arc.numArcs()) {\n      // target is beyond the last arc\n      fst.readArcAtPosition(arc, in, arc.posArcsStart() - (arc.numArcs() - 1) * arc.bytesPerArc());\n      assert arc.isLast();\n      // Dead end (target is after the last arc);\n      // rollback to last fork then push\n      upto--;\n      while(true) {\n        if (upto == 0) {\n          return null;\n        }\n        final FST.Arc<T> prevArc = getArc(upto);\n        //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n        if (!prevArc.isLast()) {\n          fst.readNextArc(prevArc, fstReader);\n          pushFirst();\n          return null;\n        }\n        upto--;\n      }\n    } else {\n      // TODO: if firstLabel == targetLabel\n      long pos;\n      if (arcOffset >= 0) {\n        pos = arc.posArcsStart() - (arc.bytesPerArc() * arcOffset);\n      } else {\n        pos = arc.posArcsStart();\n      }\n      fst.readArcAtPosition(arc, in, pos);\n      if (arc.label() == targetLabel) {\n        // found -- copy pasta from below\n        output[upto] = fst.outputs.add(output[upto-1], arc.output());\n        if (targetLabel == FST.END_LABEL) {\n          return null;\n        }\n        setCurrentLabel(arc.label());\n        incr();\n        return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n      }\n      // not found, return the next highest\n      assert arc.label() > targetLabel;\n      pushFirst();\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244":["54204c8a3ca26aeafd273139fc29baf70d0f6786"],"71d31a7d5773508492505519bb5230b87c8937ad":["f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["ae67e1f82a53594208ca929f382ee861dad3d7a8","f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71d31a7d5773508492505519bb5230b87c8937ad"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244":["71d31a7d5773508492505519bb5230b87c8937ad","f8061ddd97f3352007d927dae445884a6f3d857b"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["54204c8a3ca26aeafd273139fc29baf70d0f6786","f8061ddd97f3352007d927dae445884a6f3d857b"],"71d31a7d5773508492505519bb5230b87c8937ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}