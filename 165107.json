{"path":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#DocIdSetBuilder(int,int,long).mjava","commits":[{"id":"c9ee4c03e3ee986704eeeb45c571d001905a6430","date":1462194267,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#DocIdSetBuilder(int,int,long).mjava","pathOld":"/dev/null","sourceNew":"  DocIdSetBuilder(int maxDoc, int docCount, long valueCount) {\n    this.maxDoc = maxDoc;\n    this.multivalued = docCount < 0 || docCount != valueCount;\n    this.numValuesPerDoc = (docCount < 0 || valueCount < 0)\n        // assume one value per doc, this means the cost will be overestimated\n        // if the docs are actually multi-valued\n        ? 1\n        // otherwise compute from index stats\n        : (double) valueCount / docCount;\n    assert numValuesPerDoc >= 1;\n\n    // For ridiculously small sets, we'll just use a sorted int[]\n    // maxDoc >>> 7 is a good value if you want to save memory, lower values\n    // such as maxDoc >>> 11 should provide faster building but at the expense\n    // of using a full bitset even for quite sparse data\n    this.threshold = maxDoc >>> 7;\n\n    this.buffer = new int[0];\n    this.bufferSize = 0;\n    this.bitSet = null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4712e1dd28a08464b73ed7aa20bd00a1bb5d7abe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30540ec27130887a9372c159e8fe971200f37727","date":1462223109,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#DocIdSetBuilder(int,int,long).mjava","pathOld":"/dev/null","sourceNew":"  DocIdSetBuilder(int maxDoc, int docCount, long valueCount) {\n    this.maxDoc = maxDoc;\n    this.multivalued = docCount < 0 || docCount != valueCount;\n    this.numValuesPerDoc = (docCount < 0 || valueCount < 0)\n        // assume one value per doc, this means the cost will be overestimated\n        // if the docs are actually multi-valued\n        ? 1\n        // otherwise compute from index stats\n        : (double) valueCount / docCount;\n    assert numValuesPerDoc >= 1;\n\n    // For ridiculously small sets, we'll just use a sorted int[]\n    // maxDoc >>> 7 is a good value if you want to save memory, lower values\n    // such as maxDoc >>> 11 should provide faster building but at the expense\n    // of using a full bitset even for quite sparse data\n    this.threshold = maxDoc >>> 7;\n\n    this.buffer = new int[0];\n    this.bufferSize = 0;\n    this.bitSet = null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4712e1dd28a08464b73ed7aa20bd00a1bb5d7abe","date":1462275071,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#DocIdSetBuilder(int,int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#DocIdSetBuilder(int,int,long).mjava","sourceNew":"  DocIdSetBuilder(int maxDoc, int docCount, long valueCount) {\n    this.maxDoc = maxDoc;\n    this.multivalued = docCount < 0 || docCount != valueCount;\n    if (docCount <= 0 || valueCount < 0) {\n      // assume one value per doc, this means the cost will be overestimated\n      // if the docs are actually multi-valued\n      this.numValuesPerDoc = 1;\n    } else {\n      // otherwise compute from index stats\n      this.numValuesPerDoc = (double) valueCount / docCount;\n    }\n\n    assert numValuesPerDoc >= 1: \"valueCount=\" + valueCount + \" docCount=\" + docCount;\n\n    // For ridiculously small sets, we'll just use a sorted int[]\n    // maxDoc >>> 7 is a good value if you want to save memory, lower values\n    // such as maxDoc >>> 11 should provide faster building but at the expense\n    // of using a full bitset even for quite sparse data\n    this.threshold = maxDoc >>> 7;\n\n    this.buffer = new int[0];\n    this.bufferSize = 0;\n    this.bitSet = null;\n  }\n\n","sourceOld":"  DocIdSetBuilder(int maxDoc, int docCount, long valueCount) {\n    this.maxDoc = maxDoc;\n    this.multivalued = docCount < 0 || docCount != valueCount;\n    this.numValuesPerDoc = (docCount < 0 || valueCount < 0)\n        // assume one value per doc, this means the cost will be overestimated\n        // if the docs are actually multi-valued\n        ? 1\n        // otherwise compute from index stats\n        : (double) valueCount / docCount;\n    assert numValuesPerDoc >= 1;\n\n    // For ridiculously small sets, we'll just use a sorted int[]\n    // maxDoc >>> 7 is a good value if you want to save memory, lower values\n    // such as maxDoc >>> 11 should provide faster building but at the expense\n    // of using a full bitset even for quite sparse data\n    this.threshold = maxDoc >>> 7;\n\n    this.buffer = new int[0];\n    this.bufferSize = 0;\n    this.bitSet = null;\n  }\n\n","bugFix":["c9ee4c03e3ee986704eeeb45c571d001905a6430"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#DocIdSetBuilder(int,int,long).mjava","pathOld":"/dev/null","sourceNew":"  DocIdSetBuilder(int maxDoc, int docCount, long valueCount) {\n    this.maxDoc = maxDoc;\n    this.multivalued = docCount < 0 || docCount != valueCount;\n    if (docCount <= 0 || valueCount < 0) {\n      // assume one value per doc, this means the cost will be overestimated\n      // if the docs are actually multi-valued\n      this.numValuesPerDoc = 1;\n    } else {\n      // otherwise compute from index stats\n      this.numValuesPerDoc = (double) valueCount / docCount;\n    }\n\n    assert numValuesPerDoc >= 1: \"valueCount=\" + valueCount + \" docCount=\" + docCount;\n\n    // For ridiculously small sets, we'll just use a sorted int[]\n    // maxDoc >>> 7 is a good value if you want to save memory, lower values\n    // such as maxDoc >>> 11 should provide faster building but at the expense\n    // of using a full bitset even for quite sparse data\n    this.threshold = maxDoc >>> 7;\n\n    this.buffer = new int[0];\n    this.bufferSize = 0;\n    this.bitSet = null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cb92b52940b86bd2ad151ecc61b2f5e83af1a5e","date":1463988431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#DocIdSetBuilder(int,int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#DocIdSetBuilder(int,int,long).mjava","sourceNew":"  DocIdSetBuilder(int maxDoc, int docCount, long valueCount) {\n    this.maxDoc = maxDoc;\n    this.multivalued = docCount < 0 || docCount != valueCount;\n    if (docCount <= 0 || valueCount < 0) {\n      // assume one value per doc, this means the cost will be overestimated\n      // if the docs are actually multi-valued\n      this.numValuesPerDoc = 1;\n    } else {\n      // otherwise compute from index stats\n      this.numValuesPerDoc = (double) valueCount / docCount;\n    }\n\n    assert numValuesPerDoc >= 1: \"valueCount=\" + valueCount + \" docCount=\" + docCount;\n\n    // For ridiculously small sets, we'll just use a sorted int[]\n    // maxDoc >>> 7 is a good value if you want to save memory, lower values\n    // such as maxDoc >>> 11 should provide faster building but at the expense\n    // of using a full bitset even for quite sparse data\n    this.threshold = maxDoc >>> 7;\n\n    this.bitSet = null;\n  }\n\n","sourceOld":"  DocIdSetBuilder(int maxDoc, int docCount, long valueCount) {\n    this.maxDoc = maxDoc;\n    this.multivalued = docCount < 0 || docCount != valueCount;\n    if (docCount <= 0 || valueCount < 0) {\n      // assume one value per doc, this means the cost will be overestimated\n      // if the docs are actually multi-valued\n      this.numValuesPerDoc = 1;\n    } else {\n      // otherwise compute from index stats\n      this.numValuesPerDoc = (double) valueCount / docCount;\n    }\n\n    assert numValuesPerDoc >= 1: \"valueCount=\" + valueCount + \" docCount=\" + docCount;\n\n    // For ridiculously small sets, we'll just use a sorted int[]\n    // maxDoc >>> 7 is a good value if you want to save memory, lower values\n    // such as maxDoc >>> 11 should provide faster building but at the expense\n    // of using a full bitset even for quite sparse data\n    this.threshold = maxDoc >>> 7;\n\n    this.buffer = new int[0];\n    this.bufferSize = 0;\n    this.bitSet = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5","date":1464066565,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#DocIdSetBuilder(int,int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#DocIdSetBuilder(int,int,long).mjava","sourceNew":"  DocIdSetBuilder(int maxDoc, int docCount, long valueCount) {\n    this.maxDoc = maxDoc;\n    this.multivalued = docCount < 0 || docCount != valueCount;\n    if (docCount <= 0 || valueCount < 0) {\n      // assume one value per doc, this means the cost will be overestimated\n      // if the docs are actually multi-valued\n      this.numValuesPerDoc = 1;\n    } else {\n      // otherwise compute from index stats\n      this.numValuesPerDoc = (double) valueCount / docCount;\n    }\n\n    assert numValuesPerDoc >= 1: \"valueCount=\" + valueCount + \" docCount=\" + docCount;\n\n    // For ridiculously small sets, we'll just use a sorted int[]\n    // maxDoc >>> 7 is a good value if you want to save memory, lower values\n    // such as maxDoc >>> 11 should provide faster building but at the expense\n    // of using a full bitset even for quite sparse data\n    this.threshold = maxDoc >>> 7;\n\n    this.bitSet = null;\n  }\n\n","sourceOld":"  DocIdSetBuilder(int maxDoc, int docCount, long valueCount) {\n    this.maxDoc = maxDoc;\n    this.multivalued = docCount < 0 || docCount != valueCount;\n    if (docCount <= 0 || valueCount < 0) {\n      // assume one value per doc, this means the cost will be overestimated\n      // if the docs are actually multi-valued\n      this.numValuesPerDoc = 1;\n    } else {\n      // otherwise compute from index stats\n      this.numValuesPerDoc = (double) valueCount / docCount;\n    }\n\n    assert numValuesPerDoc >= 1: \"valueCount=\" + valueCount + \" docCount=\" + docCount;\n\n    // For ridiculously small sets, we'll just use a sorted int[]\n    // maxDoc >>> 7 is a good value if you want to save memory, lower values\n    // such as maxDoc >>> 11 should provide faster building but at the expense\n    // of using a full bitset even for quite sparse data\n    this.threshold = maxDoc >>> 7;\n\n    this.buffer = new int[0];\n    this.bufferSize = 0;\n    this.bitSet = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#DocIdSetBuilder(int,int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#DocIdSetBuilder(int,int,long).mjava","sourceNew":"  DocIdSetBuilder(int maxDoc, int docCount, long valueCount) {\n    this.maxDoc = maxDoc;\n    this.multivalued = docCount < 0 || docCount != valueCount;\n    if (docCount <= 0 || valueCount < 0) {\n      // assume one value per doc, this means the cost will be overestimated\n      // if the docs are actually multi-valued\n      this.numValuesPerDoc = 1;\n    } else {\n      // otherwise compute from index stats\n      this.numValuesPerDoc = (double) valueCount / docCount;\n    }\n\n    assert numValuesPerDoc >= 1: \"valueCount=\" + valueCount + \" docCount=\" + docCount;\n\n    // For ridiculously small sets, we'll just use a sorted int[]\n    // maxDoc >>> 7 is a good value if you want to save memory, lower values\n    // such as maxDoc >>> 11 should provide faster building but at the expense\n    // of using a full bitset even for quite sparse data\n    this.threshold = maxDoc >>> 7;\n\n    this.bitSet = null;\n  }\n\n","sourceOld":"  DocIdSetBuilder(int maxDoc, int docCount, long valueCount) {\n    this.maxDoc = maxDoc;\n    this.multivalued = docCount < 0 || docCount != valueCount;\n    if (docCount <= 0 || valueCount < 0) {\n      // assume one value per doc, this means the cost will be overestimated\n      // if the docs are actually multi-valued\n      this.numValuesPerDoc = 1;\n    } else {\n      // otherwise compute from index stats\n      this.numValuesPerDoc = (double) valueCount / docCount;\n    }\n\n    assert numValuesPerDoc >= 1: \"valueCount=\" + valueCount + \" docCount=\" + docCount;\n\n    // For ridiculously small sets, we'll just use a sorted int[]\n    // maxDoc >>> 7 is a good value if you want to save memory, lower values\n    // such as maxDoc >>> 11 should provide faster building but at the expense\n    // of using a full bitset even for quite sparse data\n    this.threshold = maxDoc >>> 7;\n\n    this.buffer = new int[0];\n    this.bufferSize = 0;\n    this.bitSet = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9cb92b52940b86bd2ad151ecc61b2f5e83af1a5e":["4712e1dd28a08464b73ed7aa20bd00a1bb5d7abe"],"c9ee4c03e3ee986704eeeb45c571d001905a6430":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4712e1dd28a08464b73ed7aa20bd00a1bb5d7abe":["30540ec27130887a9372c159e8fe971200f37727"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30540ec27130887a9372c159e8fe971200f37727":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c9ee4c03e3ee986704eeeb45c571d001905a6430"],"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5":["4712e1dd28a08464b73ed7aa20bd00a1bb5d7abe","9cb92b52940b86bd2ad151ecc61b2f5e83af1a5e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["55b50463286869f584cf849d1587a0fcd54d1dfa","e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4712e1dd28a08464b73ed7aa20bd00a1bb5d7abe"]},"commit2Childs":{"9cb92b52940b86bd2ad151ecc61b2f5e83af1a5e":["e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"c9ee4c03e3ee986704eeeb45c571d001905a6430":["30540ec27130887a9372c159e8fe971200f37727"],"4712e1dd28a08464b73ed7aa20bd00a1bb5d7abe":["9cb92b52940b86bd2ad151ecc61b2f5e83af1a5e","e616cfbf284ecbd0f40b4b9e4196daa27e92abd5","55b50463286869f584cf849d1587a0fcd54d1dfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9ee4c03e3ee986704eeeb45c571d001905a6430","30540ec27130887a9372c159e8fe971200f37727","55b50463286869f584cf849d1587a0fcd54d1dfa"],"30540ec27130887a9372c159e8fe971200f37727":["4712e1dd28a08464b73ed7aa20bd00a1bb5d7abe"],"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}