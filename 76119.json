{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertPostingListExists(String,String,IndexReader).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertPostingListExists(String,String,IndexReader).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertPostingListExists(String,String,IndexReader).mjava","sourceNew":"  private void assertPostingListExists(String field, String text, IndexReader ir) throws IOException {\n    DocsEnum de = _TestUtil.docs(random(), ir, field, new BytesRef(text), null, null, false);\n    assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","sourceOld":"  private void assertPostingListExists(String field, String text, IndexReader ir) throws IOException {\n    DocsEnum de = _TestUtil.docs(random(), ir, field, new BytesRef(text), null, null, false);\n    assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertPostingListExists(String,String,IndexReader).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertPostingListExists(String,String,IndexReader).mjava","sourceNew":"  private void assertPostingListExists(String field, String text, IndexReader ir) throws IOException {\n    DocsEnum de = _TestUtil.docs(random(), ir, field, new BytesRef(text), null, null, 0);\n    assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","sourceOld":"  private void assertPostingListExists(String field, String text, IndexReader ir) throws IOException {\n    DocsEnum de = _TestUtil.docs(random(), ir, field, new BytesRef(text), null, null, false);\n    assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertPostingListExists(String,String,IndexReader).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertPostingListExists(String,String,IndexReader).mjava","sourceNew":"  private void assertPostingListExists(String field, String text, IndexReader ir) throws IOException {\n    DocsEnum de = _TestUtil.docs(random(), ir, field, new BytesRef(text), null, null, 0);\n    assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","sourceOld":"  private void assertPostingListExists(String field, String text, IndexReader ir) throws IOException {\n    DocsEnum de = _TestUtil.docs(random(), ir, field, new BytesRef(text), null, null, false);\n    assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertPostingListExists(String,String,IndexReader).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertPostingListExists(String,String,IndexReader).mjava","sourceNew":"  private void assertPostingListExists(String field, String text, IndexReader ir) throws IOException {\n    DocsEnum de = _TestUtil.docs(random(), ir, field, new BytesRef(text), null, null, 0);\n    assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","sourceOld":"  private void assertPostingListExists(String field, String text, IndexReader ir) throws IOException {\n    DocsEnum de = _TestUtil.docs(random(), ir, field, new BytesRef(text), null, null, false);\n    assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15250ca94ba8ab3bcdd476daf6bf3f3febb92640","date":1355200097,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertPostingListExists(String,String,IndexReader).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertPostingListExists(String,String,IndexReader).mjava","sourceNew":"  private void assertPostingListExists(String field, String text, IndexReader ir) throws IOException {\n    DocsEnum de = _TestUtil.docs(random(), ir, field, new BytesRef(text), null, null, DocsEnum.FLAG_NONE);\n    assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","sourceOld":"  private void assertPostingListExists(String field, String text, IndexReader ir) throws IOException {\n    DocsEnum de = _TestUtil.docs(random(), ir, field, new BytesRef(text), null, null, 0);\n    assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertPostingListExists(String,String,IndexReader).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertPostingListExists(String,String,IndexReader).mjava","sourceNew":"  private void assertPostingListExists(String field, String text, IndexReader ir) throws IOException {\n    DocsEnum de = _TestUtil.docs(random(), ir, field, new BytesRef(text), null, null, DocsEnum.FLAG_NONE);\n    assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","sourceOld":"  private void assertPostingListExists(String field, String text, IndexReader ir) throws IOException {\n    DocsEnum de = _TestUtil.docs(random(), ir, field, new BytesRef(text), null, null, 0);\n    assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertPostingListExists(String,String,IndexReader).mjava","sourceNew":null,"sourceOld":"  private void assertPostingListExists(String field, String text, IndexReader ir) throws IOException {\n    DocsEnum de = _TestUtil.docs(random(), ir, field, new BytesRef(text), null, null, DocsEnum.FLAG_NONE);\n    assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertPostingListExists(String,String,IndexReader).mjava","sourceNew":null,"sourceOld":"  private void assertPostingListExists(String field, String text, IndexReader ir) throws IOException {\n    DocsEnum de = _TestUtil.docs(random(), ir, field, new BytesRef(text), null, null, DocsEnum.FLAG_NONE);\n    assertTrue(de.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["02331260bb246364779cb6f04919ca47900d01bb","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["02331260bb246364779cb6f04919ca47900d01bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","02331260bb246364779cb6f04919ca47900d01bb"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"02331260bb246364779cb6f04919ca47900d01bb":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"02331260bb246364779cb6f04919ca47900d01bb":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","15250ca94ba8ab3bcdd476daf6bf3f3febb92640","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}