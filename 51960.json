{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDistributions().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDistributions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDistributions().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testDistributions() throws Exception {\n    String cexpr = \"let(a=normalDistribution(10, 2), \" +\n                       \"b=sample(a, 250), \" +\n                       \"c=normalDistribution(100, 6), \" +\n                       \"d=sample(c, 250), \" +\n                       \"u=uniformDistribution(1, 6),\"+\n                       \"t=sample(u, 250),\"+\n                       \"e=empiricalDistribution(d),\"+\n                       \"f=sample(e, 250),\"+\n                       \"tuple(sample=b, ks=ks(a,b), ks2=ks(a, d), ks3=ks(u, t)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    try {\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n\n    } catch(AssertionError e) {\n\n      //This test will have random failures do to the random sampling. So if it fails try it again.\n      //If it fails twice in a row, we probably broke some code.\n\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testDistributions() throws Exception {\n    String cexpr = \"let(a=normalDistribution(10, 2), \" +\n                       \"b=sample(a, 250), \" +\n                       \"c=normalDistribution(100, 6), \" +\n                       \"d=sample(c, 250), \" +\n                       \"u=uniformDistribution(1, 6),\"+\n                       \"t=sample(u, 250),\"+\n                       \"e=empiricalDistribution(d),\"+\n                       \"f=sample(e, 250),\"+\n                       \"tuple(sample=b, ks=ks(a,b), ks2=ks(a, d), ks3=ks(u, t)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    try {\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n\n    } catch(AssertionError e) {\n\n      //This test will have random failures do to the random sampling. So if it fails try it again.\n      //If it fails twice in a row, we probably broke some code.\n\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1c374690db69470f6aa4bffc43dcacf1f4e3e49","date":1529007399,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDistributions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDistributions().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testDistributions() throws Exception {\n    String cexpr = \"let(a=normalDistribution(10, 2), \" +\n                       \"b=sample(a, 250), \" +\n                       \"c=normalDistribution(100, 6), \" +\n                       \"d=sample(c, 250), \" +\n                       \"u=uniformDistribution(1, 6),\"+\n                       \"t=sample(u, 250),\"+\n                       \"e=empiricalDistribution(d),\"+\n                       \"f=sample(e, 250),\"+\n                       \"tuple(sample=b, ks=ks(a,b), ks2=ks(a, d), ks3=ks(u, t)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    try {\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n\n    } catch(AssertionError e) {\n\n      //This test will have random failures do to the random sampling. So if it fails try it again.\n      //If it fails twice in a row, we probably broke some code.\n\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testDistributions() throws Exception {\n    String cexpr = \"let(a=normalDistribution(10, 2), \" +\n                       \"b=sample(a, 250), \" +\n                       \"c=normalDistribution(100, 6), \" +\n                       \"d=sample(c, 250), \" +\n                       \"u=uniformDistribution(1, 6),\"+\n                       \"t=sample(u, 250),\"+\n                       \"e=empiricalDistribution(d),\"+\n                       \"f=sample(e, 250),\"+\n                       \"tuple(sample=b, ks=ks(a,b), ks2=ks(a, d), ks3=ks(u, t)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    try {\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n\n    } catch(AssertionError e) {\n\n      //This test will have random failures do to the random sampling. So if it fails try it again.\n      //If it fails twice in a row, we probably broke some code.\n\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDistributions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDistributions().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testDistributions() throws Exception {\n    String cexpr = \"let(a=normalDistribution(10, 2), \" +\n                       \"b=sample(a, 250), \" +\n                       \"c=normalDistribution(100, 6), \" +\n                       \"d=sample(c, 250), \" +\n                       \"u=uniformDistribution(1, 6),\"+\n                       \"t=sample(u, 250),\"+\n                       \"e=empiricalDistribution(d),\"+\n                       \"f=sample(e, 250),\"+\n                       \"tuple(sample=b, ks=ks(a,b), ks2=ks(a, d), ks3=ks(u, t)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    try {\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n\n    } catch(AssertionError e) {\n\n      //This test will have random failures do to the random sampling. So if it fails try it again.\n      //If it fails twice in a row, we probably broke some code.\n\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testDistributions() throws Exception {\n    String cexpr = \"let(a=normalDistribution(10, 2), \" +\n                       \"b=sample(a, 250), \" +\n                       \"c=normalDistribution(100, 6), \" +\n                       \"d=sample(c, 250), \" +\n                       \"u=uniformDistribution(1, 6),\"+\n                       \"t=sample(u, 250),\"+\n                       \"e=empiricalDistribution(d),\"+\n                       \"f=sample(e, 250),\"+\n                       \"tuple(sample=b, ks=ks(a,b), ks2=ks(a, d), ks3=ks(u, t)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    try {\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n\n    } catch(AssertionError e) {\n\n      //This test will have random failures do to the random sampling. So if it fails try it again.\n      //If it fails twice in a row, we probably broke some code.\n\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDistributions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDistributions().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testDistributions() throws Exception {\n    String cexpr = \"let(a=normalDistribution(10, 2), \" +\n                       \"b=sample(a, 250), \" +\n                       \"c=normalDistribution(100, 6), \" +\n                       \"d=sample(c, 250), \" +\n                       \"u=uniformDistribution(1, 6),\"+\n                       \"t=sample(u, 250),\"+\n                       \"e=empiricalDistribution(d),\"+\n                       \"f=sample(e, 250),\"+\n                       \"tuple(sample=b, ks=ks(a,b), ks2=ks(a, d), ks3=ks(u, t)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    try {\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n\n    } catch(AssertionError e) {\n\n      //This test will have random failures do to the random sampling. So if it fails try it again.\n      //If it fails twice in a row, we probably broke some code.\n\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testDistributions() throws Exception {\n    String cexpr = \"let(a=normalDistribution(10, 2), \" +\n                       \"b=sample(a, 250), \" +\n                       \"c=normalDistribution(100, 6), \" +\n                       \"d=sample(c, 250), \" +\n                       \"u=uniformDistribution(1, 6),\"+\n                       \"t=sample(u, 250),\"+\n                       \"e=empiricalDistribution(d),\"+\n                       \"f=sample(e, 250),\"+\n                       \"tuple(sample=b, ks=ks(a,b), ks2=ks(a, d), ks3=ks(u, t)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    try {\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n\n    } catch(AssertionError e) {\n\n      //This test will have random failures do to the random sampling. So if it fails try it again.\n      //If it fails twice in a row, we probably broke some code.\n\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15600ceffc7023bfa1f532afbf1854e7f8c4e6d3","date":1532119025,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDistributions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDistributions().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void testDistributions() throws Exception {\n    String cexpr = \"let(a=normalDistribution(10, 2), \" +\n                       \"b=sample(a, 250), \" +\n                       \"c=normalDistribution(100, 6), \" +\n                       \"d=sample(c, 250), \" +\n                       \"u=uniformDistribution(1, 6),\"+\n                       \"t=sample(u, 250),\"+\n                       \"e=empiricalDistribution(d),\"+\n                       \"f=sample(e, 250),\"+\n                       \"tuple(sample=b, ks=ks(a,b), ks2=ks(a, d), ks3=ks(u, t)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    try {\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n\n    } catch(AssertionError e) {\n\n      //This test will have random failures do to the random sampling. So if it fails try it again.\n      //If it fails twice in a row, we probably broke some code.\n\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n    }\n  }\n\n","sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testDistributions() throws Exception {\n    String cexpr = \"let(a=normalDistribution(10, 2), \" +\n                       \"b=sample(a, 250), \" +\n                       \"c=normalDistribution(100, 6), \" +\n                       \"d=sample(c, 250), \" +\n                       \"u=uniformDistribution(1, 6),\"+\n                       \"t=sample(u, 250),\"+\n                       \"e=empiricalDistribution(d),\"+\n                       \"f=sample(e, 250),\"+\n                       \"tuple(sample=b, ks=ks(a,b), ks2=ks(a, d), ks3=ks(u, t)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    try {\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n\n    } catch(AssertionError e) {\n\n      //This test will have random failures do to the random sampling. So if it fails try it again.\n      //If it fails twice in a row, we probably broke some code.\n\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDistributions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDistributions().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void testDistributions() throws Exception {\n    String cexpr = \"let(a=normalDistribution(10, 2), \" +\n                       \"b=sample(a, 250), \" +\n                       \"c=normalDistribution(100, 6), \" +\n                       \"d=sample(c, 250), \" +\n                       \"u=uniformDistribution(1, 6),\"+\n                       \"t=sample(u, 250),\"+\n                       \"e=empiricalDistribution(d),\"+\n                       \"f=sample(e, 250),\"+\n                       \"tuple(sample=b, ks=ks(a,b), ks2=ks(a, d), ks3=ks(u, t)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    try {\n      sampleTest(paramsLoc, url);\n    } catch(AssertionError e) {\n      //This test will have random failures do to the random sampling. So if it fails try it again.\n      try {\n        sampleTest(paramsLoc, url);\n      } catch(AssertionError e2) {\n        try {\n          sampleTest(paramsLoc, url);\n        } catch(AssertionError e3) {\n          //If it fails a lot in a row, we probably broke some code. (TODO: bad test)\n          sampleTest(paramsLoc, url);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void testDistributions() throws Exception {\n    String cexpr = \"let(a=normalDistribution(10, 2), \" +\n                       \"b=sample(a, 250), \" +\n                       \"c=normalDistribution(100, 6), \" +\n                       \"d=sample(c, 250), \" +\n                       \"u=uniformDistribution(1, 6),\"+\n                       \"t=sample(u, 250),\"+\n                       \"e=empiricalDistribution(d),\"+\n                       \"f=sample(e, 250),\"+\n                       \"tuple(sample=b, ks=ks(a,b), ks2=ks(a, d), ks3=ks(u, t)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    try {\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n\n    } catch(AssertionError e) {\n\n      //This test will have random failures do to the random sampling. So if it fails try it again.\n      //If it fails twice in a row, we probably broke some code.\n\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n    }\n  }\n\n","bugFix":["40f06aec8ac912d126c71c7e9d6065ed70aa9c65"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDistributions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDistributions().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void testDistributions() throws Exception {\n    String cexpr = \"let(a=normalDistribution(10, 2), \" +\n                       \"b=sample(a, 250), \" +\n                       \"c=normalDistribution(100, 6), \" +\n                       \"d=sample(c, 250), \" +\n                       \"u=uniformDistribution(1, 6),\"+\n                       \"t=sample(u, 250),\"+\n                       \"e=empiricalDistribution(d),\"+\n                       \"f=sample(e, 250),\"+\n                       \"tuple(sample=b, ks=ks(a,b), ks2=ks(a, d), ks3=ks(u, t)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    try {\n      sampleTest(paramsLoc, url);\n    } catch(AssertionError e) {\n      //This test will have random failures do to the random sampling. So if it fails try it again.\n      try {\n        sampleTest(paramsLoc, url);\n      } catch(AssertionError e2) {\n        try {\n          sampleTest(paramsLoc, url);\n        } catch(AssertionError e3) {\n          //If it fails a lot in a row, we probably broke some code. (TODO: bad test)\n          sampleTest(paramsLoc, url);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void testDistributions() throws Exception {\n    String cexpr = \"let(a=normalDistribution(10, 2), \" +\n                       \"b=sample(a, 250), \" +\n                       \"c=normalDistribution(100, 6), \" +\n                       \"d=sample(c, 250), \" +\n                       \"u=uniformDistribution(1, 6),\"+\n                       \"t=sample(u, 250),\"+\n                       \"e=empiricalDistribution(d),\"+\n                       \"f=sample(e, 250),\"+\n                       \"tuple(sample=b, ks=ks(a,b), ks2=ks(a, d), ks3=ks(u, t)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    try {\n      sampleTest(paramsLoc, url);\n    } catch(AssertionError e) {\n      //This test will have random failures do to the random sampling. So if it fails try it again.\n      try {\n        sampleTest(paramsLoc, url);\n      } catch(AssertionError e2) {\n        try {\n          sampleTest(paramsLoc, url);\n        } catch(AssertionError e3) {\n          //If it fails a lot in a row, we probably broke some code. (TODO: bad test)\n          sampleTest(paramsLoc, url);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["15600ceffc7023bfa1f532afbf1854e7f8c4e6d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"15600ceffc7023bfa1f532afbf1854e7f8c4e6d3":["a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"15600ceffc7023bfa1f532afbf1854e7f8c4e6d3":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a1c374690db69470f6aa4bffc43dcacf1f4e3e49","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","15600ceffc7023bfa1f532afbf1854e7f8c4e6d3","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8d35c84fdef07284c122012ca4000d3b7285a66e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}