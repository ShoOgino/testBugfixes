{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MemsetEvaluator#MemsetEvaluator(StreamExpression,StreamFactory).mjava","commits":[{"id":"0e70d554d88e3aea4d497d35dc15dbb191a5d2bc","date":1524237108,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MemsetEvaluator#MemsetEvaluator(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public MemsetEvaluator(StreamExpression expression, StreamFactory factory) throws IOException {\n    super(expression, factory);\n\n    /*\n    * Instantiate and validate all the parameters\n    */\n\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter colsExpression = factory.getNamedOperand(expression, \"cols\");\n    StreamExpressionNamedParameter varsExpression = factory.getNamedOperand(expression, \"vars\");\n    StreamExpressionNamedParameter sizeExpression = factory.getNamedOperand(expression, \"size\");\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    if(null == colsExpression || !(colsExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'cols' parameter listing fields to sort over but didn't find one\",expression));\n    }\n\n    if(null == varsExpression || !(varsExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'vars' parameter listing fields to sort over but didn't find one\",expression));\n    }\n\n    if(null != sizeExpression) {\n      StreamExpressionValue sizeExpressionValue = (StreamExpressionValue)sizeExpression.getParameter();\n      String sizeString = sizeExpressionValue.getValue();\n      size = Integer.parseInt(sizeString);\n    }\n\n    in = factory.constructStream(streamExpressions.get(0));\n\n    StreamExpressionValue colsExpressionValue = (StreamExpressionValue)colsExpression.getParameter();\n    StreamExpressionValue varsExpressionValue = (StreamExpressionValue)varsExpression.getParameter();\n    String colsString = colsExpressionValue.getValue();\n    String varsString = varsExpressionValue.getValue();\n\n    vars = varsString.split(\",\");\n    cols = colsString.split(\",\");\n\n    if(cols.length != vars.length) {\n      throw new IOException(\"The cols and vars lists must be the same size\");\n    }\n\n    for(int i=0; i<cols.length; i++) {\n      cols[i]  = cols[i].trim();\n      vars[i]  = vars[i].trim();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0e70d554d88e3aea4d497d35dc15dbb191a5d2bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e70d554d88e3aea4d497d35dc15dbb191a5d2bc"]},"commit2Childs":{"0e70d554d88e3aea4d497d35dc15dbb191a5d2bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0e70d554d88e3aea4d497d35dc15dbb191a5d2bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}