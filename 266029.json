{"path":"solr/core/src/java/org/apache/solr/schema/FieldType#getRewriteMethod(QParser,SchemaField).mjava","commits":[{"id":"ffced88b5e83e2ec0a42723404a647e766d96b8c","date":1361398349,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getRewriteMethod(QParser,SchemaField).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Returns the rewrite method for multiterm queries such as wildcards.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @return A suitable rewrite method for rewriting multi-term queries to primitive queries.\n   */\n  public MultiTermQuery.RewriteMethod getRewriteMethod(QParser parser, SchemaField field) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return new FieldCacheRewriteMethod();\n    } else {\n      return MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3","date":1361894345,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getRewriteMethod(QParser,SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getRewriteMethod(QParser,SchemaField).mjava","sourceNew":"  /**\n   * Expert: Returns the rewrite method for multiterm queries such as wildcards.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @return A suitable rewrite method for rewriting multi-term queries to primitive queries.\n   */\n  public MultiTermQuery.RewriteMethod getRewriteMethod(QParser parser, SchemaField field) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return field.multiValued() ? new DocTermOrdsRewriteMethod() : new FieldCacheRewriteMethod();\n    } else {\n      return MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT;\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Returns the rewrite method for multiterm queries such as wildcards.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @return A suitable rewrite method for rewriting multi-term queries to primitive queries.\n   */\n  public MultiTermQuery.RewriteMethod getRewriteMethod(QParser parser, SchemaField field) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return new FieldCacheRewriteMethod();\n    } else {\n      return MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT;\n    }\n  }\n\n","bugFix":null,"bugIntro":["9274621789ce990dbfef455dabdf026bb3184821"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getRewriteMethod(QParser,SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getRewriteMethod(QParser,SchemaField).mjava","sourceNew":"  /**\n   * Expert: Returns the rewrite method for multiterm queries such as wildcards.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @return A suitable rewrite method for rewriting multi-term queries to primitive queries.\n   */\n  public MultiTermQuery.RewriteMethod getRewriteMethod(QParser parser, SchemaField field) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return field.multiValued() ? new DocTermOrdsRewriteMethod() : new DocValuesRewriteMethod();\n    } else {\n      return MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT;\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Returns the rewrite method for multiterm queries such as wildcards.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @return A suitable rewrite method for rewriting multi-term queries to primitive queries.\n   */\n  public MultiTermQuery.RewriteMethod getRewriteMethod(QParser parser, SchemaField field) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return field.multiValued() ? new DocTermOrdsRewriteMethod() : new FieldCacheRewriteMethod();\n    } else {\n      return MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT;\n    }\n  }\n\n","bugFix":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getRewriteMethod(QParser,SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getRewriteMethod(QParser,SchemaField).mjava","sourceNew":"  /**\n   * Expert: Returns the rewrite method for multiterm queries such as wildcards.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @return A suitable rewrite method for rewriting multi-term queries to primitive queries.\n   */\n  public MultiTermQuery.RewriteMethod getRewriteMethod(QParser parser, SchemaField field) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return field.multiValued() ? new DocTermOrdsRewriteMethod() : new DocValuesRewriteMethod();\n    } else {\n      return MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT;\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Returns the rewrite method for multiterm queries such as wildcards.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @return A suitable rewrite method for rewriting multi-term queries to primitive queries.\n   */\n  public MultiTermQuery.RewriteMethod getRewriteMethod(QParser parser, SchemaField field) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return field.multiValued() ? new DocTermOrdsRewriteMethod() : new FieldCacheRewriteMethod();\n    } else {\n      return MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getRewriteMethod(QParser,SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getRewriteMethod(QParser,SchemaField).mjava","sourceNew":"  /**\n   * Expert: Returns the rewrite method for multiterm queries such as wildcards.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @return A suitable rewrite method for rewriting multi-term queries to primitive queries.\n   */\n  public MultiTermQuery.RewriteMethod getRewriteMethod(QParser parser, SchemaField field) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return field.multiValued() ? new DocTermOrdsRewriteMethod() : new DocValuesRewriteMethod();\n    } else {\n      return MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT;\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Returns the rewrite method for multiterm queries such as wildcards.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @return A suitable rewrite method for rewriting multi-term queries to primitive queries.\n   */\n  public MultiTermQuery.RewriteMethod getRewriteMethod(QParser parser, SchemaField field) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return field.multiValued() ? new DocTermOrdsRewriteMethod() : new FieldCacheRewriteMethod();\n    } else {\n      return MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","date":1412077943,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getRewriteMethod(QParser,SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getRewriteMethod(QParser,SchemaField).mjava","sourceNew":"  /**\n   * Expert: Returns the rewrite method for multiterm queries such as wildcards.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @return A suitable rewrite method for rewriting multi-term queries to primitive queries.\n   */\n  public MultiTermQuery.RewriteMethod getRewriteMethod(QParser parser, SchemaField field) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return field.multiValued() ? new DocTermOrdsRewriteMethod() : new DocValuesRewriteMethod();\n    } else {\n      return MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE;\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Returns the rewrite method for multiterm queries such as wildcards.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @return A suitable rewrite method for rewriting multi-term queries to primitive queries.\n   */\n  public MultiTermQuery.RewriteMethod getRewriteMethod(QParser parser, SchemaField field) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return field.multiValued() ? new DocTermOrdsRewriteMethod() : new DocValuesRewriteMethod();\n    } else {\n      return MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getRewriteMethod(QParser,SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getRewriteMethod(QParser,SchemaField).mjava","sourceNew":"  /**\n   * Expert: Returns the rewrite method for multiterm queries such as wildcards.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @return A suitable rewrite method for rewriting multi-term queries to primitive queries.\n   */\n  public MultiTermQuery.RewriteMethod getRewriteMethod(QParser parser, SchemaField field) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return field.multiValued() ? new DocTermOrdsRewriteMethod() : new DocValuesRewriteMethod();\n    } else {\n      return MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE;\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Returns the rewrite method for multiterm queries such as wildcards.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @return A suitable rewrite method for rewriting multi-term queries to primitive queries.\n   */\n  public MultiTermQuery.RewriteMethod getRewriteMethod(QParser parser, SchemaField field) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return field.multiValued() ? new DocTermOrdsRewriteMethod() : new DocValuesRewriteMethod();\n    } else {\n      return MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getRewriteMethod(QParser,SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getRewriteMethod(QParser,SchemaField).mjava","sourceNew":"  /**\n   * Expert: Returns the rewrite method for multiterm queries such as wildcards.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @return A suitable rewrite method for rewriting multi-term queries to primitive queries.\n   */\n  public MultiTermQuery.RewriteMethod getRewriteMethod(QParser parser, SchemaField field) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return new DocValuesRewriteMethod();\n    } else {\n      return MultiTermQuery.CONSTANT_SCORE_REWRITE;\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Returns the rewrite method for multiterm queries such as wildcards.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @return A suitable rewrite method for rewriting multi-term queries to primitive queries.\n   */\n  public MultiTermQuery.RewriteMethod getRewriteMethod(QParser parser, SchemaField field) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return field.multiValued() ? new DocTermOrdsRewriteMethod() : new DocValuesRewriteMethod();\n    } else {\n      return MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getRewriteMethod(QParser,SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getRewriteMethod(QParser,SchemaField).mjava","sourceNew":"  /**\n   * Expert: Returns the rewrite method for multiterm queries such as wildcards.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @return A suitable rewrite method for rewriting multi-term queries to primitive queries.\n   */\n  public MultiTermQuery.RewriteMethod getRewriteMethod(QParser parser, SchemaField field) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return new DocValuesRewriteMethod();\n    } else {\n      return MultiTermQuery.CONSTANT_SCORE_REWRITE;\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Returns the rewrite method for multiterm queries such as wildcards.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @return A suitable rewrite method for rewriting multi-term queries to primitive queries.\n   */\n  public MultiTermQuery.RewriteMethod getRewriteMethod(QParser parser, SchemaField field) {\n    if (!field.indexed() && field.hasDocValues()) {\n      return field.multiValued() ? new DocTermOrdsRewriteMethod() : new DocValuesRewriteMethod();\n    } else {\n      return MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3":["ffced88b5e83e2ec0a42723404a647e766d96b8c"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","2713584a660051cd646423be682771e3bbd99985"],"9274621789ce990dbfef455dabdf026bb3184821":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3"],"2713584a660051cd646423be682771e3bbd99985":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3","9274621789ce990dbfef455dabdf026bb3184821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["93dd449115a9247533e44bab47e8429e5dccbc6d","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"ffced88b5e83e2ec0a42723404a647e766d96b8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"56572ec06f1407c066d6b7399413178b33176cd8":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3","93dd449115a9247533e44bab47e8429e5dccbc6d"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2713584a660051cd646423be682771e3bbd99985"]},"commit2Childs":{"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3":["9274621789ce990dbfef455dabdf026bb3184821","93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"9274621789ce990dbfef455dabdf026bb3184821":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"2713584a660051cd646423be682771e3bbd99985":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["d9a47902d6207303f5ed3e7aaca62ca33433af66","56572ec06f1407c066d6b7399413178b33176cd8","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ffced88b5e83e2ec0a42723404a647e766d96b8c"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"ffced88b5e83e2ec0a42723404a647e766d96b8c":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d9a47902d6207303f5ed3e7aaca62ca33433af66","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}