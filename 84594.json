{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#setFromSerialized(CharSequence,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#setFromSerialized(CharSequence,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#setFromSerialized(CharSequence,int).mjava","sourceNew":"  /**\n   * Set a CategoryPath from a character-sequence representation written by\n   * {@link #serializeAppendTo(Appendable)}.\n   * <P>\n   * Reading starts at the given offset into the given character sequence, and\n   * the offset right after the end of this path is returned.\n   */\n  public int setFromSerialized(CharSequence buffer, int offset) {\n    ncomponents = (short) buffer.charAt(offset++);\n    if (ncomponents == 0) {\n      return offset;\n    }\n\n    if (ncomponents >= ends.length) {\n      ends = new short[Math.max(ends.length * 2, ncomponents)];\n    }\n    for (int i = 0; i < ncomponents; i++) {\n      ends[i] = (short) buffer.charAt(offset++);\n    }\n\n    int usedchars = ends[ncomponents - 1];\n    if (usedchars > chars.length) {\n      chars = new char[Math.max(chars.length * 2, usedchars)];\n    }\n    for (int i = 0; i < usedchars; i++) {\n      chars[i] = buffer.charAt(offset++);\n    }\n\n    return offset;\n  }\n\n","sourceOld":"  /**\n   * Set a CategoryPath from a character-sequence representation written by\n   * {@link #serializeAppendTo(Appendable)}.\n   * <P>\n   * Reading starts at the given offset into the given character sequence, and\n   * the offset right after the end of this path is returned.\n   */\n  public int setFromSerialized(CharSequence buffer, int offset) {\n    ncomponents = (short) buffer.charAt(offset++);\n    if (ncomponents == 0) {\n      return offset;\n    }\n\n    if (ncomponents >= ends.length) {\n      ends = new short[Math.max(ends.length * 2, ncomponents)];\n    }\n    for (int i = 0; i < ncomponents; i++) {\n      ends[i] = (short) buffer.charAt(offset++);\n    }\n\n    int usedchars = ends[ncomponents - 1];\n    if (usedchars > chars.length) {\n      chars = new char[Math.max(chars.length * 2, usedchars)];\n    }\n    for (int i = 0; i < usedchars; i++) {\n      chars[i] = buffer.charAt(offset++);\n    }\n\n    return offset;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#setFromSerialized(CharSequence,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Set a CategoryPath from a character-sequence representation written by\n   * {@link #serializeAppendTo(Appendable)}.\n   * <P>\n   * Reading starts at the given offset into the given character sequence, and\n   * the offset right after the end of this path is returned.\n   */\n  public int setFromSerialized(CharSequence buffer, int offset) {\n    ncomponents = (short) buffer.charAt(offset++);\n    if (ncomponents == 0) {\n      return offset;\n    }\n\n    if (ncomponents >= ends.length) {\n      ends = new short[Math.max(ends.length * 2, ncomponents)];\n    }\n    for (int i = 0; i < ncomponents; i++) {\n      ends[i] = (short) buffer.charAt(offset++);\n    }\n\n    int usedchars = ends[ncomponents - 1];\n    if (usedchars > chars.length) {\n      chars = new char[Math.max(chars.length * 2, usedchars)];\n    }\n    for (int i = 0; i < usedchars; i++) {\n      chars[i] = buffer.charAt(offset++);\n    }\n\n    return offset;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#setFromSerialized(CharSequence,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Set a CategoryPath from a character-sequence representation written by\n   * {@link #serializeAppendTo(Appendable)}.\n   * <P>\n   * Reading starts at the given offset into the given character sequence, and\n   * the offset right after the end of this path is returned.\n   */\n  public int setFromSerialized(CharSequence buffer, int offset) {\n    ncomponents = (short) buffer.charAt(offset++);\n    if (ncomponents == 0) {\n      return offset;\n    }\n\n    if (ncomponents >= ends.length) {\n      ends = new short[Math.max(ends.length * 2, ncomponents)];\n    }\n    for (int i = 0; i < ncomponents; i++) {\n      ends[i] = (short) buffer.charAt(offset++);\n    }\n\n    int usedchars = ends[ncomponents - 1];\n    if (usedchars > chars.length) {\n      chars = new char[Math.max(chars.length * 2, usedchars)];\n    }\n    for (int i = 0; i < usedchars; i++) {\n      chars[i] = buffer.charAt(offset++);\n    }\n\n    return offset;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}