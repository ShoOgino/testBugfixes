{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDecimalDigitFilter#testRandomSequences().mjava","commits":[{"id":"aae05b52a79e8b9df9f7ea8b383820f98d2fed7e","date":1476779931,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDecimalDigitFilter#testRandomSequences().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * test sequences of digits mixed with other random simple string data\n   */\n  public void testRandomSequences() throws Exception {\n    \n    // test numIters random strings containing a sequence of numDigits codepoints\n    final int numIters = atLeast(5);\n    for (int iter = 0; iter < numIters; iter++) {\n      final int numDigits = atLeast(20);\n      final StringBuilder expected = new StringBuilder();\n      final StringBuilder actual = new StringBuilder();\n      for (int digitCounter = 0; digitCounter < numDigits; digitCounter++) {\n        \n        // increased odds of 0 length random string prefix\n        final String prefix = random().nextBoolean() ? \"\" : TestUtil.randomSimpleString(random());\n        expected.append(prefix);\n        actual.append(prefix);\n        \n        int codepoint = getRandomDecimalDigit(random());\n\n        int value = Character.getNumericValue(codepoint);\n        assert value >= 0 && value <= 9;\n        expected.append(Integer.toString(value));\n        actual.appendCodePoint(codepoint);\n      }\n      // occasional suffix, increased odds of 0 length random string\n      final String suffix = random().nextBoolean() ? \"\" : TestUtil.randomSimpleString(random());\n      expected.append(suffix);\n      actual.append(suffix);\n      \n      checkOneTerm(keyword, actual.toString(), expected.toString());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDecimalDigitFilter#testRandomSequences().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * test sequences of digits mixed with other random simple string data\n   */\n  public void testRandomSequences() throws Exception {\n    \n    // test numIters random strings containing a sequence of numDigits codepoints\n    final int numIters = atLeast(5);\n    for (int iter = 0; iter < numIters; iter++) {\n      final int numDigits = atLeast(20);\n      final StringBuilder expected = new StringBuilder();\n      final StringBuilder actual = new StringBuilder();\n      for (int digitCounter = 0; digitCounter < numDigits; digitCounter++) {\n        \n        // increased odds of 0 length random string prefix\n        final String prefix = random().nextBoolean() ? \"\" : TestUtil.randomSimpleString(random());\n        expected.append(prefix);\n        actual.append(prefix);\n        \n        int codepoint = getRandomDecimalDigit(random());\n\n        int value = Character.getNumericValue(codepoint);\n        assert value >= 0 && value <= 9;\n        expected.append(Integer.toString(value));\n        actual.appendCodePoint(codepoint);\n      }\n      // occasional suffix, increased odds of 0 length random string\n      final String suffix = random().nextBoolean() ? \"\" : TestUtil.randomSimpleString(random());\n      expected.append(suffix);\n      actual.append(suffix);\n      \n      checkOneTerm(keyword, actual.toString(), expected.toString());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aae05b52a79e8b9df9f7ea8b383820f98d2fed7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","aae05b52a79e8b9df9f7ea8b383820f98d2fed7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aae05b52a79e8b9df9f7ea8b383820f98d2fed7e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aae05b52a79e8b9df9f7ea8b383820f98d2fed7e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"aae05b52a79e8b9df9f7ea8b383820f98d2fed7e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}