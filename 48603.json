{"path":"src/java/org/apache/solr/handler/component/FieldFacetStats#accumulateTermNum(int,Double).mjava","commits":[{"id":"861fa37cce2d9d3f8978bbb767e87a91d41ed4a8","date":1252682465,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/FieldFacetStats#accumulateTermNum(int,Double).mjava","pathOld":"/dev/null","sourceNew":"  //function to accumulate counts for statsTermNum to specified value\n  public boolean accumulateTermNum(int statsTermNum, Double value) {\n    if (value == null) return false;\n    for (Map.Entry<String, Integer> stringIntegerEntry : facetStatsTerms.get(statsTermNum).entrySet()) {\n      Map.Entry pairs = (Map.Entry) stringIntegerEntry;\n      String key = (String) pairs.getKey();\n      StatsValues facetStats = facetStatsValues.get(key);\n      if (facetStats == null) {\n        facetStats = new StatsValues();\n        facetStatsValues.put(key, facetStats);\n      }\n      Integer count = (Integer) pairs.getValue();\n      if (count != null) {\n        facetStats.accumulate(value, count);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/FieldFacetStats#accumulateTermNum(int,Double).mjava","pathOld":"src/java/org/apache/solr/handler/component/FieldFacetStats#accumulateTermNum(int,Double).mjava","sourceNew":"  //function to accumulate counts for statsTermNum to specified value\n  public boolean accumulateTermNum(int statsTermNum, Double value) {\n    if (value == null) return false;\n    for (Map.Entry<String, Integer> stringIntegerEntry : facetStatsTerms.get(statsTermNum).entrySet()) {\n      Map.Entry pairs = (Map.Entry) stringIntegerEntry;\n      String key = (String) pairs.getKey();\n      StatsValues facetStats = facetStatsValues.get(key);\n      if (facetStats == null) {\n        facetStats = new StatsValues();\n        facetStatsValues.put(key, facetStats);\n      }\n      Integer count = (Integer) pairs.getValue();\n      if (count != null) {\n        facetStats.accumulate(value, count);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  //function to accumulate counts for statsTermNum to specified value\n  public boolean accumulateTermNum(int statsTermNum, Double value) {\n    if (value == null) return false;\n    for (Map.Entry<String, Integer> stringIntegerEntry : facetStatsTerms.get(statsTermNum).entrySet()) {\n      Map.Entry pairs = (Map.Entry) stringIntegerEntry;\n      String key = (String) pairs.getKey();\n      StatsValues facetStats = facetStatsValues.get(key);\n      if (facetStats == null) {\n        facetStats = new StatsValues();\n        facetStatsValues.put(key, facetStats);\n      }\n      Integer count = (Integer) pairs.getValue();\n      if (count != null) {\n        facetStats.accumulate(value, count);\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["861fa37cce2d9d3f8978bbb767e87a91d41ed4a8"],"861fa37cce2d9d3f8978bbb767e87a91d41ed4a8":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["861fa37cce2d9d3f8978bbb767e87a91d41ed4a8"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"861fa37cce2d9d3f8978bbb767e87a91d41ed4a8":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}