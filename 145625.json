{"path":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#fetchHoleBridge(Node,Node).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#fetchHoleBridge(Node,Node).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#fetchHoleBridge(Node,Node).mjava","sourceNew":"  /**\n   * David Eberly's algorithm for finding a bridge between a hole and outer polygon\n   *\n   * see: http://www.geometrictools.com/Documentation/TriangulationByEarClipping.pdf\n   **/\n  private static final Node fetchHoleBridge(final Node holeNode, final Node outerNode) {\n    Node p = outerNode;\n    double qx = Double.NEGATIVE_INFINITY;\n    final double hx = holeNode.getX();\n    final double hy = holeNode.getY();\n    Node connection = null;\n    // 1. find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    {\n      do {\n        if (hy <= p.getY() && hy >= p.next.getY() && p.next.getY() != p.getY()) {\n          final double x = p.getX() + (hy - p.getY()) * (p.next.getX() - p.getX()) / (p.next.getY() - p.getY());\n          if (x <= hx && x > qx) {\n            qx = x;\n            if (x == hx) {\n              if (hy == p.getY()) return p;\n              if (hy == p.next.getY()) return p.next;\n            }\n            connection = p.getX() < p.next.getX() ? p : p.next;\n          }\n        }\n        p = p.next;\n      } while (p != outerNode);\n    }\n\n    if (connection == null) {\n      return null;\n    } else if (hx == qx) {\n      return connection.previous;\n    }\n\n    // 2. look for points inside the triangle of hole point, segment intersection, and endpoint\n    // its a valid connection iff there are no points found;\n    // otherwise choose the point of the minimum angle with the ray as the connection point\n    Node stop = connection;\n    final double mx = connection.getX();\n    final double my = connection.getY();\n    double tanMin = Double.POSITIVE_INFINITY;\n    double tan;\n    p = connection.next;\n    {\n      while (p != stop) {\n        if (hx >= p.getX() && p.getX() >= mx && hx != p.getX()\n            && pointInEar(p.getX(), p.getY(), hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy)) {\n          tan = Math.abs(hy - p.getY()) / (hx - p.getX()); // tangential\n          if ((tan < tanMin || (tan == tanMin && p.getX() > connection.getX())) && isLocallyInside(p, holeNode)) {\n            connection = p;\n            tanMin = tan;\n          }\n        }\n        p = p.next;\n      }\n    }\n    return connection;\n  }\n\n","sourceOld":"  /**\n   * David Eberly's algorithm for finding a bridge between a hole and outer polygon\n   *\n   * see: http://www.geometrictools.com/Documentation/TriangulationByEarClipping.pdf\n   **/\n  private static final Node fetchHoleBridge(final Node holeNode, final Node outerNode) {\n    Node p = outerNode;\n    double qx = Double.NEGATIVE_INFINITY;\n    final double hx = holeNode.getX();\n    final double hy = holeNode.getY();\n    Node connection = null;\n    // 1. find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    {\n      do {\n        if (hy <= p.getY() && hy >= p.next.getY() && p.next.getY() != p.getY()) {\n          final double x = p.getX() + (hy - p.getY()) * (p.next.getX() - p.getX()) / (p.next.getY() - p.getY());\n          if (x <= hx && x > qx) {\n            qx = x;\n            if (x == hx) {\n              if (hy == p.getY()) return p;\n              if (hy == p.next.getY()) return p.next;\n            }\n            connection = p.getX() < p.next.getX() ? p : p.next;\n          }\n        }\n        p = p.next;\n      } while (p != outerNode);\n    }\n\n    if (connection == null) {\n      return null;\n    } else if (hx == qx) {\n      return connection.previous;\n    }\n\n    // 2. look for points inside the triangle of hole point, segment intersection, and endpoint\n    // its a valid connection iff there are no points found;\n    // otherwise choose the point of the minimum angle with the ray as the connection point\n    Node stop = connection;\n    final double mx = connection.getX();\n    final double my = connection.getY();\n    double tanMin = Double.POSITIVE_INFINITY;\n    double tan;\n    p = connection.next;\n    {\n      while (p != stop) {\n        if (hx >= p.getX() && p.getX() >= mx && hx != p.getX()\n            && pointInEar(p.getX(), p.getY(), hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy)) {\n          tan = Math.abs(hy - p.getY()) / (hx - p.getX()); // tangential\n          if ((tan < tanMin || (tan == tanMin && p.getX() > connection.getX())) && isLocallyInside(p, holeNode)) {\n            connection = p;\n            tanMin = tan;\n          }\n        }\n        p = p.next;\n      }\n    }\n    return connection;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"910682c5a877c2616b4b204e2da5c5daddb3ce31","date":1593445581,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#fetchHoleBridge(Node,Node).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#fetchHoleBridge(Node,Node).mjava","sourceNew":"  /**\n   * David Eberly's algorithm for finding a bridge between a hole and outer polygon\n   *\n   * see: http://www.geometrictools.com/Documentation/TriangulationByEarClipping.pdf\n   **/\n  private static final Node fetchHoleBridge(final Node holeNode, final Node outerNode) {\n    Node p = outerNode;\n    double qx = Double.NEGATIVE_INFINITY;\n    final double hx = holeNode.getX();\n    final double hy = holeNode.getY();\n    Node connection = null;\n    // 1. find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    {\n      do {\n        if (hy <= p.getY() && hy >= p.next.getY() && p.next.getY() != p.getY()) {\n          final double x = p.getX() + (hy - p.getY()) * (p.next.getX() - p.getX()) / (p.next.getY() - p.getY());\n          if (x <= hx && x > qx) {\n            qx = x;\n            if (x == hx) {\n              if (hy == p.getY()) return p;\n              if (hy == p.next.getY()) return p.next;\n            }\n            connection = p.getX() < p.next.getX() ? p : p.next;\n          }\n        }\n        p = p.next;\n      } while (p != outerNode);\n    }\n\n    if (connection == null) {\n      return null;\n    } else if (hx == qx) {\n      return connection.previous;\n    }\n\n    // 2. look for points inside the triangle of hole point, segment intersection, and endpoint\n    // its a valid connection iff there are no points found;\n    // otherwise choose the point of the minimum angle with the ray as the connection point\n    Node stop = connection;\n    final double mx = connection.getX();\n    final double my = connection.getY();\n    double tanMin = Double.POSITIVE_INFINITY;\n    double tan;\n    p = connection.next;\n    {\n      while (p != stop) {\n        if (hx >= p.getX() && p.getX() >= mx && hx != p.getX()\n            && pointInEar(p.getX(), p.getY(), hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy)) {\n          tan = Math.abs(hy - p.getY()) / (hx - p.getX()); // tangential\n          if (isVertexEquals(p, connection) && isLocallyInside(p, holeNode)) {\n            // make sure we are not crossing the polygon. This might happen when several holes have a bridge to the same polygon vertex\n            // and this vertex has different vertex.\n            boolean crosses = GeoUtils.lineCrossesLine(p.getX(), p.getY(), holeNode.getX(), holeNode.getY(),\n                connection.next.getX(), connection.next.getY(), connection.previous.getX(), connection.previous.getY());\n            if (crosses == false) {\n              connection = p;\n              tanMin = tan;\n            }\n          } else if ((tan < tanMin || (tan == tanMin && p.getX() > connection.getX())) && isLocallyInside(p, holeNode)) {\n            connection = p;\n            tanMin = tan;\n          }\n        }\n        p = p.next;\n      }\n    }\n    return connection;\n  }\n\n","sourceOld":"  /**\n   * David Eberly's algorithm for finding a bridge between a hole and outer polygon\n   *\n   * see: http://www.geometrictools.com/Documentation/TriangulationByEarClipping.pdf\n   **/\n  private static final Node fetchHoleBridge(final Node holeNode, final Node outerNode) {\n    Node p = outerNode;\n    double qx = Double.NEGATIVE_INFINITY;\n    final double hx = holeNode.getX();\n    final double hy = holeNode.getY();\n    Node connection = null;\n    // 1. find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    {\n      do {\n        if (hy <= p.getY() && hy >= p.next.getY() && p.next.getY() != p.getY()) {\n          final double x = p.getX() + (hy - p.getY()) * (p.next.getX() - p.getX()) / (p.next.getY() - p.getY());\n          if (x <= hx && x > qx) {\n            qx = x;\n            if (x == hx) {\n              if (hy == p.getY()) return p;\n              if (hy == p.next.getY()) return p.next;\n            }\n            connection = p.getX() < p.next.getX() ? p : p.next;\n          }\n        }\n        p = p.next;\n      } while (p != outerNode);\n    }\n\n    if (connection == null) {\n      return null;\n    } else if (hx == qx) {\n      return connection.previous;\n    }\n\n    // 2. look for points inside the triangle of hole point, segment intersection, and endpoint\n    // its a valid connection iff there are no points found;\n    // otherwise choose the point of the minimum angle with the ray as the connection point\n    Node stop = connection;\n    final double mx = connection.getX();\n    final double my = connection.getY();\n    double tanMin = Double.POSITIVE_INFINITY;\n    double tan;\n    p = connection.next;\n    {\n      while (p != stop) {\n        if (hx >= p.getX() && p.getX() >= mx && hx != p.getX()\n            && pointInEar(p.getX(), p.getY(), hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy)) {\n          tan = Math.abs(hy - p.getY()) / (hx - p.getX()); // tangential\n          if ((tan < tanMin || (tan == tanMin && p.getX() > connection.getX())) && isLocallyInside(p, holeNode)) {\n            connection = p;\n            tanMin = tan;\n          }\n        }\n        p = p.next;\n      }\n    }\n    return connection;\n  }\n\n","bugFix":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"910682c5a877c2616b4b204e2da5c5daddb3ce31":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["910682c5a877c2616b4b204e2da5c5daddb3ce31"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["910682c5a877c2616b4b204e2da5c5daddb3ce31"],"910682c5a877c2616b4b204e2da5c5daddb3ce31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}