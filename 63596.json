{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#assertFiltersTo(TokenFilter,String[],int[],int[],int[]).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#assertFiltersTo(TokenFilter,String[],int[],int[],int[]).mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#assertFiltersTo(TokenFilter,String[],int[],int[],int[]).mjava","sourceNew":"  private void assertFiltersTo(TokenFilter tf, String[] s, int[] startOffset,\n      int[] endOffset, int[] posIncr) throws Exception {\n    final Token reusableToken = new Token();\n    for (int i = 0; i < s.length; ++i) {\n      Token nextToken = tf.next(reusableToken);\n      assertNotNull(nextToken);\n      assertEquals(s[i], nextToken.term());\n      assertEquals(startOffset[i], nextToken.startOffset());\n      assertEquals(endOffset[i], nextToken.endOffset());\n      assertEquals(posIncr[i], nextToken.getPositionIncrement());\n    }\n    assertNull(tf.next(reusableToken));\n  }\n\n","sourceOld":"  private void assertFiltersTo(TokenFilter tf, String[] s, int[] startOffset,\n      int[] endOffset, int[] posIncr) throws Exception {\n    final Token reusableToken = new Token();\n    for (int i = 0; i < s.length; ++i) {\n      Token nextToken = tf.next(reusableToken);\n      assertNotNull(nextToken);\n      assertEquals(s[i], nextToken.term());\n      assertEquals(startOffset[i], nextToken.startOffset());\n      assertEquals(endOffset[i], nextToken.endOffset());\n      assertEquals(posIncr[i], nextToken.getPositionIncrement());\n    }\n    assertNull(tf.next(reusableToken));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#assertFiltersTo(TokenFilter,String[],int[],int[],int[]).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#assertFiltersTo(TokenFilter,String[],int[],int[],int[]).mjava","sourceNew":"  private void assertFiltersTo(TokenFilter tf, String[] s, int[] startOffset,\n      int[] endOffset, int[] posIncr) throws Exception {\n    TermAttribute termAtt = (TermAttribute) tf.getAttribute(TermAttribute.class);\n    OffsetAttribute offsetAtt = (OffsetAttribute) tf.getAttribute(OffsetAttribute.class);\n    PositionIncrementAttribute posIncAtt = (PositionIncrementAttribute) tf.getAttribute(PositionIncrementAttribute.class);\n    \n    for (int i = 0; i < s.length; ++i) {\n      assertTrue(tf.incrementToken());\n      assertEquals(s[i], termAtt.term());\n      assertEquals(startOffset[i], offsetAtt.startOffset());\n      assertEquals(endOffset[i], offsetAtt.endOffset());\n      assertEquals(posIncr[i], posIncAtt.getPositionIncrement());\n    }\n    assertFalse(tf.incrementToken());\n  }\n\n","sourceOld":"  private void assertFiltersTo(TokenFilter tf, String[] s, int[] startOffset,\n      int[] endOffset, int[] posIncr) throws Exception {\n    final Token reusableToken = new Token();\n    for (int i = 0; i < s.length; ++i) {\n      Token nextToken = tf.next(reusableToken);\n      assertNotNull(nextToken);\n      assertEquals(s[i], nextToken.term());\n      assertEquals(startOffset[i], nextToken.startOffset());\n      assertEquals(endOffset[i], nextToken.endOffset());\n      assertEquals(posIncr[i], nextToken.getPositionIncrement());\n    }\n    assertNull(tf.next(reusableToken));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc","date":1251117853,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#assertFiltersTo(TokenFilter,String[],int[],int[],int[]).mjava","sourceNew":null,"sourceOld":"  private void assertFiltersTo(TokenFilter tf, String[] s, int[] startOffset,\n      int[] endOffset, int[] posIncr) throws Exception {\n    TermAttribute termAtt = (TermAttribute) tf.getAttribute(TermAttribute.class);\n    OffsetAttribute offsetAtt = (OffsetAttribute) tf.getAttribute(OffsetAttribute.class);\n    PositionIncrementAttribute posIncAtt = (PositionIncrementAttribute) tf.getAttribute(PositionIncrementAttribute.class);\n    \n    for (int i = 0; i < s.length; ++i) {\n      assertTrue(tf.incrementToken());\n      assertEquals(s[i], termAtt.term());\n      assertEquals(startOffset[i], offsetAtt.startOffset());\n      assertEquals(endOffset[i], offsetAtt.endOffset());\n      assertEquals(posIncr[i], posIncAtt.getPositionIncrement());\n    }\n    assertFalse(tf.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}