{"path":"src/test/org/apache/lucene/queryParser/TestQueryParser#testPositionIncrement().mjava","commits":[{"id":"693d6573b6621fc1265316fc6b042c24235c81d8","date":1199049557,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testPositionIncrement().mjava","pathOld":"/dev/null","sourceNew":"  public void testPositionIncrement() throws Exception {\n    boolean dflt = StopFilter.getEnablePositionIncrementsDefault();\n    StopFilter.setEnablePositionIncrementsDefault(true);\n    try {\n      QueryParser qp = new QueryParser(\"a\", new StopAnalyzer(new String[]{\"the\", \"in\", \"are\", \"this\"}));\n      qp.setEnablePositionIncrements(true);\n      String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n      //               0         2                      5           7  8\n      int expectedPositions[] = {1,3,4,6,9};\n      PhraseQuery pq = (PhraseQuery) qp.parse(qtxt);\n      //System.out.println(\"Query text: \"+qtxt);\n      //System.out.println(\"Result: \"+pq);\n      Term t[] = pq.getTerms();\n      int pos[] = pq.getPositions();\n      for (int i = 0; i < t.length; i++) {\n        //System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n        assertEquals(\"term \"+i+\" = \"+t[i]+\" has wrong term-position!\",expectedPositions[i],pos[i]);\n      }\n    } finally {\n      StopFilter.setEnablePositionIncrementsDefault(dflt);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testPositionIncrement().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    QueryParser qp = new QueryParser(\"a\", new StopAnalyzer(StopFilter.makeStopSet(\"the\", \"in\", \"are\", \"this\"), true));\n    qp.setEnablePositionIncrements(true);\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    //               0         2                      5           7  8\n    int expectedPositions[] = {1,3,4,6,9};\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt);\n    //System.out.println(\"Query text: \"+qtxt);\n    //System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      //System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \"+i+\" = \"+t[i]+\" has wrong term-position!\",expectedPositions[i],pos[i]);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    boolean dflt = StopFilter.getEnablePositionIncrementsDefault();\n    StopFilter.setEnablePositionIncrementsDefault(true);\n    try {\n      QueryParser qp = new QueryParser(\"a\", new StopAnalyzer(new String[]{\"the\", \"in\", \"are\", \"this\"}));\n      qp.setEnablePositionIncrements(true);\n      String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n      //               0         2                      5           7  8\n      int expectedPositions[] = {1,3,4,6,9};\n      PhraseQuery pq = (PhraseQuery) qp.parse(qtxt);\n      //System.out.println(\"Query text: \"+qtxt);\n      //System.out.println(\"Result: \"+pq);\n      Term t[] = pq.getTerms();\n      int pos[] = pq.getPositions();\n      for (int i = 0; i < t.length; i++) {\n        //System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n        assertEquals(\"term \"+i+\" = \"+t[i]+\" has wrong term-position!\",expectedPositions[i],pos[i]);\n      }\n    } finally {\n      StopFilter.setEnablePositionIncrementsDefault(dflt);\n    }\n  }\n\n","bugFix":null,"bugIntro":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testPositionIncrement().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"a\", new StopAnalyzer(Version.LUCENE_CURRENT, StopFilter.makeStopSet(\"the\", \"in\", \"are\", \"this\")));\n    qp.setEnablePositionIncrements(true);\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    //               0         2                      5           7  8\n    int expectedPositions[] = {1,3,4,6,9};\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt);\n    //System.out.println(\"Query text: \"+qtxt);\n    //System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      //System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \"+i+\" = \"+t[i]+\" has wrong term-position!\",expectedPositions[i],pos[i]);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    QueryParser qp = new QueryParser(\"a\", new StopAnalyzer(StopFilter.makeStopSet(\"the\", \"in\", \"are\", \"this\"), true));\n    qp.setEnablePositionIncrements(true);\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    //               0         2                      5           7  8\n    int expectedPositions[] = {1,3,4,6,9};\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt);\n    //System.out.println(\"Query text: \"+qtxt);\n    //System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      //System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \"+i+\" = \"+t[i]+\" has wrong term-position!\",expectedPositions[i],pos[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f6c85ffa816c86be877aa7a5029a5daa1336e7f","date":1259617761,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testPositionIncrement().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"a\", new StopAnalyzer(Version.LUCENE_CURRENT, StopFilter.makeStopSet(Version.LUCENE_CURRENT, \"the\", \"in\", \"are\", \"this\")));\n    qp.setEnablePositionIncrements(true);\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    //               0         2                      5           7  8\n    int expectedPositions[] = {1,3,4,6,9};\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt);\n    //System.out.println(\"Query text: \"+qtxt);\n    //System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      //System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \"+i+\" = \"+t[i]+\" has wrong term-position!\",expectedPositions[i],pos[i]);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"a\", new StopAnalyzer(Version.LUCENE_CURRENT, StopFilter.makeStopSet(\"the\", \"in\", \"are\", \"this\")));\n    qp.setEnablePositionIncrements(true);\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    //               0         2                      5           7  8\n    int expectedPositions[] = {1,3,4,6,9};\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt);\n    //System.out.println(\"Query text: \"+qtxt);\n    //System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      //System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \"+i+\" = \"+t[i]+\" has wrong term-position!\",expectedPositions[i],pos[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testPositionIncrement().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new StopAnalyzer(TEST_VERSION_CURRENT, StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"the\", \"in\", \"are\", \"this\")));\n    qp.setEnablePositionIncrements(true);\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    //               0         2                      5           7  8\n    int expectedPositions[] = {1,3,4,6,9};\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt);\n    //System.out.println(\"Query text: \"+qtxt);\n    //System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      //System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \"+i+\" = \"+t[i]+\" has wrong term-position!\",expectedPositions[i],pos[i]);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"a\", new StopAnalyzer(Version.LUCENE_CURRENT, StopFilter.makeStopSet(Version.LUCENE_CURRENT, \"the\", \"in\", \"are\", \"this\")));\n    qp.setEnablePositionIncrements(true);\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    //               0         2                      5           7  8\n    int expectedPositions[] = {1,3,4,6,9};\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt);\n    //System.out.println(\"Query text: \"+qtxt);\n    //System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      //System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \"+i+\" = \"+t[i]+\" has wrong term-position!\",expectedPositions[i],pos[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testPositionIncrement().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new StopAnalyzer(TEST_VERSION_CURRENT, StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"the\", \"in\", \"are\", \"this\")));\n    qp.setEnablePositionIncrements(true);\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    //               0         2                      5           7  8\n    int expectedPositions[] = {1,3,4,6,9};\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt);\n    //System.out.println(\"Query text: \"+qtxt);\n    //System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      //System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \"+i+\" = \"+t[i]+\" has wrong term-position!\",expectedPositions[i],pos[i]);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new StopAnalyzer(TEST_VERSION_CURRENT, StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"the\", \"in\", \"are\", \"this\")));\n    qp.setEnablePositionIncrements(true);\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    //               0         2                      5           7  8\n    int expectedPositions[] = {1,3,4,6,9};\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt);\n    //System.out.println(\"Query text: \"+qtxt);\n    //System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      //System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \"+i+\" = \"+t[i]+\" has wrong term-position!\",expectedPositions[i],pos[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["693d6573b6621fc1265316fc6b042c24235c81d8"],"693d6573b6621fc1265316fc6b042c24235c81d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["ba1116b3450a9c1642c89445d131b37344055245"],"ba1116b3450a9c1642c89445d131b37344055245":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["693d6573b6621fc1265316fc6b042c24235c81d8"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["ba1116b3450a9c1642c89445d131b37344055245"],"693d6573b6621fc1265316fc6b042c24235c81d8":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba1116b3450a9c1642c89445d131b37344055245":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}