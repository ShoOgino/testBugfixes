{"path":"lucene/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache#testThreadCorrectness().mjava","commits":[{"id":"d7214103e1b0d5289fa253d65f7968ba13d526b9","date":1273335447,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache#testThreadCorrectness().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/cache/TestDoubleBarrelLRUCache#testThreadCorrectness().mjava","sourceNew":"  public void testThreadCorrectness() throws Exception {\n    final int NUM_THREADS = 4;\n    final int CACHE_SIZE = 512;\n    final int OBJ_COUNT = 3*CACHE_SIZE;\n\n    DoubleBarrelLRUCache<Object,Object> c = new DoubleBarrelLRUCache<Object,Object>(1024);\n\n    Object[] objs = new Object[OBJ_COUNT];\n    for(int i=0;i<OBJ_COUNT;i++) {\n      objs[i] = new Object();\n    }\n    \n    final CacheThread[] threads = new CacheThread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+1000L;\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new CacheThread(c, objs, endTime);\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n      assert !threads[i].failed;\n    }\n    //System.out.println(\"hits=\" + totHit + \" misses=\" + totMiss);\n  }\n\n","sourceOld":"  public void testThreadCorrectness() throws Exception {\n    final int NUM_THREADS = 4;\n    final int CACHE_SIZE = 512;\n    final int OBJ_COUNT = 3*CACHE_SIZE;\n\n    DoubleBarrelLRUCache<Object,Object> c = new DoubleBarrelLRUCache<Object,Object>(1024);\n\n    Object[] objs = new Object[OBJ_COUNT];\n    for(int i=0;i<OBJ_COUNT;i++) {\n      objs[i] = new Object();\n    }\n    \n    final CacheThread[] threads = new CacheThread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+1000L;\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new CacheThread(c, objs, endTime);\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n      assert !threads[i].failed;\n    }\n    //System.out.println(\"hits=\" + totHit + \" misses=\" + totMiss);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache#testThreadCorrectness().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache#testThreadCorrectness().mjava","sourceNew":"  public void testThreadCorrectness() throws Exception {\n    final int NUM_THREADS = 4;\n    final int CACHE_SIZE = 512;\n    final int OBJ_COUNT = 3*CACHE_SIZE;\n\n    DoubleBarrelLRUCache<CloneableObject,Object> c = new DoubleBarrelLRUCache<CloneableObject,Object>(1024);\n\n    CloneableObject[] objs = new CloneableObject[OBJ_COUNT];\n    for(int i=0;i<OBJ_COUNT;i++) {\n      objs[i] = new CloneableObject(new Object());\n    }\n    \n    final CacheThread[] threads = new CacheThread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+1000L;\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new CacheThread(c, objs, endTime);\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n      assert !threads[i].failed;\n    }\n    //System.out.println(\"hits=\" + totHit + \" misses=\" + totMiss);\n  }\n\n","sourceOld":"  public void testThreadCorrectness() throws Exception {\n    final int NUM_THREADS = 4;\n    final int CACHE_SIZE = 512;\n    final int OBJ_COUNT = 3*CACHE_SIZE;\n\n    DoubleBarrelLRUCache<Object,Object> c = new DoubleBarrelLRUCache<Object,Object>(1024);\n\n    Object[] objs = new Object[OBJ_COUNT];\n    for(int i=0;i<OBJ_COUNT;i++) {\n      objs[i] = new Object();\n    }\n    \n    final CacheThread[] threads = new CacheThread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+1000L;\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new CacheThread(c, objs, endTime);\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n      assert !threads[i].failed;\n    }\n    //System.out.println(\"hits=\" + totHit + \" misses=\" + totMiss);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache#testThreadCorrectness().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestDoubleBarrelLRUCache#testThreadCorrectness().mjava","sourceNew":"  public void testThreadCorrectness() throws Exception {\n    final int NUM_THREADS = 4;\n    final int CACHE_SIZE = 512;\n    final int OBJ_COUNT = 3*CACHE_SIZE;\n\n    DoubleBarrelLRUCache<CloneableObject,Object> c = new DoubleBarrelLRUCache<CloneableObject,Object>(1024);\n\n    CloneableObject[] objs = new CloneableObject[OBJ_COUNT];\n    for(int i=0;i<OBJ_COUNT;i++) {\n      objs[i] = new CloneableObject(new Object());\n    }\n    \n    final CacheThread[] threads = new CacheThread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+1000L;\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new CacheThread(c, objs, endTime);\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n      assert !threads[i].failed;\n    }\n    //System.out.println(\"hits=\" + totHit + \" misses=\" + totMiss);\n  }\n\n","sourceOld":"  public void testThreadCorrectness() throws Exception {\n    final int NUM_THREADS = 4;\n    final int CACHE_SIZE = 512;\n    final int OBJ_COUNT = 3*CACHE_SIZE;\n\n    DoubleBarrelLRUCache<CloneableObject,Object> c = new DoubleBarrelLRUCache<CloneableObject,Object>(1024);\n\n    CloneableObject[] objs = new CloneableObject[OBJ_COUNT];\n    for(int i=0;i<OBJ_COUNT;i++) {\n      objs[i] = new CloneableObject(new Object());\n    }\n    \n    final CacheThread[] threads = new CacheThread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+1000L;\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new CacheThread(c, objs, endTime);\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n      assert !threads[i].failed;\n    }\n    //System.out.println(\"hits=\" + totHit + \" misses=\" + totMiss);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d7214103e1b0d5289fa253d65f7968ba13d526b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2aafd88401639311b0404e67c94e829e123a0e45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2aafd88401639311b0404e67c94e829e123a0e45":["d7214103e1b0d5289fa253d65f7968ba13d526b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"d7214103e1b0d5289fa253d65f7968ba13d526b9":["2aafd88401639311b0404e67c94e829e123a0e45"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d7214103e1b0d5289fa253d65f7968ba13d526b9"],"2aafd88401639311b0404e67c94e829e123a0e45":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}