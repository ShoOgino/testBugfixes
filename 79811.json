{"path":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#inform(SolrCore).mjava","commits":[{"id":"3ee70799f6a87a250e98ce10a7bc3e28d41eac23","date":1242826192,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      log.info(\"Initializing Clustering Engines\");\n      boolean searchHasDefault = false;\n      boolean documentHasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"engine\")) {\n          NamedList engineNL = (NamedList) initParams.getVal(i);\n          String className = (String) engineNL.get(\"classname\");\n          if (className == null) {\n            className = CarrotClusteringEngine.class.getName();\n          }\n          SolrResourceLoader loader = core.getResourceLoader();\n          ClusteringEngine clusterer = (ClusteringEngine) loader.newInstance(className);\n          if (clusterer != null) {\n            String name = clusterer.init(engineNL, core);\n            if (name != null) {\n              boolean isDefault = name.equals(ClusteringEngine.DEFAULT_ENGINE_NAME);\n              if (clusterer instanceof SearchClusteringEngine) {\n                if (isDefault == true && searchHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && searchHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                searchClusteringEngines.put(name, (SearchClusteringEngine) clusterer);\n              } else if (clusterer instanceof DocumentClusteringEngine) {\n                if (isDefault == true && documentHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && documentHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                documentClusteringEngines.put(name, (DocumentClusteringEngine) clusterer);\n              }\n            } else {\n              if (clusterer instanceof SearchClusteringEngine && searchHasDefault == false) {\n                searchClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (SearchClusteringEngine) clusterer);\n                searchHasDefault = true;\n              } else if (clusterer instanceof DocumentClusteringEngine && documentHasDefault == false) {\n                documentClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (DocumentClusteringEngine) clusterer);\n                documentHasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n              }\n            }\n          }\n        }\n      }\n      log.info(\"Finished Initializing Clustering Engines\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#inform(SolrCore).mjava","pathOld":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      log.info(\"Initializing Clustering Engines\");\n      boolean searchHasDefault = false;\n      boolean documentHasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"engine\")) {\n          NamedList engineNL = (NamedList) initParams.getVal(i);\n          String className = (String) engineNL.get(\"classname\");\n          if (className == null) {\n            className = CarrotClusteringEngine.class.getName();\n          }\n          SolrResourceLoader loader = core.getResourceLoader();\n          ClusteringEngine clusterer = (ClusteringEngine) loader.newInstance(className);\n          if (clusterer != null) {\n            String name = clusterer.init(engineNL, core);\n            if (name != null) {\n              boolean isDefault = name.equals(ClusteringEngine.DEFAULT_ENGINE_NAME);\n              if (clusterer instanceof SearchClusteringEngine) {\n                if (isDefault == true && searchHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && searchHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                searchClusteringEngines.put(name, (SearchClusteringEngine) clusterer);\n              } else if (clusterer instanceof DocumentClusteringEngine) {\n                if (isDefault == true && documentHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && documentHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                documentClusteringEngines.put(name, (DocumentClusteringEngine) clusterer);\n              }\n            } else {\n              if (clusterer instanceof SearchClusteringEngine && searchHasDefault == false) {\n                searchClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (SearchClusteringEngine) clusterer);\n                searchHasDefault = true;\n              } else if (clusterer instanceof DocumentClusteringEngine && documentHasDefault == false) {\n                documentClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (DocumentClusteringEngine) clusterer);\n                documentHasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n              }\n            }\n          }\n        }\n      }\n      log.info(\"Finished Initializing Clustering Engines\");\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      log.info(\"Initializing Clustering Engines\");\n      boolean searchHasDefault = false;\n      boolean documentHasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"engine\")) {\n          NamedList engineNL = (NamedList) initParams.getVal(i);\n          String className = (String) engineNL.get(\"classname\");\n          if (className == null) {\n            className = CarrotClusteringEngine.class.getName();\n          }\n          SolrResourceLoader loader = core.getResourceLoader();\n          ClusteringEngine clusterer = (ClusteringEngine) loader.newInstance(className);\n          if (clusterer != null) {\n            String name = clusterer.init(engineNL, core);\n            if (name != null) {\n              boolean isDefault = name.equals(ClusteringEngine.DEFAULT_ENGINE_NAME);\n              if (clusterer instanceof SearchClusteringEngine) {\n                if (isDefault == true && searchHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && searchHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                searchClusteringEngines.put(name, (SearchClusteringEngine) clusterer);\n              } else if (clusterer instanceof DocumentClusteringEngine) {\n                if (isDefault == true && documentHasDefault == false) {\n                  searchHasDefault = true;\n                } else if (isDefault == true && documentHasDefault == true) {\n                  throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n                }\n                documentClusteringEngines.put(name, (DocumentClusteringEngine) clusterer);\n              }\n            } else {\n              if (clusterer instanceof SearchClusteringEngine && searchHasDefault == false) {\n                searchClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (SearchClusteringEngine) clusterer);\n                searchHasDefault = true;\n              } else if (clusterer instanceof DocumentClusteringEngine && documentHasDefault == false) {\n                documentClusteringEngines.put(ClusteringEngine.DEFAULT_ENGINE_NAME, (DocumentClusteringEngine) clusterer);\n                documentHasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one engine is missing name: \" + engineNL);\n              }\n            }\n          }\n        }\n      }\n      log.info(\"Finished Initializing Clustering Engines\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ee70799f6a87a250e98ce10a7bc3e28d41eac23":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3ee70799f6a87a250e98ce10a7bc3e28d41eac23"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3ee70799f6a87a250e98ce10a7bc3e28d41eac23":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3ee70799f6a87a250e98ce10a7bc3e28d41eac23"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}