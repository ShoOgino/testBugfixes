{"path":"src/java/org/apache/lucene/index/IndexReader#open(IndexCommit).mjava","commits":[{"id":"ac785906c92e4048ffc28f7c23a45541d3cca9bf","date":1214322066,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(IndexCommit).mjava","pathOld":"/dev/null","sourceNew":"  /** Expert: returns an IndexReader reading the index in the given\n   * {@link IndexCommit}.\n   * @param commit the commit point to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), false, null, commit);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5712975970a595c28f1988efd007e1b8a617a92f","date":1219499238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(IndexCommit).mjava","sourceNew":"  /** Expert: returns a read/write IndexReader reading the index in the given\n   * {@link IndexCommit}.  <b>NOTE</b>: starting in 3.0 this\n   * will return a readOnly IndexReader.\n   * @param commit the commit point to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), false, null, commit, READ_ONLY_DEFAULT);\n  }\n\n","sourceOld":"  /** Expert: returns an IndexReader reading the index in the given\n   * {@link IndexCommit}.\n   * @param commit the commit point to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), false, null, commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dabcca520e81aeff96f5c937b7ffb5617ee69d1","date":1243458018,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(IndexCommit).mjava","sourceNew":"  /** Expert: returns a read/write IndexReader reading the index in the given\n   * {@link IndexCommit}.\n   * @param commit the commit point to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @deprecated Use {@link #open(IndexCommit, boolean)} instead\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), false, null, commit, false);\n  }\n\n","sourceOld":"  /** Expert: returns a read/write IndexReader reading the index in the given\n   * {@link IndexCommit}.  <b>NOTE</b>: starting in 3.0 this\n   * will return a readOnly IndexReader.\n   * @param commit the commit point to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), false, null, commit, READ_ONLY_DEFAULT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba712167ee848727018d8b77aa0c273839fbe15c","date":1244411561,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(IndexCommit).mjava","sourceNew":"  /** Expert: returns a read/write IndexReader reading the index in the given\n   * {@link IndexCommit}.\n   * @param commit the commit point to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #open(IndexCommit, boolean)} instead\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), false, null, commit, false);\n  }\n\n","sourceOld":"  /** Expert: returns a read/write IndexReader reading the index in the given\n   * {@link IndexCommit}.\n   * @param commit the commit point to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @deprecated Use {@link #open(IndexCommit, boolean)} instead\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), false, null, commit, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e54e4a9a2442944e55f58e835877841cdac1271","date":1244628560,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(IndexCommit).mjava","sourceNew":"  /** Expert: returns a read/write IndexReader reading the index in the given\n   * {@link IndexCommit}.\n   * @param commit the commit point to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #open(IndexCommit, boolean)} instead\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), null, commit, false);\n  }\n\n","sourceOld":"  /** Expert: returns a read/write IndexReader reading the index in the given\n   * {@link IndexCommit}.\n   * @param commit the commit point to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #open(IndexCommit, boolean)} instead\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), false, null, commit, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"961159f13aece73fbb30aea720e77a2237e8bafd","date":1247258916,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(IndexCommit).mjava","sourceNew":"  /** Expert: returns a read/write IndexReader reading the index in the given\n   * {@link IndexCommit}.\n   * @param commit the commit point to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #open(IndexCommit, boolean)} instead\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), null, commit, false, DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","sourceOld":"  /** Expert: returns a read/write IndexReader reading the index in the given\n   * {@link IndexCommit}.\n   * @param commit the commit point to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #open(IndexCommit, boolean)} instead\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), null, commit, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"082ab1b8bb93767e8e870fda3638b79d67035d3f","date":1251223359,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(IndexCommit).mjava","sourceNew":"  /** Expert: returns a read/write IndexReader reading the index in the given\n   * {@link IndexCommit}.\n   * @param commit the commit point to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @deprecated Use {@link #open(IndexCommit, boolean)} instead.\n   *             This method will be removed in the 3.0 release.\n   * \n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), null, commit, false, DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","sourceOld":"  /** Expert: returns a read/write IndexReader reading the index in the given\n   * {@link IndexCommit}.\n   * @param commit the commit point to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #open(IndexCommit, boolean)} instead\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), null, commit, false, DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaea03be31988a41275d45a429ac71ff0ad740fb","date":1254612554,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(IndexCommit).mjava","sourceNew":null,"sourceOld":"  /** Expert: returns a read/write IndexReader reading the index in the given\n   * {@link IndexCommit}.\n   * @param commit the commit point to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @deprecated Use {@link #open(IndexCommit, boolean)} instead.\n   *             This method will be removed in the 3.0 release.\n   * \n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), null, commit, false, DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["082ab1b8bb93767e8e870fda3638b79d67035d3f"],"5712975970a595c28f1988efd007e1b8a617a92f":["ac785906c92e4048ffc28f7c23a45541d3cca9bf"],"082ab1b8bb93767e8e870fda3638b79d67035d3f":["961159f13aece73fbb30aea720e77a2237e8bafd"],"961159f13aece73fbb30aea720e77a2237e8bafd":["4e54e4a9a2442944e55f58e835877841cdac1271"],"4e54e4a9a2442944e55f58e835877841cdac1271":["ba712167ee848727018d8b77aa0c273839fbe15c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0dabcca520e81aeff96f5c937b7ffb5617ee69d1":["5712975970a595c28f1988efd007e1b8a617a92f"],"ac785906c92e4048ffc28f7c23a45541d3cca9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"ba712167ee848727018d8b77aa0c273839fbe15c":["0dabcca520e81aeff96f5c937b7ffb5617ee69d1"]},"commit2Childs":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5712975970a595c28f1988efd007e1b8a617a92f":["0dabcca520e81aeff96f5c937b7ffb5617ee69d1"],"082ab1b8bb93767e8e870fda3638b79d67035d3f":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"961159f13aece73fbb30aea720e77a2237e8bafd":["082ab1b8bb93767e8e870fda3638b79d67035d3f"],"4e54e4a9a2442944e55f58e835877841cdac1271":["961159f13aece73fbb30aea720e77a2237e8bafd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac785906c92e4048ffc28f7c23a45541d3cca9bf"],"0dabcca520e81aeff96f5c937b7ffb5617ee69d1":["ba712167ee848727018d8b77aa0c273839fbe15c"],"ac785906c92e4048ffc28f7c23a45541d3cca9bf":["5712975970a595c28f1988efd007e1b8a617a92f"],"ba712167ee848727018d8b77aa0c273839fbe15c":["4e54e4a9a2442944e55f58e835877841cdac1271"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}