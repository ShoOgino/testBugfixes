{"path":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHits(Random,Query,String,IndexSearcher,int[]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHits(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/CheckHits#checkHits(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query, int)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Random random,\n        Query query,\n        String defaultFieldName,\n        IndexSearcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n\n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set<Integer> actual = new TreeSet<Integer>();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(random, query,searcher, LuceneTestCase.rarely(random));\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query, int)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Random random,\n        Query query,\n        String defaultFieldName,\n        IndexSearcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n\n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set<Integer> actual = new TreeSet<Integer>();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(random, query,searcher, LuceneTestCase.rarely(random));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d26d48266a017b8190206ada9ce79d8c5188aeb7","date":1330494204,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHits(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHits(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * see Searcher#search(Query, int)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Random random,\n        Query query,\n        String defaultFieldName,\n        IndexSearcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n\n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set<Integer> actual = new TreeSet<Integer>();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(random, query,searcher, LuceneTestCase.rarely(random));\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query, int)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Random random,\n        Query query,\n        String defaultFieldName,\n        IndexSearcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n\n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set<Integer> actual = new TreeSet<Integer>();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(random, query,searcher, LuceneTestCase.rarely(random));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f9d66495573b5a13a6d8b98af14a8e6c4bf75a3","date":1330973542,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHits(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHits(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Random random,\n        Query query,\n        String defaultFieldName,\n        IndexSearcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n\n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set<Integer> actual = new TreeSet<Integer>();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(random, query,searcher, LuceneTestCase.rarely(random));\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query, int)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Random random,\n        Query query,\n        String defaultFieldName,\n        IndexSearcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n\n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set<Integer> actual = new TreeSet<Integer>();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(random, query,searcher, LuceneTestCase.rarely(random));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHits(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHits(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Random random,\n        Query query,\n        String defaultFieldName,\n        IndexSearcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n\n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set<Integer> actual = new TreeSet<Integer>();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(random, query,searcher, LuceneTestCase.rarely(random));\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * see Searcher#search(Query, int)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Random random,\n        Query query,\n        String defaultFieldName,\n        IndexSearcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n\n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set<Integer> actual = new TreeSet<Integer>();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(random, query,searcher, LuceneTestCase.rarely(random));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHits(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHits(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Random random,\n        Query query,\n        String defaultFieldName,\n        IndexSearcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n\n    Set<Integer> correct = new TreeSet<>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set<Integer> actual = new TreeSet<>();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(random, query,searcher, LuceneTestCase.rarely(random));\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Random random,\n        Query query,\n        String defaultFieldName,\n        IndexSearcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n\n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set<Integer> actual = new TreeSet<Integer>();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(random, query,searcher, LuceneTestCase.rarely(random));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHits(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHits(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Random random,\n        Query query,\n        String defaultFieldName,\n        IndexSearcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n\n    Set<Integer> correct = new TreeSet<>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set<Integer> actual = new TreeSet<>();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(random, query,searcher, LuceneTestCase.rarely(random));\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Random random,\n        Query query,\n        String defaultFieldName,\n        IndexSearcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n\n    Set<Integer> correct = new TreeSet<>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set<Integer> actual = new TreeSet<>();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(random, query,searcher, LuceneTestCase.rarely(random));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7f9d66495573b5a13a6d8b98af14a8e6c4bf75a3"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["d26d48266a017b8190206ada9ce79d8c5188aeb7","7f9d66495573b5a13a6d8b98af14a8e6c4bf75a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d26d48266a017b8190206ada9ce79d8c5188aeb7":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"7f9d66495573b5a13a6d8b98af14a8e6c4bf75a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d26d48266a017b8190206ada9ce79d8c5188aeb7","7f9d66495573b5a13a6d8b98af14a8e6c4bf75a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d26d48266a017b8190206ada9ce79d8c5188aeb7":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f9d66495573b5a13a6d8b98af14a8e6c4bf75a3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}