{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ClientDataProvider#ClientDataProvider(CloudSolrClient).mjava","commits":[{"id":"862864c0fab5449b10f29b4eee94a380d27d787f","date":1491552584,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ClientDataProvider#ClientDataProvider(CloudSolrClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ServerClusterDataProvider#ServerClusterDataProvider(CoreContainer).mjava","sourceNew":"  public ClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.get(replica.getNodeName());\n        if (nodeData == null) data.put(replica.getNodeName(), nodeData = new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.get(collName);\n        if (collData == null) nodeData.put(collName, collData = new HashMap<>());\n        List<ReplicaInfo> replicas = collData.get(shard);\n        if (replicas == null) collData.put(shard, replicas = new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), new HashMap<>()));\n      });\n    });\n  }\n\n","sourceOld":"  public ServerClusterDataProvider(CoreContainer coreContainer) {\n    this.coreContainer = coreContainer;\n    ClusterState clusterState = coreContainer.getZkController().getZkStateReader().getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.get(replica.getNodeName());\n        if (nodeData == null) data.put(replica.getNodeName(), nodeData = new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.get(collName);\n        if (collData == null) nodeData.put(collName, collData = new HashMap<>());\n        List<ReplicaInfo> replicas = collData.get(shard);\n        if (replicas == null) collData.put(shard, replicas = new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), new HashMap<>()));\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86fff6c123a5a1d38adb665dd045347219798da9","date":1493623721,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ClientDataProvider#ClientDataProvider(CloudSolrClient).mjava","sourceNew":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.get(replica.getNodeName());\n        if (nodeData == null) data.put(replica.getNodeName(), nodeData = new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.get(collName);\n        if (collData == null) nodeData.put(collName, collData = new HashMap<>());\n        List<ReplicaInfo> replicas = collData.get(shard);\n        if (replicas == null) collData.put(shard, replicas = new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), new HashMap<>()));\n      });\n    });\n  }\n\n","sourceOld":"  public ClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.get(replica.getNodeName());\n        if (nodeData == null) data.put(replica.getNodeName(), nodeData = new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.get(collName);\n        if (collData == null) nodeData.put(collName, collData = new HashMap<>());\n        List<ReplicaInfo> replicas = collData.get(shard);\n        if (replicas == null) collData.put(shard, replicas = new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), new HashMap<>()));\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"86fff6c123a5a1d38adb665dd045347219798da9":["862864c0fab5449b10f29b4eee94a380d27d787f"],"862864c0fab5449b10f29b4eee94a380d27d787f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["862864c0fab5449b10f29b4eee94a380d27d787f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86fff6c123a5a1d38adb665dd045347219798da9":[],"862864c0fab5449b10f29b4eee94a380d27d787f":["86fff6c123a5a1d38adb665dd045347219798da9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["86fff6c123a5a1d38adb665dd045347219798da9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}