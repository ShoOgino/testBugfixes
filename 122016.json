{"path":"src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","commits":[{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Advances to the first beyond the current whose document number is greater\n   * than or equal to <i>target</i>. Returns the current document number or\n   * {@link #NO_MORE_DOCS} if there are no more docs in the set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> certain implemenations may return a different value (each\n   * time) if called several times in a row with the same target.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@value #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * <b>NOTE:</b> in 3.0 this method will become abstract, following the removal\n   * of {@link #skipTo(int)}.\n   * \n   * @since 2.9\n   */\n  public int advance(int target) throws IOException {\n    while (nextDoc() < target) {}\n    return doc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c6b177184d12ea0f4978054530cfa34b667eb4af","a402a31d46de4a1611f5f0e3b2b0b69c9b84def9","d72889028c945ff17dbba53e91cf754d05f2b46b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9da50b065aa1fca712fa0bc75ff46443d021f331","date":1247689313,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","pathOld":"src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","sourceNew":"  /**\n   * Advances to the first beyond the current whose document number is greater\n   * than or equal to <i>target</i>. Returns the current document number or\n   * {@link #NO_MORE_DOCS} if there are no more docs in the set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> certain implemenations may return a different value (each\n   * time) if called several times in a row with the same target.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@value #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * <b>NOTE:</b> in 3.0 this method will become abstract, following the removal\n   * of {@link #skipTo(int)}.\n   * \n   * @since 2.9\n   */\n  public int advance(int target) throws IOException {\n    if (target == NO_MORE_DOCS) {\n      return doc = NO_MORE_DOCS;\n    }\n    return doc = skipTo(target) ? doc() : NO_MORE_DOCS;\n  }\n\n","sourceOld":"  /**\n   * Advances to the first beyond the current whose document number is greater\n   * than or equal to <i>target</i>. Returns the current document number or\n   * {@link #NO_MORE_DOCS} if there are no more docs in the set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> certain implemenations may return a different value (each\n   * time) if called several times in a row with the same target.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@value #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * <b>NOTE:</b> in 3.0 this method will become abstract, following the removal\n   * of {@link #skipTo(int)}.\n   * \n   * @since 2.9\n   */\n  public int advance(int target) throws IOException {\n    while (nextDoc() < target) {}\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","pathOld":"src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","sourceNew":"  /**\n   * Advances to the first beyond the current whose document number is greater\n   * than or equal to <i>target</i>. Returns the current document number or\n   * {@link #NO_MORE_DOCS} if there are no more docs in the set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> certain implementations may return a different value (each\n   * time) if called several times in a row with the same target.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@value #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * <b>NOTE:</b> in 3.0 this method will become abstract, following the removal\n   * of {@link #skipTo(int)}.\n   * \n   * @since 2.9\n   */\n  public int advance(int target) throws IOException {\n    if (target == NO_MORE_DOCS) {\n      return doc = NO_MORE_DOCS;\n    }\n    return doc = skipTo(target) ? doc() : NO_MORE_DOCS;\n  }\n\n","sourceOld":"  /**\n   * Advances to the first beyond the current whose document number is greater\n   * than or equal to <i>target</i>. Returns the current document number or\n   * {@link #NO_MORE_DOCS} if there are no more docs in the set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> certain implemenations may return a different value (each\n   * time) if called several times in a row with the same target.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@value #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * <b>NOTE:</b> in 3.0 this method will become abstract, following the removal\n   * of {@link #skipTo(int)}.\n   * \n   * @since 2.9\n   */\n  public int advance(int target) throws IOException {\n    if (target == NO_MORE_DOCS) {\n      return doc = NO_MORE_DOCS;\n    }\n    return doc = skipTo(target) ? doc() : NO_MORE_DOCS;\n  }\n\n","bugFix":null,"bugIntro":["c6b177184d12ea0f4978054530cfa34b667eb4af"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"438aef2dc00a23f2716882753fe225fbce4cfbfc","date":1255281460,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","pathOld":"src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","sourceNew":"  /**\n   * Advances to the first beyond the current whose document number is greater\n   * than or equal to <i>target</i>. Returns the current document number or\n   * {@link #NO_MORE_DOCS} if there are no more docs in the set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> certain implementations may return a different value (each\n   * time) if called several times in a row with the same target.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@value #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * \n   * @since 2.9\n   */\n  public abstract int advance(int target) throws IOException;\n\n","sourceOld":"  /**\n   * Advances to the first beyond the current whose document number is greater\n   * than or equal to <i>target</i>. Returns the current document number or\n   * {@link #NO_MORE_DOCS} if there are no more docs in the set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> certain implementations may return a different value (each\n   * time) if called several times in a row with the same target.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@value #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * <b>NOTE:</b> in 3.0 this method will become abstract, following the removal\n   * of {@link #skipTo(int)}.\n   * \n   * @since 2.9\n   */\n  public int advance(int target) throws IOException {\n    if (target == NO_MORE_DOCS) {\n      return doc = NO_MORE_DOCS;\n    }\n    return doc = skipTo(target) ? doc() : NO_MORE_DOCS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","pathOld":"src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","sourceNew":"  /**\n   * Advances to the first beyond the current whose document number is greater\n   * than or equal to <i>target</i>. Returns the current document number or\n   * {@link #NO_MORE_DOCS} if there are no more docs in the set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> certain implementations may return a different value (each\n   * time) if called several times in a row with the same target.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@value #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * \n   * @since 2.9\n   */\n  public abstract int advance(int target) throws IOException;\n\n","sourceOld":"  /**\n   * Advances to the first beyond the current whose document number is greater\n   * than or equal to <i>target</i>. Returns the current document number or\n   * {@link #NO_MORE_DOCS} if there are no more docs in the set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> certain implementations may return a different value (each\n   * time) if called several times in a row with the same target.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@value #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * \n   * @since 2.9\n   */\n  public abstract int advance(int target) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"30a558487f2298c2c19ceca9103c1b6865d64708":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"438aef2dc00a23f2716882753fe225fbce4cfbfc":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["9da50b065aa1fca712fa0bc75ff46443d021f331"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9da50b065aa1fca712fa0bc75ff46443d021f331":["30a558487f2298c2c19ceca9103c1b6865d64708"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["438aef2dc00a23f2716882753fe225fbce4cfbfc"]},"commit2Childs":{"30a558487f2298c2c19ceca9103c1b6865d64708":["9da50b065aa1fca712fa0bc75ff46443d021f331"],"438aef2dc00a23f2716882753fe225fbce4cfbfc":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30a558487f2298c2c19ceca9103c1b6865d64708"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["438aef2dc00a23f2716882753fe225fbce4cfbfc"],"9da50b065aa1fca712fa0bc75ff46443d021f331":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}