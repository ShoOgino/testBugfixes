{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testEmptyString().mjava","commits":[{"id":"761333d77c7f29123c00c93b107b743f32f012e6","date":1411986072,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testEmptyString().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testEmptyString().mjava","sourceNew":"  // LUCENE-4880\n  public void testEmptyString() throws IOException {\n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", new CannedTokenStream(new Token(\"\", 0, 5)));\n    IndexSearcher searcher = memory.createSearcher();\n    TopDocs docs = searcher.search(new TermQuery(new Term(\"foo\", \"\")), 10);\n    assertEquals(1, docs.totalHits);\n  }\n\n","sourceOld":"  // LUCENE-4880\n  public void testEmptyString() throws IOException {\n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", new CannedTokenStream(new Token(\"\", 0, 5)));\n    IndexSearcher searcher = memory.createSearcher();\n    TopDocs docs = searcher.search(new TermQuery(new Term(\"foo\", \"\")), 10);\n    assertEquals(1, docs.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testEmptyString().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testEmptyString().mjava","sourceNew":"  // LUCENE-4880\n  public void testEmptyString() throws IOException {\n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", new CannedTokenStream(new Token(\"\", 0, 5)));\n    IndexSearcher searcher = memory.createSearcher();\n    TopDocs docs = searcher.search(new TermQuery(new Term(\"foo\", \"\")), 10);\n    assertEquals(1, docs.totalHits);\n  }\n\n","sourceOld":"  // LUCENE-4880\n  public void testEmptyString() throws IOException {\n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", new CannedTokenStream(new Token(\"\", 0, 5)));\n    IndexSearcher searcher = memory.createSearcher();\n    TopDocs docs = searcher.search(new TermQuery(new Term(\"foo\", \"\")), 10);\n    assertEquals(1, docs.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb04834a792874aacf8d8b111a39603c23fbd777","date":1428406678,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testEmptyString().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testEmptyString().mjava","sourceNew":"  // LUCENE-4880\n  public void testEmptyString() throws IOException {\n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", new CannedTokenStream(new Token(\"\", 0, 5)));\n    IndexSearcher searcher = memory.createSearcher();\n    TopDocs docs = searcher.search(new TermQuery(new Term(\"foo\", \"\")), 10);\n    assertEquals(1, docs.totalHits);\n    TestUtil.checkReader(searcher.getIndexReader());\n  }\n\n","sourceOld":"  // LUCENE-4880\n  public void testEmptyString() throws IOException {\n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", new CannedTokenStream(new Token(\"\", 0, 5)));\n    IndexSearcher searcher = memory.createSearcher();\n    TopDocs docs = searcher.search(new TermQuery(new Term(\"foo\", \"\")), 10);\n    assertEquals(1, docs.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testEmptyString().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testEmptyString().mjava","sourceNew":"  // LUCENE-4880\n  public void testEmptyString() throws IOException {\n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", new CannedTokenStream(new Token(\"\", 0, 5)));\n    IndexSearcher searcher = memory.createSearcher();\n    TopDocs docs = searcher.search(new TermQuery(new Term(\"foo\", \"\")), 10);\n    assertEquals(1, docs.totalHits.value);\n    TestUtil.checkReader(searcher.getIndexReader());\n  }\n\n","sourceOld":"  // LUCENE-4880\n  public void testEmptyString() throws IOException {\n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", new CannedTokenStream(new Token(\"\", 0, 5)));\n    IndexSearcher searcher = memory.createSearcher();\n    TopDocs docs = searcher.search(new TermQuery(new Term(\"foo\", \"\")), 10);\n    assertEquals(1, docs.totalHits);\n    TestUtil.checkReader(searcher.getIndexReader());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstDirectory#testEmptyString().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testEmptyString().mjava","sourceNew":"  // LUCENE-4880\n  public void testEmptyString() throws IOException {\n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", new CannedTokenStream(new Token(\"\", 0, 5)));\n    IndexSearcher searcher = memory.createSearcher();\n    TopDocs docs = searcher.search(new TermQuery(new Term(\"foo\", \"\")), 10);\n    assertEquals(1, docs.totalHits.value);\n    TestUtil.checkReader(searcher.getIndexReader());\n  }\n\n","sourceOld":"  // LUCENE-4880\n  public void testEmptyString() throws IOException {\n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", new CannedTokenStream(new Token(\"\", 0, 5)));\n    IndexSearcher searcher = memory.createSearcher();\n    TopDocs docs = searcher.search(new TermQuery(new Term(\"foo\", \"\")), 10);\n    assertEquals(1, docs.totalHits.value);\n    TestUtil.checkReader(searcher.getIndexReader());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb04834a792874aacf8d8b111a39603c23fbd777":["761333d77c7f29123c00c93b107b743f32f012e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","761333d77c7f29123c00c93b107b743f32f012e6"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["bb04834a792874aacf8d8b111a39603c23fbd777"],"761333d77c7f29123c00c93b107b743f32f012e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"bb04834a792874aacf8d8b111a39603c23fbd777":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a47902d6207303f5ed3e7aaca62ca33433af66","761333d77c7f29123c00c93b107b743f32f012e6"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["d77dafd89756a5161d244985903e3487ca109182"],"761333d77c7f29123c00c93b107b743f32f012e6":["bb04834a792874aacf8d8b111a39603c23fbd777","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}