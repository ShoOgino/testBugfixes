{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testInvalidValues().mjava","commits":[{"id":"64ff6b743fd4051da7ebb3d397d1ef80833a741a","date":1492023891,"type":1,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testInvalidValues().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DatePartEvaluatorTest#testInvalidValues().mjava","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(\"year(a)\");\n\n    try {\n      values.clear();\n      values.put(\"a\", 12);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter 12 - The parameter must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"1995-12-31\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter 1995-12-31 - The String must be formatted in the ISO_INSTANT date format.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter  - The parameter must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime.\", e.getMessage());\n    }\n\n    values.clear();\n    values.put(\"a\", null);\n    assertNull(evaluator.evaluate(new Tuple(values)));\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidValues() throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(\"year(a)\");\n\n    try {\n      values.clear();\n      values.put(\"a\", 12);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter 12 - The parameter must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"1995-12-31\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter 1995-12-31 - The String must be formatted in the ISO_INSTANT date format.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter  - The parameter must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime.\", e.getMessage());\n    }\n\n    values.clear();\n    values.put(\"a\", null);\n    assertNull(evaluator.evaluate(new Tuple(values)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4177dd81a9f4ea02615ad384a4c17f13edf868b","date":1492023891,"type":3,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testInvalidValues().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testInvalidValues().mjava","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(\"year(a)\");\n\n    try {\n      values.clear();\n      values.put(\"a\", 12);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter 12 - The parameter must be a string formatted ISO_INSTANT or of type Long,Instant,Date,LocalDateTime or TemporalAccessor.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"1995-12-31\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter 1995-12-31 - The String must be formatted in the ISO_INSTANT date format.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter  - The parameter must be a string formatted ISO_INSTANT or of type Long,Instant,Date,LocalDateTime or TemporalAccessor.\", e.getMessage());\n    }\n\n    values.clear();\n    values.put(\"a\", null);\n    assertNull(evaluator.evaluate(new Tuple(values)));\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidValues() throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(\"year(a)\");\n\n    try {\n      values.clear();\n      values.put(\"a\", 12);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter 12 - The parameter must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"1995-12-31\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter 1995-12-31 - The String must be formatted in the ISO_INSTANT date format.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter  - The parameter must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime.\", e.getMessage());\n    }\n\n    values.clear();\n    values.put(\"a\", null);\n    assertNull(evaluator.evaluate(new Tuple(values)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56ebde9c21d35a39c07989c178372e901ad377da","date":1492023892,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testInvalidValues().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testInvalidValues().mjava","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(\"year(a)\");\n\n\n    try {\n      values.clear();\n      values.put(\"a\", 12);\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter 12 - The parameter must be a string formatted ISO_INSTANT or of type Long,Instant,Date,LocalDateTime or TemporalAccessor.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"1995-12-31\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter 1995-12-31 - The String must be formatted in the ISO_INSTANT date format.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter  - The parameter must be a string formatted ISO_INSTANT or of type Long,Instant,Date,LocalDateTime or TemporalAccessor.\", e.getMessage());\n    }\n\n    values.clear();\n    values.put(\"a\", null);\n    assertNull(evaluator.evaluate(new Tuple(values)));\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidValues() throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(\"year(a)\");\n\n    try {\n      values.clear();\n      values.put(\"a\", 12);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter 12 - The parameter must be a string formatted ISO_INSTANT or of type Long,Instant,Date,LocalDateTime or TemporalAccessor.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"1995-12-31\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter 1995-12-31 - The String must be formatted in the ISO_INSTANT date format.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter  - The parameter must be a string formatted ISO_INSTANT or of type Long,Instant,Date,LocalDateTime or TemporalAccessor.\", e.getMessage());\n    }\n\n    values.clear();\n    values.put(\"a\", null);\n    assertNull(evaluator.evaluate(new Tuple(values)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testInvalidValues().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(\"year(a)\");\n\n\n    try {\n      values.clear();\n      values.put(\"a\", 12);\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter 12 - The parameter must be a string formatted ISO_INSTANT or of type Long,Instant,Date,LocalDateTime or TemporalAccessor.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"1995-12-31\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter 1995-12-31 - The String must be formatted in the ISO_INSTANT date format.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter  - The parameter must be a string formatted ISO_INSTANT or of type Long,Instant,Date,LocalDateTime or TemporalAccessor.\", e.getMessage());\n    }\n\n    values.clear();\n    values.put(\"a\", null);\n    assertNull(evaluator.evaluate(new Tuple(values)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d7ec8367e3d451bb6e9ff83e43419ea2452dea5","date":1512445603,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testInvalidValues().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testInvalidValues().mjava","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(\"year(a)\");\n\n\n    try {\n      values.clear();\n      values.put(\"a\", 12);\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter 12 - The parameter must be a string formatted ISO_INSTANT or of type Long,Instant,Date,LocalDateTime or TemporalAccessor.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"1995-12-31\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter 1995-12-31 - The String must be formatted in the ISO_INSTANT date format.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter  - The parameter must be a string formatted ISO_INSTANT or of type Long,Instant,Date,LocalDateTime or TemporalAccessor.\", e.getMessage());\n    }\n\n    values.clear();\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidValues() throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(\"year(a)\");\n\n\n    try {\n      values.clear();\n      values.put(\"a\", 12);\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter 12 - The parameter must be a string formatted ISO_INSTANT or of type Long,Instant,Date,LocalDateTime or TemporalAccessor.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"1995-12-31\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter 1995-12-31 - The String must be formatted in the ISO_INSTANT date format.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid parameter  - The parameter must be a string formatted ISO_INSTANT or of type Long,Instant,Date,LocalDateTime or TemporalAccessor.\", e.getMessage());\n    }\n\n    values.clear();\n    values.put(\"a\", null);\n    assertNull(evaluator.evaluate(new Tuple(values)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"56ebde9c21d35a39c07989c178372e901ad377da":["e4177dd81a9f4ea02615ad384a4c17f13edf868b"],"64ff6b743fd4051da7ebb3d397d1ef80833a741a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7d7ec8367e3d451bb6e9ff83e43419ea2452dea5":["56ebde9c21d35a39c07989c178372e901ad377da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e4177dd81a9f4ea02615ad384a4c17f13edf868b":["64ff6b743fd4051da7ebb3d397d1ef80833a741a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d7ec8367e3d451bb6e9ff83e43419ea2452dea5"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"56ebde9c21d35a39c07989c178372e901ad377da":["7d7ec8367e3d451bb6e9ff83e43419ea2452dea5"],"64ff6b743fd4051da7ebb3d397d1ef80833a741a":["e4177dd81a9f4ea02615ad384a4c17f13edf868b"],"7d7ec8367e3d451bb6e9ff83e43419ea2452dea5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","64ff6b743fd4051da7ebb3d397d1ef80833a741a"],"e4177dd81a9f4ea02615ad384a4c17f13edf868b":["56ebde9c21d35a39c07989c178372e901ad377da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}