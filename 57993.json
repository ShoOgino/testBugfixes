{"path":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageQuery#testGetUser().mjava","commits":[{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageQuery#testGetUser().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageQuery#testGetUser().mjava","sourceNew":"    public void testGetUser() throws StorageException, IOException{\n        this.modifier.forceWrite();\n        GDataAccount user = new GDataAccount();\n        user.setName(\"simon\");\n        user.setPassword(\"pass\");\n        user.setAuthorname(\"simon willnauer\");\n        user.setAuthorMail(\"simon@apache.org\");\n        user.setAuthorLink(new URL(\"http://www.apache.org\"));\n        \n       \n     \n        this.modifier.createAccount(new StorageAccountWrapper(user));\n        GDataAccount queriedUser = this.query.get().getUser(\"simon\");\n        assertNull(queriedUser);\n        ReferenceCounter<StorageQuery> tempQuery = this.controller.getStorageQuery();\n        queriedUser = tempQuery.get().getUser(\"simon\");\n        assertTrue(queriedUser.equals(user));\n        assertTrue(queriedUser.getAuthorMail().equals(user.getAuthorMail()));\n        assertTrue(queriedUser.getAuthorLink().equals(user.getAuthorLink()));\n        assertTrue(queriedUser.getAuthorname().equals(user.getAuthorname()));\n        assertTrue(queriedUser.getPassword().equals(user.getPassword()));\n    }\n\n","sourceOld":"    public void testGetUser() throws StorageException, IOException{\n        this.modifier.forceWrite();\n        GDataAccount user = new GDataAccount();\n        user.setName(\"simon\");\n        user.setPassword(\"pass\");\n        user.setAuthorname(\"simon willnauer\");\n        user.setAuthorMail(\"simon@apache.org\");\n        user.setAuthorLink(new URL(\"http://www.apache.org\"));\n        \n       \n     \n        this.modifier.createAccount(new StorageAccountWrapper(user));\n        GDataAccount queriedUser = this.query.get().getUser(\"simon\");\n        assertNull(queriedUser);\n        ReferenceCounter<StorageQuery> tempQuery = this.controller.getStorageQuery();\n        queriedUser = tempQuery.get().getUser(\"simon\");\n        assertTrue(queriedUser.equals(user));\n        assertTrue(queriedUser.getAuthorMail().equals(user.getAuthorMail()));\n        assertTrue(queriedUser.getAuthorLink().equals(user.getAuthorLink()));\n        assertTrue(queriedUser.getAuthorname().equals(user.getAuthorname()));\n        assertTrue(queriedUser.getPassword().equals(user.getPassword()));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageQuery#testGetUser().mjava","pathOld":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageQuery#testGetUser().mjava","sourceNew":"    public void testGetUser() throws StorageException, IOException{\n        this.modifier.forceWrite();\n        GDataAccount user = new GDataAccount();\n        user.setName(\"simon\");\n        user.setPassword(\"pass\");\n        user.setAuthorname(\"simon willnauer\");\n        user.setAuthorMail(\"simon@apache.org\");\n        user.setAuthorLink(new URL(\"http://www.apache.org\"));\n        \n       \n     \n        this.modifier.createAccount(new StorageAccountWrapper(user));\n        GDataAccount queriedUser = this.query.get().getUser(\"simon\");\n        assertNull(queriedUser);\n        ReferenceCounter<StorageQuery> tempQuery = this.controller.getStorageQuery();\n        queriedUser = tempQuery.get().getUser(\"simon\");\n        assertTrue(queriedUser.equals(user));\n        assertTrue(queriedUser.getAuthorMail().equals(user.getAuthorMail()));\n        assertTrue(queriedUser.getAuthorLink().equals(user.getAuthorLink()));\n        assertTrue(queriedUser.getAuthorname().equals(user.getAuthorname()));\n        assertTrue(queriedUser.getPassword().equals(user.getPassword()));\n    }\n\n","sourceOld":"    public void testGetUser() throws StorageException, IOException{\n        this.modifier.forceWrite();\n        GDataAccount user = new GDataAccount();\n        user.setName(\"simon\");\n        user.setPassword(\"pass\");\n        user.setAuthorname(\"simon willnauer\");\n        user.setAuthorMail(\"simon@apache.org\");\n        user.setAuthorLink(new URL(\"http://www.apache.org\"));\n        \n       \n     \n        this.modifier.createAccount(new StorageAccountWrapper(user));\n        GDataAccount queriedUser = this.query.get().getUser(\"simon\");\n        assertNull(queriedUser);\n        ReferenceCounter<StorageQuery> tempQuery = this.controller.getStorageQuery();\n        queriedUser = tempQuery.get().getUser(\"simon\");\n        assertTrue(queriedUser.equals(user));\n        assertTrue(queriedUser.getAuthorMail().equals(user.getAuthorMail()));\n        assertTrue(queriedUser.getAuthorLink().equals(user.getAuthorLink()));\n        assertTrue(queriedUser.getAuthorname().equals(user.getAuthorname()));\n        assertTrue(queriedUser.getPassword().equals(user.getPassword()));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}