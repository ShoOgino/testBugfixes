{"path":"solr/src/java/org/apache/solr/search/function/MaxFloatFunction#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/MaxFloatFunction#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/MaxFloatFunction#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final DocValues vals =  source.getValues(context, readerContext);\n    return new DocValues() {\n      public float floatVal(int doc) {\n\tfloat v = vals.floatVal(doc);\n        return v < fval ? fval : v;\n      }\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      public String toString(int doc) {\n\treturn \"max(\" + vals.toString(doc) + \",\" + fval + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues vals =  source.getValues(context, reader);\n    return new DocValues() {\n      public float floatVal(int doc) {\n\tfloat v = vals.floatVal(doc);\n        return v < fval ? fval : v;\n      }\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      public String toString(int doc) {\n\treturn \"max(\" + vals.toString(doc) + \",\" + fval + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/MaxFloatFunction#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final DocValues vals =  source.getValues(context, readerContext);\n    return new DocValues() {\n      public float floatVal(int doc) {\n\tfloat v = vals.floatVal(doc);\n        return v < fval ? fval : v;\n      }\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      public String toString(int doc) {\n\treturn \"max(\" + vals.toString(doc) + \",\" + fval + \")\";\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/MaxFloatFunction#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/MaxFloatFunction#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final DocValues vals =  source.getValues(context, readerContext);\n    return new DocValues() {\n      @Override\n      public float floatVal(int doc) {\n\tfloat v = vals.floatVal(doc);\n        return v < fval ? fval : v;\n      }\n      @Override\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      @Override\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      @Override\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      @Override\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      @Override\n      public String toString(int doc) {\n\treturn \"max(\" + vals.toString(doc) + \",\" + fval + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final DocValues vals =  source.getValues(context, readerContext);\n    return new DocValues() {\n      public float floatVal(int doc) {\n\tfloat v = vals.floatVal(doc);\n        return v < fval ? fval : v;\n      }\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      public String toString(int doc) {\n\treturn \"max(\" + vals.toString(doc) + \",\" + fval + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/MaxFloatFunction#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final DocValues vals =  source.getValues(context, readerContext);\n    return new DocValues() {\n      @Override\n      public float floatVal(int doc) {\n\tfloat v = vals.floatVal(doc);\n        return v < fval ? fval : v;\n      }\n      @Override\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      @Override\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      @Override\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      @Override\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      @Override\n      public String toString(int doc) {\n\treturn \"max(\" + vals.toString(doc) + \",\" + fval + \")\";\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"835db8140710c7019296ed9156a37a03d375bbf6","date":1297957953,"type":4,"author":"Grant Ingersoll","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/MaxFloatFunction#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final DocValues vals =  source.getValues(context, readerContext);\n    return new DocValues() {\n      @Override\n      public float floatVal(int doc) {\n\tfloat v = vals.floatVal(doc);\n        return v < fval ? fval : v;\n      }\n      @Override\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      @Override\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      @Override\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      @Override\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      @Override\n      public String toString(int doc) {\n\treturn \"max(\" + vals.toString(doc) + \",\" + fval + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/MaxFloatFunction#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final DocValues vals =  source.getValues(context, readerContext);\n    return new DocValues() {\n      @Override\n      public float floatVal(int doc) {\n\tfloat v = vals.floatVal(doc);\n        return v < fval ? fval : v;\n      }\n      @Override\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      @Override\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      @Override\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      @Override\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      @Override\n      public String toString(int doc) {\n\treturn \"max(\" + vals.toString(doc) + \",\" + fval + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/MaxFloatFunction#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final DocValues vals =  source.getValues(context, readerContext);\n    return new DocValues() {\n      public float floatVal(int doc) {\n\tfloat v = vals.floatVal(doc);\n        return v < fval ? fval : v;\n      }\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      public String toString(int doc) {\n\treturn \"max(\" + vals.toString(doc) + \",\" + fval + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"835db8140710c7019296ed9156a37a03d375bbf6":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["c220849f876de24a79f756f65b3eb045db59f63f"],"c220849f876de24a79f756f65b3eb045db59f63f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","835db8140710c7019296ed9156a37a03d375bbf6"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c220849f876de24a79f756f65b3eb045db59f63f"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","835db8140710c7019296ed9156a37a03d375bbf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["835db8140710c7019296ed9156a37a03d375bbf6"]},"commit2Childs":{"835db8140710c7019296ed9156a37a03d375bbf6":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["835db8140710c7019296ed9156a37a03d375bbf6","29ef99d61cda9641b6250bf9567329a6e65f901d"],"c220849f876de24a79f756f65b3eb045db59f63f":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","868da859b43505d9d2a023bfeae6dd0c795f5295"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c220849f876de24a79f756f65b3eb045db59f63f","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}