{"path":"lucene/src/java/org/apache/lucene/index/AutomatonTermsEnum#backtrack(int).mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/AutomatonTermsEnum#backtrack(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#backtrack(int).mjava","sourceNew":"  /**\n   * Attempts to backtrack thru the string after encountering a dead end\n   * at some given position. Returns false if no more possible strings \n   * can match.\n   * \n   * @param position current position in the input String\n   * @return position >=0 if more possible solutions exist for the DFA\n   */\n  private int backtrack(int position) {\n    while (position-- > 0) {\n      int nextChar = seekBytesRef.bytes[position] & 0xff;\n      // if a character is 0xff its a dead-end too,\n      // because there is no higher character in binary sort order.\n      if (nextChar++ != 0xff) {\n        seekBytesRef.bytes[position] = (byte) nextChar;\n        seekBytesRef.length = position+1;\n        return position;\n      }\n    }\n    return -1; /* all solutions exhausted */\n  }\n\n","sourceOld":"  /**\n   * Attempts to backtrack thru the string after encountering a dead end\n   * at some given position. Returns false if no more possible strings \n   * can match.\n   * \n   * @param position current position in the input String\n   * @return position >=0 if more possible solutions exist for the DFA\n   */\n  private int backtrack(int position) {\n    while (position-- > 0) {\n      int nextChar = seekBytesRef.bytes[position] & 0xff;\n      // if a character is 0xff its a dead-end too,\n      // because there is no higher character in binary sort order.\n      if (nextChar++ != 0xff) {\n        seekBytesRef.bytes[position] = (byte) nextChar;\n        seekBytesRef.length = position+1;\n        return position;\n      }\n    }\n    return -1; /* all solutions exhausted */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#backtrack(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/AutomatonTermsEnum#backtrack(int).mjava","sourceNew":"  /**\n   * Attempts to backtrack thru the string after encountering a dead end\n   * at some given position. Returns false if no more possible strings \n   * can match.\n   * \n   * @param position current position in the input String\n   * @return position >=0 if more possible solutions exist for the DFA\n   */\n  private int backtrack(int position) {\n    while (position-- > 0) {\n      int nextChar = seekBytesRef.bytes[position] & 0xff;\n      // if a character is 0xff its a dead-end too,\n      // because there is no higher character in binary sort order.\n      if (nextChar++ != 0xff) {\n        seekBytesRef.bytes[position] = (byte) nextChar;\n        seekBytesRef.length = position+1;\n        return position;\n      }\n    }\n    return -1; /* all solutions exhausted */\n  }\n\n","sourceOld":"  /**\n   * Attempts to backtrack thru the string after encountering a dead end\n   * at some given position. Returns false if no more possible strings \n   * can match.\n   * \n   * @param position current position in the input String\n   * @return position >=0 if more possible solutions exist for the DFA\n   */\n  private int backtrack(int position) {\n    while (position-- > 0) {\n      int nextChar = seekBytesRef.bytes[position] & 0xff;\n      // if a character is 0xff its a dead-end too,\n      // because there is no higher character in binary sort order.\n      if (nextChar++ != 0xff) {\n        seekBytesRef.bytes[position] = (byte) nextChar;\n        seekBytesRef.length = position+1;\n        return position;\n      }\n    }\n    return -1; /* all solutions exhausted */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}