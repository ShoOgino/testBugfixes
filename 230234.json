{"path":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#tFilteredQuery(boolean).mjava","commits":[{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#tFilteredQuery(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void tFilteredQuery(final boolean useRandomAccess) throws Exception {\n    Query filteredquery = new FilteredQueryRA(query, filter, useRandomAccess);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.Type.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"one\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"x\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"y\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQueryRA(tq, f, useRandomAccess);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"586cf43028f4cae848088bc127a6e4d6773ce9aa","date":1323793944,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#tFilteredQuery(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#tFilteredQuery(boolean).mjava","sourceNew":"  private void tFilteredQuery(final boolean useRandomAccess) throws Exception {\n    Query filteredquery = new FilteredQueryRA(query, filter, useRandomAccess);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.Type.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"one\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new MatchAllDocsQuery(), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"x\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"y\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQueryRA(tq, f, useRandomAccess);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","sourceOld":"  private void tFilteredQuery(final boolean useRandomAccess) throws Exception {\n    Query filteredquery = new FilteredQueryRA(query, filter, useRandomAccess);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.Type.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"one\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"x\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"y\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQueryRA(tq, f, useRandomAccess);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ceb6a6c707ada1df8bde804e25c98668e699a18","date":1323800602,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#tFilteredQuery(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#tFilteredQuery(boolean).mjava","sourceNew":"  private void tFilteredQuery(final boolean useRandomAccess) throws Exception {\n    Query filteredquery = new FilteredQueryRA(query, filter, useRandomAccess);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.Type.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"one\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new MatchAllDocsQuery(), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"x\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"y\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQueryRA(tq, f, useRandomAccess);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","sourceOld":"  private void tFilteredQuery(final boolean useRandomAccess) throws Exception {\n    Query filteredquery = new FilteredQueryRA(query, filter, useRandomAccess);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.Type.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"one\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"x\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"y\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQueryRA(tq, f, useRandomAccess);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#tFilteredQuery(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#tFilteredQuery(boolean).mjava","sourceNew":"  private void tFilteredQuery(final boolean useRandomAccess) throws Exception {\n    Query filteredquery = new FilteredQueryRA(query, filter, useRandomAccess);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.Type.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"one\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new MatchAllDocsQuery(), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"x\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"y\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQueryRA(tq, f, useRandomAccess);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","sourceOld":"  private void tFilteredQuery(final boolean useRandomAccess) throws Exception {\n    Query filteredquery = new FilteredQueryRA(query, filter, useRandomAccess);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.Type.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"one\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new MatchAllDocsQuery(), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"x\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"y\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQueryRA(tq, f, useRandomAccess);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ceb6a6c707ada1df8bde804e25c98668e699a18":["6620df8541b174097b1133a4fc370adb2e570524","586cf43028f4cae848088bc127a6e4d6773ce9aa"],"586cf43028f4cae848088bc127a6e4d6773ce9aa":["6620df8541b174097b1133a4fc370adb2e570524"],"6620df8541b174097b1133a4fc370adb2e570524":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["586cf43028f4cae848088bc127a6e4d6773ce9aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"4ceb6a6c707ada1df8bde804e25c98668e699a18":[],"6620df8541b174097b1133a4fc370adb2e570524":["4ceb6a6c707ada1df8bde804e25c98668e699a18","586cf43028f4cae848088bc127a6e4d6773ce9aa"],"586cf43028f4cae848088bc127a6e4d6773ce9aa":["4ceb6a6c707ada1df8bde804e25c98668e699a18","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6620df8541b174097b1133a4fc370adb2e570524"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ceb6a6c707ada1df8bde804e25c98668e699a18","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}