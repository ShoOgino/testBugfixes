{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","sourceNew":"  public void testReset() throws Exception {\n    CharArraySet dict = makeDictionary(\"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\");\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n        \"Rindfleischüberwachungsgesetz\"));\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        wsTokenizer, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    CharTermAttribute termAtt = tf.getAttribute(CharTermAttribute.class);\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.toString());\n    wsTokenizer.reset(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n  }\n\n","sourceOld":"  public void testReset() throws Exception {\n    CharArraySet dict = makeDictionary(\"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\");\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n        \"Rindfleischüberwachungsgesetz\"));\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        wsTokenizer, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    CharTermAttribute termAtt = tf.getAttribute(CharTermAttribute.class);\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.toString());\n    wsTokenizer.reset(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b893541afcaa76dcbac2fcd24bbfa05ca6b41129","date":1342450620,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","sourceNew":"  public void testReset() throws Exception {\n    CharArraySet dict = makeDictionary(\"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\");\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n        \"Rindfleischüberwachungsgesetz\"));\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        wsTokenizer, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    CharTermAttribute termAtt = tf.getAttribute(CharTermAttribute.class);\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.toString());\n    wsTokenizer.setReader(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n  }\n\n","sourceOld":"  public void testReset() throws Exception {\n    CharArraySet dict = makeDictionary(\"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\");\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n        \"Rindfleischüberwachungsgesetz\"));\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        wsTokenizer, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    CharTermAttribute termAtt = tf.getAttribute(CharTermAttribute.class);\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.toString());\n    wsTokenizer.reset(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","sourceNew":"  public void testReset() throws Exception {\n    CharArraySet dict = makeDictionary(\"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\");\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n        \"Rindfleischüberwachungsgesetz\"));\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        wsTokenizer, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    CharTermAttribute termAtt = tf.getAttribute(CharTermAttribute.class);\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.toString());\n    wsTokenizer.setReader(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n  }\n\n","sourceOld":"  public void testReset() throws Exception {\n    CharArraySet dict = makeDictionary(\"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\");\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n        \"Rindfleischüberwachungsgesetz\"));\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        wsTokenizer, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    CharTermAttribute termAtt = tf.getAttribute(CharTermAttribute.class);\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.toString());\n    wsTokenizer.reset(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","sourceNew":"  public void testReset() throws Exception {\n    CharArraySet dict = makeDictionary(\"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\");\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n        \"Rindfleischüberwachungsgesetz\"));\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        wsTokenizer, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    CharTermAttribute termAtt = tf.getAttribute(CharTermAttribute.class);\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.toString());\n    wsTokenizer.setReader(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n  }\n\n","sourceOld":"  public void testReset() throws Exception {\n    CharArraySet dict = makeDictionary(\"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\");\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n        \"Rindfleischüberwachungsgesetz\"));\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        wsTokenizer, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    CharTermAttribute termAtt = tf.getAttribute(CharTermAttribute.class);\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.toString());\n    wsTokenizer.reset(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c1b87b155748a27fbed84a0ffb3f8799177451e","date":1346349018,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","sourceNew":"  public void testReset() throws Exception {\n    CharArraySet dict = makeDictionary(\"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\");\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n        \"Rindfleischüberwachungsgesetz\"));\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        wsTokenizer, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    CharTermAttribute termAtt = tf.getAttribute(CharTermAttribute.class);\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.toString());\n    wsTokenizer.setReader(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n  }\n\n","sourceOld":"  public void testReset() throws Exception {\n    CharArraySet dict = makeDictionary(\"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\");\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n        \"Rindfleischüberwachungsgesetz\"));\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        wsTokenizer, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    CharTermAttribute termAtt = tf.getAttribute(CharTermAttribute.class);\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.toString());\n    wsTokenizer.setReader(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","sourceNew":"  public void testReset() throws Exception {\n    CharArraySet dict = makeDictionary(\"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\");\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n        \"Rindfleischüberwachungsgesetz\"));\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        wsTokenizer, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    CharTermAttribute termAtt = tf.getAttribute(CharTermAttribute.class);\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.toString());\n    wsTokenizer.setReader(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n  }\n\n","sourceOld":"  public void testReset() throws Exception {\n    CharArraySet dict = makeDictionary(\"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\");\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n        \"Rindfleischüberwachungsgesetz\"));\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        wsTokenizer, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    CharTermAttribute termAtt = tf.getAttribute(CharTermAttribute.class);\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.toString());\n    wsTokenizer.setReader(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99c9d8533c954f661481ae44273622957dbf572f","date":1380991288,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","sourceNew":"  public void testReset() throws Exception {\n    CharArraySet dict = makeDictionary(\"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\");\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n        \"Rindfleischüberwachungsgesetz\"));\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        wsTokenizer, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    CharTermAttribute termAtt = tf.getAttribute(CharTermAttribute.class);\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.toString());\n    tf.end();\n    tf.close();\n    wsTokenizer.setReader(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n  }\n\n","sourceOld":"  public void testReset() throws Exception {\n    CharArraySet dict = makeDictionary(\"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\");\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n        \"Rindfleischüberwachungsgesetz\"));\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        wsTokenizer, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    CharTermAttribute termAtt = tf.getAttribute(CharTermAttribute.class);\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.toString());\n    wsTokenizer.setReader(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","sourceNew":"  public void testReset() throws Exception {\n    CharArraySet dict = makeDictionary(\"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\");\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT);\n    wsTokenizer.setReader(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT,\n        wsTokenizer, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    CharTermAttribute termAtt = tf.getAttribute(CharTermAttribute.class);\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.toString());\n    tf.end();\n    tf.close();\n    wsTokenizer.setReader(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n  }\n\n","sourceOld":"  public void testReset() throws Exception {\n    CharArraySet dict = makeDictionary(\"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\");\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n        \"Rindfleischüberwachungsgesetz\"));\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        wsTokenizer, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    CharTermAttribute termAtt = tf.getAttribute(CharTermAttribute.class);\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.toString());\n    tf.end();\n    tf.close();\n    wsTokenizer.setReader(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75","date":1399205975,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","sourceNew":"  public void testReset() throws Exception {\n    CharArraySet dict = makeDictionary(\"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\");\n\n    MockTokenizer wsTokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    wsTokenizer.setEnableChecks(false); // we will reset in a strange place\n    wsTokenizer.setReader(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT,\n        wsTokenizer, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    CharTermAttribute termAtt = tf.getAttribute(CharTermAttribute.class);\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.toString());\n    tf.end();\n    tf.close();\n    wsTokenizer.setReader(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n  }\n\n","sourceOld":"  public void testReset() throws Exception {\n    CharArraySet dict = makeDictionary(\"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\");\n\n    Tokenizer wsTokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT);\n    wsTokenizer.setReader(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT,\n        wsTokenizer, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    CharTermAttribute termAtt = tf.getAttribute(CharTermAttribute.class);\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.toString());\n    tf.end();\n    tf.close();\n    wsTokenizer.setReader(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testReset().mjava","sourceNew":"  public void testReset() throws Exception {\n    CharArraySet dict = makeDictionary(\"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\");\n\n    MockTokenizer wsTokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    wsTokenizer.setEnableChecks(false); // we will reset in a strange place\n    wsTokenizer.setReader(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(\n        wsTokenizer, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    CharTermAttribute termAtt = tf.getAttribute(CharTermAttribute.class);\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.toString());\n    tf.end();\n    tf.close();\n    wsTokenizer.setReader(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n  }\n\n","sourceOld":"  public void testReset() throws Exception {\n    CharArraySet dict = makeDictionary(\"Rind\", \"Fleisch\", \"Draht\", \"Schere\", \"Gesetz\",\n        \"Aufgabe\", \"Überwachung\");\n\n    MockTokenizer wsTokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    wsTokenizer.setEnableChecks(false); // we will reset in a strange place\n    wsTokenizer.setReader(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT,\n        wsTokenizer, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    \n    CharTermAttribute termAtt = tf.getAttribute(CharTermAttribute.class);\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rind\", termAtt.toString());\n    tf.end();\n    tf.close();\n    wsTokenizer.setReader(new StringReader(\"Rindfleischüberwachungsgesetz\"));\n    tf.reset();\n    assertTrue(tf.incrementToken());\n    assertEquals(\"Rindfleischüberwachungsgesetz\", termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99c9d8533c954f661481ae44273622957dbf572f":["4c1b87b155748a27fbed84a0ffb3f8799177451e"],"4c1b87b155748a27fbed84a0ffb3f8799177451e":["b893541afcaa76dcbac2fcd24bbfa05ca6b41129"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b893541afcaa76dcbac2fcd24bbfa05ca6b41129":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"aba371508186796cc6151d8223a5b4e16d02e26e":["b89678825b68eccaf09e6ab71675fc0b0af1e099","b893541afcaa76dcbac2fcd24bbfa05ca6b41129"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["99c9d8533c954f661481ae44273622957dbf572f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","b893541afcaa76dcbac2fcd24bbfa05ca6b41129"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":["aba371508186796cc6151d8223a5b4e16d02e26e","4c1b87b155748a27fbed84a0ffb3f8799177451e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"99c9d8533c954f661481ae44273622957dbf572f":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"4c1b87b155748a27fbed84a0ffb3f8799177451e":["99c9d8533c954f661481ae44273622957dbf572f","05a14b2611ead08655a2b2bdc61632eb31316e57"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b893541afcaa76dcbac2fcd24bbfa05ca6b41129","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"b893541afcaa76dcbac2fcd24bbfa05ca6b41129":["4c1b87b155748a27fbed84a0ffb3f8799177451e","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aba371508186796cc6151d8223a5b4e16d02e26e":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}