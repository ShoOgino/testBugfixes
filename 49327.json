{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#getDocsFromTermRange(String,int,TermsEnum,FixedBitSet,BytesRef,BytesRef,boolean).mjava","commits":[{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#getDocsFromTermRange(String,int,TermsEnum,FixedBitSet,BytesRef,BytesRef,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Visits all terms in the range minTerm (inclusive) to maxTerm (exclusive), marking all doc IDs encountered into allDocsSeen, and\n   *  returning the total number of terms visited. */\n  private static long getDocsFromTermRange(String field, int maxDoc, TermsEnum termsEnum, FixedBitSet docsSeen, BytesRef minTerm, BytesRef maxTerm, boolean isIntersect) throws IOException {\n    docsSeen.clear(0, docsSeen.length());\n\n    long termCount = 0;\n    PostingsEnum postingsEnum = null;\n    BytesRefBuilder lastTerm = null;\n    while (true) {\n      BytesRef term;\n\n      // Kinda messy: for intersect, we must first next(), but for \"normal\", we are already on our first term:\n      if (isIntersect || termCount != 0) {\n        term = termsEnum.next();\n      } else {\n        term = termsEnum.term();\n      }\n\n      if (term == null) {\n        if (isIntersect == false) {\n          throw new RuntimeException(\"didn't see max term field=\" + field + \" term=\" + maxTerm);\n        }\n        return termCount;\n      }\n\n      assert term.isValid();\n        \n      if (lastTerm == null) {\n        lastTerm = new BytesRefBuilder();\n        lastTerm.copyBytes(term);\n      } else {\n        if (lastTerm.get().compareTo(term) >= 0) {\n          throw new RuntimeException(\"terms out of order: lastTerm=\" + lastTerm + \" term=\" + term);\n        }\n        lastTerm.copyBytes(term);\n      }\n\n      //System.out.println(\"    term=\" + term);\n\n      // Caller already ensured terms enum positioned >= minTerm:\n      if (term.compareTo(minTerm) < 0) {\n        throw new RuntimeException(\"saw term before min term field=\" + field + \" term=\" + minTerm);\n      }\n\n      if (isIntersect == false) {\n        int cmp = term.compareTo(maxTerm);\n        if (cmp == 0) {\n          // Done!\n          return termCount;\n        } else if (cmp > 0) {\n          throw new RuntimeException(\"didn't see end term field=\" + field + \" term=\" + maxTerm);\n        }\n      }\n\n      postingsEnum = termsEnum.postings(null, postingsEnum, 0);\n\n      int lastDoc = -1;\n      while (true) {\n        int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        if (doc <= lastDoc) {\n          throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" <= lastDoc \" + lastDoc);\n        }\n        if (doc >= maxDoc) {\n          throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" >= maxDoc \" + maxDoc);\n        }\n\n        //System.out.println(\"      doc=\" + doc);\n        docsSeen.set(doc);\n\n        lastDoc = doc;\n      }\n\n      termCount++;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#getDocsFromTermRange(String,int,TermsEnum,FixedBitSet,BytesRef,BytesRef,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Visits all terms in the range minTerm (inclusive) to maxTerm (exclusive), marking all doc IDs encountered into allDocsSeen, and\n   *  returning the total number of terms visited. */\n  private static long getDocsFromTermRange(String field, int maxDoc, TermsEnum termsEnum, FixedBitSet docsSeen, BytesRef minTerm, BytesRef maxTerm, boolean isIntersect) throws IOException {\n    docsSeen.clear(0, docsSeen.length());\n\n    long termCount = 0;\n    PostingsEnum postingsEnum = null;\n    BytesRefBuilder lastTerm = null;\n    while (true) {\n      BytesRef term;\n\n      // Kinda messy: for intersect, we must first next(), but for \"normal\", we are already on our first term:\n      if (isIntersect || termCount != 0) {\n        term = termsEnum.next();\n      } else {\n        term = termsEnum.term();\n      }\n\n      if (term == null) {\n        if (isIntersect == false) {\n          throw new RuntimeException(\"didn't see max term field=\" + field + \" term=\" + maxTerm);\n        }\n        return termCount;\n      }\n\n      assert term.isValid();\n        \n      if (lastTerm == null) {\n        lastTerm = new BytesRefBuilder();\n        lastTerm.copyBytes(term);\n      } else {\n        if (lastTerm.get().compareTo(term) >= 0) {\n          throw new RuntimeException(\"terms out of order: lastTerm=\" + lastTerm + \" term=\" + term);\n        }\n        lastTerm.copyBytes(term);\n      }\n\n      //System.out.println(\"    term=\" + term);\n\n      // Caller already ensured terms enum positioned >= minTerm:\n      if (term.compareTo(minTerm) < 0) {\n        throw new RuntimeException(\"saw term before min term field=\" + field + \" term=\" + minTerm);\n      }\n\n      if (isIntersect == false) {\n        int cmp = term.compareTo(maxTerm);\n        if (cmp == 0) {\n          // Done!\n          return termCount;\n        } else if (cmp > 0) {\n          throw new RuntimeException(\"didn't see end term field=\" + field + \" term=\" + maxTerm);\n        }\n      }\n\n      postingsEnum = termsEnum.postings(null, postingsEnum, 0);\n\n      int lastDoc = -1;\n      while (true) {\n        int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        if (doc <= lastDoc) {\n          throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" <= lastDoc \" + lastDoc);\n        }\n        if (doc >= maxDoc) {\n          throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" >= maxDoc \" + maxDoc);\n        }\n\n        //System.out.println(\"      doc=\" + doc);\n        docsSeen.set(doc);\n\n        lastDoc = doc;\n      }\n\n      termCount++;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"372b4e16bc7ce0e14dccdc44b8cb31888f7402ab","date":1428224042,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#getDocsFromTermRange(String,int,TermsEnum,FixedBitSet,BytesRef,BytesRef,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#getDocsFromTermRange(String,int,TermsEnum,FixedBitSet,BytesRef,BytesRef,boolean).mjava","sourceNew":"  /** Visits all terms in the range minTerm (inclusive) to maxTerm (exclusive), marking all doc IDs encountered into allDocsSeen, and\n   *  returning the total number of terms visited. */\n  private static long getDocsFromTermRange(String field, int maxDoc, TermsEnum termsEnum, FixedBitSet docsSeen, BytesRef minTerm, BytesRef maxTerm, boolean isIntersect) throws IOException {\n    docsSeen.clear(0, docsSeen.length());\n\n    long termCount = 0;\n    PostingsEnum postingsEnum = null;\n    BytesRefBuilder lastTerm = null;\n    while (true) {\n      BytesRef term;\n\n      // Kinda messy: for intersect, we must first next(), but for \"normal\", we are already on our first term:\n      if (isIntersect || termCount != 0) {\n        term = termsEnum.next();\n      } else {\n        term = termsEnum.term();\n      }\n\n      if (term == null) {\n        if (isIntersect == false) {\n          throw new RuntimeException(\"didn't see max term field=\" + field + \" term=\" + maxTerm);\n        }\n        //System.out.println(\"      terms=\" + termCount);\n        return termCount;\n      }\n\n      assert term.isValid();\n        \n      if (lastTerm == null) {\n        lastTerm = new BytesRefBuilder();\n        lastTerm.copyBytes(term);\n      } else {\n        if (lastTerm.get().compareTo(term) >= 0) {\n          throw new RuntimeException(\"terms out of order: lastTerm=\" + lastTerm + \" term=\" + term);\n        }\n        lastTerm.copyBytes(term);\n      }\n\n      //System.out.println(\"    term=\" + term);\n\n      // Caller already ensured terms enum positioned >= minTerm:\n      if (term.compareTo(minTerm) < 0) {\n        throw new RuntimeException(\"saw term before min term field=\" + field + \" term=\" + minTerm);\n      }\n\n      if (isIntersect == false) {\n        int cmp = term.compareTo(maxTerm);\n        if (cmp == 0) {\n          // Done!\n          //System.out.println(\"      terms=\" + termCount);\n          return termCount;\n        } else if (cmp > 0) {\n          throw new RuntimeException(\"didn't see end term field=\" + field + \" term=\" + maxTerm);\n        }\n      }\n\n      postingsEnum = termsEnum.postings(null, postingsEnum, 0);\n\n      int lastDoc = -1;\n      while (true) {\n        int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        if (doc <= lastDoc) {\n          throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" <= lastDoc \" + lastDoc);\n        }\n        if (doc >= maxDoc) {\n          throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" >= maxDoc \" + maxDoc);\n        }\n\n        //System.out.println(\"      doc=\" + doc);\n        docsSeen.set(doc);\n\n        lastDoc = doc;\n      }\n\n      termCount++;\n    }\n  }\n\n","sourceOld":"  /** Visits all terms in the range minTerm (inclusive) to maxTerm (exclusive), marking all doc IDs encountered into allDocsSeen, and\n   *  returning the total number of terms visited. */\n  private static long getDocsFromTermRange(String field, int maxDoc, TermsEnum termsEnum, FixedBitSet docsSeen, BytesRef minTerm, BytesRef maxTerm, boolean isIntersect) throws IOException {\n    docsSeen.clear(0, docsSeen.length());\n\n    long termCount = 0;\n    PostingsEnum postingsEnum = null;\n    BytesRefBuilder lastTerm = null;\n    while (true) {\n      BytesRef term;\n\n      // Kinda messy: for intersect, we must first next(), but for \"normal\", we are already on our first term:\n      if (isIntersect || termCount != 0) {\n        term = termsEnum.next();\n      } else {\n        term = termsEnum.term();\n      }\n\n      if (term == null) {\n        if (isIntersect == false) {\n          throw new RuntimeException(\"didn't see max term field=\" + field + \" term=\" + maxTerm);\n        }\n        return termCount;\n      }\n\n      assert term.isValid();\n        \n      if (lastTerm == null) {\n        lastTerm = new BytesRefBuilder();\n        lastTerm.copyBytes(term);\n      } else {\n        if (lastTerm.get().compareTo(term) >= 0) {\n          throw new RuntimeException(\"terms out of order: lastTerm=\" + lastTerm + \" term=\" + term);\n        }\n        lastTerm.copyBytes(term);\n      }\n\n      //System.out.println(\"    term=\" + term);\n\n      // Caller already ensured terms enum positioned >= minTerm:\n      if (term.compareTo(minTerm) < 0) {\n        throw new RuntimeException(\"saw term before min term field=\" + field + \" term=\" + minTerm);\n      }\n\n      if (isIntersect == false) {\n        int cmp = term.compareTo(maxTerm);\n        if (cmp == 0) {\n          // Done!\n          return termCount;\n        } else if (cmp > 0) {\n          throw new RuntimeException(\"didn't see end term field=\" + field + \" term=\" + maxTerm);\n        }\n      }\n\n      postingsEnum = termsEnum.postings(null, postingsEnum, 0);\n\n      int lastDoc = -1;\n      while (true) {\n        int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        if (doc <= lastDoc) {\n          throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" <= lastDoc \" + lastDoc);\n        }\n        if (doc >= maxDoc) {\n          throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" >= maxDoc \" + maxDoc);\n        }\n\n        //System.out.println(\"      doc=\" + doc);\n        docsSeen.set(doc);\n\n        lastDoc = doc;\n      }\n\n      termCount++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#getDocsFromTermRange(String,int,TermsEnum,FixedBitSet,BytesRef,BytesRef,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#getDocsFromTermRange(String,int,TermsEnum,FixedBitSet,BytesRef,BytesRef,boolean).mjava","sourceNew":"  /** Visits all terms in the range minTerm (inclusive) to maxTerm (exclusive), marking all doc IDs encountered into allDocsSeen, and\n   *  returning the total number of terms visited. */\n  private static long getDocsFromTermRange(String field, int maxDoc, TermsEnum termsEnum, FixedBitSet docsSeen, BytesRef minTerm, BytesRef maxTerm, boolean isIntersect) throws IOException {\n    docsSeen.clear(0, docsSeen.length());\n\n    long termCount = 0;\n    PostingsEnum postingsEnum = null;\n    BytesRefBuilder lastTerm = null;\n    while (true) {\n      BytesRef term;\n\n      // Kinda messy: for intersect, we must first next(), but for \"normal\", we are already on our first term:\n      if (isIntersect || termCount != 0) {\n        term = termsEnum.next();\n      } else {\n        term = termsEnum.term();\n      }\n\n      if (term == null) {\n        if (isIntersect == false) {\n          throw new RuntimeException(\"didn't see max term field=\" + field + \" term=\" + maxTerm);\n        }\n        //System.out.println(\"      terms=\" + termCount);\n        return termCount;\n      }\n\n      assert term.isValid();\n        \n      if (lastTerm == null) {\n        lastTerm = new BytesRefBuilder();\n        lastTerm.copyBytes(term);\n      } else {\n        if (lastTerm.get().compareTo(term) >= 0) {\n          throw new RuntimeException(\"terms out of order: lastTerm=\" + lastTerm + \" term=\" + term);\n        }\n        lastTerm.copyBytes(term);\n      }\n\n      //System.out.println(\"    term=\" + term);\n\n      // Caller already ensured terms enum positioned >= minTerm:\n      if (term.compareTo(minTerm) < 0) {\n        throw new RuntimeException(\"saw term before min term field=\" + field + \" term=\" + minTerm);\n      }\n\n      if (isIntersect == false) {\n        int cmp = term.compareTo(maxTerm);\n        if (cmp == 0) {\n          // Done!\n          //System.out.println(\"      terms=\" + termCount);\n          return termCount;\n        } else if (cmp > 0) {\n          throw new RuntimeException(\"didn't see end term field=\" + field + \" term=\" + maxTerm);\n        }\n      }\n\n      postingsEnum = termsEnum.postings(postingsEnum, 0);\n\n      int lastDoc = -1;\n      while (true) {\n        int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        if (doc <= lastDoc) {\n          throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" <= lastDoc \" + lastDoc);\n        }\n        if (doc >= maxDoc) {\n          throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" >= maxDoc \" + maxDoc);\n        }\n\n        //System.out.println(\"      doc=\" + doc);\n        docsSeen.set(doc);\n\n        lastDoc = doc;\n      }\n\n      termCount++;\n    }\n  }\n\n","sourceOld":"  /** Visits all terms in the range minTerm (inclusive) to maxTerm (exclusive), marking all doc IDs encountered into allDocsSeen, and\n   *  returning the total number of terms visited. */\n  private static long getDocsFromTermRange(String field, int maxDoc, TermsEnum termsEnum, FixedBitSet docsSeen, BytesRef minTerm, BytesRef maxTerm, boolean isIntersect) throws IOException {\n    docsSeen.clear(0, docsSeen.length());\n\n    long termCount = 0;\n    PostingsEnum postingsEnum = null;\n    BytesRefBuilder lastTerm = null;\n    while (true) {\n      BytesRef term;\n\n      // Kinda messy: for intersect, we must first next(), but for \"normal\", we are already on our first term:\n      if (isIntersect || termCount != 0) {\n        term = termsEnum.next();\n      } else {\n        term = termsEnum.term();\n      }\n\n      if (term == null) {\n        if (isIntersect == false) {\n          throw new RuntimeException(\"didn't see max term field=\" + field + \" term=\" + maxTerm);\n        }\n        //System.out.println(\"      terms=\" + termCount);\n        return termCount;\n      }\n\n      assert term.isValid();\n        \n      if (lastTerm == null) {\n        lastTerm = new BytesRefBuilder();\n        lastTerm.copyBytes(term);\n      } else {\n        if (lastTerm.get().compareTo(term) >= 0) {\n          throw new RuntimeException(\"terms out of order: lastTerm=\" + lastTerm + \" term=\" + term);\n        }\n        lastTerm.copyBytes(term);\n      }\n\n      //System.out.println(\"    term=\" + term);\n\n      // Caller already ensured terms enum positioned >= minTerm:\n      if (term.compareTo(minTerm) < 0) {\n        throw new RuntimeException(\"saw term before min term field=\" + field + \" term=\" + minTerm);\n      }\n\n      if (isIntersect == false) {\n        int cmp = term.compareTo(maxTerm);\n        if (cmp == 0) {\n          // Done!\n          //System.out.println(\"      terms=\" + termCount);\n          return termCount;\n        } else if (cmp > 0) {\n          throw new RuntimeException(\"didn't see end term field=\" + field + \" term=\" + maxTerm);\n        }\n      }\n\n      postingsEnum = termsEnum.postings(null, postingsEnum, 0);\n\n      int lastDoc = -1;\n      while (true) {\n        int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        if (doc <= lastDoc) {\n          throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" <= lastDoc \" + lastDoc);\n        }\n        if (doc >= maxDoc) {\n          throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" >= maxDoc \" + maxDoc);\n        }\n\n        //System.out.println(\"      doc=\" + doc);\n        docsSeen.set(doc);\n\n        lastDoc = doc;\n      }\n\n      termCount++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"158039752283f0c5acd00ec298d83fad2a0a1971","date":1456478848,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#getDocsFromTermRange(String,int,TermsEnum,FixedBitSet,BytesRef,BytesRef,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#getDocsFromTermRange(String,int,TermsEnum,FixedBitSet,BytesRef,BytesRef,boolean).mjava","sourceNew":"  /** Visits all terms in the range minTerm (inclusive) to maxTerm (exclusive), marking all doc IDs encountered into allDocsSeen, and\n   *  returning the total number of terms visited. */\n  private static long getDocsFromTermRange(String field, int maxDoc, TermsEnum termsEnum, FixedBitSet docsSeen, BytesRef minTerm, BytesRef maxTerm, boolean isIntersect) throws IOException {\n    docsSeen.clear(0, docsSeen.length());\n\n    long termCount = 0;\n    PostingsEnum postingsEnum = null;\n    BytesRefBuilder lastTerm = null;\n    while (true) {\n      BytesRef term;\n\n      // Kinda messy: for intersect, we must first next(), but for \"normal\", we are already on our first term:\n      if (isIntersect || termCount != 0) {\n        term = termsEnum.next();\n      } else {\n        term = termsEnum.term();\n      }\n\n      if (term == null) {\n        if (isIntersect == false) {\n          throw new RuntimeException(\"didn't see max term field=\" + field + \" term=\" + maxTerm);\n        }\n        //System.out.println(\"      terms=\" + termCount);\n        return termCount;\n      }\n\n      assert term.isValid();\n        \n      if (lastTerm == null) {\n        lastTerm = new BytesRefBuilder();\n        lastTerm.copyBytes(term);\n      } else {\n        if (lastTerm.get().compareTo(term) >= 0) {\n          throw new RuntimeException(\"terms out of order: lastTerm=\" + lastTerm.get() + \" term=\" + term);\n        }\n        lastTerm.copyBytes(term);\n      }\n\n      //System.out.println(\"    term=\" + term);\n\n      // Caller already ensured terms enum positioned >= minTerm:\n      if (term.compareTo(minTerm) < 0) {\n        throw new RuntimeException(\"saw term before min term field=\" + field + \" term=\" + minTerm);\n      }\n\n      if (isIntersect == false) {\n        int cmp = term.compareTo(maxTerm);\n        if (cmp == 0) {\n          // Done!\n          //System.out.println(\"      terms=\" + termCount);\n          return termCount;\n        } else if (cmp > 0) {\n          throw new RuntimeException(\"didn't see end term field=\" + field + \" term=\" + maxTerm);\n        }\n      }\n\n      postingsEnum = termsEnum.postings(postingsEnum, 0);\n\n      int lastDoc = -1;\n      while (true) {\n        int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        if (doc <= lastDoc) {\n          throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" <= lastDoc \" + lastDoc);\n        }\n        if (doc >= maxDoc) {\n          throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" >= maxDoc \" + maxDoc);\n        }\n\n        //System.out.println(\"      doc=\" + doc);\n        docsSeen.set(doc);\n\n        lastDoc = doc;\n      }\n\n      termCount++;\n    }\n  }\n\n","sourceOld":"  /** Visits all terms in the range minTerm (inclusive) to maxTerm (exclusive), marking all doc IDs encountered into allDocsSeen, and\n   *  returning the total number of terms visited. */\n  private static long getDocsFromTermRange(String field, int maxDoc, TermsEnum termsEnum, FixedBitSet docsSeen, BytesRef minTerm, BytesRef maxTerm, boolean isIntersect) throws IOException {\n    docsSeen.clear(0, docsSeen.length());\n\n    long termCount = 0;\n    PostingsEnum postingsEnum = null;\n    BytesRefBuilder lastTerm = null;\n    while (true) {\n      BytesRef term;\n\n      // Kinda messy: for intersect, we must first next(), but for \"normal\", we are already on our first term:\n      if (isIntersect || termCount != 0) {\n        term = termsEnum.next();\n      } else {\n        term = termsEnum.term();\n      }\n\n      if (term == null) {\n        if (isIntersect == false) {\n          throw new RuntimeException(\"didn't see max term field=\" + field + \" term=\" + maxTerm);\n        }\n        //System.out.println(\"      terms=\" + termCount);\n        return termCount;\n      }\n\n      assert term.isValid();\n        \n      if (lastTerm == null) {\n        lastTerm = new BytesRefBuilder();\n        lastTerm.copyBytes(term);\n      } else {\n        if (lastTerm.get().compareTo(term) >= 0) {\n          throw new RuntimeException(\"terms out of order: lastTerm=\" + lastTerm + \" term=\" + term);\n        }\n        lastTerm.copyBytes(term);\n      }\n\n      //System.out.println(\"    term=\" + term);\n\n      // Caller already ensured terms enum positioned >= minTerm:\n      if (term.compareTo(minTerm) < 0) {\n        throw new RuntimeException(\"saw term before min term field=\" + field + \" term=\" + minTerm);\n      }\n\n      if (isIntersect == false) {\n        int cmp = term.compareTo(maxTerm);\n        if (cmp == 0) {\n          // Done!\n          //System.out.println(\"      terms=\" + termCount);\n          return termCount;\n        } else if (cmp > 0) {\n          throw new RuntimeException(\"didn't see end term field=\" + field + \" term=\" + maxTerm);\n        }\n      }\n\n      postingsEnum = termsEnum.postings(postingsEnum, 0);\n\n      int lastDoc = -1;\n      while (true) {\n        int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        if (doc <= lastDoc) {\n          throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" <= lastDoc \" + lastDoc);\n        }\n        if (doc >= maxDoc) {\n          throw new RuntimeException(\"term \" + term + \": doc \" + doc + \" >= maxDoc \" + maxDoc);\n        }\n\n        //System.out.println(\"      doc=\" + doc);\n        docsSeen.set(doc);\n\n        lastDoc = doc;\n      }\n\n      termCount++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["372b4e16bc7ce0e14dccdc44b8cb31888f7402ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e8715d826e588419327562287d5d6a8040d63d6"],"372b4e16bc7ce0e14dccdc44b8cb31888f7402ab":["3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"158039752283f0c5acd00ec298d83fad2a0a1971":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["158039752283f0c5acd00ec298d83fad2a0a1971"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["158039752283f0c5acd00ec298d83fad2a0a1971"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"372b4e16bc7ce0e14dccdc44b8cb31888f7402ab":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"3e8715d826e588419327562287d5d6a8040d63d6":["d2638f781be724518ff6c2263d14a48cf6e68017","372b4e16bc7ce0e14dccdc44b8cb31888f7402ab"],"158039752283f0c5acd00ec298d83fad2a0a1971":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}