{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,int,SortedDocValues,SortedDocValues).mjava","commits":[{"id":"7f3d2a33d17fc14a585ce28e167b1bb1c31946b0","date":1552989190,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,int,SortedDocValues,SortedDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,int,SortedDocValues).mjava","sourceNew":"  private static void checkSortedDocValues(String fieldName, int maxDoc, SortedDocValues dv, SortedDocValues dv2) throws IOException {\n    if (dv.docID() != -1) {\n      throw new RuntimeException(\"sorted dv iterator for field: \" + fieldName + \" should start at docID=-1, but got \" + dv.docID());\n    }\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int doc = dv.nextDoc(); doc != NO_MORE_DOCS; doc = dv.nextDoc()) {\n      int ord = dv.ordValue();\n      if (ord == -1) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" has -1 ord\");\n      } else if (ord < -1 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      } else {\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n      }\n\n      if (dv2.advanceExact(doc) == false) {\n        throw new RuntimeException(\"advanceExact did not find matching doc ID: \" + doc);\n      }\n      int ord2 = dv2.ordValue();\n      if (ord != ord2) {\n        throw new RuntimeException(\"nextDoc and advanceExact report different ords: \" + ord + \" != \" + ord2);\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    for (int i = 0; i <= maxOrd; i++) {\n      final BytesRef term = dv.lookupOrd(i);\n      term.isValid();\n      if (lastValue != null) {\n        if (term.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + term);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(term);\n    }\n  }\n\n","sourceOld":"  private static void checkSortedDocValues(String fieldName, int maxDoc, SortedDocValues dv) throws IOException {\n    if (dv.docID() != -1) {\n      throw new RuntimeException(\"sorted dv iterator for field: \" + fieldName + \" should start at docID=-1, but got \" + dv.docID());\n    }\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    int docID;\n    while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n      int ord = dv.ordValue();\n      if (ord == -1) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" has -1 ord\");\n      } else if (ord < -1 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      } else {\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    for (int i = 0; i <= maxOrd; i++) {\n      final BytesRef term = dv.lookupOrd(i);\n      term.isValid();\n      if (lastValue != null) {\n        if (term.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + term);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(term);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f3d2a33d17fc14a585ce28e167b1bb1c31946b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f3d2a33d17fc14a585ce28e167b1bb1c31946b0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f3d2a33d17fc14a585ce28e167b1bb1c31946b0"],"7f3d2a33d17fc14a585ce28e167b1bb1c31946b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}