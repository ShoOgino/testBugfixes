{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,SolrParams,Bucket[],FieldComparator[],Metric[],int,int,int,boolean,String,boolean,int,String).mjava","commits":[{"id":"011d43366b2da54d1652d93e7ec6412848eeb009","date":1541521420,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,SolrParams,Bucket[],FieldComparator[],Metric[],int,int,int,boolean,String,boolean,int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,SolrParams,Bucket[],FieldComparator[],Metric[],int,String).mjava","sourceNew":"  private void init(String collection, SolrParams params, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int rows, int offset, int bucketSizeLimit, boolean refine, String method, boolean serializeBucketSizeLimit, int overfetch, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.params = new ModifiableSolrParams(params);\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.rows = rows;\n    this.offset = offset;\n    this.refine = refine;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    this.method = method;\n    this.serializeBucketSizeLimit = serializeBucketSizeLimit;\n    this.overfetch = overfetch;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","sourceOld":"  private void init(String collection, SolrParams params, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.params = new ModifiableSolrParams(params);\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    if (this.bucketSizeLimit == -1) {\n      this.bucketSizeLimit = Integer.MAX_VALUE;\n    }\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"011d43366b2da54d1652d93e7ec6412848eeb009":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["011d43366b2da54d1652d93e7ec6412848eeb009"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["011d43366b2da54d1652d93e7ec6412848eeb009"],"011d43366b2da54d1652d93e7ec6412848eeb009":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}