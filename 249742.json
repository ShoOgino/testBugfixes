{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getNumShards(String).mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getNumShards(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#getNumShards(String).mjava","sourceNew":"  protected int getNumShards(String defaultCollection) {\n    Map<String,Slice> slices = this.zkStateReader.getClusterState().getSlices(defaultCollection);\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getShards().size();\n    }\n    \n    return cnt;\n  }\n\n","sourceOld":"  private int getNumShards(String defaultCollection) {\n    Map<String,Slice> slices = this.zkStateReader.getClusterState().getSlices(defaultCollection);\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getShards().size();\n    }\n    \n    return cnt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getNumShards(String).mjava","pathOld":"/dev/null","sourceNew":"  protected int getNumShards(String defaultCollection) {\n    Map<String,Slice> slices = this.zkStateReader.getClusterState().getSlices(defaultCollection);\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getShards().size();\n    }\n    \n    return cnt;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getNumShards(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#getNumShards(String).mjava","sourceNew":"  protected int getNumShards(String defaultCollection) {\n    Map<String,Slice> slices = this.zkStateReader.getClusterState().getSlices(defaultCollection);\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getShards().size();\n    }\n    \n    return cnt;\n  }\n\n","sourceOld":"  private int getNumShards(String defaultCollection) {\n    Map<String,Slice> slices = this.zkStateReader.getClusterState().getSlices(defaultCollection);\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getShards().size();\n    }\n    \n    return cnt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getNumShards(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getNumShards(String).mjava","sourceNew":"  protected int getNumShards(String defaultCollection) {\n    Map<String,Slice> slices = this.zkStateReader.getClusterState().getSlices(defaultCollection);\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getReplicasMap().size();\n    }\n    \n    return cnt;\n  }\n\n","sourceOld":"  protected int getNumShards(String defaultCollection) {\n    Map<String,Slice> slices = this.zkStateReader.getClusterState().getSlices(defaultCollection);\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getShards().size();\n    }\n    \n    return cnt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getNumShards(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getNumShards(String).mjava","sourceNew":"  protected int getNumShards(String defaultCollection) {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    Map<String,Slice> slices = zkStateReader.getClusterState().getSlices(defaultCollection);\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getReplicasMap().size();\n    }\n    \n    return cnt;\n  }\n\n","sourceOld":"  protected int getNumShards(String defaultCollection) {\n    Map<String,Slice> slices = this.zkStateReader.getClusterState().getSlices(defaultCollection);\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getReplicasMap().size();\n    }\n    \n    return cnt;\n  }\n\n","bugFix":null,"bugIntro":["82f063229e39b59c960866c1bc49285b95676491"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getNumShards(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getNumShards(String).mjava","sourceNew":"  protected int getNumShards(String defaultCollection) {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    Map<String,Slice> slices = zkStateReader.getClusterState().getSlices(defaultCollection);\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getReplicasMap().size();\n    }\n    \n    return cnt;\n  }\n\n","sourceOld":"  protected int getNumShards(String defaultCollection) {\n    Map<String,Slice> slices = this.zkStateReader.getClusterState().getSlices(defaultCollection);\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getReplicasMap().size();\n    }\n    \n    return cnt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82f063229e39b59c960866c1bc49285b95676491","date":1352733047,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getNumShards(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getNumShards(String).mjava","sourceNew":"  protected int getNumShards(String collection) {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    Map<String,Slice> slices = zkStateReader.getClusterState().getSlices(collection);\n    if (slices == null) {\n      throw new IllegalArgumentException(\"Could not find collection:\" + collection);\n    }\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getReplicasMap().size();\n    }\n    \n    return cnt;\n  }\n\n","sourceOld":"  protected int getNumShards(String defaultCollection) {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    Map<String,Slice> slices = zkStateReader.getClusterState().getSlices(defaultCollection);\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getReplicasMap().size();\n    }\n    \n    return cnt;\n  }\n\n","bugFix":["d9405f486872f1e416304dfe389741f4ee2f8a4d","2c30e4c1cee08b3b229a77991882594fe7250b66"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getNumShards(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getNumShards(String).mjava","sourceNew":"  protected int getNumShards(String collection) {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    Map<String,Slice> slices = zkStateReader.getClusterState().getSlicesMap(collection);\n    if (slices == null) {\n      throw new IllegalArgumentException(\"Could not find collection:\" + collection);\n    }\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getReplicasMap().size();\n    }\n    \n    return cnt;\n  }\n\n","sourceOld":"  protected int getNumShards(String collection) {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    Map<String,Slice> slices = zkStateReader.getClusterState().getSlices(collection);\n    if (slices == null) {\n      throw new IllegalArgumentException(\"Could not find collection:\" + collection);\n    }\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getReplicasMap().size();\n    }\n    \n    return cnt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getNumShards(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getNumShards(String).mjava","sourceNew":"  protected int getNumShards(String collection) {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    Map<String,Slice> slices = zkStateReader.getClusterState().getSlicesMap(collection);\n    if (slices == null) {\n      throw new IllegalArgumentException(\"Could not find collection:\" + collection);\n    }\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getReplicasMap().size();\n    }\n    \n    return cnt;\n  }\n\n","sourceOld":"  protected int getNumShards(String defaultCollection) {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    Map<String,Slice> slices = zkStateReader.getClusterState().getSlices(defaultCollection);\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getReplicasMap().size();\n    }\n    \n    return cnt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3fd765dc8fa1dd67f45e1ef91c28a2c147ea39","date":1355888669,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getNumShards(String).mjava","sourceNew":null,"sourceOld":"  protected int getNumShards(String collection) {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    Map<String,Slice> slices = zkStateReader.getClusterState().getSlicesMap(collection);\n    if (slices == null) {\n      throw new IllegalArgumentException(\"Could not find collection:\" + collection);\n    }\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getReplicasMap().size();\n    }\n    \n    return cnt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getNumShards(String).mjava","sourceNew":null,"sourceOld":"  protected int getNumShards(String collection) {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    Map<String,Slice> slices = zkStateReader.getClusterState().getSlicesMap(collection);\n    if (slices == null) {\n      throw new IllegalArgumentException(\"Could not find collection:\" + collection);\n    }\n    int cnt = 0;\n    for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n      cnt += entry.getValue().getReplicasMap().size();\n    }\n    \n    return cnt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","7c3fd765dc8fa1dd67f45e1ef91c28a2c147ea39"],"7c3fd765dc8fa1dd67f45e1ef91c28a2c147ea39":["c5a558d54519c651068ddb202f03befefb1514a7"],"fa64435b5902ce266c23755a4a00691a3285dab8":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d9405f486872f1e416304dfe389741f4ee2f8a4d","c5a558d54519c651068ddb202f03befefb1514a7"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["fa64435b5902ce266c23755a4a00691a3285dab8"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"c5a558d54519c651068ddb202f03befefb1514a7":["82f063229e39b59c960866c1bc49285b95676491"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"82f063229e39b59c960866c1bc49285b95676491":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"f2126b84bd093fa3d921582a109a0ee578c28126":["fa64435b5902ce266c23755a4a00691a3285dab8","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c3fd765dc8fa1dd67f45e1ef91c28a2c147ea39"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"7c3fd765dc8fa1dd67f45e1ef91c28a2c147ea39":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fa64435b5902ce266c23755a4a00691a3285dab8":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["407687e67faf6e1f02a211ca078d8e3eed631027","82f063229e39b59c960866c1bc49285b95676491","f2126b84bd093fa3d921582a109a0ee578c28126"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"c5a558d54519c651068ddb202f03befefb1514a7":["7c3fd765dc8fa1dd67f45e1ef91c28a2c147ea39","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"82f063229e39b59c960866c1bc49285b95676491":["c5a558d54519c651068ddb202f03befefb1514a7"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"2c30e4c1cee08b3b229a77991882594fe7250b66":["fa64435b5902ce266c23755a4a00691a3285dab8","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}