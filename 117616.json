{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph#getShortPath().mjava","commits":[{"id":"05ff0cc6e864c7d71a48579f2acfca4f58943568","date":1242295762,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph#getShortPath().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * 用veterbi算法计算从起点到终点的最短路径\n   * \n   * @return\n   */\n  public List getShortPath() {\n    int current;\n    int nodeCount = getToCount();\n    List path = new ArrayList();\n    PathNode zeroPath = new PathNode();\n    zeroPath.weight = 0;\n    zeroPath.preNode = 0;\n    path.add(zeroPath);\n    for (current = 1; current <= nodeCount; current++) {\n      double weight;\n      List edges = getToList(current);\n\n      double minWeight = Double.MAX_VALUE;\n      SegTokenPair minEdge = null;\n      for (Iterator iter1 = edges.iterator(); iter1.hasNext();) {\n        SegTokenPair edge = (SegTokenPair) iter1.next();\n        weight = edge.weight;\n        PathNode preNode = (PathNode) path.get(edge.from);\n        if (preNode.weight + weight < minWeight) {\n          minWeight = preNode.weight + weight;\n          minEdge = edge;\n        }\n      }\n      PathNode newNode = new PathNode();\n      newNode.weight = minWeight;\n      newNode.preNode = minEdge.from;\n      path.add(newNode);\n    }\n\n    // 接下来从nodePaths中计算从起点到终点的真实路径\n    int preNode, lastNode;\n    lastNode = path.size() - 1;\n    current = lastNode;\n    List rpath = new ArrayList();\n    List resultPath = new ArrayList();\n\n    rpath.add(new Integer(current));\n    while (current != 0) {\n      PathNode currentPathNode = (PathNode) path.get(current);\n      preNode = currentPathNode.preNode;\n      rpath.add(new Integer(preNode));\n      current = preNode;\n    }\n    for (int j = rpath.size() - 1; j >= 0; j--) {\n      Integer idInteger = (Integer) rpath.get(j);\n      int id = idInteger.intValue();\n      SegToken t = (SegToken) segTokenList.get(id);\n      resultPath.add(t);\n    }\n    return resultPath;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be5ef2f970a6c1141562b06dd26ed04c3dc29d70","date":1246444343,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph#getShortPath().mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph#getShortPath().mjava","sourceNew":"  /**\n   * Find the shortest path with the Viterbi algorithm.\n   * @return {@link List}\n   */\n  public List getShortPath() {\n    int current;\n    int nodeCount = getToCount();\n    List path = new ArrayList();\n    PathNode zeroPath = new PathNode();\n    zeroPath.weight = 0;\n    zeroPath.preNode = 0;\n    path.add(zeroPath);\n    for (current = 1; current <= nodeCount; current++) {\n      double weight;\n      List edges = getToList(current);\n\n      double minWeight = Double.MAX_VALUE;\n      SegTokenPair minEdge = null;\n      for (Iterator iter1 = edges.iterator(); iter1.hasNext();) {\n        SegTokenPair edge = (SegTokenPair) iter1.next();\n        weight = edge.weight;\n        PathNode preNode = (PathNode) path.get(edge.from);\n        if (preNode.weight + weight < minWeight) {\n          minWeight = preNode.weight + weight;\n          minEdge = edge;\n        }\n      }\n      PathNode newNode = new PathNode();\n      newNode.weight = minWeight;\n      newNode.preNode = minEdge.from;\n      path.add(newNode);\n    }\n\n    // Calculate PathNodes\n    int preNode, lastNode;\n    lastNode = path.size() - 1;\n    current = lastNode;\n    List rpath = new ArrayList();\n    List resultPath = new ArrayList();\n\n    rpath.add(new Integer(current));\n    while (current != 0) {\n      PathNode currentPathNode = (PathNode) path.get(current);\n      preNode = currentPathNode.preNode;\n      rpath.add(new Integer(preNode));\n      current = preNode;\n    }\n    for (int j = rpath.size() - 1; j >= 0; j--) {\n      Integer idInteger = (Integer) rpath.get(j);\n      int id = idInteger.intValue();\n      SegToken t = (SegToken) segTokenList.get(id);\n      resultPath.add(t);\n    }\n    return resultPath;\n\n  }\n\n","sourceOld":"  /**\n   * 用veterbi算法计算从起点到终点的最短路径\n   * \n   * @return\n   */\n  public List getShortPath() {\n    int current;\n    int nodeCount = getToCount();\n    List path = new ArrayList();\n    PathNode zeroPath = new PathNode();\n    zeroPath.weight = 0;\n    zeroPath.preNode = 0;\n    path.add(zeroPath);\n    for (current = 1; current <= nodeCount; current++) {\n      double weight;\n      List edges = getToList(current);\n\n      double minWeight = Double.MAX_VALUE;\n      SegTokenPair minEdge = null;\n      for (Iterator iter1 = edges.iterator(); iter1.hasNext();) {\n        SegTokenPair edge = (SegTokenPair) iter1.next();\n        weight = edge.weight;\n        PathNode preNode = (PathNode) path.get(edge.from);\n        if (preNode.weight + weight < minWeight) {\n          minWeight = preNode.weight + weight;\n          minEdge = edge;\n        }\n      }\n      PathNode newNode = new PathNode();\n      newNode.weight = minWeight;\n      newNode.preNode = minEdge.from;\n      path.add(newNode);\n    }\n\n    // 接下来从nodePaths中计算从起点到终点的真实路径\n    int preNode, lastNode;\n    lastNode = path.size() - 1;\n    current = lastNode;\n    List rpath = new ArrayList();\n    List resultPath = new ArrayList();\n\n    rpath.add(new Integer(current));\n    while (current != 0) {\n      PathNode currentPathNode = (PathNode) path.get(current);\n      preNode = currentPathNode.preNode;\n      rpath.add(new Integer(preNode));\n      current = preNode;\n    }\n    for (int j = rpath.size() - 1; j >= 0; j--) {\n      Integer idInteger = (Integer) rpath.get(j);\n      int id = idInteger.intValue();\n      SegToken t = (SegToken) segTokenList.get(id);\n      resultPath.add(t);\n    }\n    return resultPath;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph#getShortPath().mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph#getShortPath().mjava","sourceNew":"  /**\n   * Find the shortest path with the Viterbi algorithm.\n   * @return {@link List}\n   */\n  public List getShortPath() {\n    int current;\n    int nodeCount = getToCount();\n    List path = new ArrayList();\n    PathNode zeroPath = new PathNode();\n    zeroPath.weight = 0;\n    zeroPath.preNode = 0;\n    path.add(zeroPath);\n    for (current = 1; current <= nodeCount; current++) {\n      double weight;\n      List edges = getToList(current);\n\n      double minWeight = Double.MAX_VALUE;\n      SegTokenPair minEdge = null;\n      for (Iterator iter1 = edges.iterator(); iter1.hasNext();) {\n        SegTokenPair edge = (SegTokenPair) iter1.next();\n        weight = edge.weight;\n        PathNode preNode = (PathNode) path.get(edge.from);\n        if (preNode.weight + weight < minWeight) {\n          minWeight = preNode.weight + weight;\n          minEdge = edge;\n        }\n      }\n      PathNode newNode = new PathNode();\n      newNode.weight = minWeight;\n      newNode.preNode = minEdge.from;\n      path.add(newNode);\n    }\n\n    // Calculate PathNodes\n    int preNode, lastNode;\n    lastNode = path.size() - 1;\n    current = lastNode;\n    List rpath = new ArrayList();\n    List resultPath = new ArrayList();\n\n    rpath.add(new Integer(current));\n    while (current != 0) {\n      PathNode currentPathNode = (PathNode) path.get(current);\n      preNode = currentPathNode.preNode;\n      rpath.add(new Integer(preNode));\n      current = preNode;\n    }\n    for (int j = rpath.size() - 1; j >= 0; j--) {\n      Integer idInteger = (Integer) rpath.get(j);\n      int id = idInteger.intValue();\n      SegToken t = (SegToken) segTokenList.get(id);\n      resultPath.add(t);\n    }\n    return resultPath;\n\n  }\n\n","sourceOld":"  /**\n   * Find the shortest path with the Viterbi algorithm.\n   * @return {@link List}\n   */\n  public List getShortPath() {\n    int current;\n    int nodeCount = getToCount();\n    List path = new ArrayList();\n    PathNode zeroPath = new PathNode();\n    zeroPath.weight = 0;\n    zeroPath.preNode = 0;\n    path.add(zeroPath);\n    for (current = 1; current <= nodeCount; current++) {\n      double weight;\n      List edges = getToList(current);\n\n      double minWeight = Double.MAX_VALUE;\n      SegTokenPair minEdge = null;\n      for (Iterator iter1 = edges.iterator(); iter1.hasNext();) {\n        SegTokenPair edge = (SegTokenPair) iter1.next();\n        weight = edge.weight;\n        PathNode preNode = (PathNode) path.get(edge.from);\n        if (preNode.weight + weight < minWeight) {\n          minWeight = preNode.weight + weight;\n          minEdge = edge;\n        }\n      }\n      PathNode newNode = new PathNode();\n      newNode.weight = minWeight;\n      newNode.preNode = minEdge.from;\n      path.add(newNode);\n    }\n\n    // Calculate PathNodes\n    int preNode, lastNode;\n    lastNode = path.size() - 1;\n    current = lastNode;\n    List rpath = new ArrayList();\n    List resultPath = new ArrayList();\n\n    rpath.add(new Integer(current));\n    while (current != 0) {\n      PathNode currentPathNode = (PathNode) path.get(current);\n      preNode = currentPathNode.preNode;\n      rpath.add(new Integer(preNode));\n      current = preNode;\n    }\n    for (int j = rpath.size() - 1; j >= 0; j--) {\n      Integer idInteger = (Integer) rpath.get(j);\n      int id = idInteger.intValue();\n      SegToken t = (SegToken) segTokenList.get(id);\n      resultPath.add(t);\n    }\n    return resultPath;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be5ef2f970a6c1141562b06dd26ed04c3dc29d70":["05ff0cc6e864c7d71a48579f2acfca4f58943568"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["be5ef2f970a6c1141562b06dd26ed04c3dc29d70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05ff0cc6e864c7d71a48579f2acfca4f58943568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"be5ef2f970a6c1141562b06dd26ed04c3dc29d70":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05ff0cc6e864c7d71a48579f2acfca4f58943568"],"05ff0cc6e864c7d71a48579f2acfca4f58943568":["be5ef2f970a6c1141562b06dd26ed04c3dc29d70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}