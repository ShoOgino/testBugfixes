{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleReportUncaughtExceptions#apply(Statement,Description).mjava","commits":[{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleReportUncaughtExceptions#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/UncaughtExceptionsRule#apply(Statement,Description).mjava","sourceNew":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      public void evaluate() throws Throwable {\n        final ArrayList<Throwable> errors = new ArrayList<Throwable>();\n        try {\n          setupHandler();\n          s.evaluate();\n        } catch (Throwable t) {\n          errors.add(t);\n        } finally {\n          restoreHandler();\n        }\n\n        synchronized (uncaughtExceptions) {\n          for (UncaughtExceptionEntry e : uncaughtExceptions) {\n            errors.add(new UncaughtExceptionsInBackgroundThread(e));\n          }\n          uncaughtExceptions.clear();\n        }\n\n        MultipleFailureException.assertEmpty(errors);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      public void evaluate() throws Throwable {\n        final ArrayList<Throwable> errors = new ArrayList<Throwable>();\n        try {\n          setupHandler();\n          s.evaluate();\n        } catch (Throwable t) {\n          errors.add(t);\n        } finally {\n          restoreHandler();\n        }\n\n        synchronized (uncaughtExceptions) {\n          for (UncaughtExceptionEntry e : uncaughtExceptions) {\n            errors.add(new UncaughtExceptionsInBackgroundThread(e));\n          }\n          uncaughtExceptions.clear();\n        }\n\n        if (hasNonAssumptionErrors(errors)) {\n          if (ltc == null) {\n            // class level failure (e.g. afterclass)\n            LuceneTestCase.reportPartialFailureInfo();\n          } else {\n            // failure in a method\n            ltc.reportAdditionalFailureInfo();\n          }\n        }\n        MultipleFailureException.assertEmpty(errors);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c8719b2c0b382be11f5b193b6fc14bc310e906b","date":1344770591,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleReportUncaughtExceptions#apply(Statement,Description).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      public void evaluate() throws Throwable {\n        final ArrayList<Throwable> errors = new ArrayList<Throwable>();\n        try {\n          setupHandler();\n          s.evaluate();\n        } catch (Throwable t) {\n          errors.add(t);\n        } finally {\n          restoreHandler();\n        }\n\n        synchronized (uncaughtExceptions) {\n          for (UncaughtExceptionEntry e : uncaughtExceptions) {\n            errors.add(new UncaughtExceptionsInBackgroundThread(e));\n          }\n          uncaughtExceptions.clear();\n        }\n\n        MultipleFailureException.assertEmpty(errors);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleReportUncaughtExceptions#apply(Statement,Description).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      public void evaluate() throws Throwable {\n        final ArrayList<Throwable> errors = new ArrayList<Throwable>();\n        try {\n          setupHandler();\n          s.evaluate();\n        } catch (Throwable t) {\n          errors.add(t);\n        } finally {\n          restoreHandler();\n        }\n\n        synchronized (uncaughtExceptions) {\n          for (UncaughtExceptionEntry e : uncaughtExceptions) {\n            errors.add(new UncaughtExceptionsInBackgroundThread(e));\n          }\n          uncaughtExceptions.clear();\n        }\n\n        MultipleFailureException.assertEmpty(errors);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleReportUncaughtExceptions#apply(Statement,Description).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      public void evaluate() throws Throwable {\n        final ArrayList<Throwable> errors = new ArrayList<Throwable>();\n        try {\n          setupHandler();\n          s.evaluate();\n        } catch (Throwable t) {\n          errors.add(t);\n        } finally {\n          restoreHandler();\n        }\n\n        synchronized (uncaughtExceptions) {\n          for (UncaughtExceptionEntry e : uncaughtExceptions) {\n            errors.add(new UncaughtExceptionsInBackgroundThread(e));\n          }\n          uncaughtExceptions.clear();\n        }\n\n        MultipleFailureException.assertEmpty(errors);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["5da0b42730b6b99b31389ef94cb97384e83b9ede","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["5da0b42730b6b99b31389ef94cb97384e83b9ede","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"1c8719b2c0b382be11f5b193b6fc14bc310e906b":["5da0b42730b6b99b31389ef94cb97384e83b9ede"]},"commit2Childs":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"1c8719b2c0b382be11f5b193b6fc14bc310e906b":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}