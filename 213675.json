{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper#testFuzzy().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper#testFuzzy().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper#testFuzzy().mjava","sourceNew":"  public void testFuzzy() throws Exception {\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"broan\"));\n    SpanQuery sfq = new SpanMultiTermQueryWrapper<FuzzyQuery>(fq);\n    // will not match quick brown fox\n    SpanPositionRangeQuery sprq = new SpanPositionRangeQuery(sfq, 3, 6);\n    assertEquals(2, searcher.search(sprq, 10).totalHits);\n  }\n\n","sourceOld":"  public void testFuzzy() throws Exception {\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"broan\"));\n    SpanQuery sfq = new SpanMultiTermQueryWrapper<FuzzyQuery>(fq);\n    // will not match quick brown fox\n    SpanPositionRangeQuery sprq = new SpanPositionRangeQuery(sfq, 3, 6);\n    assertEquals(2, searcher.search(sprq, 10).totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper#testFuzzy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper#testFuzzy().mjava","sourceNew":"  public void testFuzzy() throws Exception {\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"broan\"));\n    SpanQuery sfq = new SpanMultiTermQueryWrapper<>(fq);\n    // will not match quick brown fox\n    SpanPositionRangeQuery sprq = new SpanPositionRangeQuery(sfq, 3, 6);\n    assertEquals(2, searcher.search(sprq, 10).totalHits);\n  }\n\n","sourceOld":"  public void testFuzzy() throws Exception {\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"broan\"));\n    SpanQuery sfq = new SpanMultiTermQueryWrapper<FuzzyQuery>(fq);\n    // will not match quick brown fox\n    SpanPositionRangeQuery sprq = new SpanPositionRangeQuery(sfq, 3, 6);\n    assertEquals(2, searcher.search(sprq, 10).totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"470eaac3a77cf637b62126a5408b178d7be93eb1","date":1531830722,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper#testFuzzy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper#testFuzzy().mjava","sourceNew":"  public void testFuzzy() throws Exception {\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"broan\"));\n    SpanQuery sfq = new SpanMultiTermQueryWrapper<>(fq);\n    // will not match quick brown fox\n    SpanPositionRangeQuery sprq = new SpanPositionRangeQuery(sfq, 3, 6);\n    assertEquals(2, searcher.count(sprq));\n  }\n\n","sourceOld":"  public void testFuzzy() throws Exception {\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"broan\"));\n    SpanQuery sfq = new SpanMultiTermQueryWrapper<>(fq);\n    // will not match quick brown fox\n    SpanPositionRangeQuery sprq = new SpanPositionRangeQuery(sfq, 3, 6);\n    assertEquals(2, searcher.search(sprq, 10).totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper#testFuzzy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanMultiTermQueryWrapper#testFuzzy().mjava","sourceNew":"  public void testFuzzy() throws Exception {\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"broan\"));\n    SpanQuery sfq = new SpanMultiTermQueryWrapper<>(fq);\n    // will not match quick brown fox\n    SpanPositionRangeQuery sprq = new SpanPositionRangeQuery(sfq, 3, 6);\n    assertEquals(2, searcher.count(sprq));\n  }\n\n","sourceOld":"  public void testFuzzy() throws Exception {\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"broan\"));\n    SpanQuery sfq = new SpanMultiTermQueryWrapper<>(fq);\n    // will not match quick brown fox\n    SpanPositionRangeQuery sprq = new SpanPositionRangeQuery(sfq, 3, 6);\n    assertEquals(2, searcher.search(sprq, 10).totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","470eaac3a77cf637b62126a5408b178d7be93eb1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"470eaac3a77cf637b62126a5408b178d7be93eb1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["470eaac3a77cf637b62126a5408b178d7be93eb1"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","470eaac3a77cf637b62126a5408b178d7be93eb1"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}