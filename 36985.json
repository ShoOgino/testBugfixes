{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder.EntityRunner#run(DocWrapper,String,EntityRow).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder.EntityRunner#run(DocWrapper,String,EntityRow).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder.EntityRunner#run(DocWrapper,String,EntityRow).mjava","sourceNew":"    public void run(DocWrapper docWrapper, final String currProcess, final EntityRow rows) throws Exception {\n      entityInitialized =  false;\n      this.docWrapper = docWrapper;\n      this.currentProcess = currProcess;\n      entityEnded.set(false);\n      try {\n        if(entityProcessorWrapper.size() <= 1){\n          runAThread(entityProcessorWrapper.get(0), rows, currProcess);\n        } else {\n          final CountDownLatch latch = new CountDownLatch(entityProcessorWrapper.size());\n          for (final ThreadedEntityProcessorWrapper processorWrapper : entityProcessorWrapper) {\n            Runnable runnable = new Runnable() {\n              public void run() {\n                try {\n                  runAThread(processorWrapper, rows, currProcess);\n                }catch(Exception e) {\n                  entityEnded.set(true);\n                  exception = e;\n                } finally {\n                  latch.countDown();\n                } \n              }\n            };\n            executorSvc.execute(runnable);\n          }          \n          try {\n            latch.await();\n          } catch (InterruptedException e) {\n            //TODO\n          }\n          Exception copy = exception;\n          if(copy != null){\n            exception = null;\n            throw copy;\n          }\n        }\n      } finally {\n        entityProcessor.destroy();\n      }\n\n\n    }\n\n","sourceOld":"    public void run(DocWrapper docWrapper, final String currProcess, final EntityRow rows) throws Exception {\n      entityInitialized =  false;\n      this.docWrapper = docWrapper;\n      this.currentProcess = currProcess;\n      entityEnded.set(false);\n      try {\n        if(entityProcessorWrapper.size() <= 1){\n          runAThread(entityProcessorWrapper.get(0), rows, currProcess);\n        } else {\n          final CountDownLatch latch = new CountDownLatch(entityProcessorWrapper.size());\n          for (final ThreadedEntityProcessorWrapper processorWrapper : entityProcessorWrapper) {\n            Runnable runnable = new Runnable() {\n              public void run() {\n                try {\n                  runAThread(processorWrapper, rows, currProcess);\n                }catch(Exception e) {\n                  entityEnded.set(true);\n                  exception = e;\n                } finally {\n                  latch.countDown();\n                } \n              }\n            };\n            executorSvc.execute(runnable);\n          }          \n          try {\n            latch.await();\n          } catch (InterruptedException e) {\n            //TODO\n          }\n          Exception copy = exception;\n          if(copy != null){\n            exception = null;\n            throw copy;\n          }\n        }\n      } finally {\n        entityProcessor.destroy();\n      }\n\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder.EntityRunner#run(DocWrapper,String,EntityRow).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder.EntityRunner#run(DocWrapper,String,EntityRow).mjava","sourceNew":"    public void run(DocWrapper docWrapper, final String currProcess, final EntityRow rows) throws Exception {\n      entityInitialized =  false;\n      this.docWrapper = docWrapper;\n      this.currentProcess = currProcess;\n      entityEnded.set(false);\n      try {\n        if(entityProcessorWrapper.size() <= 1){\n          runAThread(entityProcessorWrapper.get(0), rows, currProcess);\n        } else {\n          final CountDownLatch latch = new CountDownLatch(entityProcessorWrapper.size());\n          for (final ThreadedEntityProcessorWrapper processorWrapper : entityProcessorWrapper) {\n            Runnable runnable = new Runnable() {\n              public void run() {\n                try {\n                  runAThread(processorWrapper, rows, currProcess);\n                }catch(Exception e) {\n                  entityEnded.set(true);\n                  exception = e;\n                } finally {\n                  latch.countDown();\n                } \n              }\n            };\n            executorSvc.execute(runnable);\n          }          \n          try {\n            latch.await();\n          } catch (InterruptedException e) {\n            //TODO\n          }\n          Exception copy = exception;\n          if(copy != null){\n            exception = null;\n            throw copy;\n          }\n        }\n      } finally {\n        entityProcessor.destroy();\n      }\n\n\n    }\n\n","sourceOld":"    public void run(DocWrapper docWrapper, final String currProcess, final EntityRow rows) throws Exception {\n      entityInitialized =  false;\n      this.docWrapper = docWrapper;\n      this.currentProcess = currProcess;\n      entityEnded.set(false);\n      try {\n        if(entityProcessorWrapper.size() <= 1){\n          runAThread(entityProcessorWrapper.get(0), rows, currProcess);\n        } else {\n          final CountDownLatch latch = new CountDownLatch(entityProcessorWrapper.size());\n          for (final ThreadedEntityProcessorWrapper processorWrapper : entityProcessorWrapper) {\n            Runnable runnable = new Runnable() {\n              public void run() {\n                try {\n                  runAThread(processorWrapper, rows, currProcess);\n                }catch(Exception e) {\n                  entityEnded.set(true);\n                  exception = e;\n                } finally {\n                  latch.countDown();\n                } \n              }\n            };\n            executorSvc.execute(runnable);\n          }          \n          try {\n            latch.await();\n          } catch (InterruptedException e) {\n            //TODO\n          }\n          Exception copy = exception;\n          if(copy != null){\n            exception = null;\n            throw copy;\n          }\n        }\n      } finally {\n        entityProcessor.destroy();\n      }\n\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7477cc545b0653fee13cfdaa4848535d107b96a9","date":1329404953,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder.EntityRunner#run(DocWrapper,String,EntityRow).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder.EntityRunner#run(DocWrapper,String,EntityRow).mjava","sourceNew":"    public void run(DocWrapper docWrapper, final String currProcess, final EntityRow rows) throws Exception {\n      entityInitialized =  false;\n      this.docWrapper = docWrapper;\n      this.currentProcess = currProcess;\n      entityEnded.set(false);\n      try {\n        if(entityProcessorWrapper.size() <= 1){\n          runAThread(entityProcessorWrapper.get(0), rows, currProcess);\n        } else {\n          final CountDownLatch latch = new CountDownLatch(entityProcessorWrapper.size());\n          for (final ThreadedEntityProcessorWrapper processorWrapper : entityProcessorWrapper) {\n            Runnable runnable = new Runnable() {\n              public void run() {\n                try {\n                  runAThread(processorWrapper, rows, currProcess);\n                }catch(Exception e) {\n                  entityEnded.set(true);\n                  exception = e;\n                } finally {\n                  latch.countDown();\n                } \n              }\n            };\n            executorSvc.execute(runnable);\n          }          \n          try {\n            latch.await();\n          } catch (InterruptedException e) {\n            //TODO\n          }\n          Exception copy = exception;\n          if(copy != null){\n            exception = null;\n            throw copy;\n          }\n        }\n      } finally {\n      }\n\n\n    }\n\n","sourceOld":"    public void run(DocWrapper docWrapper, final String currProcess, final EntityRow rows) throws Exception {\n      entityInitialized =  false;\n      this.docWrapper = docWrapper;\n      this.currentProcess = currProcess;\n      entityEnded.set(false);\n      try {\n        if(entityProcessorWrapper.size() <= 1){\n          runAThread(entityProcessorWrapper.get(0), rows, currProcess);\n        } else {\n          final CountDownLatch latch = new CountDownLatch(entityProcessorWrapper.size());\n          for (final ThreadedEntityProcessorWrapper processorWrapper : entityProcessorWrapper) {\n            Runnable runnable = new Runnable() {\n              public void run() {\n                try {\n                  runAThread(processorWrapper, rows, currProcess);\n                }catch(Exception e) {\n                  entityEnded.set(true);\n                  exception = e;\n                } finally {\n                  latch.countDown();\n                } \n              }\n            };\n            executorSvc.execute(runnable);\n          }          \n          try {\n            latch.await();\n          } catch (InterruptedException e) {\n            //TODO\n          }\n          Exception copy = exception;\n          if(copy != null){\n            exception = null;\n            throw copy;\n          }\n        }\n      } finally {\n        entityProcessor.destroy();\n      }\n\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b84e23a1c994ea309896dd9424563e0092f3607","date":1332774278,"type":4,"author":"James Dyer","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder.EntityRunner#run(DocWrapper,String,EntityRow).mjava","sourceNew":null,"sourceOld":"    public void run(DocWrapper docWrapper, final String currProcess, final EntityRow rows) throws Exception {\n      entityInitialized =  false;\n      this.docWrapper = docWrapper;\n      this.currentProcess = currProcess;\n      entityEnded.set(false);\n      try {\n        if(entityProcessorWrapper.size() <= 1){\n          runAThread(entityProcessorWrapper.get(0), rows, currProcess);\n        } else {\n          final CountDownLatch latch = new CountDownLatch(entityProcessorWrapper.size());\n          for (final ThreadedEntityProcessorWrapper processorWrapper : entityProcessorWrapper) {\n            Runnable runnable = new Runnable() {\n              public void run() {\n                try {\n                  runAThread(processorWrapper, rows, currProcess);\n                }catch(Exception e) {\n                  entityEnded.set(true);\n                  exception = e;\n                } finally {\n                  latch.countDown();\n                } \n              }\n            };\n            executorSvc.execute(runnable);\n          }          \n          try {\n            latch.await();\n          } catch (InterruptedException e) {\n            //TODO\n          }\n          Exception copy = exception;\n          if(copy != null){\n            exception = null;\n            throw copy;\n          }\n        }\n      } finally {\n      }\n\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4b84e23a1c994ea309896dd9424563e0092f3607":["7477cc545b0653fee13cfdaa4848535d107b96a9"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7477cc545b0653fee13cfdaa4848535d107b96a9":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4b84e23a1c994ea309896dd9424563e0092f3607"]},"commit2Childs":{"4b84e23a1c994ea309896dd9424563e0092f3607":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7477cc545b0653fee13cfdaa4848535d107b96a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"7477cc545b0653fee13cfdaa4848535d107b96a9":["4b84e23a1c994ea309896dd9424563e0092f3607"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}