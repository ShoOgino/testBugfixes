{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsEnum#refillDocs().mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsEnum#refillDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsEnum#refillDocs().mjava","sourceNew":"    private void refillDocs() throws IOException {\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= BLOCK_SIZE) {\n        // if (DEBUG) {\n        //   System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        // }\n        forUtil.readBlock(docIn, encoded, docDeltaBuffer);\n\n        if (indexHasFreq) {\n          // if (DEBUG) {\n          //   System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n          // }\n          if (needsFreq) {\n            forUtil.readBlock(docIn, encoded, freqBuffer);\n          } else {\n            forUtil.skipBlock(docIn); // skip over freqs\n          }\n        }\n      } else if (docFreq == 1) {\n        docDeltaBuffer[0] = singletonDocID;\n        freqBuffer[0] = (int) totalTermFreq;\n      } else {\n        // Read vInts:\n        // if (DEBUG) {\n        //   System.out.println(\"    fill last vInt block from fp=\" + docIn.getFilePointer());\n        // }\n        readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, indexHasFreq);\n      }\n      docBufferUpto = 0;\n    }\n\n","sourceOld":"    private void refillDocs() throws IOException {\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= BLOCK_SIZE) {\n        // if (DEBUG) {\n        //   System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        // }\n        forUtil.readBlock(docIn, encoded, docDeltaBuffer);\n\n        if (indexHasFreq) {\n          // if (DEBUG) {\n          //   System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n          // }\n          if (needsFreq) {\n            forUtil.readBlock(docIn, encoded, freqBuffer);\n          } else {\n            forUtil.skipBlock(docIn); // skip over freqs\n          }\n        }\n      } else if (docFreq == 1) {\n        docDeltaBuffer[0] = singletonDocID;\n        freqBuffer[0] = (int) totalTermFreq;\n      } else {\n        // Read vInts:\n        // if (DEBUG) {\n        //   System.out.println(\"    fill last vInt block from fp=\" + docIn.getFilePointer());\n        // }\n        readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, indexHasFreq);\n      }\n      docBufferUpto = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsEnum#refillDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsEnum#refillDocs().mjava","sourceNew":"    private void refillDocs() throws IOException {\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= BLOCK_SIZE) {\n        // if (DEBUG) {\n        //   System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        // }\n        forUtil.readBlock(docIn, encoded, docDeltaBuffer);\n\n        if (indexHasFreq) {\n          // if (DEBUG) {\n          //   System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n          // }\n          if (needsFreq) {\n            forUtil.readBlock(docIn, encoded, freqBuffer);\n          } else {\n            forUtil.skipBlock(docIn); // skip over freqs\n          }\n        }\n      } else if (docFreq == 1) {\n        docDeltaBuffer[0] = singletonDocID;\n        freqBuffer[0] = (int) totalTermFreq;\n      } else {\n        // Read vInts:\n        // if (DEBUG) {\n        //   System.out.println(\"    fill last vInt block from fp=\" + docIn.getFilePointer());\n        // }\n        readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, indexHasFreq);\n      }\n      docBufferUpto = 0;\n    }\n\n","sourceOld":"    private void refillDocs() throws IOException {\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= BLOCK_SIZE) {\n        // if (DEBUG) {\n        //   System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        // }\n        forUtil.readBlock(docIn, encoded, docDeltaBuffer);\n\n        if (indexHasFreq) {\n          // if (DEBUG) {\n          //   System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n          // }\n          if (needsFreq) {\n            forUtil.readBlock(docIn, encoded, freqBuffer);\n          } else {\n            forUtil.skipBlock(docIn); // skip over freqs\n          }\n        }\n      } else if (docFreq == 1) {\n        docDeltaBuffer[0] = singletonDocID;\n        freqBuffer[0] = (int) totalTermFreq;\n      } else {\n        // Read vInts:\n        // if (DEBUG) {\n        //   System.out.println(\"    fill last vInt block from fp=\" + docIn.getFilePointer());\n        // }\n        readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, indexHasFreq);\n      }\n      docBufferUpto = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsEnum#refillDocs().mjava","sourceNew":null,"sourceOld":"    private void refillDocs() throws IOException {\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= BLOCK_SIZE) {\n        // if (DEBUG) {\n        //   System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        // }\n        forUtil.readBlock(docIn, encoded, docDeltaBuffer);\n\n        if (indexHasFreq) {\n          // if (DEBUG) {\n          //   System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n          // }\n          if (needsFreq) {\n            forUtil.readBlock(docIn, encoded, freqBuffer);\n          } else {\n            forUtil.skipBlock(docIn); // skip over freqs\n          }\n        }\n      } else if (docFreq == 1) {\n        docDeltaBuffer[0] = singletonDocID;\n        freqBuffer[0] = (int) totalTermFreq;\n      } else {\n        // Read vInts:\n        // if (DEBUG) {\n        //   System.out.println(\"    fill last vInt block from fp=\" + docIn.getFilePointer());\n        // }\n        readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, indexHasFreq);\n      }\n      docBufferUpto = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}