{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG#testBespoke().mjava","commits":[{"id":"2c705a0d590cf911e7c942df49563ca2ea176e22","date":1526916174,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG#testBespoke().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Test some small, hand crafted, but non-trivial queries that are\n   * easier to trace/debug then a pure random monstrosity.\n   * (ie: if something obvious gets broken, this test may fail faster and in a more obvious way then testRandom)\n   */\n  public void testBespoke() throws Exception {\n    { // trivial single level facet\n      Map<String,TermFacet> facets = new LinkedHashMap<>();\n      TermFacet top = new TermFacet(strfield(9), UNIQUE_FIELD_VALS, 0, null);\n      facets.put(\"top1\", top);\n      final AtomicInteger maxBuckets = new AtomicInteger(UNIQUE_FIELD_VALS);\n      assertFacetSKGsAreCorrect(maxBuckets, facets, strfield(7)+\":11\", strfield(5)+\":9\", \"*:*\");\n      assertTrue(\"Didn't check a single bucket???\", maxBuckets.get() < UNIQUE_FIELD_VALS);\n    }\n    \n    { // trivial single level facet w/sorting on skg\n      Map<String,TermFacet> facets = new LinkedHashMap<>();\n      TermFacet top = new TermFacet(strfield(9), UNIQUE_FIELD_VALS, 0, \"skg desc\");\n      facets.put(\"top2\", top);\n      final AtomicInteger maxBuckets = new AtomicInteger(UNIQUE_FIELD_VALS);\n      assertFacetSKGsAreCorrect(maxBuckets, facets, strfield(7)+\":11\", strfield(5)+\":9\", \"*:*\");\n      assertTrue(\"Didn't check a single bucket???\", maxBuckets.get() < UNIQUE_FIELD_VALS);\n    }\n\n    { // trivial single level facet w/ 2 diff ways to request \"limit = (effectively) Infinite\"\n      // to sanity check refinement of buckets missing from other shard in both cases\n      \n      // NOTE that these two queries & facets *should* effectively identical given that the\n      // very large limit value is big enough no shard will ever return that may terms,\n      // but the \"limit=-1\" case it actaully triggers slightly different code paths\n      // because it causes FacetField.returnsPartial() to be \"true\"\n      for (int limit : new int[] { 999999999, -1 }) {\n        Map<String,TermFacet> facets = new LinkedHashMap<>();\n        facets.put(\"top_facet_limit__\" + limit, new TermFacet(strfield(9), limit, 0, \"skg desc\"));\n        final AtomicInteger maxBuckets = new AtomicInteger(UNIQUE_FIELD_VALS);\n        assertFacetSKGsAreCorrect(maxBuckets, facets, strfield(7)+\":11\", strfield(5)+\":9\", \"*:*\");\n        assertTrue(\"Didn't check a single bucket???\", maxBuckets.get() < UNIQUE_FIELD_VALS);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c5ec3c464e62e57df598ba20e010313bf6d5d7b4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"92910727264a23a47b7a6c94b0f75d655537b9ea","date":1540414655,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG#testBespoke().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG#testBespoke().mjava","sourceNew":"  /** \n   * Test some small, hand crafted, but non-trivial queries that are\n   * easier to trace/debug then a pure random monstrosity.\n   * (ie: if something obvious gets broken, this test may fail faster and in a more obvious way then testRandom)\n   */\n  public void testBespoke() throws Exception {\n    { // trivial single level facet\n      Map<String,TermFacet> facets = new LinkedHashMap<>();\n      TermFacet top = new TermFacet(strfield(9), UNIQUE_FIELD_VALS, 0, null);\n      facets.put(\"top1\", top);\n      final AtomicInteger maxBuckets = new AtomicInteger(UNIQUE_FIELD_VALS);\n      assertFacetSKGsAreCorrect(maxBuckets, facets, strfield(7)+\":11\", strfield(5)+\":9\", \"*:*\");\n      assertTrue(\"Didn't check a single bucket???\", maxBuckets.get() < UNIQUE_FIELD_VALS);\n    }\n    \n    { // trivial single level facet w/sorting on skg\n      Map<String,TermFacet> facets = new LinkedHashMap<>();\n      TermFacet top = new TermFacet(strfield(9), UNIQUE_FIELD_VALS, 0, \"skg desc\");\n      facets.put(\"top2\", top);\n      final AtomicInteger maxBuckets = new AtomicInteger(UNIQUE_FIELD_VALS);\n      assertFacetSKGsAreCorrect(maxBuckets, facets, strfield(7)+\":11\", strfield(5)+\":9\", \"*:*\");\n      assertTrue(\"Didn't check a single bucket???\", maxBuckets.get() < UNIQUE_FIELD_VALS);\n    }\n\n    { // trivial single level facet w/ 2 diff ways to request \"limit = (effectively) Infinite\"\n      // to sanity check refinement of buckets missing from other shard in both cases\n      \n      // NOTE that these two queries & facets *should* effectively identical given that the\n      // very large limit value is big enough no shard will ever return that may terms,\n      // but the \"limit=-1\" case it actaully triggers slightly different code paths\n      // because it causes FacetField.returnsPartial() to be \"true\"\n      for (int limit : new int[] { 999999999, -1 }) {\n        Map<String,TermFacet> facets = new LinkedHashMap<>();\n        facets.put(\"top_facet_limit__\" + limit, new TermFacet(strfield(9), limit, 0, \"skg desc\"));\n        final AtomicInteger maxBuckets = new AtomicInteger(UNIQUE_FIELD_VALS);\n        assertFacetSKGsAreCorrect(maxBuckets, facets, strfield(7)+\":11\", strfield(5)+\":9\", \"*:*\");\n        assertTrue(\"Didn't check a single bucket???\", maxBuckets.get() < UNIQUE_FIELD_VALS);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Test some small, hand crafted, but non-trivial queries that are\n   * easier to trace/debug then a pure random monstrosity.\n   * (ie: if something obvious gets broken, this test may fail faster and in a more obvious way then testRandom)\n   */\n  public void testBespoke() throws Exception {\n    { // trivial single level facet\n      Map<String,TermFacet> facets = new LinkedHashMap<>();\n      TermFacet top = new TermFacet(strfield(9), UNIQUE_FIELD_VALS, 0, null);\n      facets.put(\"top1\", top);\n      final AtomicInteger maxBuckets = new AtomicInteger(UNIQUE_FIELD_VALS);\n      assertFacetSKGsAreCorrect(maxBuckets, facets, strfield(7)+\":11\", strfield(5)+\":9\", \"*:*\");\n      assertTrue(\"Didn't check a single bucket???\", maxBuckets.get() < UNIQUE_FIELD_VALS);\n    }\n    \n    { // trivial single level facet w/sorting on skg\n      Map<String,TermFacet> facets = new LinkedHashMap<>();\n      TermFacet top = new TermFacet(strfield(9), UNIQUE_FIELD_VALS, 0, \"skg desc\");\n      facets.put(\"top2\", top);\n      final AtomicInteger maxBuckets = new AtomicInteger(UNIQUE_FIELD_VALS);\n      assertFacetSKGsAreCorrect(maxBuckets, facets, strfield(7)+\":11\", strfield(5)+\":9\", \"*:*\");\n      assertTrue(\"Didn't check a single bucket???\", maxBuckets.get() < UNIQUE_FIELD_VALS);\n    }\n\n    { // trivial single level facet w/ 2 diff ways to request \"limit = (effectively) Infinite\"\n      // to sanity check refinement of buckets missing from other shard in both cases\n      \n      // NOTE that these two queries & facets *should* effectively identical given that the\n      // very large limit value is big enough no shard will ever return that may terms,\n      // but the \"limit=-1\" case it actaully triggers slightly different code paths\n      // because it causes FacetField.returnsPartial() to be \"true\"\n      for (int limit : new int[] { 999999999, -1 }) {\n        Map<String,TermFacet> facets = new LinkedHashMap<>();\n        facets.put(\"top_facet_limit__\" + limit, new TermFacet(strfield(9), limit, 0, \"skg desc\"));\n        final AtomicInteger maxBuckets = new AtomicInteger(UNIQUE_FIELD_VALS);\n        assertFacetSKGsAreCorrect(maxBuckets, facets, strfield(7)+\":11\", strfield(5)+\":9\", \"*:*\");\n        assertTrue(\"Didn't check a single bucket???\", maxBuckets.get() < UNIQUE_FIELD_VALS);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92910727264a23a47b7a6c94b0f75d655537b9ea":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92910727264a23a47b7a6c94b0f75d655537b9ea"]},"commit2Childs":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["92910727264a23a47b7a6c94b0f75d655537b9ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"92910727264a23a47b7a6c94b0f75d655537b9ea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}