{"path":"solr/core/src/test/org/apache/solr/util/hll/ExplicitHLLTest#unionTest().mjava","commits":[{"id":"6faa211c4af605e3cf078a76d200c1dc348973f5","date":1437043657,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/ExplicitHLLTest#unionTest().mjava","pathOld":"/dev/null","sourceNew":"    // ------------------------------------------------------------------------\n    /**\n     * Tests {@link HLL#union(HLL)}.\n     */\n    @Test\n    public void unionTest() {\n        {// Unioning two distinct sets should work\n            final HLL hllA = newHLL(128/*arbitrary*/);\n            final HLL hllB = newHLL(128/*arbitrary*/);\n            hllA.addRaw(1L);\n            hllA.addRaw(2L);\n            hllB.addRaw(3L);\n\n            hllA.union(hllB);\n            assertEquals(hllA.cardinality(), 3);\n        }\n        {// Unioning two sets whose union doesn't exceed the cardinality cap should not promote\n            final HLL hllA = newHLL(128/*arbitrary*/);\n            final HLL hllB = newHLL(128/*arbitrary*/);\n            hllA.addRaw(1L);\n            hllA.addRaw(2L);\n            hllB.addRaw(1L);\n\n            hllA.union(hllB);\n            assertEquals(hllA.cardinality(), 2);\n        }\n        {// unioning two sets whose union exceeds the cardinality cap should promote\n            final HLL hllA = newHLL(128/*arbitrary*/);\n            final HLL hllB = newHLL(128/*arbitrary*/);\n\n            // fill up sets to explicitThreshold\n            for(long i=0; i<128/*explicitThreshold*/; i++) {\n                hllA.addRaw(i);\n                hllB.addRaw(i + 128);\n            }\n\n            hllA.union(hllB);\n            assertEquals(hllA.getType(), HLLType.SPARSE);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/ExplicitHLLTest#unionTest().mjava","pathOld":"/dev/null","sourceNew":"    // ------------------------------------------------------------------------\n    /**\n     * Tests {@link HLL#union(HLL)}.\n     */\n    @Test\n    public void unionTest() {\n        {// Unioning two distinct sets should work\n            final HLL hllA = newHLL(128/*arbitrary*/);\n            final HLL hllB = newHLL(128/*arbitrary*/);\n            hllA.addRaw(1L);\n            hllA.addRaw(2L);\n            hllB.addRaw(3L);\n\n            hllA.union(hllB);\n            assertEquals(hllA.cardinality(), 3);\n        }\n        {// Unioning two sets whose union doesn't exceed the cardinality cap should not promote\n            final HLL hllA = newHLL(128/*arbitrary*/);\n            final HLL hllB = newHLL(128/*arbitrary*/);\n            hllA.addRaw(1L);\n            hllA.addRaw(2L);\n            hllB.addRaw(1L);\n\n            hllA.union(hllB);\n            assertEquals(hllA.cardinality(), 2);\n        }\n        {// unioning two sets whose union exceeds the cardinality cap should promote\n            final HLL hllA = newHLL(128/*arbitrary*/);\n            final HLL hllB = newHLL(128/*arbitrary*/);\n\n            // fill up sets to explicitThreshold\n            for(long i=0; i<128/*explicitThreshold*/; i++) {\n                hllA.addRaw(i);\n                hllB.addRaw(i + 128);\n            }\n\n            hllA.union(hllB);\n            assertEquals(hllA.getType(), HLLType.SPARSE);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6faa211c4af605e3cf078a76d200c1dc348973f5"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b5ee4c66244bdfcc4796a114519d47701b2c026"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6faa211c4af605e3cf078a76d200c1dc348973f5"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}