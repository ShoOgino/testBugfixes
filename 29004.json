{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#decRef().mjava","commits":[{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#decRef().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#decRef().mjava","sourceNew":"  /**\n   * Expert: decreases the refCount of this TaxonomyReader instance. \n   * If the refCount drops to 0, then pending changes (if any) are \n   * committed to the taxonomy index and this reader is closed. \n   * @throws IOException \n   */\n  public void decRef() throws IOException {\n    ensureOpen();\n    if (indexReader.getRefCount() == 1) {\n      // Do not decRef the indexReader - doClose does it by calling reader.close()\n      doClose();\n    } else {\n      indexReader.decRef();\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: decreases the refCount of this TaxonomyReader instance. \n   * If the refCount drops to 0, then pending changes (if any) are \n   * committed to the taxonomy index and this reader is closed. \n   * @throws IOException \n   */\n  public void decRef() throws IOException {\n    ensureOpen();\n    if (indexReader.getRefCount() == 1) {\n      // Do not decRef the indexReader - doClose does it by calling reader.close()\n      doClose();\n    } else {\n      indexReader.decRef();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5970b51908f2c85110be62688f463faf06cc5e3d","date":1327209285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#decRef().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#decRef().mjava","sourceNew":"  /**\n   * Expert: decreases the refCount of this TaxonomyReader instance. If the\n   * refCount drops to 0, then this reader is closed.\n   */\n  public void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.decrementAndGet();\n    if (rc == 0) {\n      boolean success = false;\n      try {\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n    } else if (rc < 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount is \" + rc + \" after decrement\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: decreases the refCount of this TaxonomyReader instance. \n   * If the refCount drops to 0, then pending changes (if any) are \n   * committed to the taxonomy index and this reader is closed. \n   * @throws IOException \n   */\n  public void decRef() throws IOException {\n    ensureOpen();\n    if (indexReader.getRefCount() == 1) {\n      // Do not decRef the indexReader - doClose does it by calling reader.close()\n      doClose();\n    } else {\n      indexReader.decRef();\n    }\n  }\n\n","bugFix":["89f15687f60bd49cd3d9de427e85c17fd9397d61","7fea68ff83c1db2f720597dfcea5bee943a35f35"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"579dc30b5d3235c34cda518b2b6018d71a61879c","date":1327235122,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#decRef().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#decRef().mjava","sourceNew":"  /**\n   * Expert: decreases the refCount of this TaxonomyReader instance. If the\n   * refCount drops to 0, then this reader is closed.\n   */\n  public void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.decrementAndGet();\n    if (rc == 0) {\n      boolean success = false;\n      try {\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n    } else if (rc < 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount is \" + rc + \" after decrement\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: decreases the refCount of this TaxonomyReader instance. \n   * If the refCount drops to 0, then pending changes (if any) are \n   * committed to the taxonomy index and this reader is closed. \n   * @throws IOException \n   */\n  public void decRef() throws IOException {\n    ensureOpen();\n    if (indexReader.getRefCount() == 1) {\n      // Do not decRef the indexReader - doClose does it by calling reader.close()\n      doClose();\n    } else {\n      indexReader.decRef();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#decRef().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#decRef().mjava","sourceNew":"  /**\n   * Expert: decreases the refCount of this TaxonomyReader instance. If the\n   * refCount drops to 0, then this reader is closed.\n   */\n  public void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.decrementAndGet();\n    if (rc == 0) {\n      boolean success = false;\n      try {\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n    } else if (rc < 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount is \" + rc + \" after decrement\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: decreases the refCount of this TaxonomyReader instance. \n   * If the refCount drops to 0, then pending changes (if any) are \n   * committed to the taxonomy index and this reader is closed. \n   * @throws IOException \n   */\n  public void decRef() throws IOException {\n    ensureOpen();\n    if (indexReader.getRefCount() == 1) {\n      // Do not decRef the indexReader - doClose does it by calling reader.close()\n      doClose();\n    } else {\n      indexReader.decRef();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#decRef().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#decRef().mjava","sourceNew":"  /**\n   * Expert: decreases the refCount of this TaxonomyReader instance. If the\n   * refCount drops to 0, then this reader is closed.\n   */\n  public void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.decrementAndGet();\n    if (rc == 0) {\n      boolean success = false;\n      try {\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n    } else if (rc < 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount is \" + rc + \" after decrement\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: decreases the refCount of this TaxonomyReader instance. If the\n   * refCount drops to 0, then this reader is closed.\n   */\n  public void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.decrementAndGet();\n    if (rc == 0) {\n      boolean success = false;\n      try {\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n    } else if (rc < 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount is \" + rc + \" after decrement\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5970b51908f2c85110be62688f463faf06cc5e3d"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","5970b51908f2c85110be62688f463faf06cc5e3d"],"5970b51908f2c85110be62688f463faf06cc5e3d":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"579dc30b5d3235c34cda518b2b6018d71a61879c":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","5970b51908f2c85110be62688f463faf06cc5e3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","5970b51908f2c85110be62688f463faf06cc5e3d","579dc30b5d3235c34cda518b2b6018d71a61879c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"5970b51908f2c85110be62688f463faf06cc5e3d":["b89678825b68eccaf09e6ab71675fc0b0af1e099","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","579dc30b5d3235c34cda518b2b6018d71a61879c"],"579dc30b5d3235c34cda518b2b6018d71a61879c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","579dc30b5d3235c34cda518b2b6018d71a61879c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}