{"path":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testOptimizeMaxNumSegments().mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testOptimizeMaxNumSegments().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testOptimizeMaxNumSegments().mjava","sourceNew":"  /**\n   * Test that we can call optimize(maxNumSegments).\n   */\n  public void testOptimizeMaxNumSegments() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=3\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"merge.policy=org.apache.lucene.index.LogDocMergePolicy\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  Optimize(3)\",\n        \"  CloseIndex()\",\n        \"} : 2\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 3. test number of docs in the index\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    int ndocsExpected = 20; // first 20 reuters docs.\n    assertEquals(\"wrong number of docs in the index!\", ndocsExpected, ir.numDocs());\n    ir.close();\n\n    // Make sure we have 3 segments:\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(benchmark.getRunData().getDirectory());\n    assertEquals(3, infos.size());\n  }\n\n","sourceOld":"  /**\n   * Test that we can call optimize(maxNumSegments).\n   */\n  public void testOptimizeMaxNumSegments() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=3\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"merge.policy=org.apache.lucene.index.LogDocMergePolicy\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  Optimize(3)\",\n        \"  CloseIndex()\",\n        \"} : 2\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 3. test number of docs in the index\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    int ndocsExpected = 20; // first 20 reuters docs.\n    assertEquals(\"wrong number of docs in the index!\", ndocsExpected, ir.numDocs());\n    ir.close();\n\n    // Make sure we have 3 segments:\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(benchmark.getRunData().getDirectory());\n    assertEquals(3, infos.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testOptimizeMaxNumSegments().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testOptimizeMaxNumSegments().mjava","sourceNew":"  /**\n   * Test that we can call optimize(maxNumSegments).\n   */\n  public void testOptimizeMaxNumSegments() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=3\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"merge.policy=org.apache.lucene.index.LogDocMergePolicy\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  Optimize(3)\",\n        \"  CloseIndex()\",\n        \"} : 2\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 3. test number of docs in the index\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    int ndocsExpected = 20; // first 20 reuters docs.\n    assertEquals(\"wrong number of docs in the index!\", ndocsExpected, ir.numDocs());\n    ir.close();\n\n    // Make sure we have 3 segments:\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(benchmark.getRunData().getDirectory());\n    assertEquals(3, infos.size());\n  }\n\n","sourceOld":"  /**\n   * Test that we can call optimize(maxNumSegments).\n   */\n  public void testOptimizeMaxNumSegments() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=3\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"merge.policy=org.apache.lucene.index.LogDocMergePolicy\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  Optimize(3)\",\n        \"  CloseIndex()\",\n        \"} : 2\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 3. test number of docs in the index\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    int ndocsExpected = 20; // first 20 reuters docs.\n    assertEquals(\"wrong number of docs in the index!\", ndocsExpected, ir.numDocs());\n    ir.close();\n\n    // Make sure we have 3 segments:\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(benchmark.getRunData().getDirectory());\n    assertEquals(3, infos.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testOptimizeMaxNumSegments().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testOptimizeMaxNumSegments().mjava","sourceNew":"  /**\n   * Test that we can call optimize(maxNumSegments).\n   */\n  public void testOptimizeMaxNumSegments() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=3\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"merge.policy=org.apache.lucene.index.LogDocMergePolicy\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  Optimize(3)\",\n        \"  CloseIndex()\",\n        \"} : 2\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 3. test number of docs in the index\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    int ndocsExpected = 20; // first 20 reuters docs.\n    assertEquals(\"wrong number of docs in the index!\", ndocsExpected, ir.numDocs());\n    ir.close();\n\n    // Make sure we have 3 segments:\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(benchmark.getRunData().getDirectory());\n    assertEquals(3, infos.size());\n  }\n\n","sourceOld":"  /**\n   * Test that we can call optimize(maxNumSegments).\n   */\n  public void testOptimizeMaxNumSegments() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=3\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"merge.policy=org.apache.lucene.index.LogDocMergePolicy\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  Optimize(3)\",\n        \"  CloseIndex()\",\n        \"} : 2\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 3. test number of docs in the index\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    int ndocsExpected = 20; // first 20 reuters docs.\n    assertEquals(\"wrong number of docs in the index!\", ndocsExpected, ir.numDocs());\n    ir.close();\n\n    // Make sure we have 3 segments:\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(benchmark.getRunData().getDirectory());\n    assertEquals(3, infos.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testForceMerge().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testOptimizeMaxNumSegments().mjava","sourceNew":"  /**\n   * Test that we can call forceMerge(maxNumSegments).\n   */\n  public void testForceMerge() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=3\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"merge.policy=org.apache.lucene.index.LogDocMergePolicy\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  ForceMerge(3)\",\n        \"  CloseIndex()\",\n        \"} : 2\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 3. test number of docs in the index\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    int ndocsExpected = 20; // first 20 reuters docs.\n    assertEquals(\"wrong number of docs in the index!\", ndocsExpected, ir.numDocs());\n    ir.close();\n\n    // Make sure we have 3 segments:\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(benchmark.getRunData().getDirectory());\n    assertEquals(3, infos.size());\n  }\n\n","sourceOld":"  /**\n   * Test that we can call optimize(maxNumSegments).\n   */\n  public void testOptimizeMaxNumSegments() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=3\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"merge.policy=org.apache.lucene.index.LogDocMergePolicy\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  Optimize(3)\",\n        \"  CloseIndex()\",\n        \"} : 2\",\n    };\n    \n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 3. test number of docs in the index\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    int ndocsExpected = 20; // first 20 reuters docs.\n    assertEquals(\"wrong number of docs in the index!\", ndocsExpected, ir.numDocs());\n    ir.close();\n\n    // Make sure we have 3 segments:\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(benchmark.getRunData().getDirectory());\n    assertEquals(3, infos.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","d14e8d18c0e3970c20354dbeeb49da11bd587fbd","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}