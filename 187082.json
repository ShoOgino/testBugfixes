{"path":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testRangeOptimizesIfAllPointsMatch().mjava","commits":[{"id":"74c553c860db4d81dbf8ee037edd53f4602be719","date":1457340939,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testRangeOptimizesIfAllPointsMatch().mjava","pathOld":"/dev/null","sourceNew":"  public void testRangeOptimizesIfAllPointsMatch() throws IOException {\n    final int numDims = TestUtil.nextInt(random(), 1, 3);\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    int[] value = new int[numDims];\n    for (int i = 0; i < numDims; ++i) {\n      value[i] = TestUtil.nextInt(random(), 1, 10);\n    }\n    doc.add(new IntPoint(\"point\", value));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null);\n    int[] lowerBound = new int[numDims];\n    int[] upperBound = new int[numDims];\n    for (int i = 0; i < numDims; ++i) {\n      lowerBound[i] = value[i] - random().nextInt(1);\n      upperBound[i] = value[i] + random().nextInt(1);\n    }\n    Query query = IntPoint.newRangeQuery(\"point\", lowerBound, upperBound);\n    Weight weight = searcher.createNormalizedWeight(query, false);\n    Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertEquals(DocIdSetIterator.all(1).getClass(), scorer.iterator().getClass());\n\n    // When not all documents in the query have a value, the optimization is not applicable\n    reader.close();\n    w.addDocument(new Document());\n    w.forceMerge(1);\n    reader = w.getReader();\n    searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null);\n    weight = searcher.createNormalizedWeight(query, false);\n    scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertFalse(DocIdSetIterator.all(1).getClass().equals(scorer.iterator().getClass()));\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testRangeOptimizesIfAllPointsMatch().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testRangeOptimizesIfAllPointsMatch().mjava","sourceNew":"  public void testRangeOptimizesIfAllPointsMatch() throws IOException {\n    final int numDims = TestUtil.nextInt(random(), 1, 3);\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    int[] value = new int[numDims];\n    for (int i = 0; i < numDims; ++i) {\n      value[i] = TestUtil.nextInt(random(), 1, 10);\n    }\n    doc.add(new IntPoint(\"point\", value));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null);\n    int[] lowerBound = new int[numDims];\n    int[] upperBound = new int[numDims];\n    for (int i = 0; i < numDims; ++i) {\n      lowerBound[i] = value[i] - random().nextInt(1);\n      upperBound[i] = value[i] + random().nextInt(1);\n    }\n    Query query = IntPoint.newRangeQuery(\"point\", lowerBound, upperBound);\n    Weight weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES);\n    Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertEquals(DocIdSetIterator.all(1).getClass(), scorer.iterator().getClass());\n\n    // When not all documents in the query have a value, the optimization is not applicable\n    reader.close();\n    w.addDocument(new Document());\n    w.forceMerge(1);\n    reader = w.getReader();\n    searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null);\n    weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES);\n    scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertFalse(DocIdSetIterator.all(1).getClass().equals(scorer.iterator().getClass()));\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRangeOptimizesIfAllPointsMatch() throws IOException {\n    final int numDims = TestUtil.nextInt(random(), 1, 3);\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    int[] value = new int[numDims];\n    for (int i = 0; i < numDims; ++i) {\n      value[i] = TestUtil.nextInt(random(), 1, 10);\n    }\n    doc.add(new IntPoint(\"point\", value));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null);\n    int[] lowerBound = new int[numDims];\n    int[] upperBound = new int[numDims];\n    for (int i = 0; i < numDims; ++i) {\n      lowerBound[i] = value[i] - random().nextInt(1);\n      upperBound[i] = value[i] + random().nextInt(1);\n    }\n    Query query = IntPoint.newRangeQuery(\"point\", lowerBound, upperBound);\n    Weight weight = searcher.createNormalizedWeight(query, false);\n    Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertEquals(DocIdSetIterator.all(1).getClass(), scorer.iterator().getClass());\n\n    // When not all documents in the query have a value, the optimization is not applicable\n    reader.close();\n    w.addDocument(new Document());\n    w.forceMerge(1);\n    reader = w.getReader();\n    searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null);\n    weight = searcher.createNormalizedWeight(query, false);\n    scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertFalse(DocIdSetIterator.all(1).getClass().equals(scorer.iterator().getClass()));\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testRangeOptimizesIfAllPointsMatch().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testRangeOptimizesIfAllPointsMatch().mjava","sourceNew":"  public void testRangeOptimizesIfAllPointsMatch() throws IOException {\n    final int numDims = TestUtil.nextInt(random(), 1, 3);\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    int[] value = new int[numDims];\n    for (int i = 0; i < numDims; ++i) {\n      value[i] = TestUtil.nextInt(random(), 1, 10);\n    }\n    doc.add(new IntPoint(\"point\", value));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null);\n    int[] lowerBound = new int[numDims];\n    int[] upperBound = new int[numDims];\n    for (int i = 0; i < numDims; ++i) {\n      lowerBound[i] = value[i] - random().nextInt(1);\n      upperBound[i] = value[i] + random().nextInt(1);\n    }\n    Query query = IntPoint.newRangeQuery(\"point\", lowerBound, upperBound);\n    Weight weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES);\n    Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertEquals(DocIdSetIterator.all(1).getClass(), scorer.iterator().getClass());\n\n    // When not all documents in the query have a value, the optimization is not applicable\n    reader.close();\n    w.addDocument(new Document());\n    w.forceMerge(1);\n    reader = w.getReader();\n    searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null);\n    weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES);\n    scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertFalse(DocIdSetIterator.all(1).getClass().equals(scorer.iterator().getClass()));\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRangeOptimizesIfAllPointsMatch() throws IOException {\n    final int numDims = TestUtil.nextInt(random(), 1, 3);\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    int[] value = new int[numDims];\n    for (int i = 0; i < numDims; ++i) {\n      value[i] = TestUtil.nextInt(random(), 1, 10);\n    }\n    doc.add(new IntPoint(\"point\", value));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null);\n    int[] lowerBound = new int[numDims];\n    int[] upperBound = new int[numDims];\n    for (int i = 0; i < numDims; ++i) {\n      lowerBound[i] = value[i] - random().nextInt(1);\n      upperBound[i] = value[i] + random().nextInt(1);\n    }\n    Query query = IntPoint.newRangeQuery(\"point\", lowerBound, upperBound);\n    Weight weight = searcher.createNormalizedWeight(query, false);\n    Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertEquals(DocIdSetIterator.all(1).getClass(), scorer.iterator().getClass());\n\n    // When not all documents in the query have a value, the optimization is not applicable\n    reader.close();\n    w.addDocument(new Document());\n    w.forceMerge(1);\n    reader = w.getReader();\n    searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null);\n    weight = searcher.createNormalizedWeight(query, false);\n    scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertFalse(DocIdSetIterator.all(1).getClass().equals(scorer.iterator().getClass()));\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testRangeOptimizesIfAllPointsMatch().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testRangeOptimizesIfAllPointsMatch().mjava","sourceNew":"  public void testRangeOptimizesIfAllPointsMatch() throws IOException {\n    final int numDims = TestUtil.nextInt(random(), 1, 3);\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    int[] value = new int[numDims];\n    for (int i = 0; i < numDims; ++i) {\n      value[i] = TestUtil.nextInt(random(), 1, 10);\n    }\n    doc.add(new IntPoint(\"point\", value));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null);\n    int[] lowerBound = new int[numDims];\n    int[] upperBound = new int[numDims];\n    for (int i = 0; i < numDims; ++i) {\n      lowerBound[i] = value[i] - random().nextInt(1);\n      upperBound[i] = value[i] + random().nextInt(1);\n    }\n    Query query = IntPoint.newRangeQuery(\"point\", lowerBound, upperBound);\n    Weight weight = searcher.createWeight(query, ScoreMode.COMPLETE_NO_SCORES, 1);\n    Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertEquals(DocIdSetIterator.all(1).getClass(), scorer.iterator().getClass());\n\n    // When not all documents in the query have a value, the optimization is not applicable\n    reader.close();\n    w.addDocument(new Document());\n    w.forceMerge(1);\n    reader = w.getReader();\n    searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null);\n    weight = searcher.createWeight(query, ScoreMode.COMPLETE_NO_SCORES, 1);\n    scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertFalse(DocIdSetIterator.all(1).getClass().equals(scorer.iterator().getClass()));\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRangeOptimizesIfAllPointsMatch() throws IOException {\n    final int numDims = TestUtil.nextInt(random(), 1, 3);\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    int[] value = new int[numDims];\n    for (int i = 0; i < numDims; ++i) {\n      value[i] = TestUtil.nextInt(random(), 1, 10);\n    }\n    doc.add(new IntPoint(\"point\", value));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null);\n    int[] lowerBound = new int[numDims];\n    int[] upperBound = new int[numDims];\n    for (int i = 0; i < numDims; ++i) {\n      lowerBound[i] = value[i] - random().nextInt(1);\n      upperBound[i] = value[i] + random().nextInt(1);\n    }\n    Query query = IntPoint.newRangeQuery(\"point\", lowerBound, upperBound);\n    Weight weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES);\n    Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertEquals(DocIdSetIterator.all(1).getClass(), scorer.iterator().getClass());\n\n    // When not all documents in the query have a value, the optimization is not applicable\n    reader.close();\n    w.addDocument(new Document());\n    w.forceMerge(1);\n    reader = w.getReader();\n    searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null);\n    weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES);\n    scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertFalse(DocIdSetIterator.all(1).getClass().equals(scorer.iterator().getClass()));\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testRangeOptimizesIfAllPointsMatch().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testRangeOptimizesIfAllPointsMatch().mjava","sourceNew":"  public void testRangeOptimizesIfAllPointsMatch() throws IOException {\n    final int numDims = TestUtil.nextInt(random(), 1, 3);\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    int[] value = new int[numDims];\n    for (int i = 0; i < numDims; ++i) {\n      value[i] = TestUtil.nextInt(random(), 1, 10);\n    }\n    doc.add(new IntPoint(\"point\", value));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null);\n    int[] lowerBound = new int[numDims];\n    int[] upperBound = new int[numDims];\n    for (int i = 0; i < numDims; ++i) {\n      lowerBound[i] = value[i] - random().nextInt(1);\n      upperBound[i] = value[i] + random().nextInt(1);\n    }\n    Query query = IntPoint.newRangeQuery(\"point\", lowerBound, upperBound);\n    Weight weight = searcher.createWeight(query, ScoreMode.COMPLETE_NO_SCORES, 1);\n    Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertEquals(DocIdSetIterator.all(1).getClass(), scorer.iterator().getClass());\n\n    // When not all documents in the query have a value, the optimization is not applicable\n    reader.close();\n    w.addDocument(new Document());\n    w.forceMerge(1);\n    reader = w.getReader();\n    searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null);\n    weight = searcher.createWeight(query, ScoreMode.COMPLETE_NO_SCORES, 1);\n    scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertFalse(DocIdSetIterator.all(1).getClass().equals(scorer.iterator().getClass()));\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRangeOptimizesIfAllPointsMatch() throws IOException {\n    final int numDims = TestUtil.nextInt(random(), 1, 3);\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    int[] value = new int[numDims];\n    for (int i = 0; i < numDims; ++i) {\n      value[i] = TestUtil.nextInt(random(), 1, 10);\n    }\n    doc.add(new IntPoint(\"point\", value));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null);\n    int[] lowerBound = new int[numDims];\n    int[] upperBound = new int[numDims];\n    for (int i = 0; i < numDims; ++i) {\n      lowerBound[i] = value[i] - random().nextInt(1);\n      upperBound[i] = value[i] + random().nextInt(1);\n    }\n    Query query = IntPoint.newRangeQuery(\"point\", lowerBound, upperBound);\n    Weight weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES);\n    Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertEquals(DocIdSetIterator.all(1).getClass(), scorer.iterator().getClass());\n\n    // When not all documents in the query have a value, the optimization is not applicable\n    reader.close();\n    w.addDocument(new Document());\n    w.forceMerge(1);\n    reader = w.getReader();\n    searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null);\n    weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES);\n    scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertFalse(DocIdSetIterator.all(1).getClass().equals(scorer.iterator().getClass()));\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["74c553c860db4d81dbf8ee037edd53f4602be719"],"74c553c860db4d81dbf8ee037edd53f4602be719":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"417142ff08fda9cf0b72d5133e63097a166c6458":["74c553c860db4d81dbf8ee037edd53f4602be719","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74c553c860db4d81dbf8ee037edd53f4602be719"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"74c553c860db4d81dbf8ee037edd53f4602be719":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["d58e44159788900f4a2113b84463dc3fbbf80f20","475584d5e08a22ad3fc7babefe006d77bc744567"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}