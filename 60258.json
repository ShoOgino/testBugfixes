{"path":"src/java/org/apache/lucene/util/BitUtil#ntz3(long).mjava","commits":[{"id":"52ce7e961a8217faac8128e3c8fe67819eefdde9","date":1201979043,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/BitUtil#ntz3(long).mjava","pathOld":"/dev/null","sourceNew":"  /** returns 0 based index of first set bit\n   * <br/> This is an alternate implementation of ntz()\n   */\n  public static int ntz3(long x) {\n   // another implementation taken from Hackers Delight, extended to 64 bits\n   // and converted to Java.\n   // Many 32 bit ntz algorithms are at http://www.hackersdelight.org/HDcode/ntz.cc\n   int n = 1;\n\n   // do the first step as a long, all others as ints.\n   int y = (int)x;\n   if (y==0) {n+=32; y = (int)(x>>>32); }\n   if ((y & 0x0000FFFF) == 0) { n+=16; y>>>=16; }\n   if ((y & 0x000000FF) == 0) { n+=8; y>>>=8; }\n   if ((y & 0x0000000F) == 0) { n+=4; y>>>=4; }\n   if ((y & 0x00000003) == 0) { n+=2; y>>>=2; }\n   return n - (y & 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BitUtil#ntz3(long).mjava","pathOld":"src/java/org/apache/lucene/util/BitUtil#ntz3(long).mjava","sourceNew":"  /** returns 0 based index of first set bit\n   * <br/> This is an alternate implementation of ntz()\n   */\n  public static int ntz3(long x) {\n   // another implementation taken from Hackers Delight, extended to 64 bits\n   // and converted to Java.\n   // Many 32 bit ntz algorithms are at http://www.hackersdelight.org/HDcode/ntz.cc\n   int n = 1;\n\n   // do the first step as a long, all others as ints.\n   int y = (int)x;\n   if (y==0) {n+=32; y = (int)(x>>>32); }\n   if ((y & 0x0000FFFF) == 0) { n+=16; y>>>=16; }\n   if ((y & 0x000000FF) == 0) { n+=8; y>>>=8; }\n   if ((y & 0x0000000F) == 0) { n+=4; y>>>=4; }\n   if ((y & 0x00000003) == 0) { n+=2; y>>>=2; }\n   return n - (y & 1);\n  }\n\n","sourceOld":"  /** returns 0 based index of first set bit\n   * <br/> This is an alternate implementation of ntz()\n   */\n  public static int ntz3(long x) {\n   // another implementation taken from Hackers Delight, extended to 64 bits\n   // and converted to Java.\n   // Many 32 bit ntz algorithms are at http://www.hackersdelight.org/HDcode/ntz.cc\n   int n = 1;\n\n   // do the first step as a long, all others as ints.\n   int y = (int)x;\n   if (y==0) {n+=32; y = (int)(x>>>32); }\n   if ((y & 0x0000FFFF) == 0) { n+=16; y>>>=16; }\n   if ((y & 0x000000FF) == 0) { n+=8; y>>>=8; }\n   if ((y & 0x0000000F) == 0) { n+=4; y>>>=4; }\n   if ((y & 0x00000003) == 0) { n+=2; y>>>=2; }\n   return n - (y & 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["52ce7e961a8217faac8128e3c8fe67819eefdde9"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}