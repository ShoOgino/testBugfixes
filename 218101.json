{"path":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sortPartition(int).mjava","commits":[{"id":"36f5a8c57e16c0f801006a52f87c75378427852e","date":1393256707,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sortPartition(int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort#sortPartition(int).mjava","sourceNew":"  /** Sort a single partition in-memory. */\n  protected File sortPartition(int len) throws IOException {\n    BytesRefArray data = this.buffer;\n    File tempFile = File.createTempFile(\"sort\", \"partition\", tempDirectory);\n\n    long start = System.currentTimeMillis();\n    sortInfo.sortTime += (System.currentTimeMillis() - start);\n    \n    final ByteSequencesWriter out = new ByteSequencesWriter(tempFile);\n    BytesRef spare;\n    try {\n      BytesRefIterator iter = buffer.iterator(comparator);\n      while((spare = iter.next()) != null) {\n        assert spare.length <= Short.MAX_VALUE;\n        out.write(spare);\n      }\n      \n      out.close();\n\n      // Clean up the buffer for the next partition.\n      data.clear();\n      return tempFile;\n    } finally {\n      IOUtils.close(out);\n    }\n  }\n\n","sourceOld":"  /** Sort a single partition in-memory. */\n  protected File sortPartition(int len) throws IOException {\n    BytesRefArray data = this.buffer;\n    File tempFile = File.createTempFile(\"sort\", \"partition\", tempDirectory);\n\n    long start = System.currentTimeMillis();\n    sortInfo.sortTime += (System.currentTimeMillis() - start);\n    \n    final ByteSequencesWriter out = new ByteSequencesWriter(tempFile);\n    BytesRef spare;\n    try {\n      BytesRefIterator iter = buffer.iterator(comparator);\n      while((spare = iter.next()) != null) {\n        assert spare.length <= Short.MAX_VALUE;\n        out.write(spare);\n      }\n      \n      out.close();\n\n      // Clean up the buffer for the next partition.\n      data.clear();\n      return tempFile;\n    } finally {\n      IOUtils.close(out);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sortPartition(int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort#sortPartition(int).mjava","sourceNew":"  /** Sort a single partition in-memory. */\n  protected File sortPartition(int len) throws IOException {\n    BytesRefArray data = this.buffer;\n    File tempFile = File.createTempFile(\"sort\", \"partition\", tempDirectory);\n\n    long start = System.currentTimeMillis();\n    sortInfo.sortTime += (System.currentTimeMillis() - start);\n    \n    final ByteSequencesWriter out = new ByteSequencesWriter(tempFile);\n    BytesRef spare;\n    try {\n      BytesRefIterator iter = buffer.iterator(comparator);\n      while((spare = iter.next()) != null) {\n        assert spare.length <= Short.MAX_VALUE;\n        out.write(spare);\n      }\n      \n      out.close();\n\n      // Clean up the buffer for the next partition.\n      data.clear();\n      return tempFile;\n    } finally {\n      IOUtils.close(out);\n    }\n  }\n\n","sourceOld":"  /** Sort a single partition in-memory. */\n  protected File sortPartition(int len) throws IOException {\n    BytesRefArray data = this.buffer;\n    File tempFile = File.createTempFile(\"sort\", \"partition\", tempDirectory);\n\n    long start = System.currentTimeMillis();\n    sortInfo.sortTime += (System.currentTimeMillis() - start);\n    \n    final ByteSequencesWriter out = new ByteSequencesWriter(tempFile);\n    BytesRef spare;\n    try {\n      BytesRefIterator iter = buffer.iterator(comparator);\n      while((spare = iter.next()) != null) {\n        assert spare.length <= Short.MAX_VALUE;\n        out.write(spare);\n      }\n      \n      out.close();\n\n      // Clean up the buffer for the next partition.\n      data.clear();\n      return tempFile;\n    } finally {\n      IOUtils.close(out);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sortPartition(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sortPartition(int).mjava","sourceNew":"  /** Sort a single partition in-memory. */\n  protected Path sortPartition(int len) throws IOException {\n    BytesRefArray data = this.buffer;\n    Path tempFile = Files.createTempFile(tempDirectory, \"sort\", \"partition\");\n\n    long start = System.currentTimeMillis();\n    sortInfo.sortTime += (System.currentTimeMillis() - start);\n    \n    final ByteSequencesWriter out = new ByteSequencesWriter(tempFile);\n    BytesRef spare;\n    try {\n      BytesRefIterator iter = buffer.iterator(comparator);\n      while((spare = iter.next()) != null) {\n        assert spare.length <= Short.MAX_VALUE;\n        out.write(spare);\n      }\n      \n      out.close();\n\n      // Clean up the buffer for the next partition.\n      data.clear();\n      return tempFile;\n    } finally {\n      IOUtils.close(out);\n    }\n  }\n\n","sourceOld":"  /** Sort a single partition in-memory. */\n  protected File sortPartition(int len) throws IOException {\n    BytesRefArray data = this.buffer;\n    File tempFile = File.createTempFile(\"sort\", \"partition\", tempDirectory);\n\n    long start = System.currentTimeMillis();\n    sortInfo.sortTime += (System.currentTimeMillis() - start);\n    \n    final ByteSequencesWriter out = new ByteSequencesWriter(tempFile);\n    BytesRef spare;\n    try {\n      BytesRefIterator iter = buffer.iterator(comparator);\n      while((spare = iter.next()) != null) {\n        assert spare.length <= Short.MAX_VALUE;\n        out.write(spare);\n      }\n      \n      out.close();\n\n      // Clean up the buffer for the next partition.\n      data.clear();\n      return tempFile;\n    } finally {\n      IOUtils.close(out);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sortPartition(TrackingDirectoryWrapper).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sortPartition(int).mjava","sourceNew":"  /** Sort a single partition in-memory. */\n  protected String sortPartition(TrackingDirectoryWrapper trackingDir) throws IOException {\n    BytesRefArray data = this.buffer;\n\n    try (IndexOutput tempFile = trackingDir.createTempOutput(tempFileNamePrefix, \"sort\", IOContext.DEFAULT)) {\n      ByteSequencesWriter out = new ByteSequencesWriter(tempFile);\n      BytesRef spare;\n\n      long start = System.currentTimeMillis();\n      BytesRefIterator iter = buffer.iterator(comparator);\n      sortInfo.sortTime += (System.currentTimeMillis() - start);\n\n      while ((spare = iter.next()) != null) {\n        assert spare.length <= Short.MAX_VALUE;\n        out.write(spare);\n      }\n      \n      // Clean up the buffer for the next partition.\n      data.clear();\n\n      return tempFile.getName();\n    }\n  }\n\n","sourceOld":"  /** Sort a single partition in-memory. */\n  protected Path sortPartition(int len) throws IOException {\n    BytesRefArray data = this.buffer;\n    Path tempFile = Files.createTempFile(tempDirectory, \"sort\", \"partition\");\n\n    long start = System.currentTimeMillis();\n    sortInfo.sortTime += (System.currentTimeMillis() - start);\n    \n    final ByteSequencesWriter out = new ByteSequencesWriter(tempFile);\n    BytesRef spare;\n    try {\n      BytesRefIterator iter = buffer.iterator(comparator);\n      while((spare = iter.next()) != null) {\n        assert spare.length <= Short.MAX_VALUE;\n        out.write(spare);\n      }\n      \n      out.close();\n\n      // Clean up the buffer for the next partition.\n      data.clear();\n      return tempFile;\n    } finally {\n      IOUtils.close(out);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba791bce8103c79e38f957e9c5a53a75871bd918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","36f5a8c57e16c0f801006a52f87c75378427852e"],"36f5a8c57e16c0f801006a52f87c75378427852e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["867e3d9153fb761456b54a9dcce566e1545c5ef6"]},"commit2Childs":{"ba791bce8103c79e38f957e9c5a53a75871bd918":["f4abec28b874149a7223e32cc7a01704c27790de"],"36f5a8c57e16c0f801006a52f87c75378427852e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba791bce8103c79e38f957e9c5a53a75871bd918","36f5a8c57e16c0f801006a52f87c75378427852e"],"f4abec28b874149a7223e32cc7a01704c27790de":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}