{"path":"solr/core/src/test/org/apache/solr/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","commits":[{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    LeafReader ar = getOnlyLeafReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // lookupTerm(BytesRef) \n    assertEquals(-1, dv.lookupTerm(new BytesRef(\"apple\")));\n    assertEquals(0, dv.lookupTerm(new BytesRef(\"beer\")));\n    assertEquals(-2, dv.lookupTerm(new BytesRef(\"car\")));\n    assertEquals(1, dv.lookupTerm(new BytesRef(\"hello\")));\n    assertEquals(-3, dv.lookupTerm(new BytesRef(\"matter\")));\n    assertEquals(2, dv.lookupTerm(new BytesRef(\"world\")));\n    assertEquals(-4, dv.lookupTerm(new BytesRef(\"zany\")));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    LeafReader ar = getOnlyLeafReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // lookupTerm(BytesRef) \n    assertEquals(-1, dv.lookupTerm(new BytesRef(\"apple\")));\n    assertEquals(0, dv.lookupTerm(new BytesRef(\"beer\")));\n    assertEquals(-2, dv.lookupTerm(new BytesRef(\"car\")));\n    assertEquals(1, dv.lookupTerm(new BytesRef(\"hello\")));\n    assertEquals(-3, dv.lookupTerm(new BytesRef(\"matter\")));\n    assertEquals(2, dv.lookupTerm(new BytesRef(\"world\")));\n    assertEquals(-4, dv.lookupTerm(new BytesRef(\"zany\")));\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    LeafReader ar = getOnlyLeafReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // lookupTerm(BytesRef) \n    assertEquals(-1, dv.lookupTerm(new BytesRef(\"apple\")));\n    assertEquals(0, dv.lookupTerm(new BytesRef(\"beer\")));\n    assertEquals(-2, dv.lookupTerm(new BytesRef(\"car\")));\n    assertEquals(1, dv.lookupTerm(new BytesRef(\"hello\")));\n    assertEquals(-3, dv.lookupTerm(new BytesRef(\"matter\")));\n    assertEquals(2, dv.lookupTerm(new BytesRef(\"world\")));\n    assertEquals(-4, dv.lookupTerm(new BytesRef(\"zany\")));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    LeafReader ar = getOnlyLeafReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // lookupTerm(BytesRef) \n    assertEquals(-1, dv.lookupTerm(new BytesRef(\"apple\")));\n    assertEquals(0, dv.lookupTerm(new BytesRef(\"beer\")));\n    assertEquals(-2, dv.lookupTerm(new BytesRef(\"car\")));\n    assertEquals(1, dv.lookupTerm(new BytesRef(\"hello\")));\n    assertEquals(-3, dv.lookupTerm(new BytesRef(\"matter\")));\n    assertEquals(2, dv.lookupTerm(new BytesRef(\"world\")));\n    assertEquals(-4, dv.lookupTerm(new BytesRef(\"zany\")));\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    LeafReader ar = getOnlyLeafReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // lookupTerm(BytesRef) \n    assertEquals(-1, dv.lookupTerm(new BytesRef(\"apple\")));\n    assertEquals(0, dv.lookupTerm(new BytesRef(\"beer\")));\n    assertEquals(-2, dv.lookupTerm(new BytesRef(\"car\")));\n    assertEquals(1, dv.lookupTerm(new BytesRef(\"hello\")));\n    assertEquals(-3, dv.lookupTerm(new BytesRef(\"matter\")));\n    assertEquals(2, dv.lookupTerm(new BytesRef(\"world\")));\n    assertEquals(-4, dv.lookupTerm(new BytesRef(\"zany\")));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    LeafReader ar = getOnlyLeafReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // lookupTerm(BytesRef) \n    assertEquals(-1, dv.lookupTerm(new BytesRef(\"apple\")));\n    assertEquals(0, dv.lookupTerm(new BytesRef(\"beer\")));\n    assertEquals(-2, dv.lookupTerm(new BytesRef(\"car\")));\n    assertEquals(1, dv.lookupTerm(new BytesRef(\"hello\")));\n    assertEquals(-3, dv.lookupTerm(new BytesRef(\"matter\")));\n    assertEquals(2, dv.lookupTerm(new BytesRef(\"world\")));\n    assertEquals(-4, dv.lookupTerm(new BytesRef(\"zany\")));\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    LeafReader ar = getOnlyLeafReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // lookupTerm(BytesRef) \n    assertEquals(-1, dv.lookupTerm(new BytesRef(\"apple\")));\n    assertEquals(0, dv.lookupTerm(new BytesRef(\"beer\")));\n    assertEquals(-2, dv.lookupTerm(new BytesRef(\"car\")));\n    assertEquals(1, dv.lookupTerm(new BytesRef(\"hello\")));\n    assertEquals(-3, dv.lookupTerm(new BytesRef(\"matter\")));\n    assertEquals(2, dv.lookupTerm(new BytesRef(\"world\")));\n    assertEquals(-4, dv.lookupTerm(new BytesRef(\"zany\")));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    LeafReader ar = getOnlyLeafReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // lookupTerm(BytesRef) \n    assertEquals(-1, dv.lookupTerm(new BytesRef(\"apple\")));\n    assertEquals(0, dv.lookupTerm(new BytesRef(\"beer\")));\n    assertEquals(-2, dv.lookupTerm(new BytesRef(\"car\")));\n    assertEquals(1, dv.lookupTerm(new BytesRef(\"hello\")));\n    assertEquals(-3, dv.lookupTerm(new BytesRef(\"matter\")));\n    assertEquals(2, dv.lookupTerm(new BytesRef(\"world\")));\n    assertEquals(-4, dv.lookupTerm(new BytesRef(\"zany\")));\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}