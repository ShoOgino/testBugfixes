{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestMultiRangeQueries#testIntPointMultiRangeQuery().mjava","commits":[{"id":"bc29621aa343e88cbc47d168a1d556972a8d3851","date":1564149243,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestMultiRangeQueries#testIntPointMultiRangeQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testIntPointMultiRangeQuery() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int[] firstPoint = {112, 296, 512};\n    int[] secondPoint = {219, 514, 624};\n\n    Document doc = new Document();\n    doc.add(new IntPoint(\"point\", firstPoint));\n    iw.addDocument(doc);\n    iw.commit();\n\n    doc = new Document();\n    doc.add(new IntPoint(\"point\", secondPoint));\n    iw.addDocument(doc);\n    iw.commit();\n\n    // One range matches\n    int[] firstLowerRange= {111, 294, 502};\n    int[] firstUpperRange = {117, 301, 514};\n\n    int[] secondLowerRange = {15, 4, 415};\n    int[] secondUpperRange = {200, 402, 583};\n\n    IntPointMultiRangeBuilder builder = new IntPointMultiRangeBuilder(\"point\", 3);\n\n    builder.add(firstLowerRange, firstUpperRange);\n    builder.add(secondLowerRange, secondUpperRange);\n\n    Query query = builder.build();\n\n    IndexReader reader = iw.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    assertEquals(searcher.count(query), 1);\n\n    // Both ranges match\n    int[] firstMatchingLowerRange= {111, 294, 502};\n    int[] firstMatchingUpperRange = {117, 301, 514};\n\n    int[] secondMatchingLowerRange = {212, 512, 415};\n    int[] secondMatchingUpperRange = {228, 538, 647};\n\n\n    IntPointMultiRangeBuilder builder2 = new IntPointMultiRangeBuilder(\"point\", 3);\n\n    builder2.add(firstMatchingLowerRange, firstMatchingUpperRange);\n    builder2.add(secondMatchingLowerRange, secondMatchingUpperRange);\n\n    query = builder2.build();\n\n    assertEquals(searcher.count(query), 2);\n\n    // None match\n    int[] nonMatchingFirstRangeLower = {1, 3, 2};\n    int[] nonMatchingFirstRangeUpper = {5, 8, 7};\n\n    int[] nonMatchingSecondRangeLower = {11246, 19388, 21248};\n    int[] nonMatchingSecondRangeUpper = {13242, 20214, 23236};\n    IntPointMultiRangeBuilder builder3 = new IntPointMultiRangeBuilder(\"point\", 3);\n\n    builder3.add(nonMatchingFirstRangeLower, nonMatchingFirstRangeUpper);\n    builder3.add(nonMatchingSecondRangeLower, nonMatchingSecondRangeUpper);\n\n    query = builder3.build();\n\n    assertEquals(searcher.count(query), 0);\n\n    // None match\n    int[] firstEqualsPointLower= {112, 296, 512};\n    int[] firstEqualsPointUpper = {117, 299, 517};\n\n    int[] secondEqualsPointLower = {219, 514, 624};\n    int[] secondEqualsPointUpper = {13242, 20214, 23236};\n\n    IntPointMultiRangeBuilder builder4 = new IntPointMultiRangeBuilder(\"point\", 3);\n\n    builder4.add(firstEqualsPointLower, firstEqualsPointUpper);\n    builder4.add(secondEqualsPointLower, secondEqualsPointUpper);\n\n    query = builder4.build();\n\n    assertEquals(searcher.count(query), 2);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf9da1d4a2d2f04a562030d1d46862163f506f62","date":1566205061,"type":0,"author":"Jim Ferenczi","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestMultiRangeQueries#testIntPointMultiRangeQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testIntPointMultiRangeQuery() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    int[] firstPoint = {112, 296, 512};\n    int[] secondPoint = {219, 514, 624};\n\n    Document doc = new Document();\n    doc.add(new IntPoint(\"point\", firstPoint));\n    iw.addDocument(doc);\n    iw.commit();\n\n    doc = new Document();\n    doc.add(new IntPoint(\"point\", secondPoint));\n    iw.addDocument(doc);\n    iw.commit();\n\n    // One range matches\n    int[] firstLowerRange= {111, 294, 502};\n    int[] firstUpperRange = {117, 301, 514};\n\n    int[] secondLowerRange = {15, 4, 415};\n    int[] secondUpperRange = {200, 402, 583};\n\n    IntPointMultiRangeBuilder builder = new IntPointMultiRangeBuilder(\"point\", 3);\n\n    builder.add(firstLowerRange, firstUpperRange);\n    builder.add(secondLowerRange, secondUpperRange);\n\n    Query query = builder.build();\n\n    IndexReader reader = iw.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    assertEquals(searcher.count(query), 1);\n\n    // Both ranges match\n    int[] firstMatchingLowerRange= {111, 294, 502};\n    int[] firstMatchingUpperRange = {117, 301, 514};\n\n    int[] secondMatchingLowerRange = {212, 512, 415};\n    int[] secondMatchingUpperRange = {228, 538, 647};\n\n\n    IntPointMultiRangeBuilder builder2 = new IntPointMultiRangeBuilder(\"point\", 3);\n\n    builder2.add(firstMatchingLowerRange, firstMatchingUpperRange);\n    builder2.add(secondMatchingLowerRange, secondMatchingUpperRange);\n\n    query = builder2.build();\n\n    assertEquals(searcher.count(query), 2);\n\n    // None match\n    int[] nonMatchingFirstRangeLower = {1, 3, 2};\n    int[] nonMatchingFirstRangeUpper = {5, 8, 7};\n\n    int[] nonMatchingSecondRangeLower = {11246, 19388, 21248};\n    int[] nonMatchingSecondRangeUpper = {13242, 20214, 23236};\n    IntPointMultiRangeBuilder builder3 = new IntPointMultiRangeBuilder(\"point\", 3);\n\n    builder3.add(nonMatchingFirstRangeLower, nonMatchingFirstRangeUpper);\n    builder3.add(nonMatchingSecondRangeLower, nonMatchingSecondRangeUpper);\n\n    query = builder3.build();\n\n    assertEquals(searcher.count(query), 0);\n\n    // None match\n    int[] firstEqualsPointLower= {112, 296, 512};\n    int[] firstEqualsPointUpper = {117, 299, 517};\n\n    int[] secondEqualsPointLower = {219, 514, 624};\n    int[] secondEqualsPointUpper = {13242, 20214, 23236};\n\n    IntPointMultiRangeBuilder builder4 = new IntPointMultiRangeBuilder(\"point\", 3);\n\n    builder4.add(firstEqualsPointLower, firstEqualsPointUpper);\n    builder4.add(secondEqualsPointLower, secondEqualsPointUpper);\n\n    query = builder4.build();\n\n    assertEquals(searcher.count(query), 2);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc29621aa343e88cbc47d168a1d556972a8d3851":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf9da1d4a2d2f04a562030d1d46862163f506f62":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc29621aa343e88cbc47d168a1d556972a8d3851"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf9da1d4a2d2f04a562030d1d46862163f506f62"]},"commit2Childs":{"bc29621aa343e88cbc47d168a1d556972a8d3851":["cf9da1d4a2d2f04a562030d1d46862163f506f62"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc29621aa343e88cbc47d168a1d556972a8d3851","cf9da1d4a2d2f04a562030d1d46862163f506f62"],"cf9da1d4a2d2f04a562030d1d46862163f506f62":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}