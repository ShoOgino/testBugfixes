{"path":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#Query(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#Query(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d94d6afa51157e490fc169e192a154ffc4cdad0b","date":1283184289,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#Query(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b8488cadcd1dfaaf25307c360bb8cbb6ce8ab4f","date":1288120493,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#Query(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","date":1288424244,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#Query(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#Query(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#Query(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d94d6afa51157e490fc169e192a154ffc4cdad0b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["8b8488cadcd1dfaaf25307c360bb8cbb6ce8ab4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","8b8488cadcd1dfaaf25307c360bb8cbb6ce8ab4f"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["d94d6afa51157e490fc169e192a154ffc4cdad0b","8b8488cadcd1dfaaf25307c360bb8cbb6ce8ab4f"],"8b8488cadcd1dfaaf25307c360bb8cbb6ce8ab4f":["d94d6afa51157e490fc169e192a154ffc4cdad0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d94d6afa51157e490fc169e192a154ffc4cdad0b":["ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","8b8488cadcd1dfaaf25307c360bb8cbb6ce8ab4f"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":[],"8b8488cadcd1dfaaf25307c360bb8cbb6ce8ab4f":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d94d6afa51157e490fc169e192a154ffc4cdad0b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}