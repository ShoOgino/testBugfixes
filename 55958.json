{"path":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,int).mjava","commits":[{"id":"954e59be3da8dc1b046646ad7af4b466852009d3","date":1423482367,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, int postingsFlags) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, postingsFlags);\n    final Object[] drillDowns = new Object[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      Query query = drillDownQueries[dim];\n      Filter filter = DrillDownQuery.getFilter(query);\n      if (filter != null) {\n        drillDowns[dim] = filter;\n      } else {\n        // TODO: would be nice if we could say \"we will do no\n        // scoring\" here....\n        drillDowns[dim] = searcher.rewrite(query).createWeight(searcher, postingsFlags);\n      }\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, acceptDocs);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          if (drillDowns[dim] instanceof Filter) {\n            // Pass null for acceptDocs because we already\n            // passed it to baseScorer and baseScorer is\n            // MUST'd here\n            DocIdSet dis = ((Filter) drillDowns[dim]).getDocIdSet(context, null);\n\n            if (dis == null) {\n              continue;\n            }\n\n            Bits bits = dis.bits();\n\n            if (bits != null) {\n              // TODO: this logic is too naive: the\n              // existence of bits() in DIS today means\n              // either \"I'm a cheap FixedBitSet so apply me down\n              // low as you decode the postings\" or \"I'm so\n              // horribly expensive so apply me after all\n              // other Query/Filter clauses pass\"\n\n              // Filter supports random access; use that to\n              // prevent .advance() on costly filters:\n              dims[dim].bits = bits;\n\n              // TODO: Filter needs to express its expected\n              // cost somehow, before pulling the iterator;\n              // we should use that here to set the order to\n              // check the filters:\n\n            } else {\n              DocIdSetIterator disi = dis.iterator();\n              if (disi == null) {\n                nullCount++;\n                continue;\n              }\n              dims[dim].disi = disi;\n            }\n          } else {\n            DocIdSetIterator disi = ((Weight) drillDowns[dim]).scorer(context, null);\n            if (disi == null) {\n              nullCount++;\n              continue;\n            }\n            dims[dim].disi = disi;\n          }\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, needsScores);\n    final Object[] drillDowns = new Object[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      Query query = drillDownQueries[dim];\n      Filter filter = DrillDownQuery.getFilter(query);\n      if (filter != null) {\n        drillDowns[dim] = filter;\n      } else {\n        // TODO: would be nice if we could say \"we will do no\n        // scoring\" here....\n        drillDowns[dim] = searcher.rewrite(query).createWeight(searcher, needsScores);\n      }\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, acceptDocs);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          if (drillDowns[dim] instanceof Filter) {\n            // Pass null for acceptDocs because we already\n            // passed it to baseScorer and baseScorer is\n            // MUST'd here\n            DocIdSet dis = ((Filter) drillDowns[dim]).getDocIdSet(context, null);\n\n            if (dis == null) {\n              continue;\n            }\n\n            Bits bits = dis.bits();\n\n            if (bits != null) {\n              // TODO: this logic is too naive: the\n              // existence of bits() in DIS today means\n              // either \"I'm a cheap FixedBitSet so apply me down\n              // low as you decode the postings\" or \"I'm so\n              // horribly expensive so apply me after all\n              // other Query/Filter clauses pass\"\n\n              // Filter supports random access; use that to\n              // prevent .advance() on costly filters:\n              dims[dim].bits = bits;\n\n              // TODO: Filter needs to express its expected\n              // cost somehow, before pulling the iterator;\n              // we should use that here to set the order to\n              // check the filters:\n\n            } else {\n              DocIdSetIterator disi = dis.iterator();\n              if (disi == null) {\n                nullCount++;\n                continue;\n              }\n              dims[dim].disi = disi;\n            }\n          } else {\n            DocIdSetIterator disi = ((Weight) drillDowns[dim]).scorer(context, null);\n            if (disi == null) {\n              nullCount++;\n              continue;\n            }\n            dims[dim].disi = disi;\n          }\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a47d642ab24da1a811adce4bda9cc52c520ca13","date":1423483323,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,int).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, needsScores);\n    final Object[] drillDowns = new Object[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      Query query = drillDownQueries[dim];\n      Filter filter = DrillDownQuery.getFilter(query);\n      if (filter != null) {\n        drillDowns[dim] = filter;\n      } else {\n        // TODO: would be nice if we could say \"we will do no\n        // scoring\" here....\n        drillDowns[dim] = searcher.rewrite(query).createWeight(searcher, needsScores);\n      }\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, acceptDocs);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          if (drillDowns[dim] instanceof Filter) {\n            // Pass null for acceptDocs because we already\n            // passed it to baseScorer and baseScorer is\n            // MUST'd here\n            DocIdSet dis = ((Filter) drillDowns[dim]).getDocIdSet(context, null);\n\n            if (dis == null) {\n              continue;\n            }\n\n            Bits bits = dis.bits();\n\n            if (bits != null) {\n              // TODO: this logic is too naive: the\n              // existence of bits() in DIS today means\n              // either \"I'm a cheap FixedBitSet so apply me down\n              // low as you decode the postings\" or \"I'm so\n              // horribly expensive so apply me after all\n              // other Query/Filter clauses pass\"\n\n              // Filter supports random access; use that to\n              // prevent .advance() on costly filters:\n              dims[dim].bits = bits;\n\n              // TODO: Filter needs to express its expected\n              // cost somehow, before pulling the iterator;\n              // we should use that here to set the order to\n              // check the filters:\n\n            } else {\n              DocIdSetIterator disi = dis.iterator();\n              if (disi == null) {\n                nullCount++;\n                continue;\n              }\n              dims[dim].disi = disi;\n            }\n          } else {\n            DocIdSetIterator disi = ((Weight) drillDowns[dim]).scorer(context, null);\n            if (disi == null) {\n              nullCount++;\n              continue;\n            }\n            dims[dim].disi = disi;\n          }\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, int postingsFlags) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, postingsFlags);\n    final Object[] drillDowns = new Object[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      Query query = drillDownQueries[dim];\n      Filter filter = DrillDownQuery.getFilter(query);\n      if (filter != null) {\n        drillDowns[dim] = filter;\n      } else {\n        // TODO: would be nice if we could say \"we will do no\n        // scoring\" here....\n        drillDowns[dim] = searcher.rewrite(query).createWeight(searcher, postingsFlags);\n      }\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, acceptDocs);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          if (drillDowns[dim] instanceof Filter) {\n            // Pass null for acceptDocs because we already\n            // passed it to baseScorer and baseScorer is\n            // MUST'd here\n            DocIdSet dis = ((Filter) drillDowns[dim]).getDocIdSet(context, null);\n\n            if (dis == null) {\n              continue;\n            }\n\n            Bits bits = dis.bits();\n\n            if (bits != null) {\n              // TODO: this logic is too naive: the\n              // existence of bits() in DIS today means\n              // either \"I'm a cheap FixedBitSet so apply me down\n              // low as you decode the postings\" or \"I'm so\n              // horribly expensive so apply me after all\n              // other Query/Filter clauses pass\"\n\n              // Filter supports random access; use that to\n              // prevent .advance() on costly filters:\n              dims[dim].bits = bits;\n\n              // TODO: Filter needs to express its expected\n              // cost somehow, before pulling the iterator;\n              // we should use that here to set the order to\n              // check the filters:\n\n            } else {\n              DocIdSetIterator disi = dis.iterator();\n              if (disi == null) {\n                nullCount++;\n                continue;\n              }\n              dims[dim].disi = disi;\n            }\n          } else {\n            DocIdSetIterator disi = ((Weight) drillDowns[dim]).scorer(context, null);\n            if (disi == null) {\n              nullCount++;\n              continue;\n            }\n            dims[dim].disi = disi;\n          }\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["954e59be3da8dc1b046646ad7af4b466852009d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"954e59be3da8dc1b046646ad7af4b466852009d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6a47d642ab24da1a811adce4bda9cc52c520ca13"]},"commit2Childs":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["954e59be3da8dc1b046646ad7af4b466852009d3"],"954e59be3da8dc1b046646ad7af4b466852009d3":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}