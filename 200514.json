{"path":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,int,NumericTokenStream).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,int,NumericTokenStream).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,int,NumericTokenStream).mjava","sourceNew":"  public TrieTokenizer(Reader input, TrieTypes type, int precisionStep, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts);\n    this.type = type;\n    this.precisionStep = precisionStep;\n    this.ts = ts;\n\n   try {\n     reset(input);\n   } catch (IOException e) {\n     throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n   }\n  }\n\n","sourceOld":"  public TrieTokenizer(Reader input, TrieTypes type, int precisionStep, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts);\n    this.type = type;\n    this.precisionStep = precisionStep;\n    this.ts = ts;\n\n   try {\n     reset(input);\n   } catch (IOException e) {\n     throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,int,NumericTokenStream).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,int,NumericTokenStream).mjava","sourceNew":"  public TrieTokenizer(Reader input, TrieTypes type, int precisionStep, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts);\n    this.type = type;\n    this.precisionStep = precisionStep;\n    this.ts = ts;\n\n   try {\n     reset(input);\n   } catch (IOException e) {\n     throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n   }\n  }\n\n","sourceOld":"  public TrieTokenizer(Reader input, TrieTypes type, int precisionStep, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts);\n    this.type = type;\n    this.precisionStep = precisionStep;\n    this.ts = ts;\n\n   try {\n     reset(input);\n   } catch (IOException e) {\n     throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,int,NumericTokenStream).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,int,NumericTokenStream).mjava","sourceNew":"  public TrieTokenizer(Reader input, TrieTypes type, int precisionStep, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts);\n    this.type = type;\n    this.precisionStep = precisionStep;\n    this.ts = ts;\n\n   try {\n     reset(input);\n   } catch (IOException e) {\n     throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n   }\n  }\n\n","sourceOld":"  public TrieTokenizer(Reader input, TrieTypes type, int precisionStep, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts);\n    this.type = type;\n    this.precisionStep = precisionStep;\n    this.ts = ts;\n\n   try {\n     reset(input);\n   } catch (IOException e) {\n     throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2782fe88d18fedf3ef67402c9cb5a41978a8c7","date":1328901155,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,int,NumericTokenStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,int,NumericTokenStream).mjava","sourceNew":"  public TrieTokenizer(Reader input, TrieTypes type, int precisionStep, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts, input);\n    this.type = type;\n    this.precisionStep = precisionStep;\n    this.ts = ts;\n\n   try {\n     reset(input);\n   } catch (IOException e) {\n     throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n   }\n  }\n\n","sourceOld":"  public TrieTokenizer(Reader input, TrieTypes type, int precisionStep, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts);\n    this.type = type;\n    this.precisionStep = precisionStep;\n    this.ts = ts;\n\n   try {\n     reset(input);\n   } catch (IOException e) {\n     throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,int,NumericTokenStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,int,NumericTokenStream).mjava","sourceNew":"  public TrieTokenizer(Reader input, TrieTypes type, int precisionStep, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts, input);\n    this.type = type;\n    this.precisionStep = precisionStep;\n    this.ts = ts;\n\n    reset(input);\n  }\n\n","sourceOld":"  public TrieTokenizer(Reader input, TrieTypes type, int precisionStep, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts, input);\n    this.type = type;\n    this.precisionStep = precisionStep;\n    this.ts = ts;\n\n   try {\n     reset(input);\n   } catch (IOException e) {\n     throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n   }\n  }\n\n","bugFix":["be29e0e2cef1fd569147732e48caf8538790339b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b893541afcaa76dcbac2fcd24bbfa05ca6b41129","date":1342450620,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,int,NumericTokenStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,int,NumericTokenStream).mjava","sourceNew":"  public TrieTokenizer(Reader input, TrieTypes type, int precisionStep, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts, input);\n    this.type = type;\n    this.precisionStep = precisionStep;\n    this.ts = ts;\n\n    setReader(input);\n  }\n\n","sourceOld":"  public TrieTokenizer(Reader input, TrieTypes type, int precisionStep, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts, input);\n    this.type = type;\n    this.precisionStep = precisionStep;\n    this.ts = ts;\n\n    reset(input);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,int,NumericTokenStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,int,NumericTokenStream).mjava","sourceNew":"  public TrieTokenizer(Reader input, TrieTypes type, int precisionStep, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts, input);\n    this.type = type;\n    this.precisionStep = precisionStep;\n    this.ts = ts;\n\n    setReader(input);\n  }\n\n","sourceOld":"  public TrieTokenizer(Reader input, TrieTypes type, int precisionStep, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts, input);\n    this.type = type;\n    this.precisionStep = precisionStep;\n    this.ts = ts;\n\n   try {\n     reset(input);\n   } catch (IOException e) {\n     throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,int,NumericTokenStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,int,NumericTokenStream).mjava","sourceNew":"  public TrieTokenizer(Reader input, TrieTypes type, int precisionStep, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts, input);\n    this.type = type;\n    this.precisionStep = precisionStep;\n    this.ts = ts;\n\n    setReader(input);\n  }\n\n","sourceOld":"  public TrieTokenizer(Reader input, TrieTypes type, int precisionStep, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts, input);\n    this.type = type;\n    this.precisionStep = precisionStep;\n    this.ts = ts;\n\n    reset(input);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c1b87b155748a27fbed84a0ffb3f8799177451e","date":1346349018,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,int,NumericTokenStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,int,NumericTokenStream).mjava","sourceNew":"  public TrieTokenizer(Reader input, TrieTypes type, int precisionStep, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts, input);\n    this.type = type;\n    this.precisionStep = precisionStep;\n    this.ts = ts;\n  }\n\n","sourceOld":"  public TrieTokenizer(Reader input, TrieTypes type, int precisionStep, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts, input);\n    this.type = type;\n    this.precisionStep = precisionStep;\n    this.ts = ts;\n\n    setReader(input);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,int,NumericTokenStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,int,NumericTokenStream).mjava","sourceNew":"  public TrieTokenizer(Reader input, TrieTypes type, int precisionStep, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts, input);\n    this.type = type;\n    this.precisionStep = precisionStep;\n    this.ts = ts;\n  }\n\n","sourceOld":"  public TrieTokenizer(Reader input, TrieTypes type, int precisionStep, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts, input);\n    this.type = type;\n    this.precisionStep = precisionStep;\n    this.ts = ts;\n\n    setReader(input);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76bed23fab69b464e4533b39b120258a5dc5a4b5","date":1357424354,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,NumericTokenStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,int,NumericTokenStream).mjava","sourceNew":"  public TrieTokenizer(Reader input, TrieTypes type, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts, input);\n    this.type = type;\n    this.ts = ts;\n  }\n\n","sourceOld":"  public TrieTokenizer(Reader input, TrieTypes type, int precisionStep, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts, input);\n    this.type = type;\n    this.precisionStep = precisionStep;\n    this.ts = ts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,int,NumericTokenStream).mjava","sourceNew":null,"sourceOld":"  public TrieTokenizer(Reader input, TrieTypes type, int precisionStep, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts, input);\n    this.type = type;\n    this.precisionStep = precisionStep;\n    this.ts = ts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c1b87b155748a27fbed84a0ffb3f8799177451e":["b893541afcaa76dcbac2fcd24bbfa05ca6b41129"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4c1b87b155748a27fbed84a0ffb3f8799177451e","76bed23fab69b464e4533b39b120258a5dc5a4b5"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"76bed23fab69b464e4533b39b120258a5dc5a4b5":["4c1b87b155748a27fbed84a0ffb3f8799177451e"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["aba371508186796cc6151d8223a5b4e16d02e26e","4c1b87b155748a27fbed84a0ffb3f8799177451e"],"6c2782fe88d18fedf3ef67402c9cb5a41978a8c7":["c26f00b574427b55127e869b935845554afde1fa"],"b893541afcaa76dcbac2fcd24bbfa05ca6b41129":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"aba371508186796cc6151d8223a5b4e16d02e26e":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","b893541afcaa76dcbac2fcd24bbfa05ca6b41129"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["6c2782fe88d18fedf3ef67402c9cb5a41978a8c7","b893541afcaa76dcbac2fcd24bbfa05ca6b41129"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["6c2782fe88d18fedf3ef67402c9cb5a41978a8c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["76bed23fab69b464e4533b39b120258a5dc5a4b5"]},"commit2Childs":{"4c1b87b155748a27fbed84a0ffb3f8799177451e":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","76bed23fab69b464e4533b39b120258a5dc5a4b5","05a14b2611ead08655a2b2bdc61632eb31316e57"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c26f00b574427b55127e869b935845554afde1fa":["6c2782fe88d18fedf3ef67402c9cb5a41978a8c7"],"76bed23fab69b464e4533b39b120258a5dc5a4b5":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"6c2782fe88d18fedf3ef67402c9cb5a41978a8c7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"b893541afcaa76dcbac2fcd24bbfa05ca6b41129":["4c1b87b155748a27fbed84a0ffb3f8799177451e","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aba371508186796cc6151d8223a5b4e16d02e26e":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b893541afcaa76dcbac2fcd24bbfa05ca6b41129","aba371508186796cc6151d8223a5b4e16d02e26e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","05a14b2611ead08655a2b2bdc61632eb31316e57","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}