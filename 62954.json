{"path":"solr/core/src/java/org/apache/solr/pkg/PackagePluginHolder#reload(PackageLoader.Package).mjava","commits":[{"id":"954ae83b7dfacaa33d48ea056448ae11f7745a93","date":1571867711,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackagePluginHolder#reload(PackageLoader.Package).mjava","pathOld":"/dev/null","sourceNew":"  private synchronized void reload(PackageLoader.Package pkg) {\n    String lessThan = maxVersion();\n    PackageLoader.Package.Version newest = pkg.getLatest(lessThan);\n    if (newest == null) {\n      log.error(\"No latest version available for package : {}\", pkg.name());\n      return;\n    }\n    if (lessThan != null) {\n      PackageLoader.Package.Version pkgLatest = pkg.getLatest();\n      if (pkgLatest != newest) {\n        log.info(\"Using version :{}. latest is {},  params.json has config {} : {}\", newest.getVersion(), pkgLatest.getVersion(), pkg.name(), lessThan);\n      }\n    }\n\n    if (pkgVersion != null) {\n      if (newest == pkgVersion) {\n        //I'm already using the latest classloder in the package. nothing to do\n        return;\n      }\n    }\n\n    log.info(\"loading plugin: {} -> {} using  package {}:{}\",\n        pluginInfo.type, pluginInfo.name, pkg.name(), newest.getVersion());\n\n    Object instance = SolrCore.createInstance(pluginInfo.className,\n        pluginMeta.clazz, pluginMeta.getCleanTag(), core, newest.getLoader());\n    PluginBag.initInstance(instance, pluginInfo);\n    T old = inst;\n    inst = (T) instance;\n    pkgVersion = newest;\n    if (old instanceof AutoCloseable) {\n      AutoCloseable closeable = (AutoCloseable) old;\n      try {\n        closeable.close();\n      } catch (Exception e) {\n        log.error(\"error closing plugin\", e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60c716cf818aff6857d8490cd0fb8b5aa432408f","date":1577074826,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackagePluginHolder#reload(PackageLoader.Package).mjava","pathOld":"solr/core/src/java/org/apache/solr/pkg/PackagePluginHolder#reload(PackageLoader.Package).mjava","sourceNew":"  private synchronized void reload(PackageLoader.Package pkg) {\n    String lessThan = maxVersion();\n    PackageLoader.Package.Version newest = pkg.getLatest(lessThan);\n    if (newest == null) {\n      log.error(\"No latest version available for package : {}\", pkg.name());\n      return;\n    }\n    if (lessThan != null) {\n      PackageLoader.Package.Version pkgLatest = pkg.getLatest();\n      if (pkgLatest != newest) {\n        log.info(\"Using version :{}. latest is {},  params.json has config {} : {}\", newest.getVersion(), pkgLatest.getVersion(), pkg.name(), lessThan);\n      }\n    }\n\n    if (pkgVersion != null) {\n      if (newest == pkgVersion) {\n        //I'm already using the latest classloder in the package. nothing to do\n        return;\n      }\n    }\n\n    log.info(\"loading plugin: {} -> {} using  package {}:{}\",\n        pluginInfo.type, pluginInfo.name, pkg.name(), newest.getVersion());\n\n    initNewInstance(newest);\n    pkgVersion = newest;\n\n  }\n\n","sourceOld":"  private synchronized void reload(PackageLoader.Package pkg) {\n    String lessThan = maxVersion();\n    PackageLoader.Package.Version newest = pkg.getLatest(lessThan);\n    if (newest == null) {\n      log.error(\"No latest version available for package : {}\", pkg.name());\n      return;\n    }\n    if (lessThan != null) {\n      PackageLoader.Package.Version pkgLatest = pkg.getLatest();\n      if (pkgLatest != newest) {\n        log.info(\"Using version :{}. latest is {},  params.json has config {} : {}\", newest.getVersion(), pkgLatest.getVersion(), pkg.name(), lessThan);\n      }\n    }\n\n    if (pkgVersion != null) {\n      if (newest == pkgVersion) {\n        //I'm already using the latest classloder in the package. nothing to do\n        return;\n      }\n    }\n\n    log.info(\"loading plugin: {} -> {} using  package {}:{}\",\n        pluginInfo.type, pluginInfo.name, pkg.name(), newest.getVersion());\n\n    Object instance = SolrCore.createInstance(pluginInfo.className,\n        pluginMeta.clazz, pluginMeta.getCleanTag(), core, newest.getLoader());\n    PluginBag.initInstance(instance, pluginInfo);\n    T old = inst;\n    inst = (T) instance;\n    pkgVersion = newest;\n    if (old instanceof AutoCloseable) {\n      AutoCloseable closeable = (AutoCloseable) old;\n      try {\n        closeable.close();\n      } catch (Exception e) {\n        log.error(\"error closing plugin\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","date":1577276097,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackagePluginHolder#reload(PackageLoader.Package).mjava","pathOld":"solr/core/src/java/org/apache/solr/pkg/PackagePluginHolder#reload(PackageLoader.Package).mjava","sourceNew":"  private synchronized void reload(PackageLoader.Package pkg) {\n    String lessThan = maxVersion();\n    PackageLoader.Package.Version newest = pkg.getLatest(lessThan);\n    if (newest == null) {\n      log.error(\"No latest version available for package : {}\", pkg.name());\n      return;\n    }\n    if (lessThan != null) {\n      PackageLoader.Package.Version pkgLatest = pkg.getLatest();\n      if (pkgLatest != newest) {\n        log.info(\"Using version :{}. latest is {},  params.json has config {} : {}\", newest.getVersion(), pkgLatest.getVersion(), pkg.name(), lessThan);\n      }\n    }\n\n    if (pkgVersion != null) {\n      if (newest == pkgVersion) {\n        //I'm already using the latest classloder in the package. nothing to do\n        return;\n      }\n    }\n\n    log.info(\"loading plugin: {} -> {} using  package {}:{}\",\n        pluginInfo.type, pluginInfo.name, pkg.name(), newest.getVersion());\n\n    initNewInstance(newest);\n    pkgVersion = newest;\n\n  }\n\n","sourceOld":"  private synchronized void reload(PackageLoader.Package pkg) {\n    String lessThan = maxVersion();\n    PackageLoader.Package.Version newest = pkg.getLatest(lessThan);\n    if (newest == null) {\n      log.error(\"No latest version available for package : {}\", pkg.name());\n      return;\n    }\n    if (lessThan != null) {\n      PackageLoader.Package.Version pkgLatest = pkg.getLatest();\n      if (pkgLatest != newest) {\n        log.info(\"Using version :{}. latest is {},  params.json has config {} : {}\", newest.getVersion(), pkgLatest.getVersion(), pkg.name(), lessThan);\n      }\n    }\n\n    if (pkgVersion != null) {\n      if (newest == pkgVersion) {\n        //I'm already using the latest classloder in the package. nothing to do\n        return;\n      }\n    }\n\n    log.info(\"loading plugin: {} -> {} using  package {}:{}\",\n        pluginInfo.type, pluginInfo.name, pkg.name(), newest.getVersion());\n\n    Object instance = SolrCore.createInstance(pluginInfo.className,\n        pluginMeta.clazz, pluginMeta.getCleanTag(), core, newest.getLoader());\n    PluginBag.initInstance(instance, pluginInfo);\n    T old = inst;\n    inst = (T) instance;\n    pkgVersion = newest;\n    if (old instanceof AutoCloseable) {\n      AutoCloseable closeable = (AutoCloseable) old;\n      try {\n        closeable.close();\n      } catch (Exception e) {\n        log.error(\"error closing plugin\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackagePluginHolder#reload(PackageLoader.Package).mjava","pathOld":"solr/core/src/java/org/apache/solr/pkg/PackagePluginHolder#reload(PackageLoader.Package).mjava","sourceNew":"  private synchronized void reload(PackageLoader.Package pkg) {\n    String lessThan = maxVersion();\n    PackageLoader.Package.Version newest = pkg.getLatest(lessThan);\n    if (newest == null) {\n      log.error(\"No latest version available for package : {}\", pkg.name());\n      return;\n    }\n    if (lessThan != null) {\n      PackageLoader.Package.Version pkgLatest = pkg.getLatest();\n      if (pkgLatest != newest) {\n        if (log.isInfoEnabled()) {\n          log.info(\"Using version :{}. latest is {},  params.json has config {} : {}\", newest.getVersion(), pkgLatest.getVersion(), pkg.name(), lessThan);\n        }\n      }\n    }\n\n    if (pkgVersion != null) {\n      if (newest == pkgVersion) {\n        //I'm already using the latest classloder in the package. nothing to do\n        return;\n      }\n    }\n\n    if (log.isInfoEnabled()) {\n      log.info(\"loading plugin: {} -> {} using  package {}:{}\",\n          pluginInfo.type, pluginInfo.name, pkg.name(), newest.getVersion());\n    }\n\n    initNewInstance(newest);\n    pkgVersion = newest;\n\n  }\n\n","sourceOld":"  private synchronized void reload(PackageLoader.Package pkg) {\n    String lessThan = maxVersion();\n    PackageLoader.Package.Version newest = pkg.getLatest(lessThan);\n    if (newest == null) {\n      log.error(\"No latest version available for package : {}\", pkg.name());\n      return;\n    }\n    if (lessThan != null) {\n      PackageLoader.Package.Version pkgLatest = pkg.getLatest();\n      if (pkgLatest != newest) {\n        log.info(\"Using version :{}. latest is {},  params.json has config {} : {}\", newest.getVersion(), pkgLatest.getVersion(), pkg.name(), lessThan);\n      }\n    }\n\n    if (pkgVersion != null) {\n      if (newest == pkgVersion) {\n        //I'm already using the latest classloder in the package. nothing to do\n        return;\n      }\n    }\n\n    log.info(\"loading plugin: {} -> {} using  package {}:{}\",\n        pluginInfo.type, pluginInfo.name, pkg.name(), newest.getVersion());\n\n    initNewInstance(newest);\n    pkgVersion = newest;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7757ad4a47d8b36bb6894c5ad33f766b4ddfa389","date":1591056099,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackagePluginHolder#reload(PackageLoader.Package).mjava","pathOld":"solr/core/src/java/org/apache/solr/pkg/PackagePluginHolder#reload(PackageLoader.Package).mjava","sourceNew":"  private synchronized void reload(PackageLoader.Package pkg) {\n    String lessThan = maxVersion();\n    PackageLoader.Package.Version newest = pkg.getLatest(lessThan);\n    if (newest == null) {\n      log.error(\"No latest version available for package : {}\", pkg.name());\n      return;\n    }\n    if (lessThan != null) {\n      PackageLoader.Package.Version pkgLatest = pkg.getLatest();\n      if (pkgLatest != newest) {\n        if (log.isInfoEnabled()) {\n          log.info(\"Using version :{}. latest is {},  params.json has config {} : {}\", newest.getVersion(), pkgLatest.getVersion(), pkg.name(), lessThan);\n        }\n      }\n    }\n\n    if (pkgVersion != null) {\n      if (newest == pkgVersion) {\n        //I'm already using the latest classloader in the package. nothing to do\n        return;\n      }\n    }\n\n    if (log.isInfoEnabled()) {\n      log.info(\"loading plugin: {} -> {} using  package {}:{}\",\n          pluginInfo.type, pluginInfo.name, pkg.name(), newest.getVersion());\n    }\n\n    initNewInstance(newest);\n    pkgVersion = newest;\n\n  }\n\n","sourceOld":"  private synchronized void reload(PackageLoader.Package pkg) {\n    String lessThan = maxVersion();\n    PackageLoader.Package.Version newest = pkg.getLatest(lessThan);\n    if (newest == null) {\n      log.error(\"No latest version available for package : {}\", pkg.name());\n      return;\n    }\n    if (lessThan != null) {\n      PackageLoader.Package.Version pkgLatest = pkg.getLatest();\n      if (pkgLatest != newest) {\n        if (log.isInfoEnabled()) {\n          log.info(\"Using version :{}. latest is {},  params.json has config {} : {}\", newest.getVersion(), pkgLatest.getVersion(), pkg.name(), lessThan);\n        }\n      }\n    }\n\n    if (pkgVersion != null) {\n      if (newest == pkgVersion) {\n        //I'm already using the latest classloder in the package. nothing to do\n        return;\n      }\n    }\n\n    if (log.isInfoEnabled()) {\n      log.info(\"loading plugin: {} -> {} using  package {}:{}\",\n          pluginInfo.type, pluginInfo.name, pkg.name(), newest.getVersion());\n    }\n\n    initNewInstance(newest);\n    pkgVersion = newest;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2ed9b72e5fa27a7bd4857f222ca815341979d4a","date":1594879524,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackagePluginHolder#reload(PackageLoader.Package).mjava","pathOld":"solr/core/src/java/org/apache/solr/pkg/PackagePluginHolder#reload(PackageLoader.Package).mjava","sourceNew":"  private synchronized void reload(PackageLoader.Package pkg) {\n    String lessThan = core.getSolrConfig().maxPackageVersion(info.pkgName);\n    PackageLoader.Package.Version newest = pkg.getLatest(lessThan);\n    if (newest == null) {\n      log.error(\"No latest version available for package : {}\", pkg.name());\n      return;\n    }\n    if (lessThan != null) {\n      PackageLoader.Package.Version pkgLatest = pkg.getLatest();\n      if (pkgLatest != newest) {\n        if (log.isInfoEnabled()) {\n          log.info(\"Using version :{}. latest is {},  params.json has config {} : {}\", newest.getVersion(), pkgLatest.getVersion(), pkg.name(), lessThan);\n        }\n      }\n    }\n\n    if (pkgVersion != null) {\n      if (newest == pkgVersion) {\n        //I'm already using the latest classloader in the package. nothing to do\n        return;\n      }\n    }\n\n    if (log.isInfoEnabled()) {\n      log.info(\"loading plugin: {} -> {} using  package {}:{}\",\n          pluginInfo.type, pluginInfo.name, pkg.name(), newest.getVersion());\n    }\n\n    initNewInstance(newest);\n    pkgVersion = newest;\n\n  }\n\n","sourceOld":"  private synchronized void reload(PackageLoader.Package pkg) {\n    String lessThan = maxVersion();\n    PackageLoader.Package.Version newest = pkg.getLatest(lessThan);\n    if (newest == null) {\n      log.error(\"No latest version available for package : {}\", pkg.name());\n      return;\n    }\n    if (lessThan != null) {\n      PackageLoader.Package.Version pkgLatest = pkg.getLatest();\n      if (pkgLatest != newest) {\n        if (log.isInfoEnabled()) {\n          log.info(\"Using version :{}. latest is {},  params.json has config {} : {}\", newest.getVersion(), pkgLatest.getVersion(), pkg.name(), lessThan);\n        }\n      }\n    }\n\n    if (pkgVersion != null) {\n      if (newest == pkgVersion) {\n        //I'm already using the latest classloader in the package. nothing to do\n        return;\n      }\n    }\n\n    if (log.isInfoEnabled()) {\n      log.info(\"loading plugin: {} -> {} using  package {}:{}\",\n          pluginInfo.type, pluginInfo.name, pkg.name(), newest.getVersion());\n    }\n\n    initNewInstance(newest);\n    pkgVersion = newest;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403c3219db9547cd15baeb98f0804fbb65f36c0f","date":1600394849,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackagePluginHolder#reload(PackageLoader.Package,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/pkg/PackagePluginHolder#reload(PackageLoader.Package).mjava","sourceNew":"  private synchronized void reload(PackageLoader.Package pkg, SolrCore core) {\n    String lessThan = core.getSolrConfig().maxPackageVersion(info.pkgName);\n    PackageLoader.Package.Version newest = pkg.getLatest(lessThan);\n    if (newest == null) {\n      log.error(\"No latest version available for package : {}\", pkg.name());\n      return;\n    }\n    if (lessThan != null) {\n      PackageLoader.Package.Version pkgLatest = pkg.getLatest();\n      if (pkgLatest != newest) {\n        if (log.isInfoEnabled()) {\n          log.info(\"Using version :{}. latest is {},  params.json has config {} : {}\", newest.getVersion(), pkgLatest.getVersion(), pkg.name(), lessThan);\n        }\n      }\n    }\n\n    if (pkgVersion != null) {\n      if (newest == pkgVersion) {\n        //I'm already using the latest classloader in the package. nothing to do\n        return;\n      }\n    }\n\n    if (log.isInfoEnabled()) {\n      log.info(\"loading plugin: {} -> {} using  package {}:{}\",\n          pluginInfo.type, pluginInfo.name, pkg.name(), newest.getVersion());\n    }\n\n    initNewInstance(newest, core);\n    pkgVersion = newest;\n\n  }\n\n","sourceOld":"  private synchronized void reload(PackageLoader.Package pkg) {\n    String lessThan = core.getSolrConfig().maxPackageVersion(info.pkgName);\n    PackageLoader.Package.Version newest = pkg.getLatest(lessThan);\n    if (newest == null) {\n      log.error(\"No latest version available for package : {}\", pkg.name());\n      return;\n    }\n    if (lessThan != null) {\n      PackageLoader.Package.Version pkgLatest = pkg.getLatest();\n      if (pkgLatest != newest) {\n        if (log.isInfoEnabled()) {\n          log.info(\"Using version :{}. latest is {},  params.json has config {} : {}\", newest.getVersion(), pkgLatest.getVersion(), pkg.name(), lessThan);\n        }\n      }\n    }\n\n    if (pkgVersion != null) {\n      if (newest == pkgVersion) {\n        //I'm already using the latest classloader in the package. nothing to do\n        return;\n      }\n    }\n\n    if (log.isInfoEnabled()) {\n      log.info(\"loading plugin: {} -> {} using  package {}:{}\",\n          pluginInfo.type, pluginInfo.name, pkg.name(), newest.getVersion());\n    }\n\n    initNewInstance(newest);\n    pkgVersion = newest;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60c716cf818aff6857d8490cd0fb8b5aa432408f":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":["954ae83b7dfacaa33d48ea056448ae11f7745a93","60c716cf818aff6857d8490cd0fb8b5aa432408f"],"403c3219db9547cd15baeb98f0804fbb65f36c0f":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["60c716cf818aff6857d8490cd0fb8b5aa432408f"],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["7757ad4a47d8b36bb6894c5ad33f766b4ddfa389"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7757ad4a47d8b36bb6894c5ad33f766b4ddfa389":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403c3219db9547cd15baeb98f0804fbb65f36c0f"]},"commit2Childs":{"60c716cf818aff6857d8490cd0fb8b5aa432408f":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":[],"403c3219db9547cd15baeb98f0804fbb65f36c0f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["7757ad4a47d8b36bb6894c5ad33f766b4ddfa389"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["60c716cf818aff6857d8490cd0fb8b5aa432408f","96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a"],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["403c3219db9547cd15baeb98f0804fbb65f36c0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"7757ad4a47d8b36bb6894c5ad33f766b4ddfa389":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}