{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestStressIndexing.TimedThread#run().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestStressIndexing.TimedThread#run().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestStressIndexing.TimedThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      final long stopTime = System.currentTimeMillis() + 1000*RUN_TIME_SEC;\n\n      count = 0;\n\n      try {\n        do {\n          if (anyErrors()) break;\n          doWork();\n          count++;\n        } while(System.currentTimeMillis() < stopTime);\n      } catch (Throwable e) {\n        System.out.println(Thread.currentThread() + \": exc\");\n        e.printStackTrace(System.out);\n        failed = true;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      final long stopTime = System.currentTimeMillis() + 1000*RUN_TIME_SEC;\n\n      count = 0;\n\n      try {\n        do {\n          if (anyErrors()) break;\n          doWork();\n          count++;\n        } while(System.currentTimeMillis() < stopTime);\n      } catch (Throwable e) {\n        System.out.println(Thread.currentThread() + \": exc\");\n        e.printStackTrace(System.out);\n        failed = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestStressIndexing.TimedThread#run().mjava","sourceNew":null,"sourceOld":"    @Override\n    public void run() {\n      final long stopTime = System.currentTimeMillis() + 1000*RUN_TIME_SEC;\n\n      count = 0;\n\n      try {\n        do {\n          if (anyErrors()) break;\n          doWork();\n          count++;\n        } while(System.currentTimeMillis() < stopTime);\n      } catch (Throwable e) {\n        System.out.println(Thread.currentThread() + \": exc\");\n        e.printStackTrace(System.out);\n        failed = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}