{"path":"solr/core/src/java/org/apache/solr/search/LuceneQueryOptimizer#LuceneQueryOptimizer(int,float).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LuceneQueryOptimizer#LuceneQueryOptimizer(int,float).mjava","pathOld":"solr/src/java/org/apache/solr/search/LuceneQueryOptimizer#LuceneQueryOptimizer(int,float).mjava","sourceNew":"  /** Construct an optimizer that caches and uses filters for required {@link\n   * TermQuery}s whose boost is zero.\n   * @param cacheSize the number of QueryFilters to cache\n   * @param threshold the fraction of documents which must contain term\n   */\n  public LuceneQueryOptimizer(final int cacheSize, float threshold) {\n    this.cache = new LinkedHashMap(cacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry eldest) {\n          return size() > cacheSize;              // limit size of cache\n        }\n      };\n    this.threshold = threshold;\n  }\n\n","sourceOld":"  /** Construct an optimizer that caches and uses filters for required {@link\n   * TermQuery}s whose boost is zero.\n   * @param cacheSize the number of QueryFilters to cache\n   * @param threshold the fraction of documents which must contain term\n   */\n  public LuceneQueryOptimizer(final int cacheSize, float threshold) {\n    this.cache = new LinkedHashMap(cacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry eldest) {\n          return size() > cacheSize;              // limit size of cache\n        }\n      };\n    this.threshold = threshold;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LuceneQueryOptimizer#LuceneQueryOptimizer(int,float).mjava","pathOld":"solr/src/java/org/apache/solr/search/LuceneQueryOptimizer#LuceneQueryOptimizer(int,float).mjava","sourceNew":"  /** Construct an optimizer that caches and uses filters for required {@link\n   * TermQuery}s whose boost is zero.\n   * @param cacheSize the number of QueryFilters to cache\n   * @param threshold the fraction of documents which must contain term\n   */\n  public LuceneQueryOptimizer(final int cacheSize, float threshold) {\n    this.cache = new LinkedHashMap(cacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry eldest) {\n          return size() > cacheSize;              // limit size of cache\n        }\n      };\n    this.threshold = threshold;\n  }\n\n","sourceOld":"  /** Construct an optimizer that caches and uses filters for required {@link\n   * TermQuery}s whose boost is zero.\n   * @param cacheSize the number of QueryFilters to cache\n   * @param threshold the fraction of documents which must contain term\n   */\n  public LuceneQueryOptimizer(final int cacheSize, float threshold) {\n    this.cache = new LinkedHashMap(cacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry eldest) {\n          return size() > cacheSize;              // limit size of cache\n        }\n      };\n    this.threshold = threshold;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/LuceneQueryOptimizer#LuceneQueryOptimizer(int,float).mjava","pathOld":"solr/src/java/org/apache/solr/search/LuceneQueryOptimizer#LuceneQueryOptimizer(int,float).mjava","sourceNew":"  /** Construct an optimizer that caches and uses filters for required {@link\n   * TermQuery}s whose boost is zero.\n   * @param cacheSize the number of QueryFilters to cache\n   * @param threshold the fraction of documents which must contain term\n   */\n  public LuceneQueryOptimizer(final int cacheSize, float threshold) {\n    this.cache = new LinkedHashMap(cacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry eldest) {\n          return size() > cacheSize;              // limit size of cache\n        }\n      };\n    this.threshold = threshold;\n  }\n\n","sourceOld":"  /** Construct an optimizer that caches and uses filters for required {@link\n   * TermQuery}s whose boost is zero.\n   * @param cacheSize the number of QueryFilters to cache\n   * @param threshold the fraction of documents which must contain term\n   */\n  public LuceneQueryOptimizer(final int cacheSize, float threshold) {\n    this.cache = new LinkedHashMap(cacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry eldest) {\n          return size() > cacheSize;              // limit size of cache\n        }\n      };\n    this.threshold = threshold;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ec0d45746967f32f35c0461dec63476e30b720","date":1437468606,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/LuceneQueryOptimizer#LuceneQueryOptimizer(int,float).mjava","sourceNew":null,"sourceOld":"  /** Construct an optimizer that caches and uses filters for required {@link\n   * TermQuery}s whose boost is zero.\n   * @param cacheSize the number of QueryFilters to cache\n   * @param threshold the fraction of documents which must contain term\n   */\n  public LuceneQueryOptimizer(final int cacheSize, float threshold) {\n    this.cache = new LinkedHashMap(cacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry eldest) {\n          return size() > cacheSize;              // limit size of cache\n        }\n      };\n    this.threshold = threshold;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"94ec0d45746967f32f35c0461dec63476e30b720":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["94ec0d45746967f32f35c0461dec63476e30b720"]},"commit2Childs":{"94ec0d45746967f32f35c0461dec63476e30b720":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["94ec0d45746967f32f35c0461dec63476e30b720"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}