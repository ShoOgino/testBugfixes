{"path":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testInsertEntry().mjava","commits":[{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testInsertEntry().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testInsertEntry().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.insertEntry(StroageEntryWrapper)'\n     */\n    public void testInsertEntry() throws IOException, InterruptedException,\n            ParseException, StorageException {\n\n        Thread a = getRunnerThread(this.count);\n        \n\n        Thread b = getRunnerThread((this.count += 10));\n        b.start();\n        a.start();\n//         wait for the first thread to check for the inserted entries\n        a.join();  \n        try{\n        for (int i = 1; i < this.count; i++) {\n           \n            ReferenceCounter<StorageQuery> innerQuery = this.controller\n                    .getStorageQuery();\n            BaseEntry e = innerQuery.get().singleEntryQuery(\"\" + i, feedId,\n                    this.configurator);\n            assertNotNull(e);\n            assertEquals(\"get entry for id\" + i, \"\" + i, e.getId());\n\n        }\n        }finally{\n        \t/*\n        \t * if an exception occures the tread can at least finnish running before the\n        \t * controller will be closed in the tearDown method\n        \t */\n        \t b.join();\t\n        }\n      \n       \n        ReferenceCounter<StorageQuery> query = this.controller\n                .getStorageQuery();\n\n        this.count += 10;\n        for (int i = 1; i < this.count; i++) {\n            BaseEntry e = query.get().singleEntryQuery(\"\" + i, feedId,\n                    this.configurator);\n            assertEquals(\"get entry for id\" + i, \"\" + i, e.getId());\n        }\n\n        BaseEntry e = query.get().singleEntryQuery(\"\" + this.count, feedId,\n                this.configurator);\n        assertNull(\"not entry for ID\", e);\n        query.decrementRef();\n\n    }\n\n","sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.insertEntry(StroageEntryWrapper)'\n     */\n    public void testInsertEntry() throws IOException, InterruptedException,\n            ParseException, StorageException {\n\n        Thread a = getRunnerThread(this.count);\n        \n\n        Thread b = getRunnerThread((this.count += 10));\n        b.start();\n        a.start();\n//         wait for the first thread to check for the inserted entries\n        a.join();  \n        try{\n        for (int i = 1; i < this.count; i++) {\n           \n            ReferenceCounter<StorageQuery> innerQuery = this.controller\n                    .getStorageQuery();\n            BaseEntry e = innerQuery.get().singleEntryQuery(\"\" + i, feedId,\n                    this.configurator);\n            assertNotNull(e);\n            assertEquals(\"get entry for id\" + i, \"\" + i, e.getId());\n\n        }\n        }finally{\n        \t/*\n        \t * if an exception occures the tread can at least finnish running before the\n        \t * controller will be closed in the tearDown method\n        \t */\n        \t b.join();\t\n        }\n      \n       \n        ReferenceCounter<StorageQuery> query = this.controller\n                .getStorageQuery();\n\n        this.count += 10;\n        for (int i = 1; i < this.count; i++) {\n            BaseEntry e = query.get().singleEntryQuery(\"\" + i, feedId,\n                    this.configurator);\n            assertEquals(\"get entry for id\" + i, \"\" + i, e.getId());\n        }\n\n        BaseEntry e = query.get().singleEntryQuery(\"\" + this.count, feedId,\n                this.configurator);\n        assertNull(\"not entry for ID\", e);\n        query.decrementRef();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testInsertEntry().mjava","pathOld":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testInsertEntry().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.insertEntry(StroageEntryWrapper)'\n     */\n    public void testInsertEntry() throws IOException, InterruptedException,\n            ParseException, StorageException {\n\n        Thread a = getRunnerThread(this.count);\n        \n\n        Thread b = getRunnerThread((this.count += 10));\n        b.start();\n        a.start();\n//         wait for the first thread to check for the inserted entries\n        a.join();  \n        try{\n        for (int i = 1; i < this.count; i++) {\n           \n            ReferenceCounter<StorageQuery> innerQuery = this.controller\n                    .getStorageQuery();\n            BaseEntry e = innerQuery.get().singleEntryQuery(\"\" + i, feedId,\n                    this.configurator);\n            assertNotNull(e);\n            assertEquals(\"get entry for id\" + i, \"\" + i, e.getId());\n\n        }\n        }finally{\n        \t/*\n        \t * if an exception occures the tread can at least finnish running before the\n        \t * controller will be closed in the tearDown method\n        \t */\n        \t b.join();\t\n        }\n      \n       \n        ReferenceCounter<StorageQuery> query = this.controller\n                .getStorageQuery();\n\n        this.count += 10;\n        for (int i = 1; i < this.count; i++) {\n            BaseEntry e = query.get().singleEntryQuery(\"\" + i, feedId,\n                    this.configurator);\n            assertEquals(\"get entry for id\" + i, \"\" + i, e.getId());\n        }\n\n        BaseEntry e = query.get().singleEntryQuery(\"\" + this.count, feedId,\n                this.configurator);\n        assertNull(\"not entry for ID\", e);\n        query.decrementRef();\n\n    }\n\n","sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.insertEntry(StroageEntryWrapper)'\n     */\n    public void testInsertEntry() throws IOException, InterruptedException,\n            ParseException, StorageException {\n\n        Thread a = getRunnerThread(this.count);\n        \n\n        Thread b = getRunnerThread((this.count += 10));\n        b.start();\n        a.start();\n//         wait for the first thread to check for the inserted entries\n        a.join();  \n        try{\n        for (int i = 1; i < this.count; i++) {\n           \n            ReferenceCounter<StorageQuery> innerQuery = this.controller\n                    .getStorageQuery();\n            BaseEntry e = innerQuery.get().singleEntryQuery(\"\" + i, feedId,\n                    this.configurator);\n            assertNotNull(e);\n            assertEquals(\"get entry for id\" + i, \"\" + i, e.getId());\n\n        }\n        }finally{\n        \t/*\n        \t * if an exception occures the tread can at least finnish running before the\n        \t * controller will be closed in the tearDown method\n        \t */\n        \t b.join();\t\n        }\n      \n       \n        ReferenceCounter<StorageQuery> query = this.controller\n                .getStorageQuery();\n\n        this.count += 10;\n        for (int i = 1; i < this.count; i++) {\n            BaseEntry e = query.get().singleEntryQuery(\"\" + i, feedId,\n                    this.configurator);\n            assertEquals(\"get entry for id\" + i, \"\" + i, e.getId());\n        }\n\n        BaseEntry e = query.get().singleEntryQuery(\"\" + this.count, feedId,\n                this.configurator);\n        assertNull(\"not entry for ID\", e);\n        query.decrementRef();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}