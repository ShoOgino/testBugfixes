{"path":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#seekExact(BytesRef,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#seekExact(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#seekExact(BytesRef,boolean).mjava","sourceNew":"  @Override\n  public boolean seekExact(BytesRef term, boolean useCache) throws IOException {\n    queue.clear();\n    numTop = 0;\n\n    boolean seekOpt = false;\n    if (lastSeek != null && termComp.compare(lastSeek, term) <= 0) {\n      seekOpt = true;\n    }\n\n    lastSeek = null;\n    lastSeekExact = true;\n\n    for(int i=0;i<numSubs;i++) {\n      final boolean status;\n      // LUCENE-2130: if we had just seek'd already, prior\n      // to this seek, and the new seek term is after the\n      // previous one, don't try to re-seek this sub if its\n      // current term is already beyond this new seek term.\n      // Doing so is a waste because this sub will simply\n      // seek to the same spot.\n      if (seekOpt) {\n        final BytesRef curTerm = currentSubs[i].current;\n        if (curTerm != null) {\n          final int cmp = termComp.compare(term, curTerm);\n          if (cmp == 0) {\n            status = true;\n          } else if (cmp < 0) {\n            status = false;\n          } else {\n            status = currentSubs[i].terms.seekExact(term, useCache);\n          }\n        } else {\n          status = false;\n        }\n      } else {\n        status = currentSubs[i].terms.seekExact(term, useCache);\n      }\n\n      if (status) {\n        top[numTop++] = currentSubs[i];\n        current = currentSubs[i].current = currentSubs[i].terms.term();\n        assert term.equals(currentSubs[i].current);\n      }\n    }\n\n    // if at least one sub had exact match to the requested\n    // term then we found match\n    return numTop > 0;\n  }\n\n","sourceOld":"  @Override\n  public boolean seekExact(BytesRef term, boolean useCache) throws IOException {\n    queue.clear();\n    numTop = 0;\n\n    boolean seekOpt = false;\n    if (lastSeek != null && termComp.compare(lastSeek, term) <= 0) {\n      seekOpt = true;\n    }\n\n    lastSeek = null;\n    lastSeekExact = true;\n\n    for(int i=0;i<numSubs;i++) {\n      final boolean status;\n      // LUCENE-2130: if we had just seek'd already, prior\n      // to this seek, and the new seek term is after the\n      // previous one, don't try to re-seek this sub if its\n      // current term is already beyond this new seek term.\n      // Doing so is a waste because this sub will simply\n      // seek to the same spot.\n      if (seekOpt) {\n        final BytesRef curTerm = currentSubs[i].current;\n        if (curTerm != null) {\n          final int cmp = termComp.compare(term, curTerm);\n          if (cmp == 0) {\n            status = true;\n          } else if (cmp < 0) {\n            status = false;\n          } else {\n            status = currentSubs[i].terms.seekExact(term, useCache);\n          }\n        } else {\n          status = false;\n        }\n      } else {\n        status = currentSubs[i].terms.seekExact(term, useCache);\n      }\n\n      if (status) {\n        top[numTop++] = currentSubs[i];\n        current = currentSubs[i].current = currentSubs[i].terms.term();\n        assert term.equals(currentSubs[i].current);\n      }\n    }\n\n    // if at least one sub had exact match to the requested\n    // term then we found match\n    return numTop > 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#seekExact(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#seekExact(BytesRef,boolean).mjava","sourceNew":"  @Override\n  public boolean seekExact(BytesRef term) throws IOException {\n    queue.clear();\n    numTop = 0;\n\n    boolean seekOpt = false;\n    if (lastSeek != null && termComp.compare(lastSeek, term) <= 0) {\n      seekOpt = true;\n    }\n\n    lastSeek = null;\n    lastSeekExact = true;\n\n    for(int i=0;i<numSubs;i++) {\n      final boolean status;\n      // LUCENE-2130: if we had just seek'd already, prior\n      // to this seek, and the new seek term is after the\n      // previous one, don't try to re-seek this sub if its\n      // current term is already beyond this new seek term.\n      // Doing so is a waste because this sub will simply\n      // seek to the same spot.\n      if (seekOpt) {\n        final BytesRef curTerm = currentSubs[i].current;\n        if (curTerm != null) {\n          final int cmp = termComp.compare(term, curTerm);\n          if (cmp == 0) {\n            status = true;\n          } else if (cmp < 0) {\n            status = false;\n          } else {\n            status = currentSubs[i].terms.seekExact(term);\n          }\n        } else {\n          status = false;\n        }\n      } else {\n        status = currentSubs[i].terms.seekExact(term);\n      }\n\n      if (status) {\n        top[numTop++] = currentSubs[i];\n        current = currentSubs[i].current = currentSubs[i].terms.term();\n        assert term.equals(currentSubs[i].current);\n      }\n    }\n\n    // if at least one sub had exact match to the requested\n    // term then we found match\n    return numTop > 0;\n  }\n\n","sourceOld":"  @Override\n  public boolean seekExact(BytesRef term, boolean useCache) throws IOException {\n    queue.clear();\n    numTop = 0;\n\n    boolean seekOpt = false;\n    if (lastSeek != null && termComp.compare(lastSeek, term) <= 0) {\n      seekOpt = true;\n    }\n\n    lastSeek = null;\n    lastSeekExact = true;\n\n    for(int i=0;i<numSubs;i++) {\n      final boolean status;\n      // LUCENE-2130: if we had just seek'd already, prior\n      // to this seek, and the new seek term is after the\n      // previous one, don't try to re-seek this sub if its\n      // current term is already beyond this new seek term.\n      // Doing so is a waste because this sub will simply\n      // seek to the same spot.\n      if (seekOpt) {\n        final BytesRef curTerm = currentSubs[i].current;\n        if (curTerm != null) {\n          final int cmp = termComp.compare(term, curTerm);\n          if (cmp == 0) {\n            status = true;\n          } else if (cmp < 0) {\n            status = false;\n          } else {\n            status = currentSubs[i].terms.seekExact(term, useCache);\n          }\n        } else {\n          status = false;\n        }\n      } else {\n        status = currentSubs[i].terms.seekExact(term, useCache);\n      }\n\n      if (status) {\n        top[numTop++] = currentSubs[i];\n        current = currentSubs[i].current = currentSubs[i].terms.term();\n        assert term.equals(currentSubs[i].current);\n      }\n    }\n\n    // if at least one sub had exact match to the requested\n    // term then we found match\n    return numTop > 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#seekExact(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#seekExact(BytesRef,boolean).mjava","sourceNew":"  @Override\n  public boolean seekExact(BytesRef term) throws IOException {\n    queue.clear();\n    numTop = 0;\n\n    boolean seekOpt = false;\n    if (lastSeek != null && termComp.compare(lastSeek, term) <= 0) {\n      seekOpt = true;\n    }\n\n    lastSeek = null;\n    lastSeekExact = true;\n\n    for(int i=0;i<numSubs;i++) {\n      final boolean status;\n      // LUCENE-2130: if we had just seek'd already, prior\n      // to this seek, and the new seek term is after the\n      // previous one, don't try to re-seek this sub if its\n      // current term is already beyond this new seek term.\n      // Doing so is a waste because this sub will simply\n      // seek to the same spot.\n      if (seekOpt) {\n        final BytesRef curTerm = currentSubs[i].current;\n        if (curTerm != null) {\n          final int cmp = termComp.compare(term, curTerm);\n          if (cmp == 0) {\n            status = true;\n          } else if (cmp < 0) {\n            status = false;\n          } else {\n            status = currentSubs[i].terms.seekExact(term);\n          }\n        } else {\n          status = false;\n        }\n      } else {\n        status = currentSubs[i].terms.seekExact(term);\n      }\n\n      if (status) {\n        top[numTop++] = currentSubs[i];\n        current = currentSubs[i].current = currentSubs[i].terms.term();\n        assert term.equals(currentSubs[i].current);\n      }\n    }\n\n    // if at least one sub had exact match to the requested\n    // term then we found match\n    return numTop > 0;\n  }\n\n","sourceOld":"  @Override\n  public boolean seekExact(BytesRef term, boolean useCache) throws IOException {\n    queue.clear();\n    numTop = 0;\n\n    boolean seekOpt = false;\n    if (lastSeek != null && termComp.compare(lastSeek, term) <= 0) {\n      seekOpt = true;\n    }\n\n    lastSeek = null;\n    lastSeekExact = true;\n\n    for(int i=0;i<numSubs;i++) {\n      final boolean status;\n      // LUCENE-2130: if we had just seek'd already, prior\n      // to this seek, and the new seek term is after the\n      // previous one, don't try to re-seek this sub if its\n      // current term is already beyond this new seek term.\n      // Doing so is a waste because this sub will simply\n      // seek to the same spot.\n      if (seekOpt) {\n        final BytesRef curTerm = currentSubs[i].current;\n        if (curTerm != null) {\n          final int cmp = termComp.compare(term, curTerm);\n          if (cmp == 0) {\n            status = true;\n          } else if (cmp < 0) {\n            status = false;\n          } else {\n            status = currentSubs[i].terms.seekExact(term, useCache);\n          }\n        } else {\n          status = false;\n        }\n      } else {\n        status = currentSubs[i].terms.seekExact(term, useCache);\n      }\n\n      if (status) {\n        top[numTop++] = currentSubs[i];\n        current = currentSubs[i].current = currentSubs[i].terms.term();\n        assert term.equals(currentSubs[i].current);\n      }\n    }\n\n    // if at least one sub had exact match to the requested\n    // term then we found match\n    return numTop > 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}