{"path":"lucene/core/src/test/org/apache/lucene/index/TestSegmentToThreadMapping#testRandom().mjava","commits":[{"id":"cb1ea7c2a1a6c0b29808a5562d417545dd5529e4","date":1558462722,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentToThreadMapping#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() {\n    List<LeafReaderContext> leafReaderContexts = new ArrayList<>();\n    int max = 500_000;\n    int min = 10_000;\n    int numSegments = random().nextInt(50);\n\n    for (int i = 0; i < numSegments; i++) {\n      leafReaderContexts.add(new LeafReaderContext(dummyIndexReader(random().nextInt((max - min) + 1) + min)));\n    }\n\n    IndexSearcher.LeafSlice[] resultSlices = IndexSearcher.slices(leafReaderContexts, 250_000, 5);\n\n    assertTrue(resultSlices.length > 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b4c1570ffc9729c6f2d84d1a31ab65dededc53","date":1558509052,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentToThreadMapping#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentToThreadMapping#testRandom().mjava","sourceNew":"  public void testRandom() {\n    List<LeafReaderContext> leafReaderContexts = new ArrayList<>();\n    int max = 500_000;\n    int min = 10_000;\n    int numSegments = 1 + random().nextInt(50);\n\n    for (int i = 0; i < numSegments; i++) {\n      leafReaderContexts.add(new LeafReaderContext(dummyIndexReader(random().nextInt((max - min) + 1) + min)));\n    }\n\n    IndexSearcher.LeafSlice[] resultSlices = IndexSearcher.slices(leafReaderContexts, 250_000, 5);\n\n    assertTrue(resultSlices.length > 0);\n  }\n\n","sourceOld":"  public void testRandom() {\n    List<LeafReaderContext> leafReaderContexts = new ArrayList<>();\n    int max = 500_000;\n    int min = 10_000;\n    int numSegments = random().nextInt(50);\n\n    for (int i = 0; i < numSegments; i++) {\n      leafReaderContexts.add(new LeafReaderContext(dummyIndexReader(random().nextInt((max - min) + 1) + min)));\n    }\n\n    IndexSearcher.LeafSlice[] resultSlices = IndexSearcher.slices(leafReaderContexts, 250_000, 5);\n\n    assertTrue(resultSlices.length > 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f1fbbb788f926837e98f9f0d1095e7a7e4001a6","date":1558594754,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentToThreadMapping#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentToThreadMapping#testRandom().mjava","sourceNew":"  public void testRandom() {\n    List<LeafReaderContext> leafReaderContexts = new ArrayList<>();\n    int max = 500_000;\n    int min = 10_000;\n    int numSegments = 1 + random().nextInt(50);\n\n    for (int i = 0; i < numSegments; i++) {\n      leafReaderContexts.add(new LeafReaderContext(dummyIndexReader(random().nextInt((max - min) + 1) + min)));\n    }\n\n    IndexSearcher.LeafSlice[] resultSlices = IndexSearcher.slices(leafReaderContexts, 250_000, 5);\n\n    assertTrue(resultSlices.length > 0);\n  }\n\n","sourceOld":"  public void testRandom() {\n    List<LeafReaderContext> leafReaderContexts = new ArrayList<>();\n    int max = 500_000;\n    int min = 10_000;\n    int numSegments = random().nextInt(50);\n\n    for (int i = 0; i < numSegments; i++) {\n      leafReaderContexts.add(new LeafReaderContext(dummyIndexReader(random().nextInt((max - min) + 1) + min)));\n    }\n\n    IndexSearcher.LeafSlice[] resultSlices = IndexSearcher.slices(leafReaderContexts, 250_000, 5);\n\n    assertTrue(resultSlices.length > 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f1fbbb788f926837e98f9f0d1095e7a7e4001a6":["cb1ea7c2a1a6c0b29808a5562d417545dd5529e4","f0b4c1570ffc9729c6f2d84d1a31ab65dededc53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb1ea7c2a1a6c0b29808a5562d417545dd5529e4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f0b4c1570ffc9729c6f2d84d1a31ab65dededc53":["cb1ea7c2a1a6c0b29808a5562d417545dd5529e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f1fbbb788f926837e98f9f0d1095e7a7e4001a6"]},"commit2Childs":{"5f1fbbb788f926837e98f9f0d1095e7a7e4001a6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb1ea7c2a1a6c0b29808a5562d417545dd5529e4"],"cb1ea7c2a1a6c0b29808a5562d417545dd5529e4":["5f1fbbb788f926837e98f9f0d1095e7a7e4001a6","f0b4c1570ffc9729c6f2d84d1a31ab65dededc53"],"f0b4c1570ffc9729c6f2d84d1a31ab65dededc53":["5f1fbbb788f926837e98f9f0d1095e7a7e4001a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}