{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#testOriginalScoreWithNonScoringFeatures().mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#testOriginalScoreWithNonScoringFeatures().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOriginalScoreWithNonScoringFeatures() throws Exception {\n    loadFeature(\"origScore\", OriginalScoreFeature.class.getCanonicalName(),\n        \"store2\", \"{}\");\n    loadFeature(\"c2\", ValueFeature.class.getCanonicalName(), \"store2\",\n        \"{\\\"value\\\":2.0}\");\n\n    loadModel(\"origScore\", LinearModel.class.getCanonicalName(),\n        new String[] {\"origScore\"}, \"store2\",\n        \"{\\\"weights\\\":{\\\"origScore\\\":1.0}}\");\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"title:w1\");\n    query.add(\"fl\", \"*, score, fv:[fv]\");\n    query.add(\"rows\", \"4\");\n    query.add(\"wt\", \"json\");\n    query.add(\"rq\", \"{!ltr model=origScore reRankDocs=4}\");\n\n    final String res = restTestHarness.query(\"/query\" + query.toQueryString());\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final String doc0Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\")).toString();\n    final String doc1Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(1)).get(\"score\")).toString();\n    final String doc2Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(2)).get(\"score\")).toString();\n    final String doc3Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(3)).get(\"score\")).toString();\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[0]/fv=='origScore:\" + doc0Score + \";c2:2.0'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='8'\");\n\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[1]/fv=='origScore:\" + doc1Score + \";c2:2.0'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='6'\");\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[2]/fv=='origScore:\" + doc2Score + \";c2:2.0'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='7'\");\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[3]/fv=='origScore:\" + doc3Score + \";c2:2.0'\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bf344c7efad3160a74c52ef1fd53f535978fc5b7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#testOriginalScoreWithNonScoringFeatures().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOriginalScoreWithNonScoringFeatures() throws Exception {\n    loadFeature(\"origScore\", OriginalScoreFeature.class.getCanonicalName(),\n        \"store2\", \"{}\");\n    loadFeature(\"c2\", ValueFeature.class.getCanonicalName(), \"store2\",\n        \"{\\\"value\\\":2.0}\");\n\n    loadModel(\"origScore\", LinearModel.class.getCanonicalName(),\n        new String[] {\"origScore\"}, \"store2\",\n        \"{\\\"weights\\\":{\\\"origScore\\\":1.0}}\");\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"title:w1\");\n    query.add(\"fl\", \"*, score, fv:[fv]\");\n    query.add(\"rows\", \"4\");\n    query.add(\"wt\", \"json\");\n    query.add(\"rq\", \"{!ltr model=origScore reRankDocs=4}\");\n\n    final String res = restTestHarness.query(\"/query\" + query.toQueryString());\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final String doc0Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\")).toString();\n    final String doc1Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(1)).get(\"score\")).toString();\n    final String doc2Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(2)).get(\"score\")).toString();\n    final String doc3Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(3)).get(\"score\")).toString();\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[0]/fv=='origScore:\" + doc0Score + \";c2:2.0'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='8'\");\n\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[1]/fv=='origScore:\" + doc1Score + \";c2:2.0'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='6'\");\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[2]/fv=='origScore:\" + doc2Score + \";c2:2.0'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='7'\");\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[3]/fv=='origScore:\" + doc3Score + \";c2:2.0'\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fa1f8f009c5147b03311c7e6e6469fa7b677186","date":1482164570,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#testOriginalScoreWithNonScoringFeatures().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#testOriginalScoreWithNonScoringFeatures().mjava","sourceNew":"  @Test\n  public void testOriginalScoreWithNonScoringFeatures() throws Exception {\n    loadFeature(\"origScore\", OriginalScoreFeature.class.getCanonicalName(),\n        \"store2\", \"{}\");\n    loadFeature(\"c2\", ValueFeature.class.getCanonicalName(), \"store2\",\n        \"{\\\"value\\\":2.0}\");\n\n    loadModel(\"origScore\", LinearModel.class.getCanonicalName(),\n        new String[] {\"origScore\"}, \"store2\",\n        \"{\\\"weights\\\":{\\\"origScore\\\":1.0}}\");\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"title:w1\");\n    query.add(\"fl\", \"*, score, fv:[fv]\");\n    query.add(\"rows\", \"4\");\n    query.add(\"wt\", \"json\");\n    query.add(\"rq\", \"{!ltr model=origScore reRankDocs=4}\");\n\n    final String res = restTestHarness.query(\"/query\" + query.toQueryString());\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final String doc0Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\")).toString();\n    final String doc1Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(1)).get(\"score\")).toString();\n    final String doc2Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(2)).get(\"score\")).toString();\n    final String doc3Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(3)).get(\"score\")).toString();\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[0]/fv=='\" + FeatureLoggerTestUtils.toFeatureVector(\"origScore\", doc0Score, \"c2\", \"2.0\")+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='8'\");\n\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[1]/fv=='\" + FeatureLoggerTestUtils.toFeatureVector(\"origScore\", doc1Score, \"c2\", \"2.0\")+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='6'\");\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[2]/fv=='\" + FeatureLoggerTestUtils.toFeatureVector(\"origScore\", doc2Score, \"c2\", \"2.0\")+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='7'\");\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[3]/fv=='\" + FeatureLoggerTestUtils.toFeatureVector(\"origScore\", doc3Score, \"c2\", \"2.0\")+\"'\");\n  }\n\n","sourceOld":"  @Test\n  public void testOriginalScoreWithNonScoringFeatures() throws Exception {\n    loadFeature(\"origScore\", OriginalScoreFeature.class.getCanonicalName(),\n        \"store2\", \"{}\");\n    loadFeature(\"c2\", ValueFeature.class.getCanonicalName(), \"store2\",\n        \"{\\\"value\\\":2.0}\");\n\n    loadModel(\"origScore\", LinearModel.class.getCanonicalName(),\n        new String[] {\"origScore\"}, \"store2\",\n        \"{\\\"weights\\\":{\\\"origScore\\\":1.0}}\");\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"title:w1\");\n    query.add(\"fl\", \"*, score, fv:[fv]\");\n    query.add(\"rows\", \"4\");\n    query.add(\"wt\", \"json\");\n    query.add(\"rq\", \"{!ltr model=origScore reRankDocs=4}\");\n\n    final String res = restTestHarness.query(\"/query\" + query.toQueryString());\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final String doc0Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\")).toString();\n    final String doc1Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(1)).get(\"score\")).toString();\n    final String doc2Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(2)).get(\"score\")).toString();\n    final String doc3Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(3)).get(\"score\")).toString();\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[0]/fv=='origScore:\" + doc0Score + \";c2:2.0'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='8'\");\n\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[1]/fv=='origScore:\" + doc1Score + \";c2:2.0'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='6'\");\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[2]/fv=='origScore:\" + doc2Score + \";c2:2.0'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='7'\");\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[3]/fv=='origScore:\" + doc3Score + \";c2:2.0'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#testOriginalScoreWithNonScoringFeatures().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#testOriginalScoreWithNonScoringFeatures().mjava","sourceNew":"  @Test\n  public void testOriginalScoreWithNonScoringFeatures() throws Exception {\n    loadFeature(\"origScore\", OriginalScoreFeature.class.getCanonicalName(),\n        \"store2\", \"{}\");\n    loadFeature(\"c2\", ValueFeature.class.getCanonicalName(), \"store2\",\n        \"{\\\"value\\\":2.0}\");\n\n    loadModel(\"origScore\", LinearModel.class.getCanonicalName(),\n        new String[] {\"origScore\"}, \"store2\",\n        \"{\\\"weights\\\":{\\\"origScore\\\":1.0}}\");\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"title:w1\");\n    query.add(\"fl\", \"*, score, fv:[fv]\");\n    query.add(\"rows\", \"4\");\n    query.add(\"wt\", \"json\");\n    query.add(\"rq\", \"{!ltr model=origScore reRankDocs=4}\");\n\n    final String res = restTestHarness.query(\"/query\" + query.toQueryString());\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final String doc0Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\")).toString();\n    final String doc1Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(1)).get(\"score\")).toString();\n    final String doc2Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(2)).get(\"score\")).toString();\n    final String doc3Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(3)).get(\"score\")).toString();\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[0]/fv=='\" + FeatureLoggerTestUtils.toFeatureVector(\"origScore\", doc0Score, \"c2\", \"2.0\")+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='8'\");\n\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[1]/fv=='\" + FeatureLoggerTestUtils.toFeatureVector(\"origScore\", doc1Score, \"c2\", \"2.0\")+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='6'\");\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[2]/fv=='\" + FeatureLoggerTestUtils.toFeatureVector(\"origScore\", doc2Score, \"c2\", \"2.0\")+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='7'\");\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[3]/fv=='\" + FeatureLoggerTestUtils.toFeatureVector(\"origScore\", doc3Score, \"c2\", \"2.0\")+\"'\");\n  }\n\n","sourceOld":"  @Test\n  public void testOriginalScoreWithNonScoringFeatures() throws Exception {\n    loadFeature(\"origScore\", OriginalScoreFeature.class.getCanonicalName(),\n        \"store2\", \"{}\");\n    loadFeature(\"c2\", ValueFeature.class.getCanonicalName(), \"store2\",\n        \"{\\\"value\\\":2.0}\");\n\n    loadModel(\"origScore\", LinearModel.class.getCanonicalName(),\n        new String[] {\"origScore\"}, \"store2\",\n        \"{\\\"weights\\\":{\\\"origScore\\\":1.0}}\");\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"title:w1\");\n    query.add(\"fl\", \"*, score, fv:[fv]\");\n    query.add(\"rows\", \"4\");\n    query.add(\"wt\", \"json\");\n    query.add(\"rq\", \"{!ltr model=origScore reRankDocs=4}\");\n\n    final String res = restTestHarness.query(\"/query\" + query.toQueryString());\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final String doc0Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\")).toString();\n    final String doc1Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(1)).get(\"score\")).toString();\n    final String doc2Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(2)).get(\"score\")).toString();\n    final String doc3Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(3)).get(\"score\")).toString();\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[0]/fv=='origScore:\" + doc0Score + \";c2:2.0'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='8'\");\n\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[1]/fv=='origScore:\" + doc1Score + \";c2:2.0'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='6'\");\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[2]/fv=='origScore:\" + doc2Score + \";c2:2.0'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='7'\");\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[3]/fv=='origScore:\" + doc3Score + \";c2:2.0'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"355e2dd55d9b49981e73c768a54a747cd9368043","date":1491217809,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#testOriginalScoreWithNonScoringFeatures().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#testOriginalScoreWithNonScoringFeatures().mjava","sourceNew":"  @Test\n  public void testOriginalScoreWithNonScoringFeatures() throws Exception {\n    loadFeature(\"origScore\", OriginalScoreFeature.class.getCanonicalName(),\n        \"store2\", \"{}\");\n    loadFeature(\"c2\", ValueFeature.class.getCanonicalName(), \"store2\",\n        \"{\\\"value\\\":2.0}\");\n\n    loadModel(\"origScore\", LinearModel.class.getCanonicalName(),\n        new String[] {\"origScore\"}, \"store2\",\n        \"{\\\"weights\\\":{\\\"origScore\\\":1.0}}\");\n\n    implTestOriginalScoreResponseDocsCheck(\"origScore\", \"origScore\", \"c2\", \"2.0\");\n  }\n\n","sourceOld":"  @Test\n  public void testOriginalScoreWithNonScoringFeatures() throws Exception {\n    loadFeature(\"origScore\", OriginalScoreFeature.class.getCanonicalName(),\n        \"store2\", \"{}\");\n    loadFeature(\"c2\", ValueFeature.class.getCanonicalName(), \"store2\",\n        \"{\\\"value\\\":2.0}\");\n\n    loadModel(\"origScore\", LinearModel.class.getCanonicalName(),\n        new String[] {\"origScore\"}, \"store2\",\n        \"{\\\"weights\\\":{\\\"origScore\\\":1.0}}\");\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"title:w1\");\n    query.add(\"fl\", \"*, score, fv:[fv]\");\n    query.add(\"rows\", \"4\");\n    query.add(\"wt\", \"json\");\n    query.add(\"rq\", \"{!ltr model=origScore reRankDocs=4}\");\n\n    final String res = restTestHarness.query(\"/query\" + query.toQueryString());\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final String doc0Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\")).toString();\n    final String doc1Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(1)).get(\"score\")).toString();\n    final String doc2Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(2)).get(\"score\")).toString();\n    final String doc3Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(3)).get(\"score\")).toString();\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[0]/fv=='\" + FeatureLoggerTestUtils.toFeatureVector(\"origScore\", doc0Score, \"c2\", \"2.0\")+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='8'\");\n\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[1]/fv=='\" + FeatureLoggerTestUtils.toFeatureVector(\"origScore\", doc1Score, \"c2\", \"2.0\")+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='6'\");\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[2]/fv=='\" + FeatureLoggerTestUtils.toFeatureVector(\"origScore\", doc2Score, \"c2\", \"2.0\")+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='7'\");\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[3]/fv=='\" + FeatureLoggerTestUtils.toFeatureVector(\"origScore\", doc3Score, \"c2\", \"2.0\")+\"'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bd637fa7fcb25b583979bd0b5a1c11236ab06a9","date":1491296430,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#testOriginalScoreWithNonScoringFeatures().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#testOriginalScoreWithNonScoringFeatures().mjava","sourceNew":"  @Test\n  public void testOriginalScoreWithNonScoringFeatures() throws Exception {\n    loadFeature(\"origScore\", OriginalScoreFeature.class.getCanonicalName(),\n        \"store2\", \"{}\");\n    loadFeature(\"c2\", ValueFeature.class.getCanonicalName(), \"store2\",\n        \"{\\\"value\\\":2.0}\");\n\n    loadModel(\"origScore\", LinearModel.class.getCanonicalName(),\n        new String[] {\"origScore\"}, \"store2\",\n        \"{\\\"weights\\\":{\\\"origScore\\\":1.0}}\");\n\n    implTestOriginalScoreResponseDocsCheck(\"origScore\", \"origScore\", \"c2\", \"2.0\");\n  }\n\n","sourceOld":"  @Test\n  public void testOriginalScoreWithNonScoringFeatures() throws Exception {\n    loadFeature(\"origScore\", OriginalScoreFeature.class.getCanonicalName(),\n        \"store2\", \"{}\");\n    loadFeature(\"c2\", ValueFeature.class.getCanonicalName(), \"store2\",\n        \"{\\\"value\\\":2.0}\");\n\n    loadModel(\"origScore\", LinearModel.class.getCanonicalName(),\n        new String[] {\"origScore\"}, \"store2\",\n        \"{\\\"weights\\\":{\\\"origScore\\\":1.0}}\");\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"title:w1\");\n    query.add(\"fl\", \"*, score, fv:[fv]\");\n    query.add(\"rows\", \"4\");\n    query.add(\"wt\", \"json\");\n    query.add(\"rq\", \"{!ltr model=origScore reRankDocs=4}\");\n\n    final String res = restTestHarness.query(\"/query\" + query.toQueryString());\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final String doc0Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\")).toString();\n    final String doc1Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(1)).get(\"score\")).toString();\n    final String doc2Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(2)).get(\"score\")).toString();\n    final String doc3Score = ((Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(3)).get(\"score\")).toString();\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==4\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[0]/fv=='\" + FeatureLoggerTestUtils.toFeatureVector(\"origScore\", doc0Score, \"c2\", \"2.0\")+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='8'\");\n\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[1]/fv=='\" + FeatureLoggerTestUtils.toFeatureVector(\"origScore\", doc1Score, \"c2\", \"2.0\")+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='6'\");\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[2]/fv=='\" + FeatureLoggerTestUtils.toFeatureVector(\"origScore\", doc2Score, \"c2\", \"2.0\")+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='7'\");\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[3]/fv=='\" + FeatureLoggerTestUtils.toFeatureVector(\"origScore\", doc3Score, \"c2\", \"2.0\")+\"'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf344c7efad3160a74c52ef1fd53f535978fc5b7","date":1518199939,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#testOriginalScoreWithNonScoringFeatures().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#testOriginalScoreWithNonScoringFeatures().mjava","sourceNew":"  @Test\n  public void testOriginalScoreWithNonScoringFeatures() throws Exception {\n    loadFeature(\"origScore\", OriginalScoreFeature.class.getName(),\n        \"store2\", \"{}\");\n    loadFeature(\"c2\", ValueFeature.class.getName(), \"store2\",\n        \"{\\\"value\\\":2.0}\");\n\n    loadModel(\"origScore\", LinearModel.class.getName(),\n        new String[] {\"origScore\"}, \"store2\",\n        \"{\\\"weights\\\":{\\\"origScore\\\":1.0}}\");\n\n    implTestOriginalScoreResponseDocsCheck(\"origScore\", \"origScore\", \"c2\", \"2.0\");\n  }\n\n","sourceOld":"  @Test\n  public void testOriginalScoreWithNonScoringFeatures() throws Exception {\n    loadFeature(\"origScore\", OriginalScoreFeature.class.getCanonicalName(),\n        \"store2\", \"{}\");\n    loadFeature(\"c2\", ValueFeature.class.getCanonicalName(), \"store2\",\n        \"{\\\"value\\\":2.0}\");\n\n    loadModel(\"origScore\", LinearModel.class.getCanonicalName(),\n        new String[] {\"origScore\"}, \"store2\",\n        \"{\\\"weights\\\":{\\\"origScore\\\":1.0}}\");\n\n    implTestOriginalScoreResponseDocsCheck(\"origScore\", \"origScore\", \"c2\", \"2.0\");\n  }\n\n","bugFix":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f906c3206e7eb174774f938416460e39170d819","date":1518202619,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#testOriginalScoreWithNonScoringFeatures().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestOriginalScoreFeature#testOriginalScoreWithNonScoringFeatures().mjava","sourceNew":"  @Test\n  public void testOriginalScoreWithNonScoringFeatures() throws Exception {\n    loadFeature(\"origScore\", OriginalScoreFeature.class.getName(),\n        \"store2\", \"{}\");\n    loadFeature(\"c2\", ValueFeature.class.getName(), \"store2\",\n        \"{\\\"value\\\":2.0}\");\n\n    loadModel(\"origScore\", LinearModel.class.getName(),\n        new String[] {\"origScore\"}, \"store2\",\n        \"{\\\"weights\\\":{\\\"origScore\\\":1.0}}\");\n\n    implTestOriginalScoreResponseDocsCheck(\"origScore\", \"origScore\", \"c2\", \"2.0\");\n  }\n\n","sourceOld":"  @Test\n  public void testOriginalScoreWithNonScoringFeatures() throws Exception {\n    loadFeature(\"origScore\", OriginalScoreFeature.class.getCanonicalName(),\n        \"store2\", \"{}\");\n    loadFeature(\"c2\", ValueFeature.class.getCanonicalName(), \"store2\",\n        \"{\\\"value\\\":2.0}\");\n\n    loadModel(\"origScore\", LinearModel.class.getCanonicalName(),\n        new String[] {\"origScore\"}, \"store2\",\n        \"{\\\"weights\\\":{\\\"origScore\\\":1.0}}\");\n\n    implTestOriginalScoreResponseDocsCheck(\"origScore\", \"origScore\", \"c2\", \"2.0\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"355e2dd55d9b49981e73c768a54a747cd9368043":["8fa1f8f009c5147b03311c7e6e6469fa7b677186"],"bf344c7efad3160a74c52ef1fd53f535978fc5b7":["355e2dd55d9b49981e73c768a54a747cd9368043"],"8fa1f8f009c5147b03311c7e6e6469fa7b677186":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["9720b151fde2073f4e401450f4574e5f31c2d0ff","8fa1f8f009c5147b03311c7e6e6469fa7b677186"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0bd637fa7fcb25b583979bd0b5a1c11236ab06a9":["8fa1f8f009c5147b03311c7e6e6469fa7b677186"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f906c3206e7eb174774f938416460e39170d819"],"3f906c3206e7eb174774f938416460e39170d819":["355e2dd55d9b49981e73c768a54a747cd9368043","bf344c7efad3160a74c52ef1fd53f535978fc5b7"]},"commit2Childs":{"355e2dd55d9b49981e73c768a54a747cd9368043":["bf344c7efad3160a74c52ef1fd53f535978fc5b7","3f906c3206e7eb174774f938416460e39170d819"],"bf344c7efad3160a74c52ef1fd53f535978fc5b7":["3f906c3206e7eb174774f938416460e39170d819"],"8fa1f8f009c5147b03311c7e6e6469fa7b677186":["355e2dd55d9b49981e73c768a54a747cd9368043","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","0bd637fa7fcb25b583979bd0b5a1c11236ab06a9"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["8fa1f8f009c5147b03311c7e6e6469fa7b677186","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"0bd637fa7fcb25b583979bd0b5a1c11236ab06a9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3f906c3206e7eb174774f938416460e39170d819":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","0bd637fa7fcb25b583979bd0b5a1c11236ab06a9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}