{"path":"lucene/core/src/test/org/apache/lucene/search/TestFieldValueFilter#testFieldValueFilter().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldValueFilter#testFieldValueFilter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldValueFilter#testFieldValueFilter().mjava","sourceNew":"  public void testFieldValueFilter() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int docs = atLeast(10);\n    int[] docStates = buildIndex(writer, docs);\n    int numDocsWithValue = 0;\n    for (int i = 0; i < docStates.length; i++) {\n      if (docStates[i] == 1) {\n        numDocsWithValue++;\n      }\n    }\n    IndexReader reader = IndexReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(new Term(\"all\", \"test\")),\n        new FieldValueFilter(\"some\"), docs);\n    assertEquals(search.totalHits, numDocsWithValue);\n    \n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    for (ScoreDoc scoreDoc : scoreDocs) {\n      assertEquals(\"value\", reader.document(scoreDoc.doc).get(\"some\"));\n    }\n    \n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFieldValueFilter() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int docs = atLeast(10);\n    int[] docStates = buildIndex(writer, docs);\n    int numDocsWithValue = 0;\n    for (int i = 0; i < docStates.length; i++) {\n      if (docStates[i] == 1) {\n        numDocsWithValue++;\n      }\n    }\n    IndexReader reader = IndexReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(new Term(\"all\", \"test\")),\n        new FieldValueFilter(\"some\"), docs);\n    assertEquals(search.totalHits, numDocsWithValue);\n    \n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    for (ScoreDoc scoreDoc : scoreDocs) {\n      assertEquals(\"value\", reader.document(scoreDoc.doc).get(\"some\"));\n    }\n    \n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldValueFilter#testFieldValueFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldValueFilter#testFieldValueFilter().mjava","sourceNew":"  public void testFieldValueFilter() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int docs = atLeast(10);\n    int[] docStates = buildIndex(writer, docs);\n    int numDocsWithValue = 0;\n    for (int i = 0; i < docStates.length; i++) {\n      if (docStates[i] == 1) {\n        numDocsWithValue++;\n      }\n    }\n    IndexReader reader = IndexReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(new Term(\"all\", \"test\")),\n        new FieldValueFilter(\"some\"), docs);\n    assertEquals(search.totalHits, numDocsWithValue);\n    \n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    for (ScoreDoc scoreDoc : scoreDocs) {\n      assertEquals(\"value\", reader.document(scoreDoc.doc).get(\"some\"));\n    }\n    \n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFieldValueFilter() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    int docs = atLeast(10);\n    int[] docStates = buildIndex(writer, docs);\n    int numDocsWithValue = 0;\n    for (int i = 0; i < docStates.length; i++) {\n      if (docStates[i] == 1) {\n        numDocsWithValue++;\n      }\n    }\n    IndexReader reader = IndexReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(new Term(\"all\", \"test\")),\n        new FieldValueFilter(\"some\"), docs);\n    assertEquals(search.totalHits, numDocsWithValue);\n    \n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    for (ScoreDoc scoreDoc : scoreDocs) {\n      assertEquals(\"value\", reader.document(scoreDoc.doc).get(\"some\"));\n    }\n    \n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldValueFilter#testFieldValueFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldValueFilter#testFieldValueFilter().mjava","sourceNew":"  public void testFieldValueFilter() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int docs = atLeast(10);\n    int[] docStates = buildIndex(writer, docs);\n    int numDocsWithValue = 0;\n    for (int i = 0; i < docStates.length; i++) {\n      if (docStates[i] == 1) {\n        numDocsWithValue++;\n      }\n    }\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(new Term(\"all\", \"test\")),\n        new FieldValueFilter(\"some\"), docs);\n    assertEquals(search.totalHits, numDocsWithValue);\n    \n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    for (ScoreDoc scoreDoc : scoreDocs) {\n      assertEquals(\"value\", reader.document(scoreDoc.doc).get(\"some\"));\n    }\n    \n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFieldValueFilter() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int docs = atLeast(10);\n    int[] docStates = buildIndex(writer, docs);\n    int numDocsWithValue = 0;\n    for (int i = 0; i < docStates.length; i++) {\n      if (docStates[i] == 1) {\n        numDocsWithValue++;\n      }\n    }\n    IndexReader reader = IndexReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(new Term(\"all\", \"test\")),\n        new FieldValueFilter(\"some\"), docs);\n    assertEquals(search.totalHits, numDocsWithValue);\n    \n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    for (ScoreDoc scoreDoc : scoreDocs) {\n      assertEquals(\"value\", reader.document(scoreDoc.doc).get(\"some\"));\n    }\n    \n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldValueFilter#testFieldValueFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldValueFilter#testFieldValueFilter().mjava","sourceNew":"  public void testFieldValueFilter() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int docs = atLeast(10);\n    int[] docStates = buildIndex(writer, docs);\n    int numDocsWithValue = 0;\n    for (int i = 0; i < docStates.length; i++) {\n      if (docStates[i] == 1) {\n        numDocsWithValue++;\n      }\n    }\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(new Term(\"all\", \"test\")),\n        new FieldValueFilter(\"some\"), docs);\n    assertEquals(search.totalHits, numDocsWithValue);\n    \n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    for (ScoreDoc scoreDoc : scoreDocs) {\n      assertEquals(\"value\", reader.document(scoreDoc.doc).get(\"some\"));\n    }\n    \n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFieldValueFilter() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int docs = atLeast(10);\n    int[] docStates = buildIndex(writer, docs);\n    int numDocsWithValue = 0;\n    for (int i = 0; i < docStates.length; i++) {\n      if (docStates[i] == 1) {\n        numDocsWithValue++;\n      }\n    }\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(new Term(\"all\", \"test\")),\n        new FieldValueFilter(\"some\"), docs);\n    assertEquals(search.totalHits, numDocsWithValue);\n    \n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    for (ScoreDoc scoreDoc : scoreDocs) {\n      assertEquals(\"value\", reader.document(scoreDoc.doc).get(\"some\"));\n    }\n    \n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldValueFilter#testFieldValueFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldValueFilter#testFieldValueFilter().mjava","sourceNew":"  public void testFieldValueFilter() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random())));\n    int docs = atLeast(10);\n    int[] docStates = buildIndex(writer, docs);\n    int numDocsWithValue = 0;\n    for (int i = 0; i < docStates.length; i++) {\n      if (docStates[i] == 1) {\n        numDocsWithValue++;\n      }\n    }\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(new Term(\"all\", \"test\")),\n        new FieldValueFilter(\"some\"), docs);\n    assertEquals(search.totalHits, numDocsWithValue);\n    \n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    for (ScoreDoc scoreDoc : scoreDocs) {\n      assertEquals(\"value\", reader.document(scoreDoc.doc).get(\"some\"));\n    }\n    \n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFieldValueFilter() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int docs = atLeast(10);\n    int[] docStates = buildIndex(writer, docs);\n    int numDocsWithValue = 0;\n    for (int i = 0; i < docStates.length; i++) {\n      if (docStates[i] == 1) {\n        numDocsWithValue++;\n      }\n    }\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(new Term(\"all\", \"test\")),\n        new FieldValueFilter(\"some\"), docs);\n    assertEquals(search.totalHits, numDocsWithValue);\n    \n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    for (ScoreDoc scoreDoc : scoreDocs) {\n      assertEquals(\"value\", reader.document(scoreDoc.doc).get(\"some\"));\n    }\n    \n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5864882f6163c513e490c855adeb66eff0a9988e","date":1415178293,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldValueFilter#testFieldValueFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldValueFilter#testFieldValueFilter().mjava","sourceNew":"  public void testFieldValueFilter() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random())));\n    int docs = atLeast(10);\n    int[] docStates = buildIndex(writer, docs);\n    int numDocsWithValue = 0;\n    for (int i = 0; i < docStates.length; i++) {\n      if (docStates[i] == 1) {\n        numDocsWithValue++;\n      }\n    }\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(reader);\n    Filter filter = new FieldValueFilter(\"some\");\n    TopDocs search = searcher.search(new TermQuery(new Term(\"all\", \"test\")), filter, docs);\n    assertEquals(search.totalHits, numDocsWithValue);\n    \n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    for (ScoreDoc scoreDoc : scoreDocs) {\n      assertEquals(\"value\", reader.document(scoreDoc.doc).get(\"some\"));\n    }\n    \n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFieldValueFilter() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random())));\n    int docs = atLeast(10);\n    int[] docStates = buildIndex(writer, docs);\n    int numDocsWithValue = 0;\n    for (int i = 0; i < docStates.length; i++) {\n      if (docStates[i] == 1) {\n        numDocsWithValue++;\n      }\n    }\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(new Term(\"all\", \"test\")),\n        new FieldValueFilter(\"some\"), docs);\n    assertEquals(search.totalHits, numDocsWithValue);\n    \n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    for (ScoreDoc scoreDoc : scoreDocs) {\n      assertEquals(\"value\", reader.document(scoreDoc.doc).get(\"some\"));\n    }\n    \n    reader.close();\n    directory.close();\n  }\n\n","bugFix":["0d2655e586e23a63fbfddf4f6858e5d2b920d672"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"484e80062d7ab2729bc82f0311d6a97dd913961a","date":1424450206,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldValueFilter#testFieldValueFilter().mjava","sourceNew":null,"sourceOld":"  public void testFieldValueFilter() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random())));\n    int docs = atLeast(10);\n    int[] docStates = buildIndex(writer, docs);\n    int numDocsWithValue = 0;\n    for (int i = 0; i < docStates.length; i++) {\n      if (docStates[i] == 1) {\n        numDocsWithValue++;\n      }\n    }\n    IndexReader reader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(reader);\n    Filter filter = new FieldValueFilter(\"some\");\n    TopDocs search = searcher.search(new TermQuery(new Term(\"all\", \"test\")), filter, docs);\n    assertEquals(search.totalHits, numDocsWithValue);\n    \n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    for (ScoreDoc scoreDoc : scoreDocs) {\n      assertEquals(\"value\", reader.document(scoreDoc.doc).get(\"some\"));\n    }\n    \n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5864882f6163c513e490c855adeb66eff0a9988e":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"484e80062d7ab2729bc82f0311d6a97dd913961a":["5864882f6163c513e490c855adeb66eff0a9988e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["484e80062d7ab2729bc82f0311d6a97dd913961a"]},"commit2Childs":{"5864882f6163c513e490c855adeb66eff0a9988e":["484e80062d7ab2729bc82f0311d6a97dd913961a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["5864882f6163c513e490c855adeb66eff0a9988e"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"484e80062d7ab2729bc82f0311d6a97dd913961a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}