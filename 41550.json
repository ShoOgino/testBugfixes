{"path":"src/java/org/apache/lucene/search/Similarity#encodeNorm(float).mjava","commits":[{"id":"14aec0a40da5a9c26f8752701a5aa10f78f5017d","date":1027969875,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#encodeNorm(float).mjava","pathOld":"/dev/null","sourceNew":"  /** Encodes a normalization factor for storage in an index.  \n   *\n   * <p>The encoding uses a five-bit exponent and three-bit mantissa, thus\n   * representing values from around 7x10^9 to 2x10^-9 with about one\n   * significant decimal digit of accuracy.  Zero is also represented.\n   * Negative numbers are rounded up to zero.  Values too large to represent\n   * are rounded down to the largest representable value.  Positive values too\n   * small to represent are rounded up to the smallest positive representable\n   * value.\n   *\n   * @see Field#setBoost(float)\n   */\n  public static byte encodeNorm(float f) {\n    return floatToByte(f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd2105e02e4fee2a20aac57c03fa7cb80dff27d7","date":1063496688,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#encodeNorm(float).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#encodeNorm(float).mjava","sourceNew":"  /** Encodes a normalization factor for storage in an index.\n   *\n   * <p>The encoding uses a five-bit exponent and three-bit mantissa, thus\n   * representing values from around 7x10^9 to 2x10^-9 with about one\n   * significant decimal digit of accuracy.  Zero is also represented.\n   * Negative numbers are rounded up to zero.  Values too large to represent\n   * are rounded down to the largest representable value.  Positive values too\n   * small to represent are rounded up to the smallest positive representable\n   * value.\n   *\n   * @see Field#setBoost(float)\n   */\n  public static byte encodeNorm(float f) {\n    return floatToByte(f);\n  }\n\n","sourceOld":"  /** Encodes a normalization factor for storage in an index.  \n   *\n   * <p>The encoding uses a five-bit exponent and three-bit mantissa, thus\n   * representing values from around 7x10^9 to 2x10^-9 with about one\n   * significant decimal digit of accuracy.  Zero is also represented.\n   * Negative numbers are rounded up to zero.  Values too large to represent\n   * are rounded down to the largest representable value.  Positive values too\n   * small to represent are rounded up to the smallest positive representable\n   * value.\n   *\n   * @see Field#setBoost(float)\n   */\n  public static byte encodeNorm(float f) {\n    return floatToByte(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a236b7fed4411660186d60e31936b14fd52f003c","date":1132978628,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#encodeNorm(float).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#encodeNorm(float).mjava","sourceNew":"  /** Encodes a normalization factor for storage in an index.\n   *\n   * <p>The encoding uses a three-bit mantissa, a five-bit exponent, and\n   * the zero-exponent point at 15, thus\n   * representing values from around 7x10^9 to 2x10^-9 with about one\n   * significant decimal digit of accuracy.  Zero is also represented.\n   * Negative numbers are rounded up to zero.  Values too large to represent\n   * are rounded down to the largest representable value.  Positive values too\n   * small to represent are rounded up to the smallest positive representable\n   * value.\n   *\n   * @see Field#setBoost(float)\n   * @see SmallFloat\n   */\n  public static byte encodeNorm(float f) {\n    return SmallFloat.floatToByte315(f);\n  }\n\n","sourceOld":"  /** Encodes a normalization factor for storage in an index.\n   *\n   * <p>The encoding uses a five-bit exponent and three-bit mantissa, thus\n   * representing values from around 7x10^9 to 2x10^-9 with about one\n   * significant decimal digit of accuracy.  Zero is also represented.\n   * Negative numbers are rounded up to zero.  Values too large to represent\n   * are rounded down to the largest representable value.  Positive values too\n   * small to represent are rounded up to the smallest positive representable\n   * value.\n   *\n   * @see Field#setBoost(float)\n   */\n  public static byte encodeNorm(float f) {\n    return floatToByte(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#encodeNorm(float).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#encodeNorm(float).mjava","sourceNew":"  /** Encodes a normalization factor for storage in an index.\n   *\n   * <p>The encoding uses a three-bit mantissa, a five-bit exponent, and\n   * the zero-exponent point at 15, thus\n   * representing values from around 7x10^9 to 2x10^-9 with about one\n   * significant decimal digit of accuracy.  Zero is also represented.\n   * Negative numbers are rounded up to zero.  Values too large to represent\n   * are rounded down to the largest representable value.  Positive values too\n   * small to represent are rounded up to the smallest positive representable\n   * value.\n   *\n   * @see org.apache.lucene.document.Field#setBoost(float)\n   * @see SmallFloat\n   */\n  public static byte encodeNorm(float f) {\n    return SmallFloat.floatToByte315(f);\n  }\n\n","sourceOld":"  /** Encodes a normalization factor for storage in an index.\n   *\n   * <p>The encoding uses a three-bit mantissa, a five-bit exponent, and\n   * the zero-exponent point at 15, thus\n   * representing values from around 7x10^9 to 2x10^-9 with about one\n   * significant decimal digit of accuracy.  Zero is also represented.\n   * Negative numbers are rounded up to zero.  Values too large to represent\n   * are rounded down to the largest representable value.  Positive values too\n   * small to represent are rounded up to the smallest positive representable\n   * value.\n   *\n   * @see Field#setBoost(float)\n   * @see SmallFloat\n   */\n  public static byte encodeNorm(float f) {\n    return SmallFloat.floatToByte315(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10c49614cb8b943c412debb24ccb614128394470","date":1178343409,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#encodeNorm(float).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#encodeNorm(float).mjava","sourceNew":"  /** Encodes a normalization factor for storage in an index.\n   *\n   * <p>The encoding uses a three-bit mantissa, a five-bit exponent, and\n   * the zero-exponent point at 15, thus\n   * representing values from around 7x10^9 to 2x10^-9 with about one\n   * significant decimal digit of accuracy.  Zero is also represented.\n   * Negative numbers are rounded up to zero.  Values too large to represent\n   * are rounded down to the largest representable value.  Positive values too\n   * small to represent are rounded up to the smallest positive representable\n   * value.\n   *\n   * @see org.apache.lucene.document.Field#setBoost(float)\n   * @see org.apache.lucene.util.SmallFloat\n   */\n  public static byte encodeNorm(float f) {\n    return SmallFloat.floatToByte315(f);\n  }\n\n","sourceOld":"  /** Encodes a normalization factor for storage in an index.\n   *\n   * <p>The encoding uses a three-bit mantissa, a five-bit exponent, and\n   * the zero-exponent point at 15, thus\n   * representing values from around 7x10^9 to 2x10^-9 with about one\n   * significant decimal digit of accuracy.  Zero is also represented.\n   * Negative numbers are rounded up to zero.  Values too large to represent\n   * are rounded down to the largest representable value.  Positive values too\n   * small to represent are rounded up to the smallest positive representable\n   * value.\n   *\n   * @see org.apache.lucene.document.Field#setBoost(float)\n   * @see SmallFloat\n   */\n  public static byte encodeNorm(float f) {\n    return SmallFloat.floatToByte315(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0eb5b0b5b98c777dad412afbfb347d2c0889327","date":1259094367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#encodeNorm(float).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#encodeNorm(float).mjava","sourceNew":"  /**\n   * Static accessor kept for backwards compability reason, use encodeNormValue instead.\n   * @param f norm-value to encode\n   * @return byte representing the given float\n   * @deprecated Use {@link #encodeNormValue} instead.\n   * \n   * @see #encodeNormValue(float)\n   */\n  @Deprecated\n  public static byte encodeNorm(float f) {\n    return SmallFloat.floatToByte315(f);\n  }\n\n","sourceOld":"  /** Encodes a normalization factor for storage in an index.\n   *\n   * <p>The encoding uses a three-bit mantissa, a five-bit exponent, and\n   * the zero-exponent point at 15, thus\n   * representing values from around 7x10^9 to 2x10^-9 with about one\n   * significant decimal digit of accuracy.  Zero is also represented.\n   * Negative numbers are rounded up to zero.  Values too large to represent\n   * are rounded down to the largest representable value.  Positive values too\n   * small to represent are rounded up to the smallest positive representable\n   * value.\n   *\n   * @see org.apache.lucene.document.Field#setBoost(float)\n   * @see org.apache.lucene.util.SmallFloat\n   */\n  public static byte encodeNorm(float f) {\n    return SmallFloat.floatToByte315(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#encodeNorm(float).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#encodeNorm(float).mjava","sourceNew":"  /**\n   * Static accessor kept for backwards compability reason, use encodeNormValue instead.\n   * @param f norm-value to encode\n   * @return byte representing the given float\n   * @deprecated Use {@link #encodeNormValue} instead.\n   * \n   * @see #encodeNormValue(float)\n   */\n  @Deprecated\n  public static byte encodeNorm(float f) {\n    return SmallFloat.floatToByte315(f);\n  }\n\n","sourceOld":"  /**\n   * Static accessor kept for backwards compability reason, use encodeNormValue instead.\n   * @param f norm-value to encode\n   * @return byte representing the given float\n   * @deprecated Use {@link #encodeNormValue} instead.\n   * \n   * @see #encodeNormValue(float)\n   */\n  @Deprecated\n  public static byte encodeNorm(float f) {\n    return SmallFloat.floatToByte315(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"14aec0a40da5a9c26f8752701a5aa10f78f5017d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dd2105e02e4fee2a20aac57c03fa7cb80dff27d7":["14aec0a40da5a9c26f8752701a5aa10f78f5017d"],"10c49614cb8b943c412debb24ccb614128394470":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a236b7fed4411660186d60e31936b14fd52f003c":["dd2105e02e4fee2a20aac57c03fa7cb80dff27d7"],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["10c49614cb8b943c412debb24ccb614128394470"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["a236b7fed4411660186d60e31936b14fd52f003c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"]},"commit2Childs":{"14aec0a40da5a9c26f8752701a5aa10f78f5017d":["dd2105e02e4fee2a20aac57c03fa7cb80dff27d7"],"dd2105e02e4fee2a20aac57c03fa7cb80dff27d7":["a236b7fed4411660186d60e31936b14fd52f003c"],"10c49614cb8b943c412debb24ccb614128394470":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["14aec0a40da5a9c26f8752701a5aa10f78f5017d"],"a236b7fed4411660186d60e31936b14fd52f003c":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["10c49614cb8b943c412debb24ccb614128394470"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}