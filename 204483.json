{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","commits":[{"id":"7439af33438ca32496b7ce4a341617a480b7137a","date":1202418816,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<4;iter++) {\n      final boolean autoCommit = 1==iter/2;\n      IndexWriter writer = new IndexWriter(dir,\n                                           autoCommit, new StandardAnalyzer(),\n                                           IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.UN_TOKENIZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               autoCommit, new StandardAnalyzer(),\n                               IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Directory[] indexDirs = { dir};\n      writer.addIndexes(indexDirs);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2586f96f60332eb97ecd2934b0763791462568b2","date":1220116589,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<4;iter++) {\n      final boolean autoCommit = 1==iter/2;\n      IndexWriter writer = new IndexWriter(dir,\n                                           autoCommit, new StandardAnalyzer(),\n                                           IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.UN_TOKENIZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               autoCommit, new StandardAnalyzer(),\n                               IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexes(indexDirs);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<4;iter++) {\n      final boolean autoCommit = 1==iter/2;\n      IndexWriter writer = new IndexWriter(dir,\n                                           autoCommit, new StandardAnalyzer(),\n                                           IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.UN_TOKENIZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               autoCommit, new StandardAnalyzer(),\n                               IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Directory[] indexDirs = { dir};\n      writer.addIndexes(indexDirs);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<4;iter++) {\n      final boolean autoCommit = 1==iter/2;\n      IndexWriter writer = new IndexWriter(dir,\n                                           autoCommit, new StandardAnalyzer(),\n                                           IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               autoCommit, new StandardAnalyzer(),\n                               IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexes(indexDirs);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<4;iter++) {\n      final boolean autoCommit = 1==iter/2;\n      IndexWriter writer = new IndexWriter(dir,\n                                           autoCommit, new StandardAnalyzer(),\n                                           IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.UN_TOKENIZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               autoCommit, new StandardAnalyzer(),\n                               IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexes(indexDirs);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<4;iter++) {\n      final boolean autoCommit = 1==iter/2;\n      IndexWriter writer = new IndexWriter(dir,\n                                           autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexes(indexDirs);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<4;iter++) {\n      final boolean autoCommit = 1==iter/2;\n      IndexWriter writer = new IndexWriter(dir,\n                                           autoCommit, new StandardAnalyzer(),\n                                           IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               autoCommit, new StandardAnalyzer(),\n                               IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexes(indexDirs);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestTermVectorCorruption().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void xxxtestTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<4;iter++) {\n      final boolean autoCommit = 1==iter/2;\n      IndexWriter writer = new IndexWriter(dir,\n                                           autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexes(indexDirs);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<4;iter++) {\n      final boolean autoCommit = 1==iter/2;\n      IndexWriter writer = new IndexWriter(dir,\n                                           autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexes(indexDirs);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<4;iter++) {\n      final boolean autoCommit = 1==iter/2;\n      IndexWriter writer = new IndexWriter(dir,\n                                           autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexes(indexDirs);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void xxxtestTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<4;iter++) {\n      final boolean autoCommit = 1==iter/2;\n      IndexWriter writer = new IndexWriter(dir,\n                                           autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexes(indexDirs);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13eaef7d286f35b5c850a1c2eb7b337679aa6453","date":1249118545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<4;iter++) {\n      final boolean autoCommit = 1==iter/2;\n      IndexWriter writer = new IndexWriter(dir,\n                                           autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexes(indexDirs);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<4;iter++) {\n      final boolean autoCommit = 1==iter/2;\n      IndexWriter writer = new IndexWriter(dir,\n                                           autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy());\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexes(indexDirs);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<4;iter++) {\n      final boolean autoCommit = 1==iter/2;\n      IndexWriter writer = new IndexWriter(dir,\n                                           autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexes(indexDirs);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<4;iter++) {\n      final boolean autoCommit = 1==iter/2;\n      IndexWriter writer = new IndexWriter(dir,\n                                           autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexes(indexDirs);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<4;iter++) {\n      final boolean autoCommit = 1==iter/2;\n      IndexWriter writer = new IndexWriter(dir,\n                                           autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexes(indexDirs);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<4;iter++) {\n      final boolean autoCommit = 1==iter/2;\n      IndexWriter writer = new IndexWriter(dir,\n                                           autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexes(indexDirs);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir,\n                                           new StandardAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               new StandardAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexes(indexDirs);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<4;iter++) {\n      final boolean autoCommit = 1==iter/2;\n      IndexWriter writer = new IndexWriter(dir,\n                                           autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               autoCommit, new StandardAnalyzer());\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexes(indexDirs);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7","date":1255555265,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir,\n                                           new StandardAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               new StandardAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexesNoOptimize(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir,\n                                           new StandardAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               new StandardAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexes(indexDirs);\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir,\n                                           new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexesNoOptimize(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir,\n                                           new StandardAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               new StandardAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexesNoOptimize(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir,\n                                           new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexesNoOptimize(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir,\n                                           new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexesNoOptimize(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT).setMaxBufferedDocs(2).setRAMBufferSizeMB(\n          IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n          new SerialMergeScheduler()));\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT)\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()));\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexesNoOptimize(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir,\n                                           new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexesNoOptimize(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir,\n                                           new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexesNoOptimize(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT).setMaxBufferedDocs(2).setRAMBufferSizeMB(\n          IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n          new SerialMergeScheduler()));\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT)\n          .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n              IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n              new SerialMergeScheduler()));\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexesNoOptimize(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2).setRAMBufferSizeMB(\n          IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n          new SerialMergeScheduler()));\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new StandardAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()));\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexesNoOptimize(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir,\n                                           new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               new StandardAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexesNoOptimize(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2).setRAMBufferSizeMB(\n          IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n          new SerialMergeScheduler()));\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new StandardAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()));\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexesNoOptimize(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2).setRAMBufferSizeMB(\n          IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n          new SerialMergeScheduler()));\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new StandardAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n          .setMergeScheduler(new SerialMergeScheduler()));\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexesNoOptimize(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"0a046c0c310bc77931fc8441bd920053b607dd14":["13eaef7d286f35b5c850a1c2eb7b337679aa6453","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["2586f96f60332eb97ecd2934b0763791462568b2"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["87c966e9308847938a7c905c2e46a56d8df788b8"],"7439af33438ca32496b7ce4a341617a480b7137a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"13eaef7d286f35b5c850a1c2eb7b337679aa6453":["09c482d1e63332617181729a225b215c452d8a79"],"87c966e9308847938a7c905c2e46a56d8df788b8":["0a046c0c310bc77931fc8441bd920053b607dd14"],"2586f96f60332eb97ecd2934b0763791462568b2":["7439af33438ca32496b7ce4a341617a480b7137a"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["87c966e9308847938a7c905c2e46a56d8df788b8"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"7439af33438ca32496b7ce4a341617a480b7137a":["2586f96f60332eb97ecd2934b0763791462568b2"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7439af33438ca32496b7ce4a341617a480b7137a"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"13eaef7d286f35b5c850a1c2eb7b337679aa6453":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"2586f96f60332eb97ecd2934b0763791462568b2":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"87c966e9308847938a7c905c2e46a56d8df788b8":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"09c482d1e63332617181729a225b215c452d8a79":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}