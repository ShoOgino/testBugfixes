{"path":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testUrlParamParsing().mjava","commits":[{"id":"1ee926a1176d00189d6fb3c70f739f21ffc731c3","date":1175399022,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testUrlParamParsing().mjava","pathOld":"/dev/null","sourceNew":"  public void testUrlParamParsing()\n  {\n    String[][] teststr = new String[][] {\n      { \"this is simple\", \"this%20is%20simple\" },\n      { \"this is simple\", \"this+is+simple\" },\n      { \"\\u00FC\", \"%C3%BC\" },   // lower-case \"u\" with diaeresis/umlaut\n      { \"\\u0026\", \"%26\" },      // &\n      { \"\\u20AC\", \"%E2%82%AC\" } // euro\n    };\n    \n    for( String[] tst : teststr ) {\n      MultiMapSolrParams params = SolrRequestParsers.parseQueryString( \"val=\"+tst[1] );\n      assertEquals( tst[0], params.get( \"val\" ) );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testUrlParamParsing().mjava","pathOld":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testUrlParamParsing().mjava","sourceNew":"  public void testUrlParamParsing()\n  {\n    String[][] teststr = new String[][] {\n      { \"this is simple\", \"this%20is%20simple\" },\n      { \"this is simple\", \"this+is+simple\" },\n      { \"\\u00FC\", \"%C3%BC\" },   // lower-case \"u\" with diaeresis/umlaut\n      { \"\\u0026\", \"%26\" },      // &\n      { \"\\u20AC\", \"%E2%82%AC\" } // euro\n    };\n    \n    for( String[] tst : teststr ) {\n      MultiMapSolrParams params = SolrRequestParsers.parseQueryString( \"val=\"+tst[1] );\n      assertEquals( tst[0], params.get( \"val\" ) );\n    }\n  }\n\n","sourceOld":"  public void testUrlParamParsing()\n  {\n    String[][] teststr = new String[][] {\n      { \"this is simple\", \"this%20is%20simple\" },\n      { \"this is simple\", \"this+is+simple\" },\n      { \"\\u00FC\", \"%C3%BC\" },   // lower-case \"u\" with diaeresis/umlaut\n      { \"\\u0026\", \"%26\" },      // &\n      { \"\\u20AC\", \"%E2%82%AC\" } // euro\n    };\n    \n    for( String[] tst : teststr ) {\n      MultiMapSolrParams params = SolrRequestParsers.parseQueryString( \"val=\"+tst[1] );\n      assertEquals( tst[0], params.get( \"val\" ) );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1ee926a1176d00189d6fb3c70f739f21ffc731c3":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["1ee926a1176d00189d6fb3c70f739f21ffc731c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["1ee926a1176d00189d6fb3c70f739f21ffc731c3"],"1ee926a1176d00189d6fb3c70f739f21ffc731c3":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}