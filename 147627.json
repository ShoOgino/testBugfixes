{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeFactory#makeSPT(Map[String,String],ClassLoader,SpatialContext).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeFactory#makeSPT(Map[String,String],ClassLoader,SpatialContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeFactory#makeSPT(Map[String,String],ClassLoader,SpatialContext).mjava","sourceNew":"  /**\n   * The factory  is looked up via \"prefixTree\" in args, expecting \"geohash\" or \"quad\".\n   * If it's neither of these, then \"geohash\" is chosen for a geo context, otherwise \"quad\" is chosen.\n   */\n  public static SpatialPrefixTree makeSPT(Map<String,String> args, ClassLoader classLoader, SpatialContext ctx) {\n    SpatialPrefixTreeFactory instance;\n    String cname = args.get(PREFIX_TREE);\n    if (cname == null)\n      cname = ctx.isGeo() ? \"geohash\" : \"quad\";\n    if (\"geohash\".equalsIgnoreCase(cname))\n      instance = new GeohashPrefixTree.Factory();\n    else if (\"quad\".equalsIgnoreCase(cname))\n      instance = new QuadPrefixTree.Factory();\n    else if (\"packedQuad\".equalsIgnoreCase(cname))\n      instance = new PackedQuadPrefixTree.Factory();\n    else {\n      try {\n        Class<?> c = classLoader.loadClass(cname);\n        instance = (SpatialPrefixTreeFactory) c.newInstance();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n    instance.init(args,ctx);\n    return instance.newSPT();\n  }\n\n","sourceOld":"  /**\n   * The factory  is looked up via \"prefixTree\" in args, expecting \"geohash\" or \"quad\".\n   * If it's neither of these, then \"geohash\" is chosen for a geo context, otherwise \"quad\" is chosen.\n   */\n  public static SpatialPrefixTree makeSPT(Map<String,String> args, ClassLoader classLoader, SpatialContext ctx) {\n    SpatialPrefixTreeFactory instance;\n    String cname = args.get(PREFIX_TREE);\n    if (cname == null)\n      cname = ctx.isGeo() ? \"geohash\" : \"quad\";\n    if (\"geohash\".equalsIgnoreCase(cname))\n      instance = new GeohashPrefixTree.Factory();\n    else if (\"quad\".equalsIgnoreCase(cname))\n      instance = new QuadPrefixTree.Factory();\n    else if (\"packedQuad\".equalsIgnoreCase(cname))\n      instance = new PackedQuadPrefixTree.Factory();\n    else {\n      try {\n        Class<?> c = classLoader.loadClass(cname);\n        instance = (SpatialPrefixTreeFactory) c.newInstance();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n    instance.init(args,ctx);\n    return instance.newSPT();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeFactory#makeSPT(Map[String,String],ClassLoader,SpatialContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeFactory#makeSPT(Map[String,String],ClassLoader,SpatialContext).mjava","sourceNew":"  /**\n   * The factory  is looked up via \"prefixTree\" in args, expecting \"geohash\" or \"quad\".\n   * If it's neither of these, then \"geohash\" is chosen for a geo context, otherwise \"quad\" is chosen.\n   */\n  public static SpatialPrefixTree makeSPT(Map<String,String> args, ClassLoader classLoader, SpatialContext ctx) {\n    SpatialPrefixTreeFactory instance;\n    String cname = args.get(PREFIX_TREE);\n    if (cname == null)\n      cname = ctx.isGeo() ? \"geohash\" : \"quad\";\n    if (\"geohash\".equalsIgnoreCase(cname))\n      instance = new GeohashPrefixTree.Factory();\n    else if (\"quad\".equalsIgnoreCase(cname))\n      instance = new QuadPrefixTree.Factory();\n    else if (\"packedQuad\".equalsIgnoreCase(cname))\n      instance = new PackedQuadPrefixTree.Factory();\n    else {\n      try {\n        Class<?> c = classLoader.loadClass(cname);\n        instance = (SpatialPrefixTreeFactory) c.newInstance();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n    instance.init(args,ctx);\n    return instance.newSPT();\n  }\n\n","sourceOld":"  /**\n   * The factory  is looked up via \"prefixTree\" in args, expecting \"geohash\" or \"quad\".\n   * If it's neither of these, then \"geohash\" is chosen for a geo context, otherwise \"quad\" is chosen.\n   */\n  public static SpatialPrefixTree makeSPT(Map<String,String> args, ClassLoader classLoader, SpatialContext ctx) {\n    SpatialPrefixTreeFactory instance;\n    String cname = args.get(PREFIX_TREE);\n    if (cname == null)\n      cname = ctx.isGeo() ? \"geohash\" : \"quad\";\n    if (\"geohash\".equalsIgnoreCase(cname))\n      instance = new GeohashPrefixTree.Factory();\n    else if (\"quad\".equalsIgnoreCase(cname))\n      instance = new QuadPrefixTree.Factory();\n    else if (\"packedQuad\".equalsIgnoreCase(cname))\n      instance = new PackedQuadPrefixTree.Factory();\n    else {\n      try {\n        Class<?> c = classLoader.loadClass(cname);\n        instance = (SpatialPrefixTreeFactory) c.newInstance();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n    instance.init(args,ctx);\n    return instance.newSPT();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d62049f98fe65513c261ee2593c08f17b6f890f","date":1520265122,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeFactory#makeSPT(Map[String,String],ClassLoader,SpatialContext).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeFactory#makeSPT(Map[String,String],ClassLoader,SpatialContext).mjava","sourceNew":"  /**\n   * The factory  is looked up via \"prefixTree\" in args, expecting \"geohash\" or \"quad\".\n   * If it's neither of these, then \"geohash\" is chosen for a geo context, otherwise \"quad\" is chosen.\n   */\n  public static SpatialPrefixTree makeSPT(Map<String,String> args, ClassLoader classLoader, SpatialContext ctx) {\n    //TODO refactor to use Java SPI like how Lucene already does for codecs/postingsFormats, etc\n    SpatialPrefixTreeFactory instance;\n    String cname = args.get(PREFIX_TREE);\n    if (cname == null)\n      cname = ctx.isGeo() ? \"geohash\" : \"quad\";\n    if (\"geohash\".equalsIgnoreCase(cname))\n      instance = new GeohashPrefixTree.Factory();\n    else if (\"quad\".equalsIgnoreCase(cname))\n      instance = new QuadPrefixTree.Factory();\n    else if (\"packedQuad\".equalsIgnoreCase(cname))\n      instance = new PackedQuadPrefixTree.Factory();\n    else if (\"s2\".equalsIgnoreCase(cname))\n      instance = new S2PrefixTree.Factory();\n    else {\n      try {\n        Class<?> c = classLoader.loadClass(cname);\n        instance = (SpatialPrefixTreeFactory) c.newInstance();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n    instance.init(args,ctx);\n    return instance.newSPT();\n  }\n\n","sourceOld":"  /**\n   * The factory  is looked up via \"prefixTree\" in args, expecting \"geohash\" or \"quad\".\n   * If it's neither of these, then \"geohash\" is chosen for a geo context, otherwise \"quad\" is chosen.\n   */\n  public static SpatialPrefixTree makeSPT(Map<String,String> args, ClassLoader classLoader, SpatialContext ctx) {\n    SpatialPrefixTreeFactory instance;\n    String cname = args.get(PREFIX_TREE);\n    if (cname == null)\n      cname = ctx.isGeo() ? \"geohash\" : \"quad\";\n    if (\"geohash\".equalsIgnoreCase(cname))\n      instance = new GeohashPrefixTree.Factory();\n    else if (\"quad\".equalsIgnoreCase(cname))\n      instance = new QuadPrefixTree.Factory();\n    else if (\"packedQuad\".equalsIgnoreCase(cname))\n      instance = new PackedQuadPrefixTree.Factory();\n    else {\n      try {\n        Class<?> c = classLoader.loadClass(cname);\n        instance = (SpatialPrefixTreeFactory) c.newInstance();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n    instance.init(args,ctx);\n    return instance.newSPT();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeFactory#makeSPT(Map[String,String],ClassLoader,SpatialContext).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeFactory#makeSPT(Map[String,String],ClassLoader,SpatialContext).mjava","sourceNew":"  /**\n   * The factory  is looked up via \"prefixTree\" in args, expecting \"geohash\" or \"quad\".\n   * If it's neither of these, then \"geohash\" is chosen for a geo context, otherwise \"quad\" is chosen.\n   */\n  public static SpatialPrefixTree makeSPT(Map<String,String> args, ClassLoader classLoader, SpatialContext ctx) {\n    //TODO refactor to use Java SPI like how Lucene already does for codecs/postingsFormats, etc\n    SpatialPrefixTreeFactory instance;\n    String cname = args.get(PREFIX_TREE);\n    if (cname == null)\n      cname = ctx.isGeo() ? \"geohash\" : \"quad\";\n    if (\"geohash\".equalsIgnoreCase(cname))\n      instance = new GeohashPrefixTree.Factory();\n    else if (\"quad\".equalsIgnoreCase(cname))\n      instance = new QuadPrefixTree.Factory();\n    else if (\"packedQuad\".equalsIgnoreCase(cname))\n      instance = new PackedQuadPrefixTree.Factory();\n    else if (\"s2\".equalsIgnoreCase(cname))\n      instance = new S2PrefixTree.Factory();\n    else {\n      try {\n        Class<?> c = classLoader.loadClass(cname);\n        instance = (SpatialPrefixTreeFactory) c.getConstructor().newInstance();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n    instance.init(args,ctx);\n    return instance.newSPT();\n  }\n\n","sourceOld":"  /**\n   * The factory  is looked up via \"prefixTree\" in args, expecting \"geohash\" or \"quad\".\n   * If it's neither of these, then \"geohash\" is chosen for a geo context, otherwise \"quad\" is chosen.\n   */\n  public static SpatialPrefixTree makeSPT(Map<String,String> args, ClassLoader classLoader, SpatialContext ctx) {\n    //TODO refactor to use Java SPI like how Lucene already does for codecs/postingsFormats, etc\n    SpatialPrefixTreeFactory instance;\n    String cname = args.get(PREFIX_TREE);\n    if (cname == null)\n      cname = ctx.isGeo() ? \"geohash\" : \"quad\";\n    if (\"geohash\".equalsIgnoreCase(cname))\n      instance = new GeohashPrefixTree.Factory();\n    else if (\"quad\".equalsIgnoreCase(cname))\n      instance = new QuadPrefixTree.Factory();\n    else if (\"packedQuad\".equalsIgnoreCase(cname))\n      instance = new PackedQuadPrefixTree.Factory();\n    else if (\"s2\".equalsIgnoreCase(cname))\n      instance = new S2PrefixTree.Factory();\n    else {\n      try {\n        Class<?> c = classLoader.loadClass(cname);\n        instance = (SpatialPrefixTreeFactory) c.newInstance();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n    instance.init(args,ctx);\n    return instance.newSPT();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e34e9db64b6fb5add5b2968e3a46342cef8363c7","date":1566335373,"type":3,"author":"nppoly","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeFactory#makeSPT(Map[String,String],ClassLoader,SpatialContext).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeFactory#makeSPT(Map[String,String],ClassLoader,SpatialContext).mjava","sourceNew":"  /**\n   * The factory is looked up via \"prefixTree\" in args, expecting \"geohash\" or \"quad\".\n   * If it's neither of these, then \"geohash\" is chosen for a geo context, otherwise \"quad\" is chosen.\n   * The \"version\" arg, if present, is parsed with {@link Version} and the prefix tree might be sensitive to it.\n   */\n  public static SpatialPrefixTree makeSPT(Map<String,String> args, ClassLoader classLoader, SpatialContext ctx) {\n    //TODO refactor to use Java SPI like how Lucene already does for codecs/postingsFormats, etc\n    SpatialPrefixTreeFactory instance;\n    String cname = args.get(PREFIX_TREE);\n    if (cname == null)\n      cname = ctx.isGeo() ? \"geohash\" : \"quad\";\n    if (\"geohash\".equalsIgnoreCase(cname))\n      instance = new GeohashPrefixTree.Factory();\n    else if (\"quad\".equalsIgnoreCase(cname))\n      instance = new QuadPrefixTree.Factory();\n    else if (\"packedQuad\".equalsIgnoreCase(cname))\n      instance = new PackedQuadPrefixTree.Factory();\n    else if (\"s2\".equalsIgnoreCase(cname))\n      instance = new S2PrefixTree.Factory();\n    else {\n      try {\n        Class<?> c = classLoader.loadClass(cname);\n        instance = (SpatialPrefixTreeFactory) c.getConstructor().newInstance();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n    instance.init(args, ctx);\n    return instance.newSPT();\n  }\n\n","sourceOld":"  /**\n   * The factory  is looked up via \"prefixTree\" in args, expecting \"geohash\" or \"quad\".\n   * If it's neither of these, then \"geohash\" is chosen for a geo context, otherwise \"quad\" is chosen.\n   */\n  public static SpatialPrefixTree makeSPT(Map<String,String> args, ClassLoader classLoader, SpatialContext ctx) {\n    //TODO refactor to use Java SPI like how Lucene already does for codecs/postingsFormats, etc\n    SpatialPrefixTreeFactory instance;\n    String cname = args.get(PREFIX_TREE);\n    if (cname == null)\n      cname = ctx.isGeo() ? \"geohash\" : \"quad\";\n    if (\"geohash\".equalsIgnoreCase(cname))\n      instance = new GeohashPrefixTree.Factory();\n    else if (\"quad\".equalsIgnoreCase(cname))\n      instance = new QuadPrefixTree.Factory();\n    else if (\"packedQuad\".equalsIgnoreCase(cname))\n      instance = new PackedQuadPrefixTree.Factory();\n    else if (\"s2\".equalsIgnoreCase(cname))\n      instance = new S2PrefixTree.Factory();\n    else {\n      try {\n        Class<?> c = classLoader.loadClass(cname);\n        instance = (SpatialPrefixTreeFactory) c.getConstructor().newInstance();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n    instance.init(args,ctx);\n    return instance.newSPT();\n  }\n\n","bugFix":["7313a9540ff291178aa787bab4a0467caeea59a2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["7d62049f98fe65513c261ee2593c08f17b6f890f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e34e9db64b6fb5add5b2968e3a46342cef8363c7":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e34e9db64b6fb5add5b2968e3a46342cef8363c7"],"7d62049f98fe65513c261ee2593c08f17b6f890f":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["7d62049f98fe65513c261ee2593c08f17b6f890f"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["e34e9db64b6fb5add5b2968e3a46342cef8363c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"e34e9db64b6fb5add5b2968e3a46342cef8363c7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7d62049f98fe65513c261ee2593c08f17b6f890f":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}