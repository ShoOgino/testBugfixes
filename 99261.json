{"path":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#start(IndexableField[],int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#start(IndexableField[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#start(IndexableField[],int).mjava","sourceNew":"  @Override\n  boolean start(IndexableField[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      IndexableField field = fields[i];\n      if (field.fieldType().indexed() && field.fieldType().storeTermVectors()) {\n        doVectors = true;\n        doVectorPositions |= field.fieldType().storeTermVectorPositions();\n        doVectorOffsets |= field.fieldType().storeTermVectorOffsets();\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","sourceOld":"  @Override\n  boolean start(IndexableField[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      IndexableField field = fields[i];\n      if (field.fieldType().indexed() && field.fieldType().storeTermVectors()) {\n        doVectors = true;\n        doVectorPositions |= field.fieldType().storeTermVectorPositions();\n        doVectorOffsets |= field.fieldType().storeTermVectorOffsets();\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","date":1341524239,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#start(IndexableField[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#start(IndexableField[],int).mjava","sourceNew":"  @Override\n  boolean start(IndexableField[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      IndexableField field = fields[i];\n      if (field.fieldType().storeTermVectors()) {\n        doVectors = true;\n        doVectorPositions |= field.fieldType().storeTermVectorPositions();\n        doVectorOffsets |= field.fieldType().storeTermVectorOffsets();\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","sourceOld":"  @Override\n  boolean start(IndexableField[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      IndexableField field = fields[i];\n      if (field.fieldType().indexed() && field.fieldType().storeTermVectors()) {\n        doVectors = true;\n        doVectorPositions |= field.fieldType().storeTermVectorPositions();\n        doVectorOffsets |= field.fieldType().storeTermVectorOffsets();\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0935c850ea562932997b72c69d93e345f21d7f45","date":1344711506,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#start(IndexableField[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#start(IndexableField[],int).mjava","sourceNew":"  @Override\n  boolean start(IndexableField[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n    doVectorPayloads = false;\n    hasPayloads = false;\n\n    for(int i=0;i<count;i++) {\n      IndexableField field = fields[i];\n      if (field.fieldType().indexed() && field.fieldType().storeTermVectors()) {\n        doVectors = true;\n        doVectorPositions |= field.fieldType().storeTermVectorPositions();\n        doVectorOffsets |= field.fieldType().storeTermVectorOffsets();\n        if (doVectorPositions) {\n          doVectorPayloads |= field.fieldType().storeTermVectorPayloads();\n        } else if (field.fieldType().storeTermVectorPayloads()) {\n          // TODO: move this check somewhere else, and impl the other missing ones\n          throw new IllegalArgumentException(\"cannot index term vector payloads for field: \" + field + \" without term vector positions\");\n        }\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","sourceOld":"  @Override\n  boolean start(IndexableField[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      IndexableField field = fields[i];\n      if (field.fieldType().indexed() && field.fieldType().storeTermVectors()) {\n        doVectors = true;\n        doVectorPositions |= field.fieldType().storeTermVectorPositions();\n        doVectorOffsets |= field.fieldType().storeTermVectorOffsets();\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39e6d19353f07409c79bdd58d0b496d9240c49b0","date":1344718294,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#start(IndexableField[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#start(IndexableField[],int).mjava","sourceNew":"  @Override\n  boolean start(IndexableField[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n    doVectorPayloads = false;\n    hasPayloads = false;\n\n    for(int i=0;i<count;i++) {\n      IndexableField field = fields[i];\n      if (field.fieldType().indexed()) {\n        if (field.fieldType().storeTermVectors()) {\n          doVectors = true;\n          doVectorPositions |= field.fieldType().storeTermVectorPositions();\n          doVectorOffsets |= field.fieldType().storeTermVectorOffsets();\n          if (doVectorPositions) {\n            doVectorPayloads |= field.fieldType().storeTermVectorPayloads();\n          } else if (field.fieldType().storeTermVectorPayloads()) {\n            // TODO: move this check somewhere else, and impl the other missing ones\n            throw new IllegalArgumentException(\"cannot index term vector payloads for field: \" + field + \" without term vector positions\");\n          }\n        } else {\n          if (field.fieldType().storeTermVectorOffsets()) {\n            throw new IllegalArgumentException(\"cannot index term vector offsets when term vectors are not indexed (field=\\\"\" + field.name());\n          }\n          if (field.fieldType().storeTermVectorPositions()) {\n            throw new IllegalArgumentException(\"cannot index term vector positions when term vectors are not indexed (field=\\\"\" + field.name());\n          }\n          if (field.fieldType().storeTermVectorPayloads()) {\n            throw new IllegalArgumentException(\"cannot index term vector payloads when term vectors are not indexed (field=\\\"\" + field.name());\n          }\n        }\n      } else {\n        if (field.fieldType().storeTermVectors()) {\n          throw new IllegalArgumentException(\"cannot index term vectors when field is not indexed (field=\\\"\" + field.name());\n        }\n        if (field.fieldType().storeTermVectorOffsets()) {\n          throw new IllegalArgumentException(\"cannot index term vector offsets when field is not indexed (field=\\\"\" + field.name());\n        }\n        if (field.fieldType().storeTermVectorPositions()) {\n          throw new IllegalArgumentException(\"cannot index term vector positions when field is not indexed (field=\\\"\" + field.name());\n        }\n        if (field.fieldType().storeTermVectorPayloads()) {\n          throw new IllegalArgumentException(\"cannot index term vector payloads when field is not indexed (field=\\\"\" + field.name());\n        }\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","sourceOld":"  @Override\n  boolean start(IndexableField[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n    doVectorPayloads = false;\n    hasPayloads = false;\n\n    for(int i=0;i<count;i++) {\n      IndexableField field = fields[i];\n      if (field.fieldType().indexed() && field.fieldType().storeTermVectors()) {\n        doVectors = true;\n        doVectorPositions |= field.fieldType().storeTermVectorPositions();\n        doVectorOffsets |= field.fieldType().storeTermVectorOffsets();\n        if (doVectorPositions) {\n          doVectorPayloads |= field.fieldType().storeTermVectorPayloads();\n        } else if (field.fieldType().storeTermVectorPayloads()) {\n          // TODO: move this check somewhere else, and impl the other missing ones\n          throw new IllegalArgumentException(\"cannot index term vector payloads for field: \" + field + \" without term vector positions\");\n        }\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#start(IndexableField[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#start(IndexableField[],int).mjava","sourceNew":"  @Override\n  boolean start(IndexableField[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n    doVectorPayloads = false;\n    hasPayloads = false;\n\n    for(int i=0;i<count;i++) {\n      IndexableField field = fields[i];\n      if (field.fieldType().indexed()) {\n        if (field.fieldType().storeTermVectors()) {\n          doVectors = true;\n          doVectorPositions |= field.fieldType().storeTermVectorPositions();\n          doVectorOffsets |= field.fieldType().storeTermVectorOffsets();\n          if (doVectorPositions) {\n            doVectorPayloads |= field.fieldType().storeTermVectorPayloads();\n          } else if (field.fieldType().storeTermVectorPayloads()) {\n            // TODO: move this check somewhere else, and impl the other missing ones\n            throw new IllegalArgumentException(\"cannot index term vector payloads for field: \" + field + \" without term vector positions\");\n          }\n        } else {\n          if (field.fieldType().storeTermVectorOffsets()) {\n            throw new IllegalArgumentException(\"cannot index term vector offsets when term vectors are not indexed (field=\\\"\" + field.name());\n          }\n          if (field.fieldType().storeTermVectorPositions()) {\n            throw new IllegalArgumentException(\"cannot index term vector positions when term vectors are not indexed (field=\\\"\" + field.name());\n          }\n          if (field.fieldType().storeTermVectorPayloads()) {\n            throw new IllegalArgumentException(\"cannot index term vector payloads when term vectors are not indexed (field=\\\"\" + field.name());\n          }\n        }\n      } else {\n        if (field.fieldType().storeTermVectors()) {\n          throw new IllegalArgumentException(\"cannot index term vectors when field is not indexed (field=\\\"\" + field.name());\n        }\n        if (field.fieldType().storeTermVectorOffsets()) {\n          throw new IllegalArgumentException(\"cannot index term vector offsets when field is not indexed (field=\\\"\" + field.name());\n        }\n        if (field.fieldType().storeTermVectorPositions()) {\n          throw new IllegalArgumentException(\"cannot index term vector positions when field is not indexed (field=\\\"\" + field.name());\n        }\n        if (field.fieldType().storeTermVectorPayloads()) {\n          throw new IllegalArgumentException(\"cannot index term vector payloads when field is not indexed (field=\\\"\" + field.name());\n        }\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","sourceOld":"  @Override\n  boolean start(IndexableField[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      IndexableField field = fields[i];\n      if (field.fieldType().indexed() && field.fieldType().storeTermVectors()) {\n        doVectors = true;\n        doVectorPositions |= field.fieldType().storeTermVectorPositions();\n        doVectorOffsets |= field.fieldType().storeTermVectorOffsets();\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#start(IndexableField[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#start(IndexableField[],int).mjava","sourceNew":"  @Override\n  boolean start(IndexableField[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n    doVectorPayloads = false;\n    hasPayloads = false;\n\n    for(int i=0;i<count;i++) {\n      IndexableField field = fields[i];\n      if (field.fieldType().indexed()) {\n        if (field.fieldType().storeTermVectors()) {\n          doVectors = true;\n          doVectorPositions |= field.fieldType().storeTermVectorPositions();\n          doVectorOffsets |= field.fieldType().storeTermVectorOffsets();\n          if (doVectorPositions) {\n            doVectorPayloads |= field.fieldType().storeTermVectorPayloads();\n          } else if (field.fieldType().storeTermVectorPayloads()) {\n            // TODO: move this check somewhere else, and impl the other missing ones\n            throw new IllegalArgumentException(\"cannot index term vector payloads for field: \" + field + \" without term vector positions\");\n          }\n        } else {\n          if (field.fieldType().storeTermVectorOffsets()) {\n            throw new IllegalArgumentException(\"cannot index term vector offsets when term vectors are not indexed (field=\\\"\" + field.name());\n          }\n          if (field.fieldType().storeTermVectorPositions()) {\n            throw new IllegalArgumentException(\"cannot index term vector positions when term vectors are not indexed (field=\\\"\" + field.name());\n          }\n          if (field.fieldType().storeTermVectorPayloads()) {\n            throw new IllegalArgumentException(\"cannot index term vector payloads when term vectors are not indexed (field=\\\"\" + field.name());\n          }\n        }\n      } else {\n        if (field.fieldType().storeTermVectors()) {\n          throw new IllegalArgumentException(\"cannot index term vectors when field is not indexed (field=\\\"\" + field.name());\n        }\n        if (field.fieldType().storeTermVectorOffsets()) {\n          throw new IllegalArgumentException(\"cannot index term vector offsets when field is not indexed (field=\\\"\" + field.name());\n        }\n        if (field.fieldType().storeTermVectorPositions()) {\n          throw new IllegalArgumentException(\"cannot index term vector positions when field is not indexed (field=\\\"\" + field.name());\n        }\n        if (field.fieldType().storeTermVectorPayloads()) {\n          throw new IllegalArgumentException(\"cannot index term vector payloads when field is not indexed (field=\\\"\" + field.name());\n        }\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","sourceOld":"  @Override\n  boolean start(IndexableField[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      IndexableField field = fields[i];\n      if (field.fieldType().storeTermVectors()) {\n        doVectors = true;\n        doVectorPositions |= field.fieldType().storeTermVectorPositions();\n        doVectorOffsets |= field.fieldType().storeTermVectorOffsets();\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba3734ff991a3f9e0bd261c0e163ca407dfd235d","date":1375724104,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#start(IndexableField[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#start(IndexableField[],int).mjava","sourceNew":"  @Override\n  boolean start(IndexableField[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n    doVectorPayloads = false;\n    hasPayloads = false;\n\n    for(int i=0;i<count;i++) {\n      IndexableField field = fields[i];\n      if (field.fieldType().indexed()) {\n        if (field.fieldType().storeTermVectors()) {\n          doVectors = true;\n          doVectorPositions |= field.fieldType().storeTermVectorPositions();\n          doVectorOffsets |= field.fieldType().storeTermVectorOffsets();\n          if (doVectorPositions) {\n            doVectorPayloads |= field.fieldType().storeTermVectorPayloads();\n          } else if (field.fieldType().storeTermVectorPayloads()) {\n            // TODO: move this check somewhere else, and impl the other missing ones\n            throw new IllegalArgumentException(\"cannot index term vector payloads without term vector positions (field=\\\"\" + field.name() + \"\\\")\");\n          }\n        } else {\n          if (field.fieldType().storeTermVectorOffsets()) {\n            throw new IllegalArgumentException(\"cannot index term vector offsets when term vectors are not indexed (field=\\\"\" + field.name() + \"\\\")\");\n          }\n          if (field.fieldType().storeTermVectorPositions()) {\n            throw new IllegalArgumentException(\"cannot index term vector positions when term vectors are not indexed (field=\\\"\" + field.name() + \"\\\")\");\n          }\n          if (field.fieldType().storeTermVectorPayloads()) {\n            throw new IllegalArgumentException(\"cannot index term vector payloads when term vectors are not indexed (field=\\\"\" + field.name() + \"\\\")\");\n          }\n        }\n      } else {\n        if (field.fieldType().storeTermVectors()) {\n          throw new IllegalArgumentException(\"cannot index term vectors when field is not indexed (field=\\\"\" + field.name() + \"\\\")\");\n        }\n        if (field.fieldType().storeTermVectorOffsets()) {\n          throw new IllegalArgumentException(\"cannot index term vector offsets when field is not indexed (field=\\\"\" + field.name() + \"\\\")\");\n        }\n        if (field.fieldType().storeTermVectorPositions()) {\n          throw new IllegalArgumentException(\"cannot index term vector positions when field is not indexed (field=\\\"\" + field.name() + \"\\\")\");\n        }\n        if (field.fieldType().storeTermVectorPayloads()) {\n          throw new IllegalArgumentException(\"cannot index term vector payloads when field is not indexed (field=\\\"\" + field.name() + \"\\\")\");\n        }\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","sourceOld":"  @Override\n  boolean start(IndexableField[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n    doVectorPayloads = false;\n    hasPayloads = false;\n\n    for(int i=0;i<count;i++) {\n      IndexableField field = fields[i];\n      if (field.fieldType().indexed()) {\n        if (field.fieldType().storeTermVectors()) {\n          doVectors = true;\n          doVectorPositions |= field.fieldType().storeTermVectorPositions();\n          doVectorOffsets |= field.fieldType().storeTermVectorOffsets();\n          if (doVectorPositions) {\n            doVectorPayloads |= field.fieldType().storeTermVectorPayloads();\n          } else if (field.fieldType().storeTermVectorPayloads()) {\n            // TODO: move this check somewhere else, and impl the other missing ones\n            throw new IllegalArgumentException(\"cannot index term vector payloads for field: \" + field + \" without term vector positions\");\n          }\n        } else {\n          if (field.fieldType().storeTermVectorOffsets()) {\n            throw new IllegalArgumentException(\"cannot index term vector offsets when term vectors are not indexed (field=\\\"\" + field.name());\n          }\n          if (field.fieldType().storeTermVectorPositions()) {\n            throw new IllegalArgumentException(\"cannot index term vector positions when term vectors are not indexed (field=\\\"\" + field.name());\n          }\n          if (field.fieldType().storeTermVectorPayloads()) {\n            throw new IllegalArgumentException(\"cannot index term vector payloads when term vectors are not indexed (field=\\\"\" + field.name());\n          }\n        }\n      } else {\n        if (field.fieldType().storeTermVectors()) {\n          throw new IllegalArgumentException(\"cannot index term vectors when field is not indexed (field=\\\"\" + field.name());\n        }\n        if (field.fieldType().storeTermVectorOffsets()) {\n          throw new IllegalArgumentException(\"cannot index term vector offsets when field is not indexed (field=\\\"\" + field.name());\n        }\n        if (field.fieldType().storeTermVectorPositions()) {\n          throw new IllegalArgumentException(\"cannot index term vector positions when field is not indexed (field=\\\"\" + field.name());\n        }\n        if (field.fieldType().storeTermVectorPayloads()) {\n          throw new IllegalArgumentException(\"cannot index term vector payloads when field is not indexed (field=\\\"\" + field.name());\n        }\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#start(IndexableField[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#start(IndexableField[],int).mjava","sourceNew":"  @Override\n  boolean start(IndexableField[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n    doVectorPayloads = false;\n    hasPayloads = false;\n\n    for(int i=0;i<count;i++) {\n      IndexableField field = fields[i];\n      if (field.fieldType().indexed()) {\n        if (field.fieldType().storeTermVectors()) {\n          doVectors = true;\n          doVectorPositions |= field.fieldType().storeTermVectorPositions();\n          doVectorOffsets |= field.fieldType().storeTermVectorOffsets();\n          if (doVectorPositions) {\n            doVectorPayloads |= field.fieldType().storeTermVectorPayloads();\n          } else if (field.fieldType().storeTermVectorPayloads()) {\n            // TODO: move this check somewhere else, and impl the other missing ones\n            throw new IllegalArgumentException(\"cannot index term vector payloads without term vector positions (field=\\\"\" + field.name() + \"\\\")\");\n          }\n        } else {\n          if (field.fieldType().storeTermVectorOffsets()) {\n            throw new IllegalArgumentException(\"cannot index term vector offsets when term vectors are not indexed (field=\\\"\" + field.name() + \"\\\")\");\n          }\n          if (field.fieldType().storeTermVectorPositions()) {\n            throw new IllegalArgumentException(\"cannot index term vector positions when term vectors are not indexed (field=\\\"\" + field.name() + \"\\\")\");\n          }\n          if (field.fieldType().storeTermVectorPayloads()) {\n            throw new IllegalArgumentException(\"cannot index term vector payloads when term vectors are not indexed (field=\\\"\" + field.name() + \"\\\")\");\n          }\n        }\n      } else {\n        if (field.fieldType().storeTermVectors()) {\n          throw new IllegalArgumentException(\"cannot index term vectors when field is not indexed (field=\\\"\" + field.name() + \"\\\")\");\n        }\n        if (field.fieldType().storeTermVectorOffsets()) {\n          throw new IllegalArgumentException(\"cannot index term vector offsets when field is not indexed (field=\\\"\" + field.name() + \"\\\")\");\n        }\n        if (field.fieldType().storeTermVectorPositions()) {\n          throw new IllegalArgumentException(\"cannot index term vector positions when field is not indexed (field=\\\"\" + field.name() + \"\\\")\");\n        }\n        if (field.fieldType().storeTermVectorPayloads()) {\n          throw new IllegalArgumentException(\"cannot index term vector payloads when field is not indexed (field=\\\"\" + field.name() + \"\\\")\");\n        }\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","sourceOld":"  @Override\n  boolean start(IndexableField[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n    doVectorPayloads = false;\n    hasPayloads = false;\n\n    for(int i=0;i<count;i++) {\n      IndexableField field = fields[i];\n      if (field.fieldType().indexed()) {\n        if (field.fieldType().storeTermVectors()) {\n          doVectors = true;\n          doVectorPositions |= field.fieldType().storeTermVectorPositions();\n          doVectorOffsets |= field.fieldType().storeTermVectorOffsets();\n          if (doVectorPositions) {\n            doVectorPayloads |= field.fieldType().storeTermVectorPayloads();\n          } else if (field.fieldType().storeTermVectorPayloads()) {\n            // TODO: move this check somewhere else, and impl the other missing ones\n            throw new IllegalArgumentException(\"cannot index term vector payloads for field: \" + field + \" without term vector positions\");\n          }\n        } else {\n          if (field.fieldType().storeTermVectorOffsets()) {\n            throw new IllegalArgumentException(\"cannot index term vector offsets when term vectors are not indexed (field=\\\"\" + field.name());\n          }\n          if (field.fieldType().storeTermVectorPositions()) {\n            throw new IllegalArgumentException(\"cannot index term vector positions when term vectors are not indexed (field=\\\"\" + field.name());\n          }\n          if (field.fieldType().storeTermVectorPayloads()) {\n            throw new IllegalArgumentException(\"cannot index term vector payloads when term vectors are not indexed (field=\\\"\" + field.name());\n          }\n        }\n      } else {\n        if (field.fieldType().storeTermVectors()) {\n          throw new IllegalArgumentException(\"cannot index term vectors when field is not indexed (field=\\\"\" + field.name());\n        }\n        if (field.fieldType().storeTermVectorOffsets()) {\n          throw new IllegalArgumentException(\"cannot index term vector offsets when field is not indexed (field=\\\"\" + field.name());\n        }\n        if (field.fieldType().storeTermVectorPositions()) {\n          throw new IllegalArgumentException(\"cannot index term vector positions when field is not indexed (field=\\\"\" + field.name());\n        }\n        if (field.fieldType().storeTermVectorPayloads()) {\n          throw new IllegalArgumentException(\"cannot index term vector payloads when field is not indexed (field=\\\"\" + field.name());\n        }\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#start(IndexableField[],int).mjava","sourceNew":null,"sourceOld":"  @Override\n  boolean start(IndexableField[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n    doVectorPayloads = false;\n    hasPayloads = false;\n\n    for(int i=0;i<count;i++) {\n      IndexableField field = fields[i];\n      if (field.fieldType().indexed()) {\n        if (field.fieldType().storeTermVectors()) {\n          doVectors = true;\n          doVectorPositions |= field.fieldType().storeTermVectorPositions();\n          doVectorOffsets |= field.fieldType().storeTermVectorOffsets();\n          if (doVectorPositions) {\n            doVectorPayloads |= field.fieldType().storeTermVectorPayloads();\n          } else if (field.fieldType().storeTermVectorPayloads()) {\n            // TODO: move this check somewhere else, and impl the other missing ones\n            throw new IllegalArgumentException(\"cannot index term vector payloads without term vector positions (field=\\\"\" + field.name() + \"\\\")\");\n          }\n        } else {\n          if (field.fieldType().storeTermVectorOffsets()) {\n            throw new IllegalArgumentException(\"cannot index term vector offsets when term vectors are not indexed (field=\\\"\" + field.name() + \"\\\")\");\n          }\n          if (field.fieldType().storeTermVectorPositions()) {\n            throw new IllegalArgumentException(\"cannot index term vector positions when term vectors are not indexed (field=\\\"\" + field.name() + \"\\\")\");\n          }\n          if (field.fieldType().storeTermVectorPayloads()) {\n            throw new IllegalArgumentException(\"cannot index term vector payloads when term vectors are not indexed (field=\\\"\" + field.name() + \"\\\")\");\n          }\n        }\n      } else {\n        if (field.fieldType().storeTermVectors()) {\n          throw new IllegalArgumentException(\"cannot index term vectors when field is not indexed (field=\\\"\" + field.name() + \"\\\")\");\n        }\n        if (field.fieldType().storeTermVectorOffsets()) {\n          throw new IllegalArgumentException(\"cannot index term vector offsets when field is not indexed (field=\\\"\" + field.name() + \"\\\")\");\n        }\n        if (field.fieldType().storeTermVectorPositions()) {\n          throw new IllegalArgumentException(\"cannot index term vector positions when field is not indexed (field=\\\"\" + field.name() + \"\\\")\");\n        }\n        if (field.fieldType().storeTermVectorPayloads()) {\n          throw new IllegalArgumentException(\"cannot index term vector payloads when field is not indexed (field=\\\"\" + field.name() + \"\\\")\");\n        }\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#start(IndexableField[],int).mjava","sourceNew":null,"sourceOld":"  @Override\n  boolean start(IndexableField[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n    doVectorPayloads = false;\n    hasPayloads = false;\n\n    for(int i=0;i<count;i++) {\n      IndexableField field = fields[i];\n      if (field.fieldType().indexed()) {\n        if (field.fieldType().storeTermVectors()) {\n          doVectors = true;\n          doVectorPositions |= field.fieldType().storeTermVectorPositions();\n          doVectorOffsets |= field.fieldType().storeTermVectorOffsets();\n          if (doVectorPositions) {\n            doVectorPayloads |= field.fieldType().storeTermVectorPayloads();\n          } else if (field.fieldType().storeTermVectorPayloads()) {\n            // TODO: move this check somewhere else, and impl the other missing ones\n            throw new IllegalArgumentException(\"cannot index term vector payloads without term vector positions (field=\\\"\" + field.name() + \"\\\")\");\n          }\n        } else {\n          if (field.fieldType().storeTermVectorOffsets()) {\n            throw new IllegalArgumentException(\"cannot index term vector offsets when term vectors are not indexed (field=\\\"\" + field.name() + \"\\\")\");\n          }\n          if (field.fieldType().storeTermVectorPositions()) {\n            throw new IllegalArgumentException(\"cannot index term vector positions when term vectors are not indexed (field=\\\"\" + field.name() + \"\\\")\");\n          }\n          if (field.fieldType().storeTermVectorPayloads()) {\n            throw new IllegalArgumentException(\"cannot index term vector payloads when term vectors are not indexed (field=\\\"\" + field.name() + \"\\\")\");\n          }\n        }\n      } else {\n        if (field.fieldType().storeTermVectors()) {\n          throw new IllegalArgumentException(\"cannot index term vectors when field is not indexed (field=\\\"\" + field.name() + \"\\\")\");\n        }\n        if (field.fieldType().storeTermVectorOffsets()) {\n          throw new IllegalArgumentException(\"cannot index term vector offsets when field is not indexed (field=\\\"\" + field.name() + \"\\\")\");\n        }\n        if (field.fieldType().storeTermVectorPositions()) {\n          throw new IllegalArgumentException(\"cannot index term vector positions when field is not indexed (field=\\\"\" + field.name() + \"\\\")\");\n        }\n        if (field.fieldType().storeTermVectorPayloads()) {\n          throw new IllegalArgumentException(\"cannot index term vector payloads when field is not indexed (field=\\\"\" + field.name() + \"\\\")\");\n        }\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#start(IndexableField[],int).mjava","sourceNew":null,"sourceOld":"  @Override\n  boolean start(IndexableField[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n    doVectorPayloads = false;\n    hasPayloads = false;\n\n    for(int i=0;i<count;i++) {\n      IndexableField field = fields[i];\n      if (field.fieldType().indexed()) {\n        if (field.fieldType().storeTermVectors()) {\n          doVectors = true;\n          doVectorPositions |= field.fieldType().storeTermVectorPositions();\n          doVectorOffsets |= field.fieldType().storeTermVectorOffsets();\n          if (doVectorPositions) {\n            doVectorPayloads |= field.fieldType().storeTermVectorPayloads();\n          } else if (field.fieldType().storeTermVectorPayloads()) {\n            // TODO: move this check somewhere else, and impl the other missing ones\n            throw new IllegalArgumentException(\"cannot index term vector payloads without term vector positions (field=\\\"\" + field.name() + \"\\\")\");\n          }\n        } else {\n          if (field.fieldType().storeTermVectorOffsets()) {\n            throw new IllegalArgumentException(\"cannot index term vector offsets when term vectors are not indexed (field=\\\"\" + field.name() + \"\\\")\");\n          }\n          if (field.fieldType().storeTermVectorPositions()) {\n            throw new IllegalArgumentException(\"cannot index term vector positions when term vectors are not indexed (field=\\\"\" + field.name() + \"\\\")\");\n          }\n          if (field.fieldType().storeTermVectorPayloads()) {\n            throw new IllegalArgumentException(\"cannot index term vector payloads when term vectors are not indexed (field=\\\"\" + field.name() + \"\\\")\");\n          }\n        }\n      } else {\n        if (field.fieldType().storeTermVectors()) {\n          throw new IllegalArgumentException(\"cannot index term vectors when field is not indexed (field=\\\"\" + field.name() + \"\\\")\");\n        }\n        if (field.fieldType().storeTermVectorOffsets()) {\n          throw new IllegalArgumentException(\"cannot index term vector offsets when field is not indexed (field=\\\"\" + field.name() + \"\\\")\");\n        }\n        if (field.fieldType().storeTermVectorPositions()) {\n          throw new IllegalArgumentException(\"cannot index term vector positions when field is not indexed (field=\\\"\" + field.name() + \"\\\")\");\n        }\n        if (field.fieldType().storeTermVectorPayloads()) {\n          throw new IllegalArgumentException(\"cannot index term vector payloads when field is not indexed (field=\\\"\" + field.name() + \"\\\")\");\n        }\n      }\n    }\n\n    if (doVectors) {\n      termsWriter.hasVectors = true;\n      if (termsHashPerField.bytesHash.size() != 0) {\n        // Only necessary if previous doc hit a\n        // non-aborting exception while writing vectors in\n        // this field:\n        termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["ba3734ff991a3f9e0bd261c0e163ca407dfd235d","3394716f52b34ab259ad5247e7595d9f9db6e935"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"39e6d19353f07409c79bdd58d0b496d9240c49b0":["0935c850ea562932997b72c69d93e345f21d7f45"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["ba3734ff991a3f9e0bd261c0e163ca407dfd235d","52c7e49be259508735752fba88085255014a6ecf"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","39e6d19353f07409c79bdd58d0b496d9240c49b0"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["39e6d19353f07409c79bdd58d0b496d9240c49b0"],"0935c850ea562932997b72c69d93e345f21d7f45":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ba3734ff991a3f9e0bd261c0e163ca407dfd235d":["39e6d19353f07409c79bdd58d0b496d9240c49b0"],"52c7e49be259508735752fba88085255014a6ecf":["ba3734ff991a3f9e0bd261c0e163ca407dfd235d"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","39e6d19353f07409c79bdd58d0b496d9240c49b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3394716f52b34ab259ad5247e7595d9f9db6e935"]},"commit2Childs":{"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7869f64c874ebf7f317d22c00baf2b6857797a6","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","0935c850ea562932997b72c69d93e345f21d7f45"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"39e6d19353f07409c79bdd58d0b496d9240c49b0":["c7869f64c874ebf7f317d22c00baf2b6857797a6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","ba3734ff991a3f9e0bd261c0e163ca407dfd235d","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"0935c850ea562932997b72c69d93e345f21d7f45":["39e6d19353f07409c79bdd58d0b496d9240c49b0"],"ba3734ff991a3f9e0bd261c0e163ca407dfd235d":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3394716f52b34ab259ad5247e7595d9f9db6e935","52c7e49be259508735752fba88085255014a6ecf"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","c7869f64c874ebf7f317d22c00baf2b6857797a6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}