{"path":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testGetQParser().mjava","commits":[{"id":"73037b76a70b4cad490b616ea90220b3cc2a6fd8","date":1561396119,"type":0,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testGetQParser().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetQParser() throws Exception {\n    // invalid defType\n    SolrException exception = expectThrows(SolrException.class, () -> h.query(req(\"q\", \"ad\", \"defType\", \"bleh\")));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, exception.code());\n    assertEquals(\"invalid query parser 'bleh' for query 'ad'\", exception.getMessage());\n\n    // invalid qparser override in the local params\n    exception = expectThrows(SolrException.class, () -> h.query(req(\"q\", \"{!bleh}\")));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, exception.code());\n    assertEquals(\"invalid query parser 'bleh' for query '{!bleh}'\", exception.getMessage());\n\n    // invalid qParser with fq params\n    exception = expectThrows(SolrException.class, () -> h.query(req(\"q\", \"*:*\", \"fq\", \"{!some}\")));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, exception.code());\n    assertEquals(\"invalid query parser 'some' for query '{!some}'\", exception.getMessage());\n\n    // invalid qparser with function queries\n    exception = expectThrows(SolrException.class, () -> h.query(req(\"q\", \"*:*\", \"defType\", \"edismax\", \"boost\", \"{!hmm}\")));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, exception.code());\n    assertEquals(\"invalid query parser 'hmm' for query '{!hmm}'\", exception.getMessage());\n\n    exception = expectThrows(SolrException.class, () -> h.query(req(\"q\", \"*:*\", \"defType\", \"edismax\", \"boost\", \"query({!bleh v=ak})\")));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, exception.code());\n    assertEquals(\"invalid query parser 'bleh' for query '{!bleh v=ak}'\", exception.getMessage());\n\n    exception = expectThrows(SolrException.class, () ->\n        h.query(req(\"q\", \"*:*\", \"defType\", \"edismax\", \"boost\", \"query($qq)\", \"qq\", \"{!bleh v=a}\")));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, exception.code());\n    assertEquals(\"invalid query parser 'bleh' for query '{!bleh v=a}'\", exception.getMessage());\n\n    // ranking doesn't use defType\n    exception = expectThrows(SolrException.class, () -> h.query(req(\"q\", \"*:*\", \"rq\", \"{!bleh}\")));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, exception.code());\n    assertEquals(\"invalid query parser 'bleh' for query '{!bleh}'\", exception.getMessage());\n\n    // with stats.field\n    exception = expectThrows(SolrException.class, () -> h.query(req(\"q\", \"*:*\", \"stats\", \"true\", \"stats.field\", \"{!bleh}\")));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, exception.code());\n    assertEquals(\"invalid query parser 'bleh' for query '{!bleh}'\", exception.getMessage());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73037b76a70b4cad490b616ea90220b3cc2a6fd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73037b76a70b4cad490b616ea90220b3cc2a6fd8"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73037b76a70b4cad490b616ea90220b3cc2a6fd8"],"73037b76a70b4cad490b616ea90220b3cc2a6fd8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}