{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractSqlEntityProcessorTestCase#withChildEntities(boolean,boolean).mjava","commits":[{"id":"b4804614e0358954d5d9f51128fcf3cd79e6e25b","date":1352831451,"type":1,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractSqlEntityProcessorTestCase#withChildEntities(boolean,boolean).mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHJdbcTestCase#withChildEntities(boolean,boolean).mjava","sourceNew":"  protected void withChildEntities(boolean cached, boolean checkDatabaseRequests)\n      throws Exception {\n    rootTransformerName = random().nextBoolean() ? null\n        : \"AddAColumnTransformer\";\n    int numChildren = random().nextInt(1) + 1;\n    int numDatabaseRequests = 1;\n    if (underlyingDataModified) {\n      if (countryEntity) {\n        if (cached) {\n          numDatabaseRequests++;\n        } else {\n          numDatabaseRequests += totalPeople();\n        }\n      }\n      if (sportsEntity) {\n        if (cached) {\n          numDatabaseRequests++;\n        } else {\n          numDatabaseRequests += totalPeople();\n        }\n      }\n    } else {\n      countryEntity = true;\n      sportsEntity = true;\n      if (numChildren == 1) {\n        countryEntity = random().nextBoolean();\n        sportsEntity = !countryEntity;\n      }\n      if (countryEntity) {\n        countryTransformer = random().nextBoolean();\n        if (cached) {\n          numDatabaseRequests++;\n          countryCached = true;\n        } else {\n          numDatabaseRequests += totalPeople();\n        }\n      }\n      if (sportsEntity) {\n        sportsTransformer = random().nextBoolean();\n        if (cached) {\n          numDatabaseRequests++;\n          sportsCached = true;\n        } else {\n          numDatabaseRequests += totalPeople();\n        }\n      }\n    }\n    h.query(\"/dataimport\", generateRequest());\n    \n    assertQ(\"There should be 1 document per person in the database: \"\n        + totalPeople(), req(\"*:*\"), \"//*[@numFound='\" + (totalPeople()) + \"']\");\n    if (!underlyingDataModified\n        && \"AddAColumnTransformer\".equals(rootTransformerName)) {\n      assertQ(\n          \"There should be 1 document with a transformer-added column per person is the database: \"\n              + totalPeople(), req(\"AddAColumn_s:Added\"), \"//*[@numFound='\"\n              + (totalPeople()) + \"']\");\n    }\n    if (countryEntity) {\n      if (personNameExists(\"Jayden\")) {\n        String nrName = countryNameByCode(\"NP\");\n        if (nrName != null && nrName.length() > 0) {\n          assertQ(req(\"NAME_mult_s:Jayden\"), \"//*[@numFound='1']\",\n              \"//doc/str[@name='COUNTRY_NAME_s']='\" + nrName + \"'\");\n        }\n      }\n      String nrName = countryNameByCode(\"NR\");\n      int num = numberPeopleByCountryCode(\"NR\");\n      if (nrName != null && num > 0) {\n        assertQ(req(\"COUNTRY_CODES_mult_s:NR\"), \"//*[@numFound='\" + num + \"']\",\n            \"//doc/str[@name='COUNTRY_NAME_s']='\" + nrName + \"'\");\n      }\n      if (countryTransformer && !underlyingDataModified) {\n        assertQ(req(\"countryAdded_s:country_added\"), \"//*[@numFound='\"\n            + totalPeople() + \"']\");\n      }\n    }\n    if (sportsEntity) {\n      if (!underlyingDataModified) {\n        assertQ(req(\"SPORT_NAME_mult_s:Sailing\"), \"//*[@numFound='2']\");\n      }\n      String michaelsName = personNameById(3);\n      String[] michaelsSports = sportNamesByPersonId(3);\n      if (michaelsName != null && michaelsSports.length > 0) {\n        String[] xpath = new String[michaelsSports.length + 1];\n        xpath[0] = \"//*[@numFound='1']\";\n        int i = 1;\n        for (String ms : michaelsSports) {\n          xpath[i] = \"//doc/arr[@name='SPORT_NAME_mult_s']/str[\" + i + \"]='\"\n              + ms + \"'\";\n          i++;\n        }\n        assertQ(req(\"NAME_mult_s:\" + michaelsName.replaceAll(\"\\\\W\", \"\\\\\\\\$0\")),\n            xpath);\n      }\n      if (!underlyingDataModified && sportsTransformer) {\n        assertQ(req(\"sportsAdded_s:sport_added\"), \"//*[@numFound='\"\n            + (totalPeople()) + \"']\");\n      }\n    }\n    if (checkDatabaseRequests) {\n      Assert.assertTrue(\"Expecting \" + numDatabaseRequests\n          + \" database calls, but DIH reported \" + totalDatabaseRequests(),\n          totalDatabaseRequests() == numDatabaseRequests);\n    }\n  }\n\n","sourceOld":"  protected void withChildEntities(boolean cached, boolean checkDatabaseRequests) throws Exception {\n    rootTransformerName = random().nextBoolean() ? null : \"AddAColumnTransformer\";\n    int numChildren = random().nextInt(1) + 1;\n    int numDatabaseRequests = 1;\n    if(underlyingDataModified) {\n      if (countryEntity) {\n        if (cached) {\n          numDatabaseRequests++;\n        } else {\n          numDatabaseRequests += totalPeople();\n        }\n      }\n      if (sportsEntity) {\n        if (cached) {\n          numDatabaseRequests++;\n        } else {\n          numDatabaseRequests += totalPeople();\n        }\n      }\n    } else {\n      countryEntity = true;\n      sportsEntity = true;\n      if(numChildren==1) {\n        countryEntity = random().nextBoolean();\n        sportsEntity = !countryEntity;      \n      }\n      if(countryEntity) {\n        countryTransformer = random().nextBoolean();\n        if(cached) {\n          numDatabaseRequests++;\n          countryCached = true;\n        } else {\n          numDatabaseRequests += totalPeople();\n        }\n      }\n      if(sportsEntity) {\n        sportsTransformer = random().nextBoolean();\n        if(cached) {\n          numDatabaseRequests++;\n          sportsCached = true;\n        } else {\n          numDatabaseRequests += totalPeople();\n        }\n      }\n    }\n    h.query(\"/dataimport\", generateRequest());\n    \n    assertQ(\"There should be 1 document per person in the database: \"\n        + totalPeople(), req(\"*:*\"), \"//*[@numFound='\" + (totalPeople()) + \"']\");\n    if(!underlyingDataModified && \"AddAColumnTransformer\".equals(rootTransformerName)) {\n      assertQ(\"There should be 1 document with a transformer-added column per person is the database: \"\n          + totalPeople(), req(\"AddAColumn_s:Added\"), \"//*[@numFound='\" + (totalPeople()) + \"']\");\n    }\n    if(countryEntity) {\n      if(personNameExists(\"Jayden\"))\n      {\n        String nrName = countryNameByCode(\"NP\");\n        if(nrName!=null && nrName.length()>0) {\n          assertQ(req(\"NAME_mult_s:Jayden\"), \n              \"//*[@numFound='1']\", \"//doc/str[@name='COUNTRY_NAME_s']='\" + nrName + \"'\");\n        }\n      }\n      String nrName = countryNameByCode(\"NR\");\n      int num = numberPeopleByCountryCode(\"NR\");\n      if(nrName!=null && num>0) { \n        assertQ(req(\"COUNTRY_CODES_mult_s:NR\"), \n            \"//*[@numFound='\" + num + \"']\", \"//doc/str[@name='COUNTRY_NAME_s']='\" + nrName + \"'\");        \n      }\n      if(countryTransformer && !underlyingDataModified) {\n        assertQ(req(\"countryAdded_s:country_added\"), \"//*[@numFound='\" + totalPeople() + \"']\");\n      }\n    }\n    if(sportsEntity) {\n      if(!underlyingDataModified) {\n        assertQ(req(\"SPORT_NAME_mult_s:Sailing\"), \"//*[@numFound='2']\");\n      }\n      String michaelsName = personNameById(3);\n      String[] michaelsSports = sportNamesByPersonId(3);\n      if(michaelsName != null && michaelsSports.length>0) { \n        String[] xpath = new String[michaelsSports.length + 1];\n        xpath[0] = \"//*[@numFound='1']\";\n        int i=1;\n        for(String ms : michaelsSports) {\n          xpath[i] = \"//doc/arr[@name='SPORT_NAME_mult_s']/str[\" + i + \"]='\" + ms + \"'\";\n          i++;\n        }\n        assertQ(req(\"NAME_mult_s:\" + michaelsName.replaceAll(\"\\\\W\", \"\\\\\\\\$0\")), xpath);\n      }\n      if (!underlyingDataModified && sportsTransformer) {\n        assertQ(req(\"sportsAdded_s:sport_added\"), \"//*[@numFound='\" + (totalPeople()) + \"']\");\n      }\n    }    \n    if(checkDatabaseRequests) {\n      Assert.assertTrue(\"Expecting \" + numDatabaseRequests\n          + \" database calls, but DIH reported \" + totalDatabaseRequests(),\n          totalDatabaseRequests() == numDatabaseRequests);\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractSqlEntityProcessorTestCase#withChildEntities(boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected void withChildEntities(boolean cached, boolean checkDatabaseRequests)\n      throws Exception {\n    rootTransformerName = random().nextBoolean() ? null\n        : \"AddAColumnTransformer\";\n    int numChildren = random().nextInt(1) + 1;\n    int numDatabaseRequests = 1;\n    if (underlyingDataModified) {\n      if (countryEntity) {\n        if (cached) {\n          numDatabaseRequests++;\n        } else {\n          numDatabaseRequests += totalPeople();\n        }\n      }\n      if (sportsEntity) {\n        if (cached) {\n          numDatabaseRequests++;\n        } else {\n          numDatabaseRequests += totalPeople();\n        }\n      }\n    } else {\n      countryEntity = true;\n      sportsEntity = true;\n      if (numChildren == 1) {\n        countryEntity = random().nextBoolean();\n        sportsEntity = !countryEntity;\n      }\n      if (countryEntity) {\n        countryTransformer = random().nextBoolean();\n        if (cached) {\n          numDatabaseRequests++;\n          countryCached = true;\n        } else {\n          numDatabaseRequests += totalPeople();\n        }\n      }\n      if (sportsEntity) {\n        sportsTransformer = random().nextBoolean();\n        if (cached) {\n          numDatabaseRequests++;\n          sportsCached = true;\n        } else {\n          numDatabaseRequests += totalPeople();\n        }\n      }\n    }\n    h.query(\"/dataimport\", generateRequest());\n    \n    assertQ(\"There should be 1 document per person in the database: \"\n        + totalPeople(), req(\"*:*\"), \"//*[@numFound='\" + (totalPeople()) + \"']\");\n    if (!underlyingDataModified\n        && \"AddAColumnTransformer\".equals(rootTransformerName)) {\n      assertQ(\n          \"There should be 1 document with a transformer-added column per person is the database: \"\n              + totalPeople(), req(\"AddAColumn_s:Added\"), \"//*[@numFound='\"\n              + (totalPeople()) + \"']\");\n    }\n    if (countryEntity) {\n      if (personNameExists(\"Jayden\")) {\n        String nrName = countryNameByCode(\"NP\");\n        if (nrName != null && nrName.length() > 0) {\n          assertQ(req(\"NAME_mult_s:Jayden\"), \"//*[@numFound='1']\",\n              \"//doc/str[@name='COUNTRY_NAME_s']='\" + nrName + \"'\");\n        }\n      }\n      String nrName = countryNameByCode(\"NR\");\n      int num = numberPeopleByCountryCode(\"NR\");\n      if (nrName != null && num > 0) {\n        assertQ(req(\"COUNTRY_CODES_mult_s:NR\"), \"//*[@numFound='\" + num + \"']\",\n            \"//doc/str[@name='COUNTRY_NAME_s']='\" + nrName + \"'\");\n      }\n      if (countryTransformer && !underlyingDataModified) {\n        assertQ(req(\"countryAdded_s:country_added\"), \"//*[@numFound='\"\n            + totalPeople() + \"']\");\n      }\n    }\n    if (sportsEntity) {\n      if (!underlyingDataModified) {\n        assertQ(req(\"SPORT_NAME_mult_s:Sailing\"), \"//*[@numFound='2']\");\n      }\n      String michaelsName = personNameById(3);\n      String[] michaelsSports = sportNamesByPersonId(3);\n      if (michaelsName != null && michaelsSports.length > 0) {\n        String[] xpath = new String[michaelsSports.length + 1];\n        xpath[0] = \"//*[@numFound='1']\";\n        int i = 1;\n        for (String ms : michaelsSports) {\n          xpath[i] = \"//doc/arr[@name='SPORT_NAME_mult_s']/str[\" + i + \"]='\"\n              + ms + \"'\";\n          i++;\n        }\n        assertQ(req(\"NAME_mult_s:\" + michaelsName.replaceAll(\"\\\\W\", \"\\\\\\\\$0\")),\n            xpath);\n      }\n      if (!underlyingDataModified && sportsTransformer) {\n        assertQ(req(\"sportsAdded_s:sport_added\"), \"//*[@numFound='\"\n            + (totalPeople()) + \"']\");\n      }\n    }\n    if (checkDatabaseRequests) {\n      Assert.assertTrue(\"Expecting \" + numDatabaseRequests\n          + \" database calls, but DIH reported \" + totalDatabaseRequests(),\n          totalDatabaseRequests() == numDatabaseRequests);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ae7b4adfa274da5f5fdc865e127928b25e5e929","date":1417607786,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractSqlEntityProcessorTestCase#withChildEntities(boolean,boolean).mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractSqlEntityProcessorTestCase#withChildEntities(boolean,boolean).mjava","sourceNew":"  protected void withChildEntities(boolean cached, boolean checkDatabaseRequests)\n      throws Exception {\n    rootTransformerName = random().nextBoolean() ? null\n        : \"AddAColumnTransformer\";\n    int numChildren = random().nextInt(1) + 1;\n    int numDatabaseRequests = 1;\n    if (underlyingDataModified) {\n      if (countryEntity) {\n        if (cached) {\n          numDatabaseRequests++;\n        } else {\n          numDatabaseRequests += totalPeople();\n        }\n      }\n      if (sportsEntity) {\n        if (cached) {\n          numDatabaseRequests++;\n        } else {\n          numDatabaseRequests += totalPeople();\n        }\n      }\n    } else {\n      countryEntity = true;\n      sportsEntity = true;\n      if(countryZipper||sportsZipper){// zipper tests fully cover nums of children\n        countryEntity = countryZipper;\n        sportsEntity = sportsZipper;\n      }else{// apply default randomization on cached cases\n        if (numChildren == 1) {\n          countryEntity = random().nextBoolean();\n          sportsEntity = !countryEntity;\n        }\n      }\n      if (countryEntity) {\n        countryTransformer = random().nextBoolean();\n        if (cached) {\n          numDatabaseRequests++;\n          countryCached = true;\n        } else {\n          numDatabaseRequests += totalPeople();\n        }\n      }\n      if (sportsEntity) {\n        sportsTransformer = random().nextBoolean();\n        if (cached) {\n          numDatabaseRequests++;\n          sportsCached = true;\n        } else {\n          numDatabaseRequests += totalPeople();\n        }\n      }\n    }\n    h.query(\"/dataimport\", generateRequest());\n    \n    assertQ(\"There should be 1 document per person in the database: \"\n        + totalPeople(), req(\"*:*\"), \"//*[@numFound='\" + (totalPeople()) + \"']\");\n    if (!underlyingDataModified\n        && \"AddAColumnTransformer\".equals(rootTransformerName)) {\n      assertQ(\n          \"There should be 1 document with a transformer-added column per person is the database: \"\n              + totalPeople(), req(\"AddAColumn_s:Added\"), \"//*[@numFound='\"\n              + (totalPeople()) + \"']\");\n    }\n    if (countryEntity) {\n      {\n        String[] people = getStringsFromQuery(\"SELECT NAME FROM PEOPLE WHERE DELETED != 'Y'\");\n        String man = people[random().nextInt(people.length)];\n        String[] countryNames = getStringsFromQuery(\"SELECT C.COUNTRY_NAME FROM PEOPLE P \"\n            + \"INNER JOIN COUNTRIES C ON P.COUNTRY_CODE=C.CODE \"\n            + \"WHERE P.DELETED!='Y' AND C.DELETED!='Y' AND P.NAME='\" + man + \"'\");\n\n        assertQ(req(\"{!term f=NAME_mult_s}\"+ man), \"//*[@numFound='1']\",\n            countryNames.length>0?\n             \"//doc/str[@name='COUNTRY_NAME_s']='\" + countryNames[random().nextInt(countryNames.length)] + \"'\"\n            :\"//doc[count(*[@name='COUNTRY_NAME_s'])=0]\");\n      }\n      {\n        String[] countryCodes = getStringsFromQuery(\"SELECT CODE FROM COUNTRIES WHERE DELETED != 'Y'\");\n        String theCode = countryCodes[random().nextInt(countryCodes.length)];\n        int num = numberPeopleByCountryCode(theCode);\n        if(num>0){\n          String nrName = countryNameByCode(theCode);\n          assertQ(req(\"COUNTRY_CODES_mult_s:\"+theCode), \"//*[@numFound='\" + num + \"']\",\n              \"//doc/str[@name='COUNTRY_NAME_s']='\" + nrName + \"'\");\n        }else{ // no one lives there anyway\n          assertQ(req(\"COUNTRY_CODES_mult_s:\"+theCode), \"//*[@numFound='\" + num + \"']\");\n        }\n      }\n      if (countryTransformer && !underlyingDataModified) {\n        assertQ(req(\"countryAdded_s:country_added\"), \"//*[@numFound='\"\n            + totalPeople() + \"']\");\n      }\n    }\n    if (sportsEntity) {\n      if (!underlyingDataModified) {\n        assertQ(req(\"SPORT_NAME_mult_s:Sailing\"), \"//*[@numFound='2']\");\n      }\n      String [] names = getStringsFromQuery(\"SELECT NAME FROM PEOPLE WHERE DELETED != 'Y'\");\n      String name = names[random().nextInt(names.length)];\n      int personId = getIntFromQuery(\"SELECT ID FROM PEOPLE WHERE DELETED != 'Y' AND NAME='\"+name+\"'\");\n      String[] michaelsSports = sportNamesByPersonId(personId);\n\n      String[] xpath = new String[michaelsSports.length + 1];\n      xpath[0] = \"//*[@numFound='1']\";\n      int i = 1;\n      for (String ms : michaelsSports) {\n        xpath[i] = \"//doc/arr[@name='SPORT_NAME_mult_s']/str='\"//[\" + i + \"]='\" don't care about particular order\n            + ms + \"'\";\n        i++;\n      }\n      assertQ(req(\"NAME_mult_s:\" + name.replaceAll(\"\\\\W\", \"\\\\\\\\$0\")),\n            xpath);\n      if (!underlyingDataModified && sportsTransformer) {\n        assertQ(req(\"sportsAdded_s:sport_added\"), \"//*[@numFound='\"\n            + (totalSportsmen()) + \"']\");\n      }\n      assertQ(\"checking orphan sport is absent\",\n          req(\"{!term f=SPORT_NAME_mult_s}No Fishing\"), \"//*[@numFound='0']\");\n    }\n    if (checkDatabaseRequests) {\n      Assert.assertTrue(\"Expecting \" + numDatabaseRequests\n          + \" database calls, but DIH reported \" + totalDatabaseRequests(),\n          totalDatabaseRequests() == numDatabaseRequests);\n    }\n  }\n\n","sourceOld":"  protected void withChildEntities(boolean cached, boolean checkDatabaseRequests)\n      throws Exception {\n    rootTransformerName = random().nextBoolean() ? null\n        : \"AddAColumnTransformer\";\n    int numChildren = random().nextInt(1) + 1;\n    int numDatabaseRequests = 1;\n    if (underlyingDataModified) {\n      if (countryEntity) {\n        if (cached) {\n          numDatabaseRequests++;\n        } else {\n          numDatabaseRequests += totalPeople();\n        }\n      }\n      if (sportsEntity) {\n        if (cached) {\n          numDatabaseRequests++;\n        } else {\n          numDatabaseRequests += totalPeople();\n        }\n      }\n    } else {\n      countryEntity = true;\n      sportsEntity = true;\n      if (numChildren == 1) {\n        countryEntity = random().nextBoolean();\n        sportsEntity = !countryEntity;\n      }\n      if (countryEntity) {\n        countryTransformer = random().nextBoolean();\n        if (cached) {\n          numDatabaseRequests++;\n          countryCached = true;\n        } else {\n          numDatabaseRequests += totalPeople();\n        }\n      }\n      if (sportsEntity) {\n        sportsTransformer = random().nextBoolean();\n        if (cached) {\n          numDatabaseRequests++;\n          sportsCached = true;\n        } else {\n          numDatabaseRequests += totalPeople();\n        }\n      }\n    }\n    h.query(\"/dataimport\", generateRequest());\n    \n    assertQ(\"There should be 1 document per person in the database: \"\n        + totalPeople(), req(\"*:*\"), \"//*[@numFound='\" + (totalPeople()) + \"']\");\n    if (!underlyingDataModified\n        && \"AddAColumnTransformer\".equals(rootTransformerName)) {\n      assertQ(\n          \"There should be 1 document with a transformer-added column per person is the database: \"\n              + totalPeople(), req(\"AddAColumn_s:Added\"), \"//*[@numFound='\"\n              + (totalPeople()) + \"']\");\n    }\n    if (countryEntity) {\n      if (personNameExists(\"Jayden\")) {\n        String nrName = countryNameByCode(\"NP\");\n        if (nrName != null && nrName.length() > 0) {\n          assertQ(req(\"NAME_mult_s:Jayden\"), \"//*[@numFound='1']\",\n              \"//doc/str[@name='COUNTRY_NAME_s']='\" + nrName + \"'\");\n        }\n      }\n      String nrName = countryNameByCode(\"NR\");\n      int num = numberPeopleByCountryCode(\"NR\");\n      if (nrName != null && num > 0) {\n        assertQ(req(\"COUNTRY_CODES_mult_s:NR\"), \"//*[@numFound='\" + num + \"']\",\n            \"//doc/str[@name='COUNTRY_NAME_s']='\" + nrName + \"'\");\n      }\n      if (countryTransformer && !underlyingDataModified) {\n        assertQ(req(\"countryAdded_s:country_added\"), \"//*[@numFound='\"\n            + totalPeople() + \"']\");\n      }\n    }\n    if (sportsEntity) {\n      if (!underlyingDataModified) {\n        assertQ(req(\"SPORT_NAME_mult_s:Sailing\"), \"//*[@numFound='2']\");\n      }\n      String michaelsName = personNameById(3);\n      String[] michaelsSports = sportNamesByPersonId(3);\n      if (michaelsName != null && michaelsSports.length > 0) {\n        String[] xpath = new String[michaelsSports.length + 1];\n        xpath[0] = \"//*[@numFound='1']\";\n        int i = 1;\n        for (String ms : michaelsSports) {\n          xpath[i] = \"//doc/arr[@name='SPORT_NAME_mult_s']/str[\" + i + \"]='\"\n              + ms + \"'\";\n          i++;\n        }\n        assertQ(req(\"NAME_mult_s:\" + michaelsName.replaceAll(\"\\\\W\", \"\\\\\\\\$0\")),\n            xpath);\n      }\n      if (!underlyingDataModified && sportsTransformer) {\n        assertQ(req(\"sportsAdded_s:sport_added\"), \"//*[@numFound='\"\n            + (totalPeople()) + \"']\");\n      }\n    }\n    if (checkDatabaseRequests) {\n      Assert.assertTrue(\"Expecting \" + numDatabaseRequests\n          + \" database calls, but DIH reported \" + totalDatabaseRequests(),\n          totalDatabaseRequests() == numDatabaseRequests);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractSqlEntityProcessorTestCase#withChildEntities(boolean,boolean).mjava","sourceNew":null,"sourceOld":"  protected void withChildEntities(boolean cached, boolean checkDatabaseRequests)\n      throws Exception {\n    rootTransformerName = random().nextBoolean() ? null\n        : \"AddAColumnTransformer\";\n    int numChildren = random().nextInt(1) + 1;\n    int numDatabaseRequests = 1;\n    if (underlyingDataModified) {\n      if (countryEntity) {\n        if (cached) {\n          numDatabaseRequests++;\n        } else {\n          numDatabaseRequests += totalPeople();\n        }\n      }\n      if (sportsEntity) {\n        if (cached) {\n          numDatabaseRequests++;\n        } else {\n          numDatabaseRequests += totalPeople();\n        }\n      }\n    } else {\n      countryEntity = true;\n      sportsEntity = true;\n      if(countryZipper||sportsZipper){// zipper tests fully cover nums of children\n        countryEntity = countryZipper;\n        sportsEntity = sportsZipper;\n      }else{// apply default randomization on cached cases\n        if (numChildren == 1) {\n          countryEntity = random().nextBoolean();\n          sportsEntity = !countryEntity;\n        }\n      }\n      if (countryEntity) {\n        countryTransformer = random().nextBoolean();\n        if (cached) {\n          numDatabaseRequests++;\n          countryCached = true;\n        } else {\n          numDatabaseRequests += totalPeople();\n        }\n      }\n      if (sportsEntity) {\n        sportsTransformer = random().nextBoolean();\n        if (cached) {\n          numDatabaseRequests++;\n          sportsCached = true;\n        } else {\n          numDatabaseRequests += totalPeople();\n        }\n      }\n    }\n    h.query(\"/dataimport\", generateRequest());\n    \n    assertQ(\"There should be 1 document per person in the database: \"\n        + totalPeople(), req(\"*:*\"), \"//*[@numFound='\" + (totalPeople()) + \"']\");\n    if (!underlyingDataModified\n        && \"AddAColumnTransformer\".equals(rootTransformerName)) {\n      assertQ(\n          \"There should be 1 document with a transformer-added column per person is the database: \"\n              + totalPeople(), req(\"AddAColumn_s:Added\"), \"//*[@numFound='\"\n              + (totalPeople()) + \"']\");\n    }\n    if (countryEntity) {\n      {\n        String[] people = getStringsFromQuery(\"SELECT NAME FROM PEOPLE WHERE DELETED != 'Y'\");\n        String man = people[random().nextInt(people.length)];\n        String[] countryNames = getStringsFromQuery(\"SELECT C.COUNTRY_NAME FROM PEOPLE P \"\n            + \"INNER JOIN COUNTRIES C ON P.COUNTRY_CODE=C.CODE \"\n            + \"WHERE P.DELETED!='Y' AND C.DELETED!='Y' AND P.NAME='\" + man + \"'\");\n\n        assertQ(req(\"{!term f=NAME_mult_s}\"+ man), \"//*[@numFound='1']\",\n            countryNames.length>0?\n             \"//doc/str[@name='COUNTRY_NAME_s']='\" + countryNames[random().nextInt(countryNames.length)] + \"'\"\n            :\"//doc[count(*[@name='COUNTRY_NAME_s'])=0]\");\n      }\n      {\n        String[] countryCodes = getStringsFromQuery(\"SELECT CODE FROM COUNTRIES WHERE DELETED != 'Y'\");\n        String theCode = countryCodes[random().nextInt(countryCodes.length)];\n        int num = numberPeopleByCountryCode(theCode);\n        if(num>0){\n          String nrName = countryNameByCode(theCode);\n          assertQ(req(\"COUNTRY_CODES_mult_s:\"+theCode), \"//*[@numFound='\" + num + \"']\",\n              \"//doc/str[@name='COUNTRY_NAME_s']='\" + nrName + \"'\");\n        }else{ // no one lives there anyway\n          assertQ(req(\"COUNTRY_CODES_mult_s:\"+theCode), \"//*[@numFound='\" + num + \"']\");\n        }\n      }\n      if (countryTransformer && !underlyingDataModified) {\n        assertQ(req(\"countryAdded_s:country_added\"), \"//*[@numFound='\"\n            + totalPeople() + \"']\");\n      }\n    }\n    if (sportsEntity) {\n      if (!underlyingDataModified) {\n        assertQ(req(\"SPORT_NAME_mult_s:Sailing\"), \"//*[@numFound='2']\");\n      }\n      String [] names = getStringsFromQuery(\"SELECT NAME FROM PEOPLE WHERE DELETED != 'Y'\");\n      String name = names[random().nextInt(names.length)];\n      int personId = getIntFromQuery(\"SELECT ID FROM PEOPLE WHERE DELETED != 'Y' AND NAME='\"+name+\"'\");\n      String[] michaelsSports = sportNamesByPersonId(personId);\n\n      String[] xpath = new String[michaelsSports.length + 1];\n      xpath[0] = \"//*[@numFound='1']\";\n      int i = 1;\n      for (String ms : michaelsSports) {\n        xpath[i] = \"//doc/arr[@name='SPORT_NAME_mult_s']/str='\"//[\" + i + \"]='\" don't care about particular order\n            + ms + \"'\";\n        i++;\n      }\n      assertQ(req(\"NAME_mult_s:\" + name.replaceAll(\"\\\\W\", \"\\\\\\\\$0\")),\n            xpath);\n      if (!underlyingDataModified && sportsTransformer) {\n        assertQ(req(\"sportsAdded_s:sport_added\"), \"//*[@numFound='\"\n            + (totalSportsmen()) + \"']\");\n      }\n      assertQ(\"checking orphan sport is absent\",\n          req(\"{!term f=SPORT_NAME_mult_s}No Fishing\"), \"//*[@numFound='0']\");\n    }\n    if (checkDatabaseRequests) {\n      Assert.assertTrue(\"Expecting \" + numDatabaseRequests\n          + \" database calls, but DIH reported \" + totalDatabaseRequests(),\n          totalDatabaseRequests() == numDatabaseRequests);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ae7b4adfa274da5f5fdc865e127928b25e5e929":["b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["4ae7b4adfa274da5f5fdc865e127928b25e5e929"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"4ae7b4adfa274da5f5fdc865e127928b25e5e929":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["4ae7b4adfa274da5f5fdc865e127928b25e5e929","407687e67faf6e1f02a211ca078d8e3eed631027"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4804614e0358954d5d9f51128fcf3cd79e6e25b","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}