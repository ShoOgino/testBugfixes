{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.FacetRangeParser#parse(Object).mjava","commits":[{"id":"248f6ecc900c3a5633fd5ca6f564ea8b717720da","date":1588863846,"type":0,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.FacetRangeParser#parse(Object).mjava","pathOld":"/dev/null","sourceNew":"    public FacetRange parse(Object arg) throws SyntaxError {\n      parseCommonParams(arg);\n\n      if (!(arg instanceof Map)) {\n        throw err(\"Missing range facet arguments\");\n      }\n\n      Map<String, Object> m = (Map<String, Object>) arg;\n\n      facet.field = getString(m, \"field\", null);\n      facet.ranges = getVal(m, \"ranges\", false);\n\n      boolean required = facet.ranges == null;\n      facet.start = getVal(m, \"start\", required);\n      facet.end = getVal(m, \"end\", required);\n      facet.gap = getVal(m, \"gap\", required);\n      facet.hardend = getBoolean(m, \"hardend\", facet.hardend);\n      facet.mincount = getLong(m, \"mincount\", 0);\n\n      // TODO: refactor list-of-options code\n\n      List<String> list = getStringList(m, \"include\", false);\n      String[] includeList = null;\n      if (list != null) {\n        includeList = list.toArray(new String[list.size()]);\n      }\n      facet.include = FacetParams.FacetRangeInclude.parseParam( includeList );\n      facet.others = EnumSet.noneOf(FacetParams.FacetRangeOther.class);\n\n      List<String> other = getStringList(m, \"other\", false);\n      if (other != null) {\n        for (String otherStr : other) {\n          facet.others.add( FacetParams.FacetRangeOther.get(otherStr) );\n        }\n      }\n\n      Object facetObj = m.get(\"facet\");\n      parseSubs(facetObj);\n\n      return facet;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.FacetRangeParser#parse(Object).mjava","sourceNew":null,"sourceOld":"    public FacetRange parse(Object arg) throws SyntaxError {\n      parseCommonParams(arg);\n\n      if (!(arg instanceof Map)) {\n        throw err(\"Missing range facet arguments\");\n      }\n\n      Map<String, Object> m = (Map<String, Object>) arg;\n\n      facet.field = getString(m, \"field\", null);\n      facet.ranges = getVal(m, \"ranges\", false);\n\n      boolean required = facet.ranges == null;\n      facet.start = getVal(m, \"start\", required);\n      facet.end = getVal(m, \"end\", required);\n      facet.gap = getVal(m, \"gap\", required);\n      facet.hardend = getBoolean(m, \"hardend\", facet.hardend);\n      facet.mincount = getLong(m, \"mincount\", 0);\n\n      // TODO: refactor list-of-options code\n\n      List<String> list = getStringList(m, \"include\", false);\n      String[] includeList = null;\n      if (list != null) {\n        includeList = list.toArray(new String[list.size()]);\n      }\n      facet.include = FacetParams.FacetRangeInclude.parseParam( includeList );\n      facet.others = EnumSet.noneOf(FacetParams.FacetRangeOther.class);\n\n      List<String> other = getStringList(m, \"other\", false);\n      if (other != null) {\n        for (String otherStr : other) {\n          facet.others.add( FacetParams.FacetRangeOther.get(otherStr) );\n        }\n      }\n\n      Object facetObj = m.get(\"facet\");\n      parseSubs(facetObj);\n\n      return facet;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"]},"commit2Childs":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}