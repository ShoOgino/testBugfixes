{"path":"solr/core/src/java/org/apache/solr/core/BlobRepository#[T]_getBlobIncRef(String,Callable[BlobContent[T]]).mjava","commits":[{"id":"5fab1d180f47e9924e0e56501b42034b3476f2b1","date":1460974879,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#[T]_getBlobIncRef(String,Callable[BlobContent[T]]).mjava","pathOld":"/dev/null","sourceNew":"  // do the actual work returning the appropriate type...\n  private <T> BlobContentRef<T> getBlobIncRef(String key, Callable<BlobContent<T>> blobCreator) {\n    BlobContent<T> aBlob;\n    if (this.coreContainer.isZooKeeperAware()) {\n      synchronized (blobs) {\n        aBlob = blobs.get(key);\n        if (aBlob == null) {\n          try {\n            aBlob = blobCreator.call();\n          } catch (Exception e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Blob loading failed: \"+e.getMessage(), e);\n          }\n        }\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Blob loading is not supported in non-cloud mode\");\n      // todo\n    }\n    BlobContentRef<T> ref = new BlobContentRef<>(aBlob);\n    synchronized (aBlob.references) {\n      aBlob.references.add(ref);\n    }\n    return ref;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#[T]_getBlobIncRef(String,Callable[BlobContent[T]]).mjava","pathOld":"/dev/null","sourceNew":"  // do the actual work returning the appropriate type...\n  private <T> BlobContentRef<T> getBlobIncRef(String key, Callable<BlobContent<T>> blobCreator) {\n    BlobContent<T> aBlob;\n    if (this.coreContainer.isZooKeeperAware()) {\n      synchronized (blobs) {\n        aBlob = blobs.get(key);\n        if (aBlob == null) {\n          try {\n            aBlob = blobCreator.call();\n          } catch (Exception e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Blob loading failed: \"+e.getMessage(), e);\n          }\n        }\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Blob loading is not supported in non-cloud mode\");\n      // todo\n    }\n    BlobContentRef<T> ref = new BlobContentRef<>(aBlob);\n    synchronized (aBlob.references) {\n      aBlob.references.add(ref);\n    }\n    return ref;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#[T]_getBlobIncRef(String,Callable[BlobContent[T]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#[T]_getBlobIncRef(String,Callable[BlobContent[T]]).mjava","sourceNew":"  // do the actual work returning the appropriate type...\n  private <T> BlobContentRef<T> getBlobIncRef(String key, Callable<BlobContent<T>> blobCreator) {\n    BlobContent<T> aBlob;\n    if (this.coreContainer.isZooKeeperAware()) {\n      synchronized (blobs) {\n        aBlob = blobs.get(key);\n        if (aBlob == null) {\n          try {\n            aBlob = blobCreator.call();\n          } catch (Exception e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Blob loading failed: \" + e.getMessage(), e);\n          }\n        }\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Blob loading is not supported in non-cloud mode\");\n      // todo\n    }\n    BlobContentRef<T> ref = new BlobContentRef<>(aBlob);\n    synchronized (aBlob.references) {\n      aBlob.references.add(ref);\n    }\n    return ref;\n  }\n\n","sourceOld":"  // do the actual work returning the appropriate type...\n  private <T> BlobContentRef<T> getBlobIncRef(String key, Callable<BlobContent<T>> blobCreator) {\n    BlobContent<T> aBlob;\n    if (this.coreContainer.isZooKeeperAware()) {\n      synchronized (blobs) {\n        aBlob = blobs.get(key);\n        if (aBlob == null) {\n          try {\n            aBlob = blobCreator.call();\n          } catch (Exception e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Blob loading failed: \"+e.getMessage(), e);\n          }\n        }\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Blob loading is not supported in non-cloud mode\");\n      // todo\n    }\n    BlobContentRef<T> ref = new BlobContentRef<>(aBlob);\n    synchronized (aBlob.references) {\n      aBlob.references.add(ref);\n    }\n    return ref;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#[T]_getBlobIncRef(String,Callable[BlobContent[T]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#[T]_getBlobIncRef(String,Callable[BlobContent[T]]).mjava","sourceNew":"  // do the actual work returning the appropriate type...\n  @SuppressWarnings({\"unchecked\"})\n  private <T> BlobContentRef<T> getBlobIncRef(String key, Callable<BlobContent<T>> blobCreator) {\n    BlobContent<T> aBlob;\n    if (this.coreContainer.isZooKeeperAware()) {\n      synchronized (blobs) {\n        aBlob = blobs.get(key);\n        if (aBlob == null) {\n          try {\n            aBlob = blobCreator.call();\n          } catch (Exception e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Blob loading failed: \" + e.getMessage(), e);\n          }\n        }\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Blob loading is not supported in non-cloud mode\");\n      // todo\n    }\n    BlobContentRef<T> ref = new BlobContentRef<>(aBlob);\n    synchronized (aBlob.references) {\n      aBlob.references.add(ref);\n    }\n    return ref;\n  }\n\n","sourceOld":"  // do the actual work returning the appropriate type...\n  private <T> BlobContentRef<T> getBlobIncRef(String key, Callable<BlobContent<T>> blobCreator) {\n    BlobContent<T> aBlob;\n    if (this.coreContainer.isZooKeeperAware()) {\n      synchronized (blobs) {\n        aBlob = blobs.get(key);\n        if (aBlob == null) {\n          try {\n            aBlob = blobCreator.call();\n          } catch (Exception e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Blob loading failed: \" + e.getMessage(), e);\n          }\n        }\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Blob loading is not supported in non-cloud mode\");\n      // todo\n    }\n    BlobContentRef<T> ref = new BlobContentRef<>(aBlob);\n    synchronized (aBlob.references) {\n      aBlob.references.add(ref);\n    }\n    return ref;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75237075d8425856bf4bbf52a6be4f9162b8187d":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["713122036535651642e6d4fe57ce12b449e18473"],"713122036535651642e6d4fe57ce12b449e18473":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5fab1d180f47e9924e0e56501b42034b3476f2b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75237075d8425856bf4bbf52a6be4f9162b8187d"]},"commit2Childs":{"75237075d8425856bf4bbf52a6be4f9162b8187d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"713122036535651642e6d4fe57ce12b449e18473":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["713122036535651642e6d4fe57ce12b449e18473","5fab1d180f47e9924e0e56501b42034b3476f2b1"],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["713122036535651642e6d4fe57ce12b449e18473"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}