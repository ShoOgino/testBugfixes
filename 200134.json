{"path":"backwards/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testMergeAfterCopy().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testMergeAfterCopy().mjava","pathOld":"/dev/null","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(dir, false);\n    writer.setMaxBufferedDocs(4);\n    writer.setMergeFactor(4);\n\n    writer.addIndexesNoOptimize(new Directory[] { aux, new RAMDirectory(aux) });\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 1020);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testMergeAfterCopy().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testMergeAfterCopy().mjava","sourceNew":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(dir, false);\n    writer.setMaxBufferedDocs(4);\n    writer.setMergeFactor(4);\n\n    writer.addIndexesNoOptimize(new Directory[] { aux, new RAMDirectory(aux) });\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 1020);\n  }\n\n","sourceOld":"  // case 4: tail segments, invariants hold, copy, invariants not hold\n  public void testMergeAfterCopy() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexReader reader = IndexReader.open(aux, false);\n    for (int i = 0; i < 20; i++) {\n      reader.deleteDocument(i);\n    }\n    assertEquals(10, reader.numDocs());\n    reader.close();\n\n    IndexWriter writer = newWriter(dir, false);\n    writer.setMaxBufferedDocs(4);\n    writer.setMergeFactor(4);\n\n    writer.addIndexesNoOptimize(new Directory[] { aux, new RAMDirectory(aux) });\n    assertEquals(1020, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 1020);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}