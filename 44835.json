{"path":"solr/core/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = BytesRef.deepCopyOf(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = new BytesRef(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"665d31bc0a447d133271ce49d66e9a4ee16f353b","date":1346933501,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = BytesRef.deepCopyOf(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getAtomicReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = BytesRef.deepCopyOf(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        // deState.termsEnum = te.tenum;\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","bugFix":["f8f944ac3fe3f9d40d825177507fb381d2b106b3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = BytesRef.deepCopyOf(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getAtomicReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = BytesRef.deepCopyOf(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getAtomicReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = BytesRef.deepCopyOf(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getAtomicReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = BytesRef.deepCopyOf(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getAtomicReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = BytesRef.deepCopyOf(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getLeafReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = BytesRef.deepCopyOf(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getAtomicReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = BytesRef.deepCopyOf(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getLeafReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.postingsEnum = postingsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      postingsEnum = deState.postingsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = BytesRef.deepCopyOf(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getLeafReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.docsEnum = docsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      docsEnum = deState.docsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = BytesRef.deepCopyOf(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getLeafReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.postingsEnum = postingsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      postingsEnum = deState.postingsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = BytesRef.deepCopyOf(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getLeafReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.postingsEnum = postingsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      postingsEnum = deState.postingsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = BytesRef.deepCopyOf(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getLeafReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.postingsEnum = postingsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      postingsEnum = deState.postingsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"665d31bc0a447d133271ce49d66e9a4ee16f353b":["e6e919043fa85ee891123768dd655a98edbbf63c"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["665d31bc0a447d133271ce49d66e9a4ee16f353b","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["665d31bc0a447d133271ce49d66e9a4ee16f353b"],"51f5280f31484820499077f41fcdfe92d527d9dc":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["51f5280f31484820499077f41fcdfe92d527d9dc","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6e919043fa85ee891123768dd655a98edbbf63c":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"]},"commit2Childs":{"665d31bc0a447d133271ce49d66e9a4ee16f353b":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c26f00b574427b55127e869b935845554afde1fa":["e6e919043fa85ee891123768dd655a98edbbf63c"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"51f5280f31484820499077f41fcdfe92d527d9dc":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"e6e919043fa85ee891123768dd655a98edbbf63c":["665d31bc0a447d133271ce49d66e9a4ee16f353b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}