{"path":"lucene/src/java/org/apache/lucene/util/OpenBitSet#OpenBitSet(long[],int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/OpenBitSet#OpenBitSet(long[],int).mjava","pathOld":"src/java/org/apache/lucene/util/OpenBitSet#OpenBitSet(long[],int).mjava","sourceNew":"  /** Constructs an OpenBitSet from an existing long[].\n   * <br/>\n   * The first 64 bits are in long[0],\n   * with bit index 0 at the least significant bit, and bit index 63 at the most significant.\n   * Given a bit index,\n   * the word containing it is long[index/64], and it is at bit number index%64 within that word.\n   * <p>\n   * numWords are the number of elements in the array that contain\n   * set bits (non-zero longs).\n   * numWords should be &lt= bits.length, and\n   * any existing words in the array at position &gt= numWords should be zero.\n   *\n   */\n  public OpenBitSet(long[] bits, int numWords) {\n    this.bits = bits;\n    this.wlen = numWords;\n  }\n\n","sourceOld":"  /** Constructs an OpenBitSet from an existing long[].\n   * <br/>\n   * The first 64 bits are in long[0],\n   * with bit index 0 at the least significant bit, and bit index 63 at the most significant.\n   * Given a bit index,\n   * the word containing it is long[index/64], and it is at bit number index%64 within that word.\n   * <p>\n   * numWords are the number of elements in the array that contain\n   * set bits (non-zero longs).\n   * numWords should be &lt= bits.length, and\n   * any existing words in the array at position &gt= numWords should be zero.\n   *\n   */\n  public OpenBitSet(long[] bits, int numWords) {\n    this.bits = bits;\n    this.wlen = numWords;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a59af0bca17674999c8756b4d68dcbf25a88a3b2","date":1306257838,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/OpenBitSet#OpenBitSet(long[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/OpenBitSet#OpenBitSet(long[],int).mjava","sourceNew":"  /** Constructs an OpenBitSet from an existing long[].\n   * <br/>\n   * The first 64 bits are in long[0],\n   * with bit index 0 at the least significant bit, and bit index 63 at the most significant.\n   * Given a bit index,\n   * the word containing it is long[index/64], and it is at bit number index%64 within that word.\n   * <p>\n   * numWords are the number of elements in the array that contain\n   * set bits (non-zero longs).\n   * numWords should be &lt= bits.length, and\n   * any existing words in the array at position &gt= numWords should be zero.\n   *\n   */\n  public OpenBitSet(long[] bits, int numWords) {\n    this.bits = bits;\n    this.wlen = numWords;\n    this.numBits = wlen * 64;\n  }\n\n","sourceOld":"  /** Constructs an OpenBitSet from an existing long[].\n   * <br/>\n   * The first 64 bits are in long[0],\n   * with bit index 0 at the least significant bit, and bit index 63 at the most significant.\n   * Given a bit index,\n   * the word containing it is long[index/64], and it is at bit number index%64 within that word.\n   * <p>\n   * numWords are the number of elements in the array that contain\n   * set bits (non-zero longs).\n   * numWords should be &lt= bits.length, and\n   * any existing words in the array at position &gt= numWords should be zero.\n   *\n   */\n  public OpenBitSet(long[] bits, int numWords) {\n    this.bits = bits;\n    this.wlen = numWords;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/OpenBitSet#OpenBitSet(long[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/OpenBitSet#OpenBitSet(long[],int).mjava","sourceNew":"  /** Constructs an OpenBitSet from an existing long[].\n   * <br/>\n   * The first 64 bits are in long[0],\n   * with bit index 0 at the least significant bit, and bit index 63 at the most significant.\n   * Given a bit index,\n   * the word containing it is long[index/64], and it is at bit number index%64 within that word.\n   * <p>\n   * numWords are the number of elements in the array that contain\n   * set bits (non-zero longs).\n   * numWords should be &lt= bits.length, and\n   * any existing words in the array at position &gt= numWords should be zero.\n   *\n   */\n  public OpenBitSet(long[] bits, int numWords) {\n    this.bits = bits;\n    this.wlen = numWords;\n    this.numBits = wlen * 64;\n  }\n\n","sourceOld":"  /** Constructs an OpenBitSet from an existing long[].\n   * <br/>\n   * The first 64 bits are in long[0],\n   * with bit index 0 at the least significant bit, and bit index 63 at the most significant.\n   * Given a bit index,\n   * the word containing it is long[index/64], and it is at bit number index%64 within that word.\n   * <p>\n   * numWords are the number of elements in the array that contain\n   * set bits (non-zero longs).\n   * numWords should be &lt= bits.length, and\n   * any existing words in the array at position &gt= numWords should be zero.\n   *\n   */\n  public OpenBitSet(long[] bits, int numWords) {\n    this.bits = bits;\n    this.wlen = numWords;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/OpenBitSet#OpenBitSet(long[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/OpenBitSet#OpenBitSet(long[],int).mjava","sourceNew":"  /** Constructs an OpenBitSet from an existing long[].\n   * <br/>\n   * The first 64 bits are in long[0],\n   * with bit index 0 at the least significant bit, and bit index 63 at the most significant.\n   * Given a bit index,\n   * the word containing it is long[index/64], and it is at bit number index%64 within that word.\n   * <p>\n   * numWords are the number of elements in the array that contain\n   * set bits (non-zero longs).\n   * numWords should be &lt= bits.length, and\n   * any existing words in the array at position &gt= numWords should be zero.\n   *\n   */\n  public OpenBitSet(long[] bits, int numWords) {\n    this.bits = bits;\n    this.wlen = numWords;\n    this.numBits = wlen * 64;\n  }\n\n","sourceOld":"  /** Constructs an OpenBitSet from an existing long[].\n   * <br/>\n   * The first 64 bits are in long[0],\n   * with bit index 0 at the least significant bit, and bit index 63 at the most significant.\n   * Given a bit index,\n   * the word containing it is long[index/64], and it is at bit number index%64 within that word.\n   * <p>\n   * numWords are the number of elements in the array that contain\n   * set bits (non-zero longs).\n   * numWords should be &lt= bits.length, and\n   * any existing words in the array at position &gt= numWords should be zero.\n   *\n   */\n  public OpenBitSet(long[] bits, int numWords) {\n    this.bits = bits;\n    this.wlen = numWords;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#OpenBitSet(long[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/OpenBitSet#OpenBitSet(long[],int).mjava","sourceNew":"  /** Constructs an OpenBitSet from an existing long[].\n   * <br/>\n   * The first 64 bits are in long[0],\n   * with bit index 0 at the least significant bit, and bit index 63 at the most significant.\n   * Given a bit index,\n   * the word containing it is long[index/64], and it is at bit number index%64 within that word.\n   * <p>\n   * numWords are the number of elements in the array that contain\n   * set bits (non-zero longs).\n   * numWords should be &lt= bits.length, and\n   * any existing words in the array at position &gt= numWords should be zero.\n   *\n   */\n  public OpenBitSet(long[] bits, int numWords) {\n    this.bits = bits;\n    this.wlen = numWords;\n    this.numBits = wlen * 64;\n  }\n\n","sourceOld":"  /** Constructs an OpenBitSet from an existing long[].\n   * <br/>\n   * The first 64 bits are in long[0],\n   * with bit index 0 at the least significant bit, and bit index 63 at the most significant.\n   * Given a bit index,\n   * the word containing it is long[index/64], and it is at bit number index%64 within that word.\n   * <p>\n   * numWords are the number of elements in the array that contain\n   * set bits (non-zero longs).\n   * numWords should be &lt= bits.length, and\n   * any existing words in the array at position &gt= numWords should be zero.\n   *\n   */\n  public OpenBitSet(long[] bits, int numWords) {\n    this.bits = bits;\n    this.wlen = numWords;\n    this.numBits = wlen * 64;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a59af0bca17674999c8756b4d68dcbf25a88a3b2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["9454a6510e2db155fb01faa5c049b06ece95fab9","a59af0bca17674999c8756b4d68dcbf25a88a3b2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a59af0bca17674999c8756b4d68dcbf25a88a3b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["9454a6510e2db155fb01faa5c049b06ece95fab9","a59af0bca17674999c8756b4d68dcbf25a88a3b2"]},"commit2Childs":{"a59af0bca17674999c8756b4d68dcbf25a88a3b2":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","3a119bbc8703c10faa329ec201c654b3a35a1e3e","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a59af0bca17674999c8756b4d68dcbf25a88a3b2","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}