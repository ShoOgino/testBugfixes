{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#encodedSize(PackedInts.Format,int).mjava","commits":[{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#encodedSize(PackedInts.Format,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/ForUtil#encodedSize(PackedInts.Format,int).mjava","sourceNew":"  /**\n   * Compute the number of bytes required to encode a block of values that require\n   * <code>bitsPerValue</code> bits per value with format <code>format</code>.\n   */\n  private static int encodedSize(PackedInts.Format format, int bitsPerValue) {\n    return format.nblocks(bitsPerValue, BLOCK_SIZE) << 3;\n  }\n\n","sourceOld":"  /**\n   * Compute the number of bytes required to encode a block of values that require\n   * <code>bitsPerValue</code> bits per value with format <code>format</code>.\n   */\n  private static int encodedSize(PackedInts.Format format, int bitsPerValue) {\n    return format.nblocks(bitsPerValue, BLOCK_SIZE) << 3;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#encodedSize(PackedInts.Format,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/ForUtil#encodedSize(PackedInts.Format,int).mjava","sourceNew":"  /**\n   * Compute the number of bytes required to encode a block of values that require\n   * <code>bitsPerValue</code> bits per value with format <code>format</code>.\n   */\n  private static int encodedSize(PackedInts.Format format, int bitsPerValue) {\n    return format.nblocks(bitsPerValue, BLOCK_SIZE) << 3;\n  }\n\n","sourceOld":"  /**\n   * Compute the number of bytes required to encode a block of values that require\n   * <code>bitsPerValue</code> bits per value with format <code>format</code>.\n   */\n  private static int encodedSize(PackedInts.Format format, int bitsPerValue) {\n    return format.nblocks(bitsPerValue, BLOCK_SIZE) << 3;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#encodedSize(PackedInts.Format,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/ForUtil#encodedSize(PackedInts.Format,int).mjava","sourceNew":"  /**\n   * Compute the number of bytes required to encode a block of values that require\n   * <code>bitsPerValue</code> bits per value with format <code>format</code>.\n   */\n  private static int encodedSize(PackedInts.Format format, int bitsPerValue) {\n    return format.nblocks(bitsPerValue, BLOCK_SIZE) << 3;\n  }\n\n","sourceOld":"  /**\n   * Compute the number of bytes required to encode a block of values that require\n   * <code>bitsPerValue</code> bits per value with format <code>format</code>.\n   */\n  private static int encodedSize(PackedInts.Format format, int bitsPerValue) {\n    return format.nblocks(bitsPerValue, BLOCK_SIZE) << 3;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c661dcad9680b8a6ce5bf2cc583a69ec965328bc","date":1352297862,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#encodedSize(PackedInts.Format,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#encodedSize(PackedInts.Format,int).mjava","sourceNew":"  /**\n   * Compute the number of bytes required to encode a block of values that require\n   * <code>bitsPerValue</code> bits per value with format <code>format</code>.\n   */\n  private static int encodedSize(PackedInts.Format format, int packedIntsVersion, int bitsPerValue) {\n    final long byteCount = format.byteCount(packedIntsVersion, BLOCK_SIZE, bitsPerValue);\n    assert byteCount >= 0 && byteCount <= Integer.MAX_VALUE : byteCount;\n    return (int) byteCount;\n  }\n\n","sourceOld":"  /**\n   * Compute the number of bytes required to encode a block of values that require\n   * <code>bitsPerValue</code> bits per value with format <code>format</code>.\n   */\n  private static int encodedSize(PackedInts.Format format, int bitsPerValue) {\n    return format.nblocks(bitsPerValue, BLOCK_SIZE) << 3;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c661dcad9680b8a6ce5bf2cc583a69ec965328bc":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c661dcad9680b8a6ce5bf2cc583a69ec965328bc"]},"commit2Childs":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["c661dcad9680b8a6ce5bf2cc583a69ec965328bc","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"c661dcad9680b8a6ce5bf2cc583a69ec965328bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}