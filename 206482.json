{"path":"solr/contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter#getTemplate(VelocityEngine,SolrQueryRequest).mjava","commits":[{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter#getTemplate(VelocityEngine,SolrQueryRequest).mjava","pathOld":"contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter#getTemplate(VelocityEngine,SolrQueryRequest).mjava","sourceNew":"  private Template getTemplate(VelocityEngine engine, SolrQueryRequest request) throws IOException {\n    Template template;\n\n    String template_name = request.getParams().get(\"v.template\");\n    String qt = request.getParams().get(\"qt\");\n    String path = (String) request.getContext().get(\"path\");\n    if (template_name == null && path != null) {\n      template_name = path;\n    }  // TODO: path is never null, so qt won't get picked up  maybe special case for '/select' to use qt, otherwise use path?\n    if (template_name == null && qt != null) {\n      template_name = qt;\n    }\n    if (template_name == null) template_name = \"index\";\n    try {\n      template = engine.getTemplate(template_name + \".vm\");\n    } catch (Exception e) {\n      throw new IOException(e.getMessage());\n    }\n\n    return template;\n  }\n\n","sourceOld":"  private Template getTemplate(VelocityEngine engine, SolrQueryRequest request) throws IOException {\n    Template template;\n\n    String template_name = request.getParams().get(\"v.template\");\n    String qt = request.getParams().get(\"qt\");\n    String path = (String) request.getContext().get(\"path\");\n    if (template_name == null && path != null) {\n      template_name = path;\n    }  // TODO: path is never null, so qt won't get picked up  maybe special case for '/select' to use qt, otherwise use path?\n    if (template_name == null && qt != null) {\n      template_name = qt;\n    }\n    if (template_name == null) template_name = \"index\";\n    try {\n      template = engine.getTemplate(template_name + \".vm\");\n    } catch (Exception e) {\n      throw new IOException(e.getMessage());\n    }\n\n    return template;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter#getTemplate(VelocityEngine,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  private Template getTemplate(VelocityEngine engine, SolrQueryRequest request) throws IOException {\n    Template template;\n\n    String template_name = request.getParams().get(\"v.template\");\n    String qt = request.getParams().get(\"qt\");\n    String path = (String) request.getContext().get(\"path\");\n    if (template_name == null && path != null) {\n      template_name = path;\n    }  // TODO: path is never null, so qt won't get picked up  maybe special case for '/select' to use qt, otherwise use path?\n    if (template_name == null && qt != null) {\n      template_name = qt;\n    }\n    if (template_name == null) template_name = \"index\";\n    try {\n      template = engine.getTemplate(template_name + \".vm\");\n    } catch (Exception e) {\n      throw new IOException(e.getMessage());\n    }\n\n    return template;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"229fd5dc94765f137932ddf46f64e9814f568803","date":1276820681,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/VelocityResponseWriter#getTemplate(VelocityEngine,SolrQueryRequest).mjava","pathOld":"solr/contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter#getTemplate(VelocityEngine,SolrQueryRequest).mjava","sourceNew":"  private Template getTemplate(VelocityEngine engine, SolrQueryRequest request) throws IOException {\n    Template template;\n\n    String template_name = request.getParams().get(\"v.template\");\n    String qt = request.getParams().get(\"qt\");\n    String path = (String) request.getContext().get(\"path\");\n    if (template_name == null && path != null) {\n      template_name = path;\n    }  // TODO: path is never null, so qt won't get picked up  maybe special case for '/select' to use qt, otherwise use path?\n    if (template_name == null && qt != null) {\n      template_name = qt;\n    }\n    if (template_name == null) template_name = \"index\";\n    try {\n      template = engine.getTemplate(template_name + \".vm\");\n    } catch (Exception e) {\n      throw new IOException(e.getMessage());\n    }\n\n    return template;\n  }\n\n","sourceOld":"  private Template getTemplate(VelocityEngine engine, SolrQueryRequest request) throws IOException {\n    Template template;\n\n    String template_name = request.getParams().get(\"v.template\");\n    String qt = request.getParams().get(\"qt\");\n    String path = (String) request.getContext().get(\"path\");\n    if (template_name == null && path != null) {\n      template_name = path;\n    }  // TODO: path is never null, so qt won't get picked up  maybe special case for '/select' to use qt, otherwise use path?\n    if (template_name == null && qt != null) {\n      template_name = qt;\n    }\n    if (template_name == null) template_name = \"index\";\n    try {\n      template = engine.getTemplate(template_name + \".vm\");\n    } catch (Exception e) {\n      throw new IOException(e.getMessage());\n    }\n\n    return template;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/VelocityResponseWriter#getTemplate(VelocityEngine,SolrQueryRequest).mjava","pathOld":"solr/contrib/velocity/src/main/java/org/apache/solr/response/VelocityResponseWriter#getTemplate(VelocityEngine,SolrQueryRequest).mjava","sourceNew":"  private Template getTemplate(VelocityEngine engine, SolrQueryRequest request) throws IOException {\n    Template template;\n\n    String template_name = request.getParams().get(\"v.template\");\n    String qt = request.getParams().get(\"qt\");\n    String path = (String) request.getContext().get(\"path\");\n    if (template_name == null && path != null) {\n      template_name = path;\n    }  // TODO: path is never null, so qt won't get picked up  maybe special case for '/select' to use qt, otherwise use path?\n    if (template_name == null && qt != null) {\n      template_name = qt;\n    }\n    if (template_name == null) template_name = \"index\";\n    try {\n      template = engine.getTemplate(template_name + \".vm\");\n    } catch (Exception e) {\n      throw new IOException(e.getMessage());\n    }\n\n    return template;\n  }\n\n","sourceOld":"  private Template getTemplate(VelocityEngine engine, SolrQueryRequest request) throws IOException {\n    Template template;\n\n    String template_name = request.getParams().get(\"v.template\");\n    String qt = request.getParams().get(\"qt\");\n    String path = (String) request.getContext().get(\"path\");\n    if (template_name == null && path != null) {\n      template_name = path;\n    }  // TODO: path is never null, so qt won't get picked up  maybe special case for '/select' to use qt, otherwise use path?\n    if (template_name == null && qt != null) {\n      template_name = qt;\n    }\n    if (template_name == null) template_name = \"index\";\n    try {\n      template = engine.getTemplate(template_name + \".vm\");\n    } catch (Exception e) {\n      throw new IOException(e.getMessage());\n    }\n\n    return template;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","229fd5dc94765f137932ddf46f64e9814f568803"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["229fd5dc94765f137932ddf46f64e9814f568803"],"229fd5dc94765f137932ddf46f64e9814f568803":["1da8d55113b689b06716246649de6f62430f15c0"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["5f4e87790277826a2aea119328600dfb07761f32","229fd5dc94765f137932ddf46f64e9814f568803"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"229fd5dc94765f137932ddf46f64e9814f568803":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}