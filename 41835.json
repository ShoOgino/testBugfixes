{"path":"solr/core/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException \n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n\n    for (String fname : doc.getFieldNames()) {\n      if(!returnFields.wantsField(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException \n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n\n    for (String fname : doc.getFieldNames()) {\n      if(!returnFields.wantsField(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException \n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n\n    for (String fname : doc.getFieldNames()) {\n      if(!returnFields.wantsField(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException \n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n\n    for (String fname : doc.getFieldNames()) {\n      if(!returnFields.wantsField(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException \n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n\n    for (String fname : doc.getFieldNames()) {\n      if(!returnFields.wantsField(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException \n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n\n    for (String fname : doc.getFieldNames()) {\n      if(!returnFields.wantsField(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException \n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n\n    for (String fname : doc.getFieldNames()) {\n      if(!returnFields.wantsField(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException \n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n\n    for (String fname : doc.getFieldNames()) {\n      if(!returnFields.wantsField(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException \n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n\n    for (String fname : doc.getFieldNames()) {\n      if(!returnFields.wantsField(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException \n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n\n    for (String fname : doc.getFieldNames()) {\n      if(!returnFields.wantsField(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException \n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<>();\n\n    for (String fname : doc.getFieldNames()) {\n      if(!returnFields.wantsField(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException \n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n\n    for (String fname : doc.getFieldNames()) {\n      if(!returnFields.wantsField(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9","date":1434467834,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException\n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<>();\n\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields != null && !returnFields.wantsField(fname)) {\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException \n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<>();\n\n    for (String fname : doc.getFieldNames()) {\n      if(!returnFields.wantsField(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","date":1571070979,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException\n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<>();\n\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields != null && !returnFields.wantsField(fname)) {\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(Map.Entry<String, Object> entry : single.entrySet()){\n      String fname = entry.getKey();\n      Object val = entry.getValue();\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(Map.Entry<String, Object> entry : multi.entrySet()){\n      String fname = entry.getKey();\n      writeKey(fname, true);\n\n      Object val = entry.getValue();\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException\n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<>();\n\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields != null && !returnFields.wantsField(fname)) {\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException\n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<>();\n\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields != null && !returnFields.wantsField(fname)) {\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(Map.Entry<String, Object> entry : single.entrySet()){\n      String fname = entry.getKey();\n      Object val = entry.getValue();\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(Map.Entry<String, Object> entry : multi.entrySet()){\n      String fname = entry.getKey();\n      writeKey(fname, true);\n\n      Object val = entry.getValue();\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException\n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<>();\n\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields != null && !returnFields.wantsField(fname)) {\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"],"b0b597c65628ca9e73913a07e81691f8229bae35":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9","7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9"],"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}