{"path":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#createRandomIndexes(int).mjava","commits":[{"id":"4d1c249f01722fe2de6d60de2f0aade417fbb638","date":1365517193,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#createRandomIndexes(int).mjava","pathOld":"/dev/null","sourceNew":"  private void createRandomIndexes(int maxSegments) throws IOException {\n    dir = newDirectory();\n    numDocs = atLeast(150);\n    final int numTerms = _TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<String>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(_TestUtil.randomSimpleString(random()));\n    }\n    terms = new ArrayList<String>(randomTerms);\n    final long seed = random().nextLong();\n    final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(new Random(seed)));\n    iwc.setMergePolicy(TestSortingMergePolicy.newSortingMergePolicy(sorter));\n    iw = new RandomIndexWriter(new Random(seed), dir, iwc);\n    for (int i = 0; i < numDocs; ++i) {\n      final Document doc = randomDocument();\n      iw.addDocument(doc);\n      if (i == numDocs / 2 || (i != numDocs - 1 && random().nextInt(8) == 0)) {\n        iw.commit();\n      }\n      if (random().nextInt(15) == 0) {\n        final String term = RandomPicks.randomFrom(random(), terms);\n        iw.deleteDocuments(new Term(\"s\", term));\n      }\n    }\n    reader = iw.getReader();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#createRandomIndexes(int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#createRandomIndexes(int).mjava","sourceNew":"  private void createRandomIndexes(int maxSegments) throws IOException {\n    dir = newDirectory();\n    numDocs = atLeast(150);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<String>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n    terms = new ArrayList<String>(randomTerms);\n    final long seed = random().nextLong();\n    final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(new Random(seed)));\n    iwc.setMergePolicy(TestSortingMergePolicy.newSortingMergePolicy(sorter));\n    iw = new RandomIndexWriter(new Random(seed), dir, iwc);\n    for (int i = 0; i < numDocs; ++i) {\n      final Document doc = randomDocument();\n      iw.addDocument(doc);\n      if (i == numDocs / 2 || (i != numDocs - 1 && random().nextInt(8) == 0)) {\n        iw.commit();\n      }\n      if (random().nextInt(15) == 0) {\n        final String term = RandomPicks.randomFrom(random(), terms);\n        iw.deleteDocuments(new Term(\"s\", term));\n      }\n    }\n    reader = iw.getReader();\n  }\n\n","sourceOld":"  private void createRandomIndexes(int maxSegments) throws IOException {\n    dir = newDirectory();\n    numDocs = atLeast(150);\n    final int numTerms = _TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<String>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(_TestUtil.randomSimpleString(random()));\n    }\n    terms = new ArrayList<String>(randomTerms);\n    final long seed = random().nextLong();\n    final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(new Random(seed)));\n    iwc.setMergePolicy(TestSortingMergePolicy.newSortingMergePolicy(sorter));\n    iw = new RandomIndexWriter(new Random(seed), dir, iwc);\n    for (int i = 0; i < numDocs; ++i) {\n      final Document doc = randomDocument();\n      iw.addDocument(doc);\n      if (i == numDocs / 2 || (i != numDocs - 1 && random().nextInt(8) == 0)) {\n        iw.commit();\n      }\n      if (random().nextInt(15) == 0) {\n        final String term = RandomPicks.randomFrom(random(), terms);\n        iw.deleteDocuments(new Term(\"s\", term));\n      }\n    }\n    reader = iw.getReader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b060a9c887ff2c6f4280953afc6fb6000934dae5","date":1394119540,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#createRandomIndexes(int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#createRandomIndexes(int).mjava","sourceNew":"  private void createRandomIndexes(int maxSegments) throws IOException {\n    dir = newDirectory();\n    numDocs = atLeast(150);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<String>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n    terms = new ArrayList<String>(randomTerms);\n    final long seed = random().nextLong();\n    final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(new Random(seed)));\n    iwc.setMergePolicy(TestSortingMergePolicy.newSortingMergePolicy(sort));\n    iw = new RandomIndexWriter(new Random(seed), dir, iwc);\n    for (int i = 0; i < numDocs; ++i) {\n      final Document doc = randomDocument();\n      iw.addDocument(doc);\n      if (i == numDocs / 2 || (i != numDocs - 1 && random().nextInt(8) == 0)) {\n        iw.commit();\n      }\n      if (random().nextInt(15) == 0) {\n        final String term = RandomPicks.randomFrom(random(), terms);\n        iw.deleteDocuments(new Term(\"s\", term));\n      }\n    }\n    reader = iw.getReader();\n  }\n\n","sourceOld":"  private void createRandomIndexes(int maxSegments) throws IOException {\n    dir = newDirectory();\n    numDocs = atLeast(150);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<String>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n    terms = new ArrayList<String>(randomTerms);\n    final long seed = random().nextLong();\n    final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(new Random(seed)));\n    iwc.setMergePolicy(TestSortingMergePolicy.newSortingMergePolicy(sorter));\n    iw = new RandomIndexWriter(new Random(seed), dir, iwc);\n    for (int i = 0; i < numDocs; ++i) {\n      final Document doc = randomDocument();\n      iw.addDocument(doc);\n      if (i == numDocs / 2 || (i != numDocs - 1 && random().nextInt(8) == 0)) {\n        iw.commit();\n      }\n      if (random().nextInt(15) == 0) {\n        final String term = RandomPicks.randomFrom(random(), terms);\n        iw.deleteDocuments(new Term(\"s\", term));\n      }\n    }\n    reader = iw.getReader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4637747f71df783fc2014ef1f1e0418466e3bed6","date":1394196311,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#createRandomIndexes(int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#createRandomIndexes(int).mjava","sourceNew":"  private void createRandomIndexes(int maxSegments) throws IOException {\n    dir = newDirectory();\n    numDocs = atLeast(150);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<String>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n    terms = new ArrayList<String>(randomTerms);\n    final long seed = random().nextLong();\n    final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(new Random(seed)));\n    iwc.setMergePolicy(TestSortingMergePolicy.newSortingMergePolicy(sort));\n    iw = new RandomIndexWriter(new Random(seed), dir, iwc);\n    for (int i = 0; i < numDocs; ++i) {\n      final Document doc = randomDocument();\n      iw.addDocument(doc);\n      if (i == numDocs / 2 || (i != numDocs - 1 && random().nextInt(8) == 0)) {\n        iw.commit();\n      }\n      if (random().nextInt(15) == 0) {\n        final String term = RandomPicks.randomFrom(random(), terms);\n        iw.deleteDocuments(new Term(\"s\", term));\n      }\n    }\n    reader = iw.getReader();\n  }\n\n","sourceOld":"  private void createRandomIndexes(int maxSegments) throws IOException {\n    dir = newDirectory();\n    numDocs = atLeast(150);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<String>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n    terms = new ArrayList<String>(randomTerms);\n    final long seed = random().nextLong();\n    final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(new Random(seed)));\n    iwc.setMergePolicy(TestSortingMergePolicy.newSortingMergePolicy(sorter));\n    iw = new RandomIndexWriter(new Random(seed), dir, iwc);\n    for (int i = 0; i < numDocs; ++i) {\n      final Document doc = randomDocument();\n      iw.addDocument(doc);\n      if (i == numDocs / 2 || (i != numDocs - 1 && random().nextInt(8) == 0)) {\n        iw.commit();\n      }\n      if (random().nextInt(15) == 0) {\n        final String term = RandomPicks.randomFrom(random(), terms);\n        iw.deleteDocuments(new Term(\"s\", term));\n      }\n    }\n    reader = iw.getReader();\n  }\n\n","bugFix":["4d1c249f01722fe2de6d60de2f0aade417fbb638"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#createRandomIndexes(int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#createRandomIndexes(int).mjava","sourceNew":"  private void createRandomIndexes(int maxSegments) throws IOException {\n    dir = newDirectory();\n    numDocs = atLeast(150);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<String>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n    terms = new ArrayList<String>(randomTerms);\n    final long seed = random().nextLong();\n    final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(new Random(seed)));\n    iwc.setMergePolicy(TestSortingMergePolicy.newSortingMergePolicy(sort));\n    iw = new RandomIndexWriter(new Random(seed), dir, iwc);\n    for (int i = 0; i < numDocs; ++i) {\n      final Document doc = randomDocument();\n      iw.addDocument(doc);\n      if (i == numDocs / 2 || (i != numDocs - 1 && random().nextInt(8) == 0)) {\n        iw.commit();\n      }\n      if (random().nextInt(15) == 0) {\n        final String term = RandomPicks.randomFrom(random(), terms);\n        iw.deleteDocuments(new Term(\"s\", term));\n      }\n    }\n    reader = iw.getReader();\n  }\n\n","sourceOld":"  private void createRandomIndexes(int maxSegments) throws IOException {\n    dir = newDirectory();\n    numDocs = atLeast(150);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<String>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n    terms = new ArrayList<String>(randomTerms);\n    final long seed = random().nextLong();\n    final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(new Random(seed)));\n    iwc.setMergePolicy(TestSortingMergePolicy.newSortingMergePolicy(sorter));\n    iw = new RandomIndexWriter(new Random(seed), dir, iwc);\n    for (int i = 0; i < numDocs; ++i) {\n      final Document doc = randomDocument();\n      iw.addDocument(doc);\n      if (i == numDocs / 2 || (i != numDocs - 1 && random().nextInt(8) == 0)) {\n        iw.commit();\n      }\n      if (random().nextInt(15) == 0) {\n        final String term = RandomPicks.randomFrom(random(), terms);\n        iw.deleteDocuments(new Term(\"s\", term));\n      }\n    }\n    reader = iw.getReader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#createRandomIndexes(int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#createRandomIndexes(int).mjava","sourceNew":"  private void createRandomIndexes(int maxSegments) throws IOException {\n    dir = newDirectory();\n    numDocs = atLeast(150);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n    terms = new ArrayList<>(randomTerms);\n    final long seed = random().nextLong();\n    final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(new Random(seed)));\n    iwc.setMergePolicy(TestSortingMergePolicy.newSortingMergePolicy(sort));\n    iw = new RandomIndexWriter(new Random(seed), dir, iwc);\n    for (int i = 0; i < numDocs; ++i) {\n      final Document doc = randomDocument();\n      iw.addDocument(doc);\n      if (i == numDocs / 2 || (i != numDocs - 1 && random().nextInt(8) == 0)) {\n        iw.commit();\n      }\n      if (random().nextInt(15) == 0) {\n        final String term = RandomPicks.randomFrom(random(), terms);\n        iw.deleteDocuments(new Term(\"s\", term));\n      }\n    }\n    reader = iw.getReader();\n  }\n\n","sourceOld":"  private void createRandomIndexes(int maxSegments) throws IOException {\n    dir = newDirectory();\n    numDocs = atLeast(150);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<String>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n    terms = new ArrayList<String>(randomTerms);\n    final long seed = random().nextLong();\n    final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(new Random(seed)));\n    iwc.setMergePolicy(TestSortingMergePolicy.newSortingMergePolicy(sort));\n    iw = new RandomIndexWriter(new Random(seed), dir, iwc);\n    for (int i = 0; i < numDocs; ++i) {\n      final Document doc = randomDocument();\n      iw.addDocument(doc);\n      if (i == numDocs / 2 || (i != numDocs - 1 && random().nextInt(8) == 0)) {\n        iw.commit();\n      }\n      if (random().nextInt(15) == 0) {\n        final String term = RandomPicks.randomFrom(random(), terms);\n        iw.deleteDocuments(new Term(\"s\", term));\n      }\n    }\n    reader = iw.getReader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b31300b5ffd92c482faabff5910228b4cdaa7dde","date":1398105394,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#createRandomIndex().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#createRandomIndexes(int).mjava","sourceNew":"  private void createRandomIndex() throws IOException {\n    dir = newDirectory();\n    numDocs = atLeast(150);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n    terms = new ArrayList<>(randomTerms);\n    final long seed = random().nextLong();\n    final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(new Random(seed)));\n    iwc.setMergeScheduler(new SerialMergeScheduler()); // for reproducible tests\n    iwc.setMergePolicy(TestSortingMergePolicy.newSortingMergePolicy(sort));\n    iw = new RandomIndexWriter(new Random(seed), dir, iwc);\n    iw.setDoRandomForceMerge(false); // don't do this, it may happen anyway with MockRandomMP\n    for (int i = 0; i < numDocs; ++i) {\n      final Document doc = randomDocument();\n      iw.addDocument(doc);\n      if (i == numDocs / 2 || (i != numDocs - 1 && random().nextInt(8) == 0)) {\n        iw.commit();\n      }\n      if (random().nextInt(15) == 0) {\n        final String term = RandomPicks.randomFrom(random(), terms);\n        iw.deleteDocuments(new Term(\"s\", term));\n      }\n    }\n    if (random().nextBoolean()) {\n      iw.forceMerge(5);\n    }\n    reader = iw.getReader();\n  }\n\n","sourceOld":"  private void createRandomIndexes(int maxSegments) throws IOException {\n    dir = newDirectory();\n    numDocs = atLeast(150);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n    terms = new ArrayList<>(randomTerms);\n    final long seed = random().nextLong();\n    final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(new Random(seed)));\n    iwc.setMergePolicy(TestSortingMergePolicy.newSortingMergePolicy(sort));\n    iw = new RandomIndexWriter(new Random(seed), dir, iwc);\n    for (int i = 0; i < numDocs; ++i) {\n      final Document doc = randomDocument();\n      iw.addDocument(doc);\n      if (i == numDocs / 2 || (i != numDocs - 1 && random().nextInt(8) == 0)) {\n        iw.commit();\n      }\n      if (random().nextInt(15) == 0) {\n        final String term = RandomPicks.randomFrom(random(), terms);\n        iw.deleteDocuments(new Term(\"s\", term));\n      }\n    }\n    reader = iw.getReader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["6613659748fe4411a7dcf85266e55db1f95f7315","4637747f71df783fc2014ef1f1e0418466e3bed6"],"b060a9c887ff2c6f4280953afc6fb6000934dae5":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["4d1c249f01722fe2de6d60de2f0aade417fbb638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d1c249f01722fe2de6d60de2f0aade417fbb638":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b31300b5ffd92c482faabff5910228b4cdaa7dde":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["6613659748fe4411a7dcf85266e55db1f95f7315","b060a9c887ff2c6f4280953afc6fb6000934dae5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b31300b5ffd92c482faabff5910228b4cdaa7dde"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b31300b5ffd92c482faabff5910228b4cdaa7dde"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"b060a9c887ff2c6f4280953afc6fb6000934dae5":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"6613659748fe4411a7dcf85266e55db1f95f7315":["96ea64d994d340044e0d57aeb6a5871539d10ca5","b060a9c887ff2c6f4280953afc6fb6000934dae5","4637747f71df783fc2014ef1f1e0418466e3bed6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d1c249f01722fe2de6d60de2f0aade417fbb638"],"4d1c249f01722fe2de6d60de2f0aade417fbb638":["6613659748fe4411a7dcf85266e55db1f95f7315"],"b31300b5ffd92c482faabff5910228b4cdaa7dde":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","96ea64d994d340044e0d57aeb6a5871539d10ca5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}