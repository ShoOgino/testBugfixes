{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], StringField.TYPE_STORED));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newField(\"contents\", unstored[i], TextField.TYPE_UNSTORED));\n      doc.add(newField(\"city\", text[i], TextField.TYPE_STORED));\n      modifier.addDocument(doc);\n    }\n    modifier.forceMerge(1);\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete by term=\" + term);\n    }\n    modifier.deleteDocuments(term);\n    modifier.commit();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now getHitCount\");\n    }\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], StringField.TYPE_STORED));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newField(\"contents\", unstored[i], TextField.TYPE_UNSTORED));\n      doc.add(newField(\"city\", text[i], TextField.TYPE_STORED));\n      modifier.addDocument(doc);\n    }\n    modifier.forceMerge(1);\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete by term=\" + term);\n    }\n    modifier.deleteDocuments(term);\n    modifier.commit();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now getHitCount\");\n    }\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], StringField.TYPE_STORED));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newField(\"contents\", unstored[i], TextField.TYPE_UNSTORED));\n      doc.add(newField(\"city\", text[i], TextField.TYPE_STORED));\n      modifier.addDocument(doc);\n    }\n    modifier.forceMerge(1);\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete by term=\" + term);\n    }\n    modifier.deleteDocuments(term);\n    modifier.commit();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now getHitCount\");\n    }\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], StringField.TYPE_STORED));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newField(\"contents\", unstored[i], TextField.TYPE_UNSTORED));\n      doc.add(newField(\"city\", text[i], TextField.TYPE_STORED));\n      modifier.addDocument(doc);\n    }\n    modifier.forceMerge(1);\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete by term=\" + term);\n    }\n    modifier.deleteDocuments(term);\n    modifier.commit();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now getHitCount\");\n    }\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      modifier.addDocument(doc);\n    }\n    modifier.forceMerge(1);\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete by term=\" + term);\n    }\n    modifier.deleteDocuments(term);\n    modifier.commit();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now getHitCount\");\n    }\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], StringField.TYPE_STORED));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newField(\"contents\", unstored[i], TextField.TYPE_UNSTORED));\n      doc.add(newField(\"city\", text[i], TextField.TYPE_STORED));\n      modifier.addDocument(doc);\n    }\n    modifier.forceMerge(1);\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete by term=\" + term);\n    }\n    modifier.deleteDocuments(term);\n    modifier.commit();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now getHitCount\");\n    }\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      modifier.addDocument(doc);\n    }\n    modifier.forceMerge(1);\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete by term=\" + term);\n    }\n    modifier.deleteDocuments(term);\n    modifier.commit();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now getHitCount\");\n    }\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      modifier.addDocument(doc);\n    }\n    modifier.forceMerge(1);\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete by term=\" + term);\n    }\n    modifier.deleteDocuments(term);\n    modifier.commit();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now getHitCount\");\n    }\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false))\n                                                  .setMaxBufferedDeleteTerms(1));\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      modifier.addDocument(doc);\n    }\n    modifier.forceMerge(1);\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete by term=\" + term);\n    }\n    modifier.deleteDocuments(term);\n    modifier.commit();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now getHitCount\");\n    }\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)).setMaxBufferedDeleteTerms(1));\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      modifier.addDocument(doc);\n    }\n    modifier.forceMerge(1);\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete by term=\" + term);\n    }\n    modifier.deleteDocuments(term);\n    modifier.commit();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now getHitCount\");\n    }\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false))\n                                                  .setMaxBufferedDeleteTerms(1));\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      modifier.addDocument(doc);\n    }\n    modifier.forceMerge(1);\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete by term=\" + term);\n    }\n    modifier.deleteDocuments(term);\n    modifier.commit();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now getHitCount\");\n    }\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false))\n                                                  .setMaxBufferedDeleteTerms(1));\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      modifier.addDocument(doc);\n    }\n    modifier.forceMerge(1);\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete by term=\" + term);\n    }\n    modifier.deleteDocuments(term);\n    modifier.commit();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now getHitCount\");\n    }\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","date":1498031702,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false))\n                                                  .setMaxBufferedDeleteTerms(1));\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      modifier.addDocument(doc);\n    }\n    modifier.forceMerge(1);\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    long hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete by term=\" + term);\n    }\n    modifier.deleteDocuments(term);\n    modifier.commit();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now getHitCount\");\n    }\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false))\n                                                  .setMaxBufferedDeleteTerms(1));\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      modifier.addDocument(doc);\n    }\n    modifier.forceMerge(1);\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete by term=\" + term);\n    }\n    modifier.deleteDocuments(term);\n    modifier.commit();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now getHitCount\");\n    }\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":["87c966e9308847938a7c905c2e46a56d8df788b8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      modifier.addDocument(doc);\n    }\n    modifier.forceMerge(1);\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    long hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete by term=\" + term);\n    }\n    modifier.deleteDocuments(term);\n    modifier.commit();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now getHitCount\");\n    }\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false))\n                                                  .setMaxBufferedDeleteTerms(1));\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      modifier.addDocument(doc);\n    }\n    modifier.forceMerge(1);\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    long hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete by term=\" + term);\n    }\n    modifier.deleteDocuments(term);\n    modifier.commit();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now getHitCount\");\n    }\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      modifier.addDocument(doc);\n    }\n    modifier.forceMerge(1);\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    long hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete by term=\" + term);\n    }\n    modifier.deleteDocuments(term);\n    modifier.commit();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now getHitCount\");\n    }\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false))\n                                                  .setMaxBufferedDeleteTerms(1));\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      modifier.addDocument(doc);\n    }\n    modifier.forceMerge(1);\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete by term=\" + term);\n    }\n    modifier.deleteDocuments(term);\n    modifier.commit();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now getHitCount\");\n    }\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testSimpleCase().mjava","sourceNew":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      modifier.addDocument(doc);\n    }\n    modifier.forceMerge(1);\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    long hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete by term=\" + term);\n    }\n    modifier.deleteDocuments(term);\n    modifier.commit();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now getHitCount\");\n    }\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test the simple case\n  public void testSimpleCase() throws IOException {\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false))\n                                                  .setMaxBufferedDeleteTerms(1));\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      modifier.addDocument(doc);\n    }\n    modifier.forceMerge(1);\n    modifier.commit();\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete by term=\" + term);\n    }\n    modifier.deleteDocuments(term);\n    modifier.commit();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now getHitCount\");\n    }\n    hitCount = getHitCount(dir, term);\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["d0ef034a4f10871667ae75181537775ddcf8ade4","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["d0ef034a4f10871667ae75181537775ddcf8ade4","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}