{"path":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","sourceNew":"        @Override\n        public void run() {\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","sourceOld":"        @Override\n        public void run() {\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","sourceNew":"        @Override\n        public void run() {\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","sourceOld":"        @Override\n        public void run() {\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","sourceNew":"        @Override\n        public void run() {\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","sourceOld":"        @Override\n        public void run() {\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","sourceNew":"        @Override\n        public void run() {\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","sourceOld":"        @Override\n        public void run() {\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","sourceNew":"        @Override\n        public void run() {\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.shutdown();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","sourceOld":"        @Override\n        public void run() {\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","sourceNew":"        @Override\n        public void run() {\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","sourceOld":"        @Override\n        public void run() {\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.shutdown();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","sourceNew":null,"sourceOld":"        @Override\n        public void run() {\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"618635065f043788c9e034f96ca5cd5cea1b4592":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["618635065f043788c9e034f96ca5cd5cea1b4592"]},"commit2Childs":{"618635065f043788c9e034f96ca5cd5cea1b4592":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["618635065f043788c9e034f96ca5cd5cea1b4592"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}