{"path":"solr/core/src/java/org/apache/solr/schema/SpatialPointVectorFieldType#inform(IndexSchema).mjava","commits":[{"id":"6bc1e76fdb8a9952244528f098da956d2f52acec","date":1348348531,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SpatialPointVectorFieldType#inform(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SpatialTwoDoublesFieldType#inform(IndexSchema).mjava","sourceNew":"  @Override\n  public void inform(IndexSchema schema) {\n    FieldType fieldType = schema.getFieldTypeByName(numberFieldName);\n    if( fieldType == null ) {\n      throw new RuntimeException( \"Can not find number field: \"+ numberFieldName);\n    }\n    //TODO support other numeric types in the future\n    if( !(fieldType instanceof TrieDoubleField) ) {\n      throw new RuntimeException( \"field type must be TrieDoubleField: \"+ fieldType);\n    }\n    precisionStep = ((TrieField)fieldType).getPrecisionStep();\n\n    //Just set these, delegate everything else to the field type\n    final int p = (INDEXED | TOKENIZED | OMIT_NORMS | OMIT_TF_POSITIONS);\n    List<SchemaField> newFields = new ArrayList<SchemaField>();\n    for( SchemaField sf : schema.getFields().values() ) {\n      if( sf.getType() == this ) {\n        String name = sf.getName();\n        newFields.add(new SchemaField(name + PointVectorStrategy.SUFFIX_X, fieldType, p, null));\n        newFields.add(new SchemaField(name + PointVectorStrategy.SUFFIX_Y, fieldType, p, null));\n      }\n    }\n    for (SchemaField newField : newFields) {\n      schema.getFields().put(newField.getName(), newField);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(IndexSchema schema) {\n    FieldType fieldType = schema.getFieldTypeByName(numberFieldName);\n    if( fieldType == null ) {\n      throw new RuntimeException( \"Can not find number field: \"+ numberFieldName);\n    }\n    //TODO support other numeric types in the future\n    if( !(fieldType instanceof TrieDoubleField) ) {\n      throw new RuntimeException( \"field type must be TrieDoubleField: \"+ fieldType);\n    }\n    precisionStep = ((TrieField)fieldType).getPrecisionStep();\n\n    //Just set these, delegate everything else to the field type\n    final int p = (INDEXED | TOKENIZED | OMIT_NORMS | OMIT_TF_POSITIONS);\n    List<SchemaField> newFields = new ArrayList<SchemaField>();\n    for( SchemaField sf : schema.getFields().values() ) {\n      if( sf.getType() == this ) {\n        String name = sf.getName();\n        newFields.add(new SchemaField(name + TwoDoublesStrategy.SUFFIX_X, fieldType, p, null));\n        newFields.add(new SchemaField(name + TwoDoublesStrategy.SUFFIX_Y, fieldType, p, null));\n      }\n    }\n    for (SchemaField newField : newFields) {\n      schema.getFields().put(newField.getName(), newField);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SpatialPointVectorFieldType#inform(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SpatialPointVectorFieldType#inform(IndexSchema).mjava","sourceNew":"  /**\n   * Adds X and Y fields to the given schema for each field with this class as its field type.\n   * \n   * {@inheritDoc}\n   * \n   * @param schema {@inheritDoc}\n   *\n   */\n  @Override\n  public void inform(IndexSchema schema) {\n    FieldType fieldType = schema.getFieldTypeByName(numberFieldName);\n    if( fieldType == null ) {\n      throw new RuntimeException( \"Can not find number field: \"+ numberFieldName);\n    }\n    //TODO support other numeric types in the future\n    if( !(fieldType instanceof TrieDoubleField) ) {\n      throw new RuntimeException( \"field type must be TrieDoubleField: \"+ fieldType);\n    }\n    precisionStep = ((TrieField)fieldType).getPrecisionStep();\n\n    //Just set these, delegate everything else to the field type\n    final int p = (INDEXED | TOKENIZED | OMIT_NORMS | OMIT_TF_POSITIONS);\n    List<SchemaField> newFields = new ArrayList<SchemaField>();\n    for( SchemaField sf : schema.getFields().values() ) {\n      if( sf.getType() == this ) {\n        String name = sf.getName();\n        newFields.add(new SchemaField(name + PointVectorStrategy.SUFFIX_X, fieldType, p, null));\n        newFields.add(new SchemaField(name + PointVectorStrategy.SUFFIX_Y, fieldType, p, null));\n      }\n    }\n    for (SchemaField newField : newFields) {\n      schema.getFields().put(newField.getName(), newField);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(IndexSchema schema) {\n    FieldType fieldType = schema.getFieldTypeByName(numberFieldName);\n    if( fieldType == null ) {\n      throw new RuntimeException( \"Can not find number field: \"+ numberFieldName);\n    }\n    //TODO support other numeric types in the future\n    if( !(fieldType instanceof TrieDoubleField) ) {\n      throw new RuntimeException( \"field type must be TrieDoubleField: \"+ fieldType);\n    }\n    precisionStep = ((TrieField)fieldType).getPrecisionStep();\n\n    //Just set these, delegate everything else to the field type\n    final int p = (INDEXED | TOKENIZED | OMIT_NORMS | OMIT_TF_POSITIONS);\n    List<SchemaField> newFields = new ArrayList<SchemaField>();\n    for( SchemaField sf : schema.getFields().values() ) {\n      if( sf.getType() == this ) {\n        String name = sf.getName();\n        newFields.add(new SchemaField(name + PointVectorStrategy.SUFFIX_X, fieldType, p, null));\n        newFields.add(new SchemaField(name + PointVectorStrategy.SUFFIX_Y, fieldType, p, null));\n      }\n    }\n    for (SchemaField newField : newFields) {\n      schema.getFields().put(newField.getName(), newField);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SpatialPointVectorFieldType#inform(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SpatialPointVectorFieldType#inform(IndexSchema).mjava","sourceNew":"  /**\n   * Adds X and Y fields to the given schema for each field with this class as its field type.\n   * \n   * {@inheritDoc}\n   * \n   * @param schema {@inheritDoc}\n   *\n   */\n  @Override\n  public void inform(IndexSchema schema) {\n    FieldType fieldType = schema.getFieldTypeByName(numberFieldName);\n    if( fieldType == null ) {\n      throw new RuntimeException( \"Can not find number field: \"+ numberFieldName);\n    }\n    //TODO support other numeric types in the future\n    if( !(fieldType instanceof TrieDoubleField) ) {\n      throw new RuntimeException( \"field type must be TrieDoubleField: \"+ fieldType);\n    }\n    precisionStep = ((TrieField)fieldType).getPrecisionStep();\n\n    //Just set these, delegate everything else to the field type\n    final int p = (INDEXED | TOKENIZED | OMIT_NORMS | OMIT_TF_POSITIONS);\n    List<SchemaField> newFields = new ArrayList<>();\n    for( SchemaField sf : schema.getFields().values() ) {\n      if( sf.getType() == this ) {\n        String name = sf.getName();\n        newFields.add(new SchemaField(name + PointVectorStrategy.SUFFIX_X, fieldType, p, null));\n        newFields.add(new SchemaField(name + PointVectorStrategy.SUFFIX_Y, fieldType, p, null));\n      }\n    }\n    for (SchemaField newField : newFields) {\n      schema.getFields().put(newField.getName(), newField);\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds X and Y fields to the given schema for each field with this class as its field type.\n   * \n   * {@inheritDoc}\n   * \n   * @param schema {@inheritDoc}\n   *\n   */\n  @Override\n  public void inform(IndexSchema schema) {\n    FieldType fieldType = schema.getFieldTypeByName(numberFieldName);\n    if( fieldType == null ) {\n      throw new RuntimeException( \"Can not find number field: \"+ numberFieldName);\n    }\n    //TODO support other numeric types in the future\n    if( !(fieldType instanceof TrieDoubleField) ) {\n      throw new RuntimeException( \"field type must be TrieDoubleField: \"+ fieldType);\n    }\n    precisionStep = ((TrieField)fieldType).getPrecisionStep();\n\n    //Just set these, delegate everything else to the field type\n    final int p = (INDEXED | TOKENIZED | OMIT_NORMS | OMIT_TF_POSITIONS);\n    List<SchemaField> newFields = new ArrayList<SchemaField>();\n    for( SchemaField sf : schema.getFields().values() ) {\n      if( sf.getType() == this ) {\n        String name = sf.getName();\n        newFields.add(new SchemaField(name + PointVectorStrategy.SUFFIX_X, fieldType, p, null));\n        newFields.add(new SchemaField(name + PointVectorStrategy.SUFFIX_Y, fieldType, p, null));\n      }\n    }\n    for (SchemaField newField : newFields) {\n      schema.getFields().put(newField.getName(), newField);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e","date":1541777404,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SpatialPointVectorFieldType#inform(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SpatialPointVectorFieldType#inform(IndexSchema).mjava","sourceNew":"  /**\n   * Adds X and Y fields to the given schema for each field with this class as its field type.\n   * \n   * {@inheritDoc}\n   * \n   * @param schema {@inheritDoc}\n   *\n   */\n  @Override\n  public void inform(IndexSchema schema) {\n    FieldType fieldType = schema.getFieldTypeByName(numberFieldName);\n    if( fieldType == null ) {\n      throw new RuntimeException( \"Can not find number field: \"+ numberFieldName);\n    }\n    //TODO support other numeric types in the future\n    if( !(fieldType instanceof TrieDoubleField) ) {\n      throw new RuntimeException( \"field type must be TrieDoubleField: \"+ fieldType);\n    }\n    precisionStep = ((TrieField)fieldType).getPrecisionStep();\n\n    // NOTE: the SchemaField constructor we're using ignores any properties of the fieldType\n    // so only the ones we're explicitly setting get used.\n    //\n    // In theory we should fix this, but since this class is already deprecated, we'll leave it alone\n    // to simplify the risk of back-compat break for existing users.\n    final int p = (INDEXED | TOKENIZED | OMIT_NORMS | OMIT_TF_POSITIONS | UNINVERTIBLE);\n    List<SchemaField> newFields = new ArrayList<>();\n    for( SchemaField sf : schema.getFields().values() ) {\n      if( sf.getType() == this ) {\n        String name = sf.getName();\n        newFields.add(new SchemaField(name + PointVectorStrategy.SUFFIX_X, fieldType, p, null));\n        newFields.add(new SchemaField(name + PointVectorStrategy.SUFFIX_Y, fieldType, p, null));\n      }\n    }\n    for (SchemaField newField : newFields) {\n      schema.getFields().put(newField.getName(), newField);\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds X and Y fields to the given schema for each field with this class as its field type.\n   * \n   * {@inheritDoc}\n   * \n   * @param schema {@inheritDoc}\n   *\n   */\n  @Override\n  public void inform(IndexSchema schema) {\n    FieldType fieldType = schema.getFieldTypeByName(numberFieldName);\n    if( fieldType == null ) {\n      throw new RuntimeException( \"Can not find number field: \"+ numberFieldName);\n    }\n    //TODO support other numeric types in the future\n    if( !(fieldType instanceof TrieDoubleField) ) {\n      throw new RuntimeException( \"field type must be TrieDoubleField: \"+ fieldType);\n    }\n    precisionStep = ((TrieField)fieldType).getPrecisionStep();\n\n    //Just set these, delegate everything else to the field type\n    final int p = (INDEXED | TOKENIZED | OMIT_NORMS | OMIT_TF_POSITIONS);\n    List<SchemaField> newFields = new ArrayList<>();\n    for( SchemaField sf : schema.getFields().values() ) {\n      if( sf.getType() == this ) {\n        String name = sf.getName();\n        newFields.add(new SchemaField(name + PointVectorStrategy.SUFFIX_X, fieldType, p, null));\n        newFields.add(new SchemaField(name + PointVectorStrategy.SUFFIX_Y, fieldType, p, null));\n      }\n    }\n    for (SchemaField newField : newFields) {\n      schema.getFields().put(newField.getName(), newField);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["08970e5b8411182a29412c177eff67ec1110095b"],"6bc1e76fdb8a9952244528f098da956d2f52acec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"],"08970e5b8411182a29412c177eff67ec1110095b":["6bc1e76fdb8a9952244528f098da956d2f52acec"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"],"6bc1e76fdb8a9952244528f098da956d2f52acec":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bc1e76fdb8a9952244528f098da956d2f52acec"],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"08970e5b8411182a29412c177eff67ec1110095b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}