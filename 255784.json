{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.TestCollector#collect(int).mjava","commits":[{"id":"b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07","date":1270909388,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.TestCollector#collect(int).mjava","pathOld":"lucene/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.TestCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int docNr) throws IOException {\n      float score = scorer.score();\n      docNr += docBase;\n      /* System.out.println(docNr + \" '\" + dBase.getDocs()[docNr] + \"': \" + score); */\n      Assert.assertTrue(queryText + \": positive score\", score > 0.0);\n      Assert.assertTrue(queryText + \": too many hits\", totalMatched < expectedDocNrs.length);\n      int i;\n      for (i = 0; i < expectedDocNrs.length; i++) {\n        if ((! encountered[i]) && (expectedDocNrs[i] == docNr)) {\n          encountered[i] = true;\n          break;\n        }\n      }\n      if (i == expectedDocNrs.length) {\n        Assert.assertTrue(queryText + \": doc nr for hit not expected: \" + docNr, false);\n      }\n      totalMatched++;\n    }\n\n","sourceOld":"    @Override\n    public void collect(int docNr) throws IOException {\n      float score = scorer.score();\n      docNr += docBase;\n      /* System.out.println(docNr + \" '\" + dBase.getDocs()[docNr] + \"': \" + score); */\n      Assert.assertTrue(queryText + \": positive score\", score > 0.0);\n      Assert.assertTrue(queryText + \": too many hits\", totalMatched < expectedDocNrs.length);\n      int i;\n      for (i = 0; i < expectedDocNrs.length; i++) {\n        if ((! encountered[i]) && (expectedDocNrs[i] == docNr)) {\n          encountered[i] = true;\n          break;\n        }\n      }\n      if (i == expectedDocNrs.length) {\n        Assert.assertTrue(queryText + \": doc nr for hit not expected: \" + docNr, false);\n      }\n      totalMatched++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a53a291ad9b1cc050d846b68758c061a55d52734","date":1310437344,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/surround/query/BooleanQueryTst.TestCollector#collect(int).mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst.TestCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int docNr) throws IOException {\n      float score = scorer.score();\n      docNr += docBase;\n      /* System.out.println(docNr + \" '\" + dBase.getDocs()[docNr] + \"': \" + score); */\n      Assert.assertTrue(queryText + \": positive score\", score > 0.0);\n      Assert.assertTrue(queryText + \": too many hits\", totalMatched < expectedDocNrs.length);\n      int i;\n      for (i = 0; i < expectedDocNrs.length; i++) {\n        if ((! encountered[i]) && (expectedDocNrs[i] == docNr)) {\n          encountered[i] = true;\n          break;\n        }\n      }\n      if (i == expectedDocNrs.length) {\n        Assert.assertTrue(queryText + \": doc nr for hit not expected: \" + docNr, false);\n      }\n      totalMatched++;\n    }\n\n","sourceOld":"    @Override\n    public void collect(int docNr) throws IOException {\n      float score = scorer.score();\n      docNr += docBase;\n      /* System.out.println(docNr + \" '\" + dBase.getDocs()[docNr] + \"': \" + score); */\n      Assert.assertTrue(queryText + \": positive score\", score > 0.0);\n      Assert.assertTrue(queryText + \": too many hits\", totalMatched < expectedDocNrs.length);\n      int i;\n      for (i = 0; i < expectedDocNrs.length; i++) {\n        if ((! encountered[i]) && (expectedDocNrs[i] == docNr)) {\n          encountered[i] = true;\n          break;\n        }\n      }\n      if (i == expectedDocNrs.length) {\n        Assert.assertTrue(queryText + \": doc nr for hit not expected: \" + docNr, false);\n      }\n      totalMatched++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a53a291ad9b1cc050d846b68758c061a55d52734":["b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a53a291ad9b1cc050d846b68758c061a55d52734"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07"],"b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07":["a53a291ad9b1cc050d846b68758c061a55d52734"],"a53a291ad9b1cc050d846b68758c061a55d52734":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}