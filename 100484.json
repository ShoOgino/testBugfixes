{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#updateDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]],Analyzer,Term).mjava","commits":[{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#updateDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]],Analyzer,Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#updateDocuments(Iterable[Document],Analyzer,Term).mjava","sourceNew":"  boolean updateDocuments(final Iterable<? extends Iterable<? extends IndexableField>> docs, final Analyzer analyzer,\n                          final Term delTerm) throws CorruptIndexException, IOException {\n    boolean maybeMerge = preUpdate();\n\n    final ThreadState perThread = flushControl.obtainAndLock();\n    final DocumentsWriterPerThread flushingDWPT;\n    \n    try {\n      if (!perThread.isActive()) {\n        ensureOpen();\n        assert false: \"perThread is not active but we are still open\";\n      }\n       \n      final DocumentsWriterPerThread dwpt = perThread.perThread;\n      try {\n        final int docCount = dwpt.updateDocuments(docs, analyzer, delTerm);\n        numDocsInRAM.addAndGet(docCount);\n      } finally {\n        if (dwpt.checkAndResetHasAborted()) {\n          flushControl.doOnAbort(perThread);\n        }\n      }\n      final boolean isUpdate = delTerm != null;\n      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);\n    } finally {\n      perThread.unlock();\n    }\n\n    return postUpdate(flushingDWPT, maybeMerge);\n  }\n\n","sourceOld":"  boolean updateDocuments(final Iterable<Document> docs, final Analyzer analyzer,\n                          final Term delTerm) throws CorruptIndexException, IOException {\n    boolean maybeMerge = preUpdate();\n\n    final ThreadState perThread = flushControl.obtainAndLock();\n    final DocumentsWriterPerThread flushingDWPT;\n    \n    try {\n      if (!perThread.isActive()) {\n        ensureOpen();\n        assert false: \"perThread is not active but we are still open\";\n      }\n       \n      final DocumentsWriterPerThread dwpt = perThread.perThread;\n      try {\n        final int docCount = dwpt.updateDocuments(docs, analyzer, delTerm);\n        numDocsInRAM.addAndGet(docCount);\n      } finally {\n        if (dwpt.checkAndResetHasAborted()) {\n          flushControl.doOnAbort(perThread);\n        }\n      }\n      final boolean isUpdate = delTerm != null;\n      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);\n    } finally {\n      perThread.unlock();\n    }\n\n    return postUpdate(flushingDWPT, maybeMerge);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#updateDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]],Analyzer,Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#updateDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]],Analyzer,Term).mjava","sourceNew":"  boolean updateDocuments(final Iterable<? extends Iterable<? extends IndexableField>> docs, final Analyzer analyzer,\n                          final Term delTerm) throws CorruptIndexException, IOException {\n    boolean maybeMerge = preUpdate();\n\n    final ThreadState perThread = flushControl.obtainAndLock();\n    final DocumentsWriterPerThread flushingDWPT;\n    \n    try {\n      if (!perThread.isActive()) {\n        ensureOpen();\n        assert false: \"perThread is not active but we are still open\";\n      }\n       \n      final DocumentsWriterPerThread dwpt = perThread.perThread;\n      try {\n        final int docCount = dwpt.updateDocuments(docs, analyzer, delTerm);\n        numDocsInRAM.addAndGet(docCount);\n      } finally {\n        if (dwpt.checkAndResetHasAborted()) {\n          flushControl.doOnAbort(perThread);\n        }\n      }\n      final boolean isUpdate = delTerm != null;\n      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);\n    } finally {\n      perThread.unlock();\n    }\n\n    return postUpdate(flushingDWPT, maybeMerge);\n  }\n\n","sourceOld":"  boolean updateDocuments(final Iterable<? extends Iterable<? extends IndexableField>> docs, final Analyzer analyzer,\n                          final Term delTerm) throws CorruptIndexException, IOException {\n    boolean maybeMerge = preUpdate();\n\n    final ThreadState perThread = flushControl.obtainAndLock();\n    final DocumentsWriterPerThread flushingDWPT;\n    \n    try {\n      if (!perThread.isActive()) {\n        ensureOpen();\n        assert false: \"perThread is not active but we are still open\";\n      }\n       \n      final DocumentsWriterPerThread dwpt = perThread.perThread;\n      try {\n        final int docCount = dwpt.updateDocuments(docs, analyzer, delTerm);\n        numDocsInRAM.addAndGet(docCount);\n      } finally {\n        if (dwpt.checkAndResetHasAborted()) {\n          flushControl.doOnAbort(perThread);\n        }\n      }\n      final boolean isUpdate = delTerm != null;\n      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);\n    } finally {\n      perThread.unlock();\n    }\n\n    return postUpdate(flushingDWPT, maybeMerge);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}