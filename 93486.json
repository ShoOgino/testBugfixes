{"path":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","sourceNew":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final AtomicReaderContext[] leaves = reader.getTopReaderContext().leaves();\n      final IndexReader[] subReaders = new IndexReader[leaves.length];\n      for (int i = 0; i < leaves.length; i++) {\n        subReaders[i] = new DocumentFilteredAtomicIndexReader(leaves[i], preserveFilter, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(w);\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","sourceOld":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final AtomicReaderContext[] leaves = reader.getTopReaderContext().leaves();\n      final IndexReader[] subReaders = new IndexReader[leaves.length];\n      for (int i = 0; i < leaves.length; i++) {\n        subReaders[i] = new DocumentFilteredAtomicIndexReader(leaves[i], preserveFilter, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(w);\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","sourceNew":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final List<AtomicReaderContext> leaves = reader.getTopReaderContext().leaves();\n      final IndexReader[] subReaders = new IndexReader[leaves.size()];\n      int i = 0;\n      for (final AtomicReaderContext ctx : leaves) {\n        subReaders[i++] = new DocumentFilteredAtomicIndexReader(ctx, preserveFilter, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(w);\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","sourceOld":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final AtomicReaderContext[] leaves = reader.getTopReaderContext().leaves();\n      final IndexReader[] subReaders = new IndexReader[leaves.length];\n      for (int i = 0; i < leaves.length; i++) {\n        subReaders[i] = new DocumentFilteredAtomicIndexReader(leaves[i], preserveFilter, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(w);\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa","d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d743dbdc40bef0a47a5d54d99623ef0c2eb5923e","date":1344896544,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","sourceNew":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final List<AtomicReaderContext> leaves = reader.leaves();\n      final IndexReader[] subReaders = new IndexReader[leaves.size()];\n      int i = 0;\n      for (final AtomicReaderContext ctx : leaves) {\n        subReaders[i++] = new DocumentFilteredAtomicIndexReader(ctx, preserveFilter, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(w);\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","sourceOld":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final List<AtomicReaderContext> leaves = reader.getTopReaderContext().leaves();\n      final IndexReader[] subReaders = new IndexReader[leaves.size()];\n      int i = 0;\n      for (final AtomicReaderContext ctx : leaves) {\n        subReaders[i++] = new DocumentFilteredAtomicIndexReader(ctx, preserveFilter, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(w);\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","bugFix":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","sourceNew":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final List<AtomicReaderContext> leaves = reader.leaves();\n      final IndexReader[] subReaders = new IndexReader[leaves.size()];\n      int i = 0;\n      for (final AtomicReaderContext ctx : leaves) {\n        subReaders[i++] = new DocumentFilteredAtomicIndexReader(ctx, preserveFilter, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(w);\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","sourceOld":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final List<AtomicReaderContext> leaves = reader.getTopReaderContext().leaves();\n      final IndexReader[] subReaders = new IndexReader[leaves.size()];\n      int i = 0;\n      for (final AtomicReaderContext ctx : leaves) {\n        subReaders[i++] = new DocumentFilteredAtomicIndexReader(ctx, preserveFilter, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(w);\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","sourceNew":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final List<AtomicReaderContext> leaves = reader.leaves();\n      final IndexReader[] subReaders = new IndexReader[leaves.size()];\n      int i = 0;\n      for (final AtomicReaderContext ctx : leaves) {\n        subReaders[i++] = new DocumentFilteredAtomicIndexReader(ctx, preserveFilter, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(w);\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","sourceOld":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final List<AtomicReaderContext> leaves = reader.getTopReaderContext().leaves();\n      final IndexReader[] subReaders = new IndexReader[leaves.size()];\n      int i = 0;\n      for (final AtomicReaderContext ctx : leaves) {\n        subReaders[i++] = new DocumentFilteredAtomicIndexReader(ctx, preserveFilter, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(w);\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","sourceNew":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final List<AtomicReaderContext> leaves = reader.leaves();\n      final IndexReader[] subReaders = new IndexReader[leaves.size()];\n      int i = 0;\n      for (final AtomicReaderContext ctx : leaves) {\n        subReaders[i++] = new DocumentFilteredAtomicIndexReader(ctx, preserveFilter, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        w.shutdown();\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","sourceOld":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final List<AtomicReaderContext> leaves = reader.leaves();\n      final IndexReader[] subReaders = new IndexReader[leaves.size()];\n      int i = 0;\n      for (final AtomicReaderContext ctx : leaves) {\n        subReaders[i++] = new DocumentFilteredAtomicIndexReader(ctx, preserveFilter, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(w);\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","sourceNew":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final List<AtomicReaderContext> leaves = reader.leaves();\n      final IndexReader[] subReaders = new IndexReader[leaves.size()];\n      int i = 0;\n      for (final AtomicReaderContext ctx : leaves) {\n        subReaders[i++] = new DocumentFilteredAtomicIndexReader(ctx, preserveFilter, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        w.close();\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","sourceOld":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final List<AtomicReaderContext> leaves = reader.leaves();\n      final IndexReader[] subReaders = new IndexReader[leaves.size()];\n      int i = 0;\n      for (final AtomicReaderContext ctx : leaves) {\n        subReaders[i++] = new DocumentFilteredAtomicIndexReader(ctx, preserveFilter, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        w.shutdown();\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","sourceNew":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final List<LeafReaderContext> leaves = reader.leaves();\n      final IndexReader[] subReaders = new IndexReader[leaves.size()];\n      int i = 0;\n      for (final LeafReaderContext ctx : leaves) {\n        subReaders[i++] = new DocumentFilteredLeafIndexReader(ctx, preserveFilter, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        w.close();\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","sourceOld":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final List<AtomicReaderContext> leaves = reader.leaves();\n      final IndexReader[] subReaders = new IndexReader[leaves.size()];\n      int i = 0;\n      for (final AtomicReaderContext ctx : leaves) {\n        subReaders[i++] = new DocumentFilteredAtomicIndexReader(ctx, preserveFilter, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        w.close();\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa","date":1420599177,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","sourceNew":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final List<LeafReaderContext> leaves = reader.leaves();\n      final LeafReader[] subReaders = new LeafReader[leaves.size()];\n      int i = 0;\n      for (final LeafReaderContext ctx : leaves) {\n        subReaders[i++] = new DocumentFilteredLeafIndexReader(ctx, preserveFilter, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        w.close();\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","sourceOld":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final List<LeafReaderContext> leaves = reader.leaves();\n      final IndexReader[] subReaders = new IndexReader[leaves.size()];\n      int i = 0;\n      for (final LeafReaderContext ctx : leaves) {\n        subReaders[i++] = new DocumentFilteredLeafIndexReader(ctx, preserveFilter, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        w.close();\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","bugFix":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"505bff044e47a553f461b6f4484d1d08faf4ac85","date":1420728783,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,DirectoryReader,Filter,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","sourceNew":"  private void createIndex(IndexWriterConfig config, Directory target, DirectoryReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final List<LeafReaderContext> leaves = reader.leaves();\n      final CodecReader[] subReaders = new CodecReader[leaves.size()];\n      int i = 0;\n      for (final LeafReaderContext ctx : leaves) {\n        subReaders[i++] = new DocumentFilteredLeafIndexReader(ctx, preserveFilter, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        w.close();\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","sourceOld":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final List<LeafReaderContext> leaves = reader.leaves();\n      final LeafReader[] subReaders = new LeafReader[leaves.size()];\n      int i = 0;\n      for (final LeafReaderContext ctx : leaves) {\n        subReaders[i++] = new DocumentFilteredLeafIndexReader(ctx, preserveFilter, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        w.close();\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"d743dbdc40bef0a47a5d54d99623ef0c2eb5923e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["505bff044e47a553f461b6f4484d1d08faf4ac85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","d743dbdc40bef0a47a5d54d99623ef0c2eb5923e","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d743dbdc40bef0a47a5d54d99623ef0c2eb5923e":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","ae14298f4eec6d5faee6a149f88ba57d14a6f21a","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}