{"path":"lucene/core/src/java/org/apache/lucene/util/IntsRef#deepCopyOf(IntsRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IntsRef#deepCopyOf(IntsRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/IntsRef#deepCopyOf(IntsRef).mjava","sourceNew":"  /**\n   * Creates a new IntsRef that points to a copy of the ints from \n   * <code>other</code>\n   * <p>\n   * The returned IntsRef will have a length of other.length\n   * and an offset of zero.\n   */\n  public static IntsRef deepCopyOf(IntsRef other) {\n    IntsRef clone = new IntsRef();\n    clone.copyInts(other);\n    return clone;\n  }\n\n","sourceOld":"  /**\n   * Creates a new IntsRef that points to a copy of the ints from \n   * <code>other</code>\n   * <p>\n   * The returned IntsRef will have a length of other.length\n   * and an offset of zero.\n   */\n  public static IntsRef deepCopyOf(IntsRef other) {\n    IntsRef clone = new IntsRef();\n    clone.copyInts(other);\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IntsRef#deepCopyOf(IntsRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IntsRef#deepCopyOf(IntsRef).mjava","sourceNew":"  /**\n   * Creates a new IntsRef that points to a copy of the ints from \n   * <code>other</code>\n   * <p>\n   * The returned IntsRef will have a length of other.length\n   * and an offset of zero.\n   */\n  public static IntsRef deepCopyOf(IntsRef other) {\n    return new IntsRef(Arrays.copyOfRange(other.ints, other.offset, other.offset + other.length), 0, other.length);\n  }\n\n","sourceOld":"  /**\n   * Creates a new IntsRef that points to a copy of the ints from \n   * <code>other</code>\n   * <p>\n   * The returned IntsRef will have a length of other.length\n   * and an offset of zero.\n   */\n  public static IntsRef deepCopyOf(IntsRef other) {\n    IntsRef clone = new IntsRef();\n    clone.copyInts(other);\n    return clone;\n  }\n\n","bugFix":["e6e919043fa85ee891123768dd655a98edbbf63c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IntsRef#deepCopyOf(IntsRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IntsRef#deepCopyOf(IntsRef).mjava","sourceNew":"  /**\n   * Creates a new IntsRef that points to a copy of the ints from \n   * <code>other</code>\n   * <p>\n   * The returned IntsRef will have a length of other.length\n   * and an offset of zero.\n   */\n  public static IntsRef deepCopyOf(IntsRef other) {\n    return new IntsRef(ArrayUtil.copyOfSubArray(other.ints, other.offset, other.offset + other.length), 0, other.length);\n  }\n\n","sourceOld":"  /**\n   * Creates a new IntsRef that points to a copy of the ints from \n   * <code>other</code>\n   * <p>\n   * The returned IntsRef will have a length of other.length\n   * and an offset of zero.\n   */\n  public static IntsRef deepCopyOf(IntsRef other) {\n    return new IntsRef(Arrays.copyOfRange(other.ints, other.offset, other.offset + other.length), 0, other.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IntsRef#deepCopyOf(IntsRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IntsRef#deepCopyOf(IntsRef).mjava","sourceNew":"  /**\n   * Creates a new IntsRef that points to a copy of the ints from \n   * <code>other</code>\n   * <p>\n   * The returned IntsRef will have a length of other.length\n   * and an offset of zero.\n   */\n  public static IntsRef deepCopyOf(IntsRef other) {\n    return new IntsRef(ArrayUtil.copyOfSubArray(other.ints, other.offset, other.offset + other.length), 0, other.length);\n  }\n\n","sourceOld":"  /**\n   * Creates a new IntsRef that points to a copy of the ints from \n   * <code>other</code>\n   * <p>\n   * The returned IntsRef will have a length of other.length\n   * and an offset of zero.\n   */\n  public static IntsRef deepCopyOf(IntsRef other) {\n    return new IntsRef(Arrays.copyOfRange(other.ints, other.offset, other.offset + other.length), 0, other.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IntsRef#deepCopyOf(IntsRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IntsRef#deepCopyOf(IntsRef).mjava","sourceNew":"  /**\n   * Creates a new IntsRef that points to a copy of the ints from \n   * <code>other</code>\n   * <p>\n   * The returned IntsRef will have a length of other.length\n   * and an offset of zero.\n   */\n  public static IntsRef deepCopyOf(IntsRef other) {\n    return new IntsRef(ArrayUtil.copyOfSubArray(other.ints, other.offset, other.offset + other.length), 0, other.length);\n  }\n\n","sourceOld":"  /**\n   * Creates a new IntsRef that points to a copy of the ints from \n   * <code>other</code>\n   * <p>\n   * The returned IntsRef will have a length of other.length\n   * and an offset of zero.\n   */\n  public static IntsRef deepCopyOf(IntsRef other) {\n    return new IntsRef(Arrays.copyOfRange(other.ints, other.offset, other.offset + other.length), 0, other.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","9798d0818e7a880546802b509792d3f3d57babd2"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9798d0818e7a880546802b509792d3f3d57babd2":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9798d0818e7a880546802b509792d3f3d57babd2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["b70042a8a492f7054d480ccdd2be9796510d4327","9798d0818e7a880546802b509792d3f3d57babd2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}