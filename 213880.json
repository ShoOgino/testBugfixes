{"path":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#getTempDir(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#getTempDir(String).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/_TestUtil#getTempDir(String).mjava","sourceNew":"  /** Returns temp dir, based on String arg in its name;\n   *  does not create the directory. */\n  public static File getTempDir(String desc) {\n    try {\n      File f = createTempFile(desc, \"tmp\", LuceneTestCase.TEMP_DIR);\n      f.delete();\n      LuceneTestCase.registerTempDir(f);\n      return f;\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns temp dir, based on String arg in its name;\n   *  does not create the directory. */\n  public static File getTempDir(String desc) {\n    try {\n      File f = createTempFile(desc, \"tmp\", LuceneTestCase.TEMP_DIR);\n      f.delete();\n      LuceneTestCase.registerTempDir(f);\n      return f;\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#getTempDir(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#getTempDir(String).mjava","sourceNew":"  /** Returns temp dir, based on String arg in its name;\n   *  does not create the directory. */\n  public static File getTempDir(String desc) {\n    try {\n      File f = createTempFile(desc, \"tmp\", LuceneTestCase.TEMP_DIR);\n      f.delete();\n      LuceneTestCase.closeAfterSuite(new CloseableFile(f));\n      return f;\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns temp dir, based on String arg in its name;\n   *  does not create the directory. */\n  public static File getTempDir(String desc) {\n    try {\n      File f = createTempFile(desc, \"tmp\", LuceneTestCase.TEMP_DIR);\n      f.delete();\n      LuceneTestCase.registerTempDir(f);\n      return f;\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"765293980c33173623f760deb48458d0f47dc8c3","date":1345119992,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#getTempDir(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#getTempDir(String).mjava","sourceNew":"  /** Returns temp dir, based on String arg in its name;\n   *  does not create the directory. */\n  public static File getTempDir(String desc) {\n    try {\n      File f = createTempFile(desc, \"tmp\", LuceneTestCase.TEMP_DIR);\n      f.delete();\n      LuceneTestCase.closeAfterSuite(new CloseableFile(f, LuceneTestCase.suiteFailureMarker));\n      return f;\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns temp dir, based on String arg in its name;\n   *  does not create the directory. */\n  public static File getTempDir(String desc) {\n    try {\n      File f = createTempFile(desc, \"tmp\", LuceneTestCase.TEMP_DIR);\n      f.delete();\n      LuceneTestCase.closeAfterSuite(new CloseableFile(f));\n      return f;\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["ac649ee6a6903dadf0d051ad5adbfcabe4da9bb0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#getTempDir(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#getTempDir(String).mjava","sourceNew":"  /** Returns temp dir, based on String arg in its name;\n   *  does not create the directory. */\n  public static File getTempDir(String desc) {\n    try {\n      File f = createTempFile(desc, \"tmp\", LuceneTestCase.TEMP_DIR);\n      f.delete();\n      LuceneTestCase.closeAfterSuite(new CloseableFile(f, LuceneTestCase.suiteFailureMarker));\n      return f;\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns temp dir, based on String arg in its name;\n   *  does not create the directory. */\n  public static File getTempDir(String desc) {\n    try {\n      File f = createTempFile(desc, \"tmp\", LuceneTestCase.TEMP_DIR);\n      f.delete();\n      LuceneTestCase.closeAfterSuite(new CloseableFile(f));\n      return f;\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#getTempDir(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#getTempDir(String).mjava","sourceNew":"  /** Returns temp dir, based on String arg in its name;\n   *  does not create the directory. */\n  public static File getTempDir(String desc) {\n    try {\n      File f = createTempFile(desc, \"tmp\", LuceneTestCase.TEMP_DIR);\n      f.delete();\n      LuceneTestCase.closeAfterSuite(new CloseableFile(f, LuceneTestCase.suiteFailureMarker));\n      return f;\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns temp dir, based on String arg in its name;\n   *  does not create the directory. */\n  public static File getTempDir(String desc) {\n    try {\n      File f = createTempFile(desc, \"tmp\", LuceneTestCase.TEMP_DIR);\n      f.delete();\n      LuceneTestCase.closeAfterSuite(new CloseableFile(f));\n      return f;\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac649ee6a6903dadf0d051ad5adbfcabe4da9bb0","date":1356250502,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#getTempDir(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#getTempDir(String).mjava","sourceNew":"  /**\n   * Returns a temp directory, based on the given description. Creates the\n   * directory.\n   */\n  public static File getTempDir(String desc) {\n    if (desc.length() < 3) {\n      throw new IllegalArgumentException(\"description must be at least 3 characters\");\n    }\n    // always pull a long from master random. that way, the randomness of the test\n    // is not affected by whether it initialized the counter (in genTempFile) or not.\n    // note that the Random used by genTempFile is *not* the master Random, and therefore\n    // does not affect the randomness of the test.\n    final Random random = new Random(RandomizedContext.current().getRandom().nextLong());\n    int attempt = 0;\n    File f;\n    do {\n      f = genTempFile(random, desc, \"tmp\", LuceneTestCase.TEMP_DIR);\n    } while (!f.mkdir() && (attempt++) < GET_TEMP_DIR_RETRY_THRESHOLD);\n    \n    if (attempt > GET_TEMP_DIR_RETRY_THRESHOLD) {\n      throw new RuntimeException(\n          \"failed to get a temporary dir too many times. check your temp directory and consider manually cleaning it.\");\n    }\n    \n    LuceneTestCase.closeAfterSuite(new CloseableFile(f, LuceneTestCase.suiteFailureMarker));\n    return f;\n  }\n\n","sourceOld":"  /** Returns temp dir, based on String arg in its name;\n   *  does not create the directory. */\n  public static File getTempDir(String desc) {\n    try {\n      File f = createTempFile(desc, \"tmp\", LuceneTestCase.TEMP_DIR);\n      f.delete();\n      LuceneTestCase.closeAfterSuite(new CloseableFile(f, LuceneTestCase.suiteFailureMarker));\n      return f;\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":["765293980c33173623f760deb48458d0f47dc8c3","4ff248e38253380f4f8ae9cc4c3c5ceae80e3071","9f1405cedaef6ce1e1b563d7b35ee26c6518c81e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#getTempDir(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#getTempDir(String).mjava","sourceNew":"  /**\n   * Returns a temp directory, based on the given description. Creates the\n   * directory.\n   */\n  public static File getTempDir(String desc) {\n    if (desc.length() < 3) {\n      throw new IllegalArgumentException(\"description must be at least 3 characters\");\n    }\n    // always pull a long from master random. that way, the randomness of the test\n    // is not affected by whether it initialized the counter (in genTempFile) or not.\n    // note that the Random used by genTempFile is *not* the master Random, and therefore\n    // does not affect the randomness of the test.\n    final Random random = new Random(RandomizedContext.current().getRandom().nextLong());\n    int attempt = 0;\n    File f;\n    do {\n      f = genTempFile(random, desc, \"tmp\", LuceneTestCase.TEMP_DIR);\n    } while (!f.mkdir() && (attempt++) < GET_TEMP_DIR_RETRY_THRESHOLD);\n    \n    if (attempt > GET_TEMP_DIR_RETRY_THRESHOLD) {\n      throw new RuntimeException(\n          \"failed to get a temporary dir too many times. check your temp directory and consider manually cleaning it.\");\n    }\n    \n    LuceneTestCase.closeAfterSuite(new CloseableFile(f, LuceneTestCase.suiteFailureMarker));\n    return f;\n  }\n\n","sourceOld":"  /** Returns temp dir, based on String arg in its name;\n   *  does not create the directory. */\n  public static File getTempDir(String desc) {\n    try {\n      File f = createTempFile(desc, \"tmp\", LuceneTestCase.TEMP_DIR);\n      f.delete();\n      LuceneTestCase.closeAfterSuite(new CloseableFile(f, LuceneTestCase.suiteFailureMarker));\n      return f;\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":5,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#getTempDir(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#getTempDir(String).mjava","sourceNew":"  /**\n   * Returns a temp directory, based on the given description. Creates the\n   * directory.\n   */\n  public static File getTempDir(String desc) {\n    if (desc.length() < 3) {\n      throw new IllegalArgumentException(\"description must be at least 3 characters\");\n    }\n    // always pull a long from master random. that way, the randomness of the test\n    // is not affected by whether it initialized the counter (in genTempFile) or not.\n    // note that the Random used by genTempFile is *not* the master Random, and therefore\n    // does not affect the randomness of the test.\n    final Random random = new Random(RandomizedContext.current().getRandom().nextLong());\n    int attempt = 0;\n    File f;\n    do {\n      f = genTempFile(random, desc, \"tmp\", LuceneTestCase.TEMP_DIR);\n    } while (!f.mkdir() && (attempt++) < GET_TEMP_DIR_RETRY_THRESHOLD);\n    \n    if (attempt > GET_TEMP_DIR_RETRY_THRESHOLD) {\n      throw new RuntimeException(\n          \"failed to get a temporary dir too many times. check your temp directory and consider manually cleaning it.\");\n    }\n    \n    LuceneTestCase.closeAfterSuite(new CloseableFile(f, LuceneTestCase.suiteFailureMarker));\n    return f;\n  }\n\n","sourceOld":"  /**\n   * Returns a temp directory, based on the given description. Creates the\n   * directory.\n   */\n  public static File getTempDir(String desc) {\n    if (desc.length() < 3) {\n      throw new IllegalArgumentException(\"description must be at least 3 characters\");\n    }\n    // always pull a long from master random. that way, the randomness of the test\n    // is not affected by whether it initialized the counter (in genTempFile) or not.\n    // note that the Random used by genTempFile is *not* the master Random, and therefore\n    // does not affect the randomness of the test.\n    final Random random = new Random(RandomizedContext.current().getRandom().nextLong());\n    int attempt = 0;\n    File f;\n    do {\n      f = genTempFile(random, desc, \"tmp\", LuceneTestCase.TEMP_DIR);\n    } while (!f.mkdir() && (attempt++) < GET_TEMP_DIR_RETRY_THRESHOLD);\n    \n    if (attempt > GET_TEMP_DIR_RETRY_THRESHOLD) {\n      throw new RuntimeException(\n          \"failed to get a temporary dir too many times. check your temp directory and consider manually cleaning it.\");\n    }\n    \n    LuceneTestCase.closeAfterSuite(new CloseableFile(f, LuceneTestCase.suiteFailureMarker));\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["765293980c33173623f760deb48458d0f47dc8c3","ac649ee6a6903dadf0d051ad5adbfcabe4da9bb0"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["5da0b42730b6b99b31389ef94cb97384e83b9ede","765293980c33173623f760deb48458d0f47dc8c3"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ac649ee6a6903dadf0d051ad5adbfcabe4da9bb0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["5da0b42730b6b99b31389ef94cb97384e83b9ede","765293980c33173623f760deb48458d0f47dc8c3"],"ac649ee6a6903dadf0d051ad5adbfcabe4da9bb0":["765293980c33173623f760deb48458d0f47dc8c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"765293980c33173623f760deb48458d0f47dc8c3":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","765293980c33173623f760deb48458d0f47dc8c3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"ac649ee6a6903dadf0d051ad5adbfcabe4da9bb0":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"765293980c33173623f760deb48458d0f47dc8c3":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","ac649ee6a6903dadf0d051ad5adbfcabe4da9bb0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}