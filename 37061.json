{"path":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\",\"d1\"));\n    dq.add(tq(\"dek\",\"DOES_NOT_EXIST\"));\n\n    QueryUtils.check(dq,s);\n\n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer(r, true, false);\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \" + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\",\"d1\"));\n    dq.add(tq(\"dek\",\"DOES_NOT_EXIST\"));\n\n    QueryUtils.check(dq,s);\n\n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer(r, true, false);\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \" + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(dq, s);\n    \n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer(r, true, false);\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\",\"d1\"));\n    dq.add(tq(\"dek\",\"DOES_NOT_EXIST\"));\n\n    QueryUtils.check(dq,s);\n\n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer(r, true, false);\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \" + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(dq, s);\n    \n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer(r, true, false);\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\",\"d1\"));\n    dq.add(tq(\"dek\",\"DOES_NOT_EXIST\"));\n\n    QueryUtils.check(dq,s);\n\n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer(r, true, false);\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \" + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d302ba328993a5b449c2e0b3b5e15ae53e45879","date":1281609097,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(dq, s);\n    \n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer(s.getIndexReader(), true, false);\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(dq, s);\n    \n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer(r, true, false);\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    \n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer(s.getIndexReader(), true, false);\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(dq, s);\n    \n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer(s.getIndexReader(), true, false);\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    \n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer(s.getIndexReader(), true, false);\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(dq, s);\n    \n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer(s.getIndexReader(), true, false);\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    \n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer(s.getIndexReader(), true, false);\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(dq, s);\n    \n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer(r, true, false);\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    assertTrue(s.getTopReaderContext().isAtomic);\n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer(s.getTopReaderContext(), true, false);\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    \n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer(s.getIndexReader(), true, false);\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    assertTrue(s.getTopReaderContext().isAtomic);\n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer((AtomicReaderContext)s.getTopReaderContext(), true, false);\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    assertTrue(s.getTopReaderContext().isAtomic);\n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer(s.getTopReaderContext(), true, false);\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc63f17f42c64d6ccc8c361cfcdf074f115f770c","date":1294930751,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    assertTrue(s.getTopReaderContext().isAtomic);\n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer((AtomicReaderContext)s.getTopReaderContext(), ScorerContext.def());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    assertTrue(s.getTopReaderContext().isAtomic);\n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer((AtomicReaderContext)s.getTopReaderContext(), true, false);\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    assertTrue(s.getTopReaderContext().isAtomic);\n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer((AtomicReaderContext)s.getTopReaderContext(), ScorerContext.def());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    \n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer(s.getIndexReader(), true, false);\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    assertTrue(s.getTopReaderContext().isAtomic);\n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer((AtomicReaderContext)s.getTopReaderContext(), ScorerContext.def());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    \n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer(s.getIndexReader(), true, false);\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7fee42303a18cc146043c96f66491311b345d9","date":1308246904,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    assertTrue(s.getTopReaderContext().isAtomic);\n    final Weight dw = s.createNormalizedWeight(dq);\n    final Scorer ds = dw.scorer((AtomicReaderContext)s.getTopReaderContext(), ScorerContext.def());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    assertTrue(s.getTopReaderContext().isAtomic);\n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer((AtomicReaderContext)s.getTopReaderContext(), ScorerContext.def());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","date":1308291005,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    assertTrue(s.getTopReaderContext().isAtomic);\n    final Weight dw = s.createNormalizedWeight(dq);\n    final Scorer ds = dw.scorer((AtomicReaderContext)s.getTopReaderContext(), ScorerContext.def());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    assertTrue(s.getTopReaderContext().isAtomic);\n    final Weight dw = dq.weight(s);\n    final Scorer ds = dw.scorer((AtomicReaderContext)s.getTopReaderContext(), ScorerContext.def());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    assertTrue(s.getTopReaderContext().isAtomic);\n    final Weight dw = s.createNormalizedWeight(dq);\n    AtomicReaderContext context = (AtomicReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, true, false, context.reader.getLiveDocs());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    assertTrue(s.getTopReaderContext().isAtomic);\n    final Weight dw = s.createNormalizedWeight(dq);\n    final Scorer ds = dw.scorer((AtomicReaderContext)s.getTopReaderContext(), ScorerContext.def());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    assertTrue(s.getTopReaderContext().isAtomic);\n    final Weight dw = s.createNormalizedWeight(dq);\n    AtomicReaderContext context = (AtomicReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, true, false, context.reader().getLiveDocs());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    assertTrue(s.getTopReaderContext().isAtomic);\n    final Weight dw = s.createNormalizedWeight(dq);\n    AtomicReaderContext context = (AtomicReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, true, false, context.reader.getLiveDocs());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2ec9a9068164200de82395f0e8537a9d9302f3f","date":1327856476,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    assertTrue(s.getTopReaderContext() instanceof AtomicReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq);\n    AtomicReaderContext context = (AtomicReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, true, false, context.reader().getLiveDocs());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    assertTrue(s.getTopReaderContext().isAtomic);\n    final Weight dw = s.createNormalizedWeight(dq);\n    AtomicReaderContext context = (AtomicReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, true, false, context.reader().getLiveDocs());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    assertTrue(s.getTopReaderContext() instanceof AtomicReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq);\n    AtomicReaderContext context = (AtomicReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, true, false, context.reader().getLiveDocs());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    assertTrue(s.getTopReaderContext().isAtomic);\n    final Weight dw = s.createNormalizedWeight(dq);\n    AtomicReaderContext context = (AtomicReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, true, false, context.reader.getLiveDocs());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testSkipToFirsttimeMiss().mjava","sourceNew":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    assertTrue(s.getTopReaderContext() instanceof AtomicReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq);\n    AtomicReaderContext context = (AtomicReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, true, false, context.reader().getLiveDocs());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","sourceOld":"  public void testSkipToFirsttimeMiss() throws IOException {\n    final DisjunctionMaxQuery dq = new DisjunctionMaxQuery(0.0f);\n    dq.add(tq(\"id\", \"d1\"));\n    dq.add(tq(\"dek\", \"DOES_NOT_EXIST\"));\n    \n    QueryUtils.check(random, dq, s);\n    assertTrue(s.getTopReaderContext() instanceof AtomicReaderContext);\n    final Weight dw = s.createNormalizedWeight(dq);\n    AtomicReaderContext context = (AtomicReaderContext)s.getTopReaderContext();\n    final Scorer ds = dw.scorer(context, true, false, context.reader().getLiveDocs());\n    final boolean skipOk = ds.advance(3) != DocIdSetIterator.NO_MORE_DOCS;\n    if (skipOk) {\n      fail(\"firsttime skipTo found a match? ... \"\n          + r.document(ds.docID()).get(\"id\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["0d302ba328993a5b449c2e0b3b5e15ae53e45879","53a31399f2471493d67b19a95c028a74e0113b6a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["6f7fee42303a18cc146043c96f66491311b345d9"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["c084e47df29de3330311d69dabf515ceaa989512"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","c084e47df29de3330311d69dabf515ceaa989512"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","53a31399f2471493d67b19a95c028a74e0113b6a"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3fc1f3f78b299e125f7e60f43b5d457392bea23f","a2ec9a9068164200de82395f0e8537a9d9302f3f"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c","6f7fee42303a18cc146043c96f66491311b345d9"],"6f7fee42303a18cc146043c96f66491311b345d9":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"c084e47df29de3330311d69dabf515ceaa989512":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"53a31399f2471493d67b19a95c028a74e0113b6a":["0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"a2ec9a9068164200de82395f0e8537a9d9302f3f":["6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["53a31399f2471493d67b19a95c028a74e0113b6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["6fff8f4b218bd0626afcdce82027bafeb84a50a4","5cab9a86bd67202d20b6adc463008c8e982b070a"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["a2ec9a9068164200de82395f0e8537a9d9302f3f"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","53a31399f2471493d67b19a95c028a74e0113b6a"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","6f7fee42303a18cc146043c96f66491311b345d9","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":[],"6f7fee42303a18cc146043c96f66491311b345d9":["3fc1f3f78b299e125f7e60f43b5d457392bea23f","0a2903ea38ae3e636b93a08c52a5e37ae939cf6b"],"c084e47df29de3330311d69dabf515ceaa989512":["0d302ba328993a5b449c2e0b3b5e15ae53e45879","5f4e87790277826a2aea119328600dfb07761f32"],"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"a2ec9a9068164200de82395f0e8537a9d9302f3f":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5f4e87790277826a2aea119328600dfb07761f32","c084e47df29de3330311d69dabf515ceaa989512"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}