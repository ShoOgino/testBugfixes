{"path":"src/test/org/apache/solr/analysis/TestSynonymFilter#testOffsetBug().mjava","commits":[{"id":"751bd9c20e69c4ab60e9b7c5f01ad1a3ff353226","date":1172784996,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestSynonymFilter#testOffsetBug().mjava","pathOld":"/dev/null","sourceNew":"  public void testOffsetBug() throws IOException {\n    // With the following rules:\n    // a a=>b\n    // x=>y\n    // analysing \"a x\" causes \"y\" to have a bad offset (end less than start)\n    // SOLR-167\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n\n    map.add(strings(\"a a\"), tokens(\"b\"), orig, merge);\n    map.add(strings(\"x\"), tokens(\"y\"), orig, merge);\n\n    System.out.println(getTokList(map,\"a,1,0,1 a,1,2,3 x,1,4,5\",false));\n\n    // \"a a x\" => \"b y\"\n    assertTokEqualOff(getTokList(map,\"a,1,0,1 a,1,2,3 x,1,4,5\",false), tokens(\"b,1,0,3 y,1,4,5\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fd023a662cc25ae7e0ad0f33d71c476a16d0579","date":1261403630,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestSynonymFilter#testOffsetBug().mjava","pathOld":"src/test/org/apache/solr/analysis/TestSynonymFilter#testOffsetBug().mjava","sourceNew":"  public void testOffsetBug() throws IOException {\n    // With the following rules:\n    // a a=>b\n    // x=>y\n    // analysing \"a x\" causes \"y\" to have a bad offset (end less than start)\n    // SOLR-167\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n\n    map.add(strings(\"a a\"), tokens(\"b\"), orig, merge);\n    map.add(strings(\"x\"), tokens(\"y\"), orig, merge);\n\n    // \"a a x\" => \"b y\"\n    assertTokenizesTo(map, tokens(\"a,1,0,1 a,1,2,3 x,1,4,5\"),\n        new String[] { \"b\", \"y\" },\n        new int[] { 0, 4 },\n        new int[] { 3, 5 },\n        new int[] { 1, 1 });\n  }\n\n","sourceOld":"  public void testOffsetBug() throws IOException {\n    // With the following rules:\n    // a a=>b\n    // x=>y\n    // analysing \"a x\" causes \"y\" to have a bad offset (end less than start)\n    // SOLR-167\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n\n    map.add(strings(\"a a\"), tokens(\"b\"), orig, merge);\n    map.add(strings(\"x\"), tokens(\"y\"), orig, merge);\n\n    System.out.println(getTokList(map,\"a,1,0,1 a,1,2,3 x,1,4,5\",false));\n\n    // \"a a x\" => \"b y\"\n    assertTokEqualOff(getTokList(map,\"a,1,0,1 a,1,2,3 x,1,4,5\",false), tokens(\"b,1,0,3 y,1,4,5\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestSynonymFilter#testOffsetBug().mjava","pathOld":"src/test/org/apache/solr/analysis/TestSynonymFilter#testOffsetBug().mjava","sourceNew":"  public void testOffsetBug() throws IOException {\n    // With the following rules:\n    // a a=>b\n    // x=>y\n    // analysing \"a x\" causes \"y\" to have a bad offset (end less than start)\n    // SOLR-167\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n\n    map.add(strings(\"a a\"), tokens(\"b\"), orig, merge);\n    map.add(strings(\"x\"), tokens(\"y\"), orig, merge);\n\n    // \"a a x\" => \"b y\"\n    assertTokenizesTo(map, tokens(\"a,1,0,1 a,1,2,3 x,1,4,5\"),\n        new String[] { \"b\", \"y\" },\n        new int[] { 0, 4 },\n        new int[] { 3, 5 },\n        new int[] { 1, 1 });\n  }\n\n","sourceOld":"  public void testOffsetBug() throws IOException {\n    // With the following rules:\n    // a a=>b\n    // x=>y\n    // analysing \"a x\" causes \"y\" to have a bad offset (end less than start)\n    // SOLR-167\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n\n    map.add(strings(\"a a\"), tokens(\"b\"), orig, merge);\n    map.add(strings(\"x\"), tokens(\"y\"), orig, merge);\n\n    // \"a a x\" => \"b y\"\n    assertTokenizesTo(map, tokens(\"a,1,0,1 a,1,2,3 x,1,4,5\"),\n        new String[] { \"b\", \"y\" },\n        new int[] { 0, 4 },\n        new int[] { 3, 5 },\n        new int[] { 1, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["751bd9c20e69c4ab60e9b7c5f01ad1a3ff353226"],"751bd9c20e69c4ab60e9b7c5f01ad1a3ff353226":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["751bd9c20e69c4ab60e9b7c5f01ad1a3ff353226"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["ad94625fb8d088209f46650c8097196fec67f00c"],"751bd9c20e69c4ab60e9b7c5f01ad1a3ff353226":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}