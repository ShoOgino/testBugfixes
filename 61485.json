{"path":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#put(K,V).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#put(K,V).mjava","pathOld":"/dev/null","sourceNew":"  public V put(K key, V val) {\n    if (val == null) return null;\n    CacheEntry<K,V> e = new CacheEntry<K,V>(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry<K,V> oldCacheEntry = map.put(key, e);\n    int currentSize;\n    if (oldCacheEntry == null) {\n      currentSize = stats.size.incrementAndGet();\n    } else {\n      currentSize = stats.size.get();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (currentSize > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else if (cleanupThread != null){\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#put(K,V).mjava","sourceNew":null,"sourceOld":"  public V put(K key, V val) {\n    if (val == null) return null;\n    CacheEntry<K,V> e = new CacheEntry<K,V>(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry<K,V> oldCacheEntry = map.put(key, e);\n    int currentSize;\n    if (oldCacheEntry == null) {\n      currentSize = stats.size.incrementAndGet();\n    } else {\n      currentSize = stats.size.get();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (currentSize > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else if (cleanupThread != null){\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#put(K,V).mjava","pathOld":"src/common/org/apache/solr/common/util/ConcurrentLRUCache#put(K,V).mjava","sourceNew":"  public V put(K key, V val) {\n    if (val == null) return null;\n    CacheEntry<K,V> e = new CacheEntry<K,V>(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry<K,V> oldCacheEntry = map.put(key, e);\n    int currentSize;\n    if (oldCacheEntry == null) {\n      currentSize = stats.size.incrementAndGet();\n    } else {\n      currentSize = stats.size.get();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (currentSize > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else if (cleanupThread != null){\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","sourceOld":"  public V put(K key, V val) {\n    if (val == null) return null;\n    CacheEntry<K,V> e = new CacheEntry<K,V>(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry<K,V> oldCacheEntry = map.put(key, e);\n    int currentSize;\n    if (oldCacheEntry == null) {\n      currentSize = stats.size.incrementAndGet();\n    } else {\n      currentSize = stats.size.get();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (currentSize > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else if (cleanupThread != null){\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#put(K,V).mjava","pathOld":"/dev/null","sourceNew":"  public V put(K key, V val) {\n    if (val == null) return null;\n    CacheEntry<K,V> e = new CacheEntry<K,V>(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry<K,V> oldCacheEntry = map.put(key, e);\n    int currentSize;\n    if (oldCacheEntry == null) {\n      currentSize = stats.size.incrementAndGet();\n    } else {\n      currentSize = stats.size.get();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (currentSize > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else if (cleanupThread != null){\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#put(K,V).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#put(K,V).mjava","sourceNew":"  public V put(K key, V val) {\n    if (val == null) return null;\n    CacheEntry<K,V> e = new CacheEntry<K,V>(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry<K,V> oldCacheEntry = map.put(key, e);\n    int currentSize;\n    if (oldCacheEntry == null) {\n      currentSize = stats.size.incrementAndGet();\n    } else {\n      currentSize = stats.size.get();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (currentSize > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          @Override\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else if (cleanupThread != null){\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","sourceOld":"  public V put(K key, V val) {\n    if (val == null) return null;\n    CacheEntry<K,V> e = new CacheEntry<K,V>(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry<K,V> oldCacheEntry = map.put(key, e);\n    int currentSize;\n    if (oldCacheEntry == null) {\n      currentSize = stats.size.incrementAndGet();\n    } else {\n      currentSize = stats.size.get();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (currentSize > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else if (cleanupThread != null){\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#put(K,V).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#put(K,V).mjava","sourceNew":"  public V put(K key, V val) {\n    if (val == null) return null;\n    CacheEntry<K,V> e = new CacheEntry<K,V>(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry<K,V> oldCacheEntry = map.put(key, e);\n    int currentSize;\n    if (oldCacheEntry == null) {\n      currentSize = stats.size.incrementAndGet();\n    } else {\n      currentSize = stats.size.get();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (currentSize > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          @Override\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else if (cleanupThread != null){\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","sourceOld":"  public V put(K key, V val) {\n    if (val == null) return null;\n    CacheEntry<K,V> e = new CacheEntry<K,V>(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry<K,V> oldCacheEntry = map.put(key, e);\n    int currentSize;\n    if (oldCacheEntry == null) {\n      currentSize = stats.size.incrementAndGet();\n    } else {\n      currentSize = stats.size.get();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (currentSize > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else if (cleanupThread != null){\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#put(K,V).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#put(K,V).mjava","sourceNew":"  public V put(K key, V val) {\n    if (val == null) return null;\n    CacheEntry<K,V> e = new CacheEntry<K,V>(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry<K,V> oldCacheEntry = map.put(key, e);\n    int currentSize;\n    if (oldCacheEntry == null) {\n      currentSize = stats.size.incrementAndGet();\n    } else {\n      currentSize = stats.size.get();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (currentSize > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          @Override\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else if (cleanupThread != null){\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","sourceOld":"  public V put(K key, V val) {\n    if (val == null) return null;\n    CacheEntry<K,V> e = new CacheEntry<K,V>(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry<K,V> oldCacheEntry = map.put(key, e);\n    int currentSize;\n    if (oldCacheEntry == null) {\n      currentSize = stats.size.incrementAndGet();\n    } else {\n      currentSize = stats.size.get();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (currentSize > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else if (cleanupThread != null){\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ConcurrentLRUCache#put(K,V).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#put(K,V).mjava","sourceNew":"  public V put(K key, V val) {\n    if (val == null) return null;\n    CacheEntry<K,V> e = new CacheEntry<K,V>(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry<K,V> oldCacheEntry = map.put(key, e);\n    int currentSize;\n    if (oldCacheEntry == null) {\n      currentSize = stats.size.incrementAndGet();\n    } else {\n      currentSize = stats.size.get();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (currentSize > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          @Override\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else if (cleanupThread != null){\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","sourceOld":"  public V put(K key, V val) {\n    if (val == null) return null;\n    CacheEntry<K,V> e = new CacheEntry<K,V>(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry<K,V> oldCacheEntry = map.put(key, e);\n    int currentSize;\n    if (oldCacheEntry == null) {\n      currentSize = stats.size.incrementAndGet();\n    } else {\n      currentSize = stats.size.get();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (currentSize > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          @Override\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else if (cleanupThread != null){\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ConcurrentLRUCache#put(K,V).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#put(K,V).mjava","sourceNew":"  public V put(K key, V val) {\n    if (val == null) return null;\n    CacheEntry<K,V> e = new CacheEntry<K,V>(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry<K,V> oldCacheEntry = map.put(key, e);\n    int currentSize;\n    if (oldCacheEntry == null) {\n      currentSize = stats.size.incrementAndGet();\n    } else {\n      currentSize = stats.size.get();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (currentSize > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          @Override\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else if (cleanupThread != null){\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","sourceOld":"  public V put(K key, V val) {\n    if (val == null) return null;\n    CacheEntry<K,V> e = new CacheEntry<K,V>(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry<K,V> oldCacheEntry = map.put(key, e);\n    int currentSize;\n    if (oldCacheEntry == null) {\n      currentSize = stats.size.incrementAndGet();\n    } else {\n      currentSize = stats.size.get();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (currentSize > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          @Override\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else if (cleanupThread != null){\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ConcurrentLRUCache#put(K,V).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#put(K,V).mjava","sourceNew":"  public V put(K key, V val) {\n    if (val == null) return null;\n    CacheEntry<K,V> e = new CacheEntry<K,V>(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry<K,V> oldCacheEntry = map.put(key, e);\n    int currentSize;\n    if (oldCacheEntry == null) {\n      currentSize = stats.size.incrementAndGet();\n    } else {\n      currentSize = stats.size.get();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (currentSize > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          @Override\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else if (cleanupThread != null){\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","sourceOld":"  public V put(K key, V val) {\n    if (val == null) return null;\n    CacheEntry<K,V> e = new CacheEntry<K,V>(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry<K,V> oldCacheEntry = map.put(key, e);\n    int currentSize;\n    if (oldCacheEntry == null) {\n      currentSize = stats.size.incrementAndGet();\n    } else {\n      currentSize = stats.size.get();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (currentSize > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          @Override\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else if (cleanupThread != null){\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["1da8d55113b689b06716246649de6f62430f15c0"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["1da8d55113b689b06716246649de6f62430f15c0","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}