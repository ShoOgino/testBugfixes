{"path":"lucene/core/src/java/org/apache/lucene/util/RecyclingIntBlockAllocator#freeBlocks(int).mjava","commits":[{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RecyclingIntBlockAllocator#freeBlocks(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Removes the given number of int blocks from the buffer if possible.\n   * \n   * @param num\n   *          the number of int blocks to remove\n   * @return the number of actually removed buffers\n   */\n  public int freeBlocks(int num) {\n    assert num >= 0 : \"free blocks must be >= 0 but was: \"+ num;\n    final int stop;\n    final int count;\n    if (num > freeBlocks) {\n      stop = 0;\n      count = freeBlocks;\n    } else {\n      stop = freeBlocks - num;\n      count = num;\n    }\n    while (freeBlocks > stop) {\n      freeByteBlocks[--freeBlocks] = null;\n    }\n    bytesUsed.addAndGet(-count*blockSize* RamUsageEstimator.NUM_BYTES_INT);\n    assert bytesUsed.get() >= 0;\n    return count;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f226a8b088dd9c8f6ab287a77237c4aa00a238e5","date":1456187572,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RecyclingIntBlockAllocator#freeBlocks(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/RecyclingIntBlockAllocator#freeBlocks(int).mjava","sourceNew":"  /**\n   * Removes the given number of int blocks from the buffer if possible.\n   * \n   * @param num\n   *          the number of int blocks to remove\n   * @return the number of actually removed buffers\n   */\n  public int freeBlocks(int num) {\n    assert num >= 0 : \"free blocks must be >= 0 but was: \"+ num;\n    final int stop;\n    final int count;\n    if (num > freeBlocks) {\n      stop = 0;\n      count = freeBlocks;\n    } else {\n      stop = freeBlocks - num;\n      count = num;\n    }\n    while (freeBlocks > stop) {\n      freeByteBlocks[--freeBlocks] = null;\n    }\n    bytesUsed.addAndGet(-count*blockSize*Integer.BYTES);\n    assert bytesUsed.get() >= 0;\n    return count;\n  }\n\n","sourceOld":"  /**\n   * Removes the given number of int blocks from the buffer if possible.\n   * \n   * @param num\n   *          the number of int blocks to remove\n   * @return the number of actually removed buffers\n   */\n  public int freeBlocks(int num) {\n    assert num >= 0 : \"free blocks must be >= 0 but was: \"+ num;\n    final int stop;\n    final int count;\n    if (num > freeBlocks) {\n      stop = 0;\n      count = freeBlocks;\n    } else {\n      stop = freeBlocks - num;\n      count = num;\n    }\n    while (freeBlocks > stop) {\n      freeByteBlocks[--freeBlocks] = null;\n    }\n    bytesUsed.addAndGet(-count*blockSize* RamUsageEstimator.NUM_BYTES_INT);\n    assert bytesUsed.get() >= 0;\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RecyclingIntBlockAllocator#freeBlocks(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/RecyclingIntBlockAllocator#freeBlocks(int).mjava","sourceNew":"  /**\n   * Removes the given number of int blocks from the buffer if possible.\n   * \n   * @param num\n   *          the number of int blocks to remove\n   * @return the number of actually removed buffers\n   */\n  public int freeBlocks(int num) {\n    assert num >= 0 : \"free blocks must be >= 0 but was: \"+ num;\n    final int stop;\n    final int count;\n    if (num > freeBlocks) {\n      stop = 0;\n      count = freeBlocks;\n    } else {\n      stop = freeBlocks - num;\n      count = num;\n    }\n    while (freeBlocks > stop) {\n      freeByteBlocks[--freeBlocks] = null;\n    }\n    bytesUsed.addAndGet(-count*blockSize*Integer.BYTES);\n    assert bytesUsed.get() >= 0;\n    return count;\n  }\n\n","sourceOld":"  /**\n   * Removes the given number of int blocks from the buffer if possible.\n   * \n   * @param num\n   *          the number of int blocks to remove\n   * @return the number of actually removed buffers\n   */\n  public int freeBlocks(int num) {\n    assert num >= 0 : \"free blocks must be >= 0 but was: \"+ num;\n    final int stop;\n    final int count;\n    if (num > freeBlocks) {\n      stop = 0;\n      count = freeBlocks;\n    } else {\n      stop = freeBlocks - num;\n      count = num;\n    }\n    while (freeBlocks > stop) {\n      freeByteBlocks[--freeBlocks] = null;\n    }\n    bytesUsed.addAndGet(-count*blockSize* RamUsageEstimator.NUM_BYTES_INT);\n    assert bytesUsed.get() >= 0;\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"419a8f52c6635419beb951255cacbbb281044c57":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["419a8f52c6635419beb951255cacbbb281044c57"]},"commit2Childs":{"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["419a8f52c6635419beb951255cacbbb281044c57","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"419a8f52c6635419beb951255cacbbb281044c57":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["419a8f52c6635419beb951255cacbbb281044c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}