{"path":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","sourceNew":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   * \n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * \n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   * \n   * @see #setRAMBufferSizeMB(double)\n   * \n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   * \n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * \n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   * \n   * @see #setRAMBufferSizeMB(double)\n   * \n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff78505662c0b741e2663a9f38a4889c12a32c9f","date":1294908561,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","sourceNew":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   *\n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   *\n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   *\n   * @see #setRAMBufferSizeMB(double)\n   *\n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   * \n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * \n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   * \n   * @see #setRAMBufferSizeMB(double)\n   * \n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00b21520fafb9860ce0318d7be5ea84619c185ad","date":1300444600,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","sourceNew":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   * \n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * \n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   * \n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @see #setRAMBufferSizeMB(double)\n   * \n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   * \n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * \n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   * \n   * @see #setRAMBufferSizeMB(double)\n   * \n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","sourceNew":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   * \n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * \n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   * \n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @see #setRAMBufferSizeMB(double)\n   * \n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   * \n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * \n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   * \n   * @see #setRAMBufferSizeMB(double)\n   * \n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","sourceNew":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   *\n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   *\n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   *\n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @see #setRAMBufferSizeMB(double)\n   *\n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   *\n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   *\n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   *\n   * @see #setRAMBufferSizeMB(double)\n   *\n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","sourceNew":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   *\n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   *\n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   *\n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @see #setRAMBufferSizeMB(double)\n   * @see #setFlushPolicy(FlushPolicy)\n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   *\n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   *\n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   *\n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @see #setRAMBufferSizeMB(double)\n   *\n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","sourceNew":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   *\n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   *\n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   *\n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @see #setRAMBufferSizeMB(double)\n   * @see #setFlushPolicy(FlushPolicy)\n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   * \n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * \n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   * \n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @see #setRAMBufferSizeMB(double)\n   * \n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","sourceNew":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   *\n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   *\n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   *\n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @see #setRAMBufferSizeMB(double)\n   * @see #setFlushPolicy(FlushPolicy)\n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   * \n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * \n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   * \n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @see #setRAMBufferSizeMB(double)\n   * \n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","sourceNew":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   *\n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   *\n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   *\n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @see #setRAMBufferSizeMB(double)\n   * @see #setFlushPolicy(FlushPolicy)\n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   * \n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * \n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   * \n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @see #setRAMBufferSizeMB(double)\n   * \n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","sourceNew":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   *\n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   *\n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   *\n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @see #setRAMBufferSizeMB(double)\n   * @see #setFlushPolicy(FlushPolicy)\n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   *\n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   *\n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   *\n   * <p>Takes effect immediately, but only the next time a\n   * document is added, updated or deleted.\n   *\n   * @see #setRAMBufferSizeMB(double)\n   * @see #setFlushPolicy(FlushPolicy)\n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff78505662c0b741e2663a9f38a4889c12a32c9f":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["ff78505662c0b741e2663a9f38a4889c12a32c9f","00b21520fafb9860ce0318d7be5ea84619c185ad"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["9454a6510e2db155fb01faa5c049b06ece95fab9","00b21520fafb9860ce0318d7be5ea84619c185ad"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["00b21520fafb9860ce0318d7be5ea84619c185ad","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["00b21520fafb9860ce0318d7be5ea84619c185ad","d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"00b21520fafb9860ce0318d7be5ea84619c185ad":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ff78505662c0b741e2663a9f38a4889c12a32c9f":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"00b21520fafb9860ce0318d7be5ea84619c185ad":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ff78505662c0b741e2663a9f38a4889c12a32c9f","d619839baa8ce5503e496b94a9e42ad6f079293f","00b21520fafb9860ce0318d7be5ea84619c185ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}