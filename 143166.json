{"path":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikAnalyzer#testKeywordAttrTokens().mjava","commits":[{"id":"8b081c0897be4656f83148f8ddc8143488f6bd6f","date":1372847443,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikAnalyzer#testKeywordAttrTokens().mjava","pathOld":"/dev/null","sourceNew":"  /** */\n  public final void testKeywordAttrTokens() throws IOException {\n    final Version version = TEST_VERSION_CURRENT;\n    final DICTIONARY dictionary = DICTIONARY.COMBINED;\n\n    Analyzer a = new MorfologikAnalyzer(version, dictionary) {\n      @Override\n      protected TokenStreamComponents createComponents(String field, Reader reader) {\n        final CharArraySet keywords = new CharArraySet(version, 1, false);\n        keywords.add(\"liście\");\n\n        final Tokenizer src = new StandardTokenizer(TEST_VERSION_CURRENT, reader);\n        TokenStream result = new StandardFilter(TEST_VERSION_CURRENT, src);\n        result = new SetKeywordMarkerFilter(result, keywords);\n        result = new MorfologikFilter(result, dictionary, TEST_VERSION_CURRENT); \n\n        return new TokenStreamComponents(src, result);\n      }\n    };\n\n    assertAnalyzesToReuse(\n      a,\n      \"liście danych\",\n      new String[] { \"liście\", \"dany\", \"dana\", \"dane\", \"dać\" },\n      new int[] { 0, 7, 7, 7, 7 },\n      new int[] { 6, 13, 13, 13, 13 },\n      new int[] { 1, 1, 0, 0, 0 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43cfa455b570ba7bf8eefe91de210d46c68a0a2a","date":1372853690,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikAnalyzer#testKeywordAttrTokens().mjava","pathOld":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikAnalyzer#testKeywordAttrTokens().mjava","sourceNew":"  /** */\n  public final void testKeywordAttrTokens() throws IOException {\n    final Version version = TEST_VERSION_CURRENT;\n\n    Analyzer a = new MorfologikAnalyzer(version) {\n      @Override\n      protected TokenStreamComponents createComponents(String field, Reader reader) {\n        final CharArraySet keywords = new CharArraySet(version, 1, false);\n        keywords.add(\"liście\");\n\n        final Tokenizer src = new StandardTokenizer(TEST_VERSION_CURRENT, reader);\n        TokenStream result = new StandardFilter(TEST_VERSION_CURRENT, src);\n        result = new SetKeywordMarkerFilter(result, keywords);\n        result = new MorfologikFilter(result, TEST_VERSION_CURRENT); \n\n        return new TokenStreamComponents(src, result);\n      }\n    };\n\n    assertAnalyzesToReuse(\n      a,\n      \"liście danych\",\n      new String[] { \"liście\", \"dany\", \"dana\", \"dane\", \"dać\" },\n      new int[] { 0, 7, 7, 7, 7 },\n      new int[] { 6, 13, 13, 13, 13 },\n      new int[] { 1, 1, 0, 0, 0 });\n  }\n\n","sourceOld":"  /** */\n  public final void testKeywordAttrTokens() throws IOException {\n    final Version version = TEST_VERSION_CURRENT;\n    final DICTIONARY dictionary = DICTIONARY.COMBINED;\n\n    Analyzer a = new MorfologikAnalyzer(version, dictionary) {\n      @Override\n      protected TokenStreamComponents createComponents(String field, Reader reader) {\n        final CharArraySet keywords = new CharArraySet(version, 1, false);\n        keywords.add(\"liście\");\n\n        final Tokenizer src = new StandardTokenizer(TEST_VERSION_CURRENT, reader);\n        TokenStream result = new StandardFilter(TEST_VERSION_CURRENT, src);\n        result = new SetKeywordMarkerFilter(result, keywords);\n        result = new MorfologikFilter(result, dictionary, TEST_VERSION_CURRENT); \n\n        return new TokenStreamComponents(src, result);\n      }\n    };\n\n    assertAnalyzesToReuse(\n      a,\n      \"liście danych\",\n      new String[] { \"liście\", \"dany\", \"dana\", \"dane\", \"dać\" },\n      new int[] { 0, 7, 7, 7, 7 },\n      new int[] { 6, 13, 13, 13, 13 },\n      new int[] { 1, 1, 0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikAnalyzer#testKeywordAttrTokens().mjava","pathOld":"/dev/null","sourceNew":"  /** */\n  public final void testKeywordAttrTokens() throws IOException {\n    final Version version = TEST_VERSION_CURRENT;\n\n    Analyzer a = new MorfologikAnalyzer(version) {\n      @Override\n      protected TokenStreamComponents createComponents(String field, Reader reader) {\n        final CharArraySet keywords = new CharArraySet(version, 1, false);\n        keywords.add(\"liście\");\n\n        final Tokenizer src = new StandardTokenizer(TEST_VERSION_CURRENT, reader);\n        TokenStream result = new StandardFilter(TEST_VERSION_CURRENT, src);\n        result = new SetKeywordMarkerFilter(result, keywords);\n        result = new MorfologikFilter(result, TEST_VERSION_CURRENT); \n\n        return new TokenStreamComponents(src, result);\n      }\n    };\n\n    assertAnalyzesToReuse(\n      a,\n      \"liście danych\",\n      new String[] { \"liście\", \"dany\", \"dana\", \"dane\", \"dać\" },\n      new int[] { 0, 7, 7, 7, 7 },\n      new int[] { 6, 13, 13, 13, 13 },\n      new int[] { 1, 1, 0, 0, 0 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0","date":1379858263,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikAnalyzer#testKeywordAttrTokens().mjava","pathOld":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikAnalyzer#testKeywordAttrTokens().mjava","sourceNew":"  /** */\n  public final void testKeywordAttrTokens() throws IOException {\n    final Version version = TEST_VERSION_CURRENT;\n\n    Analyzer a = new MorfologikAnalyzer(version) {\n      @Override\n      protected TokenStreamComponents createComponents(String field, Reader reader) {\n        final CharArraySet keywords = new CharArraySet(version, 1, false);\n        keywords.add(\"liście\");\n\n        final Tokenizer src = new StandardTokenizer(TEST_VERSION_CURRENT, reader);\n        TokenStream result = new StandardFilter(TEST_VERSION_CURRENT, src);\n        result = new SetKeywordMarkerFilter(result, keywords);\n        result = new MorfologikFilter(result, TEST_VERSION_CURRENT); \n\n        return new TokenStreamComponents(src, result);\n      }\n    };\n\n    assertAnalyzesTo(\n      a,\n      \"liście danych\",\n      new String[] { \"liście\", \"dany\", \"dana\", \"dane\", \"dać\" },\n      new int[] { 0, 7, 7, 7, 7 },\n      new int[] { 6, 13, 13, 13, 13 },\n      new int[] { 1, 1, 0, 0, 0 });\n  }\n\n","sourceOld":"  /** */\n  public final void testKeywordAttrTokens() throws IOException {\n    final Version version = TEST_VERSION_CURRENT;\n\n    Analyzer a = new MorfologikAnalyzer(version) {\n      @Override\n      protected TokenStreamComponents createComponents(String field, Reader reader) {\n        final CharArraySet keywords = new CharArraySet(version, 1, false);\n        keywords.add(\"liście\");\n\n        final Tokenizer src = new StandardTokenizer(TEST_VERSION_CURRENT, reader);\n        TokenStream result = new StandardFilter(TEST_VERSION_CURRENT, src);\n        result = new SetKeywordMarkerFilter(result, keywords);\n        result = new MorfologikFilter(result, TEST_VERSION_CURRENT); \n\n        return new TokenStreamComponents(src, result);\n      }\n    };\n\n    assertAnalyzesToReuse(\n      a,\n      \"liście danych\",\n      new String[] { \"liście\", \"dany\", \"dana\", \"dane\", \"dać\" },\n      new int[] { 0, 7, 7, 7, 7 },\n      new int[] { 6, 13, 13, 13, 13 },\n      new int[] { 1, 1, 0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikAnalyzer#testKeywordAttrTokens().mjava","pathOld":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikAnalyzer#testKeywordAttrTokens().mjava","sourceNew":"  /** */\n  public final void testKeywordAttrTokens() throws IOException {\n    final Version version = TEST_VERSION_CURRENT;\n\n    Analyzer a = new MorfologikAnalyzer(version) {\n      @Override\n      protected TokenStreamComponents createComponents(String field) {\n        final CharArraySet keywords = new CharArraySet(version, 1, false);\n        keywords.add(\"liście\");\n\n        final Tokenizer src = new StandardTokenizer(TEST_VERSION_CURRENT);\n        TokenStream result = new StandardFilter(TEST_VERSION_CURRENT, src);\n        result = new SetKeywordMarkerFilter(result, keywords);\n        result = new MorfologikFilter(result, TEST_VERSION_CURRENT); \n\n        return new TokenStreamComponents(src, result);\n      }\n    };\n\n    assertAnalyzesTo(\n      a,\n      \"liście danych\",\n      new String[] { \"liście\", \"dany\", \"dana\", \"dane\", \"dać\" },\n      new int[] { 0, 7, 7, 7, 7 },\n      new int[] { 6, 13, 13, 13, 13 },\n      new int[] { 1, 1, 0, 0, 0 });\n  }\n\n","sourceOld":"  /** */\n  public final void testKeywordAttrTokens() throws IOException {\n    final Version version = TEST_VERSION_CURRENT;\n\n    Analyzer a = new MorfologikAnalyzer(version) {\n      @Override\n      protected TokenStreamComponents createComponents(String field, Reader reader) {\n        final CharArraySet keywords = new CharArraySet(version, 1, false);\n        keywords.add(\"liście\");\n\n        final Tokenizer src = new StandardTokenizer(TEST_VERSION_CURRENT, reader);\n        TokenStream result = new StandardFilter(TEST_VERSION_CURRENT, src);\n        result = new SetKeywordMarkerFilter(result, keywords);\n        result = new MorfologikFilter(result, TEST_VERSION_CURRENT); \n\n        return new TokenStreamComponents(src, result);\n      }\n    };\n\n    assertAnalyzesTo(\n      a,\n      \"liście danych\",\n      new String[] { \"liście\", \"dany\", \"dana\", \"dane\", \"dać\" },\n      new int[] { 0, 7, 7, 7, 7 },\n      new int[] { 6, 13, 13, 13, 13 },\n      new int[] { 1, 1, 0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikAnalyzer#testKeywordAttrTokens().mjava","pathOld":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikAnalyzer#testKeywordAttrTokens().mjava","sourceNew":"  /** */\n  public final void testKeywordAttrTokens() throws IOException {\n    Analyzer a = new MorfologikAnalyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String field) {\n        final CharArraySet keywords = new CharArraySet(1, false);\n        keywords.add(\"liście\");\n\n        final Tokenizer src = new StandardTokenizer();\n        TokenStream result = new StandardFilter(src);\n        result = new SetKeywordMarkerFilter(result, keywords);\n        result = new MorfologikFilter(result); \n\n        return new TokenStreamComponents(src, result);\n      }\n    };\n\n    assertAnalyzesTo(\n      a,\n      \"liście danych\",\n      new String[] { \"liście\", \"dany\", \"dana\", \"dane\", \"dać\" },\n      new int[] { 0, 7, 7, 7, 7 },\n      new int[] { 6, 13, 13, 13, 13 },\n      new int[] { 1, 1, 0, 0, 0 });\n  }\n\n","sourceOld":"  /** */\n  public final void testKeywordAttrTokens() throws IOException {\n    final Version version = TEST_VERSION_CURRENT;\n\n    Analyzer a = new MorfologikAnalyzer(version) {\n      @Override\n      protected TokenStreamComponents createComponents(String field) {\n        final CharArraySet keywords = new CharArraySet(version, 1, false);\n        keywords.add(\"liście\");\n\n        final Tokenizer src = new StandardTokenizer(TEST_VERSION_CURRENT);\n        TokenStream result = new StandardFilter(TEST_VERSION_CURRENT, src);\n        result = new SetKeywordMarkerFilter(result, keywords);\n        result = new MorfologikFilter(result, TEST_VERSION_CURRENT); \n\n        return new TokenStreamComponents(src, result);\n      }\n    };\n\n    assertAnalyzesTo(\n      a,\n      \"liście danych\",\n      new String[] { \"liście\", \"dany\", \"dana\", \"dane\", \"dać\" },\n      new int[] { 0, 7, 7, 7, 7 },\n      new int[] { 6, 13, 13, 13, 13 },\n      new int[] { 1, 1, 0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikAnalyzer#testKeywordAttrTokens().mjava","pathOld":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikAnalyzer#testKeywordAttrTokens().mjava","sourceNew":"  /** */\n  public final void testKeywordAttrTokens() throws IOException {\n    final Version version = TEST_VERSION_CURRENT;\n\n    Analyzer a = new MorfologikAnalyzer(version) {\n      @Override\n      protected TokenStreamComponents createComponents(String field) {\n        final CharArraySet keywords = new CharArraySet(version, 1, false);\n        keywords.add(\"liście\");\n\n        final Tokenizer src = new StandardTokenizer(TEST_VERSION_CURRENT);\n        TokenStream result = new StandardFilter(TEST_VERSION_CURRENT, src);\n        result = new SetKeywordMarkerFilter(result, keywords);\n        result = new MorfologikFilter(result, TEST_VERSION_CURRENT); \n\n        return new TokenStreamComponents(src, result);\n      }\n    };\n\n    assertAnalyzesTo(\n      a,\n      \"liście danych\",\n      new String[] { \"liście\", \"dany\", \"dana\", \"dane\", \"dać\" },\n      new int[] { 0, 7, 7, 7, 7 },\n      new int[] { 6, 13, 13, 13, 13 },\n      new int[] { 1, 1, 0, 0, 0 });\n  }\n\n","sourceOld":"  /** */\n  public final void testKeywordAttrTokens() throws IOException {\n    Analyzer a = new MorfologikAnalyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String field) {\n        final CharArraySet keywords = new CharArraySet(1, false);\n        keywords.add(\"liście\");\n\n        final Tokenizer src = new StandardTokenizer();\n        TokenStream result = new StandardFilter(src);\n        result = new SetKeywordMarkerFilter(result, keywords);\n        result = new MorfologikFilter(result); \n\n        return new TokenStreamComponents(src, result);\n      }\n    };\n\n    assertAnalyzesTo(\n      a,\n      \"liście danych\",\n      new String[] { \"liście\", \"dany\", \"dana\", \"dane\", \"dać\" },\n      new int[] { 0, 7, 7, 7, 7 },\n      new int[] { 6, 13, 13, 13, 13 },\n      new int[] { 1, 1, 0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikAnalyzer#testKeywordAttrTokens().mjava","pathOld":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikAnalyzer#testKeywordAttrTokens().mjava","sourceNew":"  /** */\n  public final void testKeywordAttrTokens() throws IOException {\n    Analyzer a = new MorfologikAnalyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String field) {\n        final CharArraySet keywords = new CharArraySet(1, false);\n        keywords.add(\"liście\");\n\n        final Tokenizer src = new StandardTokenizer();\n        TokenStream result = new StandardFilter(src);\n        result = new SetKeywordMarkerFilter(result, keywords);\n        result = new MorfologikFilter(result); \n\n        return new TokenStreamComponents(src, result);\n      }\n    };\n\n    assertAnalyzesTo(\n      a,\n      \"liście danych\",\n      new String[] { \"liście\", \"dany\", \"dana\", \"dane\", \"dać\" },\n      new int[] { 0, 7, 7, 7, 7 },\n      new int[] { 6, 13, 13, 13, 13 },\n      new int[] { 1, 1, 0, 0, 0 });\n  }\n\n","sourceOld":"  /** */\n  public final void testKeywordAttrTokens() throws IOException {\n    final Version version = TEST_VERSION_CURRENT;\n\n    Analyzer a = new MorfologikAnalyzer(version) {\n      @Override\n      protected TokenStreamComponents createComponents(String field) {\n        final CharArraySet keywords = new CharArraySet(version, 1, false);\n        keywords.add(\"liście\");\n\n        final Tokenizer src = new StandardTokenizer(TEST_VERSION_CURRENT);\n        TokenStream result = new StandardFilter(TEST_VERSION_CURRENT, src);\n        result = new SetKeywordMarkerFilter(result, keywords);\n        result = new MorfologikFilter(result, TEST_VERSION_CURRENT); \n\n        return new TokenStreamComponents(src, result);\n      }\n    };\n\n    assertAnalyzesTo(\n      a,\n      \"liście danych\",\n      new String[] { \"liście\", \"dany\", \"dana\", \"dane\", \"dać\" },\n      new int[] { 0, 7, 7, 7, 7 },\n      new int[] { 6, 13, 13, 13, 13 },\n      new int[] { 1, 1, 0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikAnalyzer#testKeywordAttrTokens().mjava","pathOld":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikAnalyzer#testKeywordAttrTokens().mjava","sourceNew":"  /** */\n  public final void testKeywordAttrTokens() throws IOException {\n    Analyzer a = new MorfologikAnalyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String field) {\n        final CharArraySet keywords = new CharArraySet(1, false);\n        keywords.add(\"liście\");\n\n        final Tokenizer src = new StandardTokenizer();\n        TokenStream result = new StandardFilter(src);\n        result = new SetKeywordMarkerFilter(result, keywords);\n        result = new MorfologikFilter(result); \n\n        return new TokenStreamComponents(src, result);\n      }\n    };\n\n    assertAnalyzesTo(\n      a,\n      \"liście danych\",\n      new String[] { \"liście\", \"dany\", \"dana\", \"dane\", \"dać\" },\n      new int[] { 0, 7, 7, 7, 7 },\n      new int[] { 6, 13, 13, 13, 13 },\n      new int[] { 1, 1, 0, 0, 0 });\n    a.close();\n  }\n\n","sourceOld":"  /** */\n  public final void testKeywordAttrTokens() throws IOException {\n    Analyzer a = new MorfologikAnalyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String field) {\n        final CharArraySet keywords = new CharArraySet(1, false);\n        keywords.add(\"liście\");\n\n        final Tokenizer src = new StandardTokenizer();\n        TokenStream result = new StandardFilter(src);\n        result = new SetKeywordMarkerFilter(result, keywords);\n        result = new MorfologikFilter(result); \n\n        return new TokenStreamComponents(src, result);\n      }\n    };\n\n    assertAnalyzesTo(\n      a,\n      \"liście danych\",\n      new String[] { \"liście\", \"dany\", \"dana\", \"dane\", \"dać\" },\n      new int[] { 0, 7, 7, 7, 7 },\n      new int[] { 6, 13, 13, 13, 13 },\n      new int[] { 1, 1, 0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikAnalyzer#testKeywordAttrTokens().mjava","pathOld":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikAnalyzer#testKeywordAttrTokens().mjava","sourceNew":"  /** */\n  public final void testKeywordAttrTokens() throws IOException {\n    Analyzer a = new MorfologikAnalyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String field) {\n        final CharArraySet keywords = new CharArraySet(1, false);\n        keywords.add(\"liście\");\n\n        final Tokenizer src = new StandardTokenizer();\n        TokenStream result = new StandardFilter(src);\n        result = new SetKeywordMarkerFilter(result, keywords);\n        result = new MorfologikFilter(result); \n\n        return new TokenStreamComponents(src, result);\n      }\n    };\n\n    assertAnalyzesTo(\n      a,\n      \"liście danych\",\n      new String[] { \"liście\", \"dany\", \"dana\", \"dane\", \"dać\" },\n      new int[] { 0, 7, 7, 7, 7 },\n      new int[] { 6, 13, 13, 13, 13 },\n      new int[] { 1, 1, 0, 0, 0 });\n    a.close();\n  }\n\n","sourceOld":"  /** */\n  public final void testKeywordAttrTokens() throws IOException {\n    Analyzer a = new MorfologikAnalyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String field) {\n        final CharArraySet keywords = new CharArraySet(1, false);\n        keywords.add(\"liście\");\n\n        final Tokenizer src = new StandardTokenizer();\n        TokenStream result = new StandardFilter(src);\n        result = new SetKeywordMarkerFilter(result, keywords);\n        result = new MorfologikFilter(result); \n\n        return new TokenStreamComponents(src, result);\n      }\n    };\n\n    assertAnalyzesTo(\n      a,\n      \"liście danych\",\n      new String[] { \"liście\", \"dany\", \"dana\", \"dane\", \"dać\" },\n      new int[] { 0, 7, 7, 7, 7 },\n      new int[] { 6, 13, 13, 13, 13 },\n      new int[] { 1, 1, 0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a7bf5d44fd9c84c577166b93b23c9774b063d46","date":1530097523,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikAnalyzer#testKeywordAttrTokens().mjava","pathOld":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikAnalyzer#testKeywordAttrTokens().mjava","sourceNew":"  /** */\n  public final void testKeywordAttrTokens() throws IOException {\n    Analyzer a = new MorfologikAnalyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String field) {\n        final CharArraySet keywords = new CharArraySet(1, false);\n        keywords.add(\"liście\");\n\n        final Tokenizer src = new StandardTokenizer();\n        TokenStream result = new SetKeywordMarkerFilter(src, keywords);\n        result = new MorfologikFilter(result); \n\n        return new TokenStreamComponents(src, result);\n      }\n    };\n\n    assertAnalyzesTo(\n      a,\n      \"liście danych\",\n      new String[] { \"liście\", \"dany\", \"dana\", \"dane\", \"dać\" },\n      new int[] { 0, 7, 7, 7, 7 },\n      new int[] { 6, 13, 13, 13, 13 },\n      new int[] { 1, 1, 0, 0, 0 });\n    a.close();\n  }\n\n","sourceOld":"  /** */\n  public final void testKeywordAttrTokens() throws IOException {\n    Analyzer a = new MorfologikAnalyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String field) {\n        final CharArraySet keywords = new CharArraySet(1, false);\n        keywords.add(\"liście\");\n\n        final Tokenizer src = new StandardTokenizer();\n        TokenStream result = new StandardFilter(src);\n        result = new SetKeywordMarkerFilter(result, keywords);\n        result = new MorfologikFilter(result); \n\n        return new TokenStreamComponents(src, result);\n      }\n    };\n\n    assertAnalyzesTo(\n      a,\n      \"liście danych\",\n      new String[] { \"liście\", \"dany\", \"dana\", \"dane\", \"dać\" },\n      new int[] { 0, 7, 7, 7, 7 },\n      new int[] { 6, 13, 13, 13, 13 },\n      new int[] { 1, 1, 0, 0, 0 });\n    a.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikAnalyzer#testKeywordAttrTokens().mjava","pathOld":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikAnalyzer#testKeywordAttrTokens().mjava","sourceNew":"  /** */\n  public final void testKeywordAttrTokens() throws IOException {\n    Analyzer a = new MorfologikAnalyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String field) {\n        final CharArraySet keywords = new CharArraySet(1, false);\n        keywords.add(\"liście\");\n\n        final Tokenizer src = new StandardTokenizer();\n        TokenStream result = new SetKeywordMarkerFilter(src, keywords);\n        result = new MorfologikFilter(result); \n\n        return new TokenStreamComponents(src, result);\n      }\n    };\n\n    assertAnalyzesTo(\n      a,\n      \"liście danych\",\n      new String[] { \"liście\", \"dany\", \"dana\", \"dane\", \"dać\" },\n      new int[] { 0, 7, 7, 7, 7 },\n      new int[] { 6, 13, 13, 13, 13 },\n      new int[] { 1, 1, 0, 0, 0 });\n    a.close();\n  }\n\n","sourceOld":"  /** */\n  public final void testKeywordAttrTokens() throws IOException {\n    Analyzer a = new MorfologikAnalyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String field) {\n        final CharArraySet keywords = new CharArraySet(1, false);\n        keywords.add(\"liście\");\n\n        final Tokenizer src = new StandardTokenizer();\n        TokenStream result = new StandardFilter(src);\n        result = new SetKeywordMarkerFilter(result, keywords);\n        result = new MorfologikFilter(result); \n\n        return new TokenStreamComponents(src, result);\n      }\n    };\n\n    assertAnalyzesTo(\n      a,\n      \"liście danych\",\n      new String[] { \"liście\", \"dany\", \"dana\", \"dane\", \"dać\" },\n      new int[] { 0, 7, 7, 7, 7 },\n      new int[] { 6, 13, 13, 13, 13 },\n      new int[] { 1, 1, 0, 0, 0 });\n    a.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikAnalyzer#testKeywordAttrTokens().mjava","pathOld":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikAnalyzer#testKeywordAttrTokens().mjava","sourceNew":"  /** */\n  public final void testKeywordAttrTokens() throws IOException {\n    Analyzer a = new MorfologikAnalyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String field) {\n        final CharArraySet keywords = new CharArraySet(1, false);\n        keywords.add(\"liście\");\n\n        final Tokenizer src = new StandardTokenizer();\n        TokenStream result = new SetKeywordMarkerFilter(src, keywords);\n        result = new MorfologikFilter(result); \n\n        return new TokenStreamComponents(src, result);\n      }\n    };\n\n    assertAnalyzesTo(\n      a,\n      \"liście danych\",\n      new String[] { \"liście\", \"dany\", \"dana\", \"dane\", \"dać\" },\n      new int[] { 0, 7, 7, 7, 7 },\n      new int[] { 6, 13, 13, 13, 13 },\n      new int[] { 1, 1, 0, 0, 0 });\n    a.close();\n  }\n\n","sourceOld":"  /** */\n  public final void testKeywordAttrTokens() throws IOException {\n    Analyzer a = new MorfologikAnalyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String field) {\n        final CharArraySet keywords = new CharArraySet(1, false);\n        keywords.add(\"liście\");\n\n        final Tokenizer src = new StandardTokenizer();\n        TokenStream result = new StandardFilter(src);\n        result = new SetKeywordMarkerFilter(result, keywords);\n        result = new MorfologikFilter(result); \n\n        return new TokenStreamComponents(src, result);\n      }\n    };\n\n    assertAnalyzesTo(\n      a,\n      \"liście danych\",\n      new String[] { \"liście\", \"dany\", \"dana\", \"dane\", \"dać\" },\n      new int[] { 0, 7, 7, 7, 7 },\n      new int[] { 6, 13, 13, 13, 13 },\n      new int[] { 1, 1, 0, 0, 0 });\n    a.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43cfa455b570ba7bf8eefe91de210d46c68a0a2a"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["df1b735b811bfe6055a98336ee8dfd1e43cf2dc0"],"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0":["43cfa455b570ba7bf8eefe91de210d46c68a0a2a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["379db3ad24c4f0214f30a122265a6d6be003a99d","a56958d7f71a28824f20031ffbb2e13502a0274e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a56958d7f71a28824f20031ffbb2e13502a0274e","8a7bf5d44fd9c84c577166b93b23c9774b063d46"],"8a7bf5d44fd9c84c577166b93b23c9774b063d46":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"43cfa455b570ba7bf8eefe91de210d46c68a0a2a":["8b081c0897be4656f83148f8ddc8143488f6bd6f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"8b081c0897be4656f83148f8ddc8143488f6bd6f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a7bf5d44fd9c84c577166b93b23c9774b063d46"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a56958d7f71a28824f20031ffbb2e13502a0274e","8a7bf5d44fd9c84c577166b93b23c9774b063d46"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"8a7bf5d44fd9c84c577166b93b23c9774b063d46":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","8b081c0897be4656f83148f8ddc8143488f6bd6f"],"43cfa455b570ba7bf8eefe91de210d46c68a0a2a":["37a0f60745e53927c4c876cfe5b5a58170f0646c","df1b735b811bfe6055a98336ee8dfd1e43cf2dc0"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","8a7bf5d44fd9c84c577166b93b23c9774b063d46","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"8b081c0897be4656f83148f8ddc8143488f6bd6f":["43cfa455b570ba7bf8eefe91de210d46c68a0a2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}