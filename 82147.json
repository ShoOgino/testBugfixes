{"path":"modules/spatial/base/src/test/org/apache/lucene/spatial/base/context/BaseSpatialContextTestCase#checkArgParser(SpatialContext).mjava","commits":[{"id":"4f1f1ac95d9e689fc66dc6bcc5c7ab19fe9fc37a","date":1330032413,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/base/src/test/org/apache/lucene/spatial/base/context/BaseSpatialContextTestCase#checkArgParser(SpatialContext).mjava","pathOld":"modules/spatial/strategy/src/test/org/apache/lucene/spatial/base/context/BaseSpatialContextTestCase#checkArgParser(SpatialContext).mjava","sourceNew":"  public static void checkArgParser(SpatialContext ctx) {\n    SpatialArgsParser parser = new SpatialArgsParser();\n\n    String arg = SpatialOperation.IsWithin + \"(-10 -20 10 20)\";\n    SpatialArgs out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsWithin, out.getOperation());\n    Rectangle bounds = (Rectangle) out.getShape();\n    assertEquals(-10.0, bounds.getMinX(), 0D);\n    assertEquals(10.0, bounds.getMaxX(), 0D);\n\n    // Disjoint should not be scored\n    arg = SpatialOperation.IsDisjointTo + \" (-10 10 -20 20)\";\n    out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsDisjointTo, out.getOperation());\n\n    try {\n      parser.parse(SpatialOperation.IsDisjointTo + \"[ ]\", ctx);\n      fail(\"spatial operations need args\");\n    }\n    catch (Exception ex) {//expected\n    }\n\n    try {\n      parser.parse(\"XXXX(-10 10 -20 20)\", ctx);\n      fail(\"unknown operation!\");\n    }\n    catch (Exception ex) {//expected\n    }\n  }\n\n","sourceOld":"  public static void checkArgParser(SpatialContext ctx) {\n    SpatialArgsParser parser = new SpatialArgsParser();\n\n    String arg = SpatialOperation.IsWithin + \"(-10 -20 10 20)\";\n    SpatialArgs out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsWithin, out.getOperation());\n    Rectangle bounds = (Rectangle) out.getShape();\n    assertEquals(-10.0, bounds.getMinX(), 0D);\n    assertEquals(10.0, bounds.getMaxX(), 0D);\n\n    // Disjoint should not be scored\n    arg = SpatialOperation.IsDisjointTo + \" (-10 10 -20 20)\";\n    out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsDisjointTo, out.getOperation());\n\n    try {\n      parser.parse(SpatialOperation.IsDisjointTo + \"[ ]\", ctx);\n      fail(\"spatial operations need args\");\n    }\n    catch (Exception ex) {//expected\n    }\n\n    try {\n      parser.parse(\"XXXX(-10 10 -20 20)\", ctx);\n      fail(\"unknown operation!\");\n    }\n    catch (Exception ex) {//expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25738042b3fdefd34091f8a386e2ce94d892a505","date":1330492659,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/spatial/base/src/test/org/apache/lucene/spatial/base/context/BaseSpatialContextTestCase#checkArgParser(SpatialContext).mjava","sourceNew":null,"sourceOld":"  public static void checkArgParser(SpatialContext ctx) {\n    SpatialArgsParser parser = new SpatialArgsParser();\n\n    String arg = SpatialOperation.IsWithin + \"(-10 -20 10 20)\";\n    SpatialArgs out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsWithin, out.getOperation());\n    Rectangle bounds = (Rectangle) out.getShape();\n    assertEquals(-10.0, bounds.getMinX(), 0D);\n    assertEquals(10.0, bounds.getMaxX(), 0D);\n\n    // Disjoint should not be scored\n    arg = SpatialOperation.IsDisjointTo + \" (-10 10 -20 20)\";\n    out = parser.parse(arg, ctx);\n    assertEquals(SpatialOperation.IsDisjointTo, out.getOperation());\n\n    try {\n      parser.parse(SpatialOperation.IsDisjointTo + \"[ ]\", ctx);\n      fail(\"spatial operations need args\");\n    }\n    catch (Exception ex) {//expected\n    }\n\n    try {\n      parser.parse(\"XXXX(-10 10 -20 20)\", ctx);\n      fail(\"unknown operation!\");\n    }\n    catch (Exception ex) {//expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f1f1ac95d9e689fc66dc6bcc5c7ab19fe9fc37a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"25738042b3fdefd34091f8a386e2ce94d892a505":["4f1f1ac95d9e689fc66dc6bcc5c7ab19fe9fc37a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4f1f1ac95d9e689fc66dc6bcc5c7ab19fe9fc37a":["25738042b3fdefd34091f8a386e2ce94d892a505"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4f1f1ac95d9e689fc66dc6bcc5c7ab19fe9fc37a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"25738042b3fdefd34091f8a386e2ce94d892a505":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["25738042b3fdefd34091f8a386e2ce94d892a505","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}