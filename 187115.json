{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                    new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new Field(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"random\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new Field(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10, canUseIDV);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, false, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                    new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new Field(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"random\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new Field(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10, canUseIDV);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, false, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                    new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new Field(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"random\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new Field(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10, canUseIDV);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, false, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                    new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new Field(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"random\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new Field(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10, canUseIDV);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, false, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85d41890f2bad879e6a04c6dd7d2cf276f973994","date":1338488367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                    new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new Field(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"random\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new Field(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10, canUseIDV);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                    new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new Field(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"random\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new Field(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10, canUseIDV);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, false, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":["6b588d7000deacb0a01f30746b91644112b94326"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                    new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10, canUseIDV);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                    new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random textual data\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new Field(\"content\", \"some random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new Field(\"content\", \"random\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new Field(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10, canUseIDV);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3eb88edd735aec1f42cbe41c478fb4f8d41f0ec","date":1358544193,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                    new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    if (canUseIDV && random().nextBoolean()) {\n      groupField += \"_dv\";\n    }\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                    new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10, canUseIDV);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                    new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    if (canUseIDV && random().nextBoolean()) {\n      groupField += \"_dv\";\n    }\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    final String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                    new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10, canUseIDV);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":["307cff5af2b00f126fdf9d3435b75d5ed4d0f402","6b588d7000deacb0a01f30746b91644112b94326"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97d4692d0c601ff773f0a2231967312428a904e4","date":1366026608,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                    new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    if (random().nextBoolean()) {\n      groupField += \"_dv\";\n    }\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                    new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    boolean canUseIDV = true;\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\", canUseIDV);\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    if (canUseIDV && random().nextBoolean()) {\n      groupField += \"_dv\";\n    }\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc","date":1366056945,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                    new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    if (random().nextBoolean()) {\n      groupField += \"_dv\";\n    }\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                    new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    if (random().nextBoolean()) {\n      groupField += \"_dv\";\n    }\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                    new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    if (random().nextBoolean()) {\n      groupField += \"_dv\";\n    }\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                    new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    if (random().nextBoolean()) {\n      groupField += \"_dv\";\n    }\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd61a613ef9a358a4c872a276b80a76e67c2cc49","date":1399816663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                    new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                    new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    if (random().nextBoolean()) {\n      groupField += \"_dv\";\n    }\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                    new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                    new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    if (random().nextBoolean()) {\n      groupField += \"_dv\";\n    }\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                    new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                    new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    if (random().nextBoolean()) {\n      groupField += \"_dv\";\n    }\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                    new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2","date":1448513807,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, Sort.RELEVANCE, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, null, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f318516df5421e5ec511702abaa8c2a16156327","date":1453654392,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, Sort.RELEVANCE, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, Sort.RELEVANCE, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score > group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdebaec5d7b0b0b5575a6854e48eda9867bbd167","date":1478965994,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    indexSearcher.setSimilarity(new BM25Similarity());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, Sort.RELEVANCE, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, Sort.RELEVANCE, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2459db523605752a3affcf444fb717d625904488","date":1478970978,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    indexSearcher.setSimilarity(new BM25Similarity());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, Sort.RELEVANCE, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, Sort.RELEVANCE, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c07ef342f800e4ced288feec5d2b1bd9c4153643","date":1479075261,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, Sort.RELEVANCE, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    indexSearcher.setSimilarity(new BM25Similarity());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, Sort.RELEVANCE, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8243e301531f97de264740d6afa71de6781dd64","date":1479139589,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, Sort.RELEVANCE, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    indexSearcher.setSimilarity(new BM25Similarity());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, Sort.RELEVANCE, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final FirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final SecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, Sort.RELEVANCE, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, Sort.RELEVANCE, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final FirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final SecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, Sort.RELEVANCE, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final AbstractFirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final AbstractSecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, Sort.RELEVANCE, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final FirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final TopGroupsCollector<?> c2 = createSecondPassCollector(c1, groupSort, Sort.RELEVANCE, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final FirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final SecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, Sort.RELEVANCE, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final FirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final TopGroupsCollector<?> c2 = createSecondPassCollector(c1, groupSort, Sort.RELEVANCE, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final FirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final SecondPassGroupingCollector<?> c2 = createSecondPassCollector(c1, groupField, groupSort, Sort.RELEVANCE, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9cfbee9773cbd88cf80789231ef013688395a22","date":1514559590,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    // This test relies on the fact that longer fields produce lower scores\n    indexSearcher.setSimilarity(new BM25Similarity());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final FirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final TopGroupsCollector<?> c2 = createSecondPassCollector(c1, groupSort, Sort.RELEVANCE, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final FirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final TopGroupsCollector<?> c2 = createSecondPassCollector(c1, groupSort, Sort.RELEVANCE, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c370507e5521b2eb998530736f1c19b851ed5a","date":1531911305,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    // This test relies on the fact that longer fields produce lower scores\n    indexSearcher.setSimilarity(new BM25Similarity());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final FirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final TopGroupsCollector<?> c2 = createSecondPassCollector(c1, groupSort, Sort.RELEVANCE, 0, 5, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    // This test relies on the fact that longer fields produce lower scores\n    indexSearcher.setSimilarity(new BM25Similarity());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final FirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final TopGroupsCollector<?> c2 = createSecondPassCollector(c1, groupSort, Sort.RELEVANCE, 0, 5, true, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d3f7ab1a502671bbdb03bcced21e764d2483221","date":1532329609,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    // This test relies on the fact that longer fields produce lower scores\n    indexSearcher.setSimilarity(new BM25Similarity());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final FirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final TopGroupsCollector<?> c2 = createSecondPassCollector(c1, groupSort, Sort.RELEVANCE, 0, 5, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    String groupField = \"author\";\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n                               random(),\n                               dir,\n                               newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    // 0\n    Document doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"1\", customType));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"2\", customType));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addGroupField(doc, groupField, \"author1\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"3\", customType));\n    w.addDocument(doc);\n\n    // 3\n    doc = new Document();\n    addGroupField(doc, groupField, \"author2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"4\", customType));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"5\", customType));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addGroupField(doc, groupField, \"author3\");\n    doc.add(new TextField(\"content\", \"random\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    doc.add(new Field(\"id\", \"6\", customType));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    // This test relies on the fact that longer fields produce lower scores\n    indexSearcher.setSimilarity(new BM25Similarity());\n    w.close();\n\n    final Sort groupSort = Sort.RELEVANCE;\n\n    final FirstPassGroupingCollector<?> c1 = createRandomFirstPassCollector(groupField, groupSort, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c1);\n\n    final TopGroupsCollector<?> c2 = createSecondPassCollector(c1, groupSort, Sort.RELEVANCE, 0, 5, true, true);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), c2);\n\n    final TopGroups<?> groups = c2.getTopGroups(0);\n    assertFalse(Float.isNaN(groups.maxScore));\n\n    assertEquals(7, groups.totalHitCount);\n    assertEquals(7, groups.totalGroupedHitCount);\n    assertEquals(4, groups.groups.length);\n\n    // relevance order: 5, 0, 3, 4, 1, 2, 6\n\n    // the later a document is added the higher this docId\n    // value\n    GroupDocs<?> group = groups.groups[0];\n    compareGroupValue(\"author3\", group);\n    assertEquals(2, group.scoreDocs.length);\n    assertEquals(5, group.scoreDocs[0].doc);\n    assertEquals(4, group.scoreDocs[1].doc);\n    assertTrue(group.scoreDocs[0].score > group.scoreDocs[1].score);\n\n    group = groups.groups[1];\n    compareGroupValue(\"author1\", group);\n    assertEquals(3, group.scoreDocs.length);\n    assertEquals(0, group.scoreDocs[0].doc);\n    assertEquals(1, group.scoreDocs[1].doc);\n    assertEquals(2, group.scoreDocs[2].doc);\n    assertTrue(group.scoreDocs[0].score >= group.scoreDocs[1].score);\n    assertTrue(group.scoreDocs[1].score >= group.scoreDocs[2].score);\n\n    group = groups.groups[2];\n    compareGroupValue(\"author2\", group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(3, group.scoreDocs[0].doc);\n\n    group = groups.groups[3];\n    compareGroupValue(null, group);\n    assertEquals(1, group.scoreDocs.length);\n    assertEquals(6, group.scoreDocs[0].doc);\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["20e94e61fe5291647346b70437617e6b6c370408"],"04c370507e5521b2eb998530736f1c19b851ed5a":["c9cfbee9773cbd88cf80789231ef013688395a22"],"c9cfbee9773cbd88cf80789231ef013688395a22":["7ae958a739da1866696f442384393ba2f13e33e5"],"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"e3eb88edd735aec1f42cbe41c478fb4f8d41f0ec":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["85d41890f2bad879e6a04c6dd7d2cf276f973994"],"85d41890f2bad879e6a04c6dd7d2cf276f973994":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"97d4692d0c601ff773f0a2231967312428a904e4":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"20e94e61fe5291647346b70437617e6b6c370408":["2f318516df5421e5ec511702abaa8c2a16156327"],"cdebaec5d7b0b0b5575a6854e48eda9867bbd167":["2f318516df5421e5ec511702abaa8c2a16156327"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["c8243e301531f97de264740d6afa71de6781dd64","20e94e61fe5291647346b70437617e6b6c370408"],"2459db523605752a3affcf444fb717d625904488":["2f318516df5421e5ec511702abaa8c2a16156327","cdebaec5d7b0b0b5575a6854e48eda9867bbd167"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["04c370507e5521b2eb998530736f1c19b851ed5a"],"c07ef342f800e4ced288feec5d2b1bd9c4153643":["cdebaec5d7b0b0b5575a6854e48eda9867bbd167"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["04f07771a2a7dd3a395700665ed839c3dae2def2","e3eb88edd735aec1f42cbe41c478fb4f8d41f0ec"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","fd61a613ef9a358a4c872a276b80a76e67c2cc49"],"c8243e301531f97de264740d6afa71de6781dd64":["2459db523605752a3affcf444fb717d625904488","2f318516df5421e5ec511702abaa8c2a16156327"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"fd61a613ef9a358a4c872a276b80a76e67c2cc49":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["97d4692d0c601ff773f0a2231967312428a904e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"7ae958a739da1866696f442384393ba2f13e33e5":["20e94e61fe5291647346b70437617e6b6c370408"],"2f318516df5421e5ec511702abaa8c2a16156327":["5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"04c370507e5521b2eb998530736f1c19b851ed5a":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"c9cfbee9773cbd88cf80789231ef013688395a22":["04c370507e5521b2eb998530736f1c19b851ed5a"],"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2":["2f318516df5421e5ec511702abaa8c2a16156327"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"e3eb88edd735aec1f42cbe41c478fb4f8d41f0ec":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e3eb88edd735aec1f42cbe41c478fb4f8d41f0ec","d4d69c535930b5cce125cff868d40f6373dc27d4"],"85d41890f2bad879e6a04c6dd7d2cf276f973994":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["85d41890f2bad879e6a04c6dd7d2cf276f973994"],"97d4692d0c601ff773f0a2231967312428a904e4":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d","fd61a613ef9a358a4c872a276b80a76e67c2cc49"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"20e94e61fe5291647346b70437617e6b6c370408":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","7ae958a739da1866696f442384393ba2f13e33e5"],"cdebaec5d7b0b0b5575a6854e48eda9867bbd167":["2459db523605752a3affcf444fb717d625904488","c07ef342f800e4ced288feec5d2b1bd9c4153643"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"2459db523605752a3affcf444fb717d625904488":["c8243e301531f97de264740d6afa71de6781dd64"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c07ef342f800e4ced288feec5d2b1bd9c4153643":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["97d4692d0c601ff773f0a2231967312428a904e4"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"c8243e301531f97de264740d6afa71de6781dd64":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2"],"fd61a613ef9a358a4c872a276b80a76e67c2cc49":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"7ae958a739da1866696f442384393ba2f13e33e5":["c9cfbee9773cbd88cf80789231ef013688395a22"],"2f318516df5421e5ec511702abaa8c2a16156327":["20e94e61fe5291647346b70437617e6b6c370408","cdebaec5d7b0b0b5575a6854e48eda9867bbd167","2459db523605752a3affcf444fb717d625904488","c8243e301531f97de264740d6afa71de6781dd64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","56572ec06f1407c066d6b7399413178b33176cd8","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","c07ef342f800e4ced288feec5d2b1bd9c4153643","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}