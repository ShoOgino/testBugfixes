{"path":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testGetIndexCommit().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testGetIndexCommit().mjava","pathOld":"/dev/null","sourceNew":"    public void testGetIndexCommit() throws IOException {\n\n      RAMDirectory d = new MockRAMDirectory();\n\n      // set up writer\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      IndexReader r = IndexReader.open(d, false);\n      IndexCommit c = r.getIndexCommit();\n\n      assertEquals(sis.getCurrentSegmentFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r2 = r.reopen();\n      assertFalse(c.equals(r2.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().isOptimized());\n      r2.close();\n\n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      r2 = r.reopen();\n      assertTrue(r2.getIndexCommit().isOptimized());\n\n      r.close();\n      r2.close();\n      d.close();\n    }      \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testGetIndexCommit().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testGetIndexCommit().mjava","sourceNew":"    public void testGetIndexCommit() throws IOException {\n\n      RAMDirectory d = new MockRAMDirectory();\n\n      // set up writer\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      IndexReader r = IndexReader.open(d, false);\n      IndexCommit c = r.getIndexCommit();\n\n      assertEquals(sis.getCurrentSegmentFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r2 = r.reopen();\n      assertFalse(c.equals(r2.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().isOptimized());\n      r2.close();\n\n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      r2 = r.reopen();\n      assertTrue(r2.getIndexCommit().isOptimized());\n\n      r.close();\n      r2.close();\n      d.close();\n    }      \n\n","sourceOld":"    public void testGetIndexCommit() throws IOException {\n\n      RAMDirectory d = new MockRAMDirectory();\n\n      // set up writer\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      IndexReader r = IndexReader.open(d, false);\n      IndexCommit c = r.getIndexCommit();\n\n      assertEquals(sis.getCurrentSegmentFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r2 = r.reopen();\n      assertFalse(c.equals(r2.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().isOptimized());\n      r2.close();\n\n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      r2 = r.reopen();\n      assertTrue(r2.getIndexCommit().isOptimized());\n\n      r.close();\n      r2.close();\n      d.close();\n    }      \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}