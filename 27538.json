{"path":"lucene/src/java/org/apache/lucene/index/SegmentDeletes#update(SegmentDeletes,boolean).mjava","commits":[{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentDeletes#update(SegmentDeletes,boolean).mjava","pathOld":"/dev/null","sourceNew":"  void update(SegmentDeletes in, boolean noLimit) {\n    numTermDeletes.addAndGet(in.numTermDeletes.get());\n    for (Map.Entry<Term,Integer> ent : in.terms.entrySet()) {\n      final Term term = ent.getKey();\n      if (!terms.containsKey(term)) {\n        // only incr bytesUsed if this term wasn't already buffered:\n        bytesUsed.addAndGet(BYTES_PER_DEL_TERM);\n      }\n      final Integer limit;\n      if (noLimit) {\n        limit = MAX_INT;\n      } else {\n        limit = ent.getValue();\n      }\n      terms.put(term, limit);\n    }\n\n    for (Map.Entry<Query,Integer> ent : in.queries.entrySet()) {\n      final Query query = ent.getKey();\n      if (!queries.containsKey(query)) {\n        // only incr bytesUsed if this query wasn't already buffered:\n        bytesUsed.addAndGet(BYTES_PER_DEL_QUERY);\n      }\n      final Integer limit;\n      if (noLimit) {\n        limit = MAX_INT;\n      } else {\n        limit = ent.getValue();\n      }\n      queries.put(query, limit);\n    }\n\n    // docIDs never move across segments and the docIDs\n    // should already be cleared\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentDeletes#update(SegmentDeletes,boolean).mjava","pathOld":"/dev/null","sourceNew":"  void update(SegmentDeletes in, boolean noLimit) {\n    numTermDeletes.addAndGet(in.numTermDeletes.get());\n    for (Map.Entry<Term,Integer> ent : in.terms.entrySet()) {\n      final Term term = ent.getKey();\n      if (!terms.containsKey(term)) {\n        // only incr bytesUsed if this term wasn't already buffered:\n        bytesUsed.addAndGet(BYTES_PER_DEL_TERM);\n      }\n      final Integer limit;\n      if (noLimit) {\n        limit = MAX_INT;\n      } else {\n        limit = ent.getValue();\n      }\n      terms.put(term, limit);\n    }\n\n    for (Map.Entry<Query,Integer> ent : in.queries.entrySet()) {\n      final Query query = ent.getKey();\n      if (!queries.containsKey(query)) {\n        // only incr bytesUsed if this query wasn't already buffered:\n        bytesUsed.addAndGet(BYTES_PER_DEL_QUERY);\n      }\n      final Integer limit;\n      if (noLimit) {\n        limit = MAX_INT;\n      } else {\n        limit = ent.getValue();\n      }\n      queries.put(query, limit);\n    }\n\n    // docIDs never move across segments and the docIDs\n    // should already be cleared\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentDeletes#update(SegmentDeletes,boolean).mjava","pathOld":"/dev/null","sourceNew":"  void update(SegmentDeletes in, boolean noLimit) {\n    numTermDeletes.addAndGet(in.numTermDeletes.get());\n    for (Map.Entry<Term,Integer> ent : in.terms.entrySet()) {\n      final Term term = ent.getKey();\n      if (!terms.containsKey(term)) {\n        // only incr bytesUsed if this term wasn't already buffered:\n        bytesUsed.addAndGet(BYTES_PER_DEL_TERM);\n      }\n      final Integer limit;\n      if (noLimit) {\n        limit = MAX_INT;\n      } else {\n        limit = ent.getValue();\n      }\n      terms.put(term, limit);\n    }\n\n    for (Map.Entry<Query,Integer> ent : in.queries.entrySet()) {\n      final Query query = ent.getKey();\n      if (!queries.containsKey(query)) {\n        // only incr bytesUsed if this query wasn't already buffered:\n        bytesUsed.addAndGet(BYTES_PER_DEL_QUERY);\n      }\n      final Integer limit;\n      if (noLimit) {\n        limit = MAX_INT;\n      } else {\n        limit = ent.getValue();\n      }\n      queries.put(query, limit);\n    }\n\n    // docIDs never move across segments and the docIDs\n    // should already be cleared\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#update(BufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentDeletes#update(SegmentDeletes,boolean).mjava","sourceNew":"  void update(BufferedDeletes in) {\n    numTermDeletes.addAndGet(in.numTermDeletes.get());\n    for (Map.Entry<Term,Integer> ent : in.terms.entrySet()) {\n      final Term term = ent.getKey();\n      if (!terms.containsKey(term)) {\n        // only incr bytesUsed if this term wasn't already buffered:\n        bytesUsed.addAndGet(BYTES_PER_DEL_TERM);\n      }\n      terms.put(term, MAX_INT);\n    }\n\n    for (Map.Entry<Query,Integer> ent : in.queries.entrySet()) {\n      final Query query = ent.getKey();\n      if (!queries.containsKey(query)) {\n        // only incr bytesUsed if this query wasn't already buffered:\n        bytesUsed.addAndGet(BYTES_PER_DEL_QUERY);\n      }\n      queries.put(query, MAX_INT);\n    }\n\n    // docIDs never move across segments and the docIDs\n    // should already be cleared\n  }\n\n","sourceOld":"  void update(SegmentDeletes in, boolean noLimit) {\n    numTermDeletes.addAndGet(in.numTermDeletes.get());\n    for (Map.Entry<Term,Integer> ent : in.terms.entrySet()) {\n      final Term term = ent.getKey();\n      if (!terms.containsKey(term)) {\n        // only incr bytesUsed if this term wasn't already buffered:\n        bytesUsed.addAndGet(BYTES_PER_DEL_TERM);\n      }\n      final Integer limit;\n      if (noLimit) {\n        limit = MAX_INT;\n      } else {\n        limit = ent.getValue();\n      }\n      terms.put(term, limit);\n    }\n\n    for (Map.Entry<Query,Integer> ent : in.queries.entrySet()) {\n      final Query query = ent.getKey();\n      if (!queries.containsKey(query)) {\n        // only incr bytesUsed if this query wasn't already buffered:\n        bytesUsed.addAndGet(BYTES_PER_DEL_QUERY);\n      }\n      final Integer limit;\n      if (noLimit) {\n        limit = MAX_INT;\n      } else {\n        limit = ent.getValue();\n      }\n      queries.put(query, limit);\n    }\n\n    // docIDs never move across segments and the docIDs\n    // should already be cleared\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentDeletes#update(SegmentDeletes,boolean).mjava","sourceNew":null,"sourceOld":"  void update(SegmentDeletes in, boolean noLimit) {\n    numTermDeletes.addAndGet(in.numTermDeletes.get());\n    for (Map.Entry<Term,Integer> ent : in.terms.entrySet()) {\n      final Term term = ent.getKey();\n      if (!terms.containsKey(term)) {\n        // only incr bytesUsed if this term wasn't already buffered:\n        bytesUsed.addAndGet(BYTES_PER_DEL_TERM);\n      }\n      final Integer limit;\n      if (noLimit) {\n        limit = MAX_INT;\n      } else {\n        limit = ent.getValue();\n      }\n      terms.put(term, limit);\n    }\n\n    for (Map.Entry<Query,Integer> ent : in.queries.entrySet()) {\n      final Query query = ent.getKey();\n      if (!queries.containsKey(query)) {\n        // only incr bytesUsed if this query wasn't already buffered:\n        bytesUsed.addAndGet(BYTES_PER_DEL_QUERY);\n      }\n      final Integer limit;\n      if (noLimit) {\n        limit = MAX_INT;\n      } else {\n        limit = ent.getValue();\n      }\n      queries.put(query, limit);\n    }\n\n    // docIDs never move across segments and the docIDs\n    // should already be cleared\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#update(BufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentDeletes#update(SegmentDeletes,boolean).mjava","sourceNew":"  void update(BufferedDeletes in) {\n    numTermDeletes.addAndGet(in.numTermDeletes.get());\n    for (Map.Entry<Term,Integer> ent : in.terms.entrySet()) {\n      final Term term = ent.getKey();\n      if (!terms.containsKey(term)) {\n        // only incr bytesUsed if this term wasn't already buffered:\n        bytesUsed.addAndGet(BYTES_PER_DEL_TERM);\n      }\n      terms.put(term, MAX_INT);\n    }\n\n    for (Map.Entry<Query,Integer> ent : in.queries.entrySet()) {\n      final Query query = ent.getKey();\n      if (!queries.containsKey(query)) {\n        // only incr bytesUsed if this query wasn't already buffered:\n        bytesUsed.addAndGet(BYTES_PER_DEL_QUERY);\n      }\n      queries.put(query, MAX_INT);\n    }\n\n    // docIDs never move across segments and the docIDs\n    // should already be cleared\n  }\n\n","sourceOld":"  void update(SegmentDeletes in, boolean noLimit) {\n    numTermDeletes.addAndGet(in.numTermDeletes.get());\n    for (Map.Entry<Term,Integer> ent : in.terms.entrySet()) {\n      final Term term = ent.getKey();\n      if (!terms.containsKey(term)) {\n        // only incr bytesUsed if this term wasn't already buffered:\n        bytesUsed.addAndGet(BYTES_PER_DEL_TERM);\n      }\n      final Integer limit;\n      if (noLimit) {\n        limit = MAX_INT;\n      } else {\n        limit = ent.getValue();\n      }\n      terms.put(term, limit);\n    }\n\n    for (Map.Entry<Query,Integer> ent : in.queries.entrySet()) {\n      final Query query = ent.getKey();\n      if (!queries.containsKey(query)) {\n        // only incr bytesUsed if this query wasn't already buffered:\n        bytesUsed.addAndGet(BYTES_PER_DEL_QUERY);\n      }\n      final Integer limit;\n      if (noLimit) {\n        limit = MAX_INT;\n      } else {\n        limit = ent.getValue();\n      }\n      queries.put(query, limit);\n    }\n\n    // docIDs never move across segments and the docIDs\n    // should already be cleared\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"c19f985e36a65cc969e8e564fe337a0d41512075":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c19f985e36a65cc969e8e564fe337a0d41512075"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}