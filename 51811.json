{"path":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetProcessor#getFacetRangeCounts().mjava","commits":[{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetProcessor#getFacetRangeCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts().mjava","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet\n   * counts for each facet numerical field, range, and interval\n   * specified in the SolrParams\n   *\n   * @see org.apache.solr.common.params.FacetParams#FACET_RANGE\n   */\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> getFacetRangeCounts() throws IOException, SyntaxError {\n    final NamedList<Object> resOuter = new SimpleOrderedMap<>();\n\n    List<RangeFacetRequest> rangeFacetRequests = Collections.emptyList();\n    try {\n      FacetComponent.FacetContext facetContext = FacetComponent.FacetContext.getFacetContext(req);\n      rangeFacetRequests = facetContext.getAllRangeFacetRequests();\n    } catch (IllegalStateException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to compute facet ranges, facet context is not set\");\n    }\n\n    if (rangeFacetRequests.isEmpty()) return resOuter;\n    for (RangeFacetRequest rangeFacetRequest : rangeFacetRequests) {\n      getFacetRangeCounts(rangeFacetRequest, resOuter);\n    }\n\n    return resOuter;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of value constraints and the associated facet\n   * counts for each facet numerical field, range, and interval\n   * specified in the SolrParams\n   *\n   * @see FacetParams#FACET_RANGE\n   */\n\n  public NamedList<Object> getFacetRangeCounts() throws IOException, SyntaxError {\n    final NamedList<Object> resOuter = new SimpleOrderedMap<>();\n    final String[] fields = global.getParams(FacetParams.FACET_RANGE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      getFacetRangeCounts(f, resOuter);\n    }\n\n    return resOuter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetProcessor#getFacetRangeCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetProcessor#getFacetRangeCounts().mjava","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet\n   * counts for each facet numerical field, range, and interval\n   * specified in the SolrParams\n   *\n   * @see org.apache.solr.common.params.FacetParams#FACET_RANGE\n   */\n  public NamedList<Object> getFacetRangeCounts() throws IOException, SyntaxError {\n    final NamedList<Object> resOuter = new SimpleOrderedMap<>();\n\n    List<RangeFacetRequest> rangeFacetRequests = Collections.emptyList();\n    try {\n      FacetComponent.FacetContext facetContext = FacetComponent.FacetContext.getFacetContext(req);\n      rangeFacetRequests = facetContext.getAllRangeFacetRequests();\n    } catch (IllegalStateException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to compute facet ranges, facet context is not set\");\n    }\n\n    if (rangeFacetRequests.isEmpty()) return resOuter;\n    for (RangeFacetRequest rangeFacetRequest : rangeFacetRequests) {\n      getFacetRangeCounts(rangeFacetRequest, resOuter);\n    }\n\n    return resOuter;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of value constraints and the associated facet\n   * counts for each facet numerical field, range, and interval\n   * specified in the SolrParams\n   *\n   * @see org.apache.solr.common.params.FacetParams#FACET_RANGE\n   */\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> getFacetRangeCounts() throws IOException, SyntaxError {\n    final NamedList<Object> resOuter = new SimpleOrderedMap<>();\n\n    List<RangeFacetRequest> rangeFacetRequests = Collections.emptyList();\n    try {\n      FacetComponent.FacetContext facetContext = FacetComponent.FacetContext.getFacetContext(req);\n      rangeFacetRequests = facetContext.getAllRangeFacetRequests();\n    } catch (IllegalStateException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to compute facet ranges, facet context is not set\");\n    }\n\n    if (rangeFacetRequests.isEmpty()) return resOuter;\n    for (RangeFacetRequest rangeFacetRequest : rangeFacetRequests) {\n      getFacetRangeCounts(rangeFacetRequest, resOuter);\n    }\n\n    return resOuter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetProcessor#getFacetRangeCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetProcessor#getFacetRangeCounts().mjava","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet\n   * counts for each facet numerical field, range, and interval\n   * specified in the SolrParams\n   *\n   * @see org.apache.solr.common.params.FacetParams#FACET_RANGE\n   */\n  public NamedList<Object> getFacetRangeCounts() throws IOException, SyntaxError {\n    final NamedList<Object> resOuter = new SimpleOrderedMap<>();\n\n    List<RangeFacetRequest> rangeFacetRequests = Collections.emptyList();\n    try {\n      FacetComponent.FacetContext facetContext = FacetComponent.FacetContext.getFacetContext(req);\n      rangeFacetRequests = facetContext.getAllRangeFacetRequests();\n    } catch (IllegalStateException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to compute facet ranges, facet context is not set\");\n    }\n\n    if (rangeFacetRequests.isEmpty()) return resOuter;\n    for (RangeFacetRequest rangeFacetRequest : rangeFacetRequests) {\n      getFacetRangeCounts(rangeFacetRequest, resOuter);\n    }\n\n    return resOuter;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of value constraints and the associated facet\n   * counts for each facet numerical field, range, and interval\n   * specified in the SolrParams\n   *\n   * @see org.apache.solr.common.params.FacetParams#FACET_RANGE\n   */\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> getFacetRangeCounts() throws IOException, SyntaxError {\n    final NamedList<Object> resOuter = new SimpleOrderedMap<>();\n\n    List<RangeFacetRequest> rangeFacetRequests = Collections.emptyList();\n    try {\n      FacetComponent.FacetContext facetContext = FacetComponent.FacetContext.getFacetContext(req);\n      rangeFacetRequests = facetContext.getAllRangeFacetRequests();\n    } catch (IllegalStateException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to compute facet ranges, facet context is not set\");\n    }\n\n    if (rangeFacetRequests.isEmpty()) return resOuter;\n    for (RangeFacetRequest rangeFacetRequest : rangeFacetRequests) {\n      getFacetRangeCounts(rangeFacetRequest, resOuter);\n    }\n\n    return resOuter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"46dc9ac8b3e748407baaef82453138ff3974480c":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["22d0a81a05eba47d5e18976f17d88306b218cc22","46dc9ac8b3e748407baaef82453138ff3974480c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["46dc9ac8b3e748407baaef82453138ff3974480c"]},"commit2Childs":{"46dc9ac8b3e748407baaef82453138ff3974480c":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}