{"path":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#sort(HashMap).mjava","commits":[{"id":"50e7972fe4865715af8951d4ba15555e3426fc5d","date":1115024647,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#sort(HashMap).mjava","pathOld":"/dev/null","sourceNew":"\t/** returns a view of the given map's entries, sorted ascending by key */\n\tprivate static Map.Entry[] sort(HashMap map) {\n\t\tint size = map.size();\n\t\tMap.Entry[] entries = new Map.Entry[size];\n\t\t\n\t\tIterator iter = map.entrySet().iterator();\n\t\tfor (int i=0; i < size; i++) {\n\t\t\tentries[i] = (Map.Entry) iter.next();\n\t\t}\n\t\t\n\t\tif (size > 1) Arrays.sort(entries, termComparator);\n\t\treturn entries;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8f14489323057ef6de92ba5ea2d0cfe6e34755f","date":1120167605,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#sort(HashMap).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#sort(HashMap).mjava","sourceNew":"\t/** returns a view of the given map's entries, sorted ascending by key */\r\n\tprivate static Map.Entry[] sort(HashMap map) {\r\n\t\tint size = map.size();\r\n\t\tMap.Entry[] entries = new Map.Entry[size];\r\n\t\t\r\n\t\tIterator iter = map.entrySet().iterator();\r\n\t\tfor (int i=0; i < size; i++) {\r\n\t\t\tentries[i] = (Map.Entry) iter.next();\r\n\t\t}\r\n\t\t\r\n\t\tif (size > 1) Arrays.sort(entries, termComparator);\r\n\t\treturn entries;\r\n\t}\r\n\n","sourceOld":"\t/** returns a view of the given map's entries, sorted ascending by key */\n\tprivate static Map.Entry[] sort(HashMap map) {\n\t\tint size = map.size();\n\t\tMap.Entry[] entries = new Map.Entry[size];\n\t\t\n\t\tIterator iter = map.entrySet().iterator();\n\t\tfor (int i=0; i < size; i++) {\n\t\t\tentries[i] = (Map.Entry) iter.next();\n\t\t}\n\t\t\n\t\tif (size > 1) Arrays.sort(entries, termComparator);\n\t\treturn entries;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35dd40ede4dd66fa47506858c4a073d295c5a76e","date":1133587328,"type":4,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#sort(HashMap).mjava","sourceNew":null,"sourceOld":"\t/** returns a view of the given map's entries, sorted ascending by key */\r\n\tprivate static Map.Entry[] sort(HashMap map) {\r\n\t\tint size = map.size();\r\n\t\tMap.Entry[] entries = new Map.Entry[size];\r\n\t\t\r\n\t\tIterator iter = map.entrySet().iterator();\r\n\t\tfor (int i=0; i < size; i++) {\r\n\t\t\tentries[i] = (Map.Entry) iter.next();\r\n\t\t}\r\n\t\t\r\n\t\tif (size > 1) Arrays.sort(entries, termComparator);\r\n\t\treturn entries;\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a93e1e4a21be8ebb98e53e6933412a363931faa1","date":1133587471,"type":0,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#sort(HashMap).mjava","pathOld":"/dev/null","sourceNew":"\t/** returns a view of the given map's entries, sorted ascending by key */\n\tprivate static Map.Entry[] sort(HashMap map) {\n\t\tint size = map.size();\n\t\tMap.Entry[] entries = new Map.Entry[size];\n\t\t\n\t\tIterator iter = map.entrySet().iterator();\n\t\tfor (int i=0; i < size; i++) {\n\t\t\tentries[i] = (Map.Entry) iter.next();\n\t\t}\n\t\t\n\t\tif (size > 1) Arrays.sort(entries, termComparator);\n\t\treturn entries;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f68e24227d5556d33ee6d586fd9010cd9ff8bec","date":1150091176,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#sort(HashMap).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#sort(HashMap).mjava","sourceNew":"  /** returns a view of the given map's entries, sorted ascending by key */\n  private static Map.Entry[] sort(HashMap map) {\n    int size = map.size();\n    Map.Entry[] entries = new Map.Entry[size];\n    \n    Iterator iter = map.entrySet().iterator();\n    for (int i=0; i < size; i++) {\n      entries[i] = (Map.Entry) iter.next();\n    }\n    \n    if (size > 1) Arrays.sort(entries, termComparator);\n    return entries;\n  }\n\n","sourceOld":"\t/** returns a view of the given map's entries, sorted ascending by key */\n\tprivate static Map.Entry[] sort(HashMap map) {\n\t\tint size = map.size();\n\t\tMap.Entry[] entries = new Map.Entry[size];\n\t\t\n\t\tIterator iter = map.entrySet().iterator();\n\t\tfor (int i=0; i < size; i++) {\n\t\t\tentries[i] = (Map.Entry) iter.next();\n\t\t}\n\t\t\n\t\tif (size > 1) Arrays.sort(entries, termComparator);\n\t\treturn entries;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f11899016a0460a7ea2e4b008d002e1e75c7d867","date":1256772085,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#[K,V]_sort(HashMap[K,V]).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#sort(HashMap).mjava","sourceNew":"  /** returns a view of the given map's entries, sorted ascending by key */\n  private static <K,V> Map.Entry<K,V>[] sort(HashMap<K,V> map) {\n    int size = map.size();\n    Map.Entry<K,V>[] entries = new Map.Entry[size];\n    \n    Iterator<Map.Entry<K,V>> iter = map.entrySet().iterator();\n    for (int i=0; i < size; i++) {\n      entries[i] = iter.next();\n    }\n    \n    if (size > 1) Arrays.sort(entries, termComparator);\n    return entries;\n  }\n\n","sourceOld":"  /** returns a view of the given map's entries, sorted ascending by key */\n  private static Map.Entry[] sort(HashMap map) {\n    int size = map.size();\n    Map.Entry[] entries = new Map.Entry[size];\n    \n    Iterator iter = map.entrySet().iterator();\n    for (int i=0; i < size; i++) {\n      entries[i] = (Map.Entry) iter.next();\n    }\n    \n    if (size > 1) Arrays.sort(entries, termComparator);\n    return entries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35dd40ede4dd66fa47506858c4a073d295c5a76e":["c8f14489323057ef6de92ba5ea2d0cfe6e34755f"],"c8f14489323057ef6de92ba5ea2d0cfe6e34755f":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["a93e1e4a21be8ebb98e53e6933412a363931faa1"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a93e1e4a21be8ebb98e53e6933412a363931faa1":["35dd40ede4dd66fa47506858c4a073d295c5a76e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"]},"commit2Childs":{"35dd40ede4dd66fa47506858c4a073d295c5a76e":["a93e1e4a21be8ebb98e53e6933412a363931faa1"],"c8f14489323057ef6de92ba5ea2d0cfe6e34755f":["35dd40ede4dd66fa47506858c4a073d295c5a76e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["c8f14489323057ef6de92ba5ea2d0cfe6e34755f"],"a93e1e4a21be8ebb98e53e6933412a363931faa1":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}