{"path":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","commits":[{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","pathOld":"/dev/null","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    public synchronized void close() throws IOException {\n      Iterator iter = readerMap.entrySet().iterator();\n      while (iter.hasNext()) {\n        Map.Entry ent = (Map.Entry) iter.next();\n\n        SegmentReader sr = (SegmentReader) ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.startCommit();\n          boolean success = false;\n          try {\n            sr.doCommit(null);\n            success = true;\n          } finally {\n            if (!success) {\n              sr.rollbackCommit();\n            }\n          }\n        }\n\n        iter.remove();\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1085ea837da8f1e96697e17cf73e1d08e7329261","c1ea6b128a9ab931c83254ad0a4248ae09d81fa4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f33fc116e28d7704378c9dd333711753bd0c9706","date":1248010179,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      Iterator iter = readerMap.entrySet().iterator();\n      while (iter.hasNext()) {\n        Map.Entry ent = (Map.Entry) iter.next();\n\n        SegmentReader sr = (SegmentReader) ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.startCommit();\n          boolean success = false;\n          try {\n            sr.doCommit(null);\n            success = true;\n          } finally {\n            if (!success) {\n              sr.rollbackCommit();\n            }\n          }\n        }\n\n        iter.remove();\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    public synchronized void close() throws IOException {\n      Iterator iter = readerMap.entrySet().iterator();\n      while (iter.hasNext()) {\n        Map.Entry ent = (Map.Entry) iter.next();\n\n        SegmentReader sr = (SegmentReader) ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.startCommit();\n          boolean success = false;\n          try {\n            sr.doCommit(null);\n            success = true;\n          } finally {\n            if (!success) {\n              sr.rollbackCommit();\n            }\n          }\n        }\n\n        iter.remove();\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      Iterator<Map.Entry<SegmentInfo,SegmentReader>> iter = readerMap.entrySet().iterator();\n      while (iter.hasNext()) {\n        \n        Map.Entry<SegmentInfo,SegmentReader> ent = iter.next();\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.startCommit();\n          boolean success = false;\n          try {\n            sr.doCommit(null);\n            success = true;\n          } finally {\n            if (!success) {\n              sr.rollbackCommit();\n            }\n          }\n        }\n\n        iter.remove();\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      Iterator iter = readerMap.entrySet().iterator();\n      while (iter.hasNext()) {\n        Map.Entry ent = (Map.Entry) iter.next();\n\n        SegmentReader sr = (SegmentReader) ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.startCommit();\n          boolean success = false;\n          try {\n            sr.doCommit(null);\n            success = true;\n          } finally {\n            if (!success) {\n              sr.rollbackCommit();\n            }\n          }\n        }\n\n        iter.remove();\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      Iterator<Map.Entry<SegmentInfo,SegmentReader>> iter = readerMap.entrySet().iterator();\n      while (iter.hasNext()) {\n        \n        Map.Entry<SegmentInfo,SegmentReader> ent = iter.next();\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.startCommit();\n          boolean success = false;\n          try {\n            sr.doCommit(null);\n            success = true;\n          } finally {\n            if (!success) {\n              sr.rollbackCommit();\n            }\n          }\n        }\n\n        iter.remove();\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      Iterator<Map.Entry<SegmentInfo,SegmentReader>> iter = readerMap.entrySet().iterator();\n      while (iter.hasNext()) {\n        \n        Map.Entry<SegmentInfo,SegmentReader> ent = iter.next();\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.startCommit();\n          boolean success = false;\n          try {\n            sr.doCommit(null);\n            success = true;\n          } finally {\n            if (!success) {\n              sr.rollbackCommit();\n            }\n          }\n        }\n\n        iter.remove();\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f33fc116e28d7704378c9dd333711753bd0c9706":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"ef82ff03e4016c705811b2658e81471a645c0e49":["f33fc116e28d7704378c9dd333711753bd0c9706"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4ff8864209d2e972cb4393600c26082f9a6533d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ef82ff03e4016c705811b2658e81471a645c0e49"]},"commit2Childs":{"f33fc116e28d7704378c9dd333711753bd0c9706":["ef82ff03e4016c705811b2658e81471a645c0e49"],"ef82ff03e4016c705811b2658e81471a645c0e49":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["f33fc116e28d7704378c9dd333711753bd0c9706"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}