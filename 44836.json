{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testValidation().mjava","commits":[{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testValidation().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testValidation() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // unknown trigger properties\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'foo': 'bar',\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n\n    // invalid trigger properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'rate': 'foo',\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"rate=Invalid 'rate' configuration value: 'foo'\"));\n    }\n\n    // unknown trigger action properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'foo' : 'bar',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n\n    // unknown trigger listener properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'foo' : 'bar',\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a","date":1524514741,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testValidation().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testValidation().mjava","sourceNew":"  @Test\n  public void testValidation() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // unknown trigger properties\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'foo': 'bar',\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n\n    // invalid trigger properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'aboveRate': 'foo',\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"aboveRate=Invalid configuration value: 'foo'\"));\n    }\n\n    // unknown trigger action properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'foo' : 'bar',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n\n    // unknown trigger listener properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'foo' : 'bar',\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testValidation() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // unknown trigger properties\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'foo': 'bar',\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n\n    // invalid trigger properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'rate': 'foo',\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"rate=Invalid 'rate' configuration value: 'foo'\"));\n    }\n\n    // unknown trigger action properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'foo' : 'bar',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n\n    // unknown trigger listener properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'foo' : 'bar',\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testValidation().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testValidation().mjava","sourceNew":"  @Test\n  public void testValidation() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // unknown trigger properties\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'foo': 'bar',\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n\n    // invalid trigger properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'aboveRate': 'foo',\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"aboveRate=Invalid configuration value: 'foo'\"));\n    }\n\n    // unknown trigger action properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'foo' : 'bar',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n\n    // unknown trigger listener properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'foo' : 'bar',\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testValidation() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // unknown trigger properties\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'foo': 'bar',\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n\n    // invalid trigger properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'aboveRate': 'foo',\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"aboveRate=Invalid configuration value: 'foo'\"));\n    }\n\n    // unknown trigger action properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'foo' : 'bar',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n\n    // unknown trigger listener properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'foo' : 'bar',\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db96734b79e26d948b59f68bd4564c4836a71acf","date":1585375566,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testValidation().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testValidation().mjava","sourceNew":"  @Test\n  public void testValidation() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // unknown trigger properties\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'foo': 'bar',\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (BaseHttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((BaseHttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n\n    // invalid trigger properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'aboveRate': 'foo',\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (BaseHttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((BaseHttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"aboveRate=Invalid configuration value: 'foo'\"));\n    }\n\n    // unknown trigger action properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'foo' : 'bar',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (BaseHttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((BaseHttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n\n    // unknown trigger listener properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'foo' : 'bar',\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (BaseHttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((BaseHttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testValidation() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // unknown trigger properties\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'foo': 'bar',\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n\n    // invalid trigger properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'aboveRate': 'foo',\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"aboveRate=Invalid configuration value: 'foo'\"));\n    }\n\n    // unknown trigger action properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'foo' : 'bar',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n\n    // unknown trigger listener properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'foo' : 'bar',\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testValidation().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testValidation().mjava","sourceNew":"  @Test\n  public void testValidation() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // unknown trigger properties\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'foo': 'bar',\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (BaseHttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((BaseHttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n\n    // invalid trigger properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'aboveRate': 'foo',\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (BaseHttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((BaseHttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"aboveRate=Invalid configuration value: 'foo'\"));\n    }\n\n    // unknown trigger action properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'foo' : 'bar',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (BaseHttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((BaseHttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n\n    // unknown trigger listener properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'foo' : 'bar',\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (BaseHttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((BaseHttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testValidation() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // unknown trigger properties\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'foo': 'bar',\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (BaseHttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((BaseHttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n\n    // invalid trigger properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'aboveRate': 'foo',\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (BaseHttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((BaseHttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"aboveRate=Invalid configuration value: 'foo'\"));\n    }\n\n    // unknown trigger action properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'foo' : 'bar',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (BaseHttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((BaseHttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n\n    // unknown trigger listener properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'foo' : 'bar',\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (BaseHttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((BaseHttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testValidation().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testValidation() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    // unknown trigger properties\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'foo': 'bar',\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (BaseHttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((BaseHttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n\n    // invalid trigger properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'aboveRate': 'foo',\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (BaseHttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((BaseHttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"aboveRate=Invalid configuration value: 'foo'\"));\n    }\n\n    // unknown trigger action properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'foo' : 'bar',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (BaseHttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((BaseHttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n\n    // unknown trigger listener properties\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'foo' : 'bar',\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (BaseHttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((BaseHttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"foo=unknown property\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["db96734b79e26d948b59f68bd4564c4836a71acf"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db96734b79e26d948b59f68bd4564c4836a71acf":["89948af0461fead48f44ba8fb7866f107ce83f22"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"89948af0461fead48f44ba8fb7866f107ce83f22":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a":["89948af0461fead48f44ba8fb7866f107ce83f22"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"db96734b79e26d948b59f68bd4564c4836a71acf":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"],"89948af0461fead48f44ba8fb7866f107ce83f22":["db96734b79e26d948b59f68bd4564c4836a71acf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}