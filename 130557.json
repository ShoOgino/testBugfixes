{"path":"src/java/org/apache/solr/util/SolrPluginUtils#parseFilterQueries(SolrQueryRequest).mjava","commits":[{"id":"d1b4f9f023bf5098df34505adf1ed91daa67c239","date":1157655314,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#parseFilterQueries(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Builds a list of Query objects that should be used to filter results\n   * @see SolrParams#FQ\n   * @return null if no filter queries\n   */\n  public static List<Query> parseFilterQueries(SolrQueryRequest req) throws ParseException {\n    String[] in = req.getParams().getParams(SolrParams.FQ);\n    \n    if (null == in || 0 == in.length) return null;\n\n    List<Query> out = new LinkedList<Query>();\n    SolrIndexSearcher s = req.getSearcher();\n    /* Ignore SolrParams.DF - could have init param FQs assuming the\n     * schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default, they should be explicit in the FQ.\n     */\n    SolrQueryParser qp = new SolrQueryParser(s.getSchema(), null);\n    for (String q : in) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(qp.parse(q));\n      }\n    }\n    return out;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"269c8e9f1563aaf046389326e061a3a2c6a62a73","date":1173126130,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#parseFilterQueries(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#parseFilterQueries(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Builds a list of Query objects that should be used to filter results\n   * @see SolrParams#FQ\n   * @return null if no filter queries\n   */\n  public static List<Query> parseFilterQueries(SolrQueryRequest req) throws ParseException {\n    return parseQueryStrings(req, req.getParams().getParams(SolrParams.FQ));\n  }\n\n","sourceOld":"  /**\n   * Builds a list of Query objects that should be used to filter results\n   * @see SolrParams#FQ\n   * @return null if no filter queries\n   */\n  public static List<Query> parseFilterQueries(SolrQueryRequest req) throws ParseException {\n    String[] in = req.getParams().getParams(SolrParams.FQ);\n    \n    if (null == in || 0 == in.length) return null;\n\n    List<Query> out = new LinkedList<Query>();\n    SolrIndexSearcher s = req.getSearcher();\n    /* Ignore SolrParams.DF - could have init param FQs assuming the\n     * schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default, they should be explicit in the FQ.\n     */\n    SolrQueryParser qp = new SolrQueryParser(s.getSchema(), null);\n    for (String q : in) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(qp.parse(q));\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef","date":1185993405,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#parseFilterQueries(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#parseFilterQueries(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Builds a list of Query objects that should be used to filter results\n   * @see SolrParams#FQ\n   * @return null if no filter queries\n   */\n  public static List<Query> parseFilterQueries(SolrQueryRequest req) throws ParseException {\n    return parseQueryStrings(req, req.getParams().getParams(org.apache.solr.common.params.CommonParams.FQ));\n  }\n\n","sourceOld":"  /**\n   * Builds a list of Query objects that should be used to filter results\n   * @see SolrParams#FQ\n   * @return null if no filter queries\n   */\n  public static List<Query> parseFilterQueries(SolrQueryRequest req) throws ParseException {\n    return parseQueryStrings(req, req.getParams().getParams(SolrParams.FQ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0af8df23c8bf16151f1911c8ad7e2bd21386b1e","date":1190668853,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#parseFilterQueries(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#parseFilterQueries(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Builds a list of Query objects that should be used to filter results\n   * @see CommonParams#FQ\n   * @return null if no filter queries\n   */\n  public static List<Query> parseFilterQueries(SolrQueryRequest req) throws ParseException {\n    return parseQueryStrings(req, req.getParams().getParams(org.apache.solr.common.params.CommonParams.FQ));\n  }\n\n","sourceOld":"  /**\n   * Builds a list of Query objects that should be used to filter results\n   * @see SolrParams#FQ\n   * @return null if no filter queries\n   */\n  public static List<Query> parseFilterQueries(SolrQueryRequest req) throws ParseException {\n    return parseQueryStrings(req, req.getParams().getParams(org.apache.solr.common.params.CommonParams.FQ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#parseFilterQueries(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#parseFilterQueries(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Builds a list of Query objects that should be used to filter results\n   * @see CommonParams#FQ\n   * @return null if no filter queries\n   */\n  public static List<Query> parseFilterQueries(SolrQueryRequest req) throws ParseException {\n    return parseQueryStrings(req, req.getParams().getParams(org.apache.solr.common.params.CommonParams.FQ));\n  }\n\n","sourceOld":"  /**\n   * Builds a list of Query objects that should be used to filter results\n   * @see CommonParams#FQ\n   * @return null if no filter queries\n   */\n  public static List<Query> parseFilterQueries(SolrQueryRequest req) throws ParseException {\n    return parseQueryStrings(req, req.getParams().getParams(org.apache.solr.common.params.CommonParams.FQ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["269c8e9f1563aaf046389326e061a3a2c6a62a73"],"d1b4f9f023bf5098df34505adf1ed91daa67c239":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"269c8e9f1563aaf046389326e061a3a2c6a62a73":["d1b4f9f023bf5098df34505adf1ed91daa67c239"],"c0af8df23c8bf16151f1911c8ad7e2bd21386b1e":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c0af8df23c8bf16151f1911c8ad7e2bd21386b1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["c0af8df23c8bf16151f1911c8ad7e2bd21386b1e"],"d1b4f9f023bf5098df34505adf1ed91daa67c239":["269c8e9f1563aaf046389326e061a3a2c6a62a73"],"269c8e9f1563aaf046389326e061a3a2c6a62a73":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"c0af8df23c8bf16151f1911c8ad7e2bd21386b1e":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d1b4f9f023bf5098df34505adf1ed91daa67c239"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}