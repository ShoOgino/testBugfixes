{"path":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","commits":[{"id":"bc00220e3dec859110781d5d19a6116501fb4a38","date":1273880298,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"/dev/null","sourceNew":"  public void testParsing() throws Exception\n  {\n    Reader reader = new StringReader(input);\n    \n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( p );\n    \n    loader.processUpdate( p, new JSONParser(reader) );\n    \n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(true, add.allowDups);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitFlush );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitFlush );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["818d704eaaf0fba0561d0d2752832e1015053482","818d704eaaf0fba0561d0d2752832e1015053482","818d704eaaf0fba0561d0d2752832e1015053482"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5653af107efef582afd0bc6aff175972359fdd6","date":1293390698,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    Reader reader = new StringReader(input);\n    \n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( p );\n    \n    loader.processUpdate( p, new JSONParser(reader) );\n    \n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitFlush );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitFlush );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    Reader reader = new StringReader(input);\n    \n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( p );\n    \n    loader.processUpdate( p, new JSONParser(reader) );\n    \n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(true, add.allowDups);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitFlush );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitFlush );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa","date":1293733647,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    Reader reader = new StringReader(input);\n    \n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( p );\n    \n    loader.processUpdate(req,  p, new JSONParser(reader) );\n    \n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitFlush );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitFlush );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    Reader reader = new StringReader(input);\n    \n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( p );\n    \n    loader.processUpdate( p, new JSONParser(reader) );\n    \n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitFlush );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitFlush );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    Reader reader = new StringReader(input);\n    \n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( p );\n    \n    loader.processUpdate(req,  p, new JSONParser(reader) );\n    \n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitFlush );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitFlush );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    Reader reader = new StringReader(input);\n    \n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( p );\n    \n    loader.processUpdate( p, new JSONParser(reader) );\n    \n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(true, add.allowDups);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitFlush );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitFlush );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    Reader reader = new StringReader(input);\n    \n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( p );\n    \n    loader.processUpdate(req,  p, new JSONParser(reader) );\n    \n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitFlush );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitFlush );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    Reader reader = new StringReader(input);\n    \n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( p );\n    \n    loader.processUpdate( p, new JSONParser(reader) );\n    \n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(true, add.allowDups);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitFlush );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitFlush );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19b15db2edd4d6bec35a41e44d8f1afe6384a905","date":1305144174,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitFlush );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitFlush );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    Reader reader = new StringReader(input);\n    \n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( p );\n    \n    loader.processUpdate(req,  p, new JSONParser(reader) );\n    \n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitFlush );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitFlush );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitFlush );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitFlush );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    Reader reader = new StringReader(input);\n    \n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( p );\n    \n    loader.processUpdate(req,  p, new JSONParser(reader) );\n    \n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitFlush );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitFlush );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitFlush );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitFlush );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    Reader reader = new StringReader(input);\n    \n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( p );\n    \n    loader.processUpdate(req,  p, new JSONParser(reader) );\n    \n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitFlush );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitFlush );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a71a0b2d4be2299a163f60626729852d81a8e02","date":1309442399,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitFlush );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitFlush );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitFlush );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitFlush );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitFlush );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitFlush );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["bc00220e3dec859110781d5d19a6116501fb4a38","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"19b15db2edd4d6bec35a41e44d8f1afe6384a905":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"c26f00b574427b55127e869b935845554afde1fa":["7a71a0b2d4be2299a163f60626729852d81a8e02","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["19b15db2edd4d6bec35a41e44d8f1afe6384a905","7a71a0b2d4be2299a163f60626729852d81a8e02"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","7a71a0b2d4be2299a163f60626729852d81a8e02"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["19b15db2edd4d6bec35a41e44d8f1afe6384a905"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["bc00220e3dec859110781d5d19a6116501fb4a38","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"b5653af107efef582afd0bc6aff175972359fdd6":["bc00220e3dec859110781d5d19a6116501fb4a38"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa","19b15db2edd4d6bec35a41e44d8f1afe6384a905"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["70ad682703b8585f5d0a637efec044d57ec05efb","19b15db2edd4d6bec35a41e44d8f1afe6384a905"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["7a71a0b2d4be2299a163f60626729852d81a8e02"],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["b5653af107efef582afd0bc6aff175972359fdd6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"bc00220e3dec859110781d5d19a6116501fb4a38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"19b15db2edd4d6bec35a41e44d8f1afe6384a905":["d083e83f225b11e5fdd900e83d26ddb385b6955c","7a71a0b2d4be2299a163f60626729852d81a8e02","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["c26f00b574427b55127e869b935845554afde1fa","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","a258fbb26824fd104ed795e5d9033d2d040049ee"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"b5653af107efef582afd0bc6aff175972359fdd6":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc00220e3dec859110781d5d19a6116501fb4a38"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["70ad682703b8585f5d0a637efec044d57ec05efb","19b15db2edd4d6bec35a41e44d8f1afe6384a905","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","a3776dccca01c11e7046323cfad46a3b4a471233"],"bc00220e3dec859110781d5d19a6116501fb4a38":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","b5653af107efef582afd0bc6aff175972359fdd6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}