{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRegexps().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRegexps().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\"));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\"));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\") instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\")).getRewriteMethod());\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\"));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\"));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \"));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\"));\n    assertEquals(re, qp.parse(\"/http.*/\"));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\"));\n    assertEquals(re, qp.parse(\"/http~0.5/\"));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\"));\n    assertEquals(re, qp.parse(\"/boo/\"));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\"));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\"));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, qp.parse(\"field:/foo/ field:/bar/\"));\n    assertEquals(two, qp.parse(\"/foo/ /bar/\"));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\"));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\"));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\") instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\")).getRewriteMethod());\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\"));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\"));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \"));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\"));\n    assertEquals(re, qp.parse(\"/http.*/\"));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\"));\n    assertEquals(re, qp.parse(\"/http~0.5/\"));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\"));\n    assertEquals(re, qp.parse(\"/boo/\"));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\"));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\"));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, qp.parse(\"field:/foo/ field:/bar/\"));\n    assertEquals(two, qp.parse(\"/foo/ /bar/\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee76d213d935c68932ca13b55fa0a8a32bf6af1a","date":1343572717,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRegexps().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, getQuery(\"/[a-z][123]/\",qp));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, getQuery(\"/[A-Z][123]/\",qp));\n    q.setBoost(0.5f);\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(getQuery(\"/[A-Z][123]/^0.5\",qp) instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)getQuery(\"/[A-Z][123]/^0.5\",qp)).getRewriteMethod());\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, getQuery(\"/[a-z]\\\\/[123]/\",qp));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, getQuery(\"/[a-z]\\\\*[123]/\",qp));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, getQuery(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \",qp));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, getQuery(\"field:/http.*/\",qp));\n    assertEquals(re, getQuery(\"/http.*/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, getQuery(\"field:/http~0.5/\",qp));\n    assertEquals(re, getQuery(\"/http~0.5/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, getQuery(\"field:/boo/\",qp));\n    assertEquals(re, getQuery(\"/boo/\",qp));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\"/boo/\\\"\",qp));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\\/boo\\\\/\",qp));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, getQuery(\"field:/foo/ field:/bar/\",qp));\n    assertEquals(two, getQuery(\"/foo/ /bar/\",qp));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\"));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\"));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\") instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\")).getRewriteMethod());\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\"));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\"));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \"));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\"));\n    assertEquals(re, qp.parse(\"/http.*/\"));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\"));\n    assertEquals(re, qp.parse(\"/http~0.5/\"));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\"));\n    assertEquals(re, qp.parse(\"/boo/\"));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\"));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\"));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, qp.parse(\"field:/foo/ field:/bar/\"));\n    assertEquals(two, qp.parse(\"/foo/ /bar/\"));\n  }\n\n","bugFix":["0b96ebf39aa5127497a01b3456891ab9a50957ce","629c38c4ae4e303d0617e05fbfe508140b32f0a3","d94d6afa51157e490fc169e192a154ffc4cdad0b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRegexps().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, getQuery(\"/[a-z][123]/\",qp));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, getQuery(\"/[A-Z][123]/\",qp));\n    q.setBoost(0.5f);\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(getQuery(\"/[A-Z][123]/^0.5\",qp) instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)getQuery(\"/[A-Z][123]/^0.5\",qp)).getRewriteMethod());\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, getQuery(\"/[a-z]\\\\/[123]/\",qp));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, getQuery(\"/[a-z]\\\\*[123]/\",qp));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, getQuery(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \",qp));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, getQuery(\"field:/http.*/\",qp));\n    assertEquals(re, getQuery(\"/http.*/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, getQuery(\"field:/http~0.5/\",qp));\n    assertEquals(re, getQuery(\"/http~0.5/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, getQuery(\"field:/boo/\",qp));\n    assertEquals(re, getQuery(\"/boo/\",qp));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\"/boo/\\\"\",qp));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\\/boo\\\\/\",qp));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, getQuery(\"field:/foo/ field:/bar/\",qp));\n    assertEquals(two, getQuery(\"/foo/ /bar/\",qp));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\"));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\"));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\") instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\")).getRewriteMethod());\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\"));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\"));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \"));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\"));\n    assertEquals(re, qp.parse(\"/http.*/\"));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\"));\n    assertEquals(re, qp.parse(\"/http~0.5/\"));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\"));\n    assertEquals(re, qp.parse(\"/boo/\"));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\"));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\"));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, qp.parse(\"field:/foo/ field:/bar/\"));\n    assertEquals(two, qp.parse(\"/foo/ /bar/\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRegexps().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, getQuery(\"/[a-z][123]/\",qp));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, getQuery(\"/[A-Z][123]/\",qp));\n    q.setBoost(0.5f);\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(getQuery(\"/[A-Z][123]/^0.5\",qp) instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)getQuery(\"/[A-Z][123]/^0.5\",qp)).getRewriteMethod());\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, getQuery(\"/[a-z]\\\\/[123]/\",qp));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, getQuery(\"/[a-z]\\\\*[123]/\",qp));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, getQuery(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \",qp));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, getQuery(\"field:/http.*/\",qp));\n    assertEquals(re, getQuery(\"/http.*/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, getQuery(\"field:/http~0.5/\",qp));\n    assertEquals(re, getQuery(\"/http~0.5/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, getQuery(\"field:/boo/\",qp));\n    assertEquals(re, getQuery(\"/boo/\",qp));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\"/boo/\\\"\",qp));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\\/boo\\\\/\",qp));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, getQuery(\"field:/foo/ field:/bar/\",qp));\n    assertEquals(two, getQuery(\"/foo/ /bar/\",qp));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\"));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\"));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\") instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\")).getRewriteMethod());\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\"));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\"));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \"));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\"));\n    assertEquals(re, qp.parse(\"/http.*/\"));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\"));\n    assertEquals(re, qp.parse(\"/http~0.5/\"));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\"));\n    assertEquals(re, qp.parse(\"/boo/\"));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\"));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\"));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, qp.parse(\"field:/foo/ field:/bar/\"));\n    assertEquals(two, qp.parse(\"/foo/ /bar/\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","date":1412077943,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRegexps().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, getQuery(\"/[a-z][123]/\",qp));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, getQuery(\"/[A-Z][123]/\",qp));\n    q.setBoost(0.5f);\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(getQuery(\"/[A-Z][123]/^0.5\",qp) instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)getQuery(\"/[A-Z][123]/^0.5\",qp)).getRewriteMethod());\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, getQuery(\"/[a-z]\\\\/[123]/\",qp));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, getQuery(\"/[a-z]\\\\*[123]/\",qp));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, getQuery(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \",qp));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, getQuery(\"field:/http.*/\",qp));\n    assertEquals(re, getQuery(\"/http.*/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, getQuery(\"field:/http~0.5/\",qp));\n    assertEquals(re, getQuery(\"/http~0.5/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, getQuery(\"field:/boo/\",qp));\n    assertEquals(re, getQuery(\"/boo/\",qp));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\"/boo/\\\"\",qp));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\\/boo\\\\/\",qp));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, getQuery(\"field:/foo/ field:/bar/\",qp));\n    assertEquals(two, getQuery(\"/foo/ /bar/\",qp));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, getQuery(\"/[a-z][123]/\",qp));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, getQuery(\"/[A-Z][123]/\",qp));\n    q.setBoost(0.5f);\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(getQuery(\"/[A-Z][123]/^0.5\",qp) instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)getQuery(\"/[A-Z][123]/^0.5\",qp)).getRewriteMethod());\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, getQuery(\"/[a-z]\\\\/[123]/\",qp));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, getQuery(\"/[a-z]\\\\*[123]/\",qp));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, getQuery(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \",qp));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, getQuery(\"field:/http.*/\",qp));\n    assertEquals(re, getQuery(\"/http.*/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, getQuery(\"field:/http~0.5/\",qp));\n    assertEquals(re, getQuery(\"/http~0.5/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, getQuery(\"field:/boo/\",qp));\n    assertEquals(re, getQuery(\"/boo/\",qp));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\"/boo/\\\"\",qp));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\\/boo\\\\/\",qp));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, getQuery(\"field:/foo/ field:/bar/\",qp));\n    assertEquals(two, getQuery(\"/foo/ /bar/\",qp));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRegexps().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, getQuery(\"/[a-z][123]/\",qp));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, getQuery(\"/[A-Z][123]/\",qp));\n    q.setBoost(0.5f);\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(getQuery(\"/[A-Z][123]/^0.5\",qp) instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)getQuery(\"/[A-Z][123]/^0.5\",qp)).getRewriteMethod());\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, getQuery(\"/[a-z]\\\\/[123]/\",qp));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, getQuery(\"/[a-z]\\\\*[123]/\",qp));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, getQuery(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \",qp));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, getQuery(\"field:/http.*/\",qp));\n    assertEquals(re, getQuery(\"/http.*/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, getQuery(\"field:/http~0.5/\",qp));\n    assertEquals(re, getQuery(\"/http~0.5/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, getQuery(\"field:/boo/\",qp));\n    assertEquals(re, getQuery(\"/boo/\",qp));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\"/boo/\\\"\",qp));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\\/boo\\\\/\",qp));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, getQuery(\"field:/foo/ field:/bar/\",qp));\n    assertEquals(two, getQuery(\"/foo/ /bar/\",qp));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, getQuery(\"/[a-z][123]/\",qp));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, getQuery(\"/[A-Z][123]/\",qp));\n    q.setBoost(0.5f);\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(getQuery(\"/[A-Z][123]/^0.5\",qp) instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)getQuery(\"/[A-Z][123]/^0.5\",qp)).getRewriteMethod());\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, getQuery(\"/[a-z]\\\\/[123]/\",qp));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, getQuery(\"/[a-z]\\\\*[123]/\",qp));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, getQuery(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \",qp));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, getQuery(\"field:/http.*/\",qp));\n    assertEquals(re, getQuery(\"/http.*/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, getQuery(\"field:/http~0.5/\",qp));\n    assertEquals(re, getQuery(\"/http~0.5/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, getQuery(\"field:/boo/\",qp));\n    assertEquals(re, getQuery(\"/boo/\",qp));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\"/boo/\\\"\",qp));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\\/boo\\\\/\",qp));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, getQuery(\"field:/foo/ field:/bar/\",qp));\n    assertEquals(two, getQuery(\"/foo/ /bar/\",qp));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRegexps().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, getQuery(\"/[a-z][123]/\",qp));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, getQuery(\"/[A-Z][123]/\",qp));\n    q.setBoost(0.5f);\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertTrue(getQuery(\"/[A-Z][123]/^0.5\",qp) instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_REWRITE, ((RegexpQuery)getQuery(\"/[A-Z][123]/^0.5\",qp)).getRewriteMethod());\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, getQuery(\"/[a-z]\\\\/[123]/\",qp));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, getQuery(\"/[a-z]\\\\*[123]/\",qp));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, getQuery(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \",qp));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, getQuery(\"field:/http.*/\",qp));\n    assertEquals(re, getQuery(\"/http.*/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, getQuery(\"field:/http~0.5/\",qp));\n    assertEquals(re, getQuery(\"/http~0.5/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, getQuery(\"field:/boo/\",qp));\n    assertEquals(re, getQuery(\"/boo/\",qp));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\"/boo/\\\"\",qp));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\\/boo\\\\/\",qp));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, getQuery(\"field:/foo/ field:/bar/\",qp));\n    assertEquals(two, getQuery(\"/foo/ /bar/\",qp));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, getQuery(\"/[a-z][123]/\",qp));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, getQuery(\"/[A-Z][123]/\",qp));\n    q.setBoost(0.5f);\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(getQuery(\"/[A-Z][123]/^0.5\",qp) instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)getQuery(\"/[A-Z][123]/^0.5\",qp)).getRewriteMethod());\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, getQuery(\"/[a-z]\\\\/[123]/\",qp));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, getQuery(\"/[a-z]\\\\*[123]/\",qp));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, getQuery(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \",qp));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, getQuery(\"field:/http.*/\",qp));\n    assertEquals(re, getQuery(\"/http.*/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, getQuery(\"field:/http~0.5/\",qp));\n    assertEquals(re, getQuery(\"/http~0.5/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, getQuery(\"field:/boo/\",qp));\n    assertEquals(re, getQuery(\"/boo/\",qp));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\"/boo/\\\"\",qp));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\\/boo\\\\/\",qp));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, getQuery(\"field:/foo/ field:/bar/\",qp));\n    assertEquals(two, getQuery(\"/foo/ /bar/\",qp));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRegexps().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, getQuery(\"/[a-z][123]/\",qp));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, getQuery(\"/[A-Z][123]/\",qp));\n    q.setBoost(0.5f);\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertTrue(getQuery(\"/[A-Z][123]/^0.5\",qp) instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_REWRITE, ((RegexpQuery)getQuery(\"/[A-Z][123]/^0.5\",qp)).getRewriteMethod());\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, getQuery(\"/[a-z]\\\\/[123]/\",qp));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, getQuery(\"/[a-z]\\\\*[123]/\",qp));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, getQuery(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \",qp));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, getQuery(\"field:/http.*/\",qp));\n    assertEquals(re, getQuery(\"/http.*/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, getQuery(\"field:/http~0.5/\",qp));\n    assertEquals(re, getQuery(\"/http~0.5/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, getQuery(\"field:/boo/\",qp));\n    assertEquals(re, getQuery(\"/boo/\",qp));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\"/boo/\\\"\",qp));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\\/boo\\\\/\",qp));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, getQuery(\"field:/foo/ field:/bar/\",qp));\n    assertEquals(two, getQuery(\"/foo/ /bar/\",qp));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, getQuery(\"/[a-z][123]/\",qp));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, getQuery(\"/[A-Z][123]/\",qp));\n    q.setBoost(0.5f);\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(getQuery(\"/[A-Z][123]/^0.5\",qp) instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)getQuery(\"/[A-Z][123]/^0.5\",qp)).getRewriteMethod());\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, getQuery(\"/[a-z]\\\\/[123]/\",qp));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, getQuery(\"/[a-z]\\\\*[123]/\",qp));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, getQuery(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \",qp));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, getQuery(\"field:/http.*/\",qp));\n    assertEquals(re, getQuery(\"/http.*/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, getQuery(\"field:/http~0.5/\",qp));\n    assertEquals(re, getQuery(\"/http~0.5/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, getQuery(\"field:/boo/\",qp));\n    assertEquals(re, getQuery(\"/boo/\",qp));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\"/boo/\\\"\",qp));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\\/boo\\\\/\",qp));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, getQuery(\"field:/foo/ field:/bar/\",qp));\n    assertEquals(two, getQuery(\"/foo/ /bar/\",qp));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRegexps().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, getQuery(\"/[a-z][123]/\",qp));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, getQuery(\"/[A-Z][123]/\",qp));\n    q.setBoost(0.5f);\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertTrue(getQuery(\"/[A-Z][123]/^0.5\",qp) instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_REWRITE, ((RegexpQuery)getQuery(\"/[A-Z][123]/^0.5\",qp)).getRewriteMethod());\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, getQuery(\"/[a-z]\\\\/[123]/\",qp));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, getQuery(\"/[a-z]\\\\*[123]/\",qp));\n    \n    BooleanQuery.Builder complex = new BooleanQuery.Builder();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex.build(), getQuery(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \",qp));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, getQuery(\"field:/http.*/\",qp));\n    assertEquals(re, getQuery(\"/http.*/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, getQuery(\"field:/http~0.5/\",qp));\n    assertEquals(re, getQuery(\"/http~0.5/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, getQuery(\"field:/boo/\",qp));\n    assertEquals(re, getQuery(\"/boo/\",qp));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\"/boo/\\\"\",qp));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\\/boo\\\\/\",qp));\n    \n    BooleanQuery.Builder two = new BooleanQuery.Builder();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two.build(), getQuery(\"field:/foo/ field:/bar/\",qp));\n    assertEquals(two.build(), getQuery(\"/foo/ /bar/\",qp));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, getQuery(\"/[a-z][123]/\",qp));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, getQuery(\"/[A-Z][123]/\",qp));\n    q.setBoost(0.5f);\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertTrue(getQuery(\"/[A-Z][123]/^0.5\",qp) instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_REWRITE, ((RegexpQuery)getQuery(\"/[A-Z][123]/^0.5\",qp)).getRewriteMethod());\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, getQuery(\"/[a-z]\\\\/[123]/\",qp));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, getQuery(\"/[a-z]\\\\*[123]/\",qp));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, getQuery(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \",qp));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, getQuery(\"field:/http.*/\",qp));\n    assertEquals(re, getQuery(\"/http.*/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, getQuery(\"field:/http~0.5/\",qp));\n    assertEquals(re, getQuery(\"/http~0.5/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, getQuery(\"field:/boo/\",qp));\n    assertEquals(re, getQuery(\"/boo/\",qp));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\"/boo/\\\"\",qp));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\\/boo\\\\/\",qp));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, getQuery(\"field:/foo/ field:/bar/\",qp));\n    assertEquals(two, getQuery(\"/foo/ /bar/\",qp));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRegexps().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, getQuery(\"/[a-z][123]/\",qp));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, getQuery(\"/[A-Z][123]/\",qp));\n    assertEquals(new BoostQuery(q, 0.5f), getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertTrue(getQuery(\"/[A-Z][123]/^0.5\",qp) instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"/[A-Z][123]/^0.5\",qp)).getQuery() instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_REWRITE, ((RegexpQuery) ((BoostQuery) getQuery(\"/[A-Z][123]/^0.5\",qp)).getQuery()).getRewriteMethod());\n    assertEquals(new BoostQuery(q, 0.5f), getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, getQuery(\"/[a-z]\\\\/[123]/\",qp));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, getQuery(\"/[a-z]\\\\*[123]/\",qp));\n    \n    BooleanQuery.Builder complex = new BooleanQuery.Builder();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex.build(), getQuery(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \",qp));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, getQuery(\"field:/http.*/\",qp));\n    assertEquals(re, getQuery(\"/http.*/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, getQuery(\"field:/http~0.5/\",qp));\n    assertEquals(re, getQuery(\"/http~0.5/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, getQuery(\"field:/boo/\",qp));\n    assertEquals(re, getQuery(\"/boo/\",qp));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\"/boo/\\\"\",qp));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\\/boo\\\\/\",qp));\n    \n    BooleanQuery.Builder two = new BooleanQuery.Builder();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two.build(), getQuery(\"field:/foo/ field:/bar/\",qp));\n    assertEquals(two.build(), getQuery(\"/foo/ /bar/\",qp));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, getQuery(\"/[a-z][123]/\",qp));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, getQuery(\"/[A-Z][123]/\",qp));\n    q.setBoost(0.5f);\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertTrue(getQuery(\"/[A-Z][123]/^0.5\",qp) instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_REWRITE, ((RegexpQuery)getQuery(\"/[A-Z][123]/^0.5\",qp)).getRewriteMethod());\n    assertEquals(q, getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, getQuery(\"/[a-z]\\\\/[123]/\",qp));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, getQuery(\"/[a-z]\\\\*[123]/\",qp));\n    \n    BooleanQuery.Builder complex = new BooleanQuery.Builder();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex.build(), getQuery(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \",qp));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, getQuery(\"field:/http.*/\",qp));\n    assertEquals(re, getQuery(\"/http.*/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, getQuery(\"field:/http~0.5/\",qp));\n    assertEquals(re, getQuery(\"/http~0.5/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, getQuery(\"field:/boo/\",qp));\n    assertEquals(re, getQuery(\"/boo/\",qp));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\"/boo/\\\"\",qp));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\\/boo\\\\/\",qp));\n    \n    BooleanQuery.Builder two = new BooleanQuery.Builder();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two.build(), getQuery(\"field:/foo/ field:/bar/\",qp));\n    assertEquals(two.build(), getQuery(\"/foo/ /bar/\",qp));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRegexps().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, getQuery(\"/[a-z][123]/\",qp));\n    assertEquals(q, getQuery(\"/[A-Z][123]/\",qp));\n    assertEquals(new BoostQuery(q, 0.5f), getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertTrue(getQuery(\"/[A-Z][123]/^0.5\",qp) instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"/[A-Z][123]/^0.5\",qp)).getQuery() instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_REWRITE, ((RegexpQuery) ((BoostQuery) getQuery(\"/[A-Z][123]/^0.5\",qp)).getQuery()).getRewriteMethod());\n    assertEquals(new BoostQuery(q, 0.5f), getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, getQuery(\"/[a-z]\\\\/[123]/\",qp));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, getQuery(\"/[a-z]\\\\*[123]/\",qp));\n    \n    BooleanQuery.Builder complex = new BooleanQuery.Builder();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex.build(), getQuery(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \",qp));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, getQuery(\"field:/http.*/\",qp));\n    assertEquals(re, getQuery(\"/http.*/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, getQuery(\"field:/http~0.5/\",qp));\n    assertEquals(re, getQuery(\"/http~0.5/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, getQuery(\"field:/boo/\",qp));\n    assertEquals(re, getQuery(\"/boo/\",qp));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\"/boo/\\\"\",qp));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\\/boo\\\\/\",qp));\n    \n    BooleanQuery.Builder two = new BooleanQuery.Builder();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two.build(), getQuery(\"field:/foo/ field:/bar/\",qp));\n    assertEquals(two.build(), getQuery(\"/foo/ /bar/\",qp));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, getQuery(\"/[a-z][123]/\",qp));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, getQuery(\"/[A-Z][123]/\",qp));\n    assertEquals(new BoostQuery(q, 0.5f), getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertTrue(getQuery(\"/[A-Z][123]/^0.5\",qp) instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"/[A-Z][123]/^0.5\",qp)).getQuery() instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_REWRITE, ((RegexpQuery) ((BoostQuery) getQuery(\"/[A-Z][123]/^0.5\",qp)).getQuery()).getRewriteMethod());\n    assertEquals(new BoostQuery(q, 0.5f), getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, getQuery(\"/[a-z]\\\\/[123]/\",qp));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, getQuery(\"/[a-z]\\\\*[123]/\",qp));\n    \n    BooleanQuery.Builder complex = new BooleanQuery.Builder();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex.build(), getQuery(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \",qp));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, getQuery(\"field:/http.*/\",qp));\n    assertEquals(re, getQuery(\"/http.*/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, getQuery(\"field:/http~0.5/\",qp));\n    assertEquals(re, getQuery(\"/http~0.5/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, getQuery(\"field:/boo/\",qp));\n    assertEquals(re, getQuery(\"/boo/\",qp));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\"/boo/\\\"\",qp));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\\/boo\\\\/\",qp));\n    \n    BooleanQuery.Builder two = new BooleanQuery.Builder();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two.build(), getQuery(\"field:/foo/ field:/bar/\",qp));\n    assertEquals(two.build(), getQuery(\"/foo/ /bar/\",qp));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRegexps().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, getQuery(\"/[a-z][123]/\",qp));\n    assertEquals(q, getQuery(\"/[A-Z][123]/\",qp));\n    assertEquals(new BoostQuery(q, 0.5f), getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertTrue(getQuery(\"/[A-Z][123]/^0.5\",qp) instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"/[A-Z][123]/^0.5\",qp)).getQuery() instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_REWRITE, ((RegexpQuery) ((BoostQuery) getQuery(\"/[A-Z][123]/^0.5\",qp)).getQuery()).getRewriteMethod());\n    assertEquals(new BoostQuery(q, 0.5f), getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, getQuery(\"/[a-z]\\\\/[123]/\",qp));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, getQuery(\"/[a-z]\\\\*[123]/\",qp));\n    \n    BooleanQuery.Builder complex = new BooleanQuery.Builder();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex.build(), getQuery(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \",qp));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, getQuery(\"field:/http.*/\",qp));\n    assertEquals(re, getQuery(\"/http.*/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, getQuery(\"field:/http~0.5/\",qp));\n    assertEquals(re, getQuery(\"/http~0.5/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, getQuery(\"field:/boo/\",qp));\n    assertEquals(re, getQuery(\"/boo/\",qp));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\"/boo/\\\"\",qp));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\\/boo\\\\/\",qp));\n    \n    BooleanQuery.Builder two = new BooleanQuery.Builder();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two.build(), getQuery(\"field:/foo/ field:/bar/\",qp));\n    assertEquals(two.build(), getQuery(\"/foo/ /bar/\",qp));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, getQuery(\"/[a-z][123]/\",qp));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, getQuery(\"/[A-Z][123]/\",qp));\n    assertEquals(new BoostQuery(q, 0.5f), getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertTrue(getQuery(\"/[A-Z][123]/^0.5\",qp) instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"/[A-Z][123]/^0.5\",qp)).getQuery() instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_REWRITE, ((RegexpQuery) ((BoostQuery) getQuery(\"/[A-Z][123]/^0.5\",qp)).getQuery()).getRewriteMethod());\n    assertEquals(new BoostQuery(q, 0.5f), getQuery(\"/[A-Z][123]/^0.5\",qp));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, getQuery(\"/[a-z]\\\\/[123]/\",qp));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, getQuery(\"/[a-z]\\\\*[123]/\",qp));\n    \n    BooleanQuery.Builder complex = new BooleanQuery.Builder();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex.build(), getQuery(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \",qp));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, getQuery(\"field:/http.*/\",qp));\n    assertEquals(re, getQuery(\"/http.*/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, getQuery(\"field:/http~0.5/\",qp));\n    assertEquals(re, getQuery(\"/http~0.5/\",qp));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, getQuery(\"field:/boo/\",qp));\n    assertEquals(re, getQuery(\"/boo/\",qp));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\"/boo/\\\"\",qp));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), getQuery(\"\\\\/boo\\\\/\",qp));\n    \n    BooleanQuery.Builder two = new BooleanQuery.Builder();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two.build(), getQuery(\"field:/foo/ field:/bar/\",qp));\n    assertEquals(two.build(), getQuery(\"/foo/ /bar/\",qp));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2713584a660051cd646423be682771e3bbd99985":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2dfdf766e55e943d942055d7de53c7ad6bc45283","ea4107f60b9f95623c16025c9c247412ff809092"],"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2713584a660051cd646423be682771e3bbd99985"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","2713584a660051cd646423be682771e3bbd99985"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"ea4107f60b9f95623c16025c9c247412ff809092":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4107f60b9f95623c16025c9c247412ff809092"]},"commit2Childs":{"2713584a660051cd646423be682771e3bbd99985":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ea4107f60b9f95623c16025c9c247412ff809092"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["2713584a660051cd646423be682771e3bbd99985","d9a47902d6207303f5ed3e7aaca62ca33433af66","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["d9a47902d6207303f5ed3e7aaca62ca33433af66","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"ea4107f60b9f95623c16025c9c247412ff809092":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}