{"path":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testMultiWordSynonymsPhrase().mjava","commits":[{"id":"138a352a6d4e54824d0275bc7aa1b784e78c81fe","date":1467756222,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testMultiWordSynonymsPhrase().mjava","pathOld":"/dev/null","sourceNew":"  /** forms multiphrase query */\n  public void testMultiWordSynonymsPhrase() throws Exception {\n    MultiPhraseQuery.Builder expectedBuilder = new MultiPhraseQuery.Builder();\n    expectedBuilder.add(new Term[] { new Term(\"field\", \"guinea\"), new Term(\"field\", \"cavy\") });\n    expectedBuilder.add(new Term(\"field\", \"pig\"));\n    QueryBuilder queryBuilder = new QueryBuilder(new MockSynonymAnalyzer());\n    assertEquals(expectedBuilder.build(), queryBuilder.createPhraseQuery(\"field\", \"guinea pig\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testMultiWordSynonymsPhrase().mjava","pathOld":"/dev/null","sourceNew":"  /** forms multiphrase query */\n  public void testMultiWordSynonymsPhrase() throws Exception {\n    MultiPhraseQuery.Builder expectedBuilder = new MultiPhraseQuery.Builder();\n    expectedBuilder.add(new Term[] { new Term(\"field\", \"guinea\"), new Term(\"field\", \"cavy\") });\n    expectedBuilder.add(new Term(\"field\", \"pig\"));\n    QueryBuilder queryBuilder = new QueryBuilder(new MockSynonymAnalyzer());\n    assertEquals(expectedBuilder.build(), queryBuilder.createPhraseQuery(\"field\", \"guinea pig\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52c30617998e1bc2a946cc226f52e9b35162b1e","date":1483438353,"type":3,"author":"Matt Weber","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testMultiWordSynonymsPhrase().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testMultiWordSynonymsPhrase().mjava","sourceNew":"  /** forms graph query */\n  public void testMultiWordSynonymsPhrase() throws Exception {\n    PhraseQuery.Builder expectedPhrase = new PhraseQuery.Builder();\n    expectedPhrase.add(new Term(\"field\", \"guinea\"));\n    expectedPhrase.add(new Term(\"field\", \"pig\"));\n\n    TermQuery expectedTerm = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    QueryBuilder queryBuilder = new QueryBuilder(new MockSynonymAnalyzer());\n    assertEquals(new GraphQuery(expectedPhrase.build(), expectedTerm),\n        queryBuilder.createPhraseQuery(\"field\", \"guinea pig\"));\n  }\n\n","sourceOld":"  /** forms multiphrase query */\n  public void testMultiWordSynonymsPhrase() throws Exception {\n    MultiPhraseQuery.Builder expectedBuilder = new MultiPhraseQuery.Builder();\n    expectedBuilder.add(new Term[] { new Term(\"field\", \"guinea\"), new Term(\"field\", \"cavy\") });\n    expectedBuilder.add(new Term(\"field\", \"pig\"));\n    QueryBuilder queryBuilder = new QueryBuilder(new MockSynonymAnalyzer());\n    assertEquals(expectedBuilder.build(), queryBuilder.createPhraseQuery(\"field\", \"guinea pig\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testMultiWordSynonymsPhrase().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testMultiWordSynonymsPhrase().mjava","sourceNew":"  /** forms graph query */\n  public void testMultiWordSynonymsPhrase() throws Exception {\n    PhraseQuery.Builder expectedPhrase = new PhraseQuery.Builder();\n    expectedPhrase.add(new Term(\"field\", \"guinea\"));\n    expectedPhrase.add(new Term(\"field\", \"pig\"));\n\n    TermQuery expectedTerm = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    QueryBuilder queryBuilder = new QueryBuilder(new MockSynonymAnalyzer());\n    assertEquals(new GraphQuery(expectedPhrase.build(), expectedTerm),\n        queryBuilder.createPhraseQuery(\"field\", \"guinea pig\"));\n  }\n\n","sourceOld":"  /** forms multiphrase query */\n  public void testMultiWordSynonymsPhrase() throws Exception {\n    MultiPhraseQuery.Builder expectedBuilder = new MultiPhraseQuery.Builder();\n    expectedBuilder.add(new Term[] { new Term(\"field\", \"guinea\"), new Term(\"field\", \"cavy\") });\n    expectedBuilder.add(new Term(\"field\", \"pig\"));\n    QueryBuilder queryBuilder = new QueryBuilder(new MockSynonymAnalyzer());\n    assertEquals(expectedBuilder.build(), queryBuilder.createPhraseQuery(\"field\", \"guinea pig\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d79fd791e91f49ce8026885d7b8ac62bee4c8126","date":1487768721,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testMultiWordSynonymsPhrase().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testMultiWordSynonymsPhrase().mjava","sourceNew":"  /** forms graph query */\n  public void testMultiWordSynonymsPhrase() throws Exception {\n    SpanNearQuery expectedNear = SpanNearQuery.newOrderedNearQuery(\"field\")\n        .addClause(new SpanTermQuery(new Term(\"field\", \"guinea\")))\n        .addClause(new SpanTermQuery(new Term(\"field\", \"pig\")))\n        .setSlop(0)\n        .build();\n\n    SpanTermQuery expectedTerm = new SpanTermQuery(new Term(\"field\", \"cavy\"));\n\n    QueryBuilder queryBuilder = new QueryBuilder(new MockSynonymAnalyzer());\n    assertEquals(new SpanOrQuery(new SpanQuery[]{expectedNear, expectedTerm}),\n        queryBuilder.createPhraseQuery(\"field\", \"guinea pig\"));\n  }\n\n","sourceOld":"  /** forms graph query */\n  public void testMultiWordSynonymsPhrase() throws Exception {\n    PhraseQuery.Builder expectedPhrase = new PhraseQuery.Builder();\n    expectedPhrase.add(new Term(\"field\", \"guinea\"));\n    expectedPhrase.add(new Term(\"field\", \"pig\"));\n\n    TermQuery expectedTerm = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    QueryBuilder queryBuilder = new QueryBuilder(new MockSynonymAnalyzer());\n    assertEquals(new GraphQuery(expectedPhrase.build(), expectedTerm),\n        queryBuilder.createPhraseQuery(\"field\", \"guinea pig\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02bf300ae49caa47cd23550d69d6683a61ad89cb","date":1582727554,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testMultiWordSynonymsPhrase().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testMultiWordSynonymsPhrase().mjava","sourceNew":"  /** forms graph query */\n  public void testMultiWordSynonymsPhrase() {\n    Query expected = new BooleanQuery.Builder()\n        .add(new PhraseQuery(\"field\", \"guinea\", \"pig\"), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(\"field\", \"cavy\")), BooleanClause.Occur.SHOULD)\n        .build();\n\n    QueryBuilder queryBuilder = new QueryBuilder(new MockSynonymAnalyzer());\n    assertEquals(expected, queryBuilder.createPhraseQuery(\"field\", \"guinea pig\"));\n  }\n\n","sourceOld":"  /** forms graph query */\n  public void testMultiWordSynonymsPhrase() throws Exception {\n    SpanNearQuery expectedNear = SpanNearQuery.newOrderedNearQuery(\"field\")\n        .addClause(new SpanTermQuery(new Term(\"field\", \"guinea\")))\n        .addClause(new SpanTermQuery(new Term(\"field\", \"pig\")))\n        .setSlop(0)\n        .build();\n\n    SpanTermQuery expectedTerm = new SpanTermQuery(new Term(\"field\", \"cavy\"));\n\n    QueryBuilder queryBuilder = new QueryBuilder(new MockSynonymAnalyzer());\n    assertEquals(new SpanOrQuery(new SpanQuery[]{expectedNear, expectedTerm}),\n        queryBuilder.createPhraseQuery(\"field\", \"guinea pig\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"02bf300ae49caa47cd23550d69d6683a61ad89cb":["d79fd791e91f49ce8026885d7b8ac62bee4c8126"],"e52c30617998e1bc2a946cc226f52e9b35162b1e":["138a352a6d4e54824d0275bc7aa1b784e78c81fe"],"138a352a6d4e54824d0275bc7aa1b784e78c81fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d79fd791e91f49ce8026885d7b8ac62bee4c8126":["e52c30617998e1bc2a946cc226f52e9b35162b1e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","138a352a6d4e54824d0275bc7aa1b784e78c81fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02bf300ae49caa47cd23550d69d6683a61ad89cb"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e52c30617998e1bc2a946cc226f52e9b35162b1e"]},"commit2Childs":{"02bf300ae49caa47cd23550d69d6683a61ad89cb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e52c30617998e1bc2a946cc226f52e9b35162b1e":["d79fd791e91f49ce8026885d7b8ac62bee4c8126","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"138a352a6d4e54824d0275bc7aa1b784e78c81fe":["e52c30617998e1bc2a946cc226f52e9b35162b1e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["138a352a6d4e54824d0275bc7aa1b784e78c81fe","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d79fd791e91f49ce8026885d7b8ac62bee4c8126":["02bf300ae49caa47cd23550d69d6683a61ad89cb"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}