{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","sourceNew":"    public void testDanish() throws Exception {\n            \n        /* build an index */\n        RAMDirectory danishIndex = new RAMDirectory();\n        IndexWriter writer = new IndexWriter\n            (danishIndex, new SimpleAnalyzer(), T, \n             IndexWriter.MaxFieldLength.LIMITED);\n        // Danish collation orders the words below in the given order\n        // (example taken from TestSort.testInternationalSort() ).\n        String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n        for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n            Document doc = new Document();\n            doc.add(new Field(\"content\", words[docnum], \n                              Field.Store.YES, Field.Index.NOT_ANALYZED));\n            doc.add(new Field(\"body\", \"body\",\n                              Field.Store.YES, Field.Index.NOT_ANALYZED));\n            writer.addDocument(doc);\n        }\n        writer.optimize();\n        writer.close();\n\n        IndexReader reader = IndexReader.open(danishIndex, true);\n        IndexSearcher search = new IndexSearcher(reader);\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n        Query query = new TermRangeQuery\n            (\"content\", \"H\\u00D8T\", \"MAND\", false, false, collator);\n\n        // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n        // but Danish collation does.\n        int numHits = search.search\n            (q, new TermRangeFilter(\"content\", \"H\\u00D8T\", \"MAND\", F, F, collator), 1000).totalHits;\n        assertEquals(\"The index Term should be included.\", 1, numHits);\n\n        numHits = search.search\n            (q, new TermRangeFilter(\"content\", \"H\\u00C5T\", \"MAND\", F, F, collator), 1000).totalHits;\n        assertEquals\n            (\"The index Term should not be included.\", 0, numHits);\n        search.close();\n    }\n\n","sourceOld":"    public void testDanish() throws Exception {\n            \n        /* build an index */\n        RAMDirectory danishIndex = new RAMDirectory();\n        IndexWriter writer = new IndexWriter\n            (danishIndex, new SimpleAnalyzer(), T, \n             IndexWriter.MaxFieldLength.LIMITED);\n        // Danish collation orders the words below in the given order\n        // (example taken from TestSort.testInternationalSort() ).\n        String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n        for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n            Document doc = new Document();\n            doc.add(new Field(\"content\", words[docnum], \n                              Field.Store.YES, Field.Index.NOT_ANALYZED));\n            doc.add(new Field(\"body\", \"body\",\n                              Field.Store.YES, Field.Index.NOT_ANALYZED));\n            writer.addDocument(doc);\n        }\n        writer.optimize();\n        writer.close();\n\n        IndexReader reader = IndexReader.open(danishIndex, true);\n        IndexSearcher search = new IndexSearcher(reader);\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n        Query query = new TermRangeQuery\n            (\"content\", \"H\\u00D8T\", \"MAND\", false, false, collator);\n\n        // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n        // but Danish collation does.\n        int numHits = search.search\n            (q, new TermRangeFilter(\"content\", \"H\\u00D8T\", \"MAND\", F, F, collator), 1000).totalHits;\n        assertEquals(\"The index Term should be included.\", 1, numHits);\n\n        numHits = search.search\n            (q, new TermRangeFilter(\"content\", \"H\\u00C5T\", \"MAND\", F, F, collator), 1000).totalHits;\n        assertEquals\n            (\"The index Term should not be included.\", 0, numHits);\n        search.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestTermRangeFilter#testDanish().mjava","sourceNew":null,"sourceOld":"    public void testDanish() throws Exception {\n            \n        /* build an index */\n        RAMDirectory danishIndex = new RAMDirectory();\n        IndexWriter writer = new IndexWriter\n            (danishIndex, new SimpleAnalyzer(), T, \n             IndexWriter.MaxFieldLength.LIMITED);\n        // Danish collation orders the words below in the given order\n        // (example taken from TestSort.testInternationalSort() ).\n        String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n        for (int docnum = 0 ; docnum < words.length ; ++docnum) {   \n            Document doc = new Document();\n            doc.add(new Field(\"content\", words[docnum], \n                              Field.Store.YES, Field.Index.NOT_ANALYZED));\n            doc.add(new Field(\"body\", \"body\",\n                              Field.Store.YES, Field.Index.NOT_ANALYZED));\n            writer.addDocument(doc);\n        }\n        writer.optimize();\n        writer.close();\n\n        IndexReader reader = IndexReader.open(danishIndex, true);\n        IndexSearcher search = new IndexSearcher(reader);\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n        Query query = new TermRangeQuery\n            (\"content\", \"H\\u00D8T\", \"MAND\", false, false, collator);\n\n        // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n        // but Danish collation does.\n        int numHits = search.search\n            (q, new TermRangeFilter(\"content\", \"H\\u00D8T\", \"MAND\", F, F, collator), 1000).totalHits;\n        assertEquals(\"The index Term should be included.\", 1, numHits);\n\n        numHits = search.search\n            (q, new TermRangeFilter(\"content\", \"H\\u00C5T\", \"MAND\", F, F, collator), 1000).totalHits;\n        assertEquals\n            (\"The index Term should not be included.\", 0, numHits);\n        search.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}