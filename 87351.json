{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","commits":[{"id":"68acf69be1b41192ae2278afc452bb66f6349cba","date":1357657311,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","pathOld":"/dev/null","sourceNew":"  private BinaryDocValues getVariableBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n    final NumericDocValues addresses = getNumeric(field);\n    return new BinaryDocValues() {\n      @Override\n      public void get(int docID, BytesRef result) {\n        long startAddress = docID == 0 ? bytes.offset : bytes.offset + addresses.get(docID-1);\n        long endAddress = bytes.offset + addresses.get(docID);\n        int length = (int) (endAddress - startAddress);\n        try {\n          data.seek(startAddress);\n          if (result.length < length) {\n            result.offset = 0;\n            result.bytes = new byte[length];\n          }\n          data.readBytes(result.bytes, result.offset, length);\n          result.length = length;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      public int size() {\n        return bytes.count;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a","date":1357739321,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getVariableBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n    final NumericDocValues addresses = getNumeric(field);\n    return new BinaryDocValues() {\n      @Override\n      public void get(int docID, BytesRef result) {\n        long startAddress = docID == 0 ? bytes.offset : bytes.offset + addresses.get(docID-1);\n        long endAddress = bytes.offset + addresses.get(docID);\n        int length = (int) (endAddress - startAddress);\n        try {\n          data.seek(startAddress);\n          if (result.length < length) {\n            result.offset = 0;\n            result.bytes = new byte[length];\n          }\n          data.readBytes(result.bytes, result.offset, length);\n          result.length = length;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private BinaryDocValues getVariableBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n    final NumericDocValues addresses = getNumeric(field);\n    return new BinaryDocValues() {\n      @Override\n      public void get(int docID, BytesRef result) {\n        long startAddress = docID == 0 ? bytes.offset : bytes.offset + addresses.get(docID-1);\n        long endAddress = bytes.offset + addresses.get(docID);\n        int length = (int) (endAddress - startAddress);\n        try {\n          data.seek(startAddress);\n          if (result.length < length) {\n            result.offset = 0;\n            result.bytes = new byte[length];\n          }\n          data.readBytes(result.bytes, result.offset, length);\n          result.length = length;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      public int size() {\n        return bytes.count;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7a738ebbf9537051521dcc7e49f69208f91e2fc","date":1358194026,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getVariableBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n    final NumericDocValues addresses = getNumeric(field);\n    return new BinaryDocValues() {\n      @Override\n      public void get(int docID, BytesRef result) {\n        long startAddress = docID == 0 ? bytes.offset : bytes.offset + addresses.get(docID-1);\n        long endAddress = bytes.offset + addresses.get(docID);\n        int length = (int) (endAddress - startAddress);\n        try {\n          data.seek(startAddress);\n          if (result.length < length) {\n            result.offset = 0;\n            result.bytes = new byte[length];\n          }\n          data.readBytes(result.bytes, result.offset, length);\n          result.length = length;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private BinaryDocValues getVariableBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n    final NumericDocValues addresses = getNumeric(field);\n    return new BinaryDocValues() {\n      @Override\n      public void get(int docID, BytesRef result) {\n        long startAddress = docID == 0 ? bytes.offset : bytes.offset + addresses.get(docID-1);\n        long endAddress = bytes.offset + addresses.get(docID);\n        int length = (int) (endAddress - startAddress);\n        try {\n          data.seek(startAddress);\n          if (result.length < length) {\n            result.offset = 0;\n            result.bytes = new byte[length];\n          }\n          data.readBytes(result.bytes, result.offset, length);\n          result.length = length;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"68acf69be1b41192ae2278afc452bb66f6349cba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d7a738ebbf9537051521dcc7e49f69208f91e2fc":["32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a"],"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a":["68acf69be1b41192ae2278afc452bb66f6349cba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"68acf69be1b41192ae2278afc452bb66f6349cba":["32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68acf69be1b41192ae2278afc452bb66f6349cba","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d7a738ebbf9537051521dcc7e49f69208f91e2fc":[],"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a":["d7a738ebbf9537051521dcc7e49f69208f91e2fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d7a738ebbf9537051521dcc7e49f69208f91e2fc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}