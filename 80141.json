{"path":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customExplain(int,Explanation,Explanation[]).mjava","commits":[{"id":"c8fda790e002fff32e201cbd0f7bed4c2b333a64","date":1309401082,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customExplain(int,Explanation,Explanation[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/function/CustomScoreProvider#customExplain(int,Explanation,Explanation[]).mjava","sourceNew":"  /**\n   * Explain the custom score.\n   * Whenever overriding {@link #customScore(int, float, float[])}, \n   * this method should also be overridden to provide the correct explanation\n   * for the part of the custom scoring.\n   *  \n   * @param doc doc being explained.\n   * @param subQueryExpl explanation for the sub-query part.\n   * @param valSrcExpls explanation for the value source part.\n   * @return an explanation for the custom score\n   */\n  public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpls[]) throws IOException {\n    if (valSrcExpls.length == 1) {\n      return customExplain(doc, subQueryExpl, valSrcExpls[0]);\n    }\n    if (valSrcExpls.length == 0) {\n      return subQueryExpl;\n    }\n    float valSrcScore = 1;\n    for (int i = 0; i < valSrcExpls.length; i++) {\n      valSrcScore *= valSrcExpls[i].getValue();\n    }\n    Explanation exp = new Explanation( valSrcScore * subQueryExpl.getValue(), \"custom score: product of:\");\n    exp.addDetail(subQueryExpl);\n    for (int i = 0; i < valSrcExpls.length; i++) {\n      exp.addDetail(valSrcExpls[i]);\n    }\n    return exp;\n  }\n\n","sourceOld":"  /**\n   * Explain the custom score.\n   * Whenever overriding {@link #customScore(int, float, float[])}, \n   * this method should also be overridden to provide the correct explanation\n   * for the part of the custom scoring.\n   *  \n   * @param doc doc being explained.\n   * @param subQueryExpl explanation for the sub-query part.\n   * @param valSrcExpls explanation for the value source part.\n   * @return an explanation for the custom score\n   */\n  public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpls[]) throws IOException {\n    if (valSrcExpls.length == 1) {\n      return customExplain(doc, subQueryExpl, valSrcExpls[0]);\n    }\n    if (valSrcExpls.length == 0) {\n      return subQueryExpl;\n    }\n    float valSrcScore = 1;\n    for (int i = 0; i < valSrcExpls.length; i++) {\n      valSrcScore *= valSrcExpls[i].getValue();\n    }\n    Explanation exp = new Explanation( valSrcScore * subQueryExpl.getValue(), \"custom score: product of:\");\n    exp.addDetail(subQueryExpl);\n    for (int i = 0; i < valSrcExpls.length; i++) {\n      exp.addDetail(valSrcExpls[i]);\n    }\n    return exp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customExplain(int,Explanation,Explanation[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/function/CustomScoreProvider#customExplain(int,Explanation,Explanation[]).mjava","sourceNew":"  /**\n   * Explain the custom score.\n   * Whenever overriding {@link #customScore(int, float, float[])}, \n   * this method should also be overridden to provide the correct explanation\n   * for the part of the custom scoring.\n   *  \n   * @param doc doc being explained.\n   * @param subQueryExpl explanation for the sub-query part.\n   * @param valSrcExpls explanation for the value source part.\n   * @return an explanation for the custom score\n   */\n  public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpls[]) throws IOException {\n    if (valSrcExpls.length == 1) {\n      return customExplain(doc, subQueryExpl, valSrcExpls[0]);\n    }\n    if (valSrcExpls.length == 0) {\n      return subQueryExpl;\n    }\n    float valSrcScore = 1;\n    for (int i = 0; i < valSrcExpls.length; i++) {\n      valSrcScore *= valSrcExpls[i].getValue();\n    }\n    Explanation exp = new Explanation( valSrcScore * subQueryExpl.getValue(), \"custom score: product of:\");\n    exp.addDetail(subQueryExpl);\n    for (int i = 0; i < valSrcExpls.length; i++) {\n      exp.addDetail(valSrcExpls[i]);\n    }\n    return exp;\n  }\n\n","sourceOld":"  /**\n   * Explain the custom score.\n   * Whenever overriding {@link #customScore(int, float, float[])}, \n   * this method should also be overridden to provide the correct explanation\n   * for the part of the custom scoring.\n   *  \n   * @param doc doc being explained.\n   * @param subQueryExpl explanation for the sub-query part.\n   * @param valSrcExpls explanation for the value source part.\n   * @return an explanation for the custom score\n   */\n  public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpls[]) throws IOException {\n    if (valSrcExpls.length == 1) {\n      return customExplain(doc, subQueryExpl, valSrcExpls[0]);\n    }\n    if (valSrcExpls.length == 0) {\n      return subQueryExpl;\n    }\n    float valSrcScore = 1;\n    for (int i = 0; i < valSrcExpls.length; i++) {\n      valSrcScore *= valSrcExpls[i].getValue();\n    }\n    Explanation exp = new Explanation( valSrcScore * subQueryExpl.getValue(), \"custom score: product of:\");\n    exp.addDetail(subQueryExpl);\n    for (int i = 0; i < valSrcExpls.length; i++) {\n      exp.addDetail(valSrcExpls[i]);\n    }\n    return exp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customExplain(int,Explanation,Explanation[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/function/CustomScoreProvider#customExplain(int,Explanation,Explanation[]).mjava","sourceNew":"  /**\n   * Explain the custom score.\n   * Whenever overriding {@link #customScore(int, float, float[])}, \n   * this method should also be overridden to provide the correct explanation\n   * for the part of the custom scoring.\n   *  \n   * @param doc doc being explained.\n   * @param subQueryExpl explanation for the sub-query part.\n   * @param valSrcExpls explanation for the value source part.\n   * @return an explanation for the custom score\n   */\n  public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpls[]) throws IOException {\n    if (valSrcExpls.length == 1) {\n      return customExplain(doc, subQueryExpl, valSrcExpls[0]);\n    }\n    if (valSrcExpls.length == 0) {\n      return subQueryExpl;\n    }\n    float valSrcScore = 1;\n    for (int i = 0; i < valSrcExpls.length; i++) {\n      valSrcScore *= valSrcExpls[i].getValue();\n    }\n    Explanation exp = new Explanation( valSrcScore * subQueryExpl.getValue(), \"custom score: product of:\");\n    exp.addDetail(subQueryExpl);\n    for (int i = 0; i < valSrcExpls.length; i++) {\n      exp.addDetail(valSrcExpls[i]);\n    }\n    return exp;\n  }\n\n","sourceOld":"  /**\n   * Explain the custom score.\n   * Whenever overriding {@link #customScore(int, float, float[])}, \n   * this method should also be overridden to provide the correct explanation\n   * for the part of the custom scoring.\n   *  \n   * @param doc doc being explained.\n   * @param subQueryExpl explanation for the sub-query part.\n   * @param valSrcExpls explanation for the value source part.\n   * @return an explanation for the custom score\n   */\n  public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpls[]) throws IOException {\n    if (valSrcExpls.length == 1) {\n      return customExplain(doc, subQueryExpl, valSrcExpls[0]);\n    }\n    if (valSrcExpls.length == 0) {\n      return subQueryExpl;\n    }\n    float valSrcScore = 1;\n    for (int i = 0; i < valSrcExpls.length; i++) {\n      valSrcScore *= valSrcExpls[i].getValue();\n    }\n    Explanation exp = new Explanation( valSrcScore * subQueryExpl.getValue(), \"custom score: product of:\");\n    exp.addDetail(subQueryExpl);\n    for (int i = 0; i < valSrcExpls.length; i++) {\n      exp.addDetail(valSrcExpls[i]);\n    }\n    return exp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customExplain(int,Explanation,Explanation[]).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customExplain(int,Explanation,Explanation[]).mjava","sourceNew":"  /**\n   * Explain the custom score.\n   * Whenever overriding {@link #customScore(int, float, float[])}, \n   * this method should also be overridden to provide the correct explanation\n   * for the part of the custom scoring.\n   *  \n   * @param doc doc being explained.\n   * @param subQueryExpl explanation for the sub-query part.\n   * @param valSrcExpls explanation for the value source part.\n   * @return an explanation for the custom score\n   */\n  public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpls[]) throws IOException {\n    if (valSrcExpls.length == 1) {\n      return customExplain(doc, subQueryExpl, valSrcExpls[0]);\n    }\n    if (valSrcExpls.length == 0) {\n      return subQueryExpl;\n    }\n    float valSrcScore = 1;\n    for (int i = 0; i < valSrcExpls.length; i++) {\n      valSrcScore *= valSrcExpls[i].getValue();\n    }\n    Explanation exp = new Explanation( valSrcScore * subQueryExpl.getValue(), \"custom score: product of:\");\n    exp.addDetail(subQueryExpl);\n    for (int i = 0; i < valSrcExpls.length; i++) {\n      exp.addDetail(valSrcExpls[i]);\n    }\n    return exp;\n  }\n\n","sourceOld":"  /**\n   * Explain the custom score.\n   * Whenever overriding {@link #customScore(int, float, float[])}, \n   * this method should also be overridden to provide the correct explanation\n   * for the part of the custom scoring.\n   *  \n   * @param doc doc being explained.\n   * @param subQueryExpl explanation for the sub-query part.\n   * @param valSrcExpls explanation for the value source part.\n   * @return an explanation for the custom score\n   */\n  public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpls[]) throws IOException {\n    if (valSrcExpls.length == 1) {\n      return customExplain(doc, subQueryExpl, valSrcExpls[0]);\n    }\n    if (valSrcExpls.length == 0) {\n      return subQueryExpl;\n    }\n    float valSrcScore = 1;\n    for (int i = 0; i < valSrcExpls.length; i++) {\n      valSrcScore *= valSrcExpls[i].getValue();\n    }\n    Explanation exp = new Explanation( valSrcScore * subQueryExpl.getValue(), \"custom score: product of:\");\n    exp.addDetail(subQueryExpl);\n    for (int i = 0; i < valSrcExpls.length; i++) {\n      exp.addDetail(valSrcExpls[i]);\n    }\n    return exp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8fda790e002fff32e201cbd0f7bed4c2b333a64","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}