{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testThatCantForwardToLeaderFails(long).mjava","commits":[{"id":"0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb","date":1390584048,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testThatCantForwardToLeaderFails(long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testThatCantForwardToLeaderFails().mjava","sourceNew":"  private long testThatCantForwardToLeaderFails(long docId) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    ZkNodeProps props = zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard1\");\n    \n    chaosMonkey.stopShard(\"shard1\");\n    \n    Thread.sleep(1000);\n    \n    // fake that the leader is still advertised\n    String leaderPath = ZkStateReader.getShardLeadersPath(DEFAULT_COLLECTION, \"shard1\");\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), 10000);\n    int fails = 0;\n    try {\n      zkClient.makePath(leaderPath, ZkStateReader.toJSON(props),\n          CreateMode.EPHEMERAL, true);\n      for (int i = 0; i < 200; i++) {\n        try {\n          index_specific(shardToJetty.get(\"shard2\").get(0).client.solrClient, id, docId++);\n        } catch (SolrException e) {\n          // expected\n          fails++;\n          break;\n        } catch (SolrServerException e) {\n          // expected\n          fails++;\n          break;\n        }\n      }\n    } finally {\n      zkClient.close();\n    }\n\n    assertTrue(\"A whole shard is down - some of these should fail\", fails > 0);\n    return docId;\n  }\n\n","sourceOld":"  private void testThatCantForwardToLeaderFails() throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    ZkNodeProps props = zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard1\");\n    \n    chaosMonkey.stopShard(\"shard1\");\n\n    // fake that the leader is still advertised\n    String leaderPath = ZkStateReader.getShardLeadersPath(DEFAULT_COLLECTION, \"shard1\");\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), 10000);\n    int fails = 0;\n    try {\n      zkClient.makePath(leaderPath, ZkStateReader.toJSON(props),\n          CreateMode.EPHEMERAL, true);\n      for (int i = 200; i < 210; i++) {\n        try {\n          index_specific(cloudClient, id, i);\n        } catch (SolrException e) {\n          // expected\n          fails++;\n          break;\n        } catch (SolrServerException e) {\n          // expected\n          fails++;\n          break;\n        }\n      }\n    } finally {\n      zkClient.close();\n    }\n    \n    assertTrue(\"A whole shard is down - some of these should fail\", fails > 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testThatCantForwardToLeaderFails(long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testThatCantForwardToLeaderFails(long).mjava","sourceNew":"  private long testThatCantForwardToLeaderFails(long docId) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    ZkNodeProps props = zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard1\");\n    \n    chaosMonkey.stopShard(\"shard1\");\n    \n    Thread.sleep(1000);\n    \n    // fake that the leader is still advertised\n    String leaderPath = ZkStateReader.getShardLeadersPath(DEFAULT_COLLECTION, \"shard1\");\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), 10000);\n    int fails = 0;\n    try {\n      zkClient.makePath(leaderPath, Utils.toJSON(props),\n          CreateMode.EPHEMERAL, true);\n      for (int i = 0; i < 200; i++) {\n        try {\n          index_specific(shardToJetty.get(\"shard2\").get(0).client.solrClient, id, docId++);\n        } catch (SolrException e) {\n          // expected\n          fails++;\n          break;\n        } catch (SolrServerException e) {\n          // expected\n          fails++;\n          break;\n        }\n      }\n    } finally {\n      zkClient.close();\n    }\n\n    assertTrue(\"A whole shard is down - some of these should fail\", fails > 0);\n    return docId;\n  }\n\n","sourceOld":"  private long testThatCantForwardToLeaderFails(long docId) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    ZkNodeProps props = zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard1\");\n    \n    chaosMonkey.stopShard(\"shard1\");\n    \n    Thread.sleep(1000);\n    \n    // fake that the leader is still advertised\n    String leaderPath = ZkStateReader.getShardLeadersPath(DEFAULT_COLLECTION, \"shard1\");\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), 10000);\n    int fails = 0;\n    try {\n      zkClient.makePath(leaderPath, ZkStateReader.toJSON(props),\n          CreateMode.EPHEMERAL, true);\n      for (int i = 0; i < 200; i++) {\n        try {\n          index_specific(shardToJetty.get(\"shard2\").get(0).client.solrClient, id, docId++);\n        } catch (SolrException e) {\n          // expected\n          fails++;\n          break;\n        } catch (SolrServerException e) {\n          // expected\n          fails++;\n          break;\n        }\n      }\n    } finally {\n      zkClient.close();\n    }\n\n    assertTrue(\"A whole shard is down - some of these should fail\", fails > 0);\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b","date":1576537086,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testThatCantForwardToLeaderFails(long).mjava","sourceNew":null,"sourceOld":"  private long testThatCantForwardToLeaderFails(long docId) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    ZkNodeProps props = zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard1\");\n    \n    chaosMonkey.stopShard(\"shard1\");\n    \n    Thread.sleep(1000);\n    \n    // fake that the leader is still advertised\n    String leaderPath = ZkStateReader.getShardLeadersPath(DEFAULT_COLLECTION, \"shard1\");\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), 10000);\n    int fails = 0;\n    try {\n      zkClient.makePath(leaderPath, Utils.toJSON(props),\n          CreateMode.EPHEMERAL, true);\n      for (int i = 0; i < 200; i++) {\n        try {\n          index_specific(shardToJetty.get(\"shard2\").get(0).client.solrClient, id, docId++);\n        } catch (SolrException e) {\n          // expected\n          fails++;\n          break;\n        } catch (SolrServerException e) {\n          // expected\n          fails++;\n          break;\n        }\n      }\n    } finally {\n      zkClient.close();\n    }\n\n    assertTrue(\"A whole shard is down - some of these should fail\", fails > 0);\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b945b8f5bba0303382bc69d60c0c287714f23328","date":1576586294,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testThatCantForwardToLeaderFails(long).mjava","sourceNew":null,"sourceOld":"  private long testThatCantForwardToLeaderFails(long docId) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    ZkNodeProps props = zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, \"shard1\");\n    \n    chaosMonkey.stopShard(\"shard1\");\n    \n    Thread.sleep(1000);\n    \n    // fake that the leader is still advertised\n    String leaderPath = ZkStateReader.getShardLeadersPath(DEFAULT_COLLECTION, \"shard1\");\n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), 10000);\n    int fails = 0;\n    try {\n      zkClient.makePath(leaderPath, Utils.toJSON(props),\n          CreateMode.EPHEMERAL, true);\n      for (int i = 0; i < 200; i++) {\n        try {\n          index_specific(shardToJetty.get(\"shard2\").get(0).client.solrClient, id, docId++);\n        } catch (SolrException e) {\n          // expected\n          fails++;\n          break;\n        } catch (SolrServerException e) {\n          // expected\n          fails++;\n          break;\n        }\n      }\n    } finally {\n      zkClient.close();\n    }\n\n    assertTrue(\"A whole shard is down - some of these should fail\", fails > 0);\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb"],"b945b8f5bba0303382bc69d60c0c287714f23328":["b693a83132c9e45afcd564fd65a25b60ed80388b","0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b":["b693a83132c9e45afcd564fd65a25b60ed80388b"]},"commit2Childs":{"0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["b945b8f5bba0303382bc69d60c0c287714f23328","0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"b945b8f5bba0303382bc69d60c0c287714f23328":[],"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b":["b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}