{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testArbitraryJsonIndexing().mjava","commits":[{"id":"ab10d7c14ce9f8db61956611a57a5a377362a633","date":1413903184,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testArbitraryJsonIndexing().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrServer server = (HttpSolrServer) getSolrServer();\n    server.deleteByQuery(\"*:*\");\n    server.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = server.getHttpClient();\n    HttpPost post = new HttpPost(server.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    server.commit();\n    QueryResponse rsp = getSolrServer().query(new SolrQuery(\"*:*\"));\n    assertEquals(2,rsp.getResults().getNumFound());\n\n    SolrDocument doc = rsp.getResults().get(0);\n    String src = (String) doc.getFieldValue(\"_src\");\n    Map m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"abc1\",m.get(\"id\"));\n    assertEquals(\"name1\",m.get(\"name\"));\n\n    doc = rsp.getResults().get(1);\n    src = (String) doc.getFieldValue(\"_src\");\n    m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"name2\",m.get(\"name\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2ec81fdd8eea6fd0bbf342a17966ac944492c17e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testArbitraryJsonIndexing().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrServer server = (HttpSolrServer) getSolrServer();\n    server.deleteByQuery(\"*:*\");\n    server.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = server.getHttpClient();\n    HttpPost post = new HttpPost(server.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    server.commit();\n    QueryResponse rsp = getSolrServer().query(new SolrQuery(\"*:*\"));\n    assertEquals(2,rsp.getResults().getNumFound());\n\n    SolrDocument doc = rsp.getResults().get(0);\n    String src = (String) doc.getFieldValue(\"_src\");\n    Map m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"abc1\",m.get(\"id\"));\n    assertEquals(\"name1\",m.get(\"name\"));\n\n    doc = rsp.getResults().get(1);\n    src = (String) doc.getFieldValue(\"_src\");\n    m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"name2\",m.get(\"name\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ec81fdd8eea6fd0bbf342a17966ac944492c17e","date":1418148306,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testArbitraryJsonIndexing().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testArbitraryJsonIndexing().mjava","sourceNew":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrServer server = (HttpSolrServer) getSolrServer();\n    server.deleteByQuery(\"*:*\");\n    server.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = server.getHttpClient();\n    HttpPost post = new HttpPost(server.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    server.commit();\n    QueryResponse rsp = getSolrServer().query(new SolrQuery(\"*:*\"));\n    assertEquals(2,rsp.getResults().getNumFound());\n\n    SolrDocument doc = rsp.getResults().get(0);\n    String src = (String) doc.getFieldValue(\"_src_\");\n    Map m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"abc1\",m.get(\"id\"));\n    assertEquals(\"name1\",m.get(\"name\"));\n\n    doc = rsp.getResults().get(1);\n    src = (String) doc.getFieldValue(\"_src_\");\n    m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"name2\",m.get(\"name\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrServer server = (HttpSolrServer) getSolrServer();\n    server.deleteByQuery(\"*:*\");\n    server.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = server.getHttpClient();\n    HttpPost post = new HttpPost(server.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    server.commit();\n    QueryResponse rsp = getSolrServer().query(new SolrQuery(\"*:*\"));\n    assertEquals(2,rsp.getResults().getNumFound());\n\n    SolrDocument doc = rsp.getResults().get(0);\n    String src = (String) doc.getFieldValue(\"_src\");\n    Map m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"abc1\",m.get(\"id\"));\n    assertEquals(\"name1\",m.get(\"name\"));\n\n    doc = rsp.getResults().get(1);\n    src = (String) doc.getFieldValue(\"_src\");\n    m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"name2\",m.get(\"name\"));\n\n  }\n\n","bugFix":["ab10d7c14ce9f8db61956611a57a5a377362a633"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testArbitraryJsonIndexing().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testArbitraryJsonIndexing().mjava","sourceNew":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(client.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    QueryResponse rsp = getSolrClient().query(new SolrQuery(\"*:*\"));\n    assertEquals(2,rsp.getResults().getNumFound());\n\n    SolrDocument doc = rsp.getResults().get(0);\n    String src = (String) doc.getFieldValue(\"_src_\");\n    Map m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"abc1\",m.get(\"id\"));\n    assertEquals(\"name1\",m.get(\"name\"));\n\n    doc = rsp.getResults().get(1);\n    src = (String) doc.getFieldValue(\"_src_\");\n    m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"name2\",m.get(\"name\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrServer server = (HttpSolrServer) getSolrServer();\n    server.deleteByQuery(\"*:*\");\n    server.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = server.getHttpClient();\n    HttpPost post = new HttpPost(server.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    server.commit();\n    QueryResponse rsp = getSolrServer().query(new SolrQuery(\"*:*\"));\n    assertEquals(2,rsp.getResults().getNumFound());\n\n    SolrDocument doc = rsp.getResults().get(0);\n    String src = (String) doc.getFieldValue(\"_src_\");\n    Map m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"abc1\",m.get(\"id\"));\n    assertEquals(\"name1\",m.get(\"name\"));\n\n    doc = rsp.getResults().get(1);\n    src = (String) doc.getFieldValue(\"_src_\");\n    m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"name2\",m.get(\"name\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testArbitraryJsonIndexing().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testArbitraryJsonIndexing().mjava","sourceNew":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(client.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post, HttpClientUtil.createNewHttpClientRequestContext());\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    QueryResponse rsp = getSolrClient().query(new SolrQuery(\"*:*\"));\n    assertEquals(2,rsp.getResults().getNumFound());\n\n    SolrDocument doc = rsp.getResults().get(0);\n    String src = (String) doc.getFieldValue(\"_src_\");\n    Map m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"abc1\",m.get(\"id\"));\n    assertEquals(\"name1\",m.get(\"name\"));\n\n    doc = rsp.getResults().get(1);\n    src = (String) doc.getFieldValue(\"_src_\");\n    m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"name2\",m.get(\"name\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(client.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    QueryResponse rsp = getSolrClient().query(new SolrQuery(\"*:*\"));\n    assertEquals(2,rsp.getResults().getNumFound());\n\n    SolrDocument doc = rsp.getResults().get(0);\n    String src = (String) doc.getFieldValue(\"_src_\");\n    Map m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"abc1\",m.get(\"id\"));\n    assertEquals(\"name1\",m.get(\"name\"));\n\n    doc = rsp.getResults().get(1);\n    src = (String) doc.getFieldValue(\"_src_\");\n    m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"name2\",m.get(\"name\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"070b525fb213c5643ba35e1b60f1a1d4f7b23312","date":1475678176,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testArbitraryJsonIndexing().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testArbitraryJsonIndexing().mjava","sourceNew":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(client.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post, HttpClientUtil.createNewHttpClientRequestContext(null));\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    QueryResponse rsp = getSolrClient().query(new SolrQuery(\"*:*\"));\n    assertEquals(2,rsp.getResults().getNumFound());\n\n    SolrDocument doc = rsp.getResults().get(0);\n    String src = (String) doc.getFieldValue(\"_src_\");\n    Map m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"abc1\",m.get(\"id\"));\n    assertEquals(\"name1\",m.get(\"name\"));\n\n    doc = rsp.getResults().get(1);\n    src = (String) doc.getFieldValue(\"_src_\");\n    m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"name2\",m.get(\"name\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(client.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post, HttpClientUtil.createNewHttpClientRequestContext());\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    QueryResponse rsp = getSolrClient().query(new SolrQuery(\"*:*\"));\n    assertEquals(2,rsp.getResults().getNumFound());\n\n    SolrDocument doc = rsp.getResults().get(0);\n    String src = (String) doc.getFieldValue(\"_src_\");\n    Map m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"abc1\",m.get(\"id\"));\n    assertEquals(\"name1\",m.get(\"name\"));\n\n    doc = rsp.getResults().get(1);\n    src = (String) doc.getFieldValue(\"_src_\");\n    m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"name2\",m.get(\"name\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07cebc9816f8c940e8e9683abbdc742fe95e25d7","date":1475696954,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testArbitraryJsonIndexing().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testArbitraryJsonIndexing().mjava","sourceNew":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(client.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post, HttpClientUtil.createNewHttpClientRequestContext());\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    QueryResponse rsp = getSolrClient().query(new SolrQuery(\"*:*\"));\n    assertEquals(2,rsp.getResults().getNumFound());\n\n    SolrDocument doc = rsp.getResults().get(0);\n    String src = (String) doc.getFieldValue(\"_src_\");\n    Map m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"abc1\",m.get(\"id\"));\n    assertEquals(\"name1\",m.get(\"name\"));\n\n    doc = rsp.getResults().get(1);\n    src = (String) doc.getFieldValue(\"_src_\");\n    m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"name2\",m.get(\"name\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(client.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post, HttpClientUtil.createNewHttpClientRequestContext(null));\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    QueryResponse rsp = getSolrClient().query(new SolrQuery(\"*:*\"));\n    assertEquals(2,rsp.getResults().getNumFound());\n\n    SolrDocument doc = rsp.getResults().get(0);\n    String src = (String) doc.getFieldValue(\"_src_\");\n    Map m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"abc1\",m.get(\"id\"));\n    assertEquals(\"name1\",m.get(\"name\"));\n\n    doc = rsp.getResults().get(1);\n    src = (String) doc.getFieldValue(\"_src_\");\n    m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"name2\",m.get(\"name\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testArbitraryJsonIndexing().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testArbitraryJsonIndexing().mjava","sourceNew":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(getUri(client));\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post, HttpClientUtil.createNewHttpClientRequestContext());\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    QueryResponse rsp = getSolrClient().query(new SolrQuery(\"*:*\"));\n    assertEquals(2,rsp.getResults().getNumFound());\n\n    SolrDocument doc = rsp.getResults().get(0);\n    String src = (String) doc.getFieldValue(\"_src_\");\n    Map m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"abc1\",m.get(\"id\"));\n    assertEquals(\"name1\",m.get(\"name\"));\n\n    doc = rsp.getResults().get(1);\n    src = (String) doc.getFieldValue(\"_src_\");\n    m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"name2\",m.get(\"name\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(client.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post, HttpClientUtil.createNewHttpClientRequestContext());\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    QueryResponse rsp = getSolrClient().query(new SolrQuery(\"*:*\"));\n    assertEquals(2,rsp.getResults().getNumFound());\n\n    SolrDocument doc = rsp.getResults().get(0);\n    String src = (String) doc.getFieldValue(\"_src_\");\n    Map m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"abc1\",m.get(\"id\"));\n    assertEquals(\"name1\",m.get(\"name\"));\n\n    doc = rsp.getResults().get(1);\n    src = (String) doc.getFieldValue(\"_src_\");\n    m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"name2\",m.get(\"name\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testArbitraryJsonIndexing().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testArbitraryJsonIndexing().mjava","sourceNew":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(getUri(client));\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post, HttpClientUtil.createNewHttpClientRequestContext());\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    QueryResponse rsp = getSolrClient().query(new SolrQuery(\"*:*\"));\n    assertEquals(2,rsp.getResults().getNumFound());\n\n    SolrDocument doc = rsp.getResults().get(0);\n    String src = (String) doc.getFieldValue(\"_src_\");\n    Map m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"abc1\",m.get(\"id\"));\n    assertEquals(\"name1\",m.get(\"name\"));\n\n    doc = rsp.getResults().get(1);\n    src = (String) doc.getFieldValue(\"_src_\");\n    m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"name2\",m.get(\"name\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(client.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post, HttpClientUtil.createNewHttpClientRequestContext());\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    QueryResponse rsp = getSolrClient().query(new SolrQuery(\"*:*\"));\n    assertEquals(2,rsp.getResults().getNumFound());\n\n    SolrDocument doc = rsp.getResults().get(0);\n    String src = (String) doc.getFieldValue(\"_src_\");\n    Map m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"abc1\",m.get(\"id\"));\n    assertEquals(\"name1\",m.get(\"name\"));\n\n    doc = rsp.getResults().get(1);\n    src = (String) doc.getFieldValue(\"_src_\");\n    m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"name2\",m.get(\"name\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testArbitraryJsonIndexing().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testArbitraryJsonIndexing().mjava","sourceNew":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(getUri(client));\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post, HttpClientUtil.createNewHttpClientRequestContext());\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    QueryResponse rsp = getSolrClient().query(new SolrQuery(\"*:*\"));\n    assertEquals(2,rsp.getResults().getNumFound());\n\n    SolrDocument doc = rsp.getResults().get(0);\n    String src = (String) doc.getFieldValue(\"_src_\");\n    Map m = (Map) fromJSONString(src);\n    assertEquals(\"abc1\",m.get(\"id\"));\n    assertEquals(\"name1\",m.get(\"name\"));\n\n    doc = rsp.getResults().get(1);\n    src = (String) doc.getFieldValue(\"_src_\");\n    m = (Map) fromJSONString(src);\n    assertEquals(\"name2\",m.get(\"name\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(getUri(client));\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post, HttpClientUtil.createNewHttpClientRequestContext());\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    QueryResponse rsp = getSolrClient().query(new SolrQuery(\"*:*\"));\n    assertEquals(2,rsp.getResults().getNumFound());\n\n    SolrDocument doc = rsp.getResults().get(0);\n    String src = (String) doc.getFieldValue(\"_src_\");\n    Map m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"abc1\",m.get(\"id\"));\n    assertEquals(\"name1\",m.get(\"name\"));\n\n    doc = rsp.getResults().get(1);\n    src = (String) doc.getFieldValue(\"_src_\");\n    m = (Map) ObjectBuilder.fromJSON(src);\n    assertEquals(\"name2\",m.get(\"name\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5","date":1563597632,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testArbitraryJsonIndexing().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testArbitraryJsonIndexing().mjava","sourceNew":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(getUri(client));\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(\n        new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8)), -1));\n    HttpResponse response = httpClient.execute(post, HttpClientUtil.createNewHttpClientRequestContext());\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    QueryResponse rsp = getSolrClient().query(new SolrQuery(\"*:*\"));\n    assertEquals(2,rsp.getResults().getNumFound());\n\n    SolrDocument doc = rsp.getResults().get(0);\n    String src = (String) doc.getFieldValue(\"_src_\");\n    Map m = (Map) fromJSONString(src);\n    assertEquals(\"abc1\",m.get(\"id\"));\n    assertEquals(\"name1\",m.get(\"name\"));\n\n    doc = rsp.getResults().get(1);\n    src = (String) doc.getFieldValue(\"_src_\");\n    m = (Map) fromJSONString(src);\n    assertEquals(\"name2\",m.get(\"name\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(getUri(client));\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post, HttpClientUtil.createNewHttpClientRequestContext());\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    QueryResponse rsp = getSolrClient().query(new SolrQuery(\"*:*\"));\n    assertEquals(2,rsp.getResults().getNumFound());\n\n    SolrDocument doc = rsp.getResults().get(0);\n    String src = (String) doc.getFieldValue(\"_src_\");\n    Map m = (Map) fromJSONString(src);\n    assertEquals(\"abc1\",m.get(\"id\"));\n    assertEquals(\"name1\",m.get(\"name\"));\n\n    doc = rsp.getResults().get(1);\n    src = (String) doc.getFieldValue(\"_src_\");\n    m = (Map) fromJSONString(src);\n    assertEquals(\"name2\",m.get(\"name\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testArbitraryJsonIndexing().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testArbitraryJsonIndexing().mjava","sourceNew":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(getUri(client));\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(\n        new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8)), -1));\n    HttpResponse response = httpClient.execute(post, HttpClientUtil.createNewHttpClientRequestContext());\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    QueryResponse rsp = getSolrClient().query(new SolrQuery(\"*:*\"));\n    assertEquals(2,rsp.getResults().getNumFound());\n\n    SolrDocument doc = rsp.getResults().get(0);\n    String src = (String) doc.getFieldValue(\"_src_\");\n    @SuppressWarnings({\"rawtypes\"})\n    Map m = (Map) fromJSONString(src);\n    assertEquals(\"abc1\",m.get(\"id\"));\n    assertEquals(\"name1\",m.get(\"name\"));\n\n    doc = rsp.getResults().get(1);\n    src = (String) doc.getFieldValue(\"_src_\");\n    m = (Map) fromJSONString(src);\n    assertEquals(\"name2\",m.get(\"name\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testArbitraryJsonIndexing() throws Exception  {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"id\\\":\\\"abc1\\\", \\\"name\\\": \\\"name1\\\"} {\\\"name\\\" : \\\"name2\\\"}\";\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(getUri(client));\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(\n        new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8)), -1));\n    HttpResponse response = httpClient.execute(post, HttpClientUtil.createNewHttpClientRequestContext());\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    QueryResponse rsp = getSolrClient().query(new SolrQuery(\"*:*\"));\n    assertEquals(2,rsp.getResults().getNumFound());\n\n    SolrDocument doc = rsp.getResults().get(0);\n    String src = (String) doc.getFieldValue(\"_src_\");\n    Map m = (Map) fromJSONString(src);\n    assertEquals(\"abc1\",m.get(\"id\"));\n    assertEquals(\"name1\",m.get(\"name\"));\n\n    doc = rsp.getResults().get(1);\n    src = (String) doc.getFieldValue(\"_src_\");\n    m = (Map) fromJSONString(src);\n    assertEquals(\"name2\",m.get(\"name\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["fe214d6e09deed3001159c1ad5173f9c8fc4a7f5"],"070b525fb213c5643ba35e1b60f1a1d4f7b23312":["859081acf00749f5dd462772c571d611d4a4d2db"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["07cebc9816f8c940e8e9683abbdc742fe95e25d7"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["859081acf00749f5dd462772c571d611d4a4d2db","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"bafca15d8e408346a67f4282ad1143b88023893b":["2ec81fdd8eea6fd0bbf342a17966ac944492c17e"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"859081acf00749f5dd462772c571d611d4a4d2db":["bafca15d8e408346a67f4282ad1143b88023893b"],"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"2ec81fdd8eea6fd0bbf342a17966ac944492c17e":["ab10d7c14ce9f8db61956611a57a5a377362a633"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ab10d7c14ce9f8db61956611a57a5a377362a633"],"07cebc9816f8c940e8e9683abbdc742fe95e25d7":["070b525fb213c5643ba35e1b60f1a1d4f7b23312"],"ab10d7c14ce9f8db61956611a57a5a377362a633":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"070b525fb213c5643ba35e1b60f1a1d4f7b23312":["07cebc9816f8c940e8e9683abbdc742fe95e25d7"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"bafca15d8e408346a67f4282ad1143b88023893b":["859081acf00749f5dd462772c571d611d4a4d2db"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["fe214d6e09deed3001159c1ad5173f9c8fc4a7f5"],"859081acf00749f5dd462772c571d611d4a4d2db":["070b525fb213c5643ba35e1b60f1a1d4f7b23312","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5":["9ba1b632c041956c93c41aa1143d16a567014891"],"2ec81fdd8eea6fd0bbf342a17966ac944492c17e":["bafca15d8e408346a67f4282ad1143b88023893b"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"07cebc9816f8c940e8e9683abbdc742fe95e25d7":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"ab10d7c14ce9f8db61956611a57a5a377362a633":["2ec81fdd8eea6fd0bbf342a17966ac944492c17e","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","ab10d7c14ce9f8db61956611a57a5a377362a633"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}