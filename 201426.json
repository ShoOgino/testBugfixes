{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#process(int,int).mjava","commits":[{"id":"1bd41bee7250a9039c3bf0651303e11dd1aad9d9","date":1360626013,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#process(int,int).mjava","pathOld":"/dev/null","sourceNew":"    private void process(int groupOrd, int facetOrd) {\n      if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n        return;\n      }\n\n      int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1) + facetOrd;\n      if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n        return;\n      }\n\n      segmentTotalCount++;\n      segmentFacetCounts[facetOrd]++;\n\n      segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n\n      BytesRef groupKey;\n      if (groupOrd == -1) {\n        groupKey = null;\n      } else {\n        groupKey = new BytesRef();\n        groupFieldTermsIndex.lookupOrd(groupOrd, groupKey);\n      }\n\n      final BytesRef facetValue;\n      if (facetOrd == facetFieldNumTerms) {\n        facetValue = null;\n      } else {\n        facetFieldDocTermOrds.lookupOrd(facetOrd, scratch);\n        facetValue = BytesRef.deepCopyOf(scratch); // must we?\n      }\n      groupedFacetHits.add(new GroupedFacetHit(groupKey, facetValue));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#process(int,int).mjava","pathOld":"/dev/null","sourceNew":"    private void process(int groupOrd, int facetOrd) {\n      if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n        return;\n      }\n\n      int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1) + facetOrd;\n      if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n        return;\n      }\n\n      segmentTotalCount++;\n      segmentFacetCounts[facetOrd]++;\n\n      segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n\n      BytesRef groupKey;\n      if (groupOrd == -1) {\n        groupKey = null;\n      } else {\n        groupKey = new BytesRef();\n        groupFieldTermsIndex.lookupOrd(groupOrd, groupKey);\n      }\n\n      final BytesRef facetValue;\n      if (facetOrd == facetFieldNumTerms) {\n        facetValue = null;\n      } else {\n        facetFieldDocTermOrds.lookupOrd(facetOrd, scratch);\n        facetValue = BytesRef.deepCopyOf(scratch); // must we?\n      }\n      groupedFacetHits.add(new GroupedFacetHit(groupKey, facetValue));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#process(int,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#process(int,int).mjava","sourceNew":"    private void process(int groupOrd, int facetOrd) {\n      if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n        return;\n      }\n\n      int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1) + facetOrd;\n      if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n        return;\n      }\n\n      segmentTotalCount++;\n      segmentFacetCounts[facetOrd]++;\n\n      segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n\n      BytesRef groupKey;\n      if (groupOrd == -1) {\n        groupKey = null;\n      } else {\n        groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n      }\n\n      final BytesRef facetValue;\n      if (facetOrd == facetFieldNumTerms) {\n        facetValue = null;\n      } else {\n        facetValue = BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupOrd(facetOrd));\n      }\n      groupedFacetHits.add(new GroupedFacetHit(groupKey, facetValue));\n    }\n\n","sourceOld":"    private void process(int groupOrd, int facetOrd) {\n      if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n        return;\n      }\n\n      int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1) + facetOrd;\n      if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n        return;\n      }\n\n      segmentTotalCount++;\n      segmentFacetCounts[facetOrd]++;\n\n      segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n\n      BytesRef groupKey;\n      if (groupOrd == -1) {\n        groupKey = null;\n      } else {\n        groupKey = new BytesRef();\n        groupFieldTermsIndex.lookupOrd(groupOrd, groupKey);\n      }\n\n      final BytesRef facetValue;\n      if (facetOrd == facetFieldNumTerms) {\n        facetValue = null;\n      } else {\n        facetFieldDocTermOrds.lookupOrd(facetOrd, scratch);\n        facetValue = BytesRef.deepCopyOf(scratch); // must we?\n      }\n      groupedFacetHits.add(new GroupedFacetHit(groupKey, facetValue));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#process(int,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#process(int,int).mjava","sourceNew":"    private void process(int groupOrd, int facetOrd) throws IOException {\n      if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n        return;\n      }\n\n      int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1) + facetOrd;\n      if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n        return;\n      }\n\n      segmentTotalCount++;\n      segmentFacetCounts[facetOrd]++;\n\n      segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n\n      BytesRef groupKey;\n      if (groupOrd == -1) {\n        groupKey = null;\n      } else {\n        groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n      }\n\n      final BytesRef facetValue;\n      if (facetOrd == facetFieldNumTerms) {\n        facetValue = null;\n      } else {\n        facetValue = BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupOrd(facetOrd));\n      }\n      groupedFacetHits.add(new GroupedFacetHit(groupKey, facetValue));\n    }\n\n","sourceOld":"    private void process(int groupOrd, int facetOrd) {\n      if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n        return;\n      }\n\n      int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1) + facetOrd;\n      if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n        return;\n      }\n\n      segmentTotalCount++;\n      segmentFacetCounts[facetOrd]++;\n\n      segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n\n      BytesRef groupKey;\n      if (groupOrd == -1) {\n        groupKey = null;\n      } else {\n        groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n      }\n\n      final BytesRef facetValue;\n      if (facetOrd == facetFieldNumTerms) {\n        facetValue = null;\n      } else {\n        facetValue = BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupOrd(facetOrd));\n      }\n      groupedFacetHits.add(new GroupedFacetHit(groupKey, facetValue));\n    }\n\n","bugFix":["1bd41bee7250a9039c3bf0651303e11dd1aad9d9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#process(int,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#process(int,int).mjava","sourceNew":"    private void process(int groupOrd, int facetOrd) throws IOException {\n      if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n        return;\n      }\n\n      int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1) + facetOrd;\n      if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n        return;\n      }\n\n      segmentTotalCount++;\n      segmentFacetCounts[facetOrd]++;\n\n      segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n\n      BytesRef groupKey;\n      if (groupOrd == -1) {\n        groupKey = null;\n      } else {\n        groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n      }\n\n      final BytesRef facetValue;\n      if (facetOrd == facetFieldNumTerms) {\n        facetValue = null;\n      } else {\n        facetValue = BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupOrd(facetOrd));\n      }\n      groupedFacetHits.add(new GroupedFacetHit(groupKey, facetValue));\n    }\n\n","sourceOld":"    private void process(int groupOrd, int facetOrd) {\n      if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n        return;\n      }\n\n      int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1) + facetOrd;\n      if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n        return;\n      }\n\n      segmentTotalCount++;\n      segmentFacetCounts[facetOrd]++;\n\n      segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n\n      BytesRef groupKey;\n      if (groupOrd == -1) {\n        groupKey = null;\n      } else {\n        groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n      }\n\n      final BytesRef facetValue;\n      if (facetOrd == facetFieldNumTerms) {\n        facetValue = null;\n      } else {\n        facetValue = BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupOrd(facetOrd));\n      }\n      groupedFacetHits.add(new GroupedFacetHit(groupKey, facetValue));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/TermGroupFacetCollector.MV#process(int,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#process(int,int).mjava","sourceNew":"    private void process(int groupOrd, int facetOrd) throws IOException {\n      if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n        return;\n      }\n\n      int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1) + facetOrd;\n      if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n        return;\n      }\n\n      segmentTotalCount++;\n      segmentFacetCounts[facetOrd]++;\n\n      segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n\n      BytesRef groupKey;\n      if (groupOrd == -1) {\n        groupKey = null;\n      } else {\n        groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n      }\n\n      final BytesRef facetValue;\n      if (facetOrd == facetFieldNumTerms) {\n        facetValue = null;\n      } else {\n        facetValue = BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupOrd(facetOrd));\n      }\n      groupedFacetHits.add(new GroupedFacetHit(groupKey, facetValue));\n    }\n\n","sourceOld":"    private void process(int groupOrd, int facetOrd) throws IOException {\n      if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n        return;\n      }\n\n      int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1) + facetOrd;\n      if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n        return;\n      }\n\n      segmentTotalCount++;\n      segmentFacetCounts[facetOrd]++;\n\n      segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n\n      BytesRef groupKey;\n      if (groupOrd == -1) {\n        groupKey = null;\n      } else {\n        groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n      }\n\n      final BytesRef facetValue;\n      if (facetOrd == facetFieldNumTerms) {\n        facetValue = null;\n      } else {\n        facetValue = BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupOrd(facetOrd));\n      }\n      groupedFacetHits.add(new GroupedFacetHit(groupKey, facetValue));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/TermGroupFacetCollector.MV#process(int,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#process(int,int).mjava","sourceNew":"    private void process(int groupOrd, int facetOrd) throws IOException {\n      if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n        return;\n      }\n\n      int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1) + facetOrd;\n      if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n        return;\n      }\n\n      segmentTotalCount++;\n      segmentFacetCounts[facetOrd]++;\n\n      segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n\n      BytesRef groupKey;\n      if (groupOrd == -1) {\n        groupKey = null;\n      } else {\n        groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n      }\n\n      final BytesRef facetValue;\n      if (facetOrd == facetFieldNumTerms) {\n        facetValue = null;\n      } else {\n        facetValue = BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupOrd(facetOrd));\n      }\n      groupedFacetHits.add(new GroupedFacetHit(groupKey, facetValue));\n    }\n\n","sourceOld":"    private void process(int groupOrd, int facetOrd) throws IOException {\n      if (facetOrd < startFacetOrd || facetOrd >= endFacetOrd) {\n        return;\n      }\n\n      int segmentGroupedFacetsIndex = groupOrd * (facetFieldNumTerms + 1) + facetOrd;\n      if (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n        return;\n      }\n\n      segmentTotalCount++;\n      segmentFacetCounts[facetOrd]++;\n\n      segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n\n      BytesRef groupKey;\n      if (groupOrd == -1) {\n        groupKey = null;\n      } else {\n        groupKey = BytesRef.deepCopyOf(groupFieldTermsIndex.lookupOrd(groupOrd));\n      }\n\n      final BytesRef facetValue;\n      if (facetOrd == facetFieldNumTerms) {\n        facetValue = null;\n      } else {\n        facetValue = BytesRef.deepCopyOf(facetFieldDocTermOrds.lookupOrd(facetOrd));\n      }\n      groupedFacetHits.add(new GroupedFacetHit(groupKey, facetValue));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["f7558b5077dd4abd457be151475f13b541f4f13e"],"f7558b5077dd4abd457be151475f13b541f4f13e":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1bd41bee7250a9039c3bf0651303e11dd1aad9d9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","f7558b5077dd4abd457be151475f13b541f4f13e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ae958a739da1866696f442384393ba2f13e33e5"],"7ae958a739da1866696f442384393ba2f13e33e5":["f7558b5077dd4abd457be151475f13b541f4f13e"],"1bd41bee7250a9039c3bf0651303e11dd1aad9d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"f7558b5077dd4abd457be151475f13b541f4f13e":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7ae958a739da1866696f442384393ba2f13e33e5"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["f7558b5077dd4abd457be151475f13b541f4f13e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ddbb72a33557d2b5bc22ee95daf3281c43560502","1bd41bee7250a9039c3bf0651303e11dd1aad9d9"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"1bd41bee7250a9039c3bf0651303e11dd1aad9d9":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7ae958a739da1866696f442384393ba2f13e33e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}