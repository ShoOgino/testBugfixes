{"path":"contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager#testFormTransforms().mjava","commits":[{"id":"45b222932b1624e0d17f8ee1a8111e294601ab40","date":1169767862,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager#testFormTransforms().mjava","pathOld":"/dev/null","sourceNew":"\tpublic void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException \r\n\t{\r\n\t\t//Run all of our test queries\r\n\t\tfor (int i = 0; i < queryForms.length; i++)\r\n\t\t{\r\n\t\t\tProperties queryFormProperties=getPropsFromString(queryForms[i]);\r\n\t\t\t\r\n\t\t\t//Get the required query XSL template for this test\r\n\t\t\tSource template=getTemplate(queryFormProperties.getProperty(\"template\"));\r\n\t\t\t\r\n\t\t\t//Transform the queryFormProperties into a Lucene XML query\r\n\t\t\tDocument doc=QueryTemplateManager.getQueryAsDOM(queryFormProperties,template);\r\n\t\t\t\r\n\t\t\t//Parse the XML query using the XML parser\r\n\t\t\tQuery q=builder.getQuery(doc.getDocumentElement());\r\n\t\t\t\r\n\t\t\t//Run the query\r\n\t\t\tHits h=searcher.search(q);\r\n\t\t\t\r\n\t\t\t//Check we have the expected number of results\r\n\t\t\tint expectedHits=Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\r\n\t\t\tassertEquals(\"Number of results should match for query \"+queryForms[i],expectedHits,h.length());\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96f3cc4342f6cfe78f848fbdf9f11cc11bdf14d4","date":1170629488,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager#testFormTransforms().mjava","pathOld":"contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager#testFormTransforms().mjava","sourceNew":"\tpublic void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException \r\n\t{\r\n\t\t//Cache all the query templates we will be referring to.\r\n\t\tQueryTemplateManager qtm=new QueryTemplateManager();\r\n\t\tqtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\r\n\t\tqtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\r\n\t\tqtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\r\n\t\t//Run all of our test queries\r\n\t\tfor (int i = 0; i < queryForms.length; i++)\r\n\t\t{\r\n\t\t\tProperties queryFormProperties=getPropsFromString(queryForms[i]);\r\n\t\t\t\r\n\t\t\t//Get the required query XSL template for this test\r\n//\t\t\tTemplates template=getTemplate(queryFormProperties.getProperty(\"template\"));\r\n\t\t\t\r\n\t\t\t//Transform the queryFormProperties into a Lucene XML query\r\n\t\t\tDocument doc=qtm.getQueryAsDOM(queryFormProperties,queryFormProperties.getProperty(\"template\"));\r\n\t\t\t\r\n\t\t\t//Parse the XML query using the XML parser\r\n\t\t\tQuery q=builder.getQuery(doc.getDocumentElement());\r\n\t\t\t\r\n\t\t\t//Run the query\r\n\t\t\tHits h=searcher.search(q);\r\n\t\t\t\r\n\t\t\t//Check we have the expected number of results\r\n\t\t\tint expectedHits=Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\r\n\t\t\tassertEquals(\"Number of results should match for query \"+queryForms[i],expectedHits,h.length());\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\n","sourceOld":"\tpublic void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException \r\n\t{\r\n\t\t//Run all of our test queries\r\n\t\tfor (int i = 0; i < queryForms.length; i++)\r\n\t\t{\r\n\t\t\tProperties queryFormProperties=getPropsFromString(queryForms[i]);\r\n\t\t\t\r\n\t\t\t//Get the required query XSL template for this test\r\n\t\t\tSource template=getTemplate(queryFormProperties.getProperty(\"template\"));\r\n\t\t\t\r\n\t\t\t//Transform the queryFormProperties into a Lucene XML query\r\n\t\t\tDocument doc=QueryTemplateManager.getQueryAsDOM(queryFormProperties,template);\r\n\t\t\t\r\n\t\t\t//Parse the XML query using the XML parser\r\n\t\t\tQuery q=builder.getQuery(doc.getDocumentElement());\r\n\t\t\t\r\n\t\t\t//Run the query\r\n\t\t\tHits h=searcher.search(q);\r\n\t\t\t\r\n\t\t\t//Check we have the expected number of results\r\n\t\t\tint expectedHits=Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\r\n\t\t\tassertEquals(\"Number of results should match for query \"+queryForms[i],expectedHits,h.length());\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager#testFormTransforms().mjava","pathOld":"contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager#testFormTransforms().mjava","sourceNew":"\tpublic void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException \n\t{\n\t\t//Cache all the query templates we will be referring to.\n\t\tQueryTemplateManager qtm=new QueryTemplateManager();\n\t\tqtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n\t\t//Run all of our test queries\n\t\tfor (int i = 0; i < queryForms.length; i++)\n\t\t{\n\t\t\tProperties queryFormProperties=getPropsFromString(queryForms[i]);\n\t\t\t\n\t\t\t//Get the required query XSL template for this test\n//\t\t\tTemplates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Transform the queryFormProperties into a Lucene XML query\n\t\t\tDocument doc=qtm.getQueryAsDOM(queryFormProperties,queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Parse the XML query using the XML parser\n\t\t\tQuery q=builder.getQuery(doc.getDocumentElement());\n\t\t\t\n\t\t\t//Run the query\n\t\t\tHits h=searcher.search(q);\n\t\t\t\n\t\t\t//Check we have the expected number of results\n\t\t\tint expectedHits=Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n\t\t\tassertEquals(\"Number of results should match for query \"+queryForms[i],expectedHits,h.length());\n\t\t\t\n\t\t}\n\t}\n\n","sourceOld":"\tpublic void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException \r\n\t{\r\n\t\t//Cache all the query templates we will be referring to.\r\n\t\tQueryTemplateManager qtm=new QueryTemplateManager();\r\n\t\tqtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\r\n\t\tqtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\r\n\t\tqtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\r\n\t\t//Run all of our test queries\r\n\t\tfor (int i = 0; i < queryForms.length; i++)\r\n\t\t{\r\n\t\t\tProperties queryFormProperties=getPropsFromString(queryForms[i]);\r\n\t\t\t\r\n\t\t\t//Get the required query XSL template for this test\r\n//\t\t\tTemplates template=getTemplate(queryFormProperties.getProperty(\"template\"));\r\n\t\t\t\r\n\t\t\t//Transform the queryFormProperties into a Lucene XML query\r\n\t\t\tDocument doc=qtm.getQueryAsDOM(queryFormProperties,queryFormProperties.getProperty(\"template\"));\r\n\t\t\t\r\n\t\t\t//Parse the XML query using the XML parser\r\n\t\t\tQuery q=builder.getQuery(doc.getDocumentElement());\r\n\t\t\t\r\n\t\t\t//Run the query\r\n\t\t\tHits h=searcher.search(q);\r\n\t\t\t\r\n\t\t\t//Check we have the expected number of results\r\n\t\t\tint expectedHits=Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\r\n\t\t\tassertEquals(\"Number of results should match for query \"+queryForms[i],expectedHits,h.length());\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f148c02ddd6ba981c65ca685d0e56c3a98368e1","date":1254892102,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager#testFormTransforms().mjava","pathOld":"contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager#testFormTransforms().mjava","sourceNew":"\tpublic void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException \n\t{\n\t\t//Cache all the query templates we will be referring to.\n\t\tQueryTemplateManager qtm=new QueryTemplateManager();\n\t\tqtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n\t\t//Run all of our test queries\n\t\tfor (int i = 0; i < queryForms.length; i++)\n\t\t{\n\t\t\tProperties queryFormProperties=getPropsFromString(queryForms[i]);\n\t\t\t\n\t\t\t//Get the required query XSL template for this test\n//\t\t\tTemplates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Transform the queryFormProperties into a Lucene XML query\n\t\t\tDocument doc=qtm.getQueryAsDOM(queryFormProperties,queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Parse the XML query using the XML parser\n\t\t\tQuery q=builder.getQuery(doc.getDocumentElement());\n\t\t\t\n\t\t\t//Run the query\n\t\t\tint h=searcher.search(q, null, 1000).totalHits;\n\t\t\t\n\t\t\t//Check we have the expected number of results\n\t\t\tint expectedHits=Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n\t\t\tassertEquals(\"Number of results should match for query \"+queryForms[i],expectedHits,h);\n\t\t\t\n\t\t}\n\t}\n\n","sourceOld":"\tpublic void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException \n\t{\n\t\t//Cache all the query templates we will be referring to.\n\t\tQueryTemplateManager qtm=new QueryTemplateManager();\n\t\tqtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n\t\t//Run all of our test queries\n\t\tfor (int i = 0; i < queryForms.length; i++)\n\t\t{\n\t\t\tProperties queryFormProperties=getPropsFromString(queryForms[i]);\n\t\t\t\n\t\t\t//Get the required query XSL template for this test\n//\t\t\tTemplates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Transform the queryFormProperties into a Lucene XML query\n\t\t\tDocument doc=qtm.getQueryAsDOM(queryFormProperties,queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Parse the XML query using the XML parser\n\t\t\tQuery q=builder.getQuery(doc.getDocumentElement());\n\t\t\t\n\t\t\t//Run the query\n\t\t\tHits h=searcher.search(q);\n\t\t\t\n\t\t\t//Check we have the expected number of results\n\t\t\tint expectedHits=Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n\t\t\tassertEquals(\"Number of results should match for query \"+queryForms[i],expectedHits,h.length());\n\t\t\t\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager#testFormTransforms().mjava","pathOld":"contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestQueryTemplateManager#testFormTransforms().mjava","sourceNew":"\tpublic void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException \n\t{\n\t\t//Cache all the query templates we will be referring to.\n\t\tQueryTemplateManager qtm=new QueryTemplateManager();\n\t\tqtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n\t\t//Run all of our test queries\n\t\tfor (int i = 0; i < queryForms.length; i++)\n\t\t{\n\t\t\tProperties queryFormProperties=getPropsFromString(queryForms[i]);\n\t\t\t\n\t\t\t//Get the required query XSL template for this test\n//\t\t\tTemplates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Transform the queryFormProperties into a Lucene XML query\n\t\t\tDocument doc=qtm.getQueryAsDOM(queryFormProperties,queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Parse the XML query using the XML parser\n\t\t\tQuery q=builder.getQuery(doc.getDocumentElement());\n\t\t\t\n\t\t\t//Run the query\n\t\t\tint h=searcher.search(q, null, 1000).totalHits;\n\t\t\t\n\t\t\t//Check we have the expected number of results\n\t\t\tint expectedHits=Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n\t\t\tassertEquals(\"Number of results should match for query \"+queryForms[i],expectedHits,h);\n\t\t\t\n\t\t}\n\t}\n\n","sourceOld":"\tpublic void testFormTransforms() throws SAXException, IOException, ParserConfigurationException, TransformerException, ParserException \n\t{\n\t\t//Cache all the query templates we will be referring to.\n\t\tQueryTemplateManager qtm=new QueryTemplateManager();\n\t\tqtm.addQueryTemplate(\"albumBooleanQuery\", getClass().getResourceAsStream(\"albumBooleanQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumFilteredQuery\", getClass().getResourceAsStream(\"albumFilteredQuery.xsl\"));\n\t\tqtm.addQueryTemplate(\"albumLuceneClassicQuery\", getClass().getResourceAsStream(\"albumLuceneClassicQuery.xsl\"));\n\t\t//Run all of our test queries\n\t\tfor (int i = 0; i < queryForms.length; i++)\n\t\t{\n\t\t\tProperties queryFormProperties=getPropsFromString(queryForms[i]);\n\t\t\t\n\t\t\t//Get the required query XSL template for this test\n//\t\t\tTemplates template=getTemplate(queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Transform the queryFormProperties into a Lucene XML query\n\t\t\tDocument doc=qtm.getQueryAsDOM(queryFormProperties,queryFormProperties.getProperty(\"template\"));\n\t\t\t\n\t\t\t//Parse the XML query using the XML parser\n\t\t\tQuery q=builder.getQuery(doc.getDocumentElement());\n\t\t\t\n\t\t\t//Run the query\n\t\t\tint h=searcher.search(q, null, 1000).totalHits;\n\t\t\t\n\t\t\t//Check we have the expected number of results\n\t\t\tint expectedHits=Integer.parseInt(queryFormProperties.getProperty(\"expectedMatches\"));\n\t\t\tassertEquals(\"Number of results should match for query \"+queryForms[i],expectedHits,h);\n\t\t\t\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45b222932b1624e0d17f8ee1a8111e294601ab40":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"96f3cc4342f6cfe78f848fbdf9f11cc11bdf14d4":["45b222932b1624e0d17f8ee1a8111e294601ab40"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["96f3cc4342f6cfe78f848fbdf9f11cc11bdf14d4"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45b222932b1624e0d17f8ee1a8111e294601ab40"],"45b222932b1624e0d17f8ee1a8111e294601ab40":["96f3cc4342f6cfe78f848fbdf9f11cc11bdf14d4"],"96f3cc4342f6cfe78f848fbdf9f11cc11bdf14d4":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}