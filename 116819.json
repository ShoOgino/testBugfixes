{"path":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testSharedHitcountCollector().mjava","commits":[{"id":"e19eef45a852c3316ae52fdf941731448ece967a","date":1567670879,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testSharedHitcountCollector().mjava","pathOld":"/dev/null","sourceNew":"  public void testSharedHitcountCollector() throws Exception {\n\n    ExecutorService service = new ThreadPoolExecutor(4, 4, 0L, TimeUnit.MILLISECONDS,\n        new LinkedBlockingQueue<Runnable>(),\n        new NamedThreadFactory(\"TestTopFieldCollector\"));\n\n    IndexSearcher concurrentSearcher = new IndexSearcher(ir, service);\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    for(int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, Integer.MAX_VALUE);\n\n      is.search(q, tdc);\n\n      CollectorManager tsdc = TopFieldCollector.createSharedManager(sort[i], 10, null, Integer.MAX_VALUE);\n\n      TopDocs td = tdc.topDocs();\n      TopDocs td2 = (TopDocs) concurrentSearcher.search(q, tsdc);\n      ScoreDoc[] sd = td.scoreDocs;\n      for(int j = 0; j < sd.length; j++) {\n        assertTrue(Float.isNaN(sd[j].score));\n      }\n\n      CheckHits.checkEqual(q, td.scoreDocs, td2.scoreDocs);\n    }\n\n    service.shutdown();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c21918ef3ad23e254f39cb0cd6c86851fcb993","date":1580123310,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testSharedHitcountCollector().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testSharedHitcountCollector().mjava","sourceNew":"  public void testSharedHitcountCollector() throws Exception {\n\n    ExecutorService service = new ThreadPoolExecutor(4, 4, 0L, TimeUnit.MILLISECONDS,\n        new LinkedBlockingQueue<Runnable>(),\n        new NamedThreadFactory(\"TestTopFieldCollector\"));\n\n    IndexSearcher concurrentSearcher = new IndexSearcher(ir, service);\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    for(int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, Integer.MAX_VALUE);\n\n      is.search(q, tdc);\n\n      CollectorManager<TopFieldCollector,TopFieldDocs> tsdc = TopFieldCollector.createSharedManager(sort[i], 10, null, Integer.MAX_VALUE);\n\n      TopDocs td = tdc.topDocs();\n      TopDocs td2 = concurrentSearcher.search(q, tsdc);\n      ScoreDoc[] sd = td.scoreDocs;\n      for(int j = 0; j < sd.length; j++) {\n        assertTrue(Float.isNaN(sd[j].score));\n      }\n\n      CheckHits.checkEqual(q, td.scoreDocs, td2.scoreDocs);\n    }\n\n    service.shutdown();\n  }\n\n","sourceOld":"  public void testSharedHitcountCollector() throws Exception {\n\n    ExecutorService service = new ThreadPoolExecutor(4, 4, 0L, TimeUnit.MILLISECONDS,\n        new LinkedBlockingQueue<Runnable>(),\n        new NamedThreadFactory(\"TestTopFieldCollector\"));\n\n    IndexSearcher concurrentSearcher = new IndexSearcher(ir, service);\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    for(int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, Integer.MAX_VALUE);\n\n      is.search(q, tdc);\n\n      CollectorManager tsdc = TopFieldCollector.createSharedManager(sort[i], 10, null, Integer.MAX_VALUE);\n\n      TopDocs td = tdc.topDocs();\n      TopDocs td2 = (TopDocs) concurrentSearcher.search(q, tsdc);\n      ScoreDoc[] sd = td.scoreDocs;\n      for(int j = 0; j < sd.length; j++) {\n        assertTrue(Float.isNaN(sd[j].score));\n      }\n\n      CheckHits.checkEqual(q, td.scoreDocs, td2.scoreDocs);\n    }\n\n    service.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e19eef45a852c3316ae52fdf941731448ece967a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c21918ef3ad23e254f39cb0cd6c86851fcb993":["e19eef45a852c3316ae52fdf941731448ece967a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30c21918ef3ad23e254f39cb0cd6c86851fcb993"]},"commit2Childs":{"e19eef45a852c3316ae52fdf941731448ece967a":["30c21918ef3ad23e254f39cb0cd6c86851fcb993"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e19eef45a852c3316ae52fdf941731448ece967a"],"30c21918ef3ad23e254f39cb0cd6c86851fcb993":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}