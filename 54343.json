{"path":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice).mjava","commits":[{"id":"b54504c5305a6cc48f59c627c9c8dd727e2a8f0b","date":1491468518,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice).mjava","pathOld":"/dev/null","sourceNew":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice) throws Exception {\n    String newCoreName = Assign.buildCoreName(coll, slice.getName());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, ()->{});\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      return;\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if(async!=null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, ()->{});\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55accabb4ef9e5d1cb8cb096bb917d5a553ae20f","date":1491469063,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice).mjava","sourceNew":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice) throws Exception {\n    String newCoreName = Assign.buildCoreName(coll, slice.getName());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      return;\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if(async!=null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice) throws Exception {\n    String newCoreName = Assign.buildCoreName(coll, slice.getName());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, ()->{});\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      return;\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if(async!=null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, ()->{});\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice).mjava","pathOld":"/dev/null","sourceNew":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice) throws Exception {\n    String newCoreName = Assign.buildCoreName(coll, slice.getName());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      return;\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if(async!=null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice).mjava","sourceNew":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice) throws Exception {\n    String newCoreName = Assign.buildCoreName(coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      return;\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if(async!=null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice) throws Exception {\n    String newCoreName = Assign.buildCoreName(coll, slice.getName());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      return;\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if(async!=null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice).mjava","sourceNew":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice) throws Exception {\n    String newCoreName = Assign.buildCoreName(coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      return;\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if(async!=null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice) throws Exception {\n    String newCoreName = Assign.buildCoreName(coll, slice.getName());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      return;\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if(async!=null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecb39e783dd104116a9502e8b0ab3df89f35ac19","date":1499167547,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice).mjava","sourceNew":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout) throws Exception {\n    String newCoreName = Assign.buildCoreName(coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    CountDownLatch countDownLatch = new CountDownLatch(1);\n    ReplaceNodeCmd.RecoveryWatcher watcher = null;\n    if (replica.equals(slice.getLeader())) {\n      watcher = new ReplaceNodeCmd.RecoveryWatcher(coll.getName(), slice.getName(),\n          replica.getName(), null, countDownLatch);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getRecoveredReplica() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice) throws Exception {\n    String newCoreName = Assign.buildCoreName(coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      return;\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if(async!=null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","bugFix":null,"bugIntro":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c","65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c","587637d2d2a2c50503511d5b626fdc366b4fd3d4","587637d2d2a2c50503511d5b626fdc366b4fd3d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice).mjava","sourceNew":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout) throws Exception {\n    String newCoreName = Assign.buildCoreName(coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    CountDownLatch countDownLatch = new CountDownLatch(1);\n    ReplaceNodeCmd.RecoveryWatcher watcher = null;\n    if (replica.equals(slice.getLeader())) {\n      watcher = new ReplaceNodeCmd.RecoveryWatcher(coll.getName(), slice.getName(),\n          replica.getName(), null, countDownLatch);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getRecoveredReplica() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice) throws Exception {\n    String newCoreName = Assign.buildCoreName(coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      return;\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if(async!=null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b54504c5305a6cc48f59c627c9c8dd727e2a8f0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["55accabb4ef9e5d1cb8cb096bb917d5a553ae20f"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["e9017cf144952056066919f1ebc7897ff9bd71b1","ecb39e783dd104116a9502e8b0ab3df89f35ac19"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"55accabb4ef9e5d1cb8cb096bb917d5a553ae20f":["b54504c5305a6cc48f59c627c9c8dd727e2a8f0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecb39e783dd104116a9502e8b0ab3df89f35ac19"],"ecb39e783dd104116a9502e8b0ab3df89f35ac19":["61c45e99cf6676da48f19d7511c73712ad39402b"]},"commit2Childs":{"b54504c5305a6cc48f59c627c9c8dd727e2a8f0b":["55accabb4ef9e5d1cb8cb096bb917d5a553ae20f"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","ecb39e783dd104116a9502e8b0ab3df89f35ac19"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b54504c5305a6cc48f59c627c9c8dd727e2a8f0b","54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"55accabb4ef9e5d1cb8cb096bb917d5a553ae20f":["61c45e99cf6676da48f19d7511c73712ad39402b"],"ecb39e783dd104116a9502e8b0ab3df89f35ac19":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}