{"path":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testSoftDeleteWhileMergeSurvives().mjava","commits":[{"id":"36d84416fc00253f9e834f8dba14fa89b298e64e","date":1525428963,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testSoftDeleteWhileMergeSurvives().mjava","pathOld":"/dev/null","sourceNew":"  public void testSoftDeleteWhileMergeSurvives() throws IOException {\n    Directory dir = newDirectory();\n    String softDelete = \"soft_delete\";\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(softDelete);\n    AtomicBoolean update = new AtomicBoolean(true);\n    config.setReaderPooling(true);\n    config.setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\", () -> new DocValuesFieldExistsQuery(\"keep\"),\n        new LogDocMergePolicy()));\n    IndexWriter writer = new IndexWriter(dir, config);\n    writer.getConfig().setMergedSegmentWarmer(sr -> {\n      if (update.compareAndSet(true, false)) {\n        try {\n          writer.softUpdateDocument(new Term(\"id\", \"0\"), new Document(),\n              new NumericDocValuesField(softDelete, 1), new NumericDocValuesField(\"keep\", 1));\n          writer.commit();\n        } catch (IOException e) {\n          throw new AssertionError(e);\n        }\n      }\n    });\n\n    boolean preExistingDeletes = random().nextBoolean();\n    for (int i = 0; i < 2; i++) {\n      Document d = new Document();\n      d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n      if (preExistingDeletes && random().nextBoolean()) {\n        writer.addDocument(d); // randomly add a preexisting hard-delete that we don't carry over\n        writer.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n        d.add(new NumericDocValuesField(\"keep\", 1));\n        writer.addDocument(d);\n      } else {\n        d.add(new NumericDocValuesField(\"keep\", 1));\n        writer.addDocument(d);\n      }\n      writer.flush();\n    }\n    writer.forceMerge(1);\n    writer.commit();\n    assertFalse(update.get());\n    DirectoryReader open = DirectoryReader.open(dir);\n    assertEquals(0, open.numDeletedDocs());\n    assertEquals(3, open.maxDoc());\n    IOUtils.close(open, writer, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36d84416fc00253f9e834f8dba14fa89b298e64e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36d84416fc00253f9e834f8dba14fa89b298e64e"]},"commit2Childs":{"36d84416fc00253f9e834f8dba14fa89b298e64e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36d84416fc00253f9e834f8dba14fa89b298e64e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}