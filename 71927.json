{"path":"src/java/org/apache/lucene/index/IndexReader#open(Directory,boolean,IndexDeletionPolicy).mjava","commits":[{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(Directory,boolean,IndexDeletionPolicy).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory,boolean).mjava","sourceNew":"  private static IndexReader open(final Directory directory, final boolean closeDirectory, final IndexDeletionPolicy deletionPolicy) throws CorruptIndexException, IOException {\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n\n        IndexReader reader;\n\n        if (infos.size() == 1) {\t\t  // index is optimized\n          reader = SegmentReader.get(infos, infos.info(0), closeDirectory);\n        } else {\n\n          // To reduce the chance of hitting FileNotFound\n          // (and having to retry), we open segments in\n          // reverse because IndexWriter merges & deletes\n          // the newest segments first.\n\n          IndexReader[] readers = new IndexReader[infos.size()];\n          for (int i = infos.size()-1; i >= 0; i--) {\n            try {\n              readers[i] = SegmentReader.get(infos.info(i));\n            } catch (IOException e) {\n              // Close all readers we had opened:\n              for(i++;i<infos.size();i++) {\n                readers[i].close();\n              }\n              throw e;\n            }\n          }\n\n          reader = new MultiReader(directory, infos, closeDirectory, readers);\n        }\n        reader.deletionPolicy = deletionPolicy;\n        return reader;\n      }\n    }.run();\n  }\n\n","sourceOld":"  private static IndexReader open(final Directory directory, final boolean closeDirectory) throws CorruptIndexException, IOException {\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n\n        if (infos.size() == 1) {\t\t  // index is optimized\n          return SegmentReader.get(infos, infos.info(0), closeDirectory);\n        } else {\n\n          // To reduce the chance of hitting FileNotFound\n          // (and having to retry), we open segments in\n          // reverse because IndexWriter merges & deletes\n          // the newest segments first.\n\n          IndexReader[] readers = new IndexReader[infos.size()];\n          for (int i = infos.size()-1; i >= 0; i--) {\n            try {\n              readers[i] = SegmentReader.get(infos.info(i));\n            } catch (IOException e) {\n              // Close all readers we had opened:\n              for(i++;i<infos.size();i++) {\n                readers[i].close();\n              }\n              throw e;\n            }\n          }\n\n          return new MultiReader(directory, infos, closeDirectory, readers);\n        }\n      }\n    }.run();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f2552b9f13037c62acd400d263d1e9262d6e4e","date":1185490328,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(Directory,boolean,IndexDeletionPolicy).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory,boolean,IndexDeletionPolicy).mjava","sourceNew":"  private static IndexReader open(final Directory directory, final boolean closeDirectory, final IndexDeletionPolicy deletionPolicy) throws CorruptIndexException, IOException {\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n\n        IndexReader reader;\n\n        if (infos.size() == 1) {\t\t  // index is optimized\n          reader = SegmentReader.get(infos, infos.info(0), closeDirectory);\n        } else {\n\n          // To reduce the chance of hitting FileNotFound\n          // (and having to retry), we open segments in\n          // reverse because IndexWriter merges & deletes\n          // the newest segments first.\n\n          IndexReader[] readers = new IndexReader[infos.size()];\n          for (int i = infos.size()-1; i >= 0; i--) {\n            try {\n              readers[i] = SegmentReader.get(infos.info(i));\n            } catch (IOException e) {\n              // Close all readers we had opened:\n              for(i++;i<infos.size();i++) {\n                readers[i].close();\n              }\n              throw e;\n            }\n          }\n\n          reader = new MultiSegmentReader(directory, infos, closeDirectory, readers);\n        }\n        reader.deletionPolicy = deletionPolicy;\n        return reader;\n      }\n    }.run();\n  }\n\n","sourceOld":"  private static IndexReader open(final Directory directory, final boolean closeDirectory, final IndexDeletionPolicy deletionPolicy) throws CorruptIndexException, IOException {\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n\n        IndexReader reader;\n\n        if (infos.size() == 1) {\t\t  // index is optimized\n          reader = SegmentReader.get(infos, infos.info(0), closeDirectory);\n        } else {\n\n          // To reduce the chance of hitting FileNotFound\n          // (and having to retry), we open segments in\n          // reverse because IndexWriter merges & deletes\n          // the newest segments first.\n\n          IndexReader[] readers = new IndexReader[infos.size()];\n          for (int i = infos.size()-1; i >= 0; i--) {\n            try {\n              readers[i] = SegmentReader.get(infos.info(i));\n            } catch (IOException e) {\n              // Close all readers we had opened:\n              for(i++;i<infos.size();i++) {\n                readers[i].close();\n              }\n              throw e;\n            }\n          }\n\n          reader = new MultiReader(directory, infos, closeDirectory, readers);\n        }\n        reader.deletionPolicy = deletionPolicy;\n        return reader;\n      }\n    }.run();\n  }\n\n","bugFix":["8b6187898fc4413ccd18229711786550a280383c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"125b5699f11b58d9be0820c6ce8b1648812902e8","date":1190273227,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(Directory,boolean,IndexDeletionPolicy).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory,boolean,IndexDeletionPolicy).mjava","sourceNew":"  private static IndexReader open(final Directory directory, final boolean closeDirectory, final IndexDeletionPolicy deletionPolicy) throws CorruptIndexException, IOException {\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n\n        DirectoryIndexReader reader;\n\n        if (infos.size() == 1) {\t\t  // index is optimized\n          reader = SegmentReader.get(infos, infos.info(0), closeDirectory);\n        } else {\n          reader = new MultiSegmentReader(directory, infos, closeDirectory);\n        }\n        reader.setDeletionPolicy(deletionPolicy);\n        return reader;\n      }\n    }.run();\n  }\n\n","sourceOld":"  private static IndexReader open(final Directory directory, final boolean closeDirectory, final IndexDeletionPolicy deletionPolicy) throws CorruptIndexException, IOException {\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n\n        IndexReader reader;\n\n        if (infos.size() == 1) {\t\t  // index is optimized\n          reader = SegmentReader.get(infos, infos.info(0), closeDirectory);\n        } else {\n\n          // To reduce the chance of hitting FileNotFound\n          // (and having to retry), we open segments in\n          // reverse because IndexWriter merges & deletes\n          // the newest segments first.\n\n          IndexReader[] readers = new IndexReader[infos.size()];\n          for (int i = infos.size()-1; i >= 0; i--) {\n            try {\n              readers[i] = SegmentReader.get(infos.info(i));\n            } catch (IOException e) {\n              // Close all readers we had opened:\n              for(i++;i<infos.size();i++) {\n                readers[i].close();\n              }\n              throw e;\n            }\n          }\n\n          reader = new MultiSegmentReader(directory, infos, closeDirectory, readers);\n        }\n        reader.deletionPolicy = deletionPolicy;\n        return reader;\n      }\n    }.run();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8","date":1195335263,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(Directory,boolean,IndexDeletionPolicy).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory,boolean,IndexDeletionPolicy).mjava","sourceNew":"  private static IndexReader open(final Directory directory, final boolean closeDirectory, final IndexDeletionPolicy deletionPolicy) throws CorruptIndexException, IOException {\n    return DirectoryIndexReader.open(directory, closeDirectory, deletionPolicy);\n  }\n\n","sourceOld":"  private static IndexReader open(final Directory directory, final boolean closeDirectory, final IndexDeletionPolicy deletionPolicy) throws CorruptIndexException, IOException {\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n\n        DirectoryIndexReader reader;\n\n        if (infos.size() == 1) {\t\t  // index is optimized\n          reader = SegmentReader.get(infos, infos.info(0), closeDirectory);\n        } else {\n          reader = new MultiSegmentReader(directory, infos, closeDirectory);\n        }\n        reader.setDeletionPolicy(deletionPolicy);\n        return reader;\n      }\n    }.run();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac785906c92e4048ffc28f7c23a45541d3cca9bf","date":1214322066,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(Directory,boolean,IndexDeletionPolicy,IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(Directory,boolean,IndexDeletionPolicy).mjava","sourceNew":"  private static IndexReader open(final Directory directory, final boolean closeDirectory, final IndexDeletionPolicy deletionPolicy, final IndexCommit commit) throws CorruptIndexException, IOException {\n    return DirectoryIndexReader.open(directory, closeDirectory, deletionPolicy, commit);\n  }\n\n","sourceOld":"  private static IndexReader open(final Directory directory, final boolean closeDirectory, final IndexDeletionPolicy deletionPolicy) throws CorruptIndexException, IOException {\n    return DirectoryIndexReader.open(directory, closeDirectory, deletionPolicy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"125b5699f11b58d9be0820c6ce8b1648812902e8":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["8b6187898fc4413ccd18229711786550a280383c"],"8b6187898fc4413ccd18229711786550a280383c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ac785906c92e4048ffc28f7c23a45541d3cca9bf":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac785906c92e4048ffc28f7c23a45541d3cca9bf"]},"commit2Childs":{"125b5699f11b58d9be0820c6ce8b1648812902e8":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b6187898fc4413ccd18229711786550a280383c"],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"8b6187898fc4413ccd18229711786550a280383c":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"ac785906c92e4048ffc28f7c23a45541d3cca9bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["ac785906c92e4048ffc28f7c23a45541d3cca9bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}