{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#seekCeil(BytesRef).mjava","commits":[{"id":"084884d4602f4d1c7411eab29e897e349ce62675","date":1475571034,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#seekCeil(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public SeekStatus seekCeil(BytesRef text) throws IOException {\n        // locate block: narrow to block range with index, then search blocks\n        final long block;\n        long indexPos = binarySearchIndex(text);\n        if (indexPos < 0) {\n          block = 0;\n        } else {\n          long low = indexPos << BLOCK_INTERVAL_SHIFT;\n          long high = Math.min(numIndexValues - 1, low + BLOCK_INTERVAL_MASK);\n          block = Math.max(low, binarySearchBlock(text, low, high));\n        }\n\n        // position before block, then scan to term.\n        input.seek(addresses.get(block));\n        currentOrd = (block << INTERVAL_SHIFT) - 1;\n\n        while (next() != null) {\n          int cmp = term.compareTo(text);\n          if (cmp == 0) {\n            return SeekStatus.FOUND;\n          } else if (cmp > 0) {\n            return SeekStatus.NOT_FOUND;\n          }\n        }\n        return SeekStatus.END;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#seekCeil(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public SeekStatus seekCeil(BytesRef text) throws IOException {\n        // locate block: narrow to block range with index, then search blocks\n        final long block;\n        long indexPos = binarySearchIndex(text);\n        if (indexPos < 0) {\n          block = 0;\n        } else {\n          long low = indexPos << BLOCK_INTERVAL_SHIFT;\n          long high = Math.min(numIndexValues - 1, low + BLOCK_INTERVAL_MASK);\n          block = Math.max(low, binarySearchBlock(text, low, high));\n        }\n\n        // position before block, then scan to term.\n        input.seek(addresses.get(block));\n        currentOrd = (block << INTERVAL_SHIFT) - 1;\n\n        while (next() != null) {\n          int cmp = term.compareTo(text);\n          if (cmp == 0) {\n            return SeekStatus.FOUND;\n          } else if (cmp > 0) {\n            return SeekStatus.NOT_FOUND;\n          }\n        }\n        return SeekStatus.END;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23e44daeaa8b89694d10df5999956c8e14a7dd09","date":1476689300,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#seekCeil(BytesRef).mjava","sourceNew":null,"sourceOld":"      @Override\n      public SeekStatus seekCeil(BytesRef text) throws IOException {\n        // locate block: narrow to block range with index, then search blocks\n        final long block;\n        long indexPos = binarySearchIndex(text);\n        if (indexPos < 0) {\n          block = 0;\n        } else {\n          long low = indexPos << BLOCK_INTERVAL_SHIFT;\n          long high = Math.min(numIndexValues - 1, low + BLOCK_INTERVAL_MASK);\n          block = Math.max(low, binarySearchBlock(text, low, high));\n        }\n\n        // position before block, then scan to term.\n        input.seek(addresses.get(block));\n        currentOrd = (block << INTERVAL_SHIFT) - 1;\n\n        while (next() != null) {\n          int cmp = term.compareTo(text);\n          if (cmp == 0) {\n            return SeekStatus.FOUND;\n          } else if (cmp > 0) {\n            return SeekStatus.NOT_FOUND;\n          }\n        }\n        return SeekStatus.END;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23e44daeaa8b89694d10df5999956c8e14a7dd09":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","084884d4602f4d1c7411eab29e897e349ce62675"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"084884d4602f4d1c7411eab29e897e349ce62675":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"23e44daeaa8b89694d10df5999956c8e14a7dd09":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1967bed916cc89da82a1c2085f27976da6d08cbd","084884d4602f4d1c7411eab29e897e349ce62675"],"084884d4602f4d1c7411eab29e897e349ce62675":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}