{"path":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#handleStartElement(XMLStreamReader,Set[Node],Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#handleStartElement(XMLStreamReader,Set[Node],Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * If a new tag is encountered, check if it is of interest or not by seeing\n     * if it matches against our node tree. If we have deperted from the node \n     * tree then walk back though the tree's ancestor nodes checking to see if\n     * any // expressions exist for the node and compare them against the new\n     * tag. If matched then \"jump\" to that node, otherwise ignore the tag.\n     *\n     * Note, the list of // expressions found while walking back up the tree\n     * is chached in the HashMap decends. Then if the new tag is to be skipped,\n     * any inner chil tags are compared against the cache and jumped to if\n     * matched.\n     */\n    private void handleStartElement(XMLStreamReader parser, Set<Node> childrenFound,\n                                    Handler handler, Map<String, Object> values,\n                                    Stack<Set<String>> stack, boolean recordStarted)\n            throws IOException, XMLStreamException {\n      Node n = getMatchingNode(parser,childNodes);\n      Map<String, Object> decends=new HashMap<String, Object>();\n      if (n != null) {\n        childrenFound.add(n);\n        n.parse(parser, handler, values, stack, recordStarted);\n        return;\n        }\n      // The stream has diverged from the tree of interesting elements, but\n      // are there any wildCardNodes ... anywhere in our path from the root?\n      Node dn = this; // checking our Node first!\n            \n      do {\n        if (dn.wildCardNodes != null) {\n          // Check to see if the streams tag matches one of the \"//\" all\n          // decendents type expressions for this node.\n          n = getMatchingNode(parser, dn.wildCardNodes);\n          if (n != null) {\n            childrenFound.add(n);\n            n.parse(parser, handler, values, stack, recordStarted);\n            break;\n          }\n          // add the list of this nodes wild decendents to the cache\n          for (Node nn : dn.wildCardNodes) decends.put(nn.name, nn);\n        }\n        dn = dn.wildAncestor; // leap back along the tree toward root\n      } while (dn != null) ;\n \n      if (n == null) {\n        // we have a START_ELEMENT which is not within the tree of\n        // interesting nodes. Skip over the contents of this element\n        // but recursivly repeat the above for any START_ELEMENTs\n        // found within this element.\n        int count = 1; // we have had our first START_ELEMENT\n        while (count != 0) {\n          int token = parser.next();\n          if (token == START_ELEMENT) {\n            Node nn = (Node) decends.get(parser.getLocalName());\n            if (nn != null) {\n              // We have a //Node which matches the stream's parser.localName\n              childrenFound.add(nn);\n              // Parse the contents of this stream element\n              nn.parse(parser, handler, values, stack, recordStarted);\n            } \n            else count++;\n          } \n          else if (token == END_ELEMENT) count--;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#handleStartElement(XMLStreamReader,Set[Node],Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","sourceNew":null,"sourceOld":"    /**\n     * If a new tag is encountered, check if it is of interest or not by seeing\n     * if it matches against our node tree. If we have deperted from the node \n     * tree then walk back though the tree's ancestor nodes checking to see if\n     * any // expressions exist for the node and compare them against the new\n     * tag. If matched then \"jump\" to that node, otherwise ignore the tag.\n     *\n     * Note, the list of // expressions found while walking back up the tree\n     * is chached in the HashMap decends. Then if the new tag is to be skipped,\n     * any inner chil tags are compared against the cache and jumped to if\n     * matched.\n     */\n    private void handleStartElement(XMLStreamReader parser, Set<Node> childrenFound,\n                                    Handler handler, Map<String, Object> values,\n                                    Stack<Set<String>> stack, boolean recordStarted)\n            throws IOException, XMLStreamException {\n      Node n = getMatchingNode(parser,childNodes);\n      Map<String, Object> decends=new HashMap<String, Object>();\n      if (n != null) {\n        childrenFound.add(n);\n        n.parse(parser, handler, values, stack, recordStarted);\n        return;\n        }\n      // The stream has diverged from the tree of interesting elements, but\n      // are there any wildCardNodes ... anywhere in our path from the root?\n      Node dn = this; // checking our Node first!\n            \n      do {\n        if (dn.wildCardNodes != null) {\n          // Check to see if the streams tag matches one of the \"//\" all\n          // decendents type expressions for this node.\n          n = getMatchingNode(parser, dn.wildCardNodes);\n          if (n != null) {\n            childrenFound.add(n);\n            n.parse(parser, handler, values, stack, recordStarted);\n            break;\n          }\n          // add the list of this nodes wild decendents to the cache\n          for (Node nn : dn.wildCardNodes) decends.put(nn.name, nn);\n        }\n        dn = dn.wildAncestor; // leap back along the tree toward root\n      } while (dn != null) ;\n \n      if (n == null) {\n        // we have a START_ELEMENT which is not within the tree of\n        // interesting nodes. Skip over the contents of this element\n        // but recursivly repeat the above for any START_ELEMENTs\n        // found within this element.\n        int count = 1; // we have had our first START_ELEMENT\n        while (count != 0) {\n          int token = parser.next();\n          if (token == START_ELEMENT) {\n            Node nn = (Node) decends.get(parser.getLocalName());\n            if (nn != null) {\n              // We have a //Node which matches the stream's parser.localName\n              childrenFound.add(nn);\n              // Parse the contents of this stream element\n              nn.parse(parser, handler, values, stack, recordStarted);\n            } \n            else count++;\n          } \n          else if (token == END_ELEMENT) count--;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#handleStartElement(XMLStreamReader,Set[Node],Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#handleStartElement(XMLStreamReader,Set[Node],Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","sourceNew":"    /**\n     * If a new tag is encountered, check if it is of interest or not by seeing\n     * if it matches against our node tree. If we have deperted from the node \n     * tree then walk back though the tree's ancestor nodes checking to see if\n     * any // expressions exist for the node and compare them against the new\n     * tag. If matched then \"jump\" to that node, otherwise ignore the tag.\n     *\n     * Note, the list of // expressions found while walking back up the tree\n     * is chached in the HashMap decends. Then if the new tag is to be skipped,\n     * any inner chil tags are compared against the cache and jumped to if\n     * matched.\n     */\n    private void handleStartElement(XMLStreamReader parser, Set<Node> childrenFound,\n                                    Handler handler, Map<String, Object> values,\n                                    Stack<Set<String>> stack, boolean recordStarted)\n            throws IOException, XMLStreamException {\n      Node n = getMatchingNode(parser,childNodes);\n      Map<String, Object> decends=new HashMap<String, Object>();\n      if (n != null) {\n        childrenFound.add(n);\n        n.parse(parser, handler, values, stack, recordStarted);\n        return;\n        }\n      // The stream has diverged from the tree of interesting elements, but\n      // are there any wildCardNodes ... anywhere in our path from the root?\n      Node dn = this; // checking our Node first!\n            \n      do {\n        if (dn.wildCardNodes != null) {\n          // Check to see if the streams tag matches one of the \"//\" all\n          // decendents type expressions for this node.\n          n = getMatchingNode(parser, dn.wildCardNodes);\n          if (n != null) {\n            childrenFound.add(n);\n            n.parse(parser, handler, values, stack, recordStarted);\n            break;\n          }\n          // add the list of this nodes wild decendents to the cache\n          for (Node nn : dn.wildCardNodes) decends.put(nn.name, nn);\n        }\n        dn = dn.wildAncestor; // leap back along the tree toward root\n      } while (dn != null) ;\n \n      if (n == null) {\n        // we have a START_ELEMENT which is not within the tree of\n        // interesting nodes. Skip over the contents of this element\n        // but recursivly repeat the above for any START_ELEMENTs\n        // found within this element.\n        int count = 1; // we have had our first START_ELEMENT\n        while (count != 0) {\n          int token = parser.next();\n          if (token == START_ELEMENT) {\n            Node nn = (Node) decends.get(parser.getLocalName());\n            if (nn != null) {\n              // We have a //Node which matches the stream's parser.localName\n              childrenFound.add(nn);\n              // Parse the contents of this stream element\n              nn.parse(parser, handler, values, stack, recordStarted);\n            } \n            else count++;\n          } \n          else if (token == END_ELEMENT) count--;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * If a new tag is encountered, check if it is of interest or not by seeing\n     * if it matches against our node tree. If we have deperted from the node \n     * tree then walk back though the tree's ancestor nodes checking to see if\n     * any // expressions exist for the node and compare them against the new\n     * tag. If matched then \"jump\" to that node, otherwise ignore the tag.\n     *\n     * Note, the list of // expressions found while walking back up the tree\n     * is chached in the HashMap decends. Then if the new tag is to be skipped,\n     * any inner chil tags are compared against the cache and jumped to if\n     * matched.\n     */\n    private void handleStartElement(XMLStreamReader parser, Set<Node> childrenFound,\n                                    Handler handler, Map<String, Object> values,\n                                    Stack<Set<String>> stack, boolean recordStarted)\n            throws IOException, XMLStreamException {\n      Node n = getMatchingNode(parser,childNodes);\n      Map<String, Object> decends=new HashMap<String, Object>();\n      if (n != null) {\n        childrenFound.add(n);\n        n.parse(parser, handler, values, stack, recordStarted);\n        return;\n        }\n      // The stream has diverged from the tree of interesting elements, but\n      // are there any wildCardNodes ... anywhere in our path from the root?\n      Node dn = this; // checking our Node first!\n            \n      do {\n        if (dn.wildCardNodes != null) {\n          // Check to see if the streams tag matches one of the \"//\" all\n          // decendents type expressions for this node.\n          n = getMatchingNode(parser, dn.wildCardNodes);\n          if (n != null) {\n            childrenFound.add(n);\n            n.parse(parser, handler, values, stack, recordStarted);\n            break;\n          }\n          // add the list of this nodes wild decendents to the cache\n          for (Node nn : dn.wildCardNodes) decends.put(nn.name, nn);\n        }\n        dn = dn.wildAncestor; // leap back along the tree toward root\n      } while (dn != null) ;\n \n      if (n == null) {\n        // we have a START_ELEMENT which is not within the tree of\n        // interesting nodes. Skip over the contents of this element\n        // but recursivly repeat the above for any START_ELEMENTs\n        // found within this element.\n        int count = 1; // we have had our first START_ELEMENT\n        while (count != 0) {\n          int token = parser.next();\n          if (token == START_ELEMENT) {\n            Node nn = (Node) decends.get(parser.getLocalName());\n            if (nn != null) {\n              // We have a //Node which matches the stream's parser.localName\n              childrenFound.add(nn);\n              // Parse the contents of this stream element\n              nn.parse(parser, handler, values, stack, recordStarted);\n            } \n            else count++;\n          } \n          else if (token == END_ELEMENT) count--;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#handleStartElement(XMLStreamReader,Set[Node],Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * If a new tag is encountered, check if it is of interest or not by seeing\n     * if it matches against our node tree. If we have deperted from the node \n     * tree then walk back though the tree's ancestor nodes checking to see if\n     * any // expressions exist for the node and compare them against the new\n     * tag. If matched then \"jump\" to that node, otherwise ignore the tag.\n     *\n     * Note, the list of // expressions found while walking back up the tree\n     * is chached in the HashMap decends. Then if the new tag is to be skipped,\n     * any inner chil tags are compared against the cache and jumped to if\n     * matched.\n     */\n    private void handleStartElement(XMLStreamReader parser, Set<Node> childrenFound,\n                                    Handler handler, Map<String, Object> values,\n                                    Stack<Set<String>> stack, boolean recordStarted)\n            throws IOException, XMLStreamException {\n      Node n = getMatchingNode(parser,childNodes);\n      Map<String, Object> decends=new HashMap<String, Object>();\n      if (n != null) {\n        childrenFound.add(n);\n        n.parse(parser, handler, values, stack, recordStarted);\n        return;\n        }\n      // The stream has diverged from the tree of interesting elements, but\n      // are there any wildCardNodes ... anywhere in our path from the root?\n      Node dn = this; // checking our Node first!\n            \n      do {\n        if (dn.wildCardNodes != null) {\n          // Check to see if the streams tag matches one of the \"//\" all\n          // decendents type expressions for this node.\n          n = getMatchingNode(parser, dn.wildCardNodes);\n          if (n != null) {\n            childrenFound.add(n);\n            n.parse(parser, handler, values, stack, recordStarted);\n            break;\n          }\n          // add the list of this nodes wild decendents to the cache\n          for (Node nn : dn.wildCardNodes) decends.put(nn.name, nn);\n        }\n        dn = dn.wildAncestor; // leap back along the tree toward root\n      } while (dn != null) ;\n \n      if (n == null) {\n        // we have a START_ELEMENT which is not within the tree of\n        // interesting nodes. Skip over the contents of this element\n        // but recursivly repeat the above for any START_ELEMENTs\n        // found within this element.\n        int count = 1; // we have had our first START_ELEMENT\n        while (count != 0) {\n          int token = parser.next();\n          if (token == START_ELEMENT) {\n            Node nn = (Node) decends.get(parser.getLocalName());\n            if (nn != null) {\n              // We have a //Node which matches the stream's parser.localName\n              childrenFound.add(nn);\n              // Parse the contents of this stream element\n              nn.parse(parser, handler, values, stack, recordStarted);\n            } \n            else count++;\n          } \n          else if (token == END_ELEMENT) count--;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#handleStartElement(XMLStreamReader,Set[Node],Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#handleStartElement(XMLStreamReader,Set[Node],Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","sourceNew":"    /**\n     * If a new tag is encountered, check if it is of interest or not by seeing\n     * if it matches against our node tree. If we have deperted from the node \n     * tree then walk back though the tree's ancestor nodes checking to see if\n     * any // expressions exist for the node and compare them against the new\n     * tag. If matched then \"jump\" to that node, otherwise ignore the tag.\n     *\n     * Note, the list of // expressions found while walking back up the tree\n     * is chached in the HashMap decends. Then if the new tag is to be skipped,\n     * any inner chil tags are compared against the cache and jumped to if\n     * matched.\n     */\n    private void handleStartElement(XMLStreamReader parser, Set<Node> childrenFound,\n                                    Handler handler, Map<String, Object> values,\n                                    Stack<Set<String>> stack, boolean recordStarted)\n            throws IOException, XMLStreamException {\n      Node n = getMatchingNode(parser,childNodes);\n      Map<String, Object> decends=new HashMap<String, Object>();\n      if (n != null) {\n        childrenFound.add(n);\n        n.parse(parser, handler, values, stack, recordStarted);\n        return;\n        }\n      // The stream has diverged from the tree of interesting elements, but\n      // are there any wildCardNodes ... anywhere in our path from the root?\n      Node dn = this; // checking our Node first!\n            \n      do {\n        if (dn.wildCardNodes != null) {\n          // Check to see if the streams tag matches one of the \"//\" all\n          // decendents type expressions for this node.\n          n = getMatchingNode(parser, dn.wildCardNodes);\n          if (n != null) {\n            childrenFound.add(n);\n            n.parse(parser, handler, values, stack, recordStarted);\n            break;\n          }\n          // add the list of this nodes wild decendents to the cache\n          for (Node nn : dn.wildCardNodes) decends.put(nn.name, nn);\n        }\n        dn = dn.wildAncestor; // leap back along the tree toward root\n      } while (dn != null) ;\n \n      if (n == null) {\n        // we have a START_ELEMENT which is not within the tree of\n        // interesting nodes. Skip over the contents of this element\n        // but recursivly repeat the above for any START_ELEMENTs\n        // found within this element.\n        int count = 1; // we have had our first START_ELEMENT\n        while (count != 0) {\n          int token = parser.next();\n          if (token == START_ELEMENT) {\n            Node nn = (Node) decends.get(parser.getLocalName());\n            if (nn != null) {\n              // We have a //Node which matches the stream's parser.localName\n              childrenFound.add(nn);\n              // Parse the contents of this stream element\n              nn.parse(parser, handler, values, stack, recordStarted);\n            } \n            else count++;\n          } \n          else if (token == END_ELEMENT) count--;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * If a new tag is encountered, check if it is of interest or not by seeing\n     * if it matches against our node tree. If we have deperted from the node \n     * tree then walk back though the tree's ancestor nodes checking to see if\n     * any // expressions exist for the node and compare them against the new\n     * tag. If matched then \"jump\" to that node, otherwise ignore the tag.\n     *\n     * Note, the list of // expressions found while walking back up the tree\n     * is chached in the HashMap decends. Then if the new tag is to be skipped,\n     * any inner chil tags are compared against the cache and jumped to if\n     * matched.\n     */\n    private void handleStartElement(XMLStreamReader parser, Set<Node> childrenFound,\n                                    Handler handler, Map<String, Object> values,\n                                    Stack<Set<String>> stack, boolean recordStarted)\n            throws IOException, XMLStreamException {\n      Node n = getMatchingNode(parser,childNodes);\n      Map<String, Object> decends=new HashMap<String, Object>();\n      if (n != null) {\n        childrenFound.add(n);\n        n.parse(parser, handler, values, stack, recordStarted);\n        return;\n        }\n      // The stream has diverged from the tree of interesting elements, but\n      // are there any wildCardNodes ... anywhere in our path from the root?\n      Node dn = this; // checking our Node first!\n            \n      do {\n        if (dn.wildCardNodes != null) {\n          // Check to see if the streams tag matches one of the \"//\" all\n          // decendents type expressions for this node.\n          n = getMatchingNode(parser, dn.wildCardNodes);\n          if (n != null) {\n            childrenFound.add(n);\n            n.parse(parser, handler, values, stack, recordStarted);\n            break;\n          }\n          // add the list of this nodes wild decendents to the cache\n          for (Node nn : dn.wildCardNodes) decends.put(nn.name, nn);\n        }\n        dn = dn.wildAncestor; // leap back along the tree toward root\n      } while (dn != null) ;\n \n      if (n == null) {\n        // we have a START_ELEMENT which is not within the tree of\n        // interesting nodes. Skip over the contents of this element\n        // but recursivly repeat the above for any START_ELEMENTs\n        // found within this element.\n        int count = 1; // we have had our first START_ELEMENT\n        while (count != 0) {\n          int token = parser.next();\n          if (token == START_ELEMENT) {\n            Node nn = (Node) decends.get(parser.getLocalName());\n            if (nn != null) {\n              // We have a //Node which matches the stream's parser.localName\n              childrenFound.add(nn);\n              // Parse the contents of this stream element\n              nn.parse(parser, handler, values, stack, recordStarted);\n            } \n            else count++;\n          } \n          else if (token == END_ELEMENT) count--;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#handleStartElement(XMLStreamReader,Set[Node],Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#handleStartElement(XMLStreamReader,Set[Node],Handler,Map[String,Object],Stack[Set[String]],boolean).mjava","sourceNew":"    /**\n     * If a new tag is encountered, check if it is of interest or not by seeing\n     * if it matches against our node tree. If we have deperted from the node \n     * tree then walk back though the tree's ancestor nodes checking to see if\n     * any // expressions exist for the node and compare them against the new\n     * tag. If matched then \"jump\" to that node, otherwise ignore the tag.\n     *\n     * Note, the list of // expressions found while walking back up the tree\n     * is chached in the HashMap decends. Then if the new tag is to be skipped,\n     * any inner chil tags are compared against the cache and jumped to if\n     * matched.\n     */\n    private void handleStartElement(XMLStreamReader parser, Set<Node> childrenFound,\n                                    Handler handler, Map<String, Object> values,\n                                    Stack<Set<String>> stack, boolean recordStarted)\n            throws IOException, XMLStreamException {\n      Node n = getMatchingNode(parser,childNodes);\n      Map<String, Object> decends=new HashMap<String, Object>();\n      if (n != null) {\n        childrenFound.add(n);\n        n.parse(parser, handler, values, stack, recordStarted);\n        return;\n        }\n      // The stream has diverged from the tree of interesting elements, but\n      // are there any wildCardNodes ... anywhere in our path from the root?\n      Node dn = this; // checking our Node first!\n            \n      do {\n        if (dn.wildCardNodes != null) {\n          // Check to see if the streams tag matches one of the \"//\" all\n          // decendents type expressions for this node.\n          n = getMatchingNode(parser, dn.wildCardNodes);\n          if (n != null) {\n            childrenFound.add(n);\n            n.parse(parser, handler, values, stack, recordStarted);\n            break;\n          }\n          // add the list of this nodes wild decendents to the cache\n          for (Node nn : dn.wildCardNodes) decends.put(nn.name, nn);\n        }\n        dn = dn.wildAncestor; // leap back along the tree toward root\n      } while (dn != null) ;\n \n      if (n == null) {\n        // we have a START_ELEMENT which is not within the tree of\n        // interesting nodes. Skip over the contents of this element\n        // but recursivly repeat the above for any START_ELEMENTs\n        // found within this element.\n        int count = 1; // we have had our first START_ELEMENT\n        while (count != 0) {\n          int token = parser.next();\n          if (token == START_ELEMENT) {\n            Node nn = (Node) decends.get(parser.getLocalName());\n            if (nn != null) {\n              // We have a //Node which matches the stream's parser.localName\n              childrenFound.add(nn);\n              // Parse the contents of this stream element\n              nn.parse(parser, handler, values, stack, recordStarted);\n            } \n            else count++;\n          } \n          else if (token == END_ELEMENT) count--;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * If a new tag is encountered, check if it is of interest or not by seeing\n     * if it matches against our node tree. If we have deperted from the node \n     * tree then walk back though the tree's ancestor nodes checking to see if\n     * any // expressions exist for the node and compare them against the new\n     * tag. If matched then \"jump\" to that node, otherwise ignore the tag.\n     *\n     * Note, the list of // expressions found while walking back up the tree\n     * is chached in the HashMap decends. Then if the new tag is to be skipped,\n     * any inner chil tags are compared against the cache and jumped to if\n     * matched.\n     */\n    private void handleStartElement(XMLStreamReader parser, Set<Node> childrenFound,\n                                    Handler handler, Map<String, Object> values,\n                                    Stack<Set<String>> stack, boolean recordStarted)\n            throws IOException, XMLStreamException {\n      Node n = getMatchingNode(parser,childNodes);\n      Map<String, Object> decends=new HashMap<String, Object>();\n      if (n != null) {\n        childrenFound.add(n);\n        n.parse(parser, handler, values, stack, recordStarted);\n        return;\n        }\n      // The stream has diverged from the tree of interesting elements, but\n      // are there any wildCardNodes ... anywhere in our path from the root?\n      Node dn = this; // checking our Node first!\n            \n      do {\n        if (dn.wildCardNodes != null) {\n          // Check to see if the streams tag matches one of the \"//\" all\n          // decendents type expressions for this node.\n          n = getMatchingNode(parser, dn.wildCardNodes);\n          if (n != null) {\n            childrenFound.add(n);\n            n.parse(parser, handler, values, stack, recordStarted);\n            break;\n          }\n          // add the list of this nodes wild decendents to the cache\n          for (Node nn : dn.wildCardNodes) decends.put(nn.name, nn);\n        }\n        dn = dn.wildAncestor; // leap back along the tree toward root\n      } while (dn != null) ;\n \n      if (n == null) {\n        // we have a START_ELEMENT which is not within the tree of\n        // interesting nodes. Skip over the contents of this element\n        // but recursivly repeat the above for any START_ELEMENTs\n        // found within this element.\n        int count = 1; // we have had our first START_ELEMENT\n        while (count != 0) {\n          int token = parser.next();\n          if (token == START_ELEMENT) {\n            Node nn = (Node) decends.get(parser.getLocalName());\n            if (nn != null) {\n              // We have a //Node which matches the stream's parser.localName\n              childrenFound.add(nn);\n              // Parse the contents of this stream element\n              nn.parse(parser, handler, values, stack, recordStarted);\n            } \n            else count++;\n          } \n          else if (token == END_ELEMENT) count--;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["1da8d55113b689b06716246649de6f62430f15c0","1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}