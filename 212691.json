{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CoreDescriptor).mjava","commits":[{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CloudDescriptor).mjava","sourceNew":"  private String doGetShardIdProcess(String coreName, CoreDescriptor descriptor) {\n    final String shardZkNodeName = getCoreNodeName(descriptor);\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName + \" coreNodeName:\" + shardZkNodeName);\n  }\n\n","sourceOld":"  private String doGetShardIdProcess(String coreName, CloudDescriptor descriptor) {\n    final String shardZkNodeName = getNodeName() + \"_\" + coreName;\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName + \" coreNodeName:\" + shardZkNodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"446d2d126e2d0a9c63a498d792c4072c820c1e95","date":1363304661,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CoreDescriptor).mjava","sourceNew":"  private String doGetShardIdProcess(String coreName, CoreDescriptor descriptor) {\n    final String coreNodeName = getCoreNodeName(descriptor);\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(coreNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName + \" coreNodeName:\" + coreNodeName);\n  }\n\n","sourceOld":"  private String doGetShardIdProcess(String coreName, CoreDescriptor descriptor) {\n    final String shardZkNodeName = getCoreNodeName(descriptor);\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName + \" coreNodeName:\" + shardZkNodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#waitForShardId(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CoreDescriptor).mjava","sourceNew":"  private void waitForShardId(CoreDescriptor cd) {\n    log.info(\"waiting to find shard id in clusterstate for \" + cd.getName());\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(getBaseUrl(), cd.getName());\n      if (shardId != null) {\n        cd.getCloudDescriptor().setShardId(shardId);\n        return;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard id for core: \" + cd.getName());\n  }\n\n","sourceOld":"  private String doGetShardIdProcess(String coreName, CoreDescriptor descriptor) {\n    final String coreNodeName = getCoreNodeName(descriptor);\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(coreNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName + \" coreNodeName:\" + coreNodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CoreDescriptor).mjava","sourceNew":null,"sourceOld":"  private String doGetShardIdProcess(String coreName, CoreDescriptor descriptor) {\n    final String coreNodeName = getCoreNodeName(descriptor);\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(coreNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName + \" coreNodeName:\" + coreNodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["446d2d126e2d0a9c63a498d792c4072c820c1e95"],"446d2d126e2d0a9c63a498d792c4072c820c1e95":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["446d2d126e2d0a9c63a498d792c4072c820c1e95","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["849494cf2f3a96af5c8c84995108ddd8456fcd04"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"446d2d126e2d0a9c63a498d792c4072c820c1e95":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["446d2d126e2d0a9c63a498d792c4072c820c1e95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}