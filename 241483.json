{"path":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#BytesWriterBase(Directory,String,String,int,boolean,ByteBlockPool,AtomicLong,IOContext).mjava","commits":[{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#BytesWriterBase(Directory,String,String,int,boolean,ByteBlockPool,AtomicLong,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#BytesWriterBase(Directory,String,String,int,boolean,ByteBlockPool,AtomicLong).mjava","sourceNew":"    protected BytesWriterBase(Directory dir, String id, String codecName,\n        int version, boolean initIndex, ByteBlockPool pool,\n        AtomicLong bytesUsed, IOContext context) throws IOException {\n      super(bytesUsed);\n      this.id = id;\n      this.pool = pool;\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n            DATA_EXTENSION), context);\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, codecName, version);\n        if (initIndex) {\n          idxOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n              INDEX_EXTENSION), context);\n          CodecUtil.writeHeader(idxOut, codecName, version);\n        } else {\n          idxOut = null;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, datOut, idxOut);\n        }\n      }\n    }\n\n","sourceOld":"    protected BytesWriterBase(Directory dir, String id, String codecName,\n        int version, boolean initIndex, ByteBlockPool pool,\n        AtomicLong bytesUsed) throws IOException {\n      super(bytesUsed);\n      this.id = id;\n      this.pool = pool;\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n            DATA_EXTENSION));\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, codecName, version);\n        if (initIndex) {\n          idxOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n              INDEX_EXTENSION));\n          CodecUtil.writeHeader(idxOut, codecName, version);\n        } else {\n          idxOut = null;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, datOut, idxOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesWriterBase#BytesWriterBase(Directory,String,String,int,boolean,ByteBlockPool,AtomicLong,IOContext).mjava","sourceNew":null,"sourceOld":"    protected BytesWriterBase(Directory dir, String id, String codecName,\n        int version, boolean initIndex, ByteBlockPool pool,\n        AtomicLong bytesUsed, IOContext context) throws IOException {\n      super(bytesUsed);\n      this.id = id;\n      this.pool = pool;\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n            DATA_EXTENSION), context);\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, codecName, version);\n        if (initIndex) {\n          idxOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n              INDEX_EXTENSION), context);\n          CodecUtil.writeHeader(idxOut, codecName, version);\n        } else {\n          idxOut = null;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, datOut, idxOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}