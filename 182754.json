{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","sourceNew":"  @Test\n  public void testStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(slaveURL);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(nDocs+1, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    // re-enable replication\n    slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=enablepoll\";\n    url = new URL(slaveURL);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    slaveQueryRsp = rQuery(nDocs+1, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, slaveQueryResult.getNumFound());   \n  }\n\n","sourceOld":"  @Test\n  public void testStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(slaveURL);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(nDocs+1, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    // re-enable replication\n    slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=enablepoll\";\n    url = new URL(slaveURL);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    slaveQueryRsp = rQuery(nDocs+1, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, slaveQueryResult.getNumFound());   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","sourceNew":"  @Test\n  public void testStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(slaveURL);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(nDocs+1, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    // re-enable replication\n    slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=enablepoll\";\n    url = new URL(slaveURL);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    slaveQueryRsp = rQuery(nDocs+1, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, slaveQueryResult.getNumFound());   \n  }\n\n","sourceOld":"  @Test\n  public void testStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(slaveURL);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(nDocs+1, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    // re-enable replication\n    slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=enablepoll\";\n    url = new URL(slaveURL);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    slaveQueryRsp = rQuery(nDocs+1, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, slaveQueryResult.getNumFound());   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","sourceNew":"  @Test\n  public void testStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(slaveURL);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(nDocs+1, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    // re-enable replication\n    slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=enablepoll\";\n    url = new URL(slaveURL);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    slaveQueryRsp = rQuery(nDocs+1, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, slaveQueryResult.getNumFound());   \n  }\n\n","sourceOld":"  @Test\n  public void testStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(slaveURL);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(nDocs+1, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    // re-enable replication\n    slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=enablepoll\";\n    url = new URL(slaveURL);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    slaveQueryRsp = rQuery(nDocs+1, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, slaveQueryResult.getNumFound());   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bf853f0385a540ee0fb220fd272f2c362432294","date":1311520789,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStopPoll().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","sourceNew":"  private void doTestStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(slaveURL);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(nDocs+1, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    // re-enable replication\n    slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=enablepoll\";\n    url = new URL(slaveURL);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    slaveQueryRsp = rQuery(nDocs+1, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, slaveQueryResult.getNumFound());   \n  }\n\n","sourceOld":"  @Test\n  public void testStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(slaveURL);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(nDocs+1, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    // re-enable replication\n    slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=enablepoll\";\n    url = new URL(slaveURL);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    slaveQueryRsp = rQuery(nDocs+1, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, slaveQueryResult.getNumFound());   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1bf853f0385a540ee0fb220fd272f2c362432294":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1bf853f0385a540ee0fb220fd272f2c362432294"]},"commit2Childs":{"1bf853f0385a540ee0fb220fd272f2c362432294":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["1bf853f0385a540ee0fb220fd272f2c362432294"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}