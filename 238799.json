{"path":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#maybeRefresh().mjava","commits":[{"id":"6e81b0b3c14cf61c8ec366450276ab80654f7d0d","date":1329233774,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#maybeRefresh().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * You must call this, periodically, if you want that {@link #acquire()} will\n   * return refreshed instances.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the refresh; subsequent threads will see\n   * that another thread is already handling refresh and will return\n   * immediately. Note that this means if another thread is already refreshing\n   * then subsequent threads will return right away without waiting for the\n   * refresh to complete.\n   * \n   * <p>\n   * This method returns true if the reference was in fact refreshed, or if the\n   * current reference has no pending changes.\n   */\n  public final boolean maybeRefresh() throws IOException {\n    ensureOpen();\n    // Ensure only 1 thread does reopen at once; other threads just return immediately:\n    if (reopenLock.tryAcquire()) {\n      try {\n        final G reference = acquire();\n        try {\n          G newReference = refreshIfNeeded(reference);\n          if (newReference != null) {\n            assert newReference != reference : \"refreshIfNeeded should return null if refresh wasn't needed\";\n            boolean success = false;\n            try {\n              swapReference(newReference);\n              success = true;\n            } finally {\n              if (!success) {\n                release(newReference);\n              }\n            }\n          }\n        } finally {\n          release(reference);\n        }\n        return true;\n      } finally {\n        reopenLock.release();\n      }\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c380c22ff3b659b2d7412a3335f853d354d17568","date":1329505731,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#maybeRefresh().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#maybeRefresh().mjava","sourceNew":"  /**\n   * You must call this, periodically, if you want that {@link #acquire()} will\n   * return refreshed instances.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the refresh; subsequent threads will see\n   * that another thread is already handling refresh and will return\n   * immediately. Note that this means if another thread is already refreshing\n   * then subsequent threads will return right away without waiting for the\n   * refresh to complete.\n   * \n   * <p>\n   * If this method returns true it means the calling thread either refreshed\n   * or that there were no changes to refresh.  If it returns false it means another\n   * thread is currently refreshing.\n   */\n  public final boolean maybeRefresh() throws IOException {\n    ensureOpen();\n\n    // Ensure only 1 thread does reopen at once; other threads just return immediately:\n    final boolean doTryRefresh = reopenLock.tryAcquire();\n    if (doTryRefresh) {\n      try {\n        final G reference = acquire();\n        try {\n          G newReference = refreshIfNeeded(reference);\n          if (newReference != null) {\n            assert newReference != reference : \"refreshIfNeeded should return null if refresh wasn't needed\";\n            boolean success = false;\n            try {\n              swapReference(newReference);\n              success = true;\n            } finally {\n              if (!success) {\n                release(newReference);\n              }\n            }\n          }\n        } finally {\n          release(reference);\n        }\n        afterRefresh();\n      } finally {\n        reopenLock.release();\n      }\n    }\n\n    return doTryRefresh;\n  }\n\n","sourceOld":"  /**\n   * You must call this, periodically, if you want that {@link #acquire()} will\n   * return refreshed instances.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the refresh; subsequent threads will see\n   * that another thread is already handling refresh and will return\n   * immediately. Note that this means if another thread is already refreshing\n   * then subsequent threads will return right away without waiting for the\n   * refresh to complete.\n   * \n   * <p>\n   * This method returns true if the reference was in fact refreshed, or if the\n   * current reference has no pending changes.\n   */\n  public final boolean maybeRefresh() throws IOException {\n    ensureOpen();\n    // Ensure only 1 thread does reopen at once; other threads just return immediately:\n    if (reopenLock.tryAcquire()) {\n      try {\n        final G reference = acquire();\n        try {\n          G newReference = refreshIfNeeded(reference);\n          if (newReference != null) {\n            assert newReference != reference : \"refreshIfNeeded should return null if refresh wasn't needed\";\n            boolean success = false;\n            try {\n              swapReference(newReference);\n              success = true;\n            } finally {\n              if (!success) {\n                release(newReference);\n              }\n            }\n          }\n        } finally {\n          release(reference);\n        }\n        return true;\n      } finally {\n        reopenLock.release();\n      }\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50cdf7ad2df581562492397453567ab551cc74f9","date":1335885944,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#maybeRefresh().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#maybeRefresh().mjava","sourceNew":"  /**\n   * You must call this (or {@link #maybeRefreshBlocking()}), periodically, if\n   * you want that {@link #acquire()} will return refreshed instances.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the refresh; subsequent threads will see\n   * that another thread is already handling refresh and will return\n   * immediately. Note that this means if another thread is already refreshing\n   * then subsequent threads will return right away without waiting for the\n   * refresh to complete.\n   * \n   * <p>\n   * If this method returns true it means the calling thread either refreshed or\n   * that there were no changes to refresh. If it returns false it means another\n   * thread is currently refreshing.\n   */\n  public final boolean maybeRefresh() throws IOException {\n    ensureOpen();\n\n    // Ensure only 1 thread does reopen at once; other threads just return immediately:\n    final boolean doTryRefresh = refreshLock.tryLock();\n    if (doTryRefresh) {\n      try {\n        doMaybeRefresh();\n      } finally {\n        refreshLock.unlock();\n      }\n    }\n\n    return doTryRefresh;\n  }\n\n","sourceOld":"  /**\n   * You must call this, periodically, if you want that {@link #acquire()} will\n   * return refreshed instances.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the refresh; subsequent threads will see\n   * that another thread is already handling refresh and will return\n   * immediately. Note that this means if another thread is already refreshing\n   * then subsequent threads will return right away without waiting for the\n   * refresh to complete.\n   * \n   * <p>\n   * If this method returns true it means the calling thread either refreshed\n   * or that there were no changes to refresh.  If it returns false it means another\n   * thread is currently refreshing.\n   */\n  public final boolean maybeRefresh() throws IOException {\n    ensureOpen();\n\n    // Ensure only 1 thread does reopen at once; other threads just return immediately:\n    final boolean doTryRefresh = reopenLock.tryAcquire();\n    if (doTryRefresh) {\n      try {\n        final G reference = acquire();\n        try {\n          G newReference = refreshIfNeeded(reference);\n          if (newReference != null) {\n            assert newReference != reference : \"refreshIfNeeded should return null if refresh wasn't needed\";\n            boolean success = false;\n            try {\n              swapReference(newReference);\n              success = true;\n            } finally {\n              if (!success) {\n                release(newReference);\n              }\n            }\n          }\n        } finally {\n          release(reference);\n        }\n        afterRefresh();\n      } finally {\n        reopenLock.release();\n      }\n    }\n\n    return doTryRefresh;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b7a1bc6030c258e47d63eff3455a2b1bbf32683","date":1339494023,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#maybeRefresh().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#maybeRefresh().mjava","sourceNew":"  /**\n   * You must call this (or {@link #maybeRefreshBlocking()}), periodically, if\n   * you want that {@link #acquire()} will return refreshed instances.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the refresh; subsequent threads will see\n   * that another thread is already handling refresh and will return\n   * immediately. Note that this means if another thread is already refreshing\n   * then subsequent threads will return right away without waiting for the\n   * refresh to complete.\n   * \n   * <p>\n   * If this method returns true it means the calling thread either refreshed or\n   * that there were no changes to refresh. If it returns false it means another\n   * thread is currently refreshing.\n   */\n  public final boolean maybeRefresh() throws IOException {\n    ensureOpen();\n\n    // Ensure only 1 thread does refresh at once; other threads just return immediately:\n    final boolean doTryRefresh = refreshLock.tryLock();\n    if (doTryRefresh) {\n      try {\n        doMaybeRefresh();\n      } finally {\n        refreshLock.unlock();\n      }\n    }\n\n    return doTryRefresh;\n  }\n\n","sourceOld":"  /**\n   * You must call this (or {@link #maybeRefreshBlocking()}), periodically, if\n   * you want that {@link #acquire()} will return refreshed instances.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the refresh; subsequent threads will see\n   * that another thread is already handling refresh and will return\n   * immediately. Note that this means if another thread is already refreshing\n   * then subsequent threads will return right away without waiting for the\n   * refresh to complete.\n   * \n   * <p>\n   * If this method returns true it means the calling thread either refreshed or\n   * that there were no changes to refresh. If it returns false it means another\n   * thread is currently refreshing.\n   */\n  public final boolean maybeRefresh() throws IOException {\n    ensureOpen();\n\n    // Ensure only 1 thread does reopen at once; other threads just return immediately:\n    final boolean doTryRefresh = refreshLock.tryLock();\n    if (doTryRefresh) {\n      try {\n        doMaybeRefresh();\n      } finally {\n        refreshLock.unlock();\n      }\n    }\n\n    return doTryRefresh;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6d8a16d4f11021a8b59ff7a66277da1fda4a3ef","date":1351890270,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#maybeRefresh().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#maybeRefresh().mjava","sourceNew":"  /**\n   * You must call this (or {@link #maybeRefreshBlocking()}), periodically, if\n   * you want that {@link #acquire()} will return refreshed instances.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the refresh; subsequent threads will see\n   * that another thread is already handling refresh and will return\n   * immediately. Note that this means if another thread is already refreshing\n   * then subsequent threads will return right away without waiting for the\n   * refresh to complete.\n   * \n   * <p>\n   * If this method returns true it means the calling thread either refreshed or\n   * that there were no changes to refresh. If it returns false it means another\n   * thread is currently refreshing.\n   * </p>\n   * @throws IOException if refreshing the resource causes an {@link IOException}\n   * @throws AlreadyClosedException if the reference manager has been {@link #close() closed}. \n   */\n  public final boolean maybeRefresh() throws IOException {\n    ensureOpen();\n\n    // Ensure only 1 thread does refresh at once; other threads just return immediately:\n    final boolean doTryRefresh = refreshLock.tryLock();\n    if (doTryRefresh) {\n      try {\n        doMaybeRefresh();\n      } finally {\n        refreshLock.unlock();\n      }\n    }\n\n    return doTryRefresh;\n  }\n\n","sourceOld":"  /**\n   * You must call this (or {@link #maybeRefreshBlocking()}), periodically, if\n   * you want that {@link #acquire()} will return refreshed instances.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the refresh; subsequent threads will see\n   * that another thread is already handling refresh and will return\n   * immediately. Note that this means if another thread is already refreshing\n   * then subsequent threads will return right away without waiting for the\n   * refresh to complete.\n   * \n   * <p>\n   * If this method returns true it means the calling thread either refreshed or\n   * that there were no changes to refresh. If it returns false it means another\n   * thread is currently refreshing.\n   */\n  public final boolean maybeRefresh() throws IOException {\n    ensureOpen();\n\n    // Ensure only 1 thread does refresh at once; other threads just return immediately:\n    final boolean doTryRefresh = refreshLock.tryLock();\n    if (doTryRefresh) {\n      try {\n        doMaybeRefresh();\n      } finally {\n        refreshLock.unlock();\n      }\n    }\n\n    return doTryRefresh;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#maybeRefresh().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#maybeRefresh().mjava","sourceNew":"  /**\n   * You must call this (or {@link #maybeRefreshBlocking()}), periodically, if\n   * you want that {@link #acquire()} will return refreshed instances.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the refresh; subsequent threads will see\n   * that another thread is already handling refresh and will return\n   * immediately. Note that this means if another thread is already refreshing\n   * then subsequent threads will return right away without waiting for the\n   * refresh to complete.\n   * \n   * <p>\n   * If this method returns true it means the calling thread either refreshed or\n   * that there were no changes to refresh. If it returns false it means another\n   * thread is currently refreshing.\n   * </p>\n   * @throws IOException if refreshing the resource causes an {@link IOException}\n   * @throws AlreadyClosedException if the reference manager has been {@link #close() closed}. \n   */\n  public final boolean maybeRefresh() throws IOException {\n    ensureOpen();\n\n    // Ensure only 1 thread does refresh at once; other threads just return immediately:\n    final boolean doTryRefresh = refreshLock.tryLock();\n    if (doTryRefresh) {\n      try {\n        doMaybeRefresh();\n      } finally {\n        refreshLock.unlock();\n      }\n    }\n\n    return doTryRefresh;\n  }\n\n","sourceOld":"  /**\n   * You must call this (or {@link #maybeRefreshBlocking()}), periodically, if\n   * you want that {@link #acquire()} will return refreshed instances.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the refresh; subsequent threads will see\n   * that another thread is already handling refresh and will return\n   * immediately. Note that this means if another thread is already refreshing\n   * then subsequent threads will return right away without waiting for the\n   * refresh to complete.\n   * \n   * <p>\n   * If this method returns true it means the calling thread either refreshed or\n   * that there were no changes to refresh. If it returns false it means another\n   * thread is currently refreshing.\n   * </p>\n   * @throws IOException if refreshing the resource causes an {@link IOException}\n   * @throws AlreadyClosedException if the reference manager has been {@link #close() closed}. \n   */\n  public final boolean maybeRefresh() throws IOException {\n    ensureOpen();\n\n    // Ensure only 1 thread does refresh at once; other threads just return immediately:\n    final boolean doTryRefresh = refreshLock.tryLock();\n    if (doTryRefresh) {\n      try {\n        doMaybeRefresh();\n      } finally {\n        refreshLock.unlock();\n      }\n    }\n\n    return doTryRefresh;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#maybeRefresh().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#maybeRefresh().mjava","sourceNew":"  /**\n   * You must call this (or {@link #maybeRefreshBlocking()}), periodically, if\n   * you want that {@link #acquire()} will return refreshed instances.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the refresh; subsequent threads will see\n   * that another thread is already handling refresh and will return\n   * immediately. Note that this means if another thread is already refreshing\n   * then subsequent threads will return right away without waiting for the\n   * refresh to complete.\n   * \n   * <p>\n   * If this method returns true it means the calling thread either refreshed or\n   * that there were no changes to refresh. If it returns false it means another\n   * thread is currently refreshing.\n   * </p>\n   * @throws IOException if refreshing the resource causes an {@link IOException}\n   * @throws AlreadyClosedException if the reference manager has been {@link #close() closed}. \n   */\n  public final boolean maybeRefresh() throws IOException {\n    ensureOpen();\n\n    // Ensure only 1 thread does refresh at once; other threads just return immediately:\n    final boolean doTryRefresh = refreshLock.tryLock();\n    if (doTryRefresh) {\n      try {\n        doMaybeRefresh();\n      } finally {\n        refreshLock.unlock();\n      }\n    }\n\n    return doTryRefresh;\n  }\n\n","sourceOld":"  /**\n   * You must call this (or {@link #maybeRefreshBlocking()}), periodically, if\n   * you want that {@link #acquire()} will return refreshed instances.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the refresh; subsequent threads will see\n   * that another thread is already handling refresh and will return\n   * immediately. Note that this means if another thread is already refreshing\n   * then subsequent threads will return right away without waiting for the\n   * refresh to complete.\n   * \n   * <p>\n   * If this method returns true it means the calling thread either refreshed or\n   * that there were no changes to refresh. If it returns false it means another\n   * thread is currently refreshing.\n   * </p>\n   * @throws IOException if refreshing the resource causes an {@link IOException}\n   * @throws AlreadyClosedException if the reference manager has been {@link #close() closed}. \n   */\n  public final boolean maybeRefresh() throws IOException {\n    ensureOpen();\n\n    // Ensure only 1 thread does refresh at once; other threads just return immediately:\n    final boolean doTryRefresh = refreshLock.tryLock();\n    if (doTryRefresh) {\n      try {\n        doMaybeRefresh();\n      } finally {\n        refreshLock.unlock();\n      }\n    }\n\n    return doTryRefresh;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c380c22ff3b659b2d7412a3335f853d354d17568":["6e81b0b3c14cf61c8ec366450276ab80654f7d0d"],"b6d8a16d4f11021a8b59ff7a66277da1fda4a3ef":["8b7a1bc6030c258e47d63eff3455a2b1bbf32683"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["b6d8a16d4f11021a8b59ff7a66277da1fda4a3ef"],"8b7a1bc6030c258e47d63eff3455a2b1bbf32683":["50cdf7ad2df581562492397453567ab551cc74f9"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["b6d8a16d4f11021a8b59ff7a66277da1fda4a3ef"],"50cdf7ad2df581562492397453567ab551cc74f9":["c380c22ff3b659b2d7412a3335f853d354d17568"],"6e81b0b3c14cf61c8ec366450276ab80654f7d0d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"c380c22ff3b659b2d7412a3335f853d354d17568":["50cdf7ad2df581562492397453567ab551cc74f9"],"b6d8a16d4f11021a8b59ff7a66277da1fda4a3ef":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e81b0b3c14cf61c8ec366450276ab80654f7d0d"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"8b7a1bc6030c258e47d63eff3455a2b1bbf32683":["b6d8a16d4f11021a8b59ff7a66277da1fda4a3ef"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"50cdf7ad2df581562492397453567ab551cc74f9":["8b7a1bc6030c258e47d63eff3455a2b1bbf32683"],"6e81b0b3c14cf61c8ec366450276ab80654f7d0d":["c380c22ff3b659b2d7412a3335f853d354d17568"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}