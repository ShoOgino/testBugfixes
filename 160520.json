{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","commits":[{"id":"80ef99614729c6d6fb7f8a9055a7a442efa87cf8","date":1464951274,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupTestCases() {\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e511b092029d56e0d4e30204fba8509c1c2647b6","date":1467838965,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","sourceNew":"  @BeforeClass\n  public static void setupTestCases() {\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupTestCases() {\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8381eb1cd44d2e0defb52130de3295a576ac1e7b","date":1467840340,"type":3,"author":"Chris Hostetter","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","sourceNew":"  @BeforeClass\n  public static void setupTestCases() {\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupTestCases() {\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc16166e6be86e96c196f31854d639cd63cb57dd","date":1474877689,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","sourceNew":"  @BeforeClass\n  public static void setupTestCases() {\n\n    initClassLogLevels();\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupTestCases() {\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":["9799ebcab48102552d92f7807965a91fb6e116f7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","sourceNew":"  @BeforeClass\n  public static void setupTestCases() {\n\n    initClassLogLevels();\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupTestCases() {\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupTestCases() {\n\n    initClassLogLevels();\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ea06b0afe55bb7add9a9a04d27e87c497480e33","date":1487775171,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","sourceNew":"  @BeforeClass\n  public static void setupTestCases() {\n\n    initClassLogLevels();\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupTestCases() {\n\n    initClassLogLevels();\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"767d389403b701039ee599ec2ac8a838f45d8cb7","date":1494468363,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","sourceNew":"  @BeforeClass\n  public static void setupTestCases() {\n\n    initClassLogLevels();\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupTestCases() {\n\n    initClassLogLevels();\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b31ebc7a867ddea79d438a8fca876a94e644d11a","date":1494496172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","sourceNew":"  @BeforeClass\n  public static void setupTestCases() {\n\n    initClassLogLevels();\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupTestCases() {\n\n    initClassLogLevels();\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","sourceNew":"  @BeforeClass\n  public static void setupTestCases() {\n\n    initClassLogLevels();\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupTestCases() {\n\n    initClassLogLevels();\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"596226608eb15ccf94c77978c3aeda172973d10b","date":1504115915,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","sourceNew":"  @BeforeClass\n  public static void setupTestCases() {\n    initialRootLogLevel = StartupLoggingUtils.getLogLevelString();\n    initClassLogLevels();\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupTestCases() {\n\n    initClassLogLevels();\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df00ac20ec618ed997bacca597432d686193362d","date":1504183645,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","sourceNew":"  @BeforeClass\n  public static void setupTestCases() {\n    initialRootLogLevel = StartupLoggingUtils.getLogLevelString();\n    initClassLogLevels();\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupTestCases() {\n\n    initClassLogLevels();\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","sourceNew":"  @BeforeClass\n  public static void setupTestCases() {\n    initialRootLogLevel = StartupLoggingUtils.getLogLevelString();\n    initClassLogLevels();\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupTestCases() {\n\n    initClassLogLevels();\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af845fe4d504b5dfbfe7e64542f57d9456e17018","date":1513376377,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","sourceNew":"  @BeforeClass\n  public static void setupTestCases() {\n    initialRootLogLevel = StartupLoggingUtils.getLogLevelString();\n    initClassLogLevels();\n    resetExceptionIgnores();\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupTestCases() {\n    initialRootLogLevel = StartupLoggingUtils.getLogLevelString();\n    initClassLogLevels();\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","sourceNew":"  @BeforeClass\n  public static void setupTestCases() {\n    initialRootLogLevel = StartupLoggingUtils.getLogLevelString();\n    initClassLogLevels();\n    resetExceptionIgnores();\n    \n    testExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n        15L, TimeUnit.SECONDS,\n        new SynchronousQueue<>(),\n        new SolrjNamedThreadFactory(\"testExecutor\"),\n        true);\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"solr.zkclienttimeout\", \"90000\"); \n    \n    System.setProperty(\"solr.httpclient.retries\", \"1\");\n    System.setProperty(\"solr.retries.on.forward\", \"1\");\n    System.setProperty(\"solr.retries.to.followers\", \"1\"); \n    \n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupTestCases() {\n    initialRootLogLevel = StartupLoggingUtils.getLogLevelString();\n    initClassLogLevels();\n    resetExceptionIgnores();\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","sourceNew":"  @BeforeClass\n  public static void setupTestCases() {\n    initialRootLogLevel = StartupLoggingUtils.getLogLevelString();\n    initClassLogLevels();\n    resetExceptionIgnores();\n    \n    testExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n        15L, TimeUnit.SECONDS,\n        new SynchronousQueue<>(),\n        new SolrjNamedThreadFactory(\"testExecutor\"),\n        true);\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"solr.zkclienttimeout\", \"90000\"); \n    \n    System.setProperty(\"solr.httpclient.retries\", \"1\");\n    System.setProperty(\"solr.retries.on.forward\", \"1\");\n    System.setProperty(\"solr.retries.to.followers\", \"1\"); \n    \n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n\n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    Http2SolrClient.setDefaultSSLConfig(sslConfig.buildClientSSLConfig());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupTestCases() {\n    initialRootLogLevel = StartupLoggingUtils.getLogLevelString();\n    initClassLogLevels();\n    resetExceptionIgnores();\n    \n    testExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n        15L, TimeUnit.SECONDS,\n        new SynchronousQueue<>(),\n        new SolrjNamedThreadFactory(\"testExecutor\"),\n        true);\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"solr.zkclienttimeout\", \"90000\"); \n    \n    System.setProperty(\"solr.httpclient.retries\", \"1\");\n    System.setProperty(\"solr.retries.on.forward\", \"1\");\n    System.setProperty(\"solr.retries.to.followers\", \"1\"); \n    \n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b09263a529ccc99634e455697c798287b964dcb","date":1552241100,"type":3,"author":"erick","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","sourceNew":"  @BeforeClass\n  public static void setupTestCases() {\n    initialRootLogLevel = StartupLoggingUtils.getLogLevelString();\n    initClassLogLevels();\n    resetExceptionIgnores();\n    \n    testExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n        15L, TimeUnit.SECONDS,\n        new SynchronousQueue<>(),\n        new SolrjNamedThreadFactory(\"testExecutor\"),\n        true);\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"solr.zkclienttimeout\", \"90000\"); \n    \n    System.setProperty(\"solr.httpclient.retries\", \"1\");\n    System.setProperty(\"solr.retries.on.forward\", \"1\");\n    System.setProperty(\"solr.retries.to.followers\", \"1\");\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n\n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    Http2SolrClient.setDefaultSSLConfig(sslConfig.buildClientSSLConfig());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupTestCases() {\n    initialRootLogLevel = StartupLoggingUtils.getLogLevelString();\n    initClassLogLevels();\n    resetExceptionIgnores();\n    \n    testExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n        15L, TimeUnit.SECONDS,\n        new SynchronousQueue<>(),\n        new SolrjNamedThreadFactory(\"testExecutor\"),\n        true);\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"solr.zkclienttimeout\", \"90000\"); \n    \n    System.setProperty(\"solr.httpclient.retries\", \"1\");\n    System.setProperty(\"solr.retries.on.forward\", \"1\");\n    System.setProperty(\"solr.retries.to.followers\", \"1\"); \n    \n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n\n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    Http2SolrClient.setDefaultSSLConfig(sslConfig.buildClientSSLConfig());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","sourceNew":"  @BeforeClass\n  public static void setupTestCases() {\n    initialRootLogLevel = StartupLoggingUtils.getLogLevelString();\n    initClassLogLevels();\n    resetExceptionIgnores();\n    \n    testExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n        15L, TimeUnit.SECONDS,\n        new SynchronousQueue<>(),\n        new SolrjNamedThreadFactory(\"testExecutor\"),\n        true);\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"solr.zkclienttimeout\", \"90000\"); \n    \n    System.setProperty(\"solr.httpclient.retries\", \"1\");\n    System.setProperty(\"solr.retries.on.forward\", \"1\");\n    System.setProperty(\"solr.retries.to.followers\", \"1\");\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    System.setProperty(ZK_WHITELIST_PROPERTY, \"*\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n\n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    Http2SolrClient.setDefaultSSLConfig(sslConfig.buildClientSSLConfig());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupTestCases() {\n    initialRootLogLevel = StartupLoggingUtils.getLogLevelString();\n    initClassLogLevels();\n    resetExceptionIgnores();\n    \n    testExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n        15L, TimeUnit.SECONDS,\n        new SynchronousQueue<>(),\n        new SolrjNamedThreadFactory(\"testExecutor\"),\n        true);\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"solr.zkclienttimeout\", \"90000\"); \n    \n    System.setProperty(\"solr.httpclient.retries\", \"1\");\n    System.setProperty(\"solr.retries.on.forward\", \"1\");\n    System.setProperty(\"solr.retries.to.followers\", \"1\");\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n\n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    Http2SolrClient.setDefaultSSLConfig(sslConfig.buildClientSSLConfig());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9799ebcab48102552d92f7807965a91fb6e116f7","date":1564676118,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","sourceNew":"  @BeforeClass\n  public static void setupTestCases() {\n    initialRootLogLevel = StartupLoggingUtils.getLogLevelString();\n    initClassLogLevels();\n    resetExceptionIgnores();\n    \n    testExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n        15L, TimeUnit.SECONDS,\n        new SynchronousQueue<>(),\n        new SolrjNamedThreadFactory(\"testExecutor\"),\n        true);\n\n    // not strictly needed by this class at this point in the control lifecycle, but for\n    // backcompat create it now in case any third party tests expect initCoreDataDir to be\n    // non-null after calling setupTestCases()\n    initAndGetDataDir();\n\n    System.setProperty(\"solr.zkclienttimeout\", \"90000\"); \n    \n    System.setProperty(\"solr.httpclient.retries\", \"1\");\n    System.setProperty(\"solr.retries.on.forward\", \"1\");\n    System.setProperty(\"solr.retries.to.followers\", \"1\");\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    System.setProperty(ZK_WHITELIST_PROPERTY, \"*\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n\n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    Http2SolrClient.setDefaultSSLConfig(sslConfig.buildClientSSLConfig());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupTestCases() {\n    initialRootLogLevel = StartupLoggingUtils.getLogLevelString();\n    initClassLogLevels();\n    resetExceptionIgnores();\n    \n    testExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n        15L, TimeUnit.SECONDS,\n        new SynchronousQueue<>(),\n        new SolrjNamedThreadFactory(\"testExecutor\"),\n        true);\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"solr.zkclienttimeout\", \"90000\"); \n    \n    System.setProperty(\"solr.httpclient.retries\", \"1\");\n    System.setProperty(\"solr.retries.on.forward\", \"1\");\n    System.setProperty(\"solr.retries.to.followers\", \"1\");\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    System.setProperty(ZK_WHITELIST_PROPERTY, \"*\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n\n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    Http2SolrClient.setDefaultSSLConfig(sslConfig.buildClientSSLConfig());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","fc16166e6be86e96c196f31854d639cd63cb57dd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","sourceNew":"  @BeforeClass\n  public static void setupTestCases() {\n    initialRootLogLevel = StartupLoggingUtils.getLogLevelString();\n    initClassLogLevels();\n    resetExceptionIgnores();\n    \n    testExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n        15L, TimeUnit.SECONDS,\n        new SynchronousQueue<>(),\n        new SolrjNamedThreadFactory(\"testExecutor\"),\n        true);\n\n    // not strictly needed by this class at this point in the control lifecycle, but for\n    // backcompat create it now in case any third party tests expect initCoreDataDir to be\n    // non-null after calling setupTestCases()\n    initAndGetDataDir();\n\n    System.setProperty(\"solr.zkclienttimeout\", \"90000\"); \n    \n    System.setProperty(\"solr.httpclient.retries\", \"1\");\n    System.setProperty(\"solr.retries.on.forward\", \"1\");\n    System.setProperty(\"solr.retries.to.followers\", \"1\");\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    System.setProperty(ZK_WHITELIST_PROPERTY, \"*\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n\n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    Http2SolrClient.setDefaultSSLConfig(sslConfig.buildClientSSLConfig());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupTestCases() {\n    initialRootLogLevel = StartupLoggingUtils.getLogLevelString();\n    initClassLogLevels();\n    resetExceptionIgnores();\n    \n    testExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n        15L, TimeUnit.SECONDS,\n        new SynchronousQueue<>(),\n        new SolrjNamedThreadFactory(\"testExecutor\"),\n        true);\n\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"solr.zkclienttimeout\", \"90000\"); \n    \n    System.setProperty(\"solr.httpclient.retries\", \"1\");\n    System.setProperty(\"solr.retries.on.forward\", \"1\");\n    System.setProperty(\"solr.retries.to.followers\", \"1\");\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    System.setProperty(ZK_WHITELIST_PROPERTY, \"*\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n\n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    Http2SolrClient.setDefaultSSLConfig(sslConfig.buildClientSSLConfig());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03fe76cc6b7f8dc5beaa3b91ea9b8475bc7cd77b","date":1580123268,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","sourceNew":"  @BeforeClass\n  public static void setupTestCases() {\n    initialRootLogLevel = StartupLoggingUtils.getLogLevelString();\n    initClassLogLevels();\n    resetExceptionIgnores();\n    \n    testExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n        15L, TimeUnit.SECONDS,\n        new SynchronousQueue<>(),\n        new SolrjNamedThreadFactory(\"testExecutor\"),\n        true);\n\n    // set solr.install.dir needed by some test configs outside of the test sandbox (!)\n    System.setProperty(\"solr.install.dir\", ExternalPaths.SOURCE_HOME);\n    // not strictly needed by this class at this point in the control lifecycle, but for\n    // backcompat create it now in case any third party tests expect initCoreDataDir to be\n    // non-null after calling setupTestCases()\n    initAndGetDataDir();\n\n    System.setProperty(\"solr.zkclienttimeout\", \"90000\"); \n    \n    System.setProperty(\"solr.httpclient.retries\", \"1\");\n    System.setProperty(\"solr.retries.on.forward\", \"1\");\n    System.setProperty(\"solr.retries.to.followers\", \"1\");\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    System.setProperty(ZK_WHITELIST_PROPERTY, \"*\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n\n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    Http2SolrClient.setDefaultSSLConfig(sslConfig.buildClientSSLConfig());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupTestCases() {\n    initialRootLogLevel = StartupLoggingUtils.getLogLevelString();\n    initClassLogLevels();\n    resetExceptionIgnores();\n    \n    testExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n        15L, TimeUnit.SECONDS,\n        new SynchronousQueue<>(),\n        new SolrjNamedThreadFactory(\"testExecutor\"),\n        true);\n\n    // not strictly needed by this class at this point in the control lifecycle, but for\n    // backcompat create it now in case any third party tests expect initCoreDataDir to be\n    // non-null after calling setupTestCases()\n    initAndGetDataDir();\n\n    System.setProperty(\"solr.zkclienttimeout\", \"90000\"); \n    \n    System.setProperty(\"solr.httpclient.retries\", \"1\");\n    System.setProperty(\"solr.retries.on.forward\", \"1\");\n    System.setProperty(\"solr.retries.to.followers\", \"1\");\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    System.setProperty(ZK_WHITELIST_PROPERTY, \"*\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n\n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    Http2SolrClient.setDefaultSSLConfig(sslConfig.buildClientSSLConfig());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b409047f69fb85704c506753bc23a37d7ad37b54","date":1582574830,"type":3,"author":"Mike","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","sourceNew":"  @BeforeClass\n  public static void setupTestCases() {\n    initialRootLogLevel = StartupLoggingUtils.getLogLevelString();\n    initClassLogLevels();\n    resetExceptionIgnores();\n    \n    testExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n        15L, TimeUnit.SECONDS,\n        new SynchronousQueue<>(),\n        new SolrjNamedThreadFactory(\"testExecutor\"),\n        true);\n\n    // set solr.install.dir needed by some test configs outside of the test sandbox (!)\n    System.setProperty(\"solr.install.dir\", ExternalPaths.SOURCE_HOME);\n    // not strictly needed by this class at this point in the control lifecycle, but for\n    // backcompat create it now in case any third party tests expect initCoreDataDir to be\n    // non-null after calling setupTestCases()\n    initAndGetDataDir();\n\n    System.setProperty(\"solr.zkclienttimeout\", \"90000\"); \n    \n    System.setProperty(\"solr.httpclient.retries\", \"1\");\n    System.setProperty(\"solr.retries.on.forward\", \"1\");\n    System.setProperty(\"solr.retries.to.followers\", \"1\");\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n\n    System.setProperty(\"pkiHandlerPrivateKeyPath\", SolrTestCaseJ4.class.getClassLoader().getResource(\"cryptokeys/priv_key512_pkcs8.pem\").toExternalForm());\n    System.setProperty(\"pkiHandlerPublicKeyPath\", SolrTestCaseJ4.class.getClassLoader().getResource(\"cryptokeys/pub_key512.der\").toExternalForm());\n\n    System.setProperty(ZK_WHITELIST_PROPERTY, \"*\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n\n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    Http2SolrClient.setDefaultSSLConfig(sslConfig.buildClientSSLConfig());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupTestCases() {\n    initialRootLogLevel = StartupLoggingUtils.getLogLevelString();\n    initClassLogLevels();\n    resetExceptionIgnores();\n    \n    testExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n        15L, TimeUnit.SECONDS,\n        new SynchronousQueue<>(),\n        new SolrjNamedThreadFactory(\"testExecutor\"),\n        true);\n\n    // set solr.install.dir needed by some test configs outside of the test sandbox (!)\n    System.setProperty(\"solr.install.dir\", ExternalPaths.SOURCE_HOME);\n    // not strictly needed by this class at this point in the control lifecycle, but for\n    // backcompat create it now in case any third party tests expect initCoreDataDir to be\n    // non-null after calling setupTestCases()\n    initAndGetDataDir();\n\n    System.setProperty(\"solr.zkclienttimeout\", \"90000\"); \n    \n    System.setProperty(\"solr.httpclient.retries\", \"1\");\n    System.setProperty(\"solr.retries.on.forward\", \"1\");\n    System.setProperty(\"solr.retries.to.followers\", \"1\");\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n    System.setProperty(ZK_WHITELIST_PROPERTY, \"*\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n\n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    Http2SolrClient.setDefaultSSLConfig(sslConfig.buildClientSSLConfig());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e856e5ac973044540959acff90fa900278d2692","date":1585275350,"type":3,"author":"Andy Throgmorton","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","sourceNew":"  @BeforeClass\n  public static void setupTestCases() {\n    initialRootLogLevel = StartupLoggingUtils.getLogLevelString();\n    initClassLogLevels();\n    resetExceptionIgnores();\n    \n    testExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n        15L, TimeUnit.SECONDS,\n        new SynchronousQueue<>(),\n        new SolrjNamedThreadFactory(\"testExecutor\"),\n        true);\n\n    // set solr.install.dir needed by some test configs outside of the test sandbox (!)\n    System.setProperty(\"solr.install.dir\", ExternalPaths.SOURCE_HOME);\n    // not strictly needed by this class at this point in the control lifecycle, but for\n    // backcompat create it now in case any third party tests expect initCoreDataDir to be\n    // non-null after calling setupTestCases()\n    initAndGetDataDir();\n\n    System.setProperty(\"solr.zkclienttimeout\", \"90000\"); \n    \n    System.setProperty(\"solr.httpclient.retries\", \"1\");\n    System.setProperty(\"solr.retries.on.forward\", \"1\");\n    System.setProperty(\"solr.retries.to.followers\", \"1\");\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n\n    System.setProperty(\"pkiHandlerPrivateKeyPath\", SolrTestCaseJ4.class.getClassLoader().getResource(\"cryptokeys/priv_key512_pkcs8.pem\").toExternalForm());\n    System.setProperty(\"pkiHandlerPublicKeyPath\", SolrTestCaseJ4.class.getClassLoader().getResource(\"cryptokeys/pub_key512.der\").toExternalForm());\n\n    System.setProperty(ZK_WHITELIST_PROPERTY, \"*\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n\n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SocketFactoryRegistryProvider appropriately\n    HttpClientUtil.setSocketFactoryRegistryProvider(sslConfig.buildClientSocketFactoryRegistryProvider());\n    Http2SolrClient.setDefaultSSLConfig(sslConfig.buildClientSSLConfig());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupTestCases() {\n    initialRootLogLevel = StartupLoggingUtils.getLogLevelString();\n    initClassLogLevels();\n    resetExceptionIgnores();\n    \n    testExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n        15L, TimeUnit.SECONDS,\n        new SynchronousQueue<>(),\n        new SolrjNamedThreadFactory(\"testExecutor\"),\n        true);\n\n    // set solr.install.dir needed by some test configs outside of the test sandbox (!)\n    System.setProperty(\"solr.install.dir\", ExternalPaths.SOURCE_HOME);\n    // not strictly needed by this class at this point in the control lifecycle, but for\n    // backcompat create it now in case any third party tests expect initCoreDataDir to be\n    // non-null after calling setupTestCases()\n    initAndGetDataDir();\n\n    System.setProperty(\"solr.zkclienttimeout\", \"90000\"); \n    \n    System.setProperty(\"solr.httpclient.retries\", \"1\");\n    System.setProperty(\"solr.retries.on.forward\", \"1\");\n    System.setProperty(\"solr.retries.to.followers\", \"1\");\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n\n    System.setProperty(\"pkiHandlerPrivateKeyPath\", SolrTestCaseJ4.class.getClassLoader().getResource(\"cryptokeys/priv_key512_pkcs8.pem\").toExternalForm());\n    System.setProperty(\"pkiHandlerPublicKeyPath\", SolrTestCaseJ4.class.getClassLoader().getResource(\"cryptokeys/pub_key512.der\").toExternalForm());\n\n    System.setProperty(ZK_WHITELIST_PROPERTY, \"*\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n\n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    Http2SolrClient.setDefaultSSLConfig(sslConfig.buildClientSSLConfig());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","sourceNew":"  @BeforeClass\n  public static void setupTestCases() {\n    initialRootLogLevel = StartupLoggingUtils.getLogLevelString();\n    initClassLogLevels();\n    resetExceptionIgnores();\n    \n    testExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n        15L, TimeUnit.SECONDS,\n        new SynchronousQueue<>(),\n        new SolrNamedThreadFactory(\"testExecutor\"),\n        true);\n\n    // set solr.install.dir needed by some test configs outside of the test sandbox (!)\n    System.setProperty(\"solr.install.dir\", ExternalPaths.SOURCE_HOME);\n    // not strictly needed by this class at this point in the control lifecycle, but for\n    // backcompat create it now in case any third party tests expect initCoreDataDir to be\n    // non-null after calling setupTestCases()\n    initAndGetDataDir();\n\n    System.setProperty(\"solr.zkclienttimeout\", \"90000\"); \n    \n    System.setProperty(\"solr.httpclient.retries\", \"1\");\n    System.setProperty(\"solr.retries.on.forward\", \"1\");\n    System.setProperty(\"solr.retries.to.followers\", \"1\");\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n\n    System.setProperty(\"pkiHandlerPrivateKeyPath\", SolrTestCaseJ4.class.getClassLoader().getResource(\"cryptokeys/priv_key512_pkcs8.pem\").toExternalForm());\n    System.setProperty(\"pkiHandlerPublicKeyPath\", SolrTestCaseJ4.class.getClassLoader().getResource(\"cryptokeys/pub_key512.der\").toExternalForm());\n\n    System.setProperty(ZK_WHITELIST_PROPERTY, \"*\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n\n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SocketFactoryRegistryProvider appropriately\n    HttpClientUtil.setSocketFactoryRegistryProvider(sslConfig.buildClientSocketFactoryRegistryProvider());\n    Http2SolrClient.setDefaultSSLConfig(sslConfig.buildClientSSLConfig());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupTestCases() {\n    initialRootLogLevel = StartupLoggingUtils.getLogLevelString();\n    initClassLogLevels();\n    resetExceptionIgnores();\n    \n    testExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n        15L, TimeUnit.SECONDS,\n        new SynchronousQueue<>(),\n        new SolrjNamedThreadFactory(\"testExecutor\"),\n        true);\n\n    // set solr.install.dir needed by some test configs outside of the test sandbox (!)\n    System.setProperty(\"solr.install.dir\", ExternalPaths.SOURCE_HOME);\n    // not strictly needed by this class at this point in the control lifecycle, but for\n    // backcompat create it now in case any third party tests expect initCoreDataDir to be\n    // non-null after calling setupTestCases()\n    initAndGetDataDir();\n\n    System.setProperty(\"solr.zkclienttimeout\", \"90000\"); \n    \n    System.setProperty(\"solr.httpclient.retries\", \"1\");\n    System.setProperty(\"solr.retries.on.forward\", \"1\");\n    System.setProperty(\"solr.retries.to.followers\", \"1\");\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n\n    System.setProperty(\"pkiHandlerPrivateKeyPath\", SolrTestCaseJ4.class.getClassLoader().getResource(\"cryptokeys/priv_key512_pkcs8.pem\").toExternalForm());\n    System.setProperty(\"pkiHandlerPublicKeyPath\", SolrTestCaseJ4.class.getClassLoader().getResource(\"cryptokeys/pub_key512.der\").toExternalForm());\n\n    System.setProperty(ZK_WHITELIST_PROPERTY, \"*\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n\n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SocketFactoryRegistryProvider appropriately\n    HttpClientUtil.setSocketFactoryRegistryProvider(sslConfig.buildClientSocketFactoryRegistryProvider());\n    Http2SolrClient.setDefaultSSLConfig(sslConfig.buildClientSSLConfig());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c38d3299f414132db022cec9d60b2dafc244a7c3","date":1597046674,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","sourceNew":"  @BeforeClass\n  public static void setupTestCases() {\n    initialRootLogLevel = StartupLoggingUtils.getLogLevelString();\n    initClassLogLevels();\n    resetExceptionIgnores();\n    \n    testExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n        15L, TimeUnit.SECONDS,\n        new SynchronousQueue<>(),\n        new SolrNamedThreadFactory(\"testExecutor\"),\n        true);\n\n    // set solr.install.dir needed by some test configs outside of the test sandbox (!)\n    System.setProperty(\"solr.install.dir\", ExternalPaths.SOURCE_HOME);\n    // not strictly needed by this class at this point in the control lifecycle, but for\n    // backcompat create it now in case any third party tests expect initCoreDataDir to be\n    // non-null after calling setupTestCases()\n    initAndGetDataDir();\n\n    System.setProperty(\"solr.zkclienttimeout\", \"90000\"); \n    \n    System.setProperty(\"solr.httpclient.retries\", \"1\");\n    System.setProperty(\"solr.retries.on.forward\", \"1\");\n    System.setProperty(\"solr.retries.to.followers\", \"1\");\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n\n    System.setProperty(\"pkiHandlerPrivateKeyPath\", SolrTestCaseJ4.class.getClassLoader().getResource(\"cryptokeys/priv_key512_pkcs8.pem\").toExternalForm());\n    System.setProperty(\"pkiHandlerPublicKeyPath\", SolrTestCaseJ4.class.getClassLoader().getResource(\"cryptokeys/pub_key512.der\").toExternalForm());\n\n    System.setProperty(ZK_WHITELIST_PROPERTY, \"*\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n\n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SocketFactoryRegistryProvider appropriately\n    HttpClientUtil.setSocketFactoryRegistryProvider(sslConfig.buildClientSocketFactoryRegistryProvider());\n    Http2SolrClient.setDefaultSSLConfig(sslConfig.buildClientSSLConfig());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupTestCases() {\n    initialRootLogLevel = StartupLoggingUtils.getLogLevelString();\n    initClassLogLevels();\n    resetExceptionIgnores();\n    \n    testExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n        15L, TimeUnit.SECONDS,\n        new SynchronousQueue<>(),\n        new SolrNamedThreadFactory(\"testExecutor\"),\n        true);\n\n    // set solr.install.dir needed by some test configs outside of the test sandbox (!)\n    System.setProperty(\"solr.install.dir\", ExternalPaths.SOURCE_HOME);\n    // not strictly needed by this class at this point in the control lifecycle, but for\n    // backcompat create it now in case any third party tests expect initCoreDataDir to be\n    // non-null after calling setupTestCases()\n    initAndGetDataDir();\n\n    System.setProperty(\"solr.zkclienttimeout\", \"90000\"); \n    \n    System.setProperty(\"solr.httpclient.retries\", \"1\");\n    System.setProperty(\"solr.retries.on.forward\", \"1\");\n    System.setProperty(\"solr.retries.to.followers\", \"1\");\n\n    System.setProperty(\"solr.v2RealPath\", \"true\");\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    System.setProperty(\"solr.peerSync.useRangeVersions\", String.valueOf(random().nextBoolean()));\n    System.setProperty(\"solr.cloud.wait-for-updates-with-stale-state-pause\", \"500\");\n\n    System.setProperty(\"pkiHandlerPrivateKeyPath\", SolrTestCaseJ4.class.getClassLoader().getResource(\"cryptokeys/priv_key512_pkcs8.pem\").toExternalForm());\n    System.setProperty(\"pkiHandlerPublicKeyPath\", SolrTestCaseJ4.class.getClassLoader().getResource(\"cryptokeys/pub_key512.der\").toExternalForm());\n\n    System.setProperty(ZK_WHITELIST_PROPERTY, \"*\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n\n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SocketFactoryRegistryProvider appropriately\n    HttpClientUtil.setSocketFactoryRegistryProvider(sslConfig.buildClientSocketFactoryRegistryProvider());\n    Http2SolrClient.setDefaultSSLConfig(sslConfig.buildClientSSLConfig());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b31ebc7a867ddea79d438a8fca876a94e644d11a":["0ea06b0afe55bb7add9a9a04d27e87c497480e33","767d389403b701039ee599ec2ac8a838f45d8cb7"],"df00ac20ec618ed997bacca597432d686193362d":["767d389403b701039ee599ec2ac8a838f45d8cb7","596226608eb15ccf94c77978c3aeda172973d10b"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["af845fe4d504b5dfbfe7e64542f57d9456e17018"],"596226608eb15ccf94c77978c3aeda172973d10b":["767d389403b701039ee599ec2ac8a838f45d8cb7"],"fc16166e6be86e96c196f31854d639cd63cb57dd":["8381eb1cd44d2e0defb52130de3295a576ac1e7b"],"7b09263a529ccc99634e455697c798287b964dcb":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"0ea06b0afe55bb7add9a9a04d27e87c497480e33":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["0ea06b0afe55bb7add9a9a04d27e87c497480e33","767d389403b701039ee599ec2ac8a838f45d8cb7"],"b409047f69fb85704c506753bc23a37d7ad37b54":["03fe76cc6b7f8dc5beaa3b91ea9b8475bc7cd77b"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e511b092029d56e0d4e30204fba8509c1c2647b6":["80ef99614729c6d6fb7f8a9055a7a442efa87cf8"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["e9017cf144952056066919f1ebc7897ff9bd71b1","df00ac20ec618ed997bacca597432d686193362d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["8381eb1cd44d2e0defb52130de3295a576ac1e7b","fc16166e6be86e96c196f31854d639cd63cb57dd"],"af845fe4d504b5dfbfe7e64542f57d9456e17018":["df00ac20ec618ed997bacca597432d686193362d"],"03fe76cc6b7f8dc5beaa3b91ea9b8475bc7cd77b":["9799ebcab48102552d92f7807965a91fb6e116f7"],"80ef99614729c6d6fb7f8a9055a7a442efa87cf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8381eb1cd44d2e0defb52130de3295a576ac1e7b":["80ef99614729c6d6fb7f8a9055a7a442efa87cf8","e511b092029d56e0d4e30204fba8509c1c2647b6"],"c38d3299f414132db022cec9d60b2dafc244a7c3":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"9e856e5ac973044540959acff90fa900278d2692":["b409047f69fb85704c506753bc23a37d7ad37b54"],"767d389403b701039ee599ec2ac8a838f45d8cb7":["0ea06b0afe55bb7add9a9a04d27e87c497480e33"],"f8061ddd97f3352007d927dae445884a6f3d857b":["1778938cb7fb298e6e07a43e2d5acaf552d61518","9799ebcab48102552d92f7807965a91fb6e116f7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["9e856e5ac973044540959acff90fa900278d2692"],"9799ebcab48102552d92f7807965a91fb6e116f7":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["7b09263a529ccc99634e455697c798287b964dcb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c38d3299f414132db022cec9d60b2dafc244a7c3"]},"commit2Childs":{"b31ebc7a867ddea79d438a8fca876a94e644d11a":[],"df00ac20ec618ed997bacca597432d686193362d":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","af845fe4d504b5dfbfe7e64542f57d9456e17018"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"596226608eb15ccf94c77978c3aeda172973d10b":["df00ac20ec618ed997bacca597432d686193362d"],"fc16166e6be86e96c196f31854d639cd63cb57dd":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0ea06b0afe55bb7add9a9a04d27e87c497480e33":["b31ebc7a867ddea79d438a8fca876a94e644d11a","e9017cf144952056066919f1ebc7897ff9bd71b1","767d389403b701039ee599ec2ac8a838f45d8cb7"],"7b09263a529ccc99634e455697c798287b964dcb":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["7b09263a529ccc99634e455697c798287b964dcb"],"b409047f69fb85704c506753bc23a37d7ad37b54":["9e856e5ac973044540959acff90fa900278d2692"],"e511b092029d56e0d4e30204fba8509c1c2647b6":["8381eb1cd44d2e0defb52130de3295a576ac1e7b"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0ea06b0afe55bb7add9a9a04d27e87c497480e33","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80ef99614729c6d6fb7f8a9055a7a442efa87cf8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"af845fe4d504b5dfbfe7e64542f57d9456e17018":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"03fe76cc6b7f8dc5beaa3b91ea9b8475bc7cd77b":["b409047f69fb85704c506753bc23a37d7ad37b54"],"80ef99614729c6d6fb7f8a9055a7a442efa87cf8":["e511b092029d56e0d4e30204fba8509c1c2647b6","8381eb1cd44d2e0defb52130de3295a576ac1e7b"],"8381eb1cd44d2e0defb52130de3295a576ac1e7b":["fc16166e6be86e96c196f31854d639cd63cb57dd","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c38d3299f414132db022cec9d60b2dafc244a7c3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9e856e5ac973044540959acff90fa900278d2692":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"767d389403b701039ee599ec2ac8a838f45d8cb7":["b31ebc7a867ddea79d438a8fca876a94e644d11a","df00ac20ec618ed997bacca597432d686193362d","596226608eb15ccf94c77978c3aeda172973d10b","e9017cf144952056066919f1ebc7897ff9bd71b1"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["c38d3299f414132db022cec9d60b2dafc244a7c3"],"9799ebcab48102552d92f7807965a91fb6e116f7":["03fe76cc6b7f8dc5beaa3b91ea9b8475bc7cd77b","f8061ddd97f3352007d927dae445884a6f3d857b"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["f8061ddd97f3352007d927dae445884a6f3d857b","9799ebcab48102552d92f7807965a91fb6e116f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b31ebc7a867ddea79d438a8fca876a94e644d11a","3a7809d1d753b67f48b1a706e17034bf8b624ea3","f8061ddd97f3352007d927dae445884a6f3d857b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}