{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataConfig#readFromXml(Element).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataConfig#readFromXml(Element).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig#readFromXml(Element).mjava","sourceNew":"  public void readFromXml(Element e) {\n    List<Element> n = getChildNodes(e, \"document\");\n    if (n.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n    document = new Document(n.get(0));\n\n    n = getChildNodes(e, SCRIPT);\n    if (!n.isEmpty()) {\n      script = new Script(n.get(0));\n    }\n\n    // Add the provided evaluators\n    n = getChildNodes(e, FUNCTION);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        String func = getStringAttribute(element, NAME, null);\n        String clz = getStringAttribute(element, CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(getAllAttributes(element));\n        }\n      }\n    }\n    n = getChildNodes(e, DATA_SRC);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        Properties p = new Properties();\n        HashMap<String, String> attrs = getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.setProperty(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.getProperty(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Properties properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n  }\n\n","sourceOld":"  public void readFromXml(Element e) {\n    List<Element> n = getChildNodes(e, \"document\");\n    if (n.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n    document = new Document(n.get(0));\n\n    n = getChildNodes(e, SCRIPT);\n    if (!n.isEmpty()) {\n      script = new Script(n.get(0));\n    }\n\n    // Add the provided evaluators\n    n = getChildNodes(e, FUNCTION);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        String func = getStringAttribute(element, NAME, null);\n        String clz = getStringAttribute(element, CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(getAllAttributes(element));\n        }\n      }\n    }\n    n = getChildNodes(e, DATA_SRC);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        Properties p = new Properties();\n        HashMap<String, String> attrs = getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.setProperty(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.getProperty(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Properties properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataConfig#readFromXml(Element).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig#readFromXml(Element).mjava","sourceNew":"  public void readFromXml(Element e) {\n    List<Element> n = getChildNodes(e, \"document\");\n    if (n.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n    document = new Document(n.get(0));\n\n    n = getChildNodes(e, SCRIPT);\n    if (!n.isEmpty()) {\n      script = new Script(n.get(0));\n    }\n\n    // Add the provided evaluators\n    n = getChildNodes(e, FUNCTION);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        String func = getStringAttribute(element, NAME, null);\n        String clz = getStringAttribute(element, CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(getAllAttributes(element));\n        }\n      }\n    }\n    n = getChildNodes(e, DATA_SRC);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        Properties p = new Properties();\n        HashMap<String, String> attrs = getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.setProperty(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.getProperty(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Properties properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n  }\n\n","sourceOld":"  public void readFromXml(Element e) {\n    List<Element> n = getChildNodes(e, \"document\");\n    if (n.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n    document = new Document(n.get(0));\n\n    n = getChildNodes(e, SCRIPT);\n    if (!n.isEmpty()) {\n      script = new Script(n.get(0));\n    }\n\n    // Add the provided evaluators\n    n = getChildNodes(e, FUNCTION);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        String func = getStringAttribute(element, NAME, null);\n        String clz = getStringAttribute(element, CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(getAllAttributes(element));\n        }\n      }\n    }\n    n = getChildNodes(e, DATA_SRC);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        Properties p = new Properties();\n        HashMap<String, String> attrs = getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.setProperty(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.getProperty(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Properties properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","date":1335805170,"type":5,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#readFromXml(Document).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataConfig#readFromXml(Element).mjava","sourceNew":"  public DIHConfiguration readFromXml(Document xmlDocument) {\n    DIHConfiguration config;\n    List<Map<String, String >> functions = new ArrayList<Map<String ,String>>();\n    Script script = null;\n    Map<String, Properties> dataSources = new HashMap<String, Properties>();\n    \n    NodeList dataConfigTags = xmlDocument.getElementsByTagName(\"dataConfig\");\n    if(dataConfigTags == null || dataConfigTags.getLength() == 0) {\n      throw new DataImportHandlerException(SEVERE, \"the root node '<dataConfig>' is missing\");\n    }\n    Element e = (Element) dataConfigTags.item(0);\n    List<Element> documentTags = ConfigParseUtil.getChildNodes(e, \"document\");\n    if (documentTags.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n\n    List<Element> scriptTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.SCRIPT);\n    if (!scriptTags.isEmpty()) {\n      script = new Script(scriptTags.get(0));\n    }\n\n    // Add the provided evaluators\n    List<Element> functionTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.FUNCTION);\n    if (!functionTags.isEmpty()) {\n      for (Element element : functionTags) {\n        String func = ConfigParseUtil.getStringAttribute(element, NAME, null);\n        String clz = ConfigParseUtil.getStringAttribute(element, ConfigNameConstants.CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(ConfigParseUtil.getAllAttributes(element));\n        }\n      }\n    }\n    List<Element> dataSourceTags = ConfigParseUtil.getChildNodes(e, DATA_SRC);\n    if (!dataSourceTags.isEmpty()) {\n      for (Element element : dataSourceTags) {\n        Properties p = new Properties();\n        HashMap<String, String> attrs = ConfigParseUtil.getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.setProperty(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.getProperty(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Properties properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n    return new DIHConfiguration(documentTags.get(0), this, functions, script, dataSources);\n  }\n\n","sourceOld":"  public void readFromXml(Element e) {\n    List<Element> n = getChildNodes(e, \"document\");\n    if (n.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n    document = new Document(n.get(0));\n\n    n = getChildNodes(e, SCRIPT);\n    if (!n.isEmpty()) {\n      script = new Script(n.get(0));\n    }\n\n    // Add the provided evaluators\n    n = getChildNodes(e, FUNCTION);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        String func = getStringAttribute(element, NAME, null);\n        String clz = getStringAttribute(element, CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(getAllAttributes(element));\n        }\n      }\n    }\n    n = getChildNodes(e, DATA_SRC);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        Properties p = new Properties();\n        HashMap<String, String> attrs = getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.setProperty(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.getProperty(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Properties properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n  }\n\n","bugFix":null,"bugIntro":["5101aff20e65c9a285c274627ec956eb5409d253"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"]},"commit2Childs":{"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}