{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/MinimizationOperations#minimize(Automaton).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/MinimizationOperations#minimize(Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/MinimizationOperations#minimize(Automaton).mjava","sourceNew":"  /**\n   * Minimizes (and determinizes if not already deterministic) the given\n   * automaton.\n   * \n   * @see Automaton#setMinimization(int)\n   */\n  public static void minimize(Automaton a) {\n    if (!a.isSingleton()) {\n      minimizeHopcroft(a);\n    }\n    // recompute hash code\n    //a.hash_code = 1a.getNumberOfStates() * 3 + a.getNumberOfTransitions() * 2;\n    //if (a.hash_code == 0) a.hash_code = 1;\n  }\n\n","sourceOld":"  /**\n   * Minimizes (and determinizes if not already deterministic) the given\n   * automaton.\n   * \n   * @see Automaton#setMinimization(int)\n   */\n  public static void minimize(Automaton a) {\n    if (!a.isSingleton()) {\n      minimizeHopcroft(a);\n    }\n    // recompute hash code\n    //a.hash_code = 1a.getNumberOfStates() * 3 + a.getNumberOfTransitions() * 2;\n    //if (a.hash_code == 0) a.hash_code = 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/MinimizationOperations#minimize(Automaton).mjava","sourceNew":null,"sourceOld":"  /**\n   * Minimizes (and determinizes if not already deterministic) the given\n   * automaton.\n   * \n   * @see Automaton#setMinimization(int)\n   */\n  public static void minimize(Automaton a) {\n    if (!a.isSingleton()) {\n      minimizeHopcroft(a);\n    }\n    // recompute hash code\n    //a.hash_code = 1a.getNumberOfStates() * 3 + a.getNumberOfTransitions() * 2;\n    //if (a.hash_code == 0) a.hash_code = 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/MinimizationOperations#minimize(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/MinimizationOperationsLight#minimize(LightAutomaton).mjava","sourceNew":"  /**\n   * Minimizes (and determinizes if not already deterministic) the given\n   * automaton.\n   * \n   * @see Automaton#setMinimization(int)\n   */\n  public static Automaton minimize(Automaton a) {\n    return minimizeHopcroft(a);\n  }\n\n","sourceOld":"  /**\n   * Minimizes (and determinizes if not already deterministic) the given\n   * automaton.\n   * \n   * @see Automaton#setMinimization(int)\n   */\n  public static LightAutomaton minimize(LightAutomaton a) {\n    return minimizeHopcroft(a);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bab620c8ab32bb77a62753eca4afb8e47efa87c","date":1402997861,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/MinimizationOperations#minimize(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/MinimizationOperations#minimize(Automaton).mjava","sourceNew":"  /**\n   * Minimizes (and determinizes if not already deterministic) the given\n   * automaton.\n   */\n  public static Automaton minimize(Automaton a) {\n    return minimizeHopcroft(a);\n  }\n\n","sourceOld":"  /**\n   * Minimizes (and determinizes if not already deterministic) the given\n   * automaton.\n   * \n   * @see Automaton#setMinimization(int)\n   */\n  public static Automaton minimize(Automaton a) {\n    return minimizeHopcroft(a);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/MinimizationOperations#minimize(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/MinimizationOperations#minimize(Automaton).mjava","sourceNew":"  /**\n   * Minimizes (and determinizes if not already deterministic) the given\n   * automaton.\n   */\n  public static Automaton minimize(Automaton a) {\n    return minimizeHopcroft(a);\n  }\n\n","sourceOld":"  /**\n   * Minimizes (and determinizes if not already deterministic) the given\n   * automaton.\n   * \n   * @see Automaton#setMinimization(int)\n   */\n  public static void minimize(Automaton a) {\n    if (!a.isSingleton()) {\n      minimizeHopcroft(a);\n    }\n    // recompute hash code\n    //a.hash_code = 1a.getNumberOfStates() * 3 + a.getNumberOfTransitions() * 2;\n    //if (a.hash_code == 0) a.hash_code = 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/MinimizationOperations#minimize(Automaton).mjava","sourceNew":null,"sourceOld":"  /**\n   * Minimizes (and determinizes if not already deterministic) the given\n   * automaton.\n   */\n  public static Automaton minimize(Automaton a) {\n    return minimizeHopcroft(a);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b316f82baae88f5e279893a9cb7eee51fd8902f"]},"commit2Childs":{"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["5c84485629d80d203608e8975a1139de9933cc38"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}