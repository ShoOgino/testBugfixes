{"path":"solr/core/src/java/org/apache/solr/search/DocSetUtil#createDocSetGeneric(SolrIndexSearcher,Query).mjava","commits":[{"id":"6727dd701b30630840235b6788bb5c728d20bbfd","date":1439421226,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetUtil#createDocSetGeneric(SolrIndexSearcher,Query).mjava","pathOld":"/dev/null","sourceNew":"  // code to produce docsets for non-docsetproducer queries\n  public static DocSet createDocSetGeneric(SolrIndexSearcher searcher, Query query) throws IOException {\n\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    DocSetCollector collector = new DocSetCollector((maxDoc >> 6) + 5, maxDoc);\n\n    try {\n      searcher.search(query, collector);\n    } catch ( ExitableDirectoryReader.ExitingReaderException e) {\n      searcher.log.warn(\"Query: \" + query + \"; \" + e.getMessage());\n    }\n\n    return collector.getDocSet();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4801fd4ad4830fcde9b6ed9024c04839ade25e42"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4801fd4ad4830fcde9b6ed9024c04839ade25e42","date":1441807244,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetUtil#createDocSetGeneric(SolrIndexSearcher,Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetUtil#createDocSetGeneric(SolrIndexSearcher,Query).mjava","sourceNew":"  // code to produce docsets for non-docsetproducer queries\n  public static DocSet createDocSetGeneric(SolrIndexSearcher searcher, Query query) throws IOException {\n\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    DocSetCollector collector = new DocSetCollector((maxDoc >> 6) + 5, maxDoc);\n\n    // This may throw an ExitableDirectoryReader.ExitingReaderException\n    // but we should not catch it here, as we don't know how this DocSet will be used (it could be negated before use) or cached.\n    searcher.search(query, collector);\n\n    return collector.getDocSet();\n  }\n\n","sourceOld":"  // code to produce docsets for non-docsetproducer queries\n  public static DocSet createDocSetGeneric(SolrIndexSearcher searcher, Query query) throws IOException {\n\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    DocSetCollector collector = new DocSetCollector((maxDoc >> 6) + 5, maxDoc);\n\n    try {\n      searcher.search(query, collector);\n    } catch ( ExitableDirectoryReader.ExitingReaderException e) {\n      searcher.log.warn(\"Query: \" + query + \"; \" + e.getMessage());\n    }\n\n    return collector.getDocSet();\n  }\n\n","bugFix":["6727dd701b30630840235b6788bb5c728d20bbfd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca0cc2f173b07ff75ca951e017f5dd1f319fdad0","date":1442027674,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetUtil#createDocSetGeneric(SolrIndexSearcher,Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetUtil#createDocSetGeneric(SolrIndexSearcher,Query).mjava","sourceNew":"  // code to produce docsets for non-docsetproducer queries\n  public static DocSet createDocSetGeneric(SolrIndexSearcher searcher, Query query) throws IOException {\n\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    DocSetCollector collector = new DocSetCollector(maxDoc);\n\n    // This may throw an ExitableDirectoryReader.ExitingReaderException\n    // but we should not catch it here, as we don't know how this DocSet will be used (it could be negated before use) or cached.\n    searcher.search(query, collector);\n\n    return collector.getDocSet();\n  }\n\n","sourceOld":"  // code to produce docsets for non-docsetproducer queries\n  public static DocSet createDocSetGeneric(SolrIndexSearcher searcher, Query query) throws IOException {\n\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    DocSetCollector collector = new DocSetCollector((maxDoc >> 6) + 5, maxDoc);\n\n    // This may throw an ExitableDirectoryReader.ExitingReaderException\n    // but we should not catch it here, as we don't know how this DocSet will be used (it could be negated before use) or cached.\n    searcher.search(query, collector);\n\n    return collector.getDocSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3","date":1485881524,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetUtil#createDocSetGeneric(SolrIndexSearcher,Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetUtil#createDocSetGeneric(SolrIndexSearcher,Query).mjava","sourceNew":"  // code to produce docsets for non-docsetproducer queries\n  public static DocSet createDocSetGeneric(SolrIndexSearcher searcher, Query query) throws IOException {\n\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    DocSetCollector collector = new DocSetCollector(maxDoc);\n\n    // This may throw an ExitableDirectoryReader.ExitingReaderException\n    // but we should not catch it here, as we don't know how this DocSet will be used (it could be negated before use) or cached.\n    searcher.search(query, collector);\n\n    return getDocSet(collector, searcher);\n  }\n\n","sourceOld":"  // code to produce docsets for non-docsetproducer queries\n  public static DocSet createDocSetGeneric(SolrIndexSearcher searcher, Query query) throws IOException {\n\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    DocSetCollector collector = new DocSetCollector(maxDoc);\n\n    // This may throw an ExitableDirectoryReader.ExitingReaderException\n    // but we should not catch it here, as we don't know how this DocSet will be used (it could be negated before use) or cached.\n    searcher.search(query, collector);\n\n    return collector.getDocSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetUtil#createDocSetGeneric(SolrIndexSearcher,Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetUtil#createDocSetGeneric(SolrIndexSearcher,Query).mjava","sourceNew":"  // code to produce docsets for non-docsetproducer queries\n  public static DocSet createDocSetGeneric(SolrIndexSearcher searcher, Query query) throws IOException {\n\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    DocSetCollector collector = new DocSetCollector(maxDoc);\n\n    // This may throw an ExitableDirectoryReader.ExitingReaderException\n    // but we should not catch it here, as we don't know how this DocSet will be used (it could be negated before use) or cached.\n    searcher.search(query, collector);\n\n    return getDocSet(collector, searcher);\n  }\n\n","sourceOld":"  // code to produce docsets for non-docsetproducer queries\n  public static DocSet createDocSetGeneric(SolrIndexSearcher searcher, Query query) throws IOException {\n\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    DocSetCollector collector = new DocSetCollector(maxDoc);\n\n    // This may throw an ExitableDirectoryReader.ExitingReaderException\n    // but we should not catch it here, as we don't know how this DocSet will be used (it could be negated before use) or cached.\n    searcher.search(query, collector);\n\n    return collector.getDocSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["ca0cc2f173b07ff75ca951e017f5dd1f319fdad0","0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"ca0cc2f173b07ff75ca951e017f5dd1f319fdad0":["4801fd4ad4830fcde9b6ed9024c04839ade25e42"],"4801fd4ad4830fcde9b6ed9024c04839ade25e42":["6727dd701b30630840235b6788bb5c728d20bbfd"],"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3":["ca0cc2f173b07ff75ca951e017f5dd1f319fdad0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"6727dd701b30630840235b6788bb5c728d20bbfd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6727dd701b30630840235b6788bb5c728d20bbfd"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"ca0cc2f173b07ff75ca951e017f5dd1f319fdad0":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"4801fd4ad4830fcde9b6ed9024c04839ade25e42":["ca0cc2f173b07ff75ca951e017f5dd1f319fdad0"],"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6727dd701b30630840235b6788bb5c728d20bbfd":["4801fd4ad4830fcde9b6ed9024c04839ade25e42"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}