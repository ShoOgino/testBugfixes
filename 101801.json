{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getWorldCell().mjava","commits":[{"id":"8259c159da2de2e8528524fb76b244b46cbded59","date":1364478249,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getWorldCell().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getWorldNode().mjava","sourceNew":"  /**\n   * Returns the level 0 cell which encompasses all spatial data. Equivalent to {@link #getCell(String)} with \"\".\n   * This cell is threadsafe, just like a spatial prefix grid is, although cells aren't\n   * generally threadsafe.\n   * TODO rename to getTopCell or is this fine?\n   */\n  public Cell getWorldCell() {\n    if (worldCell == null) {\n      worldCell = getCell(\"\");\n    }\n    return worldCell;\n  }\n\n","sourceOld":"  /**\n   * Returns the level 0 cell which encompasses all spatial data. Equivalent to {@link #getNode(String)} with \"\".\n   * This cell is threadsafe, just like a spatial prefix grid is, although cells aren't\n   * generally threadsafe.\n   * TODO rename to getTopCell or is this fine?\n   */\n  public Node getWorldNode() {\n    if (worldNode == null) {\n      worldNode = getNode(\"\");\n    }\n    return worldNode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4de14be4bd1b857ba37ca138b61c4661c6d1bed3","date":1396628861,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getWorldCell().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getWorldCell().mjava","sourceNew":"  /**\n   * Returns the level 0 cell which encompasses all spatial data. Equivalent to {@link #getCell(byte[], int, int)} with\n   * no bytes. This cell is thread-safe, just like a spatial prefix grid is, although cells aren't\n   * generally thread-safe.\n   */\n  public Cell getWorldCell() {//another possible name: getTopCell\n    if (worldCell == null) {\n      worldCell = getCell(BytesRef.EMPTY_BYTES, 0, 0);\n      worldCell.getShape();//lazy load; make thread-safe\n    }\n    return worldCell;\n  }\n\n","sourceOld":"  /**\n   * Returns the level 0 cell which encompasses all spatial data. Equivalent to {@link #getCell(String)} with \"\".\n   * This cell is threadsafe, just like a spatial prefix grid is, although cells aren't\n   * generally threadsafe.\n   * TODO rename to getTopCell or is this fine?\n   */\n  public Cell getWorldCell() {\n    if (worldCell == null) {\n      worldCell = getCell(\"\");\n    }\n    return worldCell;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getWorldCell().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getWorldCell().mjava","sourceNew":"  /**\n   * Returns the level 0 cell which encompasses all spatial data. Equivalent to {@link #getCell(byte[], int, int)} with\n   * no bytes. This cell is thread-safe, just like a spatial prefix grid is, although cells aren't\n   * generally thread-safe.\n   */\n  public Cell getWorldCell() {//another possible name: getTopCell\n    if (worldCell == null) {\n      worldCell = getCell(BytesRef.EMPTY_BYTES, 0, 0);\n      worldCell.getShape();//lazy load; make thread-safe\n    }\n    return worldCell;\n  }\n\n","sourceOld":"  /**\n   * Returns the level 0 cell which encompasses all spatial data. Equivalent to {@link #getCell(String)} with \"\".\n   * This cell is threadsafe, just like a spatial prefix grid is, although cells aren't\n   * generally threadsafe.\n   * TODO rename to getTopCell or is this fine?\n   */\n  public Cell getWorldCell() {\n    if (worldCell == null) {\n      worldCell = getCell(\"\");\n    }\n    return worldCell;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6","date":1397789149,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getWorldCell().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getWorldCell().mjava","sourceNew":"  /**\n   * Returns the level 0 cell which encompasses all spatial data. Equivalent to {@link Cell#readCell(BytesRef)}\n   * with no bytes.\n   */\n  public abstract Cell getWorldCell(); //another possible name: getTopCell\n\n","sourceOld":"  /**\n   * Returns the level 0 cell which encompasses all spatial data. Equivalent to {@link #getCell(byte[], int, int)} with\n   * no bytes. This cell is thread-safe, just like a spatial prefix grid is, although cells aren't\n   * generally thread-safe.\n   */\n  public Cell getWorldCell() {//another possible name: getTopCell\n    if (worldCell == null) {\n      worldCell = getCell(BytesRef.EMPTY_BYTES, 0, 0);\n      worldCell.getShape();//lazy load; make thread-safe\n    }\n    return worldCell;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6c7011603e29f861f395fd2799b2ac2aa6e46da","date":1399596428,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getWorldCell().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getWorldCell().mjava","sourceNew":"  /**\n   * Returns the level 0 cell which encompasses all spatial data. Equivalent to {@link #readCell(BytesRef,Cell)}\n   * with no bytes.\n   */\n  public abstract Cell getWorldCell(); //another possible name: getTopCell\n\n","sourceOld":"  /**\n   * Returns the level 0 cell which encompasses all spatial data. Equivalent to {@link Cell#readCell(BytesRef)}\n   * with no bytes.\n   */\n  public abstract Cell getWorldCell(); //another possible name: getTopCell\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getWorldCell().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getWorldCell().mjava","sourceNew":"  /**\n   * Returns the level 0 cell which encompasses all spatial data. Equivalent to {@link #readCell(BytesRef,Cell)}\n   * with no bytes.\n   */\n  public abstract Cell getWorldCell(); //another possible name: getTopCell\n\n","sourceOld":"  /**\n   * Returns the level 0 cell which encompasses all spatial data. Equivalent to {@link #readCell(BytesRef,Cell)}\n   * with no bytes.\n   */\n  public abstract Cell getWorldCell(); //another possible name: getTopCell\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getWorldCell().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getWorldCell().mjava","sourceNew":"  /**\n   * Returns the level 0 cell which encompasses all spatial data. Equivalent to {@link #readCell(BytesRef,Cell)}\n   * with no bytes.\n   */\n  public abstract Cell getWorldCell(); //another possible name: getTopCell\n\n","sourceOld":"  /**\n   * Returns the level 0 cell which encompasses all spatial data. Equivalent to {@link #readCell(BytesRef,Cell)}\n   * with no bytes.\n   */\n  public abstract Cell getWorldCell(); //another possible name: getTopCell\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["c6c7011603e29f861f395fd2799b2ac2aa6e46da","112d77ac8d3e10a362516ad834c9a11d35c94234"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["8259c159da2de2e8528524fb76b244b46cbded59","4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["c6c7011603e29f861f395fd2799b2ac2aa6e46da"],"4de14be4bd1b857ba37ca138b61c4661c6d1bed3":["8259c159da2de2e8528524fb76b244b46cbded59"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"c6c7011603e29f861f395fd2799b2ac2aa6e46da":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"],"8259c159da2de2e8528524fb76b244b46cbded59":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8259c159da2de2e8528524fb76b244b46cbded59"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"4de14be4bd1b857ba37ca138b61c4661c6d1bed3":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["c6c7011603e29f861f395fd2799b2ac2aa6e46da"],"c6c7011603e29f861f395fd2799b2ac2aa6e46da":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"8259c159da2de2e8528524fb76b244b46cbded59":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}