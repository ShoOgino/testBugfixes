{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#isCurrent().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#isCurrent().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#isCurrent().mjava","sourceNew":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader is based on a Directory (ie, was\n   * created by calling {@link #open}, or {@link #reopen} on\n   * a reader based on a Directory), then this method checks\n   * if any further commits (see {@link IndexWriter#commit}\n   * have occurred in that directory).</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #reopen}\n   * on a near real-time reader), then this method checks if\n   * either a new commmit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #reopen} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");\n  }\n\n","sourceOld":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader is based on a Directory (ie, was\n   * created by calling {@link #open}, or {@link #reopen} on\n   * a reader based on a Directory), then this method checks\n   * if any further commits (see {@link IndexWriter#commit}\n   * have occurred in that directory).</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #reopen}\n   * on a near real-time reader), then this method checks if\n   * either a new commmit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #reopen} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#isCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#isCurrent().mjava","sourceNew":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader is based on a Directory (ie, was\n   * created by calling {@link #open}, or {@link #openIfChanged} on\n   * a reader based on a Directory), then this method checks\n   * if any further commits (see {@link IndexWriter#commit}\n   * have occurred in that directory).</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method checks if\n   * either a new commmit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #openIfChanged} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");\n  }\n\n","sourceOld":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader is based on a Directory (ie, was\n   * created by calling {@link #open}, or {@link #reopen} on\n   * a reader based on a Directory), then this method checks\n   * if any further commits (see {@link IndexWriter#commit}\n   * have occurred in that directory).</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #reopen}\n   * on a near real-time reader), then this method checks if\n   * either a new commmit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #reopen} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6adfdb3f33dbaf27203539f573faac3966cc55f","date":1318443641,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#isCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#isCurrent().mjava","sourceNew":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader is based on a Directory (ie, was\n   * created by calling {@link #open}, or {@link #openIfChanged} on\n   * a reader based on a Directory), then this method checks\n   * if any further commits (see {@link IndexWriter#commit}\n   * have occurred in that directory).</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method checks if\n   * either a new commit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #openIfChanged} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");\n  }\n\n","sourceOld":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader is based on a Directory (ie, was\n   * created by calling {@link #open}, or {@link #openIfChanged} on\n   * a reader based on a Directory), then this method checks\n   * if any further commits (see {@link IndexWriter#commit}\n   * have occurred in that directory).</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method checks if\n   * either a new commmit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #openIfChanged} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompositeIndexReader#isCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#isCurrent().mjava","sourceNew":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader is based on a Directory (ie, was\n   * created by calling {@link #open}, or {@link #openIfChanged} on\n   * a reader based on a Directory), then this method checks\n   * if any further commits (see {@link IndexWriter#commit}\n   * have occurred in that directory).</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method checks if\n   * either a new commit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #openIfChanged} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public abstract boolean isCurrent() throws CorruptIndexException, IOException;\n\n","sourceOld":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader is based on a Directory (ie, was\n   * created by calling {@link #open}, or {@link #openIfChanged} on\n   * a reader based on a Directory), then this method checks\n   * if any further commits (see {@link IndexWriter#commit}\n   * have occurred in that directory).</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method checks if\n   * either a new commit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #openIfChanged} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#isCurrent().mjava","sourceNew":null,"sourceOld":"  /**\n   * Check whether any new changes have occurred to the\n   * index since this reader was opened.\n   *\n   * <p>If this reader is based on a Directory (ie, was\n   * created by calling {@link #open}, or {@link #openIfChanged} on\n   * a reader based on a Directory), then this method checks\n   * if any further commits (see {@link IndexWriter#commit}\n   * have occurred in that directory).</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method checks if\n   * either a new commit has occurred, or any new\n   * uncommitted changes have taken place via the writer.\n   * Note that even if the writer has only performed\n   * merging, this method will still return false.</p>\n   *\n   * <p>In any event, if this returns false, you should call\n   * {@link #openIfChanged} to get a new reader that sees the\n   * changes.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException           if there is a low-level IO error\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a6adfdb3f33dbaf27203539f573faac3966cc55f":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a6adfdb3f33dbaf27203539f573faac3966cc55f","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["a6adfdb3f33dbaf27203539f573faac3966cc55f"]},"commit2Childs":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["a6adfdb3f33dbaf27203539f573faac3966cc55f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a6adfdb3f33dbaf27203539f573faac3966cc55f":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}