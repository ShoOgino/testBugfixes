{"path":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/SolrScraper#collectResponse(SolrClient,LinkedHashMap).mjava","commits":[{"id":"f1a927b2bca4e3939de1ef05d142c13cee9c1245","date":1520231792,"type":0,"author":"koji","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/SolrScraper#collectResponse(SolrClient,LinkedHashMap).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Collect facet count.\n   */\n  public Map<String, Collector.MetricFamilySamples> collectResponse(SolrClient solrClient, LinkedHashMap conf) {\n    Map<String, Collector.MetricFamilySamples> metricFamilySamplesMap = new LinkedHashMap<>();\n\n    try {\n      // create Solr request parameters\n      LinkedHashMap confQuery = (LinkedHashMap) conf.get(\"query\");\n      LinkedHashMap confParams = (LinkedHashMap) confQuery.get(\"params\");\n      String path = (String) confQuery.get(\"path\");\n      String core = (String) confQuery.get(\"core\");\n      String collection = (String) confQuery.get(\"collection\");\n      ArrayList<String> jsonQueries = (ArrayList<String>) conf.get(\"jsonQueries\");\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      if (confParams != null) {\n        for (Object k : confParams.keySet()) {\n          String name = (String) k;\n          String value = (String) confParams.get(k);\n          params.add(name, value);\n        }\n      }\n\n      // create Solr queryConfig request\n      QueryRequest queryRequest = new QueryRequest(params);\n      queryRequest.setPath(path);\n\n      // request to Solr\n      NamedList<Object> queryResponse = null;\n      try {\n        if (core == null && collection == null) {\n          queryResponse = solrClient.request(queryRequest);\n        } else if (core != null) {\n          queryResponse = solrClient.request(queryRequest, core);\n        } else if (collection != null) {\n          queryResponse = solrClient.request(queryRequest, collection);\n        }\n      } catch (SolrServerException | IOException e) {\n        this.logger.error(\"failed to request: \" + queryRequest.getPath() + \" \" + e.getMessage());\n      }\n\n      ObjectMapper om = new ObjectMapper();\n\n      JsonNode metricsJson = om.readTree((String) queryResponse.get(\"response\"));\n\n      List<JsonQuery> jqs = new ArrayList<>();\n      if (jsonQueries != null) {\n        for (String jsonQuery : jsonQueries) {\n          JsonQuery compiledJsonQuery = JsonQuery.compile(jsonQuery);\n          jqs.add(compiledJsonQuery);\n        }\n      }\n\n      for (int i = 0; i < jqs.size(); i++) {\n        JsonQuery q = jqs.get(i);\n        try {\n          List<JsonNode> results = q.apply(metricsJson);\n          for (JsonNode result : results) {\n            String type = result.get(\"type\").textValue();\n            String name = result.get(\"name\").textValue();\n            String help = result.get(\"help\").textValue();\n            Double value = result.get(\"value\").doubleValue();\n            ArrayList<String> labelNames = new ArrayList<>(this.labelNames);\n            ArrayList<String> labelValues = new ArrayList<>(this.labelValues);\n\n            if (solrClient instanceof CloudSolrClient) {\n              labelNames.add(\"zk_host\");\n              labelValues.add(((CloudSolrClient) solrClient).getZkHost());\n            }\n\n            if (collection != null) {\n              labelNames.add(\"collection\");\n              labelValues.add(collection);\n            }\n\n            if (solrClient instanceof HttpSolrClient) {\n              labelNames.add(\"base_url\");\n              labelValues.add(((HttpSolrClient) solrClient).getBaseURL());\n            }\n\n            if (core != null) {\n              labelNames.add(\"core\");\n              labelValues.add(core);\n            }\n\n            for(Iterator<JsonNode> ite = result.get(\"label_names\").iterator();ite.hasNext();){\n              JsonNode item = ite.next();\n              labelNames.add(item.textValue());\n            }\n            for(Iterator<JsonNode> ite = result.get(\"label_values\").iterator();ite.hasNext();){\n              JsonNode item = ite.next();\n              labelValues.add(item.textValue());\n            }\n\n            if (labelNames.indexOf(\"core\") < 0 && labelNames.indexOf(\"collection\") >= 0 && labelNames.indexOf(\"shard\") >= 0 && labelNames.indexOf(\"replica\") >= 0) {\n              StringBuffer sb = new StringBuffer();\n              sb.append(labelValues.get(labelNames.indexOf(\"collection\")))\n                  .append(\"_\")\n                  .append(labelValues.get(labelNames.indexOf(\"shard\")))\n                  .append(\"_\")\n                  .append(labelValues.get(labelNames.indexOf(\"replica\")));\n\n              labelNames.add(\"core\");\n              labelValues.add(sb.toString());\n            }\n\n            if (!metricFamilySamplesMap.containsKey(name)) {\n              Collector.MetricFamilySamples metricFamilySamples = new Collector.MetricFamilySamples(\n                name,\n                Collector.Type.valueOf(type),\n                help,\n                new ArrayList<>()\n              );\n              metricFamilySamplesMap.put(name, metricFamilySamples);\n            }\n\n            Collector.MetricFamilySamples.Sample sample = new Collector.MetricFamilySamples.Sample(name, labelNames, labelValues, value);\n\n            if (!metricFamilySamplesMap.get(name).samples.contains(sample)) {\n              metricFamilySamplesMap.get(name).samples.add(sample);\n            }\n          }\n        } catch (JsonQueryException e) {\n          this.logger.error(e.toString() + \" \" + q.toString());\n          SolrExporter.scrapeErrorTotal.inc();\n        }\n      }\n    } catch (HttpSolrClient.RemoteSolrException | IOException e) {\n      this.logger.error(\"failed to request: \" + e.toString());\n    } catch (Exception e) {\n      this.logger.error(e.toString());\n      e.printStackTrace();\n    }\n\n    return metricFamilySamplesMap;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f18e0fcd4f3356dffc51840f1d11607f930a1b86","date":1530193458,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/SolrScraper#collectResponse(SolrClient,LinkedHashMap).mjava","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/SolrScraper#collectResponse(SolrClient,LinkedHashMap).mjava","sourceNew":"  /**\n   * Collect facet count.\n   */\n  public Map<String, Collector.MetricFamilySamples> collectResponse(SolrClient solrClient, LinkedHashMap conf) {\n    Map<String, Collector.MetricFamilySamples> metricFamilySamplesMap = new LinkedHashMap<>();\n\n    try {\n      // create Solr request parameters\n      LinkedHashMap confQuery = (LinkedHashMap) conf.get(\"query\");\n      LinkedHashMap confParams = (LinkedHashMap) confQuery.get(\"params\");\n      String path = (String) confQuery.get(\"path\");\n      String core = (String) confQuery.get(\"core\");\n      String collection = (String) confQuery.get(\"collection\");\n      ArrayList<String> jsonQueries = (ArrayList<String>) conf.get(\"jsonQueries\");\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      if (confParams != null) {\n        for (Object k : confParams.keySet()) {\n          String name = (String) k;\n          String value = (String) confParams.get(k);\n          params.add(name, value);\n        }\n      }\n\n      // create Solr queryConfig request\n      QueryRequest queryRequest = new QueryRequest(params);\n      queryRequest.setPath(path);\n\n      // request to Solr\n      NamedList<Object> queryResponse = null;\n      try {\n        if (core == null && collection == null) {\n          queryResponse = solrClient.request(queryRequest);\n        } else if (core != null) {\n          queryResponse = solrClient.request(queryRequest, core);\n        } else if (collection != null) {\n          queryResponse = solrClient.request(queryRequest, collection);\n        }\n      } catch (SolrServerException | IOException e) {\n        this.log.error(\"failed to request: \" + queryRequest.getPath() + \" \" + e.getMessage());\n      }\n\n      ObjectMapper om = new ObjectMapper();\n\n      JsonNode metricsJson = om.readTree((String) queryResponse.get(\"response\"));\n\n      List<JsonQuery> jqs = new ArrayList<>();\n      if (jsonQueries != null) {\n        for (String jsonQuery : jsonQueries) {\n          JsonQuery compiledJsonQuery = JsonQuery.compile(jsonQuery);\n          jqs.add(compiledJsonQuery);\n        }\n      }\n\n      for (int i = 0; i < jqs.size(); i++) {\n        JsonQuery q = jqs.get(i);\n        try {\n          List<JsonNode> results = q.apply(metricsJson);\n          for (JsonNode result : results) {\n            String type = result.get(\"type\").textValue();\n            String name = result.get(\"name\").textValue();\n            String help = result.get(\"help\").textValue();\n            Double value = result.get(\"value\").doubleValue();\n            ArrayList<String> labelNames = new ArrayList<>(this.labelNames);\n            ArrayList<String> labelValues = new ArrayList<>(this.labelValues);\n\n            if (solrClient instanceof CloudSolrClient) {\n              labelNames.add(\"zk_host\");\n              labelValues.add(((CloudSolrClient) solrClient).getZkHost());\n            }\n\n            if (collection != null) {\n              labelNames.add(\"collection\");\n              labelValues.add(collection);\n            }\n\n            if (solrClient instanceof HttpSolrClient) {\n              labelNames.add(\"base_url\");\n              labelValues.add(((HttpSolrClient) solrClient).getBaseURL());\n            }\n\n            if (core != null) {\n              labelNames.add(\"core\");\n              labelValues.add(core);\n            }\n\n            for(Iterator<JsonNode> ite = result.get(\"label_names\").iterator();ite.hasNext();){\n              JsonNode item = ite.next();\n              labelNames.add(item.textValue());\n            }\n            for(Iterator<JsonNode> ite = result.get(\"label_values\").iterator();ite.hasNext();){\n              JsonNode item = ite.next();\n              labelValues.add(item.textValue());\n            }\n\n            if (labelNames.indexOf(\"core\") < 0 && labelNames.indexOf(\"collection\") >= 0 && labelNames.indexOf(\"shard\") >= 0 && labelNames.indexOf(\"replica\") >= 0) {\n              StringBuffer sb = new StringBuffer();\n              sb.append(labelValues.get(labelNames.indexOf(\"collection\")))\n                  .append(\"_\")\n                  .append(labelValues.get(labelNames.indexOf(\"shard\")))\n                  .append(\"_\")\n                  .append(labelValues.get(labelNames.indexOf(\"replica\")));\n\n              labelNames.add(\"core\");\n              labelValues.add(sb.toString());\n            }\n\n            if (!metricFamilySamplesMap.containsKey(name)) {\n              Collector.MetricFamilySamples metricFamilySamples = new Collector.MetricFamilySamples(\n                name,\n                Collector.Type.valueOf(type),\n                help,\n                new ArrayList<>()\n              );\n              metricFamilySamplesMap.put(name, metricFamilySamples);\n            }\n\n            Collector.MetricFamilySamples.Sample sample = new Collector.MetricFamilySamples.Sample(name, labelNames, labelValues, value);\n\n            if (!metricFamilySamplesMap.get(name).samples.contains(sample)) {\n              metricFamilySamplesMap.get(name).samples.add(sample);\n            }\n          }\n        } catch (JsonQueryException e) {\n          this.log.error(e.toString() + \" \" + q.toString());\n          SolrExporter.scrapeErrorTotal.inc();\n        }\n      }\n    } catch (HttpSolrClient.RemoteSolrException | IOException e) {\n      this.log.error(\"failed to request: \" + e.toString());\n    } catch (Exception e) {\n      this.log.error(e.toString());\n      e.printStackTrace();\n    }\n\n    return metricFamilySamplesMap;\n  }\n\n","sourceOld":"  /**\n   * Collect facet count.\n   */\n  public Map<String, Collector.MetricFamilySamples> collectResponse(SolrClient solrClient, LinkedHashMap conf) {\n    Map<String, Collector.MetricFamilySamples> metricFamilySamplesMap = new LinkedHashMap<>();\n\n    try {\n      // create Solr request parameters\n      LinkedHashMap confQuery = (LinkedHashMap) conf.get(\"query\");\n      LinkedHashMap confParams = (LinkedHashMap) confQuery.get(\"params\");\n      String path = (String) confQuery.get(\"path\");\n      String core = (String) confQuery.get(\"core\");\n      String collection = (String) confQuery.get(\"collection\");\n      ArrayList<String> jsonQueries = (ArrayList<String>) conf.get(\"jsonQueries\");\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      if (confParams != null) {\n        for (Object k : confParams.keySet()) {\n          String name = (String) k;\n          String value = (String) confParams.get(k);\n          params.add(name, value);\n        }\n      }\n\n      // create Solr queryConfig request\n      QueryRequest queryRequest = new QueryRequest(params);\n      queryRequest.setPath(path);\n\n      // request to Solr\n      NamedList<Object> queryResponse = null;\n      try {\n        if (core == null && collection == null) {\n          queryResponse = solrClient.request(queryRequest);\n        } else if (core != null) {\n          queryResponse = solrClient.request(queryRequest, core);\n        } else if (collection != null) {\n          queryResponse = solrClient.request(queryRequest, collection);\n        }\n      } catch (SolrServerException | IOException e) {\n        this.logger.error(\"failed to request: \" + queryRequest.getPath() + \" \" + e.getMessage());\n      }\n\n      ObjectMapper om = new ObjectMapper();\n\n      JsonNode metricsJson = om.readTree((String) queryResponse.get(\"response\"));\n\n      List<JsonQuery> jqs = new ArrayList<>();\n      if (jsonQueries != null) {\n        for (String jsonQuery : jsonQueries) {\n          JsonQuery compiledJsonQuery = JsonQuery.compile(jsonQuery);\n          jqs.add(compiledJsonQuery);\n        }\n      }\n\n      for (int i = 0; i < jqs.size(); i++) {\n        JsonQuery q = jqs.get(i);\n        try {\n          List<JsonNode> results = q.apply(metricsJson);\n          for (JsonNode result : results) {\n            String type = result.get(\"type\").textValue();\n            String name = result.get(\"name\").textValue();\n            String help = result.get(\"help\").textValue();\n            Double value = result.get(\"value\").doubleValue();\n            ArrayList<String> labelNames = new ArrayList<>(this.labelNames);\n            ArrayList<String> labelValues = new ArrayList<>(this.labelValues);\n\n            if (solrClient instanceof CloudSolrClient) {\n              labelNames.add(\"zk_host\");\n              labelValues.add(((CloudSolrClient) solrClient).getZkHost());\n            }\n\n            if (collection != null) {\n              labelNames.add(\"collection\");\n              labelValues.add(collection);\n            }\n\n            if (solrClient instanceof HttpSolrClient) {\n              labelNames.add(\"base_url\");\n              labelValues.add(((HttpSolrClient) solrClient).getBaseURL());\n            }\n\n            if (core != null) {\n              labelNames.add(\"core\");\n              labelValues.add(core);\n            }\n\n            for(Iterator<JsonNode> ite = result.get(\"label_names\").iterator();ite.hasNext();){\n              JsonNode item = ite.next();\n              labelNames.add(item.textValue());\n            }\n            for(Iterator<JsonNode> ite = result.get(\"label_values\").iterator();ite.hasNext();){\n              JsonNode item = ite.next();\n              labelValues.add(item.textValue());\n            }\n\n            if (labelNames.indexOf(\"core\") < 0 && labelNames.indexOf(\"collection\") >= 0 && labelNames.indexOf(\"shard\") >= 0 && labelNames.indexOf(\"replica\") >= 0) {\n              StringBuffer sb = new StringBuffer();\n              sb.append(labelValues.get(labelNames.indexOf(\"collection\")))\n                  .append(\"_\")\n                  .append(labelValues.get(labelNames.indexOf(\"shard\")))\n                  .append(\"_\")\n                  .append(labelValues.get(labelNames.indexOf(\"replica\")));\n\n              labelNames.add(\"core\");\n              labelValues.add(sb.toString());\n            }\n\n            if (!metricFamilySamplesMap.containsKey(name)) {\n              Collector.MetricFamilySamples metricFamilySamples = new Collector.MetricFamilySamples(\n                name,\n                Collector.Type.valueOf(type),\n                help,\n                new ArrayList<>()\n              );\n              metricFamilySamplesMap.put(name, metricFamilySamples);\n            }\n\n            Collector.MetricFamilySamples.Sample sample = new Collector.MetricFamilySamples.Sample(name, labelNames, labelValues, value);\n\n            if (!metricFamilySamplesMap.get(name).samples.contains(sample)) {\n              metricFamilySamplesMap.get(name).samples.add(sample);\n            }\n          }\n        } catch (JsonQueryException e) {\n          this.logger.error(e.toString() + \" \" + q.toString());\n          SolrExporter.scrapeErrorTotal.inc();\n        }\n      }\n    } catch (HttpSolrClient.RemoteSolrException | IOException e) {\n      this.logger.error(\"failed to request: \" + e.toString());\n    } catch (Exception e) {\n      this.logger.error(e.toString());\n      e.printStackTrace();\n    }\n\n    return metricFamilySamplesMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/SolrScraper#collectResponse(SolrClient,LinkedHashMap).mjava","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/SolrScraper#collectResponse(SolrClient,LinkedHashMap).mjava","sourceNew":"  /**\n   * Collect facet count.\n   */\n  public Map<String, Collector.MetricFamilySamples> collectResponse(SolrClient solrClient, LinkedHashMap conf) {\n    Map<String, Collector.MetricFamilySamples> metricFamilySamplesMap = new LinkedHashMap<>();\n\n    try {\n      // create Solr request parameters\n      LinkedHashMap confQuery = (LinkedHashMap) conf.get(\"query\");\n      LinkedHashMap confParams = (LinkedHashMap) confQuery.get(\"params\");\n      String path = (String) confQuery.get(\"path\");\n      String core = (String) confQuery.get(\"core\");\n      String collection = (String) confQuery.get(\"collection\");\n      ArrayList<String> jsonQueries = (ArrayList<String>) conf.get(\"jsonQueries\");\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      if (confParams != null) {\n        for (Object k : confParams.keySet()) {\n          String name = (String) k;\n          String value = (String) confParams.get(k);\n          params.add(name, value);\n        }\n      }\n\n      // create Solr queryConfig request\n      QueryRequest queryRequest = new QueryRequest(params);\n      queryRequest.setPath(path);\n\n      // request to Solr\n      NamedList<Object> queryResponse = null;\n      try {\n        if (core == null && collection == null) {\n          queryResponse = solrClient.request(queryRequest);\n        } else if (core != null) {\n          queryResponse = solrClient.request(queryRequest, core);\n        } else if (collection != null) {\n          queryResponse = solrClient.request(queryRequest, collection);\n        }\n      } catch (SolrServerException | IOException e) {\n        this.log.error(\"failed to request: \" + queryRequest.getPath() + \" \" + e.getMessage());\n      }\n\n      ObjectMapper om = new ObjectMapper();\n\n      JsonNode metricsJson = om.readTree((String) queryResponse.get(\"response\"));\n\n      List<JsonQuery> jqs = new ArrayList<>();\n      if (jsonQueries != null) {\n        for (String jsonQuery : jsonQueries) {\n          JsonQuery compiledJsonQuery = JsonQuery.compile(jsonQuery);\n          jqs.add(compiledJsonQuery);\n        }\n      }\n\n      for (int i = 0; i < jqs.size(); i++) {\n        JsonQuery q = jqs.get(i);\n        try {\n          List<JsonNode> results = q.apply(metricsJson);\n          for (JsonNode result : results) {\n            String type = result.get(\"type\").textValue();\n            String name = result.get(\"name\").textValue();\n            String help = result.get(\"help\").textValue();\n            Double value = result.get(\"value\").doubleValue();\n            ArrayList<String> labelNames = new ArrayList<>(this.labelNames);\n            ArrayList<String> labelValues = new ArrayList<>(this.labelValues);\n\n            if (solrClient instanceof CloudSolrClient) {\n              labelNames.add(\"zk_host\");\n              labelValues.add(((CloudSolrClient) solrClient).getZkHost());\n            }\n\n            if (collection != null) {\n              labelNames.add(\"collection\");\n              labelValues.add(collection);\n            }\n\n            if (solrClient instanceof HttpSolrClient) {\n              labelNames.add(\"base_url\");\n              labelValues.add(((HttpSolrClient) solrClient).getBaseURL());\n            }\n\n            if (core != null) {\n              labelNames.add(\"core\");\n              labelValues.add(core);\n            }\n\n            for(Iterator<JsonNode> ite = result.get(\"label_names\").iterator();ite.hasNext();){\n              JsonNode item = ite.next();\n              labelNames.add(item.textValue());\n            }\n            for(Iterator<JsonNode> ite = result.get(\"label_values\").iterator();ite.hasNext();){\n              JsonNode item = ite.next();\n              labelValues.add(item.textValue());\n            }\n\n            if (labelNames.indexOf(\"core\") < 0 && labelNames.indexOf(\"collection\") >= 0 && labelNames.indexOf(\"shard\") >= 0 && labelNames.indexOf(\"replica\") >= 0) {\n              StringBuffer sb = new StringBuffer();\n              sb.append(labelValues.get(labelNames.indexOf(\"collection\")))\n                  .append(\"_\")\n                  .append(labelValues.get(labelNames.indexOf(\"shard\")))\n                  .append(\"_\")\n                  .append(labelValues.get(labelNames.indexOf(\"replica\")));\n\n              labelNames.add(\"core\");\n              labelValues.add(sb.toString());\n            }\n\n            if (!metricFamilySamplesMap.containsKey(name)) {\n              Collector.MetricFamilySamples metricFamilySamples = new Collector.MetricFamilySamples(\n                name,\n                Collector.Type.valueOf(type),\n                help,\n                new ArrayList<>()\n              );\n              metricFamilySamplesMap.put(name, metricFamilySamples);\n            }\n\n            Collector.MetricFamilySamples.Sample sample = new Collector.MetricFamilySamples.Sample(name, labelNames, labelValues, value);\n\n            if (!metricFamilySamplesMap.get(name).samples.contains(sample)) {\n              metricFamilySamplesMap.get(name).samples.add(sample);\n            }\n          }\n        } catch (JsonQueryException e) {\n          this.log.error(e.toString() + \" \" + q.toString());\n          SolrExporter.scrapeErrorTotal.inc();\n        }\n      }\n    } catch (HttpSolrClient.RemoteSolrException | IOException e) {\n      this.log.error(\"failed to request: \" + e.toString());\n    } catch (Exception e) {\n      this.log.error(e.toString());\n      e.printStackTrace();\n    }\n\n    return metricFamilySamplesMap;\n  }\n\n","sourceOld":"  /**\n   * Collect facet count.\n   */\n  public Map<String, Collector.MetricFamilySamples> collectResponse(SolrClient solrClient, LinkedHashMap conf) {\n    Map<String, Collector.MetricFamilySamples> metricFamilySamplesMap = new LinkedHashMap<>();\n\n    try {\n      // create Solr request parameters\n      LinkedHashMap confQuery = (LinkedHashMap) conf.get(\"query\");\n      LinkedHashMap confParams = (LinkedHashMap) confQuery.get(\"params\");\n      String path = (String) confQuery.get(\"path\");\n      String core = (String) confQuery.get(\"core\");\n      String collection = (String) confQuery.get(\"collection\");\n      ArrayList<String> jsonQueries = (ArrayList<String>) conf.get(\"jsonQueries\");\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      if (confParams != null) {\n        for (Object k : confParams.keySet()) {\n          String name = (String) k;\n          String value = (String) confParams.get(k);\n          params.add(name, value);\n        }\n      }\n\n      // create Solr queryConfig request\n      QueryRequest queryRequest = new QueryRequest(params);\n      queryRequest.setPath(path);\n\n      // request to Solr\n      NamedList<Object> queryResponse = null;\n      try {\n        if (core == null && collection == null) {\n          queryResponse = solrClient.request(queryRequest);\n        } else if (core != null) {\n          queryResponse = solrClient.request(queryRequest, core);\n        } else if (collection != null) {\n          queryResponse = solrClient.request(queryRequest, collection);\n        }\n      } catch (SolrServerException | IOException e) {\n        this.logger.error(\"failed to request: \" + queryRequest.getPath() + \" \" + e.getMessage());\n      }\n\n      ObjectMapper om = new ObjectMapper();\n\n      JsonNode metricsJson = om.readTree((String) queryResponse.get(\"response\"));\n\n      List<JsonQuery> jqs = new ArrayList<>();\n      if (jsonQueries != null) {\n        for (String jsonQuery : jsonQueries) {\n          JsonQuery compiledJsonQuery = JsonQuery.compile(jsonQuery);\n          jqs.add(compiledJsonQuery);\n        }\n      }\n\n      for (int i = 0; i < jqs.size(); i++) {\n        JsonQuery q = jqs.get(i);\n        try {\n          List<JsonNode> results = q.apply(metricsJson);\n          for (JsonNode result : results) {\n            String type = result.get(\"type\").textValue();\n            String name = result.get(\"name\").textValue();\n            String help = result.get(\"help\").textValue();\n            Double value = result.get(\"value\").doubleValue();\n            ArrayList<String> labelNames = new ArrayList<>(this.labelNames);\n            ArrayList<String> labelValues = new ArrayList<>(this.labelValues);\n\n            if (solrClient instanceof CloudSolrClient) {\n              labelNames.add(\"zk_host\");\n              labelValues.add(((CloudSolrClient) solrClient).getZkHost());\n            }\n\n            if (collection != null) {\n              labelNames.add(\"collection\");\n              labelValues.add(collection);\n            }\n\n            if (solrClient instanceof HttpSolrClient) {\n              labelNames.add(\"base_url\");\n              labelValues.add(((HttpSolrClient) solrClient).getBaseURL());\n            }\n\n            if (core != null) {\n              labelNames.add(\"core\");\n              labelValues.add(core);\n            }\n\n            for(Iterator<JsonNode> ite = result.get(\"label_names\").iterator();ite.hasNext();){\n              JsonNode item = ite.next();\n              labelNames.add(item.textValue());\n            }\n            for(Iterator<JsonNode> ite = result.get(\"label_values\").iterator();ite.hasNext();){\n              JsonNode item = ite.next();\n              labelValues.add(item.textValue());\n            }\n\n            if (labelNames.indexOf(\"core\") < 0 && labelNames.indexOf(\"collection\") >= 0 && labelNames.indexOf(\"shard\") >= 0 && labelNames.indexOf(\"replica\") >= 0) {\n              StringBuffer sb = new StringBuffer();\n              sb.append(labelValues.get(labelNames.indexOf(\"collection\")))\n                  .append(\"_\")\n                  .append(labelValues.get(labelNames.indexOf(\"shard\")))\n                  .append(\"_\")\n                  .append(labelValues.get(labelNames.indexOf(\"replica\")));\n\n              labelNames.add(\"core\");\n              labelValues.add(sb.toString());\n            }\n\n            if (!metricFamilySamplesMap.containsKey(name)) {\n              Collector.MetricFamilySamples metricFamilySamples = new Collector.MetricFamilySamples(\n                name,\n                Collector.Type.valueOf(type),\n                help,\n                new ArrayList<>()\n              );\n              metricFamilySamplesMap.put(name, metricFamilySamples);\n            }\n\n            Collector.MetricFamilySamples.Sample sample = new Collector.MetricFamilySamples.Sample(name, labelNames, labelValues, value);\n\n            if (!metricFamilySamplesMap.get(name).samples.contains(sample)) {\n              metricFamilySamplesMap.get(name).samples.add(sample);\n            }\n          }\n        } catch (JsonQueryException e) {\n          this.logger.error(e.toString() + \" \" + q.toString());\n          SolrExporter.scrapeErrorTotal.inc();\n        }\n      }\n    } catch (HttpSolrClient.RemoteSolrException | IOException e) {\n      this.logger.error(\"failed to request: \" + e.toString());\n    } catch (Exception e) {\n      this.logger.error(e.toString());\n      e.printStackTrace();\n    }\n\n    return metricFamilySamplesMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/SolrScraper#collectResponse(SolrClient,LinkedHashMap).mjava","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/SolrScraper#collectResponse(SolrClient,LinkedHashMap).mjava","sourceNew":"  /**\n   * Collect facet count.\n   */\n  public Map<String, Collector.MetricFamilySamples> collectResponse(SolrClient solrClient, LinkedHashMap conf) {\n    Map<String, Collector.MetricFamilySamples> metricFamilySamplesMap = new LinkedHashMap<>();\n\n    try {\n      // create Solr request parameters\n      LinkedHashMap confQuery = (LinkedHashMap) conf.get(\"query\");\n      LinkedHashMap confParams = (LinkedHashMap) confQuery.get(\"params\");\n      String path = (String) confQuery.get(\"path\");\n      String core = (String) confQuery.get(\"core\");\n      String collection = (String) confQuery.get(\"collection\");\n      ArrayList<String> jsonQueries = (ArrayList<String>) conf.get(\"jsonQueries\");\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      if (confParams != null) {\n        for (Object k : confParams.keySet()) {\n          String name = (String) k;\n          String value = (String) confParams.get(k);\n          params.add(name, value);\n        }\n      }\n\n      // create Solr queryConfig request\n      QueryRequest queryRequest = new QueryRequest(params);\n      queryRequest.setPath(path);\n\n      // request to Solr\n      NamedList<Object> queryResponse = null;\n      try {\n        if (core == null && collection == null) {\n          queryResponse = solrClient.request(queryRequest);\n        } else if (core != null) {\n          queryResponse = solrClient.request(queryRequest, core);\n        } else if (collection != null) {\n          queryResponse = solrClient.request(queryRequest, collection);\n        }\n      } catch (SolrServerException | IOException e) {\n        this.log.error(\"failed to request: \" + queryRequest.getPath() + \" \" + e.getMessage());\n      }\n\n      ObjectMapper om = new ObjectMapper();\n\n      JsonNode metricsJson = om.readTree((String) queryResponse.get(\"response\"));\n\n      List<JsonQuery> jqs = new ArrayList<>();\n      if (jsonQueries != null) {\n        for (String jsonQuery : jsonQueries) {\n          JsonQuery compiledJsonQuery = JsonQuery.compile(jsonQuery);\n          jqs.add(compiledJsonQuery);\n        }\n      }\n\n      for (int i = 0; i < jqs.size(); i++) {\n        JsonQuery q = jqs.get(i);\n        try {\n          List<JsonNode> results = q.apply(metricsJson);\n          for (JsonNode result : results) {\n            String type = result.get(\"type\").textValue();\n            String name = result.get(\"name\").textValue();\n            String help = result.get(\"help\").textValue();\n            Double value = result.get(\"value\").doubleValue();\n            ArrayList<String> labelNames = new ArrayList<>(this.labelNames);\n            ArrayList<String> labelValues = new ArrayList<>(this.labelValues);\n\n            if (solrClient instanceof CloudSolrClient) {\n              labelNames.add(\"zk_host\");\n              labelValues.add(((CloudSolrClient) solrClient).getZkHost());\n            }\n\n            if (collection != null) {\n              labelNames.add(\"collection\");\n              labelValues.add(collection);\n            }\n\n            if (solrClient instanceof HttpSolrClient) {\n              labelNames.add(\"base_url\");\n              labelValues.add(((HttpSolrClient) solrClient).getBaseURL());\n            }\n\n            if (core != null) {\n              labelNames.add(\"core\");\n              labelValues.add(core);\n            }\n\n            for(Iterator<JsonNode> ite = result.get(\"label_names\").iterator();ite.hasNext();){\n              JsonNode item = ite.next();\n              labelNames.add(item.textValue());\n            }\n            for(Iterator<JsonNode> ite = result.get(\"label_values\").iterator();ite.hasNext();){\n              JsonNode item = ite.next();\n              labelValues.add(item.textValue());\n            }\n\n            if (labelNames.indexOf(\"core\") < 0 && labelNames.indexOf(\"collection\") >= 0 && labelNames.indexOf(\"shard\") >= 0 && labelNames.indexOf(\"replica\") >= 0) {\n              StringBuffer sb = new StringBuffer();\n              sb.append(labelValues.get(labelNames.indexOf(\"collection\")))\n                  .append(\"_\")\n                  .append(labelValues.get(labelNames.indexOf(\"shard\")))\n                  .append(\"_\")\n                  .append(labelValues.get(labelNames.indexOf(\"replica\")));\n\n              labelNames.add(\"core\");\n              labelValues.add(sb.toString());\n            }\n\n            if (!metricFamilySamplesMap.containsKey(name)) {\n              Collector.MetricFamilySamples metricFamilySamples = new Collector.MetricFamilySamples(\n                name,\n                Collector.Type.valueOf(type),\n                help,\n                new ArrayList<>()\n              );\n              metricFamilySamplesMap.put(name, metricFamilySamples);\n            }\n\n            Collector.MetricFamilySamples.Sample sample = new Collector.MetricFamilySamples.Sample(name, labelNames, labelValues, value);\n\n            if (!metricFamilySamplesMap.get(name).samples.contains(sample)) {\n              metricFamilySamplesMap.get(name).samples.add(sample);\n            }\n          }\n        } catch (JsonQueryException e) {\n          this.log.error(e.toString() + \" \" + q.toString());\n          SolrExporter.scrapeErrorTotal.inc();\n        }\n      }\n    } catch (HttpSolrClient.RemoteSolrException | IOException e) {\n      this.log.error(\"failed to request: \" + e.toString());\n    } catch (Exception e) {\n      this.log.error(e.toString());\n      e.printStackTrace();\n    }\n\n    return metricFamilySamplesMap;\n  }\n\n","sourceOld":"  /**\n   * Collect facet count.\n   */\n  public Map<String, Collector.MetricFamilySamples> collectResponse(SolrClient solrClient, LinkedHashMap conf) {\n    Map<String, Collector.MetricFamilySamples> metricFamilySamplesMap = new LinkedHashMap<>();\n\n    try {\n      // create Solr request parameters\n      LinkedHashMap confQuery = (LinkedHashMap) conf.get(\"query\");\n      LinkedHashMap confParams = (LinkedHashMap) confQuery.get(\"params\");\n      String path = (String) confQuery.get(\"path\");\n      String core = (String) confQuery.get(\"core\");\n      String collection = (String) confQuery.get(\"collection\");\n      ArrayList<String> jsonQueries = (ArrayList<String>) conf.get(\"jsonQueries\");\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      if (confParams != null) {\n        for (Object k : confParams.keySet()) {\n          String name = (String) k;\n          String value = (String) confParams.get(k);\n          params.add(name, value);\n        }\n      }\n\n      // create Solr queryConfig request\n      QueryRequest queryRequest = new QueryRequest(params);\n      queryRequest.setPath(path);\n\n      // request to Solr\n      NamedList<Object> queryResponse = null;\n      try {\n        if (core == null && collection == null) {\n          queryResponse = solrClient.request(queryRequest);\n        } else if (core != null) {\n          queryResponse = solrClient.request(queryRequest, core);\n        } else if (collection != null) {\n          queryResponse = solrClient.request(queryRequest, collection);\n        }\n      } catch (SolrServerException | IOException e) {\n        this.logger.error(\"failed to request: \" + queryRequest.getPath() + \" \" + e.getMessage());\n      }\n\n      ObjectMapper om = new ObjectMapper();\n\n      JsonNode metricsJson = om.readTree((String) queryResponse.get(\"response\"));\n\n      List<JsonQuery> jqs = new ArrayList<>();\n      if (jsonQueries != null) {\n        for (String jsonQuery : jsonQueries) {\n          JsonQuery compiledJsonQuery = JsonQuery.compile(jsonQuery);\n          jqs.add(compiledJsonQuery);\n        }\n      }\n\n      for (int i = 0; i < jqs.size(); i++) {\n        JsonQuery q = jqs.get(i);\n        try {\n          List<JsonNode> results = q.apply(metricsJson);\n          for (JsonNode result : results) {\n            String type = result.get(\"type\").textValue();\n            String name = result.get(\"name\").textValue();\n            String help = result.get(\"help\").textValue();\n            Double value = result.get(\"value\").doubleValue();\n            ArrayList<String> labelNames = new ArrayList<>(this.labelNames);\n            ArrayList<String> labelValues = new ArrayList<>(this.labelValues);\n\n            if (solrClient instanceof CloudSolrClient) {\n              labelNames.add(\"zk_host\");\n              labelValues.add(((CloudSolrClient) solrClient).getZkHost());\n            }\n\n            if (collection != null) {\n              labelNames.add(\"collection\");\n              labelValues.add(collection);\n            }\n\n            if (solrClient instanceof HttpSolrClient) {\n              labelNames.add(\"base_url\");\n              labelValues.add(((HttpSolrClient) solrClient).getBaseURL());\n            }\n\n            if (core != null) {\n              labelNames.add(\"core\");\n              labelValues.add(core);\n            }\n\n            for(Iterator<JsonNode> ite = result.get(\"label_names\").iterator();ite.hasNext();){\n              JsonNode item = ite.next();\n              labelNames.add(item.textValue());\n            }\n            for(Iterator<JsonNode> ite = result.get(\"label_values\").iterator();ite.hasNext();){\n              JsonNode item = ite.next();\n              labelValues.add(item.textValue());\n            }\n\n            if (labelNames.indexOf(\"core\") < 0 && labelNames.indexOf(\"collection\") >= 0 && labelNames.indexOf(\"shard\") >= 0 && labelNames.indexOf(\"replica\") >= 0) {\n              StringBuffer sb = new StringBuffer();\n              sb.append(labelValues.get(labelNames.indexOf(\"collection\")))\n                  .append(\"_\")\n                  .append(labelValues.get(labelNames.indexOf(\"shard\")))\n                  .append(\"_\")\n                  .append(labelValues.get(labelNames.indexOf(\"replica\")));\n\n              labelNames.add(\"core\");\n              labelValues.add(sb.toString());\n            }\n\n            if (!metricFamilySamplesMap.containsKey(name)) {\n              Collector.MetricFamilySamples metricFamilySamples = new Collector.MetricFamilySamples(\n                name,\n                Collector.Type.valueOf(type),\n                help,\n                new ArrayList<>()\n              );\n              metricFamilySamplesMap.put(name, metricFamilySamples);\n            }\n\n            Collector.MetricFamilySamples.Sample sample = new Collector.MetricFamilySamples.Sample(name, labelNames, labelValues, value);\n\n            if (!metricFamilySamplesMap.get(name).samples.contains(sample)) {\n              metricFamilySamplesMap.get(name).samples.add(sample);\n            }\n          }\n        } catch (JsonQueryException e) {\n          this.logger.error(e.toString() + \" \" + q.toString());\n          SolrExporter.scrapeErrorTotal.inc();\n        }\n      }\n    } catch (HttpSolrClient.RemoteSolrException | IOException e) {\n      this.logger.error(\"failed to request: \" + e.toString());\n    } catch (Exception e) {\n      this.logger.error(e.toString());\n      e.printStackTrace();\n    }\n\n    return metricFamilySamplesMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cd8a9425419baa85ef4a56ed411ffb4c57964d3","date":1551677567,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/SolrScraper#collectResponse(SolrClient,LinkedHashMap).mjava","sourceNew":null,"sourceOld":"  /**\n   * Collect facet count.\n   */\n  public Map<String, Collector.MetricFamilySamples> collectResponse(SolrClient solrClient, LinkedHashMap conf) {\n    Map<String, Collector.MetricFamilySamples> metricFamilySamplesMap = new LinkedHashMap<>();\n\n    try {\n      // create Solr request parameters\n      LinkedHashMap confQuery = (LinkedHashMap) conf.get(\"query\");\n      LinkedHashMap confParams = (LinkedHashMap) confQuery.get(\"params\");\n      String path = (String) confQuery.get(\"path\");\n      String core = (String) confQuery.get(\"core\");\n      String collection = (String) confQuery.get(\"collection\");\n      ArrayList<String> jsonQueries = (ArrayList<String>) conf.get(\"jsonQueries\");\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      if (confParams != null) {\n        for (Object k : confParams.keySet()) {\n          String name = (String) k;\n          String value = (String) confParams.get(k);\n          params.add(name, value);\n        }\n      }\n\n      // create Solr queryConfig request\n      QueryRequest queryRequest = new QueryRequest(params);\n      queryRequest.setPath(path);\n\n      // request to Solr\n      NamedList<Object> queryResponse = null;\n      try {\n        if (core == null && collection == null) {\n          queryResponse = solrClient.request(queryRequest);\n        } else if (core != null) {\n          queryResponse = solrClient.request(queryRequest, core);\n        } else if (collection != null) {\n          queryResponse = solrClient.request(queryRequest, collection);\n        }\n      } catch (SolrServerException | IOException e) {\n        this.log.error(\"failed to request: \" + queryRequest.getPath() + \" \" + e.getMessage());\n      }\n\n      ObjectMapper om = new ObjectMapper();\n\n      JsonNode metricsJson = om.readTree((String) queryResponse.get(\"response\"));\n\n      List<JsonQuery> jqs = new ArrayList<>();\n      if (jsonQueries != null) {\n        for (String jsonQuery : jsonQueries) {\n          JsonQuery compiledJsonQuery = JsonQuery.compile(jsonQuery);\n          jqs.add(compiledJsonQuery);\n        }\n      }\n\n      for (int i = 0; i < jqs.size(); i++) {\n        JsonQuery q = jqs.get(i);\n        try {\n          List<JsonNode> results = q.apply(metricsJson);\n          for (JsonNode result : results) {\n            String type = result.get(\"type\").textValue();\n            String name = result.get(\"name\").textValue();\n            String help = result.get(\"help\").textValue();\n            Double value = result.get(\"value\").doubleValue();\n            ArrayList<String> labelNames = new ArrayList<>(this.labelNames);\n            ArrayList<String> labelValues = new ArrayList<>(this.labelValues);\n\n            if (solrClient instanceof CloudSolrClient) {\n              labelNames.add(\"zk_host\");\n              labelValues.add(((CloudSolrClient) solrClient).getZkHost());\n            }\n\n            if (collection != null) {\n              labelNames.add(\"collection\");\n              labelValues.add(collection);\n            }\n\n            if (solrClient instanceof HttpSolrClient) {\n              labelNames.add(\"base_url\");\n              labelValues.add(((HttpSolrClient) solrClient).getBaseURL());\n            }\n\n            if (core != null) {\n              labelNames.add(\"core\");\n              labelValues.add(core);\n            }\n\n            for(Iterator<JsonNode> ite = result.get(\"label_names\").iterator();ite.hasNext();){\n              JsonNode item = ite.next();\n              labelNames.add(item.textValue());\n            }\n            for(Iterator<JsonNode> ite = result.get(\"label_values\").iterator();ite.hasNext();){\n              JsonNode item = ite.next();\n              labelValues.add(item.textValue());\n            }\n\n            if (labelNames.indexOf(\"core\") < 0 && labelNames.indexOf(\"collection\") >= 0 && labelNames.indexOf(\"shard\") >= 0 && labelNames.indexOf(\"replica\") >= 0) {\n              StringBuffer sb = new StringBuffer();\n              sb.append(labelValues.get(labelNames.indexOf(\"collection\")))\n                  .append(\"_\")\n                  .append(labelValues.get(labelNames.indexOf(\"shard\")))\n                  .append(\"_\")\n                  .append(labelValues.get(labelNames.indexOf(\"replica\")));\n\n              labelNames.add(\"core\");\n              labelValues.add(sb.toString());\n            }\n\n            if (!metricFamilySamplesMap.containsKey(name)) {\n              Collector.MetricFamilySamples metricFamilySamples = new Collector.MetricFamilySamples(\n                name,\n                Collector.Type.valueOf(type),\n                help,\n                new ArrayList<>()\n              );\n              metricFamilySamplesMap.put(name, metricFamilySamples);\n            }\n\n            Collector.MetricFamilySamples.Sample sample = new Collector.MetricFamilySamples.Sample(name, labelNames, labelValues, value);\n\n            if (!metricFamilySamplesMap.get(name).samples.contains(sample)) {\n              metricFamilySamplesMap.get(name).samples.add(sample);\n            }\n          }\n        } catch (JsonQueryException e) {\n          this.log.error(e.toString() + \" \" + q.toString());\n          SolrExporter.scrapeErrorTotal.inc();\n        }\n      }\n    } catch (HttpSolrClient.RemoteSolrException | IOException e) {\n      this.log.error(\"failed to request: \" + e.toString());\n    } catch (Exception e) {\n      this.log.error(e.toString());\n      e.printStackTrace();\n    }\n\n    return metricFamilySamplesMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["f1a927b2bca4e3939de1ef05d142c13cee9c1245","f18e0fcd4f3356dffc51840f1d11607f930a1b86"],"f1a927b2bca4e3939de1ef05d142c13cee9c1245":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f18e0fcd4f3356dffc51840f1d11607f930a1b86":["f1a927b2bca4e3939de1ef05d142c13cee9c1245"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cd8a9425419baa85ef4a56ed411ffb4c57964d3"],"4cd8a9425419baa85ef4a56ed411ffb4c57964d3":["f18e0fcd4f3356dffc51840f1d11607f930a1b86"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["f1a927b2bca4e3939de1ef05d142c13cee9c1245","f18e0fcd4f3356dffc51840f1d11607f930a1b86"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"f1a927b2bca4e3939de1ef05d142c13cee9c1245":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","f18e0fcd4f3356dffc51840f1d11607f930a1b86","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"f18e0fcd4f3356dffc51840f1d11607f930a1b86":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4cd8a9425419baa85ef4a56ed411ffb4c57964d3","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f1a927b2bca4e3939de1ef05d142c13cee9c1245"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"4cd8a9425419baa85ef4a56ed411ffb4c57964d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}