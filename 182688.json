{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#readNumericEntry(IndexInput).mjava","commits":[{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#readNumericEntry(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#readNumericEntry(IndexInput).mjava","sourceNew":"  private NumericEntry readNumericEntry(IndexInput meta) throws IOException {\n    NumericEntry entry = new NumericEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.offset = meta.readLong();\n    entry.count = meta.readVLong();\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n        entry.minValue = meta.readLong();\n        if (entry.count > Integer.MAX_VALUE) {\n          // currently just a limitation e.g. of bits interface and so on.\n          throw new CorruptIndexException(\"illegal CONST_COMPRESSED count: \" + entry.count, meta);\n        }\n        break;\n      case GCD_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.gcd = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case TABLE_COMPRESSED:\n        final int uniqueValues = meta.readVInt();\n        if (uniqueValues > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + uniqueValues, meta);\n        }\n        entry.table = new long[uniqueValues];\n        for (int i = 0; i < uniqueValues; ++i) {\n          entry.table[i] = meta.readLong();\n        }\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.table));\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case DELTA_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case MONOTONIC_COMPRESSED:\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\", meta);\n    }\n    entry.endOffset = meta.readLong();\n    return entry;\n  }\n\n","sourceOld":"  private NumericEntry readNumericEntry(IndexInput meta) throws IOException {\n    NumericEntry entry = new NumericEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.offset = meta.readLong();\n    entry.count = meta.readVLong();\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n        entry.minValue = meta.readLong();\n        if (entry.count > Integer.MAX_VALUE) {\n          // currently just a limitation e.g. of bits interface and so on.\n          throw new CorruptIndexException(\"illegal CONST_COMPRESSED count: \" + entry.count, meta);\n        }\n        break;\n      case GCD_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.gcd = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case TABLE_COMPRESSED:\n        final int uniqueValues = meta.readVInt();\n        if (uniqueValues > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + uniqueValues, meta);\n        }\n        entry.table = new long[uniqueValues];\n        for (int i = 0; i < uniqueValues; ++i) {\n          entry.table[i] = meta.readLong();\n        }\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.table));\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case DELTA_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case MONOTONIC_COMPRESSED:\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\", meta);\n    }\n    entry.endOffset = meta.readLong();\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7","date":1472142029,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#readNumericEntry(IndexInput).mjava","sourceNew":null,"sourceOld":"  private NumericEntry readNumericEntry(IndexInput meta) throws IOException {\n    NumericEntry entry = new NumericEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.offset = meta.readLong();\n    entry.count = meta.readVLong();\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n        entry.minValue = meta.readLong();\n        if (entry.count > Integer.MAX_VALUE) {\n          // currently just a limitation e.g. of bits interface and so on.\n          throw new CorruptIndexException(\"illegal CONST_COMPRESSED count: \" + entry.count, meta);\n        }\n        break;\n      case GCD_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.gcd = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case TABLE_COMPRESSED:\n        final int uniqueValues = meta.readVInt();\n        if (uniqueValues > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + uniqueValues, meta);\n        }\n        entry.table = new long[uniqueValues];\n        for (int i = 0; i < uniqueValues; ++i) {\n          entry.table[i] = meta.readLong();\n        }\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.table));\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case DELTA_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case MONOTONIC_COMPRESSED:\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\", meta);\n    }\n    entry.endOffset = meta.readLong();\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#readNumericEntry(IndexInput).mjava","sourceNew":null,"sourceOld":"  private NumericEntry readNumericEntry(IndexInput meta) throws IOException {\n    NumericEntry entry = new NumericEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.offset = meta.readLong();\n    entry.count = meta.readVLong();\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n        entry.minValue = meta.readLong();\n        if (entry.count > Integer.MAX_VALUE) {\n          // currently just a limitation e.g. of bits interface and so on.\n          throw new CorruptIndexException(\"illegal CONST_COMPRESSED count: \" + entry.count, meta);\n        }\n        break;\n      case GCD_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.gcd = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case TABLE_COMPRESSED:\n        final int uniqueValues = meta.readVInt();\n        if (uniqueValues > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + uniqueValues, meta);\n        }\n        entry.table = new long[uniqueValues];\n        for (int i = 0; i < uniqueValues; ++i) {\n          entry.table[i] = meta.readLong();\n        }\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.table));\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case DELTA_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case MONOTONIC_COMPRESSED:\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\", meta);\n    }\n    entry.endOffset = meta.readLong();\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#readNumericEntry(IndexInput).mjava","sourceNew":null,"sourceOld":"  private NumericEntry readNumericEntry(IndexInput meta) throws IOException {\n    NumericEntry entry = new NumericEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.offset = meta.readLong();\n    entry.count = meta.readVLong();\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n        entry.minValue = meta.readLong();\n        if (entry.count > Integer.MAX_VALUE) {\n          // currently just a limitation e.g. of bits interface and so on.\n          throw new CorruptIndexException(\"illegal CONST_COMPRESSED count: \" + entry.count, meta);\n        }\n        break;\n      case GCD_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.gcd = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case TABLE_COMPRESSED:\n        final int uniqueValues = meta.readVInt();\n        if (uniqueValues > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + uniqueValues, meta);\n        }\n        entry.table = new long[uniqueValues];\n        for (int i = 0; i < uniqueValues; ++i) {\n          entry.table[i] = meta.readLong();\n        }\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.table));\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case DELTA_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case MONOTONIC_COMPRESSED:\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\", meta);\n    }\n    entry.endOffset = meta.readLong();\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a870f9917149dc600c4ad4417d615c1795de5864":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["a870f9917149dc600c4ad4417d615c1795de5864","52a55f5afb81e4ca7ec581bf1a7b8218204e8af7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a870f9917149dc600c4ad4417d615c1795de5864","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7":["a870f9917149dc600c4ad4417d615c1795de5864"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a870f9917149dc600c4ad4417d615c1795de5864"],"a870f9917149dc600c4ad4417d615c1795de5864":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","52a55f5afb81e4ca7ec581bf1a7b8218204e8af7"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}