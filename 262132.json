{"path":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","sourceNew":"  /** Lower-level search API.\n  *\n  * <p>{@link Collector#collect(int)} is called for every matching document.\n  *\n  * <p>Applications should only use this if they need <i>all</i> of the\n  * matching documents.  The high-level search API ({@link\n  * IndexSearcher#search(Query, int)}) is usually more efficient, as it skips\n  * non-high-scoring hits.\n  * <p>Note: The <code>score</code> passed to this method is a raw score.\n  * In other words, the score will not necessarily be a float whose value is\n  * between 0 and 1.\n  * @throws BooleanQuery.TooManyClauses\n  */\n  public void search(Query query, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(query), results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n  *\n  * <p>{@link Collector#collect(int)} is called for every matching document.\n  *\n  * <p>Applications should only use this if they need <i>all</i> of the\n  * matching documents.  The high-level search API ({@link\n  * IndexSearcher#search(Query, int)}) is usually more efficient, as it skips\n  * non-high-scoring hits.\n  * <p>Note: The <code>score</code> passed to this method is a raw score.\n  * In other words, the score will not necessarily be a float whose value is\n  * between 0 and 1.\n  * @throws BooleanQuery.TooManyClauses\n  */\n  public void search(Query query, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(query), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c461bb2c9e7d6d7309c180dc77d98e0fd15f5f6","date":1339237657,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","sourceNew":"  /** Lower-level search API.\n  *\n  * <p>{@link Collector#collect(int)} is called for every matching document.\n  *\n  * @throws BooleanQuery.TooManyClauses\n  */\n  public void search(Query query, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(query), results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n  *\n  * <p>{@link Collector#collect(int)} is called for every matching document.\n  *\n  * <p>Applications should only use this if they need <i>all</i> of the\n  * matching documents.  The high-level search API ({@link\n  * IndexSearcher#search(Query, int)}) is usually more efficient, as it skips\n  * non-high-scoring hits.\n  * <p>Note: The <code>score</code> passed to this method is a raw score.\n  * In other words, the score will not necessarily be a float whose value is\n  * between 0 and 1.\n  * @throws BooleanQuery.TooManyClauses\n  */\n  public void search(Query query, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(query), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching document.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(query), results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n  *\n  * <p>{@link Collector#collect(int)} is called for every matching document.\n  *\n  * @throws BooleanQuery.TooManyClauses\n  */\n  public void search(Query query, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(query), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link LeafCollector#collect(int)} is called for every matching document.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(query), results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching document.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(query), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link LeafCollector#collect(int)} is called for every matching document.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(query), results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching document.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(query), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link LeafCollector#collect(int)} is called for every matching document.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(query, results.needsScores()), results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link LeafCollector#collect(int)} is called for every matching document.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(query), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954e59be3da8dc1b046646ad7af4b466852009d3","date":1423482367,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link LeafCollector#collect(int)} is called for every matching document.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Collector results)\n    throws IOException {\n    int postingsFlags = results.needsScores() ? PostingsEnum.FLAG_FREQS : PostingsEnum.FLAG_NONE;\n    search(leafContexts, createNormalizedWeight(query, postingsFlags), results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link LeafCollector#collect(int)} is called for every matching document.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(query, results.needsScores()), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a47d642ab24da1a811adce4bda9cc52c520ca13","date":1423483323,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link LeafCollector#collect(int)} is called for every matching document.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(query, results.needsScores()), results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link LeafCollector#collect(int)} is called for every matching document.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Collector results)\n    throws IOException {\n    int postingsFlags = results.needsScores() ? PostingsEnum.FLAG_FREQS : PostingsEnum.FLAG_NONE;\n    search(leafContexts, createNormalizedWeight(query, postingsFlags), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link LeafCollector#collect(int)} is called for every matching document.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(query, results.scoreMode()), results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link LeafCollector#collect(int)} is called for every matching document.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(query, results.needsScores()), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link LeafCollector#collect(int)} is called for every matching document.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(query, results.scoreMode()), results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link LeafCollector#collect(int)} is called for every matching document.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(query, results.needsScores()), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link LeafCollector#collect(int)} is called for every matching document.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Collector results)\n    throws IOException {\n    query = rewrite(query);\n    search(leafContexts, createWeight(query, results.scoreMode(), 1), results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link LeafCollector#collect(int)} is called for every matching document.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(query, results.scoreMode()), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link LeafCollector#collect(int)} is called for every matching document.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Collector results)\n    throws IOException {\n    query = rewrite(query);\n    search(leafContexts, createWeight(query, results.scoreMode(), 1), results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link LeafCollector#collect(int)} is called for every matching document.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(query, results.scoreMode()), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36c70eb3b44de4355a7168b762cadc0f1cf194bc","date":1561542955,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link LeafCollector#collect(int)} is called for every matching document.\n   *\n   * @throws TooManyClauses If a query would exceed\n   *         {@link IndexSearcher#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Collector results)\n    throws IOException {\n    query = rewrite(query);\n    search(leafContexts, createWeight(query, results.scoreMode(), 1), results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link LeafCollector#collect(int)} is called for every matching document.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Collector results)\n    throws IOException {\n    query = rewrite(query);\n    search(leafContexts, createWeight(query, results.scoreMode(), 1), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["3c461bb2c9e7d6d7309c180dc77d98e0fd15f5f6"],"6a47d642ab24da1a811adce4bda9cc52c520ca13":["954e59be3da8dc1b046646ad7af4b466852009d3"],"fb17639909a369c1e64866842e5c213440acc17e":["ae73da626f97850c922c42736f808d0378e165f0"],"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"36c70eb3b44de4355a7168b762cadc0f1cf194bc":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"954e59be3da8dc1b046646ad7af4b466852009d3":["fb17639909a369c1e64866842e5c213440acc17e"],"417142ff08fda9cf0b72d5133e63097a166c6458":["6a47d642ab24da1a811adce4bda9cc52c520ca13","9fc47cb7b4346802411bb432f501ed0673d7119e"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"3c461bb2c9e7d6d7309c180dc77d98e0fd15f5f6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36c70eb3b44de4355a7168b762cadc0f1cf194bc"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"6a47d642ab24da1a811adce4bda9cc52c520ca13":["417142ff08fda9cf0b72d5133e63097a166c6458","9fc47cb7b4346802411bb432f501ed0673d7119e"],"fb17639909a369c1e64866842e5c213440acc17e":["954e59be3da8dc1b046646ad7af4b466852009d3"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3c461bb2c9e7d6d7309c180dc77d98e0fd15f5f6"],"954e59be3da8dc1b046646ad7af4b466852009d3":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"36c70eb3b44de4355a7168b762cadc0f1cf194bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"417142ff08fda9cf0b72d5133e63097a166c6458":["475584d5e08a22ad3fc7babefe006d77bc744567","d58e44159788900f4a2113b84463dc3fbbf80f20"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["36c70eb3b44de4355a7168b762cadc0f1cf194bc"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae73da626f97850c922c42736f808d0378e165f0":["fb17639909a369c1e64866842e5c213440acc17e","15e323346eac5e4685c0a9f2df85eb96b4239bbb"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"3c461bb2c9e7d6d7309c180dc77d98e0fd15f5f6":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}