{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#makeDocument(int).mjava","commits":[{"id":"b2e70b697d9f5a6130848741a4f0cdc08a1fe258","date":1168661303,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#makeDocument(int).mjava","pathOld":"/dev/null","sourceNew":"  /** \r\n   * Create the next document, of the given size by input bytes.\r\n   * If the implementation does not support control over size, an exception is thrown.\r\n   * @param size size of document, or 0 if there is no size requirement.\r\n   * @exception if cannot make the document, or if size>0 was specified but this feature is not supported.\r\n   */ \r\n  public Document makeDocument (int size) throws Exception;\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3738fa43eaa87dc7b393fe98b04cde1019e20bac","date":1175557034,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#makeDocument(int).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#makeDocument(int).mjava","sourceNew":"  /** \n   * Create the next document, of the given size by input bytes.\n   * If the implementation does not support control over size, an exception is thrown.\n   * @param size size of document, or 0 if there is no size requirement.\n   * @exception if cannot make the document, or if size>0 was specified but this feature is not supported.\n   */ \n  public Document makeDocument (int size) throws Exception;\n\n","sourceOld":"  /** \r\n   * Create the next document, of the given size by input bytes.\r\n   * If the implementation does not support control over size, an exception is thrown.\r\n   * @param size size of document, or 0 if there is no size requirement.\r\n   * @exception if cannot make the document, or if size>0 was specified but this feature is not supported.\r\n   */ \r\n  public Document makeDocument (int size) throws Exception;\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b","date":1245355139,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#makeDocument(int).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#makeDocument(int).mjava","sourceNew":"  /**\n   * Same as {@link #makeDocument()}, only this method creates a document of the\n   * given size input by <code>size</code>.\n   */\n  public Document makeDocument(int size) throws Exception {\n    LeftOver lvr = (LeftOver) leftovr.get();\n    if (lvr == null || lvr.docdata == null || lvr.docdata.getBody() == null\n        || lvr.docdata.getBody().length() == 0) {\n      resetLeftovers();\n    }\n    DocData docData = reuseFields ? getDocState().docData : localDocState.docData;\n    DocData dd = (lvr == null ? source.getNextDocData(docData) : lvr.docdata);\n    int cnt = (lvr == null ? 0 : lvr.cnt);\n    while (dd.getBody() == null || dd.getBody().length() < size) {\n      DocData dd2 = dd;\n      dd = source.getNextDocData(new DocData());\n      cnt = 0;\n      dd.setBody(dd2.getBody() + dd.getBody());\n    }\n    Document doc = createDocument(dd, size, cnt);\n    if (dd.getBody() == null || dd.getBody().length() == 0) {\n      resetLeftovers();\n    } else {\n      if (lvr == null) {\n        lvr = new LeftOver();\n        leftovr.set(lvr);\n      }\n      lvr.docdata = dd;\n      lvr.cnt = ++cnt;\n    }\n    return doc;\n  }\n\n","sourceOld":"  /** \n   * Create the next document, of the given size by input bytes.\n   * If the implementation does not support control over size, an exception is thrown.\n   * @param size size of document, or 0 if there is no size requirement.\n   * @exception if cannot make the document, or if size>0 was specified but this feature is not supported.\n   */ \n  public Document makeDocument (int size) throws Exception;\n\n","bugFix":null,"bugIntro":["1c001b73abaf2c7481f219514cc5e9e953c760b4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ffdf794cee8d43eb612df752c592cef2dc3e75ae","date":1256465578,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#makeDocument(int).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#makeDocument(int).mjava","sourceNew":"  /**\n   * Same as {@link #makeDocument()}, only this method creates a document of the\n   * given size input by <code>size</code>.\n   */\n  public Document makeDocument(int size) throws Exception {\n    LeftOver lvr = leftovr.get();\n    if (lvr == null || lvr.docdata == null || lvr.docdata.getBody() == null\n        || lvr.docdata.getBody().length() == 0) {\n      resetLeftovers();\n    }\n    DocData docData = reuseFields ? getDocState().docData : localDocState.docData;\n    DocData dd = (lvr == null ? source.getNextDocData(docData) : lvr.docdata);\n    int cnt = (lvr == null ? 0 : lvr.cnt);\n    while (dd.getBody() == null || dd.getBody().length() < size) {\n      DocData dd2 = dd;\n      dd = source.getNextDocData(new DocData());\n      cnt = 0;\n      dd.setBody(dd2.getBody() + dd.getBody());\n    }\n    Document doc = createDocument(dd, size, cnt);\n    if (dd.getBody() == null || dd.getBody().length() == 0) {\n      resetLeftovers();\n    } else {\n      if (lvr == null) {\n        lvr = new LeftOver();\n        leftovr.set(lvr);\n      }\n      lvr.docdata = dd;\n      lvr.cnt = ++cnt;\n    }\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Same as {@link #makeDocument()}, only this method creates a document of the\n   * given size input by <code>size</code>.\n   */\n  public Document makeDocument(int size) throws Exception {\n    LeftOver lvr = (LeftOver) leftovr.get();\n    if (lvr == null || lvr.docdata == null || lvr.docdata.getBody() == null\n        || lvr.docdata.getBody().length() == 0) {\n      resetLeftovers();\n    }\n    DocData docData = reuseFields ? getDocState().docData : localDocState.docData;\n    DocData dd = (lvr == null ? source.getNextDocData(docData) : lvr.docdata);\n    int cnt = (lvr == null ? 0 : lvr.cnt);\n    while (dd.getBody() == null || dd.getBody().length() < size) {\n      DocData dd2 = dd;\n      dd = source.getNextDocData(new DocData());\n      cnt = 0;\n      dd.setBody(dd2.getBody() + dd.getBody());\n    }\n    Document doc = createDocument(dd, size, cnt);\n    if (dd.getBody() == null || dd.getBody().length() == 0) {\n      resetLeftovers();\n    } else {\n      if (lvr == null) {\n        lvr = new LeftOver();\n        leftovr.set(lvr);\n      }\n      lvr.docdata = dd;\n      lvr.cnt = ++cnt;\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c001b73abaf2c7481f219514cc5e9e953c760b4","date":1256724383,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#makeDocument(int).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#makeDocument(int).mjava","sourceNew":"  /**\n   * Same as {@link #makeDocument()}, only this method creates a document of the\n   * given size input by <code>size</code>.\n   */\n  public Document makeDocument(int size) throws Exception {\n    LeftOver lvr = leftovr.get();\n    if (lvr == null || lvr.docdata == null || lvr.docdata.getBody() == null\n        || lvr.docdata.getBody().length() == 0) {\n      resetLeftovers();\n    }\n    DocData docData = getDocState().docData;\n    DocData dd = (lvr == null ? source.getNextDocData(docData) : lvr.docdata);\n    int cnt = (lvr == null ? 0 : lvr.cnt);\n    while (dd.getBody() == null || dd.getBody().length() < size) {\n      DocData dd2 = dd;\n      dd = source.getNextDocData(new DocData());\n      cnt = 0;\n      dd.setBody(dd2.getBody() + dd.getBody());\n    }\n    Document doc = createDocument(dd, size, cnt);\n    if (dd.getBody() == null || dd.getBody().length() == 0) {\n      resetLeftovers();\n    } else {\n      if (lvr == null) {\n        lvr = new LeftOver();\n        leftovr.set(lvr);\n      }\n      lvr.docdata = dd;\n      lvr.cnt = ++cnt;\n    }\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Same as {@link #makeDocument()}, only this method creates a document of the\n   * given size input by <code>size</code>.\n   */\n  public Document makeDocument(int size) throws Exception {\n    LeftOver lvr = leftovr.get();\n    if (lvr == null || lvr.docdata == null || lvr.docdata.getBody() == null\n        || lvr.docdata.getBody().length() == 0) {\n      resetLeftovers();\n    }\n    DocData docData = reuseFields ? getDocState().docData : localDocState.docData;\n    DocData dd = (lvr == null ? source.getNextDocData(docData) : lvr.docdata);\n    int cnt = (lvr == null ? 0 : lvr.cnt);\n    while (dd.getBody() == null || dd.getBody().length() < size) {\n      DocData dd2 = dd;\n      dd = source.getNextDocData(new DocData());\n      cnt = 0;\n      dd.setBody(dd2.getBody() + dd.getBody());\n    }\n    Document doc = createDocument(dd, size, cnt);\n    if (dd.getBody() == null || dd.getBody().length() == 0) {\n      resetLeftovers();\n    } else {\n      if (lvr == null) {\n        lvr = new LeftOver();\n        leftovr.set(lvr);\n      }\n      lvr.docdata = dd;\n      lvr.cnt = ++cnt;\n    }\n    return doc;\n  }\n\n","bugFix":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#makeDocument(int).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#makeDocument(int).mjava","sourceNew":"  /**\n   * Same as {@link #makeDocument()}, only this method creates a document of the\n   * given size input by <code>size</code>.\n   */\n  public Document makeDocument(int size) throws Exception {\n    LeftOver lvr = leftovr.get();\n    if (lvr == null || lvr.docdata == null || lvr.docdata.getBody() == null\n        || lvr.docdata.getBody().length() == 0) {\n      resetLeftovers();\n    }\n    DocData docData = getDocState().docData;\n    DocData dd = (lvr == null ? source.getNextDocData(docData) : lvr.docdata);\n    int cnt = (lvr == null ? 0 : lvr.cnt);\n    while (dd.getBody() == null || dd.getBody().length() < size) {\n      DocData dd2 = dd;\n      dd = source.getNextDocData(new DocData());\n      cnt = 0;\n      dd.setBody(dd2.getBody() + dd.getBody());\n    }\n    Document doc = createDocument(dd, size, cnt);\n    if (dd.getBody() == null || dd.getBody().length() == 0) {\n      resetLeftovers();\n    } else {\n      if (lvr == null) {\n        lvr = new LeftOver();\n        leftovr.set(lvr);\n      }\n      lvr.docdata = dd;\n      lvr.cnt = ++cnt;\n    }\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Same as {@link #makeDocument()}, only this method creates a document of the\n   * given size input by <code>size</code>.\n   */\n  public Document makeDocument(int size) throws Exception {\n    LeftOver lvr = leftovr.get();\n    if (lvr == null || lvr.docdata == null || lvr.docdata.getBody() == null\n        || lvr.docdata.getBody().length() == 0) {\n      resetLeftovers();\n    }\n    DocData docData = getDocState().docData;\n    DocData dd = (lvr == null ? source.getNextDocData(docData) : lvr.docdata);\n    int cnt = (lvr == null ? 0 : lvr.cnt);\n    while (dd.getBody() == null || dd.getBody().length() < size) {\n      DocData dd2 = dd;\n      dd = source.getNextDocData(new DocData());\n      cnt = 0;\n      dd.setBody(dd2.getBody() + dd.getBody());\n    }\n    Document doc = createDocument(dd, size, cnt);\n    if (dd.getBody() == null || dd.getBody().length() == 0) {\n      resetLeftovers();\n    } else {\n      if (lvr == null) {\n        lvr = new LeftOver();\n        leftovr.set(lvr);\n      }\n      lvr.docdata = dd;\n      lvr.cnt = ++cnt;\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c001b73abaf2c7481f219514cc5e9e953c760b4":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1c001b73abaf2c7481f219514cc5e9e953c760b4"]},"commit2Childs":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["1c001b73abaf2c7481f219514cc5e9e953c760b4"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"1c001b73abaf2c7481f219514cc5e9e953c760b4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}