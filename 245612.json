{"path":"lucene/src/java/org/apache/lucene/util/ReaderUtil#gatherSubReaders(List[IndexReader],IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil#gatherSubReaders(List[IndexReader],IndexReader).mjava","pathOld":"src/java/org/apache/lucene/util/ReaderUtil#gatherSubReaders(List[IndexReader],IndexReader).mjava","sourceNew":"  /**\n   * Gathers sub-readers from reader into a List.\n   * \n   * @param allSubReaders\n   * @param reader\n   */\n  public static void gatherSubReaders(List<IndexReader> allSubReaders, IndexReader reader) {\n    IndexReader[] subReaders = reader.getSequentialSubReaders();\n    if (subReaders == null) {\n      // Add the reader itself, and do not recurse\n      allSubReaders.add(reader);\n    } else {\n      for (int i = 0; i < subReaders.length; i++) {\n        gatherSubReaders(allSubReaders, subReaders[i]);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Gathers sub-readers from reader into a List.\n   * \n   * @param allSubReaders\n   * @param reader\n   */\n  public static void gatherSubReaders(List<IndexReader> allSubReaders, IndexReader reader) {\n    IndexReader[] subReaders = reader.getSequentialSubReaders();\n    if (subReaders == null) {\n      // Add the reader itself, and do not recurse\n      allSubReaders.add(reader);\n    } else {\n      for (int i = 0; i < subReaders.length; i++) {\n        gatherSubReaders(allSubReaders, subReaders[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil#gatherSubReaders(List[IndexReader],IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil#gatherSubReaders(List[IndexReader],IndexReader).mjava","sourceNew":"  /**\n   * Gathers sub-readers from reader into a List.  See\n   * {@link Gather} for are more general way to gather\n   * whatever you need to, per reader.\n   *\n   * @lucene.experimental\n   * \n   * @param allSubReaders\n   * @param reader\n   */\n\n  public static void gatherSubReaders(final List<IndexReader> allSubReaders, IndexReader reader) {\n    try {\n      new Gather(reader) {\n        @Override\n          protected void add(int base, IndexReader r) {\n          allSubReaders.add(r);\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gathers sub-readers from reader into a List.\n   * \n   * @param allSubReaders\n   * @param reader\n   */\n  public static void gatherSubReaders(List<IndexReader> allSubReaders, IndexReader reader) {\n    IndexReader[] subReaders = reader.getSequentialSubReaders();\n    if (subReaders == null) {\n      // Add the reader itself, and do not recurse\n      allSubReaders.add(reader);\n    } else {\n      for (int i = 0; i < subReaders.length; i++) {\n        gatherSubReaders(allSubReaders, subReaders[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d302ba328993a5b449c2e0b3b5e15ae53e45879","date":1281609097,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil#gatherSubReaders(List[IndexReader],IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil#gatherSubReaders(List[IndexReader],IndexReader).mjava","sourceNew":"  /**\n   * Gathers sub-readers from reader into a List.  See\n   * {@link Gather} for are more general way to gather\n   * whatever you need to, per reader.\n   *\n   * @lucene.experimental\n   * \n   * @param allSubReaders\n   * @param reader\n   */\n\n  public static void gatherSubReaders(final List<IndexReader> allSubReaders, IndexReader reader) {\n    try {\n      new Gather(reader) {\n        @Override\n        protected void add(int base, IndexReader r) {\n          allSubReaders.add(r);\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gathers sub-readers from reader into a List.  See\n   * {@link Gather} for are more general way to gather\n   * whatever you need to, per reader.\n   *\n   * @lucene.experimental\n   * \n   * @param allSubReaders\n   * @param reader\n   */\n\n  public static void gatherSubReaders(final List<IndexReader> allSubReaders, IndexReader reader) {\n    try {\n      new Gather(reader) {\n        @Override\n          protected void add(int base, IndexReader r) {\n          allSubReaders.add(r);\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil#gatherSubReaders(List[IndexReader],IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil#gatherSubReaders(List[IndexReader],IndexReader).mjava","sourceNew":"  /**\n   * Gathers sub-readers from reader into a List.  See\n   * {@link Gather} for are more general way to gather\n   * whatever you need to, per reader.\n   *\n   * @lucene.experimental\n   * \n   * @param allSubReaders\n   * @param reader\n   */\n\n  public static void gatherSubReaders(final List<IndexReader> allSubReaders, IndexReader reader) {\n    try {\n      new Gather(reader) {\n        @Override\n        protected void add(int base, IndexReader r) {\n          allSubReaders.add(r);\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gathers sub-readers from reader into a List.  See\n   * {@link Gather} for are more general way to gather\n   * whatever you need to, per reader.\n   *\n   * @lucene.experimental\n   * \n   * @param allSubReaders\n   * @param reader\n   */\n\n  public static void gatherSubReaders(final List<IndexReader> allSubReaders, IndexReader reader) {\n    try {\n      new Gather(reader) {\n        @Override\n          protected void add(int base, IndexReader r) {\n          allSubReaders.add(r);\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil#gatherSubReaders(List[AtomicIndexReader],IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil#gatherSubReaders(List[IndexReader],IndexReader).mjava","sourceNew":"  /**\n   * Gathers sub-readers from reader into a List.  See\n   * {@link Gather} for are more general way to gather\n   * whatever you need to, per reader.\n   *\n   * @lucene.experimental\n   * \n   * @param allSubReaders\n   * @param reader\n   */\n\n  public static void gatherSubReaders(final List<AtomicIndexReader> allSubReaders, IndexReader reader) {\n    try {\n      new Gather(reader) {\n        @Override\n        protected void add(int base, AtomicIndexReader r) {\n          allSubReaders.add(r);\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gathers sub-readers from reader into a List.  See\n   * {@link Gather} for are more general way to gather\n   * whatever you need to, per reader.\n   *\n   * @lucene.experimental\n   * \n   * @param allSubReaders\n   * @param reader\n   */\n\n  public static void gatherSubReaders(final List<IndexReader> allSubReaders, IndexReader reader) {\n    try {\n      new Gather(reader) {\n        @Override\n        protected void add(int base, IndexReader r) {\n          allSubReaders.add(r);\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil#gatherSubReaders(List[AtomicReader],IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil#gatherSubReaders(List[IndexReader],IndexReader).mjava","sourceNew":"  /**\n   * Gathers sub-readers from reader into a List.  See\n   * {@link Gather} for are more general way to gather\n   * whatever you need to, per reader.\n   *\n   * @lucene.experimental\n   * \n   * @param allSubReaders\n   * @param reader\n   */\n\n  public static void gatherSubReaders(final List<AtomicReader> allSubReaders, IndexReader reader) {\n    try {\n      new Gather(reader) {\n        @Override\n        protected void add(int base, AtomicReader r) {\n          allSubReaders.add(r);\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gathers sub-readers from reader into a List.  See\n   * {@link Gather} for are more general way to gather\n   * whatever you need to, per reader.\n   *\n   * @lucene.experimental\n   * \n   * @param allSubReaders\n   * @param reader\n   */\n\n  public static void gatherSubReaders(final List<IndexReader> allSubReaders, IndexReader reader) {\n    try {\n      new Gather(reader) {\n        @Override\n        protected void add(int base, IndexReader r) {\n          allSubReaders.add(r);\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["0d302ba328993a5b449c2e0b3b5e15ae53e45879","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["0d302ba328993a5b449c2e0b3b5e15ae53e45879"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["0d302ba328993a5b449c2e0b3b5e15ae53e45879","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}