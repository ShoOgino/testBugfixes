{"path":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#handleRemoteRequest(String,SolrQueryRequest).mjava","commits":[{"id":"f8f0f2472d437d44ec2144932e1d13fb494e82a3","date":1528403207,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#handleRemoteRequest(String,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  private NamedList<Object> handleRemoteRequest(String nodeName, SolrQueryRequest req) {\n    String baseUrl = Utils.getBaseUrlForNodeName(nodeName, overseerUrlScheme);\n    String url;\n    try {\n      URL u = new URL(baseUrl);\n      u = new URL(u.getProtocol(), u.getHost(), u.getPort(), \"/api/cluster/metrics/history\");\n      url = u.toString();\n    } catch (MalformedURLException e) {\n      log.warn(\"Invalid Overseer url '\" + baseUrl + \"', unable to fetch remote metrics history\", e);\n      return null;\n    }\n    // always use javabin\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    params.set(CommonParams.WT, \"javabin\");\n    url = url + \"?\" + params.toString();\n    try {\n      byte[] data = cloudManager.httpRequest(url, SolrRequest.METHOD.GET, null, null, HttpClientUtil.DEFAULT_CONNECT_TIMEOUT, true);\n      // response is always a NamedList\n      try (JavaBinCodec codec = new JavaBinCodec()) {\n        return (NamedList<Object>)codec.unmarshal(new ByteArrayInputStream(data));\n      }\n    } catch (IOException e) {\n      log.warn(\"Exception forwarding request to Overseer at \" + url, e);\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#handleRemoteRequest(String,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  private NamedList<Object> handleRemoteRequest(String nodeName, SolrQueryRequest req) {\n    String baseUrl = Utils.getBaseUrlForNodeName(nodeName, overseerUrlScheme);\n    String url;\n    try {\n      URL u = new URL(baseUrl);\n      u = new URL(u.getProtocol(), u.getHost(), u.getPort(), \"/api/cluster/metrics/history\");\n      url = u.toString();\n    } catch (MalformedURLException e) {\n      log.warn(\"Invalid Overseer url '\" + baseUrl + \"', unable to fetch remote metrics history\", e);\n      return null;\n    }\n    // always use javabin\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    params.set(CommonParams.WT, \"javabin\");\n    url = url + \"?\" + params.toString();\n    try {\n      byte[] data = cloudManager.httpRequest(url, SolrRequest.METHOD.GET, null, null, HttpClientUtil.DEFAULT_CONNECT_TIMEOUT, true);\n      // response is always a NamedList\n      try (JavaBinCodec codec = new JavaBinCodec()) {\n        return (NamedList<Object>)codec.unmarshal(new ByteArrayInputStream(data));\n      }\n    } catch (IOException e) {\n      log.warn(\"Exception forwarding request to Overseer at \" + url, e);\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#handleRemoteRequest(String,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  private NamedList<Object> handleRemoteRequest(String nodeName, SolrQueryRequest req) {\n    String baseUrl = Utils.getBaseUrlForNodeName(nodeName, overseerUrlScheme);\n    String url;\n    try {\n      URL u = new URL(baseUrl);\n      u = new URL(u.getProtocol(), u.getHost(), u.getPort(), \"/api/cluster/metrics/history\");\n      url = u.toString();\n    } catch (MalformedURLException e) {\n      log.warn(\"Invalid Overseer url '\" + baseUrl + \"', unable to fetch remote metrics history\", e);\n      return null;\n    }\n    // always use javabin\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    params.set(CommonParams.WT, \"javabin\");\n    url = url + \"?\" + params.toString();\n    try {\n      byte[] data = cloudManager.httpRequest(url, SolrRequest.METHOD.GET, null, null, HttpClientUtil.DEFAULT_CONNECT_TIMEOUT, true);\n      // response is always a NamedList\n      try (JavaBinCodec codec = new JavaBinCodec()) {\n        return (NamedList<Object>)codec.unmarshal(new ByteArrayInputStream(data));\n      }\n    } catch (IOException e) {\n      log.warn(\"Exception forwarding request to Overseer at \" + url, e);\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#handleRemoteRequest(String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#handleRemoteRequest(String,SolrQueryRequest).mjava","sourceNew":"  private NamedList<Object> handleRemoteRequest(String nodeName, SolrQueryRequest req) {\n    String baseUrl = Utils.getBaseUrlForNodeName(nodeName, overseerUrlScheme);\n    String url;\n    try {\n      URL u = new URL(baseUrl);\n      u = new URL(u.getProtocol(), u.getHost(), u.getPort(), \"/api/cluster/metrics/history\");\n      url = u.toString();\n    } catch (MalformedURLException e) {\n      log.warn(\"Invalid Overseer url '{}', unable to fetch remote metrics history\", baseUrl, e);\n      return null;\n    }\n    // always use javabin\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    params.set(CommonParams.WT, \"javabin\");\n    url = url + \"?\" + params.toString();\n    try {\n      byte[] data = cloudManager.httpRequest(url, SolrRequest.METHOD.GET, null, null, HttpClientUtil.DEFAULT_CONNECT_TIMEOUT, true);\n      // response is always a NamedList\n      try (JavaBinCodec codec = new JavaBinCodec()) {\n        return (NamedList<Object>)codec.unmarshal(new ByteArrayInputStream(data));\n      }\n    } catch (IOException e) {\n      log.warn(\"Exception forwarding request to Overseer at {}\", url, e);\n      return null;\n    }\n  }\n\n","sourceOld":"  private NamedList<Object> handleRemoteRequest(String nodeName, SolrQueryRequest req) {\n    String baseUrl = Utils.getBaseUrlForNodeName(nodeName, overseerUrlScheme);\n    String url;\n    try {\n      URL u = new URL(baseUrl);\n      u = new URL(u.getProtocol(), u.getHost(), u.getPort(), \"/api/cluster/metrics/history\");\n      url = u.toString();\n    } catch (MalformedURLException e) {\n      log.warn(\"Invalid Overseer url '\" + baseUrl + \"', unable to fetch remote metrics history\", e);\n      return null;\n    }\n    // always use javabin\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    params.set(CommonParams.WT, \"javabin\");\n    url = url + \"?\" + params.toString();\n    try {\n      byte[] data = cloudManager.httpRequest(url, SolrRequest.METHOD.GET, null, null, HttpClientUtil.DEFAULT_CONNECT_TIMEOUT, true);\n      // response is always a NamedList\n      try (JavaBinCodec codec = new JavaBinCodec()) {\n        return (NamedList<Object>)codec.unmarshal(new ByteArrayInputStream(data));\n      }\n    } catch (IOException e) {\n      log.warn(\"Exception forwarding request to Overseer at \" + url, e);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#handleRemoteRequest(String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#handleRemoteRequest(String,SolrQueryRequest).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private NamedList<Object> handleRemoteRequest(String nodeName, SolrQueryRequest req) {\n    String baseUrl = Utils.getBaseUrlForNodeName(nodeName, overseerUrlScheme);\n    String url;\n    try {\n      URL u = new URL(baseUrl);\n      u = new URL(u.getProtocol(), u.getHost(), u.getPort(), \"/api/cluster/metrics/history\");\n      url = u.toString();\n    } catch (MalformedURLException e) {\n      log.warn(\"Invalid Overseer url '{}', unable to fetch remote metrics history\", baseUrl, e);\n      return null;\n    }\n    // always use javabin\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    params.set(CommonParams.WT, \"javabin\");\n    url = url + \"?\" + params.toString();\n    try {\n      byte[] data = cloudManager.httpRequest(url, SolrRequest.METHOD.GET, null, null, HttpClientUtil.DEFAULT_CONNECT_TIMEOUT, true);\n      // response is always a NamedList\n      try (JavaBinCodec codec = new JavaBinCodec()) {\n        return (NamedList<Object>)codec.unmarshal(new ByteArrayInputStream(data));\n      }\n    } catch (IOException e) {\n      log.warn(\"Exception forwarding request to Overseer at {}\", url, e);\n      return null;\n    }\n  }\n\n","sourceOld":"  private NamedList<Object> handleRemoteRequest(String nodeName, SolrQueryRequest req) {\n    String baseUrl = Utils.getBaseUrlForNodeName(nodeName, overseerUrlScheme);\n    String url;\n    try {\n      URL u = new URL(baseUrl);\n      u = new URL(u.getProtocol(), u.getHost(), u.getPort(), \"/api/cluster/metrics/history\");\n      url = u.toString();\n    } catch (MalformedURLException e) {\n      log.warn(\"Invalid Overseer url '{}', unable to fetch remote metrics history\", baseUrl, e);\n      return null;\n    }\n    // always use javabin\n    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n    params.set(CommonParams.WT, \"javabin\");\n    url = url + \"?\" + params.toString();\n    try {\n      byte[] data = cloudManager.httpRequest(url, SolrRequest.METHOD.GET, null, null, HttpClientUtil.DEFAULT_CONNECT_TIMEOUT, true);\n      // response is always a NamedList\n      try (JavaBinCodec codec = new JavaBinCodec()) {\n        return (NamedList<Object>)codec.unmarshal(new ByteArrayInputStream(data));\n      }\n    } catch (IOException e) {\n      log.warn(\"Exception forwarding request to Overseer at {}\", url, e);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f8f0f2472d437d44ec2144932e1d13fb494e82a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"ba055e19afc289adcb5bedaf68513793a7254012":["575e66bd4b2349209027f6801184da7fc3cba13f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba055e19afc289adcb5bedaf68513793a7254012"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8f0f2472d437d44ec2144932e1d13fb494e82a3"]},"commit2Childs":{"f8f0f2472d437d44ec2144932e1d13fb494e82a3":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","575e66bd4b2349209027f6801184da7fc3cba13f","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"ba055e19afc289adcb5bedaf68513793a7254012":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8f0f2472d437d44ec2144932e1d13fb494e82a3","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"575e66bd4b2349209027f6801184da7fc3cba13f":["ba055e19afc289adcb5bedaf68513793a7254012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}