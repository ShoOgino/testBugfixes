{"path":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#loadSkipLevels().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#loadSkipLevels().mjava","pathOld":"/dev/null","sourceNew":"  /** Loads the skip levels  */\n  private void loadSkipLevels() throws IOException {\n    numberOfSkipLevels = docCount == 0 ? 0 : (int) Math.floor(Math.log(docCount) / Math.log(skipInterval[0]));\n    if (numberOfSkipLevels > maxNumberOfSkipLevels) {\n      numberOfSkipLevels = maxNumberOfSkipLevels;\n    }\n\n    skipStream[0].seek(skipPointer[0]);\n    \n    int toBuffer = numberOfLevelsToBuffer;\n    \n    for (int i = numberOfSkipLevels - 1; i > 0; i--) {\n      // the length of the current level\n      long length = skipStream[0].readVLong();\n      \n      // the start pointer of the current level\n      skipPointer[i] = skipStream[0].getFilePointer();\n      if (toBuffer > 0) {\n        // buffer this level\n        skipStream[i] = new SkipBuffer(skipStream[0], (int) length);\n        toBuffer--;\n      } else {\n        // clone this stream, it is already at the start of the current level\n        skipStream[i] = (IndexInput) skipStream[0].clone();\n        if (inputIsBuffered && length < BufferedIndexInput.BUFFER_SIZE) {\n          ((BufferedIndexInput) skipStream[i]).setBufferSize((int) length);\n        }\n        \n        // move base stream beyond the current level\n        skipStream[0].seek(skipStream[0].getFilePointer() + length);\n      }\n    }\n   \n    // use base stream for the lowest level\n    skipPointer[0] = skipStream[0].getFilePointer();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7f11e41daf233ecd42d1646234f6e7fe1d7f6c4","date":1303229616,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#loadSkipLevels().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#loadSkipLevels().mjava","sourceNew":"  /** Loads the skip levels  */\n  private void loadSkipLevels() throws IOException {\n    // TODO: would be preferable to use integer math here instead.\n    numberOfSkipLevels = docCount == 0 ? 0 : (int) Math.floor(StrictMath.log(docCount) / StrictMath.log(skipInterval[0]));\n    if (numberOfSkipLevels > maxNumberOfSkipLevels) {\n      numberOfSkipLevels = maxNumberOfSkipLevels;\n    }\n\n    skipStream[0].seek(skipPointer[0]);\n    \n    int toBuffer = numberOfLevelsToBuffer;\n    \n    for (int i = numberOfSkipLevels - 1; i > 0; i--) {\n      // the length of the current level\n      long length = skipStream[0].readVLong();\n      \n      // the start pointer of the current level\n      skipPointer[i] = skipStream[0].getFilePointer();\n      if (toBuffer > 0) {\n        // buffer this level\n        skipStream[i] = new SkipBuffer(skipStream[0], (int) length);\n        toBuffer--;\n      } else {\n        // clone this stream, it is already at the start of the current level\n        skipStream[i] = (IndexInput) skipStream[0].clone();\n        if (inputIsBuffered && length < BufferedIndexInput.BUFFER_SIZE) {\n          ((BufferedIndexInput) skipStream[i]).setBufferSize((int) length);\n        }\n        \n        // move base stream beyond the current level\n        skipStream[0].seek(skipStream[0].getFilePointer() + length);\n      }\n    }\n   \n    // use base stream for the lowest level\n    skipPointer[0] = skipStream[0].getFilePointer();\n  }\n\n","sourceOld":"  /** Loads the skip levels  */\n  private void loadSkipLevels() throws IOException {\n    numberOfSkipLevels = docCount == 0 ? 0 : (int) Math.floor(Math.log(docCount) / Math.log(skipInterval[0]));\n    if (numberOfSkipLevels > maxNumberOfSkipLevels) {\n      numberOfSkipLevels = maxNumberOfSkipLevels;\n    }\n\n    skipStream[0].seek(skipPointer[0]);\n    \n    int toBuffer = numberOfLevelsToBuffer;\n    \n    for (int i = numberOfSkipLevels - 1; i > 0; i--) {\n      // the length of the current level\n      long length = skipStream[0].readVLong();\n      \n      // the start pointer of the current level\n      skipPointer[i] = skipStream[0].getFilePointer();\n      if (toBuffer > 0) {\n        // buffer this level\n        skipStream[i] = new SkipBuffer(skipStream[0], (int) length);\n        toBuffer--;\n      } else {\n        // clone this stream, it is already at the start of the current level\n        skipStream[i] = (IndexInput) skipStream[0].clone();\n        if (inputIsBuffered && length < BufferedIndexInput.BUFFER_SIZE) {\n          ((BufferedIndexInput) skipStream[i]).setBufferSize((int) length);\n        }\n        \n        // move base stream beyond the current level\n        skipStream[0].seek(skipStream[0].getFilePointer() + length);\n      }\n    }\n   \n    // use base stream for the lowest level\n    skipPointer[0] = skipStream[0].getFilePointer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de38faa4e4684084f7308ccee476e4bf47029085","date":1303235470,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#loadSkipLevels().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#loadSkipLevels().mjava","sourceNew":"  /** Loads the skip levels  */\n  private void loadSkipLevels() throws IOException {\n    numberOfSkipLevels = log(docCount, skipInterval[0]);\n    if (numberOfSkipLevels > maxNumberOfSkipLevels) {\n      numberOfSkipLevels = maxNumberOfSkipLevels;\n    }\n\n    skipStream[0].seek(skipPointer[0]);\n    \n    int toBuffer = numberOfLevelsToBuffer;\n    \n    for (int i = numberOfSkipLevels - 1; i > 0; i--) {\n      // the length of the current level\n      long length = skipStream[0].readVLong();\n      \n      // the start pointer of the current level\n      skipPointer[i] = skipStream[0].getFilePointer();\n      if (toBuffer > 0) {\n        // buffer this level\n        skipStream[i] = new SkipBuffer(skipStream[0], (int) length);\n        toBuffer--;\n      } else {\n        // clone this stream, it is already at the start of the current level\n        skipStream[i] = (IndexInput) skipStream[0].clone();\n        if (inputIsBuffered && length < BufferedIndexInput.BUFFER_SIZE) {\n          ((BufferedIndexInput) skipStream[i]).setBufferSize((int) length);\n        }\n        \n        // move base stream beyond the current level\n        skipStream[0].seek(skipStream[0].getFilePointer() + length);\n      }\n    }\n   \n    // use base stream for the lowest level\n    skipPointer[0] = skipStream[0].getFilePointer();\n  }\n\n","sourceOld":"  /** Loads the skip levels  */\n  private void loadSkipLevels() throws IOException {\n    // TODO: would be preferable to use integer math here instead.\n    numberOfSkipLevels = docCount == 0 ? 0 : (int) Math.floor(StrictMath.log(docCount) / StrictMath.log(skipInterval[0]));\n    if (numberOfSkipLevels > maxNumberOfSkipLevels) {\n      numberOfSkipLevels = maxNumberOfSkipLevels;\n    }\n\n    skipStream[0].seek(skipPointer[0]);\n    \n    int toBuffer = numberOfLevelsToBuffer;\n    \n    for (int i = numberOfSkipLevels - 1; i > 0; i--) {\n      // the length of the current level\n      long length = skipStream[0].readVLong();\n      \n      // the start pointer of the current level\n      skipPointer[i] = skipStream[0].getFilePointer();\n      if (toBuffer > 0) {\n        // buffer this level\n        skipStream[i] = new SkipBuffer(skipStream[0], (int) length);\n        toBuffer--;\n      } else {\n        // clone this stream, it is already at the start of the current level\n        skipStream[i] = (IndexInput) skipStream[0].clone();\n        if (inputIsBuffered && length < BufferedIndexInput.BUFFER_SIZE) {\n          ((BufferedIndexInput) skipStream[i]).setBufferSize((int) length);\n        }\n        \n        // move base stream beyond the current level\n        skipStream[0].seek(skipStream[0].getFilePointer() + length);\n      }\n    }\n   \n    // use base stream for the lowest level\n    skipPointer[0] = skipStream[0].getFilePointer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#loadSkipLevels().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#loadSkipLevels().mjava","sourceNew":"  /** Loads the skip levels  */\n  private void loadSkipLevels() throws IOException {\n    numberOfSkipLevels = log(docCount, skipInterval[0]);\n    if (numberOfSkipLevels > maxNumberOfSkipLevels) {\n      numberOfSkipLevels = maxNumberOfSkipLevels;\n    }\n\n    skipStream[0].seek(skipPointer[0]);\n    \n    int toBuffer = numberOfLevelsToBuffer;\n    \n    for (int i = numberOfSkipLevels - 1; i > 0; i--) {\n      // the length of the current level\n      long length = skipStream[0].readVLong();\n      \n      // the start pointer of the current level\n      skipPointer[i] = skipStream[0].getFilePointer();\n      if (toBuffer > 0) {\n        // buffer this level\n        skipStream[i] = new SkipBuffer(skipStream[0], (int) length);\n        toBuffer--;\n      } else {\n        // clone this stream, it is already at the start of the current level\n        skipStream[i] = (IndexInput) skipStream[0].clone();\n        if (inputIsBuffered && length < BufferedIndexInput.BUFFER_SIZE) {\n          ((BufferedIndexInput) skipStream[i]).setBufferSize((int) length);\n        }\n        \n        // move base stream beyond the current level\n        skipStream[0].seek(skipStream[0].getFilePointer() + length);\n      }\n    }\n   \n    // use base stream for the lowest level\n    skipPointer[0] = skipStream[0].getFilePointer();\n  }\n\n","sourceOld":"  /** Loads the skip levels  */\n  private void loadSkipLevels() throws IOException {\n    numberOfSkipLevels = docCount == 0 ? 0 : (int) Math.floor(Math.log(docCount) / Math.log(skipInterval[0]));\n    if (numberOfSkipLevels > maxNumberOfSkipLevels) {\n      numberOfSkipLevels = maxNumberOfSkipLevels;\n    }\n\n    skipStream[0].seek(skipPointer[0]);\n    \n    int toBuffer = numberOfLevelsToBuffer;\n    \n    for (int i = numberOfSkipLevels - 1; i > 0; i--) {\n      // the length of the current level\n      long length = skipStream[0].readVLong();\n      \n      // the start pointer of the current level\n      skipPointer[i] = skipStream[0].getFilePointer();\n      if (toBuffer > 0) {\n        // buffer this level\n        skipStream[i] = new SkipBuffer(skipStream[0], (int) length);\n        toBuffer--;\n      } else {\n        // clone this stream, it is already at the start of the current level\n        skipStream[i] = (IndexInput) skipStream[0].clone();\n        if (inputIsBuffered && length < BufferedIndexInput.BUFFER_SIZE) {\n          ((BufferedIndexInput) skipStream[i]).setBufferSize((int) length);\n        }\n        \n        // move base stream beyond the current level\n        skipStream[0].seek(skipStream[0].getFilePointer() + length);\n      }\n    }\n   \n    // use base stream for the lowest level\n    skipPointer[0] = skipStream[0].getFilePointer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#loadSkipLevels().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#loadSkipLevels().mjava","sourceNew":"  /** Loads the skip levels  */\n  private void loadSkipLevels() throws IOException {\n    numberOfSkipLevels = log(docCount, skipInterval[0]);\n    if (numberOfSkipLevels > maxNumberOfSkipLevels) {\n      numberOfSkipLevels = maxNumberOfSkipLevels;\n    }\n\n    skipStream[0].seek(skipPointer[0]);\n    \n    int toBuffer = numberOfLevelsToBuffer;\n    \n    for (int i = numberOfSkipLevels - 1; i > 0; i--) {\n      // the length of the current level\n      long length = skipStream[0].readVLong();\n      \n      // the start pointer of the current level\n      skipPointer[i] = skipStream[0].getFilePointer();\n      if (toBuffer > 0) {\n        // buffer this level\n        skipStream[i] = new SkipBuffer(skipStream[0], (int) length);\n        toBuffer--;\n      } else {\n        // clone this stream, it is already at the start of the current level\n        skipStream[i] = (IndexInput) skipStream[0].clone();\n        if (inputIsBuffered && length < BufferedIndexInput.BUFFER_SIZE) {\n          ((BufferedIndexInput) skipStream[i]).setBufferSize((int) length);\n        }\n        \n        // move base stream beyond the current level\n        skipStream[0].seek(skipStream[0].getFilePointer() + length);\n      }\n    }\n   \n    // use base stream for the lowest level\n    skipPointer[0] = skipStream[0].getFilePointer();\n  }\n\n","sourceOld":"  /** Loads the skip levels  */\n  private void loadSkipLevels() throws IOException {\n    numberOfSkipLevels = docCount == 0 ? 0 : (int) Math.floor(Math.log(docCount) / Math.log(skipInterval[0]));\n    if (numberOfSkipLevels > maxNumberOfSkipLevels) {\n      numberOfSkipLevels = maxNumberOfSkipLevels;\n    }\n\n    skipStream[0].seek(skipPointer[0]);\n    \n    int toBuffer = numberOfLevelsToBuffer;\n    \n    for (int i = numberOfSkipLevels - 1; i > 0; i--) {\n      // the length of the current level\n      long length = skipStream[0].readVLong();\n      \n      // the start pointer of the current level\n      skipPointer[i] = skipStream[0].getFilePointer();\n      if (toBuffer > 0) {\n        // buffer this level\n        skipStream[i] = new SkipBuffer(skipStream[0], (int) length);\n        toBuffer--;\n      } else {\n        // clone this stream, it is already at the start of the current level\n        skipStream[i] = (IndexInput) skipStream[0].clone();\n        if (inputIsBuffered && length < BufferedIndexInput.BUFFER_SIZE) {\n          ((BufferedIndexInput) skipStream[i]).setBufferSize((int) length);\n        }\n        \n        // move base stream beyond the current level\n        skipStream[0].seek(skipStream[0].getFilePointer() + length);\n      }\n    }\n   \n    // use base stream for the lowest level\n    skipPointer[0] = skipStream[0].getFilePointer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#loadSkipLevels().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#loadSkipLevels().mjava","sourceNew":"  /** Loads the skip levels  */\n  private void loadSkipLevels() throws IOException {\n    numberOfSkipLevels = log(docCount, skipInterval[0]);\n    if (numberOfSkipLevels > maxNumberOfSkipLevels) {\n      numberOfSkipLevels = maxNumberOfSkipLevels;\n    }\n\n    skipStream[0].seek(skipPointer[0]);\n    \n    int toBuffer = numberOfLevelsToBuffer;\n    \n    for (int i = numberOfSkipLevels - 1; i > 0; i--) {\n      // the length of the current level\n      long length = skipStream[0].readVLong();\n      \n      // the start pointer of the current level\n      skipPointer[i] = skipStream[0].getFilePointer();\n      if (toBuffer > 0) {\n        // buffer this level\n        skipStream[i] = new SkipBuffer(skipStream[0], (int) length);\n        toBuffer--;\n      } else {\n        // clone this stream, it is already at the start of the current level\n        skipStream[i] = (IndexInput) skipStream[0].clone();\n        if (inputIsBuffered && length < BufferedIndexInput.BUFFER_SIZE) {\n          ((BufferedIndexInput) skipStream[i]).setBufferSize((int) length);\n        }\n        \n        // move base stream beyond the current level\n        skipStream[0].seek(skipStream[0].getFilePointer() + length);\n      }\n    }\n   \n    // use base stream for the lowest level\n    skipPointer[0] = skipStream[0].getFilePointer();\n  }\n\n","sourceOld":"  /** Loads the skip levels  */\n  private void loadSkipLevels() throws IOException {\n    numberOfSkipLevels = docCount == 0 ? 0 : (int) Math.floor(Math.log(docCount) / Math.log(skipInterval[0]));\n    if (numberOfSkipLevels > maxNumberOfSkipLevels) {\n      numberOfSkipLevels = maxNumberOfSkipLevels;\n    }\n\n    skipStream[0].seek(skipPointer[0]);\n    \n    int toBuffer = numberOfLevelsToBuffer;\n    \n    for (int i = numberOfSkipLevels - 1; i > 0; i--) {\n      // the length of the current level\n      long length = skipStream[0].readVLong();\n      \n      // the start pointer of the current level\n      skipPointer[i] = skipStream[0].getFilePointer();\n      if (toBuffer > 0) {\n        // buffer this level\n        skipStream[i] = new SkipBuffer(skipStream[0], (int) length);\n        toBuffer--;\n      } else {\n        // clone this stream, it is already at the start of the current level\n        skipStream[i] = (IndexInput) skipStream[0].clone();\n        if (inputIsBuffered && length < BufferedIndexInput.BUFFER_SIZE) {\n          ((BufferedIndexInput) skipStream[i]).setBufferSize((int) length);\n        }\n        \n        // move base stream beyond the current level\n        skipStream[0].seek(skipStream[0].getFilePointer() + length);\n      }\n    }\n   \n    // use base stream for the lowest level\n    skipPointer[0] = skipStream[0].getFilePointer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/MultiLevelSkipListReader#loadSkipLevels().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#loadSkipLevels().mjava","sourceNew":"  /** Loads the skip levels  */\n  private void loadSkipLevels() throws IOException {\n    numberOfSkipLevels = log(docCount, skipInterval[0]);\n    if (numberOfSkipLevels > maxNumberOfSkipLevels) {\n      numberOfSkipLevels = maxNumberOfSkipLevels;\n    }\n\n    skipStream[0].seek(skipPointer[0]);\n    \n    int toBuffer = numberOfLevelsToBuffer;\n    \n    for (int i = numberOfSkipLevels - 1; i > 0; i--) {\n      // the length of the current level\n      long length = skipStream[0].readVLong();\n      \n      // the start pointer of the current level\n      skipPointer[i] = skipStream[0].getFilePointer();\n      if (toBuffer > 0) {\n        // buffer this level\n        skipStream[i] = new SkipBuffer(skipStream[0], (int) length);\n        toBuffer--;\n      } else {\n        // clone this stream, it is already at the start of the current level\n        skipStream[i] = (IndexInput) skipStream[0].clone();\n        if (inputIsBuffered && length < BufferedIndexInput.BUFFER_SIZE) {\n          ((BufferedIndexInput) skipStream[i]).setBufferSize((int) length);\n        }\n        \n        // move base stream beyond the current level\n        skipStream[0].seek(skipStream[0].getFilePointer() + length);\n      }\n    }\n   \n    // use base stream for the lowest level\n    skipPointer[0] = skipStream[0].getFilePointer();\n  }\n\n","sourceOld":"  /** Loads the skip levels  */\n  private void loadSkipLevels() throws IOException {\n    numberOfSkipLevels = log(docCount, skipInterval[0]);\n    if (numberOfSkipLevels > maxNumberOfSkipLevels) {\n      numberOfSkipLevels = maxNumberOfSkipLevels;\n    }\n\n    skipStream[0].seek(skipPointer[0]);\n    \n    int toBuffer = numberOfLevelsToBuffer;\n    \n    for (int i = numberOfSkipLevels - 1; i > 0; i--) {\n      // the length of the current level\n      long length = skipStream[0].readVLong();\n      \n      // the start pointer of the current level\n      skipPointer[i] = skipStream[0].getFilePointer();\n      if (toBuffer > 0) {\n        // buffer this level\n        skipStream[i] = new SkipBuffer(skipStream[0], (int) length);\n        toBuffer--;\n      } else {\n        // clone this stream, it is already at the start of the current level\n        skipStream[i] = (IndexInput) skipStream[0].clone();\n        if (inputIsBuffered && length < BufferedIndexInput.BUFFER_SIZE) {\n          ((BufferedIndexInput) skipStream[i]).setBufferSize((int) length);\n        }\n        \n        // move base stream beyond the current level\n        skipStream[0].seek(skipStream[0].getFilePointer() + length);\n      }\n    }\n   \n    // use base stream for the lowest level\n    skipPointer[0] = skipStream[0].getFilePointer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"de38faa4e4684084f7308ccee476e4bf47029085":["d7f11e41daf233ecd42d1646234f6e7fe1d7f6c4"],"a3776dccca01c11e7046323cfad46a3b4a471233":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","de38faa4e4684084f7308ccee476e4bf47029085"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","de38faa4e4684084f7308ccee476e4bf47029085"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","de38faa4e4684084f7308ccee476e4bf47029085"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["de38faa4e4684084f7308ccee476e4bf47029085"],"d7f11e41daf233ecd42d1646234f6e7fe1d7f6c4":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"de38faa4e4684084f7308ccee476e4bf47029085":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","d7f11e41daf233ecd42d1646234f6e7fe1d7f6c4"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"d7f11e41daf233ecd42d1646234f6e7fe1d7f6c4":["de38faa4e4684084f7308ccee476e4bf47029085"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}