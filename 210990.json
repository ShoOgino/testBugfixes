{"path":"lucene/backwards/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      if (d.fileExists(segment + \".\" + IndexFileNames.VECTORS_INDEX_EXTENSION)) {\n        tvx = d.openInput(segment + \".\" + IndexFileNames.VECTORS_INDEX_EXTENSION, readBufferSize);\n        format = checkValidFormat(tvx);\n        tvd = d.openInput(segment + \".\" + IndexFileNames.VECTORS_DOCUMENTS_EXTENSION, readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd);\n        tvf = d.openInput(segment + \".\" + IndexFileNames.VECTORS_FIELDS_EXTENSION, readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        if (format >= FORMAT_VERSION2) {\n          assert (tvx.length()-FORMAT_SIZE) % 16 == 0;\n          numTotalDocs = (int) (tvx.length() >> 4);\n        } else {\n          assert (tvx.length()-FORMAT_SIZE) % 8 == 0;\n          numTotalDocs = (int) (tvx.length() >> 3);\n        }\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else\n        format = 0;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      if (d.fileExists(segment + \".\" + IndexFileNames.VECTORS_INDEX_EXTENSION)) {\n        tvx = d.openInput(segment + \".\" + IndexFileNames.VECTORS_INDEX_EXTENSION, readBufferSize);\n        format = checkValidFormat(tvx);\n        tvd = d.openInput(segment + \".\" + IndexFileNames.VECTORS_DOCUMENTS_EXTENSION, readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd);\n        tvf = d.openInput(segment + \".\" + IndexFileNames.VECTORS_FIELDS_EXTENSION, readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        if (format >= FORMAT_VERSION2) {\n          assert (tvx.length()-FORMAT_SIZE) % 16 == 0;\n          numTotalDocs = (int) (tvx.length() >> 4);\n        } else {\n          assert (tvx.length()-FORMAT_SIZE) % 8 == 0;\n          numTotalDocs = (int) (tvx.length() >> 3);\n        }\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else\n        format = 0;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":null,"sourceOld":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      if (d.fileExists(segment + \".\" + IndexFileNames.VECTORS_INDEX_EXTENSION)) {\n        tvx = d.openInput(segment + \".\" + IndexFileNames.VECTORS_INDEX_EXTENSION, readBufferSize);\n        format = checkValidFormat(tvx);\n        tvd = d.openInput(segment + \".\" + IndexFileNames.VECTORS_DOCUMENTS_EXTENSION, readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd);\n        tvf = d.openInput(segment + \".\" + IndexFileNames.VECTORS_FIELDS_EXTENSION, readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        if (format >= FORMAT_VERSION2) {\n          assert (tvx.length()-FORMAT_SIZE) % 16 == 0;\n          numTotalDocs = (int) (tvx.length() >> 4);\n        } else {\n          assert (tvx.length()-FORMAT_SIZE) % 8 == 0;\n          numTotalDocs = (int) (tvx.length() >> 3);\n        }\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else\n        format = 0;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}