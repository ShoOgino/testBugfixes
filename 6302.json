{"path":"solr/core/src/java/org/apache/solr/search/GraphTermsQParserPlugin.GraphTermsQuery#rewrite(IndexReader).mjava","commits":[{"id":"4d7e42d2692288d7e3f3e38cbfcc31ef1251054d","date":1461702806,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/GraphTermsQParserPlugin.GraphTermsQuery#rewrite(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      if(this.finalContexts == null) {\n        //This query has not been re-written yet.\n        //Rewriting the query does not effect the cache key as this query is not designed to be cached.\n        this.finalContexts = new ArrayList();\n        this.finalTerms = new ArrayList();\n        List<LeafReaderContext> contexts = reader.leaves();\n        TermContext[] termContexts = new TermContext[this.queryTerms.length];\n        collectTermContext(reader, contexts, termContexts, this.queryTerms);\n        for(int i=0; i<termContexts.length; i++) {\n          TermContext termContext = termContexts[i];\n          if(termContext != null && termContext.docFreq() < this.maxDocFreq) {\n            this.finalContexts.add(termContext);\n            this.finalTerms.add(queryTerms[i]);\n          }\n        }\n      }\n\n      return this;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96","date":1461702806,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/GraphTermsQParserPlugin.GraphTermsQuery#rewrite(IndexReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/GraphTermsQParserPlugin.GraphTermsQuery#rewrite(IndexReader).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      if(this.finalContexts == null) {\n        //This query has not been re-written yet.\n        //Rewriting the query does not effect the cache key as this query is not designed to be cached.\n        this.finalContexts = new ArrayList();\n        this.finalTerms = new ArrayList();\n        List<LeafReaderContext> contexts = reader.leaves();\n        TermContext[] termContexts = new TermContext[this.queryTerms.length];\n        collectTermContext(reader, contexts, termContexts, this.queryTerms);\n        for(int i=0; i<termContexts.length; i++) {\n          TermContext termContext = termContexts[i];\n          if(termContext != null && termContext.docFreq() <= this.maxDocFreq) {\n            this.finalContexts.add(termContext);\n            this.finalTerms.add(queryTerms[i]);\n          }\n        }\n      }\n\n      return this;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      if(this.finalContexts == null) {\n        //This query has not been re-written yet.\n        //Rewriting the query does not effect the cache key as this query is not designed to be cached.\n        this.finalContexts = new ArrayList();\n        this.finalTerms = new ArrayList();\n        List<LeafReaderContext> contexts = reader.leaves();\n        TermContext[] termContexts = new TermContext[this.queryTerms.length];\n        collectTermContext(reader, contexts, termContexts, this.queryTerms);\n        for(int i=0; i<termContexts.length; i++) {\n          TermContext termContext = termContexts[i];\n          if(termContext != null && termContext.docFreq() < this.maxDocFreq) {\n            this.finalContexts.add(termContext);\n            this.finalTerms.add(queryTerms[i]);\n          }\n        }\n      }\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6a801a843f945a61e015ee9334ef03aec6b01ac","date":1461864682,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/GraphTermsQParserPlugin.GraphTermsQuery#rewrite(IndexReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/GraphTermsQParserPlugin.GraphTermsQuery#rewrite(IndexReader).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      this.finalContexts = new ArrayList();\n      this.finalTerms = new ArrayList();\n      List<LeafReaderContext> contexts = reader.leaves();\n      TermContext[] termContexts = new TermContext[this.queryTerms.length];\n      collectTermContext(reader, contexts, termContexts, this.queryTerms);\n      for(int i=0; i<termContexts.length; i++) {\n        TermContext termContext = termContexts[i];\n        if(termContext != null && termContext.docFreq() <= this.maxDocFreq) {\n          this.finalContexts.add(termContext);\n          this.finalTerms.add(queryTerms[i]);\n        }\n      }\n\n      return this;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      if(this.finalContexts == null) {\n        //This query has not been re-written yet.\n        //Rewriting the query does not effect the cache key as this query is not designed to be cached.\n        this.finalContexts = new ArrayList();\n        this.finalTerms = new ArrayList();\n        List<LeafReaderContext> contexts = reader.leaves();\n        TermContext[] termContexts = new TermContext[this.queryTerms.length];\n        collectTermContext(reader, contexts, termContexts, this.queryTerms);\n        for(int i=0; i<termContexts.length; i++) {\n          TermContext termContext = termContexts[i];\n          if(termContext != null && termContext.docFreq() <= this.maxDocFreq) {\n            this.finalContexts.add(termContext);\n            this.finalTerms.add(queryTerms[i]);\n          }\n        }\n      }\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f853d68ca2889f08e165f8f24d21e4b6c6d05a31","date":1461939217,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/GraphTermsQParserPlugin.GraphTermsQuery#rewrite(IndexReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/GraphTermsQParserPlugin.GraphTermsQuery#rewrite(IndexReader).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      return this;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      this.finalContexts = new ArrayList();\n      this.finalTerms = new ArrayList();\n      List<LeafReaderContext> contexts = reader.leaves();\n      TermContext[] termContexts = new TermContext[this.queryTerms.length];\n      collectTermContext(reader, contexts, termContexts, this.queryTerms);\n      for(int i=0; i<termContexts.length; i++) {\n        TermContext termContext = termContexts[i];\n        if(termContext != null && termContext.docFreq() <= this.maxDocFreq) {\n          this.finalContexts.add(termContext);\n          this.finalTerms.add(queryTerms[i]);\n        }\n      }\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e8d5955830d712186a4beb716e797d505af7981","date":1461951189,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/GraphTermsQParserPlugin.GraphTermsQuery#rewrite(IndexReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/GraphTermsQParserPlugin.GraphTermsQuery#rewrite(IndexReader).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      return this;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      this.finalContexts = new ArrayList();\n      this.finalTerms = new ArrayList();\n      List<LeafReaderContext> contexts = reader.leaves();\n      TermContext[] termContexts = new TermContext[this.queryTerms.length];\n      collectTermContext(reader, contexts, termContexts, this.queryTerms);\n      for(int i=0; i<termContexts.length; i++) {\n        TermContext termContext = termContexts[i];\n        if(termContext != null && termContext.docFreq() <= this.maxDocFreq) {\n          this.finalContexts.add(termContext);\n          this.finalTerms.add(queryTerms[i]);\n        }\n      }\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/GraphTermsQParserPlugin.GraphTermsQuery#rewrite(IndexReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/GraphTermsQParserPlugin.GraphTermsQuery#rewrite(IndexReader).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      return this;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      if(this.finalContexts == null) {\n        //This query has not been re-written yet.\n        //Rewriting the query does not effect the cache key as this query is not designed to be cached.\n        this.finalContexts = new ArrayList();\n        this.finalTerms = new ArrayList();\n        List<LeafReaderContext> contexts = reader.leaves();\n        TermContext[] termContexts = new TermContext[this.queryTerms.length];\n        collectTermContext(reader, contexts, termContexts, this.queryTerms);\n        for(int i=0; i<termContexts.length; i++) {\n          TermContext termContext = termContexts[i];\n          if(termContext != null && termContext.docFreq() <= this.maxDocFreq) {\n            this.finalContexts.add(termContext);\n            this.finalTerms.add(queryTerms[i]);\n          }\n        }\n      }\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f853d68ca2889f08e165f8f24d21e4b6c6d05a31":["f6a801a843f945a61e015ee9334ef03aec6b01ac"],"8e8d5955830d712186a4beb716e797d505af7981":["f6a801a843f945a61e015ee9334ef03aec6b01ac","f853d68ca2889f08e165f8f24d21e4b6c6d05a31"],"f6a801a843f945a61e015ee9334ef03aec6b01ac":["94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d7e42d2692288d7e3f3e38cbfcc31ef1251054d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96":["4d7e42d2692288d7e3f3e38cbfcc31ef1251054d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8e8d5955830d712186a4beb716e797d505af7981"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96","8e8d5955830d712186a4beb716e797d505af7981"]},"commit2Childs":{"f853d68ca2889f08e165f8f24d21e4b6c6d05a31":["8e8d5955830d712186a4beb716e797d505af7981"],"8e8d5955830d712186a4beb716e797d505af7981":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"f6a801a843f945a61e015ee9334ef03aec6b01ac":["f853d68ca2889f08e165f8f24d21e4b6c6d05a31","8e8d5955830d712186a4beb716e797d505af7981"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d7e42d2692288d7e3f3e38cbfcc31ef1251054d"],"4d7e42d2692288d7e3f3e38cbfcc31ef1251054d":["94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96"],"94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96":["f6a801a843f945a61e015ee9334ef03aec6b01ac","55b50463286869f584cf849d1587a0fcd54d1dfa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}