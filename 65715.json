{"path":"lucene/backwards/src/test/org/apache/lucene/util/TestAttributeSource#testCaptureState().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/util/TestAttributeSource#testCaptureState().mjava","pathOld":"backwards/src/test/org/apache/lucene/util/TestAttributeSource#testCaptureState().mjava","sourceNew":"  public void testCaptureState() {\n    // init a first instance\n    AttributeSource src = new AttributeSource();\n    TermAttribute termAtt = src.addAttribute(TermAttribute.class);\n    TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");\n    final int hashCode = src.hashCode();\n    \n    AttributeSource.State state = src.captureState();\n    \n    // modify the attributes\n    termAtt.setTermBuffer(\"AnotherTestTerm\");\n    typeAtt.setType(\"AnotherTestType\");\n    assertTrue(\"Hash code should be different\", hashCode != src.hashCode());\n    \n    src.restoreState(state);\n    assertEquals(\"TestTerm\", termAtt.term());\n    assertEquals(\"TestType\", typeAtt.type());\n    assertEquals(\"Hash code should be equal after restore\", hashCode, src.hashCode());\n\n    // restore into an exact configured copy\n    AttributeSource copy = new AttributeSource();\n    copy.addAttribute(TermAttribute.class);\n    copy.addAttribute(TypeAttribute.class);\n    copy.restoreState(state);\n    assertEquals(\"Both AttributeSources should have same hashCode after restore\", src.hashCode(), copy.hashCode());\n    assertEquals(\"Both AttributeSources should be equal after restore\", src, copy);\n    \n    // init a second instance (with attributes in different order and one additional attribute)\n    AttributeSource src2 = new AttributeSource();\n    typeAtt = src2.addAttribute(TypeAttribute.class);\n    FlagsAttribute flagsAtt = src2.addAttribute(FlagsAttribute.class);\n    termAtt = src2.addAttribute(TermAttribute.class);\n    flagsAtt.setFlags(12345);\n\n    src2.restoreState(state);\n    assertEquals(\"TestTerm\", termAtt.term());\n    assertEquals(\"TestType\", typeAtt.type());\n    assertEquals(\"FlagsAttribute should not be touched\", 12345, flagsAtt.getFlags());\n\n    // init a third instance missing one Attribute\n    AttributeSource src3 = new AttributeSource();\n    termAtt = src3.addAttribute(TermAttribute.class);\n    try {\n      src3.restoreState(state);\n      fail(\"The third instance is missing the TypeAttribute, so restoreState() should throw IllegalArgumentException\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n  }\n\n","sourceOld":"  public void testCaptureState() {\n    // init a first instance\n    AttributeSource src = new AttributeSource();\n    TermAttribute termAtt = src.addAttribute(TermAttribute.class);\n    TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");\n    final int hashCode = src.hashCode();\n    \n    AttributeSource.State state = src.captureState();\n    \n    // modify the attributes\n    termAtt.setTermBuffer(\"AnotherTestTerm\");\n    typeAtt.setType(\"AnotherTestType\");\n    assertTrue(\"Hash code should be different\", hashCode != src.hashCode());\n    \n    src.restoreState(state);\n    assertEquals(\"TestTerm\", termAtt.term());\n    assertEquals(\"TestType\", typeAtt.type());\n    assertEquals(\"Hash code should be equal after restore\", hashCode, src.hashCode());\n\n    // restore into an exact configured copy\n    AttributeSource copy = new AttributeSource();\n    copy.addAttribute(TermAttribute.class);\n    copy.addAttribute(TypeAttribute.class);\n    copy.restoreState(state);\n    assertEquals(\"Both AttributeSources should have same hashCode after restore\", src.hashCode(), copy.hashCode());\n    assertEquals(\"Both AttributeSources should be equal after restore\", src, copy);\n    \n    // init a second instance (with attributes in different order and one additional attribute)\n    AttributeSource src2 = new AttributeSource();\n    typeAtt = src2.addAttribute(TypeAttribute.class);\n    FlagsAttribute flagsAtt = src2.addAttribute(FlagsAttribute.class);\n    termAtt = src2.addAttribute(TermAttribute.class);\n    flagsAtt.setFlags(12345);\n\n    src2.restoreState(state);\n    assertEquals(\"TestTerm\", termAtt.term());\n    assertEquals(\"TestType\", typeAtt.type());\n    assertEquals(\"FlagsAttribute should not be touched\", 12345, flagsAtt.getFlags());\n\n    // init a third instance missing one Attribute\n    AttributeSource src3 = new AttributeSource();\n    termAtt = src3.addAttribute(TermAttribute.class);\n    try {\n      src3.restoreState(state);\n      fail(\"The third instance is missing the TypeAttribute, so restoreState() should throw IllegalArgumentException\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/util/TestAttributeSource#testCaptureState().mjava","sourceNew":null,"sourceOld":"  public void testCaptureState() {\n    // init a first instance\n    AttributeSource src = new AttributeSource();\n    TermAttribute termAtt = src.addAttribute(TermAttribute.class);\n    TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");\n    final int hashCode = src.hashCode();\n    \n    AttributeSource.State state = src.captureState();\n    \n    // modify the attributes\n    termAtt.setTermBuffer(\"AnotherTestTerm\");\n    typeAtt.setType(\"AnotherTestType\");\n    assertTrue(\"Hash code should be different\", hashCode != src.hashCode());\n    \n    src.restoreState(state);\n    assertEquals(\"TestTerm\", termAtt.term());\n    assertEquals(\"TestType\", typeAtt.type());\n    assertEquals(\"Hash code should be equal after restore\", hashCode, src.hashCode());\n\n    // restore into an exact configured copy\n    AttributeSource copy = new AttributeSource();\n    copy.addAttribute(TermAttribute.class);\n    copy.addAttribute(TypeAttribute.class);\n    copy.restoreState(state);\n    assertEquals(\"Both AttributeSources should have same hashCode after restore\", src.hashCode(), copy.hashCode());\n    assertEquals(\"Both AttributeSources should be equal after restore\", src, copy);\n    \n    // init a second instance (with attributes in different order and one additional attribute)\n    AttributeSource src2 = new AttributeSource();\n    typeAtt = src2.addAttribute(TypeAttribute.class);\n    FlagsAttribute flagsAtt = src2.addAttribute(FlagsAttribute.class);\n    termAtt = src2.addAttribute(TermAttribute.class);\n    flagsAtt.setFlags(12345);\n\n    src2.restoreState(state);\n    assertEquals(\"TestTerm\", termAtt.term());\n    assertEquals(\"TestType\", typeAtt.type());\n    assertEquals(\"FlagsAttribute should not be touched\", 12345, flagsAtt.getFlags());\n\n    // init a third instance missing one Attribute\n    AttributeSource src3 = new AttributeSource();\n    termAtt = src3.addAttribute(TermAttribute.class);\n    try {\n      src3.restoreState(state);\n      fail(\"The third instance is missing the TypeAttribute, so restoreState() should throw IllegalArgumentException\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}