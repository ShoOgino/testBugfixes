{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testGeoPrefixCoding().mjava","commits":[{"id":"62cc423073d23f01208c6cf85844dedd80011121","date":1454731549,"type":0,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testGeoPrefixCoding().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests stability of {@link GeoEncodingUtils#geoCodedToPrefixCoded}\n   */\n  public void testGeoPrefixCoding() throws Exception {\n    int numIters = atLeast(1000);\n    long hash;\n    long decodedHash;\n    BytesRefBuilder brb = new BytesRefBuilder();\n    while (numIters-- >= 0) {\n      hash = GeoEncodingUtils.mortonHash(randomLon(false), randomLat(false));\n      for (int i=32; i<64; ++i) {\n        GeoEncodingUtils.geoCodedToPrefixCoded(hash, i, brb);\n        decodedHash = GeoEncodingUtils.prefixCodedToGeoCoded(brb.get());\n        assertEquals((hash >>> i) << i, decodedHash);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testGeoPrefixCoding().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests stability of {@link GeoEncodingUtils#geoCodedToPrefixCoded}\n   */\n  public void testGeoPrefixCoding() throws Exception {\n    int numIters = atLeast(1000);\n    long hash;\n    long decodedHash;\n    BytesRefBuilder brb = new BytesRefBuilder();\n    while (numIters-- >= 0) {\n      hash = GeoEncodingUtils.mortonHash(randomLon(false), randomLat(false));\n      for (int i=32; i<64; ++i) {\n        GeoEncodingUtils.geoCodedToPrefixCoded(hash, i, brb);\n        decodedHash = GeoEncodingUtils.prefixCodedToGeoCoded(brb.get());\n        assertEquals((hash >>> i) << i, decodedHash);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":0,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testGeoPrefixCoding().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests stability of {@link GeoEncodingUtils#geoCodedToPrefixCoded}\n   */\n  public void testGeoPrefixCoding() throws Exception {\n    int numIters = atLeast(1000);\n    long hash;\n    long decodedHash;\n    BytesRefBuilder brb = new BytesRefBuilder();\n    while (numIters-- >= 0) {\n      hash = GeoEncodingUtils.mortonHash(randomLon(false), randomLat(false));\n      for (int i=32; i<64; ++i) {\n        GeoEncodingUtils.geoCodedToPrefixCoded(hash, i, brb);\n        decodedHash = GeoEncodingUtils.prefixCodedToGeoCoded(brb.get());\n        assertEquals((hash >>> i) << i, decodedHash);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testGeoPrefixCoding().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testGeoPrefixCoding().mjava","sourceNew":"  /**\n   * Tests stability of {@link GeoEncodingUtils#geoCodedToPrefixCoded}\n   */\n  public void testGeoPrefixCoding() throws Exception {\n    int numIters = atLeast(1000);\n    long hash;\n    long decodedHash;\n    BytesRefBuilder brb = new BytesRefBuilder();\n    while (numIters-- >= 0) {\n      hash = GeoEncodingUtils.mortonHash(randomLat(false), randomLon(false));\n      for (int i=32; i<64; ++i) {\n        GeoEncodingUtils.geoCodedToPrefixCoded(hash, i, brb);\n        decodedHash = GeoEncodingUtils.prefixCodedToGeoCoded(brb.get());\n        assertEquals((hash >>> i) << i, decodedHash);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests stability of {@link GeoEncodingUtils#geoCodedToPrefixCoded}\n   */\n  public void testGeoPrefixCoding() throws Exception {\n    int numIters = atLeast(1000);\n    long hash;\n    long decodedHash;\n    BytesRefBuilder brb = new BytesRefBuilder();\n    while (numIters-- >= 0) {\n      hash = GeoEncodingUtils.mortonHash(randomLon(false), randomLat(false));\n      for (int i=32; i<64; ++i) {\n        GeoEncodingUtils.geoCodedToPrefixCoded(hash, i, brb);\n        decodedHash = GeoEncodingUtils.prefixCodedToGeoCoded(brb.get());\n        assertEquals((hash >>> i) << i, decodedHash);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe","date":1459623422,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoEncodingUtils#testGeoPrefixCoding().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testGeoPrefixCoding().mjava","sourceNew":"  /**\n   * Tests stability of {@link GeoEncodingUtils#geoCodedToPrefixCoded}\n   */\n  public void testGeoPrefixCoding() throws Exception {\n    int numIters = atLeast(1000);\n    long hash;\n    long decodedHash;\n    BytesRefBuilder brb = new BytesRefBuilder();\n    while (numIters-- >= 0) {\n      hash = GeoEncodingUtils.mortonHash(nextLatitude(), nextLongitude());\n      for (int i=32; i<64; ++i) {\n        GeoEncodingUtils.geoCodedToPrefixCoded(hash, i, brb);\n        decodedHash = GeoEncodingUtils.prefixCodedToGeoCoded(brb.get());\n        assertEquals((hash >>> i) << i, decodedHash);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests stability of {@link GeoEncodingUtils#geoCodedToPrefixCoded}\n   */\n  public void testGeoPrefixCoding() throws Exception {\n    int numIters = atLeast(1000);\n    long hash;\n    long decodedHash;\n    BytesRefBuilder brb = new BytesRefBuilder();\n    while (numIters-- >= 0) {\n      hash = GeoEncodingUtils.mortonHash(randomLat(false), randomLon(false));\n      for (int i=32; i<64; ++i) {\n        GeoEncodingUtils.geoCodedToPrefixCoded(hash, i, brb);\n        decodedHash = GeoEncodingUtils.prefixCodedToGeoCoded(brb.get());\n        assertEquals((hash >>> i) << i, decodedHash);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec996bf2daff09d61a876319e8fae4aebbea58e3":["5a207d19eac354d649c3f0e2cce070017c78125e"],"5a207d19eac354d649c3f0e2cce070017c78125e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","62cc423073d23f01208c6cf85844dedd80011121"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","62cc423073d23f01208c6cf85844dedd80011121"],"62cc423073d23f01208c6cf85844dedd80011121":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"]},"commit2Childs":{"ec996bf2daff09d61a876319e8fae4aebbea58e3":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"5a207d19eac354d649c3f0e2cce070017c78125e":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","62cc423073d23f01208c6cf85844dedd80011121"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"62cc423073d23f01208c6cf85844dedd80011121":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}