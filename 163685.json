{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testConsistentOffsets().mjava","commits":[{"id":"57e34488c685935a055be1bc57b850be1e8c850d","date":1526645499,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testConsistentOffsets().mjava","pathOld":"/dev/null","sourceNew":"  public void testConsistentOffsets() throws IOException {\n\n    long seed = random().nextLong();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new NGramTokenizer();\n        TokenStream sink = new KeywordRepeatFilter(source);\n        sink = new ConditionalTokenFilter(sink, in -> new TypeTokenFilter(in, Collections.singleton(\"word\"))) {\n          Random random = new Random(seed);\n          @Override\n          protected boolean shouldFilter() throws IOException {\n            return random.nextBoolean();\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            random = new Random(seed);\n          }\n        };\n        sink = new ValidatingTokenFilter(sink, \"last stage\");\n        return new TokenStreamComponents(source, sink);\n      }\n    };\n\n    checkRandomData(random(), analyzer, 1);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db1263335c94c357c60662f41adc87c6c3a59540","date":1526911952,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testConsistentOffsets().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testConsistentOffsets().mjava","sourceNew":"  public void testConsistentOffsets() throws IOException {\n\n    long seed = random().nextLong();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new NGramTokenizer();\n        TokenStream sink = new KeywordRepeatFilter(source);\n        sink = new RandomSkippingFilter(sink, seed, in -> new TypeTokenFilter(in, Collections.singleton(\"word\")));\n        sink = new ValidatingTokenFilter(sink, \"last stage\");\n        return new TokenStreamComponents(source, sink);\n      }\n    };\n\n    checkRandomData(random(), analyzer, 1);\n\n  }\n\n","sourceOld":"  public void testConsistentOffsets() throws IOException {\n\n    long seed = random().nextLong();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new NGramTokenizer();\n        TokenStream sink = new KeywordRepeatFilter(source);\n        sink = new ConditionalTokenFilter(sink, in -> new TypeTokenFilter(in, Collections.singleton(\"word\"))) {\n          Random random = new Random(seed);\n          @Override\n          protected boolean shouldFilter() throws IOException {\n            return random.nextBoolean();\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            random = new Random(seed);\n          }\n        };\n        sink = new ValidatingTokenFilter(sink, \"last stage\");\n        return new TokenStreamComponents(source, sink);\n      }\n    };\n\n    checkRandomData(random(), analyzer, 1);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8c072c5e1c6ed1643a8c71758930b6b13ccbd43","date":1529312258,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testConsistentOffsets().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testConsistentOffsets().mjava","sourceNew":"  public void testConsistentOffsets() throws IOException {\n\n    long seed = random().nextLong();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new NGramTokenizer();\n        TokenStream sink = new ValidatingTokenFilter(new KeywordRepeatFilter(source), \"stage 0\");\n        sink = new ValidatingTokenFilter(sink, \"stage 1\");\n        sink = new RandomSkippingFilter(sink, seed, in -> new TypeTokenFilter(in, Collections.singleton(\"word\")));\n        sink = new ValidatingTokenFilter(sink, \"last stage\");\n        return new TokenStreamComponents(source, sink);\n      }\n    };\n\n    checkRandomData(random(), analyzer, 1);\n\n  }\n\n","sourceOld":"  public void testConsistentOffsets() throws IOException {\n\n    long seed = random().nextLong();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new NGramTokenizer();\n        TokenStream sink = new KeywordRepeatFilter(source);\n        sink = new RandomSkippingFilter(sink, seed, in -> new TypeTokenFilter(in, Collections.singleton(\"word\")));\n        sink = new ValidatingTokenFilter(sink, \"last stage\");\n        return new TokenStreamComponents(source, sink);\n      }\n    };\n\n    checkRandomData(random(), analyzer, 1);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testConsistentOffsets().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testConsistentOffsets().mjava","sourceNew":"  public void testConsistentOffsets() throws IOException {\n\n    long seed = random().nextLong();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new NGramTokenizer();\n        TokenStream sink = new ValidatingTokenFilter(new KeywordRepeatFilter(source), \"stage 0\");\n        sink = new ValidatingTokenFilter(sink, \"stage 1\");\n        sink = new RandomSkippingFilter(sink, seed, in -> new TypeTokenFilter(in, Collections.singleton(\"word\")));\n        sink = new ValidatingTokenFilter(sink, \"last stage\");\n        return new TokenStreamComponents(source, sink);\n      }\n    };\n\n    checkRandomData(random(), analyzer, 1);\n\n  }\n\n","sourceOld":"  public void testConsistentOffsets() throws IOException {\n\n    long seed = random().nextLong();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new NGramTokenizer();\n        TokenStream sink = new KeywordRepeatFilter(source);\n        sink = new RandomSkippingFilter(sink, seed, in -> new TypeTokenFilter(in, Collections.singleton(\"word\")));\n        sink = new ValidatingTokenFilter(sink, \"last stage\");\n        return new TokenStreamComponents(source, sink);\n      }\n    };\n\n    checkRandomData(random(), analyzer, 1);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testConsistentOffsets().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testConsistentOffsets().mjava","sourceNew":"  public void testConsistentOffsets() throws IOException {\n\n    long seed = random().nextLong();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new NGramTokenizer();\n        TokenStream sink = new ValidatingTokenFilter(new KeywordRepeatFilter(source), \"stage 0\");\n        sink = new ValidatingTokenFilter(sink, \"stage 1\");\n        sink = new RandomSkippingFilter(sink, seed, in -> new TypeTokenFilter(in, Collections.singleton(\"word\")));\n        sink = new ValidatingTokenFilter(sink, \"last stage\");\n        return new TokenStreamComponents(source, sink);\n      }\n    };\n\n    checkRandomData(random(), analyzer, 1);\n\n  }\n\n","sourceOld":"  public void testConsistentOffsets() throws IOException {\n\n    long seed = random().nextLong();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new NGramTokenizer();\n        TokenStream sink = new KeywordRepeatFilter(source);\n        sink = new RandomSkippingFilter(sink, seed, in -> new TypeTokenFilter(in, Collections.singleton(\"word\")));\n        sink = new ValidatingTokenFilter(sink, \"last stage\");\n        return new TokenStreamComponents(source, sink);\n      }\n    };\n\n    checkRandomData(random(), analyzer, 1);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"db1263335c94c357c60662f41adc87c6c3a59540":["57e34488c685935a055be1bc57b850be1e8c850d"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["db1263335c94c357c60662f41adc87c6c3a59540","b8c072c5e1c6ed1643a8c71758930b6b13ccbd43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b8c072c5e1c6ed1643a8c71758930b6b13ccbd43":["db1263335c94c357c60662f41adc87c6c3a59540"],"57e34488c685935a055be1bc57b850be1e8c850d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8c072c5e1c6ed1643a8c71758930b6b13ccbd43"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["db1263335c94c357c60662f41adc87c6c3a59540","b8c072c5e1c6ed1643a8c71758930b6b13ccbd43"]},"commit2Childs":{"db1263335c94c357c60662f41adc87c6c3a59540":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b8c072c5e1c6ed1643a8c71758930b6b13ccbd43","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57e34488c685935a055be1bc57b850be1e8c850d"],"b8c072c5e1c6ed1643a8c71758930b6b13ccbd43":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"57e34488c685935a055be1bc57b850be1e8c850d":["db1263335c94c357c60662f41adc87c6c3a59540"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}