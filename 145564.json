{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(LeafReaderContext).mjava","commits":[{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      List<Scorer> scorers = new ArrayList<>();\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context);\n        if (subScorer != null) {\n          scorers.add(subScorer);\n        }\n      }\n      if (scorers.isEmpty()) {\n        // no sub-scorers had any documents\n        return null;\n      } else if (scorers.size() == 1) {\n        // only one sub-scorer in this segment\n        return scorers.get(0);\n      } else {\n        return new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers, needsScores);\n      }\n    }\n\n","sourceOld":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      List<Scorer> scorers = new ArrayList<>();\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context, acceptDocs);\n        if (subScorer != null) {\n          scorers.add(subScorer);\n        }\n      }\n      if (scorers.isEmpty()) {\n        // no sub-scorers had any documents\n        return null;\n      } else if (scorers.size() == 1) {\n        // only one sub-scorer in this segment\n        return scorers.get(0);\n      } else {\n        return new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers, needsScores);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(LeafReaderContext).mjava","sourceNew":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      List<Scorer> scorers = new ArrayList<>();\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context);\n        if (subScorer != null) {\n          scorers.add(subScorer);\n        }\n      }\n      if (scorers.isEmpty()) {\n        // no sub-scorers had any documents\n        return null;\n      } else if (scorers.size() == 1) {\n        // only one sub-scorer in this segment\n        return scorers.get(0);\n      } else {\n        return new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers, scoreMode.needsScores());\n      }\n    }\n\n","sourceOld":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      List<Scorer> scorers = new ArrayList<>();\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context);\n        if (subScorer != null) {\n          scorers.add(subScorer);\n        }\n      }\n      if (scorers.isEmpty()) {\n        // no sub-scorers had any documents\n        return null;\n      } else if (scorers.size() == 1) {\n        // only one sub-scorer in this segment\n        return scorers.get(0);\n      } else {\n        return new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers, needsScores);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(LeafReaderContext).mjava","sourceNew":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      List<Scorer> scorers = new ArrayList<>();\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context);\n        if (subScorer != null) {\n          scorers.add(subScorer);\n        }\n      }\n      if (scorers.isEmpty()) {\n        // no sub-scorers had any documents\n        return null;\n      } else if (scorers.size() == 1) {\n        // only one sub-scorer in this segment\n        return scorers.get(0);\n      } else {\n        return new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers, scoreMode.needsScores());\n      }\n    }\n\n","sourceOld":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      List<Scorer> scorers = new ArrayList<>();\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context);\n        if (subScorer != null) {\n          scorers.add(subScorer);\n        }\n      }\n      if (scorers.isEmpty()) {\n        // no sub-scorers had any documents\n        return null;\n      } else if (scorers.size() == 1) {\n        // only one sub-scorer in this segment\n        return scorers.get(0);\n      } else {\n        return new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers, needsScores);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b559eeae2a2a767f75666f9b692659cfe1bf631","date":1533724482,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#scorer(LeafReaderContext).mjava","sourceNew":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      List<Scorer> scorers = new ArrayList<>();\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context);\n        if (subScorer != null) {\n          scorers.add(subScorer);\n        }\n      }\n      if (scorers.isEmpty()) {\n        // no sub-scorers had any documents\n        return null;\n      } else if (scorers.size() == 1) {\n        // only one sub-scorer in this segment\n        return scorers.get(0);\n      } else {\n        return new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers, scoreMode);\n      }\n    }\n\n","sourceOld":"    /** Create the scorer used to score our associated DisjunctionMaxQuery */\n    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      List<Scorer> scorers = new ArrayList<>();\n      for (Weight w : weights) {\n        // we will advance() subscorers\n        Scorer subScorer = w.scorer(context);\n        if (subScorer != null) {\n          scorers.add(subScorer);\n        }\n      }\n      if (scorers.isEmpty()) {\n        // no sub-scorers had any documents\n        return null;\n      } else if (scorers.size() == 1) {\n        // only one sub-scorer in this segment\n        return scorers.get(0);\n      } else {\n        return new DisjunctionMaxScorer(this, tieBreakerMultiplier, scorers, scoreMode.needsScores());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b559eeae2a2a767f75666f9b692659cfe1bf631":["417142ff08fda9cf0b72d5133e63097a166c6458"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b559eeae2a2a767f75666f9b692659cfe1bf631"],"417142ff08fda9cf0b72d5133e63097a166c6458":["0f4464508ee83288c8c4585b533f9faaa93aa314","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"5b559eeae2a2a767f75666f9b692659cfe1bf631":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["5b559eeae2a2a767f75666f9b692659cfe1bf631"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}